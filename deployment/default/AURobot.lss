
AURobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  0000e5ee  0000e682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e5ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  008002c0  008002c0  0000e842  2**0
                  ALLOC
  3 .stab         00000e04  00000000  00000000  0000e844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ea8  00000000  00000000  0000f648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000104f0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c0  00000000  00000000  00010501  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001a75  00000000  00000000  000107c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a142  00000000  00000000  00012236  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000023e8  00000000  00000000  0001c378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006819  00000000  00000000  0001e760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001770  00000000  00000000  00024f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000029be  00000000  00000000  000266ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 ae 69 	jmp	0xd35c	; 0xd35c <__vector_20>
      54:	0c 94 01 6a 	jmp	0xd402	; 0xd402 <__vector_21>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      6c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      70:	0c 94 24 6b 	jmp	0xd648	; 0xd648 <__vector_28>
      74:	0c 94 77 6b 	jmp	0xd6ee	; 0xd6ee <__vector_29>
      78:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      7c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      80:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      84:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      88:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <_Z8getValueEV+0xe>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__c.2859>:
     10e:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
     11e:	20 46 4c 41 53 48 0a 00                              FLASH..

00000126 <__c.2869>:
     126:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
     136:	65 72 72 6f 72 3a 20 00                             error: .

0000013e <__c.2867>:
     13e:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
     14e:	6f 72 3a 20 00                                      or: .

00000153 <__c.2865>:
     153:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
     163:	3a 20 00                                            : .

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e4       	ldi	r29, 0x40	; 64
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	12 e0       	ldi	r17, 0x02	; 2
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	ee ee       	ldi	r30, 0xEE	; 238
     17a:	f5 ee       	ldi	r31, 0xE5	; 229
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a0 3c       	cpi	r26, 0xC0	; 192
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	14 e0       	ldi	r17, 0x04	; 4
     18e:	a0 ec       	ldi	r26, 0xC0	; 192
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a0 30       	cpi	r26, 0x00	; 0
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
     1a0:	0c 94 a0 6e 	jmp	0xdd40	; 0xdd40 <exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <InitADC>:
 *      Author: parallels
 */
#include "adcutil.h"

void InitADC()
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
    ADMUX = (1 << REFS0); // For Aref=AVcc;
     1b0:	ec e7       	ldi	r30, 0x7C	; 124
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 e4       	ldi	r24, 0x40	; 64
     1b6:	80 83       	st	Z, r24
	
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); //| (1 << ADPS0); //Rrescalar div factor =128
     1b8:	ea e7       	ldi	r30, 0x7A	; 122
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	86 e8       	ldi	r24, 0x86	; 134
     1be:	80 83       	st	Z, r24
    //ADCSRB=0;
}
     1c0:	cf 91       	pop	r28
     1c2:	df 91       	pop	r29
     1c4:	08 95       	ret

000001c6 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	0f 92       	push	r0
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	89 83       	std	Y+1, r24	; 0x01
    //Select ADC Channel ch must be 0-7
    ch = ch & 0b00000111;
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	87 70       	andi	r24, 0x07	; 7
     1d6:	89 83       	std	Y+1, r24	; 0x01
  
  	//Remember to clear the bottom three bits when other channels are read.
	ADMUX = (ADMUX & 0xf8) | ch;
     1d8:	ac e7       	ldi	r26, 0x7C	; 124
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	ec e7       	ldi	r30, 0x7C	; 124
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	98 2f       	mov	r25, r24
     1e4:	98 7f       	andi	r25, 0xF8	; 248
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	89 2b       	or	r24, r25
     1ea:	8c 93       	st	X, r24

    //Start Single conversion
    ADCSRA |= (1 << ADSC);
     1ec:	aa e7       	ldi	r26, 0x7A	; 122
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	ea e7       	ldi	r30, 0x7A	; 122
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 64       	ori	r24, 0x40	; 64
     1f8:	8c 93       	st	X, r24

    //Wait for conversion to complete
    while (!(ADCSRA & (1 << ADIF)))
     1fa:	ea e7       	ldi	r30, 0x7A	; 122
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	80 71       	andi	r24, 0x10	; 16
     206:	90 70       	andi	r25, 0x00	; 0
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	b9 f3       	breq	.-18     	; 0x1fa <ReadADC+0x34>
    //Clear ADIF by writing one to it
    //Note you may be wondering why we have write one to clear it
    //This is standard way of clearing bits in io as said in datasheets.
    //The code writes '1' but it result in setting bit to '0' !!!

    ADCSRA |= (1 << ADIF);
     20c:	aa e7       	ldi	r26, 0x7A	; 122
     20e:	b0 e0       	ldi	r27, 0x00	; 0
     210:	ea e7       	ldi	r30, 0x7A	; 122
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	80 61       	ori	r24, 0x10	; 16
     218:	8c 93       	st	X, r24

    return (ADC);
     21a:	e8 e7       	ldi	r30, 0x78	; 120
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
}
     222:	0f 90       	pop	r0
     224:	cf 91       	pop	r28
     226:	df 91       	pop	r29
     228:	08 95       	ret

0000022a <fmuLoggerCache>:
#define UART_BAUD_RATE      19200      


void fmuLoggerCache(void *componentEnvironment, fmi2String instanceName,
                    fmi2Status status, fmi2String category, fmi2String message,
                    ...) {}
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <uart_initialization>:


void uart_initialization()
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	2b 97       	sbiw	r28, 0x0b	; 11
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
	unsigned int c;
    char buffer[7];
    int  num=134;
     24c:	86 e8       	ldi	r24, 0x86	; 134
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	89 83       	std	Y+1, r24	; 0x01
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
     254:	89 e1       	ldi	r24, 0x19	; 25
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 4a 6a 	call	0xd494	; 0xd494 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
     25c:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 dd 6a 	call	0xd5ba	; 0xd5ba <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
     266:	8e e0       	ldi	r24, 0x0E	; 14
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <uart_puts_p>
        
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	9a 81       	ldd	r25, Y+2	; 0x02
     272:	9e 01       	movw	r18, r28
     274:	2b 5f       	subi	r18, 0xFB	; 251
     276:	3f 4f       	sbci	r19, 0xFF	; 255
     278:	b9 01       	movw	r22, r18
     27a:	4a e0       	ldi	r20, 0x0A	; 10
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	0e 94 cc 6e 	call	0xdd98	; 0xdd98 <itoa>
    uart_puts(buffer);        // and transmit string to UART
     282:	ce 01       	movw	r24, r28
     284:	05 96       	adiw	r24, 0x05	; 5
     286:	0e 94 dd 6a 	call	0xd5ba	; 0xd5ba <uart_puts>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
     28a:	8d e0       	ldi	r24, 0x0D	; 13
     28c:	0e 94 b3 6a 	call	0xd566	; 0xd566 <uart_putc>
}
     290:	2b 96       	adiw	r28, 0x0b	; 11
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <do_one_serial_echo>:

void do_one_serial_echo()
{
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	29 97       	sbiw	r28, 0x09	; 9
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
	unsigned int c;
	char buffer[7];

	c = uart_getc();
     2b6:	0e 94 7f 6a 	call	0xd4fe	; 0xd4fe <uart_getc>
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
        if ( c & UART_NO_DATA )
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	80 70       	andi	r24, 0x00	; 0
     2c4:	91 70       	andi	r25, 0x01	; 1
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	09 f5       	brne	.+66     	; 0x30c <do_one_serial_echo+0x6a>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	9a 81       	ldd	r25, Y+2	; 0x02
     2ce:	80 70       	andi	r24, 0x00	; 0
     2d0:	90 71       	andi	r25, 0x10	; 16
     2d2:	00 97       	sbiw	r24, 0x00	; 0
     2d4:	21 f0       	breq	.+8      	; 0x2de <do_one_serial_echo+0x3c>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
     2d6:	83 e5       	ldi	r24, 0x53	; 83
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	80 70       	andi	r24, 0x00	; 0
     2e4:	98 70       	andi	r25, 0x08	; 8
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <do_one_serial_echo+0x50>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
     2ea:	8e e3       	ldi	r24, 0x3E	; 62
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	9a 81       	ldd	r25, Y+2	; 0x02
     2f6:	80 70       	andi	r24, 0x00	; 0
     2f8:	92 70       	andi	r25, 0x02	; 2
     2fa:	00 97       	sbiw	r24, 0x00	; 0
     2fc:	21 f0       	breq	.+8      	; 0x306 <do_one_serial_echo+0x64>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
     2fe:	86 e2       	ldi	r24, 0x26	; 38
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	0e 94 b3 6a 	call	0xd566	; 0xd566 <uart_putc>
        }
}
     30c:	29 96       	adiw	r28, 0x09	; 9
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	08 95       	ret

0000031e <main>:



int main()
{
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	df 93       	push	r29
     32c:	cf 93       	push	r28
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	c4 59       	subi	r28, 0x94	; 148
     334:	d0 40       	sbci	r29, 0x00	; 0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
//DDRB = 0xff;
  DDRD = 0xff;
     340:	ea e2       	ldi	r30, 0x2A	; 42
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 83       	st	Z, r24
  PORTD = 0x00;
     348:	eb e2       	ldi	r30, 0x2B	; 43
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	10 82       	st	Z, r1
  //PORTB = 0x00;



  InitADC();
     34e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <InitADC>
  uart_initialization();
     352:	0e 94 1c 01 	call	0x238	; 0x238 <uart_initialization>

  fmi2CallbackFunctions callback = {&fmuLoggerCache, NULL, NULL, NULL, NULL};
     356:	ce 01       	movw	r24, r28
     358:	4f 96       	adiw	r24, 0x1f	; 31
     35a:	c2 57       	subi	r28, 0x72	; 114
     35c:	df 4f       	sbci	r29, 0xFF	; 255
     35e:	99 83       	std	Y+1, r25	; 0x01
     360:	88 83       	st	Y, r24
     362:	ce 58       	subi	r28, 0x8E	; 142
     364:	d0 40       	sbci	r29, 0x00	; 0
     366:	e7 e1       	ldi	r30, 0x17	; 23
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	c0 57       	subi	r28, 0x70	; 112
     36c:	df 4f       	sbci	r29, 0xFF	; 255
     36e:	f9 83       	std	Y+1, r31	; 0x01
     370:	e8 83       	st	Y, r30
     372:	c0 59       	subi	r28, 0x90	; 144
     374:	d0 40       	sbci	r29, 0x00	; 0
     376:	fa e0       	ldi	r31, 0x0A	; 10
     378:	ce 56       	subi	r28, 0x6E	; 110
     37a:	df 4f       	sbci	r29, 0xFF	; 255
     37c:	f8 83       	st	Y, r31
     37e:	c2 59       	subi	r28, 0x92	; 146
     380:	d0 40       	sbci	r29, 0x00	; 0
     382:	c0 57       	subi	r28, 0x70	; 112
     384:	df 4f       	sbci	r29, 0xFF	; 255
     386:	e8 81       	ld	r30, Y
     388:	f9 81       	ldd	r31, Y+1	; 0x01
     38a:	c0 59       	subi	r28, 0x90	; 144
     38c:	d0 40       	sbci	r29, 0x00	; 0
     38e:	00 80       	ld	r0, Z
     390:	c0 57       	subi	r28, 0x70	; 112
     392:	df 4f       	sbci	r29, 0xFF	; 255
     394:	88 81       	ld	r24, Y
     396:	99 81       	ldd	r25, Y+1	; 0x01
     398:	c0 59       	subi	r28, 0x90	; 144
     39a:	d0 40       	sbci	r29, 0x00	; 0
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	c0 57       	subi	r28, 0x70	; 112
     3a0:	df 4f       	sbci	r29, 0xFF	; 255
     3a2:	99 83       	std	Y+1, r25	; 0x01
     3a4:	88 83       	st	Y, r24
     3a6:	c0 59       	subi	r28, 0x90	; 144
     3a8:	d0 40       	sbci	r29, 0x00	; 0
     3aa:	c2 57       	subi	r28, 0x72	; 114
     3ac:	df 4f       	sbci	r29, 0xFF	; 255
     3ae:	e8 81       	ld	r30, Y
     3b0:	f9 81       	ldd	r31, Y+1	; 0x01
     3b2:	ce 58       	subi	r28, 0x8E	; 142
     3b4:	d0 40       	sbci	r29, 0x00	; 0
     3b6:	00 82       	st	Z, r0
     3b8:	c2 57       	subi	r28, 0x72	; 114
     3ba:	df 4f       	sbci	r29, 0xFF	; 255
     3bc:	88 81       	ld	r24, Y
     3be:	99 81       	ldd	r25, Y+1	; 0x01
     3c0:	ce 58       	subi	r28, 0x8E	; 142
     3c2:	d0 40       	sbci	r29, 0x00	; 0
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	c2 57       	subi	r28, 0x72	; 114
     3c8:	df 4f       	sbci	r29, 0xFF	; 255
     3ca:	99 83       	std	Y+1, r25	; 0x01
     3cc:	88 83       	st	Y, r24
     3ce:	ce 58       	subi	r28, 0x8E	; 142
     3d0:	d0 40       	sbci	r29, 0x00	; 0
     3d2:	ce 56       	subi	r28, 0x6E	; 110
     3d4:	df 4f       	sbci	r29, 0xFF	; 255
     3d6:	98 81       	ld	r25, Y
     3d8:	c2 59       	subi	r28, 0x92	; 146
     3da:	d0 40       	sbci	r29, 0x00	; 0
     3dc:	91 50       	subi	r25, 0x01	; 1
     3de:	ce 56       	subi	r28, 0x6E	; 110
     3e0:	df 4f       	sbci	r29, 0xFF	; 255
     3e2:	98 83       	st	Y, r25
     3e4:	c2 59       	subi	r28, 0x92	; 146
     3e6:	d0 40       	sbci	r29, 0x00	; 0
     3e8:	ce 56       	subi	r28, 0x6E	; 110
     3ea:	df 4f       	sbci	r29, 0xFF	; 255
     3ec:	e8 81       	ld	r30, Y
     3ee:	c2 59       	subi	r28, 0x92	; 146
     3f0:	d0 40       	sbci	r29, 0x00	; 0
     3f2:	ee 23       	and	r30, r30
     3f4:	31 f6       	brne	.-116    	; 0x382 <main+0x64>
 
  //systemInit();

  //Initialize rest of the buffer.

	fmiBuffer.realBuffer[FMI_LEFTVAL] = 0.0;
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	80 93 ce 03 	sts	0x03CE, r24
     402:	90 93 cf 03 	sts	0x03CF, r25
     406:	a0 93 d0 03 	sts	0x03D0, r26
     40a:	b0 93 d1 03 	sts	0x03D1, r27
	fmiBuffer.realBuffer[FMI_RIGHTVAL] = 0.0;
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	a0 e0       	ldi	r26, 0x00	; 0
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	80 93 d2 03 	sts	0x03D2, r24
     41a:	90 93 d3 03 	sts	0x03D3, r25
     41e:	a0 93 d4 03 	sts	0x03D4, r26
     422:	b0 93 d5 03 	sts	0x03D5, r27
	fmiBuffer.realBuffer[FMI_FORWARDROTATE] = 5.0;
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	a0 ea       	ldi	r26, 0xA0	; 160
     42c:	b0 e4       	ldi	r27, 0x40	; 64
     42e:	80 93 ca 03 	sts	0x03CA, r24
     432:	90 93 cb 03 	sts	0x03CB, r25
     436:	a0 93 cc 03 	sts	0x03CC, r26
     43a:	b0 93 cd 03 	sts	0x03CD, r27
	fmiBuffer.realBuffer[FMI_SERVOLEFTOUT] = 0.0;
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	a0 e0       	ldi	r26, 0x00	; 0
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	80 93 d6 03 	sts	0x03D6, r24
     44a:	90 93 d7 03 	sts	0x03D7, r25
     44e:	a0 93 d8 03 	sts	0x03D8, r26
     452:	b0 93 d9 03 	sts	0x03D9, r27
	fmiBuffer.realBuffer[FMI_SERVORIGHTOUT] = 0.0;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e0       	ldi	r26, 0x00	; 0
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	80 93 de 03 	sts	0x03DE, r24
     462:	90 93 df 03 	sts	0x03DF, r25
     466:	a0 93 e0 03 	sts	0x03E0, r26
     46a:	b0 93 e1 03 	sts	0x03E1, r27
	fmiBuffer.realBuffer[FMI_BACKWARDROTATE] = 1.0;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a0 e8       	ldi	r26, 0x80	; 128
     474:	bf e3       	ldi	r27, 0x3F	; 63
     476:	80 93 e2 03 	sts	0x03E2, r24
     47a:	90 93 e3 03 	sts	0x03E3, r25
     47e:	a0 93 e4 03 	sts	0x03E4, r26
     482:	b0 93 e5 03 	sts	0x03E5, r27
	fmiBuffer.realBuffer[FMI_FORWARDSPEED] = 4.0;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	a0 e8       	ldi	r26, 0x80	; 128
     48c:	b0 e4       	ldi	r27, 0x40	; 64
     48e:	80 93 e6 03 	sts	0x03E6, r24
     492:	90 93 e7 03 	sts	0x03E7, r25
     496:	a0 93 e8 03 	sts	0x03E8, r26
     49a:	b0 93 e9 03 	sts	0x03E9, r27
  
	fmi2Component instReturn = fmi2Instantiate("this system", fmi2CoSimulation, _FMU_GUID, "", &callback, fmi2True, fmi2True);
     49e:	81 e2       	ldi	r24, 0x21	; 33
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	2d e2       	ldi	r18, 0x2D	; 45
     4a4:	31 e0       	ldi	r19, 0x01	; 1
     4a6:	e4 e5       	ldi	r30, 0x54	; 84
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	de 01       	movw	r26, r28
     4ac:	5f 96       	adiw	r26, 0x1f	; 31
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	a9 01       	movw	r20, r18
     4b4:	9f 01       	movw	r18, r30
     4b6:	8d 01       	movw	r16, r26
     4b8:	ee 24       	eor	r14, r14
     4ba:	ff 24       	eor	r15, r15
     4bc:	e3 94       	inc	r14
     4be:	cc 24       	eor	r12, r12
     4c0:	dd 24       	eor	r13, r13
     4c2:	c3 94       	inc	r12
     4c4:	0e 94 ad 0b 	call	0x175a	; 0x175a <fmi2Instantiate>
     4c8:	9e 8f       	std	Y+30, r25	; 0x1e
     4ca:	8d 8f       	std	Y+29, r24	; 0x1d

	if(instReturn == NULL)
     4cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	91 f4       	brne	.+36     	; 0x4f8 <main+0x1da>
		return 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
	//do_one_serial_echo();
  }


  return 0;
}
     4d8:	cc 56       	subi	r28, 0x6C	; 108
     4da:	df 4f       	sbci	r29, 0xFF	; 255
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	cf 91       	pop	r28
     4e8:	df 91       	pop	r29
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	08 95       	ret
	fmi2Component instReturn = fmi2Instantiate("this system", fmi2CoSimulation, _FMU_GUID, "", &callback, fmi2True, fmi2True);

	if(instReturn == NULL)
		return 1;

	double now = 0;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	89 8f       	std	Y+25, r24	; 0x19
     502:	9a 8f       	std	Y+26, r25	; 0x1a
     504:	ab 8f       	std	Y+27, r26	; 0x1b
     506:	bc 8f       	std	Y+28, r27	; 0x1c
	double step = 0.01;
     508:	8a e0       	ldi	r24, 0x0A	; 10
     50a:	97 ed       	ldi	r25, 0xD7	; 215
     50c:	a3 e2       	ldi	r26, 0x23	; 35
     50e:	bc e3       	ldi	r27, 0x3C	; 60
     510:	8d 8b       	std	Y+21, r24	; 0x15
     512:	9e 8b       	std	Y+22, r25	; 0x16
     514:	af 8b       	std	Y+23, r26	; 0x17
     516:	b8 8f       	std	Y+24, r27	; 0x18

	char buffer[100];
	int lm, rm, alive;

	alive = 0;
     518:	18 8a       	std	Y+16, r1	; 0x10
     51a:	1f 86       	std	Y+15, r1	; 0x0f
	//Read switch values that indicate sensor threshold crossings.
	//fmiBuffer.realBuffer[FMI_LEFTVAL] = bit_is_set(PIND, PD0) ? 200.0 : 0.0; //ReadADC(0);
    //fmiBuffer.realBuffer[FMI_RIGHTVAL] = bit_is_set(PIND, PD1) ? 200.0 : 0.0;

	// hardware sync inputs to buffer
	fmiBuffer.realBuffer[FMI_LEFTVAL] = ReadADC(0);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ReadADC>
     522:	cc 01       	movw	r24, r24
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	bc 01       	movw	r22, r24
     52a:	cd 01       	movw	r24, r26
     52c:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <__floatunsisf>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	80 93 ce 03 	sts	0x03CE, r24
     538:	90 93 cf 03 	sts	0x03CF, r25
     53c:	a0 93 d0 03 	sts	0x03D0, r26
     540:	b0 93 d1 03 	sts	0x03D1, r27
	fmiBuffer.realBuffer[FMI_RIGHTVAL] = ReadADC(1);
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ReadADC>
     54a:	cc 01       	movw	r24, r24
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	bc 01       	movw	r22, r24
     552:	cd 01       	movw	r24, r26
     554:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <__floatunsisf>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	80 93 d2 03 	sts	0x03D2, r24
     560:	90 93 d3 03 	sts	0x03D3, r25
     564:	a0 93 d4 03 	sts	0x03D4, r26
     568:	b0 93 d5 03 	sts	0x03D5, r27

    fmi2DoStep(NULL, now, step, false);	
     56c:	29 8d       	ldd	r18, Y+25	; 0x19
     56e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     570:	4b 8d       	ldd	r20, Y+27	; 0x1b
     572:	5c 8d       	ldd	r21, Y+28	; 0x1c
     574:	ed 88       	ldd	r14, Y+21	; 0x15
     576:	fe 88       	ldd	r15, Y+22	; 0x16
     578:	0f 89       	ldd	r16, Y+23	; 0x17
     57a:	18 8d       	ldd	r17, Y+24	; 0x18
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	ba 01       	movw	r22, r20
     582:	a9 01       	movw	r20, r18
     584:	98 01       	movw	r18, r16
     586:	87 01       	movw	r16, r14
     588:	ee 24       	eor	r14, r14
     58a:	ff 24       	eor	r15, r15
     58c:	0e 94 40 10 	call	0x2080	; 0x2080 <fmi2DoStep>

    now = now + step;
     590:	69 8d       	ldd	r22, Y+25	; 0x19
     592:	7a 8d       	ldd	r23, Y+26	; 0x1a
     594:	8b 8d       	ldd	r24, Y+27	; 0x1b
     596:	9c 8d       	ldd	r25, Y+28	; 0x1c
     598:	2d 89       	ldd	r18, Y+21	; 0x15
     59a:	3e 89       	ldd	r19, Y+22	; 0x16
     59c:	4f 89       	ldd	r20, Y+23	; 0x17
     59e:	58 8d       	ldd	r21, Y+24	; 0x18
     5a0:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	89 8f       	std	Y+25, r24	; 0x19
     5aa:	9a 8f       	std	Y+26, r25	; 0x1a
     5ac:	ab 8f       	std	Y+27, r26	; 0x1b
     5ae:	bc 8f       	std	Y+28, r27	; 0x1c

    // sync buffer with hardware

	lm = fmiBuffer.realBuffer[FMI_SERVOLEFTOUT] >= 4 ? 1 : 0;
     5b0:	80 91 d6 03 	lds	r24, 0x03D6
     5b4:	90 91 d7 03 	lds	r25, 0x03D7
     5b8:	a0 91 d8 03 	lds	r26, 0x03D8
     5bc:	b0 91 d9 03 	lds	r27, 0x03D9
     5c0:	1c 8a       	std	Y+20, r1	; 0x14
     5c2:	1b 8a       	std	Y+19, r1	; 0x13
     5c4:	bc 01       	movw	r22, r24
     5c6:	cd 01       	movw	r24, r26
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e8       	ldi	r20, 0x80	; 128
     5ce:	50 e4       	ldi	r21, 0x40	; 64
     5d0:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
     5d4:	88 23       	and	r24, r24
     5d6:	24 f0       	brlt	.+8      	; 0x5e0 <main+0x2c2>
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	9c 8b       	std	Y+20, r25	; 0x14
     5de:	8b 8b       	std	Y+19, r24	; 0x13
	rm = fmiBuffer.realBuffer[FMI_SERVORIGHTOUT] <= -4 ? 0 : 1;
     5e0:	80 91 de 03 	lds	r24, 0x03DE
     5e4:	90 91 df 03 	lds	r25, 0x03DF
     5e8:	a0 91 e0 03 	lds	r26, 0x03E0
     5ec:	b0 91 e1 03 	lds	r27, 0x03E1
     5f0:	c3 57       	subi	r28, 0x73	; 115
     5f2:	df 4f       	sbci	r29, 0xFF	; 255
     5f4:	18 82       	st	Y, r1
     5f6:	cd 58       	subi	r28, 0x8D	; 141
     5f8:	d0 40       	sbci	r29, 0x00	; 0
     5fa:	bc 01       	movw	r22, r24
     5fc:	cd 01       	movw	r24, r26
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e8       	ldi	r20, 0x80	; 128
     604:	50 ec       	ldi	r21, 0xC0	; 192
     606:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
     60a:	18 16       	cp	r1, r24
     60c:	34 f0       	brlt	.+12     	; 0x61a <main+0x2fc>
     60e:	f1 e0       	ldi	r31, 0x01	; 1
     610:	c3 57       	subi	r28, 0x73	; 115
     612:	df 4f       	sbci	r29, 0xFF	; 255
     614:	f8 83       	st	Y, r31
     616:	cd 58       	subi	r28, 0x8D	; 141
     618:	d0 40       	sbci	r29, 0x00	; 0
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	c3 57       	subi	r28, 0x73	; 115
     61e:	df 4f       	sbci	r29, 0xFF	; 255
     620:	98 81       	ld	r25, Y
     622:	cd 58       	subi	r28, 0x8D	; 141
     624:	d0 40       	sbci	r29, 0x00	; 0
     626:	89 27       	eor	r24, r25
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	9a 8b       	std	Y+18, r25	; 0x12
     62e:	89 8b       	std	Y+17, r24	; 0x11

    if (lm)
     630:	8b 89       	ldd	r24, Y+19	; 0x13
     632:	9c 89       	ldd	r25, Y+20	; 0x14
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	79 f0       	breq	.+30     	; 0x656 <main+0x338>
	{
		PORTD &= ~(1 << PIND3);
     638:	ab e2       	ldi	r26, 0x2B	; 43
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	eb e2       	ldi	r30, 0x2B	; 43
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	87 7f       	andi	r24, 0xF7	; 247
     644:	8c 93       	st	X, r24
		PORTD &= ~(1 << PIND4);
     646:	ab e2       	ldi	r26, 0x2B	; 43
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	eb e2       	ldi	r30, 0x2B	; 43
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8f 7e       	andi	r24, 0xEF	; 239
     652:	8c 93       	st	X, r24
     654:	0e c0       	rjmp	.+28     	; 0x672 <main+0x354>
    }
	else
	{
		PORTD |= 1 << PIND3;
     656:	ab e2       	ldi	r26, 0x2B	; 43
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	eb e2       	ldi	r30, 0x2B	; 43
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	88 60       	ori	r24, 0x08	; 8
     662:	8c 93       	st	X, r24
		PORTD |= 1 << PIND4;
     664:	ab e2       	ldi	r26, 0x2B	; 43
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	eb e2       	ldi	r30, 0x2B	; 43
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	80 61       	ori	r24, 0x10	; 16
     670:	8c 93       	st	X, r24
    }

	if (rm)
     672:	89 89       	ldd	r24, Y+17	; 0x11
     674:	9a 89       	ldd	r25, Y+18	; 0x12
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	79 f0       	breq	.+30     	; 0x698 <main+0x37a>
	{
		PORTD &= ~(1 << PIND2);
     67a:	ab e2       	ldi	r26, 0x2B	; 43
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	eb e2       	ldi	r30, 0x2B	; 43
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	8b 7f       	andi	r24, 0xFB	; 251
     686:	8c 93       	st	X, r24
		PORTD &= ~(1 << PIND5);
     688:	ab e2       	ldi	r26, 0x2B	; 43
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	eb e2       	ldi	r30, 0x2B	; 43
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8f 7d       	andi	r24, 0xDF	; 223
     694:	8c 93       	st	X, r24
     696:	0e c0       	rjmp	.+28     	; 0x6b4 <main+0x396>
   }
	else
	{
		PORTD |= 1 << PIND2;
     698:	ab e2       	ldi	r26, 0x2B	; 43
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	eb e2       	ldi	r30, 0x2B	; 43
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	84 60       	ori	r24, 0x04	; 4
     6a4:	8c 93       	st	X, r24
		PORTD |= 1 << PIND5;
     6a6:	ab e2       	ldi	r26, 0x2B	; 43
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	eb e2       	ldi	r30, 0x2B	; 43
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	80 62       	ori	r24, 0x20	; 32
     6b2:	8c 93       	st	X, r24
	//sprintf(buffer, "LS %4d   RS %4d   LM %4d   RM %4d          X  \r\n", (uint16_t)fmiBuffer.realBuffer[FMI_LEFTVAL], (uint16_t)fmiBuffer.realBuffer[FMI_RIGHTVAL], lm, rm);
	//uart_puts(buffer);


	// alive indicator
	if(alive)
     6b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6b6:	98 89       	ldd	r25, Y+16	; 0x10
     6b8:	00 97       	sbiw	r24, 0x00	; 0
     6ba:	41 f0       	breq	.+16     	; 0x6cc <main+0x3ae>
    	PORTD |= (1 << PIND6);
     6bc:	ab e2       	ldi	r26, 0x2B	; 43
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	eb e2       	ldi	r30, 0x2B	; 43
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	80 64       	ori	r24, 0x40	; 64
     6c8:	8c 93       	st	X, r24
     6ca:	07 c0       	rjmp	.+14     	; 0x6da <main+0x3bc>
	else
    PORTD &= ~(1 << PIND6);
     6cc:	ab e2       	ldi	r26, 0x2B	; 43
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	eb e2       	ldi	r30, 0x2B	; 43
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	8f 7b       	andi	r24, 0xBF	; 191
     6d8:	8c 93       	st	X, r24

	alive = !alive;
     6da:	cd 56       	subi	r28, 0x6D	; 109
     6dc:	df 4f       	sbci	r29, 0xFF	; 255
     6de:	19 82       	std	Y+1, r1	; 0x01
     6e0:	18 82       	st	Y, r1
     6e2:	c3 59       	subi	r28, 0x93	; 147
     6e4:	d0 40       	sbci	r29, 0x00	; 0
     6e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6e8:	98 89       	ldd	r25, Y+16	; 0x10
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	41 f4       	brne	.+16     	; 0x6fe <main+0x3e0>
     6ee:	e1 e0       	ldi	r30, 0x01	; 1
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	cd 56       	subi	r28, 0x6D	; 109
     6f4:	df 4f       	sbci	r29, 0xFF	; 255
     6f6:	f9 83       	std	Y+1, r31	; 0x01
     6f8:	e8 83       	st	Y, r30
     6fa:	c3 59       	subi	r28, 0x93	; 147
     6fc:	d0 40       	sbci	r29, 0x00	; 0
     6fe:	cd 56       	subi	r28, 0x6D	; 109
     700:	df 4f       	sbci	r29, 0xFF	; 255
     702:	88 81       	ld	r24, Y
     704:	99 81       	ldd	r25, Y+1	; 0x01
     706:	c3 59       	subi	r28, 0x93	; 147
     708:	d0 40       	sbci	r29, 0x00	; 0
     70a:	98 8b       	std	Y+16, r25	; 0x10
     70c:	8f 87       	std	Y+15, r24	; 0x0f
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a8 e4       	ldi	r26, 0x48	; 72
     714:	b3 e4       	ldi	r27, 0x43	; 67
     716:	8b 87       	std	Y+11, r24	; 0x0b
     718:	9c 87       	std	Y+12, r25	; 0x0c
     71a:	ad 87       	std	Y+13, r26	; 0x0d
     71c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     71e:	6b 85       	ldd	r22, Y+11	; 0x0b
     720:	7c 85       	ldd	r23, Y+12	; 0x0c
     722:	8d 85       	ldd	r24, Y+13	; 0x0d
     724:	9e 85       	ldd	r25, Y+14	; 0x0e
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	4a ef       	ldi	r20, 0xFA	; 250
     72c:	54 e4       	ldi	r21, 0x44	; 68
     72e:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
     732:	dc 01       	movw	r26, r24
     734:	cb 01       	movw	r24, r22
     736:	8f 83       	std	Y+7, r24	; 0x07
     738:	98 87       	std	Y+8, r25	; 0x08
     73a:	a9 87       	std	Y+9, r26	; 0x09
     73c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     73e:	6f 81       	ldd	r22, Y+7	; 0x07
     740:	78 85       	ldd	r23, Y+8	; 0x08
     742:	89 85       	ldd	r24, Y+9	; 0x09
     744:	9a 85       	ldd	r25, Y+10	; 0x0a
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e8       	ldi	r20, 0x80	; 128
     74c:	5f e3       	ldi	r21, 0x3F	; 63
     74e:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
     752:	88 23       	and	r24, r24
     754:	2c f4       	brge	.+10     	; 0x760 <main+0x442>
		__ticks = 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	9e 83       	std	Y+6, r25	; 0x06
     75c:	8d 83       	std	Y+5, r24	; 0x05
     75e:	3f c0       	rjmp	.+126    	; 0x7de <main+0x4c0>
	else if (__tmp > 65535)
     760:	6f 81       	ldd	r22, Y+7	; 0x07
     762:	78 85       	ldd	r23, Y+8	; 0x08
     764:	89 85       	ldd	r24, Y+9	; 0x09
     766:	9a 85       	ldd	r25, Y+10	; 0x0a
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	3f ef       	ldi	r19, 0xFF	; 255
     76c:	4f e7       	ldi	r20, 0x7F	; 127
     76e:	57 e4       	ldi	r21, 0x47	; 71
     770:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
     774:	18 16       	cp	r1, r24
     776:	4c f5       	brge	.+82     	; 0x7ca <main+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     778:	6b 85       	ldd	r22, Y+11	; 0x0b
     77a:	7c 85       	ldd	r23, Y+12	; 0x0c
     77c:	8d 85       	ldd	r24, Y+13	; 0x0d
     77e:	9e 85       	ldd	r25, Y+14	; 0x0e
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e2       	ldi	r20, 0x20	; 32
     786:	51 e4       	ldi	r21, 0x41	; 65
     788:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
     78c:	dc 01       	movw	r26, r24
     78e:	cb 01       	movw	r24, r22
     790:	bc 01       	movw	r22, r24
     792:	cd 01       	movw	r24, r26
     794:	0e 94 c3 6f 	call	0xdf86	; 0xdf86 <__fixunssfsi>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	9e 83       	std	Y+6, r25	; 0x06
     79e:	8d 83       	std	Y+5, r24	; 0x05
     7a0:	0f c0       	rjmp	.+30     	; 0x7c0 <main+0x4a2>
     7a2:	88 ec       	ldi	r24, 0xC8	; 200
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	9c 83       	std	Y+4, r25	; 0x04
     7a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <main+0x490>
     7b2:	9c 83       	std	Y+4, r25	; 0x04
     7b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b6:	8d 81       	ldd	r24, Y+5	; 0x05
     7b8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	9e 83       	std	Y+6, r25	; 0x06
     7be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c0:	8d 81       	ldd	r24, Y+5	; 0x05
     7c2:	9e 81       	ldd	r25, Y+6	; 0x06
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	69 f7       	brne	.-38     	; 0x7a2 <main+0x484>
     7c8:	a9 ce       	rjmp	.-686    	; 0x51c <main+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ca:	6f 81       	ldd	r22, Y+7	; 0x07
     7cc:	78 85       	ldd	r23, Y+8	; 0x08
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d2:	0e 94 c3 6f 	call	0xdf86	; 0xdf86 <__fixunssfsi>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	9e 83       	std	Y+6, r25	; 0x06
     7dc:	8d 83       	std	Y+5, r24	; 0x05
     7de:	8d 81       	ldd	r24, Y+5	; 0x05
     7e0:	9e 81       	ldd	r25, Y+6	; 0x06
     7e2:	9a 83       	std	Y+2, r25	; 0x02
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <main+0x4cc>
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	94 ce       	rjmp	.-728    	; 0x51c <main+0x1fe>

000007f4 <BoolPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void BoolPort_free_fields(struct BoolPort *this)
{
     7f4:	df 93       	push	r29
     7f6:	cf 93       	push	r28
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <BoolPort_free_fields+0x6>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	9a 83       	std	Y+2, r25	; 0x02
     800:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_BoolPort_value);
     802:	e9 81       	ldd	r30, Y+1	; 0x01
     804:	fa 81       	ldd	r31, Y+2	; 0x02
     806:	86 85       	ldd	r24, Z+14	; 0x0e
     808:	97 85       	ldd	r25, Z+15	; 0x0f
     80a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <BoolPort_free>:

static void BoolPort_free(struct BoolPort *this)
{
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	00 d0       	rcall	.+0      	; 0x81e <BoolPort_free+0x6>
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	9a 83       	std	Y+2, r25	; 0x02
     824:	89 83       	std	Y+1, r24	; 0x01
	--this->_BoolPort_refs;
     826:	e9 81       	ldd	r30, Y+1	; 0x01
     828:	fa 81       	ldd	r31, Y+2	; 0x02
     82a:	84 85       	ldd	r24, Z+12	; 0x0c
     82c:	95 85       	ldd	r25, Z+13	; 0x0d
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	e9 81       	ldd	r30, Y+1	; 0x01
     832:	fa 81       	ldd	r31, Y+2	; 0x02
     834:	95 87       	std	Z+13, r25	; 0x0d
     836:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_BoolPort_refs < 1)
     838:	e9 81       	ldd	r30, Y+1	; 0x01
     83a:	fa 81       	ldd	r31, Y+2	; 0x02
     83c:	84 85       	ldd	r24, Z+12	; 0x0c
     83e:	95 85       	ldd	r25, Z+13	; 0x0d
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	41 f4       	brne	.+16     	; 0x854 <BoolPort_free+0x3c>
	{
		BoolPort_free_fields(this);
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <BoolPort_free_fields>
		free(this);
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	9a 81       	ldd	r25, Y+2	; 0x02
     850:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	08 95       	ret

0000085e <_Z17fieldInitializer4EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer4EV(BoolPortCLASS this)	{
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	00 d0       	rcall	.+0      	; 0x864 <_Z17fieldInitializer4EV+0x6>
     864:	00 d0       	rcall	.+0      	; 0x866 <_Z17fieldInitializer4EV+0x8>
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	9c 83       	std	Y+4, r25	; 0x04
     86c:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 54:18 */
TVP ret_6 = newBool(false)
;
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	89 83       	std	Y+1, r24	; 0x01

return ret_6;
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <_Z8setValueEB>:


/* Fmi.vdmrt 60:12 */
 static  void _Z8setValueEB(BoolPortCLASS this, TVP v)	{
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	00 d0       	rcall	.+0      	; 0x894 <_Z8setValueEB+0xa>
     894:	00 d0       	rcall	.+0      	; 0x896 <_Z8setValueEB+0xc>
     896:	00 d0       	rcall	.+0      	; 0x898 <_Z8setValueEB+0xe>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	9c 83       	std	Y+4, r25	; 0x04
     89e:	8b 83       	std	Y+3, r24	; 0x03
     8a0:	7e 83       	std	Y+6, r23	; 0x06
     8a2:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 61:27 */
TVP field_tmp_3 = vdmCloneGC(v, NULL)
;
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	9e 81       	ldd	r25, Y+6	; 0x06
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     8b0:	9a 83       	std	Y+2, r25	; 0x02
     8b2:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(BoolPort, BoolPort, this, value, field_tmp_3);
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	9c 81       	ldd	r25, Y+4	; 0x04
     8b8:	fc 01       	movw	r30, r24
     8ba:	3e 96       	adiw	r30, 0x0e	; 14
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	9c 81       	ldd	r25, Y+4	; 0x04
     8c8:	8c 01       	movw	r16, r24
     8ca:	02 5f       	subi	r16, 0xF2	; 242
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
     8d6:	f8 01       	movw	r30, r16
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	80 83       	st	Z, r24

vdmFree(field_tmp_3);
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
}
     8e4:	26 96       	adiw	r28, 0x06	; 6
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <_Z8getValueEV>:


/* Fmi.vdmrt 63:12 */
 static  TVP _Z8getValueEV(BoolPortCLASS this)	{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	00 d0       	rcall	.+0      	; 0x900 <_Z8getValueEV+0x6>
     900:	00 d0       	rcall	.+0      	; 0x902 <_Z8getValueEV+0x8>
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	9c 83       	std	Y+4, r25	; 0x04
     908:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 64:26 */
TVP ret_7 = vdmCloneGC(GET_FIELD_PTR_GC(BoolPort, BoolPort, this, value), NULL)
;
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	fc 01       	movw	r30, r24
     910:	3e 96       	adiw	r30, 0x0e	; 14
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     926:	9a 83       	std	Y+2, r25	; 0x02
     928:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 64:19 */
return ret_7;
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	cf 91       	pop	r28
     938:	df 91       	pop	r29
     93a:	08 95       	ret

0000093c <BoolPort_const_init>:



 void BoolPort_const_init()	{
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62

return ;
}
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <BoolPort_const_shutdown>:



 void BoolPort_const_shutdown()	{
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62

return ;
}
     952:	cf 91       	pop	r28
     954:	df 91       	pop	r29
     956:	08 95       	ret

00000958 <BoolPort_static_init>:



 void BoolPort_static_init()	{
     958:	df 93       	push	r29
     95a:	cf 93       	push	r28
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62

return ;
}
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	08 95       	ret

00000966 <BoolPort_static_shutdown>:



 void BoolPort_static_shutdown()	{
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62

return ;
}
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	08 95       	ret

00000974 <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	00 d0       	rcall	.+0      	; 0x97a <Port__Z8getValueEV+0x6>
     97a:	00 d0       	rcall	.+0      	; 0x97c <Port__Z8getValueEV+0x8>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	9c 83       	std	Y+4, r25	; 0x04
     982:	8b 83       	std	Y+3, r24	; 0x03

BoolPortCLASS this = CLASS_DOWNCAST(Port, BoolPort, base)
;
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	9c 81       	ldd	r25, Y+4	; 0x04
     988:	9a 83       	std	Y+2, r25	; 0x02
     98a:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z8getValueEV>
}
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <BoolPort_Constructor>:
 *
 --------------------------------- */
 
 
BoolPortCLASS BoolPort_Constructor(BoolPortCLASS this_ptr)
{
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <BoolPort_Constructor+0x6>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	31 f4       	brne	.+12     	; 0x9c4 <BoolPort_Constructor+0x22>
	{
		this_ptr = (BoolPortCLASS) malloc(sizeof(struct BoolPort));
     9b8:	82 e1       	ldi	r24, 0x12	; 18
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	c9 f1       	breq	.+114    	; 0xa3e <BoolPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,BoolPort,Port));
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	0e 94 c4 1a 	call	0x3588	; 0x3588 <Port_Constructor>

					if(! g_VTableArrayForBoolPort_Override_Port[0].pFunc)
     9d4:	80 91 c4 02 	lds	r24, 0x02C4
     9d8:	90 91 c5 02 	lds	r25, 0x02C5
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	89 f4       	brne	.+34     	; 0xa02 <BoolPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForBoolPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
     9e0:	e9 81       	ldd	r30, Y+1	; 0x01
     9e2:	fa 81       	ldd	r31, Y+2	; 0x02
     9e4:	20 81       	ld	r18, Z
     9e6:	31 81       	ldd	r19, Z+1	; 0x01
     9e8:	80 ec       	ldi	r24, 0xC0	; 192
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	b9 01       	movw	r22, r18
     9ee:	42 e1       	ldi	r20, 0x12	; 18
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForBoolPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
     9f6:	8a eb       	ldi	r24, 0xBA	; 186
     9f8:	94 e0       	ldi	r25, 0x04	; 4
     9fa:	90 93 cb 02 	sts	0x02CB, r25
     9fe:	80 93 ca 02 	sts	0x02CA, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForBoolPort_Override_Port;
     a02:	e9 81       	ldd	r30, Y+1	; 0x01
     a04:	fa 81       	ldd	r31, Y+2	; 0x02
     a06:	80 ec       	ldi	r24, 0xC0	; 192
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	91 83       	std	Z+1, r25	; 0x01
     a0c:	80 83       	st	Z, r24
				
		
		/*  BoolPort init  */
		this_ptr->_BoolPort_id = CLASS_ID_BoolPort_ID;
     a0e:	e9 81       	ldd	r30, Y+1	; 0x01
     a10:	fa 81       	ldd	r31, Y+2	; 0x02
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	93 87       	std	Z+11, r25	; 0x0b
     a18:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_BoolPort_refs = 0;
     a1a:	e9 81       	ldd	r30, Y+1	; 0x01
     a1c:	fa 81       	ldd	r31, Y+2	; 0x02
     a1e:	15 86       	std	Z+13, r1	; 0x0d
     a20:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_BoolPort_pVTable=VTableArrayForBoolPort;
     a22:	e9 81       	ldd	r30, Y+1	; 0x01
     a24:	fa 81       	ldd	r31, Y+2	; 0x02
     a26:	85 e5       	ldi	r24, 0x55	; 85
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	91 87       	std	Z+9, r25	; 0x09
     a2c:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_BoolPort_value= _Z17fieldInitializer4EV(this_ptr);
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	0e 94 2f 04 	call	0x85e	; 0x85e <_Z17fieldInitializer4EV>
     a36:	e9 81       	ldd	r30, Y+1	; 0x01
     a38:	fa 81       	ldd	r31, Y+2	; 0x02
     a3a:	97 87       	std	Z+15, r25	; 0x0f
     a3c:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	08 95       	ret

00000a4c <new>:

/*  Method for creating new "class"  */
static TVP new()
{
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	00 d0       	rcall	.+0      	; 0xa52 <new+0x6>
     a52:	00 d0       	rcall	.+0      	; 0xa54 <new+0x8>
     a54:	00 d0       	rcall	.+0      	; 0xa56 <new+0xa>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
	BoolPortCLASS ptr=BoolPort_Constructor(NULL);
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <BoolPort_Constructor>
     a62:	9a 83       	std	Y+2, r25	; 0x02
     a64:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_BoolPort_id, &ptr->_BoolPort_refs, (freeVdmClassFunction)&BoolPort_free, ptr)});
     a66:	e9 81       	ldd	r30, Y+1	; 0x01
     a68:	fa 81       	ldd	r31, Y+2	; 0x02
     a6a:	62 85       	ldd	r22, Z+10	; 0x0a
     a6c:	73 85       	ldd	r23, Z+11	; 0x0b
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	9c 01       	movw	r18, r24
     a74:	24 5f       	subi	r18, 0xF4	; 244
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	4c e0       	ldi	r20, 0x0C	; 12
     a7a:	54 e0       	ldi	r21, 0x04	; 4
     a7c:	e9 81       	ldd	r30, Y+1	; 0x01
     a7e:	fa 81       	ldd	r31, Y+2	; 0x02
     a80:	cb 01       	movw	r24, r22
     a82:	b9 01       	movw	r22, r18
     a84:	9f 01       	movw	r18, r30
     a86:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
     a8a:	1b 82       	std	Y+3, r1	; 0x03
     a8c:	1c 82       	std	Y+4, r1	; 0x04
     a8e:	1d 82       	std	Y+5, r1	; 0x05
     a90:	1e 82       	std	Y+6, r1	; 0x06
     a92:	9c 83       	std	Y+4, r25	; 0x04
     a94:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	BoolPortCLASS ptr=BoolPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
     a96:	2b 81       	ldd	r18, Y+3	; 0x03
     a98:	3c 81       	ldd	r19, Y+4	; 0x04
     a9a:	4d 81       	ldd	r20, Y+5	; 0x05
     a9c:	5e 81       	ldd	r21, Y+6	; 0x06
     a9e:	8b e0       	ldi	r24, 0x0B	; 11
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	ba 01       	movw	r22, r20
     aa4:	a9 01       	movw	r20, r18
     aa6:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_BoolPort_id, &ptr->_BoolPort_refs, (freeVdmClassFunction)&BoolPort_free, ptr)});
}
     aaa:	26 96       	adiw	r28, 0x06	; 6
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	08 95       	ret

00000abc <_Z8BoolPortEB>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 57:12 */
 TVP _Z8BoolPortEB(BoolPortCLASS this, TVP v)	{
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <_Z8BoolPortEB+0x6>
     ac2:	00 d0       	rcall	.+0      	; 0xac4 <_Z8BoolPortEB+0x8>
     ac4:	00 d0       	rcall	.+0      	; 0xac6 <_Z8BoolPortEB+0xa>
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	8b 83       	std	Y+3, r24	; 0x03
     ace:	7e 83       	std	Y+6, r23	; 0x06
     ad0:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
     ad2:	1a 82       	std	Y+2, r1	; 0x02
     ad4:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	9c 81       	ldd	r25, Y+4	; 0x04
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	69 f4       	brne	.+26     	; 0xaf8 <_Z8BoolPortEB+0x3c>
	
	{

__buf = new();
     ade:	0e 94 26 05 	call	0xa4c	; 0xa4c <new>
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, BoolPort);
     ae6:	e9 81       	ldd	r30, Y+1	; 0x01
     ae8:	fa 81       	ldd	r31, Y+2	; 0x02
     aea:	84 81       	ldd	r24, Z+4	; 0x04
     aec:	95 81       	ldd	r25, Z+5	; 0x05
     aee:	fc 01       	movw	r30, r24
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	9c 83       	std	Y+4, r25	; 0x04
     af6:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 58:18 */
CALL_FUNC_PTR(BoolPort, BoolPort, this, CLASS_BoolPort__Z8setValueEB, v);
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	fc 01       	movw	r30, r24
     afe:	38 96       	adiw	r30, 0x08	; 8
     b00:	80 81       	ld	r24, Z
     b02:	91 81       	ldd	r25, Z+1	; 0x01
     b04:	fc 01       	movw	r30, r24
     b06:	36 96       	adiw	r30, 0x06	; 6
     b08:	84 81       	ldd	r24, Z+4	; 0x04
     b0a:	95 81       	ldd	r25, Z+5	; 0x05
     b0c:	fc 01       	movw	r30, r24
     b0e:	8b 81       	ldd	r24, Y+3	; 0x03
     b10:	9c 81       	ldd	r25, Y+4	; 0x04
     b12:	2d 81       	ldd	r18, Y+5	; 0x05
     b14:	3e 81       	ldd	r19, Y+6	; 0x06
     b16:	b9 01       	movw	r22, r18
     b18:	09 95       	icall

return __buf;
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b1e:	26 96       	adiw	r28, 0x06	; 6
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <_Z8BoolPortEV>:


    /* Fmi.vdmrt 51:7 */
 TVP _Z8BoolPortEV(BoolPortCLASS this)	{
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	00 d0       	rcall	.+0      	; 0xb36 <_Z8BoolPortEV+0x6>
     b36:	00 d0       	rcall	.+0      	; 0xb38 <_Z8BoolPortEV+0x8>
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	9c 81       	ldd	r25, Y+4	; 0x04
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	69 f4       	brne	.+26     	; 0xb66 <_Z8BoolPortEV+0x36>
	
	{

__buf = new();
     b4c:	0e 94 26 05 	call	0xa4c	; 0xa4c <new>
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, BoolPort);
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	84 81       	ldd	r24, Z+4	; 0x04
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	9c 83       	std	Y+4, r25	; 0x04
     b64:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <Controller_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void Controller_free_fields(struct Controller *this)
{
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <Controller_free_fields+0x6>
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	9a 83       	std	Y+2, r25	; 0x02
     b84:	89 83       	std	Y+1, r24	; 0x01
			vdmFree(this->m_Controller_servoLeft);
     b86:	e9 81       	ldd	r30, Y+1	; 0x01
     b88:	fa 81       	ldd	r31, Y+2	; 0x02
     b8a:	86 81       	ldd	r24, Z+6	; 0x06
     b8c:	97 81       	ldd	r25, Z+7	; 0x07
     b8e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(this->m_Controller_servoRight);
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	80 85       	ldd	r24, Z+8	; 0x08
     b98:	91 85       	ldd	r25, Z+9	; 0x09
     b9a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(this->m_Controller_sensorRightVal);
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	82 85       	ldd	r24, Z+10	; 0x0a
     ba4:	93 85       	ldd	r25, Z+11	; 0x0b
     ba6:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(this->m_Controller_sensorLeftVal);
     baa:	e9 81       	ldd	r30, Y+1	; 0x01
     bac:	fa 81       	ldd	r31, Y+2	; 0x02
     bae:	84 85       	ldd	r24, Z+12	; 0x0c
     bb0:	95 85       	ldd	r25, Z+13	; 0x0d
     bb2:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <Controller_free>:

static void Controller_free(struct Controller *this)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <Controller_free+0x6>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
	--this->_Controller_refs;
     bce:	e9 81       	ldd	r30, Y+1	; 0x01
     bd0:	fa 81       	ldd	r31, Y+2	; 0x02
     bd2:	84 81       	ldd	r24, Z+4	; 0x04
     bd4:	95 81       	ldd	r25, Z+5	; 0x05
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	e9 81       	ldd	r30, Y+1	; 0x01
     bda:	fa 81       	ldd	r31, Y+2	; 0x02
     bdc:	95 83       	std	Z+5, r25	; 0x05
     bde:	84 83       	std	Z+4, r24	; 0x04
	if (this->_Controller_refs < 1)
     be0:	e9 81       	ldd	r30, Y+1	; 0x01
     be2:	fa 81       	ldd	r31, Y+2	; 0x02
     be4:	84 81       	ldd	r24, Z+4	; 0x04
     be6:	95 81       	ldd	r25, Z+5	; 0x05
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	41 f4       	brne	.+16     	; 0xbfc <Controller_free+0x3c>
	{
		Controller_free_fields(this);
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	0e 94 bc 05 	call	0xb78	; 0xb78 <Controller_free_fields>
		free(this);
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <_Z17fieldInitializer7EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer7EV()	{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <_Z17fieldInitializer7EV+0x6>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62

TVP ret_12 = newInt(4)
;
     c10:	84 e0       	ldi	r24, 0x04	; 4
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01

return ret_12;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <_Z12control_loopEV>:


/* Controller.vdmrt 20:12 */
 static  void _Z12control_loopEV(ControllerCLASS this)	{
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	66 97       	sbiw	r28, 0x16	; 22
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	9e 8b       	std	Y+22, r25	; 0x16
     c44:	8d 8b       	std	Y+21, r24	; 0x15

TVP andResult_1 = newBoolGC(false, NULL)
;
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13

if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
     c54:	8d 89       	ldd	r24, Y+21	; 0x15
     c56:	9e 89       	ldd	r25, Y+22	; 0x16
     c58:	fc 01       	movw	r30, r24
     c5a:	3a 96       	adiw	r30, 0x0a	; 10
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     c68:	fc 01       	movw	r30, r24
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	95 81       	ldd	r25, Z+5	; 0x05
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	fc 01       	movw	r30, r24
     c76:	80 81       	ld	r24, Z
     c78:	91 81       	ldd	r25, Z+1	; 0x01
     c7a:	fc 01       	movw	r30, r24
     c7c:	36 96       	adiw	r30, 0x06	; 6
     c7e:	84 81       	ldd	r24, Z+4	; 0x04
     c80:	95 81       	ldd	r25, Z+5	; 0x05
     c82:	8c 01       	movw	r16, r24
     c84:	8d 89       	ldd	r24, Y+21	; 0x15
     c86:	9e 89       	ldd	r25, Y+22	; 0x16
     c88:	fc 01       	movw	r30, r24
     c8a:	3a 96       	adiw	r30, 0x0a	; 10
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     c98:	fc 01       	movw	r30, r24
     c9a:	84 81       	ldd	r24, Z+4	; 0x04
     c9c:	95 81       	ldd	r25, Z+5	; 0x05
     c9e:	fc 01       	movw	r30, r24
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	f8 01       	movw	r30, r16
     ca6:	09 95       	icall
     ca8:	8c 01       	movw	r16, r24
     caa:	84 ef       	ldi	r24, 0xF4	; 244
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
     cb6:	9c 01       	movw	r18, r24
     cb8:	c8 01       	movw	r24, r16
     cba:	b9 01       	movw	r22, r18
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <vdmLessThanGC>
     cc4:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <_Z12control_loopEV+0xa4>
     ccc:	43 c0       	rjmp	.+134    	; 0xd54 <_Z12control_loopEV+0x12a>
	
	if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
     cce:	8d 89       	ldd	r24, Y+21	; 0x15
     cd0:	9e 89       	ldd	r25, Y+22	; 0x16
     cd2:	fc 01       	movw	r30, r24
     cd4:	3c 96       	adiw	r30, 0x0c	; 12
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     ce2:	fc 01       	movw	r30, r24
     ce4:	84 81       	ldd	r24, Z+4	; 0x04
     ce6:	95 81       	ldd	r25, Z+5	; 0x05
     ce8:	fc 01       	movw	r30, r24
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	fc 01       	movw	r30, r24
     cf6:	36 96       	adiw	r30, 0x06	; 6
     cf8:	84 81       	ldd	r24, Z+4	; 0x04
     cfa:	95 81       	ldd	r25, Z+5	; 0x05
     cfc:	8c 01       	movw	r16, r24
     cfe:	8d 89       	ldd	r24, Y+21	; 0x15
     d00:	9e 89       	ldd	r25, Y+22	; 0x16
     d02:	fc 01       	movw	r30, r24
     d04:	3c 96       	adiw	r30, 0x0c	; 12
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     d12:	fc 01       	movw	r30, r24
     d14:	84 81       	ldd	r24, Z+4	; 0x04
     d16:	95 81       	ldd	r25, Z+5	; 0x05
     d18:	fc 01       	movw	r30, r24
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	f8 01       	movw	r30, r16
     d20:	09 95       	icall
     d22:	8c 01       	movw	r16, r24
     d24:	84 ef       	ldi	r24, 0xF4	; 244
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
     d30:	9c 01       	movw	r18, r24
     d32:	c8 01       	movw	r24, r16
     d34:	b9 01       	movw	r22, r18
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <vdmLessThanGC>
     d3e:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
     d42:	88 23       	and	r24, r24
     d44:	39 f0       	breq	.+14     	; 0xd54 <_Z12control_loopEV+0x12a>
	
	andResult_1 = newBoolGC(true, NULL);;;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
     d50:	9c 8b       	std	Y+20, r25	; 0x14
     d52:	8b 8b       	std	Y+19, r24	; 0x13
/* Controller.vdmrt 23:9 */
if ( toBool(andResult_1) )
     d54:	8b 89       	ldd	r24, Y+19	; 0x13
     d56:	9c 89       	ldd	r25, Y+20	; 0x14
     d58:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
     d5c:	88 23       	and	r24, r24
     d5e:	09 f4       	brne	.+2      	; 0xd62 <_Z12control_loopEV+0x138>
     d60:	9c c0       	rjmp	.+312    	; 0xe9a <_Z12control_loopEV+0x270>
	/* Controller.vdmrt 24:14 */
	{
/* Controller.vdmrt 25:33 */
TVP embeding_1 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardSpeed, CLASS_RealPort__Z8getValueEV), NULL)
;
     d62:	e0 91 de 02 	lds	r30, 0x02DE
     d66:	f0 91 df 02 	lds	r31, 0x02DF
     d6a:	84 81       	ldd	r24, Z+4	; 0x04
     d6c:	95 81       	ldd	r25, Z+5	; 0x05
     d6e:	fc 01       	movw	r30, r24
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	fc 01       	movw	r30, r24
     d76:	38 96       	adiw	r30, 0x08	; 8
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	fc 01       	movw	r30, r24
     d7e:	3c 96       	adiw	r30, 0x0c	; 12
     d80:	84 81       	ldd	r24, Z+4	; 0x04
     d82:	95 81       	ldd	r25, Z+5	; 0x05
     d84:	9c 01       	movw	r18, r24
     d86:	e0 91 de 02 	lds	r30, 0x02DE
     d8a:	f0 91 df 02 	lds	r31, 0x02DF
     d8e:	84 81       	ldd	r24, Z+4	; 0x04
     d90:	95 81       	ldd	r25, Z+5	; 0x05
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	f9 01       	movw	r30, r18
     d9a:	09 95       	icall
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	0e 94 0e 34 	call	0x681c	; 0x681c <vdmMinusGC>
     da4:	9c 87       	std	Y+12, r25	; 0x0c
     da6:	8b 87       	std	Y+11, r24	; 0x0b
/* Controller.vdmrt 25:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_1);
     da8:	8d 89       	ldd	r24, Y+21	; 0x15
     daa:	9e 89       	ldd	r25, Y+22	; 0x16
     dac:	fc 01       	movw	r30, r24
     dae:	38 96       	adiw	r30, 0x08	; 8
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     dbc:	fc 01       	movw	r30, r24
     dbe:	84 81       	ldd	r24, Z+4	; 0x04
     dc0:	95 81       	ldd	r25, Z+5	; 0x05
     dc2:	fc 01       	movw	r30, r24
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	fc 01       	movw	r30, r24
     dd0:	36 96       	adiw	r30, 0x06	; 6
     dd2:	84 81       	ldd	r24, Z+4	; 0x04
     dd4:	95 81       	ldd	r25, Z+5	; 0x05
     dd6:	8c 01       	movw	r16, r24
     dd8:	8d 89       	ldd	r24, Y+21	; 0x15
     dda:	9e 89       	ldd	r25, Y+22	; 0x16
     ddc:	fc 01       	movw	r30, r24
     dde:	38 96       	adiw	r30, 0x08	; 8
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     dec:	fc 01       	movw	r30, r24
     dee:	84 81       	ldd	r24, Z+4	; 0x04
     df0:	95 81       	ldd	r25, Z+5	; 0x05
     df2:	fc 01       	movw	r30, r24
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	2b 85       	ldd	r18, Y+11	; 0x0b
     dfa:	3c 85       	ldd	r19, Y+12	; 0x0c
     dfc:	b9 01       	movw	r22, r18
     dfe:	f8 01       	movw	r30, r16
     e00:	09 95       	icall
/* Controller.vdmrt 26:32 */
TVP embeding_2 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardSpeed, CLASS_RealPort__Z8getValueEV)
;
     e02:	e0 91 de 02 	lds	r30, 0x02DE
     e06:	f0 91 df 02 	lds	r31, 0x02DF
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	95 81       	ldd	r25, Z+5	; 0x05
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	fc 01       	movw	r30, r24
     e16:	38 96       	adiw	r30, 0x08	; 8
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	fc 01       	movw	r30, r24
     e1e:	3c 96       	adiw	r30, 0x0c	; 12
     e20:	84 81       	ldd	r24, Z+4	; 0x04
     e22:	95 81       	ldd	r25, Z+5	; 0x05
     e24:	9c 01       	movw	r18, r24
     e26:	e0 91 de 02 	lds	r30, 0x02DE
     e2a:	f0 91 df 02 	lds	r31, 0x02DF
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	95 81       	ldd	r25, Z+5	; 0x05
     e32:	fc 01       	movw	r30, r24
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	f9 01       	movw	r30, r18
     e3a:	09 95       	icall
     e3c:	9a 87       	std	Y+10, r25	; 0x0a
     e3e:	89 87       	std	Y+9, r24	; 0x09
/* Controller.vdmrt 26:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_2);
     e40:	8d 89       	ldd	r24, Y+21	; 0x15
     e42:	9e 89       	ldd	r25, Y+22	; 0x16
     e44:	fc 01       	movw	r30, r24
     e46:	36 96       	adiw	r30, 0x06	; 6
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     e54:	fc 01       	movw	r30, r24
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	95 81       	ldd	r25, Z+5	; 0x05
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	fc 01       	movw	r30, r24
     e68:	36 96       	adiw	r30, 0x06	; 6
     e6a:	84 81       	ldd	r24, Z+4	; 0x04
     e6c:	95 81       	ldd	r25, Z+5	; 0x05
     e6e:	8c 01       	movw	r16, r24
     e70:	8d 89       	ldd	r24, Y+21	; 0x15
     e72:	9e 89       	ldd	r25, Y+22	; 0x16
     e74:	fc 01       	movw	r30, r24
     e76:	36 96       	adiw	r30, 0x06	; 6
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     e84:	fc 01       	movw	r30, r24
     e86:	84 81       	ldd	r24, Z+4	; 0x04
     e88:	95 81       	ldd	r25, Z+5	; 0x05
     e8a:	fc 01       	movw	r30, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
     e90:	29 85       	ldd	r18, Y+9	; 0x09
     e92:	3a 85       	ldd	r19, Y+10	; 0x0a
     e94:	b9 01       	movw	r22, r18
     e96:	f8 01       	movw	r30, r16
     e98:	09 95       	icall
}
;

TVP andResult_2 = newBoolGC(false, NULL)
;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
     ea4:	9a 8b       	std	Y+18, r25	; 0x12
     ea6:	89 8b       	std	Y+17, r24	; 0x11

if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
     ea8:	8d 89       	ldd	r24, Y+21	; 0x15
     eaa:	9e 89       	ldd	r25, Y+22	; 0x16
     eac:	fc 01       	movw	r30, r24
     eae:	3a 96       	adiw	r30, 0x0a	; 10
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     ebc:	fc 01       	movw	r30, r24
     ebe:	84 81       	ldd	r24, Z+4	; 0x04
     ec0:	95 81       	ldd	r25, Z+5	; 0x05
     ec2:	fc 01       	movw	r30, r24
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	fc 01       	movw	r30, r24
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	fc 01       	movw	r30, r24
     ed0:	36 96       	adiw	r30, 0x06	; 6
     ed2:	84 81       	ldd	r24, Z+4	; 0x04
     ed4:	95 81       	ldd	r25, Z+5	; 0x05
     ed6:	8c 01       	movw	r16, r24
     ed8:	8d 89       	ldd	r24, Y+21	; 0x15
     eda:	9e 89       	ldd	r25, Y+22	; 0x16
     edc:	fc 01       	movw	r30, r24
     ede:	3a 96       	adiw	r30, 0x0a	; 10
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     eec:	fc 01       	movw	r30, r24
     eee:	84 81       	ldd	r24, Z+4	; 0x04
     ef0:	95 81       	ldd	r25, Z+5	; 0x05
     ef2:	fc 01       	movw	r30, r24
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	f8 01       	movw	r30, r16
     efa:	09 95       	icall
     efc:	8c 01       	movw	r16, r24
     efe:	84 ef       	ldi	r24, 0xF4	; 244
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
     f0a:	9c 01       	movw	r18, r24
     f0c:	c8 01       	movw	r24, r16
     f0e:	b9 01       	movw	r22, r18
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <vdmLessThanGC>
     f18:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
     f1c:	88 23       	and	r24, r24
     f1e:	09 f4       	brne	.+2      	; 0xf22 <_Z12control_loopEV+0x2f8>
     f20:	43 c0       	rjmp	.+134    	; 0xfa8 <_Z12control_loopEV+0x37e>
	
	if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
     f22:	8d 89       	ldd	r24, Y+21	; 0x15
     f24:	9e 89       	ldd	r25, Y+22	; 0x16
     f26:	fc 01       	movw	r30, r24
     f28:	3c 96       	adiw	r30, 0x0c	; 12
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     f36:	fc 01       	movw	r30, r24
     f38:	84 81       	ldd	r24, Z+4	; 0x04
     f3a:	95 81       	ldd	r25, Z+5	; 0x05
     f3c:	fc 01       	movw	r30, r24
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	fc 01       	movw	r30, r24
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	fc 01       	movw	r30, r24
     f4a:	36 96       	adiw	r30, 0x06	; 6
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	95 81       	ldd	r25, Z+5	; 0x05
     f50:	8c 01       	movw	r16, r24
     f52:	8d 89       	ldd	r24, Y+21	; 0x15
     f54:	9e 89       	ldd	r25, Y+22	; 0x16
     f56:	fc 01       	movw	r30, r24
     f58:	3c 96       	adiw	r30, 0x0c	; 12
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
     f66:	fc 01       	movw	r30, r24
     f68:	84 81       	ldd	r24, Z+4	; 0x04
     f6a:	95 81       	ldd	r25, Z+5	; 0x05
     f6c:	fc 01       	movw	r30, r24
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	f8 01       	movw	r30, r16
     f74:	09 95       	icall
     f76:	8c 01       	movw	r16, r24
     f78:	84 ef       	ldi	r24, 0xF4	; 244
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
     f84:	9c 01       	movw	r18, r24
     f86:	c8 01       	movw	r24, r16
     f88:	b9 01       	movw	r22, r18
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	0e 94 44 44 	call	0x8888	; 0x8888 <vdmGreaterThanGC>
     f92:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
     f96:	88 23       	and	r24, r24
     f98:	39 f0       	breq	.+14     	; 0xfa8 <_Z12control_loopEV+0x37e>
	
	andResult_2 = newBoolGC(true, NULL);;;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
     fa4:	9a 8b       	std	Y+18, r25	; 0x12
     fa6:	89 8b       	std	Y+17, r24	; 0x11
/* Controller.vdmrt 29:9 */
if ( toBool(andResult_2) )
     fa8:	89 89       	ldd	r24, Y+17	; 0x11
     faa:	9a 89       	ldd	r25, Y+18	; 0x12
     fac:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <_Z12control_loopEV+0x38c>
     fb4:	9c c0       	rjmp	.+312    	; 0x10ee <_Z12control_loopEV+0x4c4>
	/* Controller.vdmrt 30:14 */
	{
/* Controller.vdmrt 31:33 */
TVP embeding_3 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardRotate, CLASS_RealPort__Z8getValueEV), NULL)
;
     fb6:	e0 91 e0 02 	lds	r30, 0x02E0
     fba:	f0 91 e1 02 	lds	r31, 0x02E1
     fbe:	84 81       	ldd	r24, Z+4	; 0x04
     fc0:	95 81       	ldd	r25, Z+5	; 0x05
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	fc 01       	movw	r30, r24
     fca:	38 96       	adiw	r30, 0x08	; 8
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
     fd0:	fc 01       	movw	r30, r24
     fd2:	3c 96       	adiw	r30, 0x0c	; 12
     fd4:	84 81       	ldd	r24, Z+4	; 0x04
     fd6:	95 81       	ldd	r25, Z+5	; 0x05
     fd8:	9c 01       	movw	r18, r24
     fda:	e0 91 e0 02 	lds	r30, 0x02E0
     fde:	f0 91 e1 02 	lds	r31, 0x02E1
     fe2:	84 81       	ldd	r24, Z+4	; 0x04
     fe4:	95 81       	ldd	r25, Z+5	; 0x05
     fe6:	fc 01       	movw	r30, r24
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	f9 01       	movw	r30, r18
     fee:	09 95       	icall
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	0e 94 0e 34 	call	0x681c	; 0x681c <vdmMinusGC>
     ff8:	98 87       	std	Y+8, r25	; 0x08
     ffa:	8f 83       	std	Y+7, r24	; 0x07
/* Controller.vdmrt 31:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_3);
     ffc:	8d 89       	ldd	r24, Y+21	; 0x15
     ffe:	9e 89       	ldd	r25, Y+22	; 0x16
    1000:	fc 01       	movw	r30, r24
    1002:	38 96       	adiw	r30, 0x08	; 8
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1010:	fc 01       	movw	r30, r24
    1012:	84 81       	ldd	r24, Z+4	; 0x04
    1014:	95 81       	ldd	r25, Z+5	; 0x05
    1016:	fc 01       	movw	r30, r24
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	fc 01       	movw	r30, r24
    1024:	36 96       	adiw	r30, 0x06	; 6
    1026:	84 81       	ldd	r24, Z+4	; 0x04
    1028:	95 81       	ldd	r25, Z+5	; 0x05
    102a:	8c 01       	movw	r16, r24
    102c:	8d 89       	ldd	r24, Y+21	; 0x15
    102e:	9e 89       	ldd	r25, Y+22	; 0x16
    1030:	fc 01       	movw	r30, r24
    1032:	38 96       	adiw	r30, 0x08	; 8
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1040:	fc 01       	movw	r30, r24
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	95 81       	ldd	r25, Z+5	; 0x05
    1046:	fc 01       	movw	r30, r24
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	2f 81       	ldd	r18, Y+7	; 0x07
    104e:	38 85       	ldd	r19, Y+8	; 0x08
    1050:	b9 01       	movw	r22, r18
    1052:	f8 01       	movw	r30, r16
    1054:	09 95       	icall
/* Controller.vdmrt 32:32 */
TVP embeding_4 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_backwardRotate, CLASS_RealPort__Z8getValueEV)
;
    1056:	e0 91 e2 02 	lds	r30, 0x02E2
    105a:	f0 91 e3 02 	lds	r31, 0x02E3
    105e:	84 81       	ldd	r24, Z+4	; 0x04
    1060:	95 81       	ldd	r25, Z+5	; 0x05
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	fc 01       	movw	r30, r24
    106a:	38 96       	adiw	r30, 0x08	; 8
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	fc 01       	movw	r30, r24
    1072:	3c 96       	adiw	r30, 0x0c	; 12
    1074:	84 81       	ldd	r24, Z+4	; 0x04
    1076:	95 81       	ldd	r25, Z+5	; 0x05
    1078:	9c 01       	movw	r18, r24
    107a:	e0 91 e2 02 	lds	r30, 0x02E2
    107e:	f0 91 e3 02 	lds	r31, 0x02E3
    1082:	84 81       	ldd	r24, Z+4	; 0x04
    1084:	95 81       	ldd	r25, Z+5	; 0x05
    1086:	fc 01       	movw	r30, r24
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	f9 01       	movw	r30, r18
    108e:	09 95       	icall
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
/* Controller.vdmrt 32:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_4);
    1094:	8d 89       	ldd	r24, Y+21	; 0x15
    1096:	9e 89       	ldd	r25, Y+22	; 0x16
    1098:	fc 01       	movw	r30, r24
    109a:	36 96       	adiw	r30, 0x06	; 6
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    10a8:	fc 01       	movw	r30, r24
    10aa:	84 81       	ldd	r24, Z+4	; 0x04
    10ac:	95 81       	ldd	r25, Z+5	; 0x05
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	fc 01       	movw	r30, r24
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	fc 01       	movw	r30, r24
    10bc:	36 96       	adiw	r30, 0x06	; 6
    10be:	84 81       	ldd	r24, Z+4	; 0x04
    10c0:	95 81       	ldd	r25, Z+5	; 0x05
    10c2:	8c 01       	movw	r16, r24
    10c4:	8d 89       	ldd	r24, Y+21	; 0x15
    10c6:	9e 89       	ldd	r25, Y+22	; 0x16
    10c8:	fc 01       	movw	r30, r24
    10ca:	36 96       	adiw	r30, 0x06	; 6
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    10d8:	fc 01       	movw	r30, r24
    10da:	84 81       	ldd	r24, Z+4	; 0x04
    10dc:	95 81       	ldd	r25, Z+5	; 0x05
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	2d 81       	ldd	r18, Y+5	; 0x05
    10e6:	3e 81       	ldd	r19, Y+6	; 0x06
    10e8:	b9 01       	movw	r22, r18
    10ea:	f8 01       	movw	r30, r16
    10ec:	09 95       	icall
}
;

TVP andResult_3 = newBoolGC(false, NULL)
;
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    10f8:	98 8b       	std	Y+16, r25	; 0x10
    10fa:	8f 87       	std	Y+15, r24	; 0x0f

if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
    10fc:	8d 89       	ldd	r24, Y+21	; 0x15
    10fe:	9e 89       	ldd	r25, Y+22	; 0x16
    1100:	fc 01       	movw	r30, r24
    1102:	3a 96       	adiw	r30, 0x0a	; 10
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1110:	fc 01       	movw	r30, r24
    1112:	84 81       	ldd	r24, Z+4	; 0x04
    1114:	95 81       	ldd	r25, Z+5	; 0x05
    1116:	fc 01       	movw	r30, r24
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	fc 01       	movw	r30, r24
    1124:	36 96       	adiw	r30, 0x06	; 6
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	95 81       	ldd	r25, Z+5	; 0x05
    112a:	8c 01       	movw	r16, r24
    112c:	8d 89       	ldd	r24, Y+21	; 0x15
    112e:	9e 89       	ldd	r25, Y+22	; 0x16
    1130:	fc 01       	movw	r30, r24
    1132:	3a 96       	adiw	r30, 0x0a	; 10
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1140:	fc 01       	movw	r30, r24
    1142:	84 81       	ldd	r24, Z+4	; 0x04
    1144:	95 81       	ldd	r25, Z+5	; 0x05
    1146:	fc 01       	movw	r30, r24
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	f8 01       	movw	r30, r16
    114e:	09 95       	icall
    1150:	8c 01       	movw	r16, r24
    1152:	84 ef       	ldi	r24, 0xF4	; 244
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    115e:	9c 01       	movw	r18, r24
    1160:	c8 01       	movw	r24, r16
    1162:	b9 01       	movw	r22, r18
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	0e 94 44 44 	call	0x8888	; 0x8888 <vdmGreaterThanGC>
    116c:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <_Z12control_loopEV+0x54c>
    1174:	43 c0       	rjmp	.+134    	; 0x11fc <_Z12control_loopEV+0x5d2>
	
	if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
    1176:	8d 89       	ldd	r24, Y+21	; 0x15
    1178:	9e 89       	ldd	r25, Y+22	; 0x16
    117a:	fc 01       	movw	r30, r24
    117c:	3c 96       	adiw	r30, 0x0c	; 12
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    118a:	fc 01       	movw	r30, r24
    118c:	84 81       	ldd	r24, Z+4	; 0x04
    118e:	95 81       	ldd	r25, Z+5	; 0x05
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	fc 01       	movw	r30, r24
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	fc 01       	movw	r30, r24
    119e:	36 96       	adiw	r30, 0x06	; 6
    11a0:	84 81       	ldd	r24, Z+4	; 0x04
    11a2:	95 81       	ldd	r25, Z+5	; 0x05
    11a4:	8c 01       	movw	r16, r24
    11a6:	8d 89       	ldd	r24, Y+21	; 0x15
    11a8:	9e 89       	ldd	r25, Y+22	; 0x16
    11aa:	fc 01       	movw	r30, r24
    11ac:	3c 96       	adiw	r30, 0x0c	; 12
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    11ba:	fc 01       	movw	r30, r24
    11bc:	84 81       	ldd	r24, Z+4	; 0x04
    11be:	95 81       	ldd	r25, Z+5	; 0x05
    11c0:	fc 01       	movw	r30, r24
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	f8 01       	movw	r30, r16
    11c8:	09 95       	icall
    11ca:	8c 01       	movw	r16, r24
    11cc:	84 ef       	ldi	r24, 0xF4	; 244
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    11d8:	9c 01       	movw	r18, r24
    11da:	c8 01       	movw	r24, r16
    11dc:	b9 01       	movw	r22, r18
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <vdmLessThanGC>
    11e6:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
    11ea:	88 23       	and	r24, r24
    11ec:	39 f0       	breq	.+14     	; 0x11fc <_Z12control_loopEV+0x5d2>
	
	andResult_3 = newBoolGC(true, NULL);;;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    11f8:	98 8b       	std	Y+16, r25	; 0x10
    11fa:	8f 87       	std	Y+15, r24	; 0x0f
/* Controller.vdmrt 35:9 */
if ( toBool(andResult_3) )
    11fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fe:	98 89       	ldd	r25, Y+16	; 0x10
    1200:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
    1204:	88 23       	and	r24, r24
    1206:	09 f4       	brne	.+2      	; 0x120a <_Z12control_loopEV+0x5e0>
    1208:	9c c0       	rjmp	.+312    	; 0x1342 <_Z12control_loopEV+0x718>
	/* Controller.vdmrt 36:14 */
	{
/* Controller.vdmrt 37:33 */
TVP embeding_5 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_backwardRotate, CLASS_RealPort__Z8getValueEV), NULL)
;
    120a:	e0 91 e2 02 	lds	r30, 0x02E2
    120e:	f0 91 e3 02 	lds	r31, 0x02E3
    1212:	84 81       	ldd	r24, Z+4	; 0x04
    1214:	95 81       	ldd	r25, Z+5	; 0x05
    1216:	fc 01       	movw	r30, r24
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	fc 01       	movw	r30, r24
    121e:	38 96       	adiw	r30, 0x08	; 8
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	fc 01       	movw	r30, r24
    1226:	3c 96       	adiw	r30, 0x0c	; 12
    1228:	84 81       	ldd	r24, Z+4	; 0x04
    122a:	95 81       	ldd	r25, Z+5	; 0x05
    122c:	9c 01       	movw	r18, r24
    122e:	e0 91 e2 02 	lds	r30, 0x02E2
    1232:	f0 91 e3 02 	lds	r31, 0x02E3
    1236:	84 81       	ldd	r24, Z+4	; 0x04
    1238:	95 81       	ldd	r25, Z+5	; 0x05
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	f9 01       	movw	r30, r18
    1242:	09 95       	icall
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	0e 94 0e 34 	call	0x681c	; 0x681c <vdmMinusGC>
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
/* Controller.vdmrt 37:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_5);
    1250:	8d 89       	ldd	r24, Y+21	; 0x15
    1252:	9e 89       	ldd	r25, Y+22	; 0x16
    1254:	fc 01       	movw	r30, r24
    1256:	38 96       	adiw	r30, 0x08	; 8
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1264:	fc 01       	movw	r30, r24
    1266:	84 81       	ldd	r24, Z+4	; 0x04
    1268:	95 81       	ldd	r25, Z+5	; 0x05
    126a:	fc 01       	movw	r30, r24
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	fc 01       	movw	r30, r24
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	fc 01       	movw	r30, r24
    1278:	36 96       	adiw	r30, 0x06	; 6
    127a:	84 81       	ldd	r24, Z+4	; 0x04
    127c:	95 81       	ldd	r25, Z+5	; 0x05
    127e:	8c 01       	movw	r16, r24
    1280:	8d 89       	ldd	r24, Y+21	; 0x15
    1282:	9e 89       	ldd	r25, Y+22	; 0x16
    1284:	fc 01       	movw	r30, r24
    1286:	38 96       	adiw	r30, 0x08	; 8
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1294:	fc 01       	movw	r30, r24
    1296:	84 81       	ldd	r24, Z+4	; 0x04
    1298:	95 81       	ldd	r25, Z+5	; 0x05
    129a:	fc 01       	movw	r30, r24
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	b9 01       	movw	r22, r18
    12a6:	f8 01       	movw	r30, r16
    12a8:	09 95       	icall
/* Controller.vdmrt 38:32 */
TVP embeding_6 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardRotate, CLASS_RealPort__Z8getValueEV)
;
    12aa:	e0 91 e0 02 	lds	r30, 0x02E0
    12ae:	f0 91 e1 02 	lds	r31, 0x02E1
    12b2:	84 81       	ldd	r24, Z+4	; 0x04
    12b4:	95 81       	ldd	r25, Z+5	; 0x05
    12b6:	fc 01       	movw	r30, r24
    12b8:	80 81       	ld	r24, Z
    12ba:	91 81       	ldd	r25, Z+1	; 0x01
    12bc:	fc 01       	movw	r30, r24
    12be:	38 96       	adiw	r30, 0x08	; 8
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	fc 01       	movw	r30, r24
    12c6:	3c 96       	adiw	r30, 0x0c	; 12
    12c8:	84 81       	ldd	r24, Z+4	; 0x04
    12ca:	95 81       	ldd	r25, Z+5	; 0x05
    12cc:	9c 01       	movw	r18, r24
    12ce:	e0 91 e0 02 	lds	r30, 0x02E0
    12d2:	f0 91 e1 02 	lds	r31, 0x02E1
    12d6:	84 81       	ldd	r24, Z+4	; 0x04
    12d8:	95 81       	ldd	r25, Z+5	; 0x05
    12da:	fc 01       	movw	r30, r24
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	f9 01       	movw	r30, r18
    12e2:	09 95       	icall
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
/* Controller.vdmrt 38:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_6);
    12e8:	8d 89       	ldd	r24, Y+21	; 0x15
    12ea:	9e 89       	ldd	r25, Y+22	; 0x16
    12ec:	fc 01       	movw	r30, r24
    12ee:	36 96       	adiw	r30, 0x06	; 6
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    12fc:	fc 01       	movw	r30, r24
    12fe:	84 81       	ldd	r24, Z+4	; 0x04
    1300:	95 81       	ldd	r25, Z+5	; 0x05
    1302:	fc 01       	movw	r30, r24
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	fc 01       	movw	r30, r24
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	fc 01       	movw	r30, r24
    1310:	36 96       	adiw	r30, 0x06	; 6
    1312:	84 81       	ldd	r24, Z+4	; 0x04
    1314:	95 81       	ldd	r25, Z+5	; 0x05
    1316:	8c 01       	movw	r16, r24
    1318:	8d 89       	ldd	r24, Y+21	; 0x15
    131a:	9e 89       	ldd	r25, Y+22	; 0x16
    131c:	fc 01       	movw	r30, r24
    131e:	36 96       	adiw	r30, 0x06	; 6
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    132c:	fc 01       	movw	r30, r24
    132e:	84 81       	ldd	r24, Z+4	; 0x04
    1330:	95 81       	ldd	r25, Z+5	; 0x05
    1332:	fc 01       	movw	r30, r24
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	29 81       	ldd	r18, Y+1	; 0x01
    133a:	3a 81       	ldd	r19, Y+2	; 0x02
    133c:	b9 01       	movw	r22, r18
    133e:	f8 01       	movw	r30, r16
    1340:	09 95       	icall
}
;

TVP andResult_4 = newBoolGC(false, NULL)
;
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    134c:	9e 87       	std	Y+14, r25	; 0x0e
    134e:	8d 87       	std	Y+13, r24	; 0x0d

if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
    1350:	8d 89       	ldd	r24, Y+21	; 0x15
    1352:	9e 89       	ldd	r25, Y+22	; 0x16
    1354:	fc 01       	movw	r30, r24
    1356:	3a 96       	adiw	r30, 0x0a	; 10
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1364:	fc 01       	movw	r30, r24
    1366:	84 81       	ldd	r24, Z+4	; 0x04
    1368:	95 81       	ldd	r25, Z+5	; 0x05
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	fc 01       	movw	r30, r24
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	fc 01       	movw	r30, r24
    1378:	36 96       	adiw	r30, 0x06	; 6
    137a:	84 81       	ldd	r24, Z+4	; 0x04
    137c:	95 81       	ldd	r25, Z+5	; 0x05
    137e:	8c 01       	movw	r16, r24
    1380:	8d 89       	ldd	r24, Y+21	; 0x15
    1382:	9e 89       	ldd	r25, Y+22	; 0x16
    1384:	fc 01       	movw	r30, r24
    1386:	3a 96       	adiw	r30, 0x0a	; 10
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1394:	fc 01       	movw	r30, r24
    1396:	84 81       	ldd	r24, Z+4	; 0x04
    1398:	95 81       	ldd	r25, Z+5	; 0x05
    139a:	fc 01       	movw	r30, r24
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	f8 01       	movw	r30, r16
    13a2:	09 95       	icall
    13a4:	8c 01       	movw	r16, r24
    13a6:	84 ef       	ldi	r24, 0xF4	; 244
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    13b2:	9c 01       	movw	r18, r24
    13b4:	c8 01       	movw	r24, r16
    13b6:	b9 01       	movw	r22, r18
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	0e 94 44 44 	call	0x8888	; 0x8888 <vdmGreaterThanGC>
    13c0:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
    13c4:	88 23       	and	r24, r24
    13c6:	09 f4       	brne	.+2      	; 0x13ca <_Z12control_loopEV+0x7a0>
    13c8:	43 c0       	rjmp	.+134    	; 0x1450 <_Z12control_loopEV+0x826>
	
	if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(500, NULL), NULL)) )
    13ca:	8d 89       	ldd	r24, Y+21	; 0x15
    13cc:	9e 89       	ldd	r25, Y+22	; 0x16
    13ce:	fc 01       	movw	r30, r24
    13d0:	3c 96       	adiw	r30, 0x0c	; 12
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    13de:	fc 01       	movw	r30, r24
    13e0:	84 81       	ldd	r24, Z+4	; 0x04
    13e2:	95 81       	ldd	r25, Z+5	; 0x05
    13e4:	fc 01       	movw	r30, r24
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	fc 01       	movw	r30, r24
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	fc 01       	movw	r30, r24
    13f2:	36 96       	adiw	r30, 0x06	; 6
    13f4:	84 81       	ldd	r24, Z+4	; 0x04
    13f6:	95 81       	ldd	r25, Z+5	; 0x05
    13f8:	8c 01       	movw	r16, r24
    13fa:	8d 89       	ldd	r24, Y+21	; 0x15
    13fc:	9e 89       	ldd	r25, Y+22	; 0x16
    13fe:	fc 01       	movw	r30, r24
    1400:	3c 96       	adiw	r30, 0x0c	; 12
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    140e:	fc 01       	movw	r30, r24
    1410:	84 81       	ldd	r24, Z+4	; 0x04
    1412:	95 81       	ldd	r25, Z+5	; 0x05
    1414:	fc 01       	movw	r30, r24
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	f8 01       	movw	r30, r16
    141c:	09 95       	icall
    141e:	8c 01       	movw	r16, r24
    1420:	84 ef       	ldi	r24, 0xF4	; 244
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    142c:	9c 01       	movw	r18, r24
    142e:	c8 01       	movw	r24, r16
    1430:	b9 01       	movw	r22, r18
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	0e 94 44 44 	call	0x8888	; 0x8888 <vdmGreaterThanGC>
    143a:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
    143e:	88 23       	and	r24, r24
    1440:	39 f0       	breq	.+14     	; 0x1450 <_Z12control_loopEV+0x826>
	
	andResult_4 = newBoolGC(true, NULL);;;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    144c:	9e 87       	std	Y+14, r25	; 0x0e
    144e:	8d 87       	std	Y+13, r24	; 0x0d
/* Controller.vdmrt 41:9 */
if ( toBool(andResult_4) )
    1450:	8d 85       	ldd	r24, Y+13	; 0x0d
    1452:	9e 85       	ldd	r25, Y+14	; 0x0e
    1454:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
	/* Controller.vdmrt 42:14 */
	{
/*  Skip  */
}
;;
}
    1458:	66 96       	adiw	r28, 0x16	; 22
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <Controller_const_init>:



 void Controller_const_init()	{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62

numFields_3 = _Z17fieldInitializer7EV();
    1476:	0e 94 03 06 	call	0xc06	; 0xc06 <_Z17fieldInitializer7EV>
    147a:	90 93 d3 02 	sts	0x02D3, r25
    147e:	80 93 d2 02 	sts	0x02D2, r24

return ;
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <Controller_const_shutdown>:



 void Controller_const_shutdown()	{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_3);
    1490:	80 91 d2 02 	lds	r24, 0x02D2
    1494:	90 91 d3 02 	lds	r25, 0x02D3
    1498:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <Controller_static_init>:



 void Controller_static_init()	{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62

return ;
}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <Controller_static_shutdown>:



 void Controller_static_shutdown()	{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62

return ;
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <Controller_Constructor>:
 *
 --------------------------------- */
 
 
ControllerCLASS Controller_Constructor(ControllerCLASS this_ptr)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <Controller_Constructor+0x6>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	31 f4       	brne	.+12     	; 0x14e0 <Controller_Constructor+0x22>
	{
		this_ptr = (ControllerCLASS) malloc(sizeof(struct Controller));
    14d4:	80 e1       	ldi	r24, 0x10	; 16
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	01 f1       	breq	.+64     	; 0x1528 <Controller_Constructor+0x6a>
	{
	
			
		/*  Controller init  */
		this_ptr->_Controller_id = CLASS_ID_Controller_ID;
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	86 e0       	ldi	r24, 0x06	; 6
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	93 83       	std	Z+3, r25	; 0x03
    14f2:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_Controller_refs = 0;
    14f4:	e9 81       	ldd	r30, Y+1	; 0x01
    14f6:	fa 81       	ldd	r31, Y+2	; 0x02
    14f8:	15 82       	std	Z+5, r1	; 0x05
    14fa:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_Controller_pVTable=VTableArrayForController;
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	8d e6       	ldi	r24, 0x6D	; 109
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24

							this_ptr->m_Controller_servoLeft= NULL ;
    1508:	e9 81       	ldd	r30, Y+1	; 0x01
    150a:	fa 81       	ldd	r31, Y+2	; 0x02
    150c:	17 82       	std	Z+7, r1	; 0x07
    150e:	16 82       	std	Z+6, r1	; 0x06
						this_ptr->m_Controller_servoRight= NULL ;
    1510:	e9 81       	ldd	r30, Y+1	; 0x01
    1512:	fa 81       	ldd	r31, Y+2	; 0x02
    1514:	11 86       	std	Z+9, r1	; 0x09
    1516:	10 86       	std	Z+8, r1	; 0x08
						this_ptr->m_Controller_sensorRightVal= NULL ;
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	13 86       	std	Z+11, r1	; 0x0b
    151e:	12 86       	std	Z+10, r1	; 0x0a
						this_ptr->m_Controller_sensorLeftVal= NULL ;
    1520:	e9 81       	ldd	r30, Y+1	; 0x01
    1522:	fa 81       	ldd	r31, Y+2	; 0x02
    1524:	15 86       	std	Z+13, r1	; 0x0d
    1526:	14 86       	std	Z+12, r1	; 0x0c
			}

	return this_ptr;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <new+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <new+0x8>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <new+0xa>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
	ControllerCLASS ptr=Controller_Constructor(NULL);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 5f 0a 	call	0x14be	; 0x14be <Controller_Constructor>
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_Controller_id, &ptr->_Controller_refs, (freeVdmClassFunction)&Controller_free, ptr)});
    1550:	e9 81       	ldd	r30, Y+1	; 0x01
    1552:	fa 81       	ldd	r31, Y+2	; 0x02
    1554:	62 81       	ldd	r22, Z+2	; 0x02
    1556:	73 81       	ldd	r23, Z+3	; 0x03
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	9c 01       	movw	r18, r24
    155e:	2c 5f       	subi	r18, 0xFC	; 252
    1560:	3f 4f       	sbci	r19, 0xFF	; 255
    1562:	40 ee       	ldi	r20, 0xE0	; 224
    1564:	55 e0       	ldi	r21, 0x05	; 5
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	cb 01       	movw	r24, r22
    156c:	b9 01       	movw	r22, r18
    156e:	9f 01       	movw	r18, r30
    1570:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    1574:	1b 82       	std	Y+3, r1	; 0x03
    1576:	1c 82       	std	Y+4, r1	; 0x04
    1578:	1d 82       	std	Y+5, r1	; 0x05
    157a:	1e 82       	std	Y+6, r1	; 0x06
    157c:	9c 83       	std	Y+4, r25	; 0x04
    157e:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	ControllerCLASS ptr=Controller_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    1580:	2b 81       	ldd	r18, Y+3	; 0x03
    1582:	3c 81       	ldd	r19, Y+4	; 0x04
    1584:	4d 81       	ldd	r20, Y+5	; 0x05
    1586:	5e 81       	ldd	r21, Y+6	; 0x06
    1588:	8b e0       	ldi	r24, 0x0B	; 11
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	ba 01       	movw	r22, r20
    158e:	a9 01       	movw	r20, r18
    1590:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_Controller_id, &ptr->_Controller_refs, (freeVdmClassFunction)&Controller_free, ptr)});
}
    1594:	26 96       	adiw	r28, 0x06	; 6
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor>:
 *
 --------------------------------- */ 
 

    /* Controller.vdmrt 11:12 */
 TVP _Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor(ControllerCLASS this, TVP servL, TVP servR, TVP sensRightVal, TVP sensLeftVal)	{
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	64 97       	sbiw	r28, 0x14	; 20
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	9c 87       	std	Y+12, r25	; 0x0c
    15c0:	8b 87       	std	Y+11, r24	; 0x0b
    15c2:	7e 87       	std	Y+14, r23	; 0x0e
    15c4:	6d 87       	std	Y+13, r22	; 0x0d
    15c6:	58 8b       	std	Y+16, r21	; 0x10
    15c8:	4f 87       	std	Y+15, r20	; 0x0f
    15ca:	3a 8b       	std	Y+18, r19	; 0x12
    15cc:	29 8b       	std	Y+17, r18	; 0x11
    15ce:	1c 8b       	std	Y+20, r17	; 0x14
    15d0:	0b 8b       	std	Y+19, r16	; 0x13

TVP __buf = NULL
;
    15d2:	1a 86       	std	Y+10, r1	; 0x0a
    15d4:	19 86       	std	Y+9, r1	; 0x09

if ( this == NULL )
    15d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f4       	brne	.+26     	; 0x15f8 <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor+0x52>
	
	{

__buf = new();
    15de:	0e 94 9b 0a 	call	0x1536	; 0x1536 <new>
    15e2:	9a 87       	std	Y+10, r25	; 0x0a
    15e4:	89 87       	std	Y+9, r24	; 0x09

this = TO_CLASS_PTR(__buf, Controller);
    15e6:	e9 85       	ldd	r30, Y+9	; 0x09
    15e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    15ea:	84 81       	ldd	r24, Z+4	; 0x04
    15ec:	95 81       	ldd	r25, Z+5	; 0x05
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	9c 87       	std	Y+12, r25	; 0x0c
    15f6:	8b 87       	std	Y+11, r24	; 0x0b
;

{
/* Controller.vdmrt 14:19 */
TVP field_tmp_6 = vdmCloneGC(servL, NULL)
;
    15f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1604:	98 87       	std	Y+8, r25	; 0x08
    1606:	8f 83       	std	Y+7, r24	; 0x07

SET_FIELD_PTR(Controller, Controller, this, servoLeft, field_tmp_6);
    1608:	8b 85       	ldd	r24, Y+11	; 0x0b
    160a:	9c 85       	ldd	r25, Y+12	; 0x0c
    160c:	fc 01       	movw	r30, r24
    160e:	36 96       	adiw	r30, 0x06	; 6
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    1618:	8b 85       	ldd	r24, Y+11	; 0x0b
    161a:	9c 85       	ldd	r25, Y+12	; 0x0c
    161c:	8c 01       	movw	r16, r24
    161e:	0a 5f       	subi	r16, 0xFA	; 250
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    162a:	f8 01       	movw	r30, r16
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24

vdmFree(field_tmp_6);
    1630:	8f 81       	ldd	r24, Y+7	; 0x07
    1632:	98 85       	ldd	r25, Y+8	; 0x08
    1634:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
;

{
/* Controller.vdmrt 15:18 */
TVP field_tmp_7 = vdmCloneGC(servR, NULL)
;
    1638:	8f 85       	ldd	r24, Y+15	; 0x0f
    163a:	98 89       	ldd	r25, Y+16	; 0x10
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05

SET_FIELD_PTR(Controller, Controller, this, servoRight, field_tmp_7);
    1648:	8b 85       	ldd	r24, Y+11	; 0x0b
    164a:	9c 85       	ldd	r25, Y+12	; 0x0c
    164c:	fc 01       	movw	r30, r24
    164e:	38 96       	adiw	r30, 0x08	; 8
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    1658:	8b 85       	ldd	r24, Y+11	; 0x0b
    165a:	9c 85       	ldd	r25, Y+12	; 0x0c
    165c:	8c 01       	movw	r16, r24
    165e:	08 5f       	subi	r16, 0xF8	; 248
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    166a:	f8 01       	movw	r30, r16
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24

vdmFree(field_tmp_7);
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
;

{
/* Controller.vdmrt 16:24 */
TVP field_tmp_8 = vdmCloneGC(sensRightVal, NULL)
;
    1678:	89 89       	ldd	r24, Y+17	; 0x11
    167a:	9a 89       	ldd	r25, Y+18	; 0x12
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03

SET_FIELD_PTR(Controller, Controller, this, sensorRightVal, field_tmp_8);
    1688:	8b 85       	ldd	r24, Y+11	; 0x0b
    168a:	9c 85       	ldd	r25, Y+12	; 0x0c
    168c:	fc 01       	movw	r30, r24
    168e:	3a 96       	adiw	r30, 0x0a	; 10
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    1698:	8b 85       	ldd	r24, Y+11	; 0x0b
    169a:	9c 85       	ldd	r25, Y+12	; 0x0c
    169c:	8c 01       	movw	r16, r24
    169e:	06 5f       	subi	r16, 0xF6	; 246
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    16aa:	f8 01       	movw	r30, r16
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24

vdmFree(field_tmp_8);
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
;

{
/* Controller.vdmrt 17:21 */
TVP field_tmp_9 = vdmCloneGC(sensLeftVal, NULL)
;
    16b8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ba:	9c 89       	ldd	r25, Y+20	; 0x14
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(Controller, Controller, this, sensorLeftVal, field_tmp_9);
    16c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    16cc:	fc 01       	movw	r30, r24
    16ce:	3c 96       	adiw	r30, 0x0c	; 12
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    16d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16da:	9c 85       	ldd	r25, Y+12	; 0x0c
    16dc:	8c 01       	movw	r16, r24
    16de:	04 5f       	subi	r16, 0xF4	; 244
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    16ea:	f8 01       	movw	r30, r16
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	80 83       	st	Z, r24

vdmFree(field_tmp_9);
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
}
;

return __buf;
    16f8:	89 85       	ldd	r24, Y+9	; 0x09
    16fa:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    16fc:	64 96       	adiw	r28, 0x14	; 20
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <_Z10ControllerEV>:


    /* Controller.vdmrt 1:7 */
 TVP _Z10ControllerEV(ControllerCLASS this)	{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <_Z10ControllerEV+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <_Z10ControllerEV+0x8>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    1722:	1a 82       	std	Y+2, r1	; 0x02
    1724:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	69 f4       	brne	.+26     	; 0x1748 <_Z10ControllerEV+0x36>
	
	{

__buf = new();
    172e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <new>
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, Controller);
    1736:	e9 81       	ldd	r30, Y+1	; 0x01
    1738:	fa 81       	ldd	r31, Y+2	; 0x02
    173a:	84 81       	ldd	r24, Z+4	; 0x04
    173c:	95 81       	ldd	r25, Z+5	; 0x05
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <fmi2Instantiate>:
*  ---------------------------------------------------------------------------
*/
fmi2Component fmi2Instantiate(fmi2String instanceName, fmi2Type fmuType, fmi2String fmuGUID,
		fmi2String fmuResourceLocation, const fmi2CallbackFunctions *functions, fmi2Boolean visible,
		fmi2Boolean loggingOn)
{
    175a:	cf 92       	push	r12
    175c:	df 92       	push	r13
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	62 97       	sbiw	r28, 0x12	; 18
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
    177e:	7e 83       	std	Y+6, r23	; 0x06
    1780:	6d 83       	std	Y+5, r22	; 0x05
    1782:	58 87       	std	Y+8, r21	; 0x08
    1784:	4f 83       	std	Y+7, r20	; 0x07
    1786:	3a 87       	std	Y+10, r19	; 0x0a
    1788:	29 87       	std	Y+9, r18	; 0x09
    178a:	1c 87       	std	Y+12, r17	; 0x0c
    178c:	0b 87       	std	Y+11, r16	; 0x0b
    178e:	fe 86       	std	Y+14, r15	; 0x0e
    1790:	ed 86       	std	Y+13, r14	; 0x0d
    1792:	d8 8a       	std	Y+16, r13	; 0x10
    1794:	cf 86       	std	Y+15, r12	; 0x0f
	char *tmpInstanceName;
	
	g_fmiCallbackFunctions = functions;
    1796:	8b 85       	ldd	r24, Y+11	; 0x0b
    1798:	9c 85       	ldd	r25, Y+12	; 0x0c
    179a:	90 93 b9 03 	sts	0x03B9, r25
    179e:	80 93 b8 03 	sts	0x03B8, r24
	
	if(strcmp(fmuGUID, _FMU_GUID) != 0)
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	2f e7       	ldi	r18, 0x7F	; 127
    17a8:	31 e0       	ldi	r19, 0x01	; 1
    17aa:	b9 01       	movw	r22, r18
    17ac:	0e 94 b3 6e 	call	0xdd66	; 0xdd66 <strcmp>
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	c1 f1       	breq	.+112    	; 0x1824 <fmi2Instantiate+0xca>
	{
		g_fmiCallbackFunctions->logger((void*) 1,g_fmiInstanceName,fmi2Error,"logError","%s\n", "GUID mismatch.");
    17b4:	e0 91 b8 03 	lds	r30, 0x03B8
    17b8:	f0 91 b9 03 	lds	r31, 0x03B9
    17bc:	40 81       	ld	r20, Z
    17be:	51 81       	ldd	r21, Z+1	; 0x01
    17c0:	20 91 fa 03 	lds	r18, 0x03FA
    17c4:	30 91 fb 03 	lds	r19, 0x03FB
    17c8:	8d b7       	in	r24, 0x3d	; 61
    17ca:	9e b7       	in	r25, 0x3e	; 62
    17cc:	0c 97       	sbiw	r24, 0x0c	; 12
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	9e bf       	out	0x3e, r25	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	8d bf       	out	0x3d, r24	; 61
    17d8:	ed b7       	in	r30, 0x3d	; 61
    17da:	fe b7       	in	r31, 0x3e	; 62
    17dc:	31 96       	adiw	r30, 0x01	; 1
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	91 83       	std	Z+1, r25	; 0x01
    17e4:	80 83       	st	Z, r24
    17e6:	33 83       	std	Z+3, r19	; 0x03
    17e8:	22 83       	std	Z+2, r18	; 0x02
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	95 83       	std	Z+5, r25	; 0x05
    17f0:	84 83       	std	Z+4, r24	; 0x04
    17f2:	86 ea       	ldi	r24, 0xA6	; 166
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	97 83       	std	Z+7, r25	; 0x07
    17f8:	86 83       	std	Z+6, r24	; 0x06
    17fa:	8f ea       	ldi	r24, 0xAF	; 175
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	91 87       	std	Z+9, r25	; 0x09
    1800:	80 87       	std	Z+8, r24	; 0x08
    1802:	83 eb       	ldi	r24, 0xB3	; 179
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	93 87       	std	Z+11, r25	; 0x0b
    1808:	82 87       	std	Z+10, r24	; 0x0a
    180a:	fa 01       	movw	r30, r20
    180c:	09 95       	icall
    180e:	8d b7       	in	r24, 0x3d	; 61
    1810:	9e b7       	in	r25, 0x3e	; 62
    1812:	0c 96       	adiw	r24, 0x0c	; 12
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	9e bf       	out	0x3e, r25	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	8d bf       	out	0x3d, r24	; 61
		return NULL;
    181e:	1a 8a       	std	Y+18, r1	; 0x12
    1820:	19 8a       	std	Y+17, r1	; 0x11
    1822:	32 c0       	rjmp	.+100    	; 0x1888 <fmi2Instantiate+0x12e>
	}

	tmpInstanceName = (char*)malloc(strlen(instanceName) + 1);
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	0e 94 c3 6e 	call	0xdd86	; 0xdd86 <strlen>
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
	strcpy(tmpInstanceName, instanceName);
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	b9 01       	movw	r22, r18
    1840:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <strcpy>
	g_fmiInstanceName = tmpInstanceName;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	90 93 fb 03 	sts	0x03FB, r25
    184c:	80 93 fa 03 	sts	0x03FA, r24

	resourcesLocation = (char*)calloc(strlen(fmuResourceLocation) + 1, sizeof(char));
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	0e 94 c3 6e 	call	0xdd86	; 0xdd86 <strlen>
    1858:	01 96       	adiw	r24, 0x01	; 1
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    1862:	90 93 29 03 	sts	0x0329, r25
    1866:	80 93 28 03 	sts	0x0328, r24
	strcpy(resourcesLocation, fmuResourceLocation);
    186a:	80 91 28 03 	lds	r24, 0x0328
    186e:	90 91 29 03 	lds	r25, 0x0329
    1872:	29 85       	ldd	r18, Y+9	; 0x09
    1874:	3a 85       	ldd	r19, Y+10	; 0x0a
    1876:	b9 01       	movw	r22, r18
    1878:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <strcpy>
	
	systemInit();
    187c:	0e 94 6e 13 	call	0x26dc	; 0x26dc <systemInit>

	return (void*) 1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9a 8b       	std	Y+18, r25	; 0x12
    1886:	89 8b       	std	Y+17, r24	; 0x11
    1888:	89 89       	ldd	r24, Y+17	; 0x11
    188a:	9a 89       	ldd	r25, Y+18	; 0x12
}
    188c:	62 96       	adiw	r28, 0x12	; 18
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	08 95       	ret

000018aa <fmi2SetupExperiment>:

fmi2Status fmi2SetupExperiment(fmi2Component c, fmi2Boolean toleranceDefined, fmi2Real tolerance,
		fmi2Real startTime, fmi2Boolean stopTimeDefined, fmi2Real stopTime)
{
    18aa:	8f 92       	push	r8
    18ac:	9f 92       	push	r9
    18ae:	af 92       	push	r10
    18b0:	bf 92       	push	r11
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	62 97       	sbiw	r28, 0x12	; 18
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	7c 83       	std	Y+4, r23	; 0x04
    18d8:	6b 83       	std	Y+3, r22	; 0x03
    18da:	2d 83       	std	Y+5, r18	; 0x05
    18dc:	3e 83       	std	Y+6, r19	; 0x06
    18de:	4f 83       	std	Y+7, r20	; 0x07
    18e0:	58 87       	std	Y+8, r21	; 0x08
    18e2:	e9 86       	std	Y+9, r14	; 0x09
    18e4:	fa 86       	std	Y+10, r15	; 0x0a
    18e6:	0b 87       	std	Y+11, r16	; 0x0b
    18e8:	1c 87       	std	Y+12, r17	; 0x0c
    18ea:	de 86       	std	Y+14, r13	; 0x0e
    18ec:	cd 86       	std	Y+13, r12	; 0x0d
    18ee:	8f 86       	std	Y+15, r8	; 0x0f
    18f0:	98 8a       	std	Y+16, r9	; 0x10
    18f2:	a9 8a       	std	Y+17, r10	; 0x11
    18f4:	ba 8a       	std	Y+18, r11	; 0x12
	return fmi2OK;
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
}
    18fa:	62 96       	adiw	r28, 0x12	; 18
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	df 90       	pop	r13
    1914:	cf 90       	pop	r12
    1916:	bf 90       	pop	r11
    1918:	af 90       	pop	r10
    191a:	9f 90       	pop	r9
    191c:	8f 90       	pop	r8
    191e:	08 95       	ret

00001920 <fmi2EnterInitializationMode>:

fmi2Status fmi2EnterInitializationMode(fmi2Component c)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <fmi2EnterInitializationMode+0x6>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <fmi2ExitInitializationMode>:

fmi2Status fmi2ExitInitializationMode(fmi2Component c)
{	
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <fmi2ExitInitializationMode+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <fmi2Terminate>:

fmi2Status fmi2Terminate(fmi2Component c)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <fmi2Terminate+0x6>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <fmi2Reset>:

fmi2Status fmi2Reset(fmi2Component c)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <fmi2Reset+0x6>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <fmi2FreeInstance>:

void fmi2FreeInstance(fmi2Component c)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <fmi2FreeInstance+0x6>
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
	systemDeInit();
    199e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <systemDeInit>
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <fmi2GetVersion>:
*  FMI functions: class methods not depending of a specific model instance
*  ---------------------------------------------------------------------------
*/

const char* fmi2GetVersion()
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	return fmi2Version;
    19b4:	82 ec       	ldi	r24, 0xC2	; 194
    19b6:	91 e0       	ldi	r25, 0x01	; 1
}
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <fmi2GetTypesPlatform>:

const char* fmi2GetTypesPlatform()
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
	return fmi2TypesPlatform;
    19c6:	86 ec       	ldi	r24, 0xC6	; 198
    19c8:	91 e0       	ldi	r25, 0x01	; 1
}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <fmi2SetDebugLogging>:
*  ---------------------------------------------------------------------------
*/

fmi2Status fmi2SetDebugLogging(fmi2Component c, fmi2Boolean loggingOn, size_t nCategories,
		const fmi2String categories[])
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	28 97       	sbiw	r28, 0x08	; 8
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	7c 83       	std	Y+4, r23	; 0x04
    19ea:	6b 83       	std	Y+3, r22	; 0x03
    19ec:	5e 83       	std	Y+6, r21	; 0x06
    19ee:	4d 83       	std	Y+5, r20	; 0x05
    19f0:	38 87       	std	Y+8, r19	; 0x08
    19f2:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
}
    19f8:	28 96       	adiw	r28, 0x08	; 8
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <fmi2GetReal>:

fmi2Status fmi2GetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Real value[])
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	2c 97       	sbiw	r28, 0x0c	; 12
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	78 87       	std	Y+8, r23	; 0x08
    1a24:	6f 83       	std	Y+7, r22	; 0x07
    1a26:	5a 87       	std	Y+10, r21	; 0x0a
    1a28:	49 87       	std	Y+9, r20	; 0x09
    1a2a:	3c 87       	std	Y+12, r19	; 0x0c
    1a2c:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1a2e:	1c 82       	std	Y+4, r1	; 0x04
    1a30:	1b 82       	std	Y+3, r1	; 0x03
    1a32:	31 c0       	rjmp	.+98     	; 0x1a96 <fmi2GetReal+0x8c>
	{
		fmi2ValueReference vRef = vr[i];
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	9c 01       	movw	r18, r24
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a40:	98 85       	ldd	r25, Y+8	; 0x08
    1a42:	fc 01       	movw	r30, r24
    1a44:	e2 0f       	add	r30, r18
    1a46:	f3 1f       	adc	r31, r19
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
		value[i] = fmiBuffer.realBuffer[vRef];
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	9c 01       	movw	r18, r24
    1a56:	22 0f       	add	r18, r18
    1a58:	33 1f       	adc	r19, r19
    1a5a:	22 0f       	add	r18, r18
    1a5c:	33 1f       	adc	r19, r19
    1a5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a60:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a62:	28 0f       	add	r18, r24
    1a64:	39 1f       	adc	r19, r25
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	04 96       	adiw	r24, 0x04	; 4
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	fc 01       	movw	r30, r24
    1a76:	e6 54       	subi	r30, 0x46	; 70
    1a78:	fc 4f       	sbci	r31, 0xFC	; 252
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a80:	b3 81       	ldd	r27, Z+3	; 0x03
    1a82:	f9 01       	movw	r30, r18
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03

fmi2Status fmi2GetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Real value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	2b 81       	ldd	r18, Y+3	; 0x03
    1a98:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	28 17       	cp	r18, r24
    1aa0:	39 07       	cpc	r19, r25
    1aa2:	40 f2       	brcs	.-112    	; 0x1a34 <fmi2GetReal+0x2a>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.realBuffer[vRef];
	}
	return fmi2OK;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
}
    1aa8:	2c 96       	adiw	r28, 0x0c	; 12
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <fmi2GetInteger>:

fmi2Status fmi2GetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Integer value[])
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	2c 97       	sbiw	r28, 0x0c	; 12
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	78 87       	std	Y+8, r23	; 0x08
    1ad4:	6f 83       	std	Y+7, r22	; 0x07
    1ad6:	5a 87       	std	Y+10, r21	; 0x0a
    1ad8:	49 87       	std	Y+9, r20	; 0x09
    1ada:	3c 87       	std	Y+12, r19	; 0x0c
    1adc:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1ade:	1c 82       	std	Y+4, r1	; 0x04
    1ae0:	1b 82       	std	Y+3, r1	; 0x03
    1ae2:	2a c0       	rjmp	.+84     	; 0x1b38 <fmi2GetInteger+0x7e>
	{
		fmi2ValueReference vRef = vr[i];
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	9c 01       	movw	r18, r24
    1aea:	22 0f       	add	r18, r18
    1aec:	33 1f       	adc	r19, r19
    1aee:	8f 81       	ldd	r24, Y+7	; 0x07
    1af0:	98 85       	ldd	r25, Y+8	; 0x08
    1af2:	fc 01       	movw	r30, r24
    1af4:	e2 0f       	add	r30, r18
    1af6:	f3 1f       	adc	r31, r19
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
		value[i] = fmiBuffer.intBuffer[vRef];
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	9c 01       	movw	r18, r24
    1b06:	22 0f       	add	r18, r18
    1b08:	33 1f       	adc	r19, r19
    1b0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b0e:	dc 01       	movw	r26, r24
    1b10:	a2 0f       	add	r26, r18
    1b12:	b3 1f       	adc	r27, r19
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	48 96       	adiw	r24, 0x18	; 24
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	fc 01       	movw	r30, r24
    1b20:	e6 54       	subi	r30, 0x46	; 70
    1b22:	fc 4f       	sbci	r31, 0xFC	; 252
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	11 96       	adiw	r26, 0x01	; 1
    1b2a:	9c 93       	st	X, r25
    1b2c:	8e 93       	st	-X, r24

fmi2Status fmi2GetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Integer value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	28 17       	cp	r18, r24
    1b42:	39 07       	cpc	r19, r25
    1b44:	78 f2       	brcs	.-98     	; 0x1ae4 <fmi2GetInteger+0x2a>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.intBuffer[vRef];
	}
	return fmi2OK;
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
}
    1b4a:	2c 96       	adiw	r28, 0x0c	; 12
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <fmi2GetBoolean>:

fmi2Status fmi2GetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Boolean value[])
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	2c 97       	sbiw	r28, 0x0c	; 12
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	78 87       	std	Y+8, r23	; 0x08
    1b76:	6f 83       	std	Y+7, r22	; 0x07
    1b78:	5a 87       	std	Y+10, r21	; 0x0a
    1b7a:	49 87       	std	Y+9, r20	; 0x09
    1b7c:	3c 87       	std	Y+12, r19	; 0x0c
    1b7e:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1b80:	1c 82       	std	Y+4, r1	; 0x04
    1b82:	1b 82       	std	Y+3, r1	; 0x03
    1b84:	29 c0       	rjmp	.+82     	; 0x1bd8 <fmi2GetBoolean+0x7c>
	{
		fmi2ValueReference vRef = vr[i];
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	8f 81       	ldd	r24, Y+7	; 0x07
    1b92:	98 85       	ldd	r25, Y+8	; 0x08
    1b94:	fc 01       	movw	r30, r24
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
		value[i] = fmiBuffer.booleanBuffer[vRef];
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bae:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	a2 0f       	add	r26, r18
    1bb4:	b3 1f       	adc	r27, r19
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e6 54       	subi	r30, 0x46	; 70
    1bc2:	fc 4f       	sbci	r31, 0xFC	; 252
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	9c 93       	st	X, r25
    1bcc:	8e 93       	st	-X, r24

fmi2Status fmi2GetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Boolean value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	9c 83       	std	Y+4, r25	; 0x04
    1bd6:	8b 83       	std	Y+3, r24	; 0x03
    1bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bda:	3c 81       	ldd	r19, Y+4	; 0x04
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	28 17       	cp	r18, r24
    1be2:	39 07       	cpc	r19, r25
    1be4:	80 f2       	brcs	.-96     	; 0x1b86 <fmi2GetBoolean+0x2a>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.booleanBuffer[vRef];
	}

	return fmi2OK;
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
}
    1bea:	2c 96       	adiw	r28, 0x0c	; 12
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <fmi2GetString>:

fmi2Status fmi2GetString(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2String value[])
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	28 97       	sbiw	r28, 0x08	; 8
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	7c 83       	std	Y+4, r23	; 0x04
    1c16:	6b 83       	std	Y+3, r22	; 0x03
    1c18:	5e 83       	std	Y+6, r21	; 0x06
    1c1a:	4d 83       	std	Y+5, r20	; 0x05
    1c1c:	38 87       	std	Y+8, r19	; 0x08
    1c1e:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
}
    1c24:	28 96       	adiw	r28, 0x08	; 8
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <fmi2SetReal>:

fmi2Status fmi2SetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Real value[])
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	2c 97       	sbiw	r28, 0x0c	; 12
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	78 87       	std	Y+8, r23	; 0x08
    1c50:	6f 83       	std	Y+7, r22	; 0x07
    1c52:	5a 87       	std	Y+10, r21	; 0x0a
    1c54:	49 87       	std	Y+9, r20	; 0x09
    1c56:	3c 87       	std	Y+12, r19	; 0x0c
    1c58:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1c5a:	1c 82       	std	Y+4, r1	; 0x04
    1c5c:	1b 82       	std	Y+3, r1	; 0x03
    1c5e:	32 c0       	rjmp	.+100    	; 0x1cc4 <fmi2SetReal+0x8e>
	{
		fmi2ValueReference vRef = vr[i];
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	9c 01       	movw	r18, r24
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	98 85       	ldd	r25, Y+8	; 0x08
    1c6e:	fc 01       	movw	r30, r24
    1c70:	e2 0f       	add	r30, r18
    1c72:	f3 1f       	adc	r31, r19
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.realBuffer[vRef] = value[i];
    1c7c:	69 81       	ldd	r22, Y+1	; 0x01
    1c7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	9c 01       	movw	r18, r24
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c90:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c92:	fc 01       	movw	r30, r24
    1c94:	e2 0f       	add	r30, r18
    1c96:	f3 1f       	adc	r31, r19
    1c98:	20 81       	ld	r18, Z
    1c9a:	31 81       	ldd	r19, Z+1	; 0x01
    1c9c:	42 81       	ldd	r20, Z+2	; 0x02
    1c9e:	53 81       	ldd	r21, Z+3	; 0x03
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	04 96       	adiw	r24, 0x04	; 4
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	fc 01       	movw	r30, r24
    1cae:	e6 54       	subi	r30, 0x46	; 70
    1cb0:	fc 4f       	sbci	r31, 0xFC	; 252
    1cb2:	20 83       	st	Z, r18
    1cb4:	31 83       	std	Z+1, r19	; 0x01
    1cb6:	42 83       	std	Z+2, r20	; 0x02
    1cb8:	53 83       	std	Z+3, r21	; 0x03

fmi2Status fmi2SetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Real value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	28 17       	cp	r18, r24
    1cce:	39 07       	cpc	r19, r25
    1cd0:	38 f2       	brcs	.-114    	; 0x1c60 <fmi2SetReal+0x2a>
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.realBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.realBuffer[vRef]);  */
	}

	return fmi2OK;
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
}
    1cd6:	2c 96       	adiw	r28, 0x0c	; 12
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <fmi2SetInteger>:

fmi2Status fmi2SetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer value[])
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	2c 97       	sbiw	r28, 0x0c	; 12
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	78 87       	std	Y+8, r23	; 0x08
    1d02:	6f 83       	std	Y+7, r22	; 0x07
    1d04:	5a 87       	std	Y+10, r21	; 0x0a
    1d06:	49 87       	std	Y+9, r20	; 0x09
    1d08:	3c 87       	std	Y+12, r19	; 0x0c
    1d0a:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1d0c:	1c 82       	std	Y+4, r1	; 0x04
    1d0e:	1b 82       	std	Y+3, r1	; 0x03
    1d10:	2a c0       	rjmp	.+84     	; 0x1d66 <fmi2SetInteger+0x7e>
	{
		fmi2ValueReference vRef = vr[i];
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	9c 01       	movw	r18, r24
    1d18:	22 0f       	add	r18, r18
    1d1a:	33 1f       	adc	r19, r19
    1d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1e:	98 85       	ldd	r25, Y+8	; 0x08
    1d20:	fc 01       	movw	r30, r24
    1d22:	e2 0f       	add	r30, r18
    1d24:	f3 1f       	adc	r31, r19
    1d26:	80 81       	ld	r24, Z
    1d28:	91 81       	ldd	r25, Z+1	; 0x01
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.intBuffer[vRef] = value[i];
    1d2e:	49 81       	ldd	r20, Y+1	; 0x01
    1d30:	5a 81       	ldd	r21, Y+2	; 0x02
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	9c 01       	movw	r18, r24
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d40:	fc 01       	movw	r30, r24
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
    1d46:	20 81       	ld	r18, Z
    1d48:	31 81       	ldd	r19, Z+1	; 0x01
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	48 96       	adiw	r24, 0x18	; 24
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	fc 01       	movw	r30, r24
    1d54:	e6 54       	subi	r30, 0x46	; 70
    1d56:	fc 4f       	sbci	r31, 0xFC	; 252
    1d58:	31 83       	std	Z+1, r19	; 0x01
    1d5a:	20 83       	st	Z, r18
fmi2Status fmi2SetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	2b 81       	ldd	r18, Y+3	; 0x03
    1d68:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	28 17       	cp	r18, r24
    1d70:	39 07       	cpc	r19, r25
    1d72:	78 f2       	brcs	.-98     	; 0x1d12 <fmi2SetInteger+0x2a>
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.intBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.intBuffer[vRef]);  */
	}

	return fmi2OK;
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
}
    1d78:	2c 96       	adiw	r28, 0x0c	; 12
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <fmi2SetBoolean>:

fmi2Status fmi2SetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Boolean value[])
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	2c 97       	sbiw	r28, 0x0c	; 12
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	78 87       	std	Y+8, r23	; 0x08
    1da4:	6f 83       	std	Y+7, r22	; 0x07
    1da6:	5a 87       	std	Y+10, r21	; 0x0a
    1da8:	49 87       	std	Y+9, r20	; 0x09
    1daa:	3c 87       	std	Y+12, r19	; 0x0c
    1dac:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1dae:	1c 82       	std	Y+4, r1	; 0x04
    1db0:	1b 82       	std	Y+3, r1	; 0x03
    1db2:	29 c0       	rjmp	.+82     	; 0x1e06 <fmi2SetBoolean+0x7c>
	{
		fmi2ValueReference vRef = vr[i];
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	9c 01       	movw	r18, r24
    1dba:	22 0f       	add	r18, r18
    1dbc:	33 1f       	adc	r19, r19
    1dbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc0:	98 85       	ldd	r25, Y+8	; 0x08
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	e2 0f       	add	r30, r18
    1dc6:	f3 1f       	adc	r31, r19
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.booleanBuffer[vRef] = value[i];
    1dd0:	49 81       	ldd	r20, Y+1	; 0x01
    1dd2:	5a 81       	ldd	r21, Y+2	; 0x02
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	9c 01       	movw	r18, r24
    1dda:	22 0f       	add	r18, r18
    1ddc:	33 1f       	adc	r19, r19
    1dde:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de2:	fc 01       	movw	r30, r24
    1de4:	e2 0f       	add	r30, r18
    1de6:	f3 1f       	adc	r31, r19
    1de8:	20 81       	ld	r18, Z
    1dea:	31 81       	ldd	r19, Z+1	; 0x01
    1dec:	ca 01       	movw	r24, r20
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	fc 01       	movw	r30, r24
    1df4:	e6 54       	subi	r30, 0x46	; 70
    1df6:	fc 4f       	sbci	r31, 0xFC	; 252
    1df8:	31 83       	std	Z+1, r19	; 0x01
    1dfa:	20 83       	st	Z, r18
fmi2Status fmi2SetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Boolean value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	28 17       	cp	r18, r24
    1e10:	39 07       	cpc	r19, r25
    1e12:	80 f2       	brcs	.-96     	; 0x1db4 <fmi2SetBoolean+0x2a>
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.booleanBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.boolBuffer[vRef]);  */
	}

	return fmi2OK;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
}
    1e18:	2c 96       	adiw	r28, 0x0c	; 12
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <fmi2SetString>:

fmi2Status fmi2SetString(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2String value[])
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	28 97       	sbiw	r28, 0x08	; 8
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	7c 83       	std	Y+4, r23	; 0x04
    1e44:	6b 83       	std	Y+3, r22	; 0x03
    1e46:	5e 83       	std	Y+6, r21	; 0x06
    1e48:	4d 83       	std	Y+5, r20	; 0x05
    1e4a:	38 87       	std	Y+8, r19	; 0x08
    1e4c:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
}
    1e52:	28 96       	adiw	r28, 0x08	; 8
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <fmi2GetFMUstate>:

fmi2Status fmi2GetFMUstate(fmi2Component c, fmi2FMUstate* FMUstate)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <fmi2GetFMUstate+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <fmi2GetFMUstate+0x8>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	7c 83       	std	Y+4, r23	; 0x04
    1e76:	6b 83       	std	Y+3, r22	; 0x03
	return fmi2OK;
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
}
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <fmi2SetFMUstate>:
fmi2Status fmi2SetFMUstate(fmi2Component c, fmi2FMUstate FMUstate)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <fmi2SetFMUstate+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <fmi2SetFMUstate+0x8>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	7c 83       	std	Y+4, r23	; 0x04
    1e9c:	6b 83       	std	Y+3, r22	; 0x03
	return fmi2OK;
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <fmi2FreeFMUstate>:
fmi2Status fmi2FreeFMUstate(fmi2Component c, fmi2FMUstate* FMUstate)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <fmi2FreeFMUstate+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <fmi2FreeFMUstate+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	7c 83       	std	Y+4, r23	; 0x04
    1ec2:	6b 83       	std	Y+3, r22	; 0x03
	return fmi2OK;
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <fmi2SerializedFMUstateSize>:
fmi2Status fmi2SerializedFMUstateSize(fmi2Component c, fmi2FMUstate FMUstate, size_t *size)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <fmi2SerializedFMUstateSize+0x6>
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <fmi2SerializedFMUstateSize+0x8>
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <fmi2SerializedFMUstateSize+0xa>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	7c 83       	std	Y+4, r23	; 0x04
    1eea:	6b 83       	std	Y+3, r22	; 0x03
    1eec:	5e 83       	std	Y+6, r21	; 0x06
    1eee:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
}
    1ef4:	26 96       	adiw	r28, 0x06	; 6
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <fmi2SerializeFMUstate>:
fmi2Status fmi2SerializeFMUstate(fmi2Component c, fmi2FMUstate FMUstate, fmi2Byte serializedState[],
		size_t size)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	28 97       	sbiw	r28, 0x08	; 8
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	7c 83       	std	Y+4, r23	; 0x04
    1f20:	6b 83       	std	Y+3, r22	; 0x03
    1f22:	5e 83       	std	Y+6, r21	; 0x06
    1f24:	4d 83       	std	Y+5, r20	; 0x05
    1f26:	38 87       	std	Y+8, r19	; 0x08
    1f28:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
}
    1f2e:	28 96       	adiw	r28, 0x08	; 8
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <fmi2DeSerializeFMUstate>:
fmi2Status fmi2DeSerializeFMUstate(fmi2Component c, const fmi2Byte serializedState[], size_t size,
		fmi2FMUstate* FMUstate)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	28 97       	sbiw	r28, 0x08	; 8
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	7c 83       	std	Y+4, r23	; 0x04
    1f5a:	6b 83       	std	Y+3, r22	; 0x03
    1f5c:	5e 83       	std	Y+6, r21	; 0x06
    1f5e:	4d 83       	std	Y+5, r20	; 0x05
    1f60:	38 87       	std	Y+8, r19	; 0x08
    1f62:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
}
    1f68:	28 96       	adiw	r28, 0x08	; 8
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <fmi2GetDirectionalDerivative>:

fmi2Status fmi2GetDirectionalDerivative(fmi2Component c, const fmi2ValueReference vUnknown_ref[],
		size_t nUnknown, const fmi2ValueReference vKnown_ref[], size_t nKnown, const fmi2Real dvKnown[],
		fmi2Real dvUnknown[])
{
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	7c 83       	std	Y+4, r23	; 0x04
    1fa0:	6b 83       	std	Y+3, r22	; 0x03
    1fa2:	5e 83       	std	Y+6, r21	; 0x06
    1fa4:	4d 83       	std	Y+5, r20	; 0x05
    1fa6:	38 87       	std	Y+8, r19	; 0x08
    1fa8:	2f 83       	std	Y+7, r18	; 0x07
    1faa:	1a 87       	std	Y+10, r17	; 0x0a
    1fac:	09 87       	std	Y+9, r16	; 0x09
    1fae:	fc 86       	std	Y+12, r15	; 0x0c
    1fb0:	eb 86       	std	Y+11, r14	; 0x0b
    1fb2:	de 86       	std	Y+14, r13	; 0x0e
    1fb4:	cd 86       	std	Y+13, r12	; 0x0d
	return fmi2OK;
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
}
    1fba:	2e 96       	adiw	r28, 0x0e	; 14
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	cf 90       	pop	r12
    1fd6:	08 95       	ret

00001fd8 <fmi2SetRealInputDerivatives>:
*/
#ifdef FMI_COSIMULATION
/* Simulating the slave */
fmi2Status fmi2SetRealInputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer order[], const fmi2Real value[])
{
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	2a 97       	sbiw	r28, 0x0a	; 10
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	7c 83       	std	Y+4, r23	; 0x04
    1ff6:	6b 83       	std	Y+3, r22	; 0x03
    1ff8:	5e 83       	std	Y+6, r21	; 0x06
    1ffa:	4d 83       	std	Y+5, r20	; 0x05
    1ffc:	38 87       	std	Y+8, r19	; 0x08
    1ffe:	2f 83       	std	Y+7, r18	; 0x07
    2000:	1a 87       	std	Y+10, r17	; 0x0a
    2002:	09 87       	std	Y+9, r16	; 0x09
	return fmi2OK;
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
}
    2008:	2a 96       	adiw	r28, 0x0a	; 10
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	08 95       	ret

0000201e <fmi2GetRealOutputDerivatives>:

fmi2Status fmi2GetRealOutputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer order[], fmi2Real value[])
{
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	2a 97       	sbiw	r28, 0x0a	; 10
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	7c 83       	std	Y+4, r23	; 0x04
    203c:	6b 83       	std	Y+3, r22	; 0x03
    203e:	5e 83       	std	Y+6, r21	; 0x06
    2040:	4d 83       	std	Y+5, r20	; 0x05
    2042:	38 87       	std	Y+8, r19	; 0x08
    2044:	2f 83       	std	Y+7, r18	; 0x07
    2046:	1a 87       	std	Y+10, r17	; 0x0a
    2048:	09 87       	std	Y+9, r16	; 0x09
	return fmi2OK;
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
}
    204e:	2a 96       	adiw	r28, 0x0a	; 10
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	08 95       	ret

00002064 <fmi2CancelStep>:

fmi2Status fmi2CancelStep(fmi2Component c)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <fmi2CancelStep+0x6>
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <fmi2DoStep>:

fmi2Status fmi2DoStep(fmi2Component c, fmi2Real currentCommunicationPoint, fmi2Real communicationStepSize,
		fmi2Boolean noSetFMUStatePriorToCurrentPoint)
{
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	2e 97       	sbiw	r28, 0x0e	; 14
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	9c 83       	std	Y+4, r25	; 0x04
    209e:	8b 83       	std	Y+3, r24	; 0x03
    20a0:	4d 83       	std	Y+5, r20	; 0x05
    20a2:	5e 83       	std	Y+6, r21	; 0x06
    20a4:	6f 83       	std	Y+7, r22	; 0x07
    20a6:	78 87       	std	Y+8, r23	; 0x08
    20a8:	09 87       	std	Y+9, r16	; 0x09
    20aa:	1a 87       	std	Y+10, r17	; 0x0a
    20ac:	2b 87       	std	Y+11, r18	; 0x0b
    20ae:	3c 87       	std	Y+12, r19	; 0x0c
    20b0:	fe 86       	std	Y+14, r15	; 0x0e
    20b2:	ed 86       	std	Y+13, r14	; 0x0d
	fmi2Status stepStatus;

	syncInputsToModel();
    20b4:	0e 94 14 11 	call	0x2228	; 0x2228 <syncInputsToModel>
	stepStatus = vdmStep(currentCommunicationPoint, communicationStepSize);
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	af 81       	ldd	r26, Y+7	; 0x07
    20be:	b8 85       	ldd	r27, Y+8	; 0x08
    20c0:	29 85       	ldd	r18, Y+9	; 0x09
    20c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    20c4:	4b 85       	ldd	r20, Y+11	; 0x0b
    20c6:	5c 85       	ldd	r21, Y+12	; 0x0c
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 2b 14 	call	0x2856	; 0x2856 <vdmStep>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	syncOutputsToBuffers();
    20d4:	0e 94 96 12 	call	0x252c	; 0x252c <syncOutputsToBuffers>
	return stepStatus;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20dc:	2e 96       	adiw	r28, 0x0e	; 14
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	08 95       	ret

000020f6 <fmi2GetStatus>:

fmi2Status fmi2GetStatus(fmi2Component c, const fmi2StatusKind s, fmi2Status *value)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <fmi2GetStatus+0x6>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <fmi2GetStatus+0x8>
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <fmi2GetStatus+0xa>
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	7c 83       	std	Y+4, r23	; 0x04
    210a:	6b 83       	std	Y+3, r22	; 0x03
    210c:	5e 83       	std	Y+6, r21	; 0x06
    210e:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
}
    2114:	26 96       	adiw	r28, 0x06	; 6
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <fmi2GetRealStatus>:

fmi2Status fmi2GetRealStatus(fmi2Component c, const fmi2StatusKind s, fmi2Real *value)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <fmi2GetRealStatus+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <fmi2GetRealStatus+0x8>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <fmi2GetRealStatus+0xa>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	7c 83       	std	Y+4, r23	; 0x04
    213a:	6b 83       	std	Y+3, r22	; 0x03
    213c:	5e 83       	std	Y+6, r21	; 0x06
    213e:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
}
    2144:	26 96       	adiw	r28, 0x06	; 6
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <fmi2GetIntegerStatus>:

fmi2Status fmi2GetIntegerStatus(fmi2Component c, const fmi2StatusKind s, fmi2Integer *value)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <fmi2GetIntegerStatus+0x6>
    215c:	00 d0       	rcall	.+0      	; 0x215e <fmi2GetIntegerStatus+0x8>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <fmi2GetIntegerStatus+0xa>
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	7c 83       	std	Y+4, r23	; 0x04
    216a:	6b 83       	std	Y+3, r22	; 0x03
    216c:	5e 83       	std	Y+6, r21	; 0x06
    216e:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
}
    2174:	26 96       	adiw	r28, 0x06	; 6
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <fmi2GetBooleanStatus>:

fmi2Status fmi2GetBooleanStatus(fmi2Component c, const fmi2StatusKind s, fmi2Boolean *value)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <fmi2GetBooleanStatus+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <fmi2GetBooleanStatus+0x8>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <fmi2GetBooleanStatus+0xa>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	7c 83       	std	Y+4, r23	; 0x04
    219a:	6b 83       	std	Y+3, r22	; 0x03
    219c:	5e 83       	std	Y+6, r21	; 0x06
    219e:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
}
    21a4:	26 96       	adiw	r28, 0x06	; 6
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <fmi2GetStringStatus>:

fmi2Status fmi2GetStringStatus(fmi2Component c, const fmi2StatusKind s, fmi2String *value)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <fmi2GetStringStatus+0x6>
    21bc:	00 d0       	rcall	.+0      	; 0x21be <fmi2GetStringStatus+0x8>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <fmi2GetStringStatus+0xa>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	7c 83       	std	Y+4, r23	; 0x04
    21ca:	6b 83       	std	Y+3, r22	; 0x03
    21cc:	5e 83       	std	Y+6, r21	; 0x06
    21ce:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
}
    21d4:	26 96       	adiw	r28, 0x06	; 6
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <fmi2GetMaxStepsize>:

/* INTO cps specific*/
fmi2Status fmi2GetMaxStepsize(fmi2Component c, fmi2Real* size)
{	
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <fmi2GetMaxStepsize+0x6>
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <fmi2GetMaxStepsize+0x8>
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	7c 83       	std	Y+4, r23	; 0x04
    21f8:	6b 83       	std	Y+3, r22	; 0x03
	*size = maxStepSize;
    21fa:	80 91 d8 02 	lds	r24, 0x02D8
    21fe:	90 91 d9 02 	lds	r25, 0x02D9
    2202:	a0 91 da 02 	lds	r26, 0x02DA
    2206:	b0 91 db 02 	lds	r27, 0x02DB
    220a:	eb 81       	ldd	r30, Y+3	; 0x03
    220c:	fc 81       	ldd	r31, Y+4	; 0x04
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
	return fmi2OK;
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
}
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <syncInputsToModel>:
TVP sys = NULL;
fmi2Boolean syncOutAllowed = fmi2True;
fmi2Real maxStepSize = 0.0;


void syncInputsToModel(){
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	62 97       	sbiw	r28, 0x12	; 18
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[0]);
    2240:	80 91 ca 03 	lds	r24, 0x03CA
    2244:	90 91 cb 03 	lds	r25, 0x03CB
    2248:	a0 91 cc 03 	lds	r26, 0x03CC
    224c:	b0 91 cd 03 	lds	r27, 0x03CD
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2258:	9a 8b       	std	Y+18, r25	; 0x12
    225a:	89 8b       	std	Y+17, r24	; 0x11
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_forwardRotate,value,newValue);
    225c:	e0 91 e0 02 	lds	r30, 0x02E0
    2260:	f0 91 e1 02 	lds	r31, 0x02E1
    2264:	84 81       	ldd	r24, Z+4	; 0x04
    2266:	95 81       	ldd	r25, Z+5	; 0x05
    2268:	fc 01       	movw	r30, r24
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	fc 01       	movw	r30, r24
    2270:	3e 96       	adiw	r30, 0x0e	; 14
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    227a:	e0 91 e0 02 	lds	r30, 0x02E0
    227e:	f0 91 e1 02 	lds	r31, 0x02E1
    2282:	84 81       	ldd	r24, Z+4	; 0x04
    2284:	95 81       	ldd	r25, Z+5	; 0x05
    2286:	fc 01       	movw	r30, r24
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	8c 01       	movw	r16, r24
    228e:	02 5f       	subi	r16, 0xF2	; 242
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	89 89       	ldd	r24, Y+17	; 0x11
    2294:	9a 89       	ldd	r25, Y+18	; 0x12
    2296:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    229a:	f8 01       	movw	r30, r16
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
		vdmFree(newValue);
    22a0:	89 89       	ldd	r24, Y+17	; 0x11
    22a2:	9a 89       	ldd	r25, Y+18	; 0x12
    22a4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[1]);
    22a8:	80 91 ce 03 	lds	r24, 0x03CE
    22ac:	90 91 cf 03 	lds	r25, 0x03CF
    22b0:	a0 91 d0 03 	lds	r26, 0x03D0
    22b4:	b0 91 d1 03 	lds	r27, 0x03D1
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    22c0:	98 8b       	std	Y+16, r25	; 0x10
    22c2:	8f 87       	std	Y+15, r24	; 0x0f
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,leftVal);
    22c4:	e0 91 22 03 	lds	r30, 0x0322
    22c8:	f0 91 23 03 	lds	r31, 0x0323
    22cc:	84 81       	ldd	r24, Z+4	; 0x04
    22ce:	95 81       	ldd	r25, Z+5	; 0x05
    22d0:	fc 01       	movw	r30, r24
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	fc 01       	movw	r30, r24
    22d8:	36 96       	adiw	r30, 0x06	; 6
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    22e2:	9e 87       	std	Y+14, r25	; 0x0e
    22e4:	8d 87       	std	Y+13, r24	; 0x0d
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    22e6:	ed 85       	ldd	r30, Y+13	; 0x0d
    22e8:	fe 85       	ldd	r31, Y+14	; 0x0e
    22ea:	84 81       	ldd	r24, Z+4	; 0x04
    22ec:	95 81       	ldd	r25, Z+5	; 0x05
    22ee:	fc 01       	movw	r30, r24
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	fc 01       	movw	r30, r24
    22f6:	3e 96       	adiw	r30, 0x0e	; 14
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    2300:	ed 85       	ldd	r30, Y+13	; 0x0d
    2302:	fe 85       	ldd	r31, Y+14	; 0x0e
    2304:	84 81       	ldd	r24, Z+4	; 0x04
    2306:	95 81       	ldd	r25, Z+5	; 0x05
    2308:	fc 01       	movw	r30, r24
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	8c 01       	movw	r16, r24
    2310:	02 5f       	subi	r16, 0xF2	; 242
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	8f 85       	ldd	r24, Y+15	; 0x0f
    2316:	98 89       	ldd	r25, Y+16	; 0x10
    2318:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    231c:	f8 01       	movw	r30, r16
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
		vdmFree(newValue);vdmFree(p);
    2322:	8f 85       	ldd	r24, Y+15	; 0x0f
    2324:	98 89       	ldd	r25, Y+16	; 0x10
    2326:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    232a:	8d 85       	ldd	r24, Y+13	; 0x0d
    232c:	9e 85       	ldd	r25, Y+14	; 0x0e
    232e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[2]);
    2332:	80 91 d2 03 	lds	r24, 0x03D2
    2336:	90 91 d3 03 	lds	r25, 0x03D3
    233a:	a0 91 d4 03 	lds	r26, 0x03D4
    233e:	b0 91 d5 03 	lds	r27, 0x03D5
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    234a:	9c 87       	std	Y+12, r25	; 0x0c
    234c:	8b 87       	std	Y+11, r24	; 0x0b
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,rightVal);
    234e:	e0 91 22 03 	lds	r30, 0x0322
    2352:	f0 91 23 03 	lds	r31, 0x0323
    2356:	84 81       	ldd	r24, Z+4	; 0x04
    2358:	95 81       	ldd	r25, Z+5	; 0x05
    235a:	fc 01       	movw	r30, r24
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	fc 01       	movw	r30, r24
    2362:	38 96       	adiw	r30, 0x08	; 8
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    236c:	9a 87       	std	Y+10, r25	; 0x0a
    236e:	89 87       	std	Y+9, r24	; 0x09
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    2370:	e9 85       	ldd	r30, Y+9	; 0x09
    2372:	fa 85       	ldd	r31, Y+10	; 0x0a
    2374:	84 81       	ldd	r24, Z+4	; 0x04
    2376:	95 81       	ldd	r25, Z+5	; 0x05
    2378:	fc 01       	movw	r30, r24
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	fc 01       	movw	r30, r24
    2380:	3e 96       	adiw	r30, 0x0e	; 14
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    238a:	e9 85       	ldd	r30, Y+9	; 0x09
    238c:	fa 85       	ldd	r31, Y+10	; 0x0a
    238e:	84 81       	ldd	r24, Z+4	; 0x04
    2390:	95 81       	ldd	r25, Z+5	; 0x05
    2392:	fc 01       	movw	r30, r24
    2394:	80 81       	ld	r24, Z
    2396:	91 81       	ldd	r25, Z+1	; 0x01
    2398:	8c 01       	movw	r16, r24
    239a:	02 5f       	subi	r16, 0xF2	; 242
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	8b 85       	ldd	r24, Y+11	; 0x0b
    23a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23a2:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    23a6:	f8 01       	movw	r30, r16
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
		vdmFree(newValue);vdmFree(p);
    23ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    23b0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    23b4:	89 85       	ldd	r24, Y+9	; 0x09
    23b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[4]);
    23bc:	80 91 da 03 	lds	r24, 0x03DA
    23c0:	90 91 db 03 	lds	r25, 0x03DB
    23c4:	a0 91 dc 03 	lds	r26, 0x03DC
    23c8:	b0 91 dd 03 	lds	r27, 0x03DD
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    23d4:	98 87       	std	Y+8, r25	; 0x08
    23d6:	8f 83       	std	Y+7, r24	; 0x07
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,total_energy_used);
    23d8:	e0 91 22 03 	lds	r30, 0x0322
    23dc:	f0 91 23 03 	lds	r31, 0x0323
    23e0:	84 81       	ldd	r24, Z+4	; 0x04
    23e2:	95 81       	ldd	r25, Z+5	; 0x05
    23e4:	fc 01       	movw	r30, r24
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	fc 01       	movw	r30, r24
    23ec:	3a 96       	adiw	r30, 0x0a	; 10
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    23fa:	ed 81       	ldd	r30, Y+5	; 0x05
    23fc:	fe 81       	ldd	r31, Y+6	; 0x06
    23fe:	84 81       	ldd	r24, Z+4	; 0x04
    2400:	95 81       	ldd	r25, Z+5	; 0x05
    2402:	fc 01       	movw	r30, r24
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	fc 01       	movw	r30, r24
    240a:	3e 96       	adiw	r30, 0x0e	; 14
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    2414:	ed 81       	ldd	r30, Y+5	; 0x05
    2416:	fe 81       	ldd	r31, Y+6	; 0x06
    2418:	84 81       	ldd	r24, Z+4	; 0x04
    241a:	95 81       	ldd	r25, Z+5	; 0x05
    241c:	fc 01       	movw	r30, r24
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	8c 01       	movw	r16, r24
    2424:	02 5f       	subi	r16, 0xF2	; 242
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	8f 81       	ldd	r24, Y+7	; 0x07
    242a:	98 85       	ldd	r25, Y+8	; 0x08
    242c:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    2430:	f8 01       	movw	r30, r16
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
		vdmFree(newValue);vdmFree(p);
    2436:	8f 81       	ldd	r24, Y+7	; 0x07
    2438:	98 85       	ldd	r25, Y+8	; 0x08
    243a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[6]);
    2446:	80 91 e2 03 	lds	r24, 0x03E2
    244a:	90 91 e3 03 	lds	r25, 0x03E3
    244e:	a0 91 e4 03 	lds	r26, 0x03E4
    2452:	b0 91 e5 03 	lds	r27, 0x03E5
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	8b 83       	std	Y+3, r24	; 0x03
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_backwardRotate,value,newValue);
    2462:	e0 91 e2 02 	lds	r30, 0x02E2
    2466:	f0 91 e3 02 	lds	r31, 0x02E3
    246a:	84 81       	ldd	r24, Z+4	; 0x04
    246c:	95 81       	ldd	r25, Z+5	; 0x05
    246e:	fc 01       	movw	r30, r24
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	fc 01       	movw	r30, r24
    2476:	3e 96       	adiw	r30, 0x0e	; 14
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    2480:	e0 91 e2 02 	lds	r30, 0x02E2
    2484:	f0 91 e3 02 	lds	r31, 0x02E3
    2488:	84 81       	ldd	r24, Z+4	; 0x04
    248a:	95 81       	ldd	r25, Z+5	; 0x05
    248c:	fc 01       	movw	r30, r24
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	8c 01       	movw	r16, r24
    2494:	02 5f       	subi	r16, 0xF2	; 242
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    24a0:	f8 01       	movw	r30, r16
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
		vdmFree(newValue);
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[7]);
    24ae:	80 91 e6 03 	lds	r24, 0x03E6
    24b2:	90 91 e7 03 	lds	r25, 0x03E7
    24b6:	a0 91 e8 03 	lds	r26, 0x03E8
    24ba:	b0 91 e9 03 	lds	r27, 0x03E9
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_forwardSpeed,value,newValue);
    24ca:	e0 91 de 02 	lds	r30, 0x02DE
    24ce:	f0 91 df 02 	lds	r31, 0x02DF
    24d2:	84 81       	ldd	r24, Z+4	; 0x04
    24d4:	95 81       	ldd	r25, Z+5	; 0x05
    24d6:	fc 01       	movw	r30, r24
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	fc 01       	movw	r30, r24
    24de:	3e 96       	adiw	r30, 0x0e	; 14
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    24e8:	e0 91 de 02 	lds	r30, 0x02DE
    24ec:	f0 91 df 02 	lds	r31, 0x02DF
    24f0:	84 81       	ldd	r24, Z+4	; 0x04
    24f2:	95 81       	ldd	r25, Z+5	; 0x05
    24f4:	fc 01       	movw	r30, r24
    24f6:	80 81       	ld	r24, Z
    24f8:	91 81       	ldd	r25, Z+1	; 0x01
    24fa:	8c 01       	movw	r16, r24
    24fc:	02 5f       	subi	r16, 0xF2	; 242
    24fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    2508:	f8 01       	movw	r30, r16
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
		vdmFree(newValue);
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
}
    2516:	62 96       	adiw	r28, 0x12	; 18
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	08 95       	ret

0000252c <syncOutputsToBuffers>:
void syncOutputsToBuffers(){
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	28 97       	sbiw	r28, 0x08	; 8
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
	if(syncOutAllowed == fmi2False) return;
    2540:	80 91 ce 01 	lds	r24, 0x01CE
    2544:	90 91 cf 01 	lds	r25, 0x01CF
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	09 f4       	brne	.+2      	; 0x254e <syncOutputsToBuffers+0x22>
    254c:	6c c0       	rjmp	.+216    	; 0x2626 <syncOutputsToBuffers+0xfa>

	{
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,servo_left_out);
    254e:	e0 91 22 03 	lds	r30, 0x0322
    2552:	f0 91 23 03 	lds	r31, 0x0323
    2556:	84 81       	ldd	r24, Z+4	; 0x04
    2558:	95 81       	ldd	r25, Z+5	; 0x05
    255a:	fc 01       	movw	r30, r24
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	fc 01       	movw	r30, r24
    2562:	3e 96       	adiw	r30, 0x0e	; 14
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    256c:	98 87       	std	Y+8, r25	; 0x08
    256e:	8f 83       	std	Y+7, r24	; 0x07
		TVP v = GET_FIELD(RealPort,RealPort,p,value);
    2570:	ef 81       	ldd	r30, Y+7	; 0x07
    2572:	f8 85       	ldd	r31, Y+8	; 0x08
    2574:	84 81       	ldd	r24, Z+4	; 0x04
    2576:	95 81       	ldd	r25, Z+5	; 0x05
    2578:	fc 01       	movw	r30, r24
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	fc 01       	movw	r30, r24
    2580:	3e 96       	adiw	r30, 0x0e	; 14
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
		fmiBuffer.realBuffer[3]=v->value.doubleVal;
    258e:	ed 81       	ldd	r30, Y+5	; 0x05
    2590:	fe 81       	ldd	r31, Y+6	; 0x06
    2592:	84 81       	ldd	r24, Z+4	; 0x04
    2594:	95 81       	ldd	r25, Z+5	; 0x05
    2596:	a6 81       	ldd	r26, Z+6	; 0x06
    2598:	b7 81       	ldd	r27, Z+7	; 0x07
    259a:	80 93 d6 03 	sts	0x03D6, r24
    259e:	90 93 d7 03 	sts	0x03D7, r25
    25a2:	a0 93 d8 03 	sts	0x03D8, r26
    25a6:	b0 93 d9 03 	sts	0x03D9, r27
		vdmFree(v);vdmFree(p);
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    25b2:	8f 81       	ldd	r24, Y+7	; 0x07
    25b4:	98 85       	ldd	r25, Y+8	; 0x08
    25b6:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
	{
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,servo_right_out);
    25ba:	e0 91 22 03 	lds	r30, 0x0322
    25be:	f0 91 23 03 	lds	r31, 0x0323
    25c2:	84 81       	ldd	r24, Z+4	; 0x04
    25c4:	95 81       	ldd	r25, Z+5	; 0x05
    25c6:	fc 01       	movw	r30, r24
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	fc 01       	movw	r30, r24
    25ce:	3c 96       	adiw	r30, 0x0c	; 12
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    25d8:	9c 83       	std	Y+4, r25	; 0x04
    25da:	8b 83       	std	Y+3, r24	; 0x03
		TVP v = GET_FIELD(RealPort,RealPort,p,value);
    25dc:	eb 81       	ldd	r30, Y+3	; 0x03
    25de:	fc 81       	ldd	r31, Y+4	; 0x04
    25e0:	84 81       	ldd	r24, Z+4	; 0x04
    25e2:	95 81       	ldd	r25, Z+5	; 0x05
    25e4:	fc 01       	movw	r30, r24
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	fc 01       	movw	r30, r24
    25ec:	3e 96       	adiw	r30, 0x0e	; 14
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.realBuffer[5]=v->value.doubleVal;
    25fa:	e9 81       	ldd	r30, Y+1	; 0x01
    25fc:	fa 81       	ldd	r31, Y+2	; 0x02
    25fe:	84 81       	ldd	r24, Z+4	; 0x04
    2600:	95 81       	ldd	r25, Z+5	; 0x05
    2602:	a6 81       	ldd	r26, Z+6	; 0x06
    2604:	b7 81       	ldd	r27, Z+7	; 0x07
    2606:	80 93 de 03 	sts	0x03DE, r24
    260a:	90 93 df 03 	sts	0x03DF, r25
    260e:	a0 93 e0 03 	sts	0x03E0, r26
    2612:	b0 93 e1 03 	sts	0x03E1, r27
		vdmFree(v);vdmFree(p);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
}
    2626:	28 96       	adiw	r28, 0x08	; 8
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <periodic_taskg_System_controller__Z12control_loopEV>:
void periodic_taskg_System_controller__Z12control_loopEV()
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
	CALL_FUNC(Controller, Controller, g_System_controller, CLASS_Controller__Z12control_loopEV);
    2640:	e0 91 24 03 	lds	r30, 0x0324
    2644:	f0 91 25 03 	lds	r31, 0x0325
    2648:	84 81       	ldd	r24, Z+4	; 0x04
    264a:	95 81       	ldd	r25, Z+5	; 0x05
    264c:	fc 01       	movw	r30, r24
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	fc 01       	movw	r30, r24
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	fc 01       	movw	r30, r24
    265a:	36 96       	adiw	r30, 0x06	; 6
    265c:	84 81       	ldd	r24, Z+4	; 0x04
    265e:	95 81       	ldd	r25, Z+5	; 0x05
    2660:	9c 01       	movw	r18, r24
    2662:	e0 91 24 03 	lds	r30, 0x0324
    2666:	f0 91 25 03 	lds	r31, 0x0325
    266a:	84 81       	ldd	r24, Z+4	; 0x04
    266c:	95 81       	ldd	r25, Z+5	; 0x05
    266e:	fc 01       	movw	r30, r24
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	f9 01       	movw	r30, r18
    2676:	09 95       	icall
	g_fmiCallbackFunctions->logger((void*) 1, g_fmiInstanceName, fmi2OK, "logAll", "called &periodic_taskg_System_controller__Z12control_loopEV\n");
    2678:	e0 91 b8 03 	lds	r30, 0x03B8
    267c:	f0 91 b9 03 	lds	r31, 0x03B9
    2680:	40 81       	ld	r20, Z
    2682:	51 81       	ldd	r21, Z+1	; 0x01
    2684:	20 91 fa 03 	lds	r18, 0x03FA
    2688:	30 91 fb 03 	lds	r19, 0x03FB
    268c:	8d b7       	in	r24, 0x3d	; 61
    268e:	9e b7       	in	r25, 0x3e	; 62
    2690:	0a 97       	sbiw	r24, 0x0a	; 10
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	9e bf       	out	0x3e, r25	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	8d bf       	out	0x3d, r24	; 61
    269c:	ed b7       	in	r30, 0x3d	; 61
    269e:	fe b7       	in	r31, 0x3e	; 62
    26a0:	31 96       	adiw	r30, 0x01	; 1
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	33 83       	std	Z+3, r19	; 0x03
    26ac:	22 83       	std	Z+2, r18	; 0x02
    26ae:	15 82       	std	Z+5, r1	; 0x05
    26b0:	14 82       	std	Z+4, r1	; 0x04
    26b2:	80 ed       	ldi	r24, 0xD0	; 208
    26b4:	91 e0       	ldi	r25, 0x01	; 1
    26b6:	97 83       	std	Z+7, r25	; 0x07
    26b8:	86 83       	std	Z+6, r24	; 0x06
    26ba:	87 ed       	ldi	r24, 0xD7	; 215
    26bc:	91 e0       	ldi	r25, 0x01	; 1
    26be:	91 87       	std	Z+9, r25	; 0x09
    26c0:	80 87       	std	Z+8, r24	; 0x08
    26c2:	fa 01       	movw	r30, r20
    26c4:	09 95       	icall
    26c6:	8d b7       	in	r24, 0x3d	; 61
    26c8:	9e b7       	in	r25, 0x3e	; 62
    26ca:	0a 96       	adiw	r24, 0x0a	; 10
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	9e bf       	out	0x3e, r25	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	8d bf       	out	0x3d, r24	; 61
}
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <systemInit>:
{ 1.0E7, &periodic_taskg_System_controller__Z12control_loopEV, 0 }
};


void systemInit()
{
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <systemInit+0xa>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
	vdm_gc_init();
    26ea:	0e 94 45 48 	call	0x908a	; 0x908a <vdm_gc_init>

	int i;

	for(i = 0; i < PERIODIC_GENERATED_COUNT; i++) threads[i].period = threads[i].period / 1.0E9;
    26ee:	1a 82       	std	Y+2, r1	; 0x02
    26f0:	19 82       	std	Y+1, r1	; 0x01
    26f2:	36 c0       	rjmp	.+108    	; 0x2760 <systemInit+0x84>
    26f4:	09 81       	ldd	r16, Y+1	; 0x01
    26f6:	1a 81       	ldd	r17, Y+2	; 0x02
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	9c 01       	movw	r18, r24
    2702:	22 0f       	add	r18, r18
    2704:	33 1f       	adc	r19, r19
    2706:	22 0f       	add	r18, r18
    2708:	33 1f       	adc	r19, r19
    270a:	82 0f       	add	r24, r18
    270c:	93 1f       	adc	r25, r19
    270e:	fc 01       	movw	r30, r24
    2710:	ec 5e       	subi	r30, 0xEC	; 236
    2712:	fd 4f       	sbci	r31, 0xFD	; 253
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	a2 81       	ldd	r26, Z+2	; 0x02
    271a:	b3 81       	ldd	r27, Z+3	; 0x03
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	28 e2       	ldi	r18, 0x28	; 40
    2722:	3b e6       	ldi	r19, 0x6B	; 107
    2724:	4e e6       	ldi	r20, 0x6E	; 110
    2726:	5e e4       	ldi	r21, 0x4E	; 78
    2728:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	ac 01       	movw	r20, r24
    2732:	bd 01       	movw	r22, r26
    2734:	c8 01       	movw	r24, r16
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	9c 01       	movw	r18, r24
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	22 0f       	add	r18, r18
    2742:	33 1f       	adc	r19, r19
    2744:	82 0f       	add	r24, r18
    2746:	93 1f       	adc	r25, r19
    2748:	fc 01       	movw	r30, r24
    274a:	ec 5e       	subi	r30, 0xEC	; 236
    274c:	fd 4f       	sbci	r31, 0xFD	; 253
    274e:	40 83       	st	Z, r20
    2750:	51 83       	std	Z+1, r21	; 0x01
    2752:	62 83       	std	Z+2, r22	; 0x02
    2754:	73 83       	std	Z+3, r23	; 0x03
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	18 16       	cp	r1, r24
    2766:	19 06       	cpc	r1, r25
    2768:	2c f6       	brge	.-118    	; 0x26f4 <systemInit+0x18>

	RobotSensor_const_init();
    276a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <RobotSensor_const_init>
	Port_const_init();
    276e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <Port_const_init>
	IntPort_const_init();
    2772:	0e 94 1e 19 	call	0x323c	; 0x323c <IntPort_const_init>
	BoolPort_const_init();
    2776:	0e 94 9e 04 	call	0x93c	; 0x93c <BoolPort_const_init>
	RealPort_const_init();
    277a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <RealPort_const_init>
	StringPort_const_init();
    277e:	0e 94 da 20 	call	0x41b4	; 0x41b4 <StringPort_const_init>
	Controller_const_init();
    2782:	0e 94 37 0a 	call	0x146e	; 0x146e <Controller_const_init>
	System_const_init();
    2786:	0e 94 59 22 	call	0x44b2	; 0x44b2 <System_const_init>
	World_const_init();
    278a:	0e 94 1b 24 	call	0x4836	; 0x4836 <World_const_init>
	HardwareInterface_const_init();
    278e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <HardwareInterface_const_init>
	RobotServo_const_init();
    2792:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <RobotServo_const_init>

	RobotSensor_static_init();
    2796:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <RobotSensor_static_init>
	Port_static_init();
    279a:	0e 94 b6 1a 	call	0x356c	; 0x356c <Port_static_init>
	IntPort_static_init();
    279e:	0e 94 2c 19 	call	0x3258	; 0x3258 <IntPort_static_init>
	BoolPort_static_init();
    27a2:	0e 94 ac 04 	call	0x958	; 0x958 <BoolPort_static_init>
	RealPort_static_init();
    27a6:	0e 94 01 1c 	call	0x3802	; 0x3802 <RealPort_static_init>
	StringPort_static_init();
    27aa:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <StringPort_static_init>
	Controller_static_init();
    27ae:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <Controller_static_init>
	System_static_init();
    27b2:	0e 94 73 22 	call	0x44e6	; 0x44e6 <System_static_init>
	World_static_init();
    27b6:	0e 94 35 24 	call	0x486a	; 0x486a <World_static_init>
	HardwareInterface_static_init();
    27ba:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HardwareInterface_static_init>
	RobotServo_static_init();
    27be:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <RobotServo_static_init>

	sys = _Z6SystemEV(NULL);
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 fd 22 	call	0x45fa	; 0x45fa <_Z6SystemEV>
    27ca:	90 93 d7 02 	sts	0x02D7, r25
    27ce:	80 93 d6 02 	sts	0x02D6, r24

}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <systemDeInit>:


void systemDeInit()
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	RobotSensor_static_shutdown();
    27e8:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <RobotSensor_static_shutdown>
	Port_static_shutdown();
    27ec:	0e 94 bd 1a 	call	0x357a	; 0x357a <Port_static_shutdown>
	IntPort_static_shutdown();
    27f0:	0e 94 33 19 	call	0x3266	; 0x3266 <IntPort_static_shutdown>
	BoolPort_static_shutdown();
    27f4:	0e 94 b3 04 	call	0x966	; 0x966 <BoolPort_static_shutdown>
	RealPort_static_shutdown();
    27f8:	0e 94 08 1c 	call	0x3810	; 0x3810 <RealPort_static_shutdown>
	StringPort_static_shutdown();
    27fc:	0e 94 ef 20 	call	0x41de	; 0x41de <StringPort_static_shutdown>
	Controller_static_shutdown();
    2800:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Controller_static_shutdown>
	System_static_shutdown();
    2804:	0e 94 86 22 	call	0x450c	; 0x450c <System_static_shutdown>
	World_static_shutdown();
    2808:	0e 94 3c 24 	call	0x4878	; 0x4878 <World_static_shutdown>
	HardwareInterface_static_shutdown();
    280c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <HardwareInterface_static_shutdown>
	RobotServo_static_shutdown();
    2810:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <RobotServo_static_shutdown>

	RobotSensor_const_shutdown();
    2814:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <RobotSensor_const_shutdown>
	Port_const_shutdown();
    2818:	0e 94 a9 1a 	call	0x3552	; 0x3552 <Port_const_shutdown>
	IntPort_const_shutdown();
    281c:	0e 94 25 19 	call	0x324a	; 0x324a <IntPort_const_shutdown>
	BoolPort_const_shutdown();
    2820:	0e 94 a5 04 	call	0x94a	; 0x94a <BoolPort_const_shutdown>
	RealPort_const_shutdown();
    2824:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <RealPort_const_shutdown>
	StringPort_const_shutdown();
    2828:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <StringPort_const_shutdown>
	Controller_const_shutdown();
    282c:	0e 94 44 0a 	call	0x1488	; 0x1488 <Controller_const_shutdown>
	System_const_shutdown();
    2830:	0e 94 66 22 	call	0x44cc	; 0x44cc <System_const_shutdown>
	World_const_shutdown();
    2834:	0e 94 28 24 	call	0x4850	; 0x4850 <World_const_shutdown>
	HardwareInterface_const_shutdown();
    2838:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <HardwareInterface_const_shutdown>
	RobotServo_const_shutdown();
    283c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <RobotServo_const_shutdown>

	vdmFree(sys);
    2840:	80 91 d6 02 	lds	r24, 0x02D6
    2844:	90 91 d7 02 	lds	r25, 0x02D7
    2848:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

	vdm_gc_shutdown();
    284c:	0e 94 9d 49 	call	0x933a	; 0x933a <vdm_gc_shutdown>
}
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <vdmStep>:

/*
* Both time value are given in seconds
*/
fmi2Status vdmStep(fmi2Real currentCommunicationPoint, fmi2Real communicationStepSize)
{
    2856:	cf 92       	push	r12
    2858:	df 92       	push	r13
    285a:	ef 92       	push	r14
    285c:	ff 92       	push	r15
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	2e 97       	sbiw	r28, 0x0e	; 14
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	6f 83       	std	Y+7, r22	; 0x07
    2878:	78 87       	std	Y+8, r23	; 0x08
    287a:	89 87       	std	Y+9, r24	; 0x09
    287c:	9a 87       	std	Y+10, r25	; 0x0a
    287e:	2b 87       	std	Y+11, r18	; 0x0b
    2880:	3c 87       	std	Y+12, r19	; 0x0c
    2882:	4d 87       	std	Y+13, r20	; 0x0d
    2884:	5e 87       	std	Y+14, r21	; 0x0e
	int i, j;
	int threadRunCount;

	/*  Call each thread the appropriate number of times.  */
	for(i = 0;  i < PERIODIC_GENERATED_COUNT; i++)
    2886:	1e 82       	std	Y+6, r1	; 0x06
    2888:	1d 82       	std	Y+5, r1	; 0x05
    288a:	a1 c1       	rjmp	.+834    	; 0x2bce <vdmStep+0x378>
	{
		/*  Times align, sync took place last time.  */
		if(threads[i].lastExecuted >= currentCommunicationPoint)
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	9c 01       	movw	r18, r24
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	22 0f       	add	r18, r18
    289c:	33 1f       	adc	r19, r19
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	fc 01       	movw	r30, r24
    28a4:	e6 5e       	subi	r30, 0xE6	; 230
    28a6:	fd 4f       	sbci	r31, 0xFD	; 253
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	a2 81       	ldd	r26, Z+2	; 0x02
    28ae:	b3 81       	ldd	r27, Z+3	; 0x03
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	2f 81       	ldd	r18, Y+7	; 0x07
    28b6:	38 85       	ldd	r19, Y+8	; 0x08
    28b8:	49 85       	ldd	r20, Y+9	; 0x09
    28ba:	5a 85       	ldd	r21, Y+10	; 0x0a
    28bc:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
    28c0:	88 23       	and	r24, r24
    28c2:	0c f4       	brge	.+2      	; 0x28c6 <vdmStep+0x70>
    28c4:	c6 c0       	rjmp	.+396    	; 0x2a52 <vdmStep+0x1fc>
		{
			/*  Can not do anything, still waiting for the last step's turn to come.  */
			if(threads[i].lastExecuted >= currentCommunicationPoint + communicationStepSize)
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	9c 01       	movw	r18, r24
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	22 0f       	add	r18, r18
    28d6:	33 1f       	adc	r19, r19
    28d8:	82 0f       	add	r24, r18
    28da:	93 1f       	adc	r25, r19
    28dc:	fc 01       	movw	r30, r24
    28de:	e6 5e       	subi	r30, 0xE6	; 230
    28e0:	fd 4f       	sbci	r31, 0xFD	; 253
    28e2:	e0 80       	ld	r14, Z
    28e4:	f1 80       	ldd	r15, Z+1	; 0x01
    28e6:	02 81       	ldd	r16, Z+2	; 0x02
    28e8:	13 81       	ldd	r17, Z+3	; 0x03
    28ea:	6f 81       	ldd	r22, Y+7	; 0x07
    28ec:	78 85       	ldd	r23, Y+8	; 0x08
    28ee:	89 85       	ldd	r24, Y+9	; 0x09
    28f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    28f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    28f6:	4d 85       	ldd	r20, Y+13	; 0x0d
    28f8:	5e 85       	ldd	r21, Y+14	; 0x0e
    28fa:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9c 01       	movw	r18, r24
    2904:	ad 01       	movw	r20, r26
    2906:	c8 01       	movw	r24, r16
    2908:	b7 01       	movw	r22, r14
    290a:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
    290e:	88 23       	and	r24, r24
    2910:	3c f0       	brlt	.+14     	; 0x2920 <vdmStep+0xca>
			{
				threadRunCount = 0;
    2912:	1a 82       	std	Y+2, r1	; 0x02
    2914:	19 82       	std	Y+1, r1	; 0x01
				syncOutAllowed = fmi2False;
    2916:	10 92 cf 01 	sts	0x01CF, r1
    291a:	10 92 ce 01 	sts	0x01CE, r1
    291e:	ef c0       	rjmp	.+478    	; 0x2afe <vdmStep+0x2a8>
			}
			/*  Previous step will finish inside this step.
			*   At least one execution can be fit inside this step.
			*/
			else if(threads[i].lastExecuted + threads[i].period <= currentCommunicationPoint + communicationStepSize)
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	9c 01       	movw	r18, r24
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	82 0f       	add	r24, r18
    2934:	93 1f       	adc	r25, r19
    2936:	fc 01       	movw	r30, r24
    2938:	e6 5e       	subi	r30, 0xE6	; 230
    293a:	fd 4f       	sbci	r31, 0xFD	; 253
    293c:	e0 80       	ld	r14, Z
    293e:	f1 80       	ldd	r15, Z+1	; 0x01
    2940:	02 81       	ldd	r16, Z+2	; 0x02
    2942:	13 81       	ldd	r17, Z+3	; 0x03
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	9c 01       	movw	r18, r24
    294e:	22 0f       	add	r18, r18
    2950:	33 1f       	adc	r19, r19
    2952:	22 0f       	add	r18, r18
    2954:	33 1f       	adc	r19, r19
    2956:	82 0f       	add	r24, r18
    2958:	93 1f       	adc	r25, r19
    295a:	fc 01       	movw	r30, r24
    295c:	ec 5e       	subi	r30, 0xEC	; 236
    295e:	fd 4f       	sbci	r31, 0xFD	; 253
    2960:	20 81       	ld	r18, Z
    2962:	31 81       	ldd	r19, Z+1	; 0x01
    2964:	42 81       	ldd	r20, Z+2	; 0x02
    2966:	53 81       	ldd	r21, Z+3	; 0x03
    2968:	c8 01       	movw	r24, r16
    296a:	b7 01       	movw	r22, r14
    296c:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	7c 01       	movw	r14, r24
    2976:	8d 01       	movw	r16, r26
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	2b 85       	ldd	r18, Y+11	; 0x0b
    2982:	3c 85       	ldd	r19, Y+12	; 0x0c
    2984:	4d 85       	ldd	r20, Y+13	; 0x0d
    2986:	5e 85       	ldd	r21, Y+14	; 0x0e
    2988:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9c 01       	movw	r18, r24
    2992:	ad 01       	movw	r20, r26
    2994:	c8 01       	movw	r24, r16
    2996:	b7 01       	movw	r22, r14
    2998:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    299c:	18 16       	cp	r1, r24
    299e:	0c f4       	brge	.+2      	; 0x29a2 <vdmStep+0x14c>
    29a0:	4f c0       	rjmp	.+158    	; 0x2a40 <vdmStep+0x1ea>
			{
				/*  Find number of executions to fit inside of step, allow sync.  */
				threadRunCount = (currentCommunicationPoint + communicationStepSize - threads[i].lastExecuted) / threads[i].period;
    29a2:	6f 81       	ldd	r22, Y+7	; 0x07
    29a4:	78 85       	ldd	r23, Y+8	; 0x08
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    29ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    29ae:	4d 85       	ldd	r20, Y+13	; 0x0d
    29b0:	5e 85       	ldd	r21, Y+14	; 0x0e
    29b2:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	7c 01       	movw	r14, r24
    29bc:	8d 01       	movw	r16, r26
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	9c 01       	movw	r18, r24
    29c8:	22 0f       	add	r18, r18
    29ca:	33 1f       	adc	r19, r19
    29cc:	22 0f       	add	r18, r18
    29ce:	33 1f       	adc	r19, r19
    29d0:	82 0f       	add	r24, r18
    29d2:	93 1f       	adc	r25, r19
    29d4:	fc 01       	movw	r30, r24
    29d6:	e6 5e       	subi	r30, 0xE6	; 230
    29d8:	fd 4f       	sbci	r31, 0xFD	; 253
    29da:	20 81       	ld	r18, Z
    29dc:	31 81       	ldd	r19, Z+1	; 0x01
    29de:	42 81       	ldd	r20, Z+2	; 0x02
    29e0:	53 81       	ldd	r21, Z+3	; 0x03
    29e2:	c8 01       	movw	r24, r16
    29e4:	b7 01       	movw	r22, r14
    29e6:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	7c 01       	movw	r14, r24
    29f0:	8d 01       	movw	r16, r26
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	9e 81       	ldd	r25, Y+6	; 0x06
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	9c 01       	movw	r18, r24
    29fc:	22 0f       	add	r18, r18
    29fe:	33 1f       	adc	r19, r19
    2a00:	22 0f       	add	r18, r18
    2a02:	33 1f       	adc	r19, r19
    2a04:	82 0f       	add	r24, r18
    2a06:	93 1f       	adc	r25, r19
    2a08:	fc 01       	movw	r30, r24
    2a0a:	ec 5e       	subi	r30, 0xEC	; 236
    2a0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a0e:	20 81       	ld	r18, Z
    2a10:	31 81       	ldd	r19, Z+1	; 0x01
    2a12:	42 81       	ldd	r20, Z+2	; 0x02
    2a14:	53 81       	ldd	r21, Z+3	; 0x03
    2a16:	c8 01       	movw	r24, r16
    2a18:	b7 01       	movw	r22, r14
    2a1a:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
				syncOutAllowed = fmi2True;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	90 93 cf 01 	sts	0x01CF, r25
    2a3a:	80 93 ce 01 	sts	0x01CE, r24
    2a3e:	5f c0       	rjmp	.+190    	; 0x2afe <vdmStep+0x2a8>
			}
			/*  Can not execute, but can sync existing values at the end of this step.  */
			else 
			{
				threadRunCount = 0;
    2a40:	1a 82       	std	Y+2, r1	; 0x02
    2a42:	19 82       	std	Y+1, r1	; 0x01
				syncOutAllowed = fmi2True;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	90 93 cf 01 	sts	0x01CF, r25
    2a4c:	80 93 ce 01 	sts	0x01CE, r24
    2a50:	56 c0       	rjmp	.+172    	; 0x2afe <vdmStep+0x2a8>
			}
		}
		else
		{
			/*  Find number of executions to fit inside of step, allow sync because need to update regardless.  */
			threadRunCount = (currentCommunicationPoint + communicationStepSize - threads[i].lastExecuted) / threads[i].period;
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a5e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a60:	5e 85       	ldd	r21, Y+14	; 0x0e
    2a62:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	7c 01       	movw	r14, r24
    2a6c:	8d 01       	movw	r16, r26
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	9c 01       	movw	r18, r24
    2a78:	22 0f       	add	r18, r18
    2a7a:	33 1f       	adc	r19, r19
    2a7c:	22 0f       	add	r18, r18
    2a7e:	33 1f       	adc	r19, r19
    2a80:	82 0f       	add	r24, r18
    2a82:	93 1f       	adc	r25, r19
    2a84:	fc 01       	movw	r30, r24
    2a86:	e6 5e       	subi	r30, 0xE6	; 230
    2a88:	fd 4f       	sbci	r31, 0xFD	; 253
    2a8a:	20 81       	ld	r18, Z
    2a8c:	31 81       	ldd	r19, Z+1	; 0x01
    2a8e:	42 81       	ldd	r20, Z+2	; 0x02
    2a90:	53 81       	ldd	r21, Z+3	; 0x03
    2a92:	c8 01       	movw	r24, r16
    2a94:	b7 01       	movw	r22, r14
    2a96:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	7c 01       	movw	r14, r24
    2aa0:	8d 01       	movw	r16, r26
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	9c 01       	movw	r18, r24
    2aac:	22 0f       	add	r18, r18
    2aae:	33 1f       	adc	r19, r19
    2ab0:	22 0f       	add	r18, r18
    2ab2:	33 1f       	adc	r19, r19
    2ab4:	82 0f       	add	r24, r18
    2ab6:	93 1f       	adc	r25, r19
    2ab8:	fc 01       	movw	r30, r24
    2aba:	ec 5e       	subi	r30, 0xEC	; 236
    2abc:	fd 4f       	sbci	r31, 0xFD	; 253
    2abe:	20 81       	ld	r18, Z
    2ac0:	31 81       	ldd	r19, Z+1	; 0x01
    2ac2:	42 81       	ldd	r20, Z+2	; 0x02
    2ac4:	53 81       	ldd	r21, Z+3	; 0x03
    2ac6:	c8 01       	movw	r24, r16
    2ac8:	b7 01       	movw	r22, r14
    2aca:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
			syncOutAllowed = fmi2True;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	90 93 cf 01 	sts	0x01CF, r25
    2aea:	80 93 ce 01 	sts	0x01CE, r24

			/*  Period too long for this step so postpone until next step.  */
			if(threadRunCount == 0)
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	21 f4       	brne	.+8      	; 0x2afe <vdmStep+0x2a8>
			{
				syncOutAllowed = fmi2False;
    2af6:	10 92 cf 01 	sts	0x01CF, r1
    2afa:	10 92 ce 01 	sts	0x01CE, r1
			}
		}		

		/*  Execute each thread the number of times that its period fits in the step size.  */
		for(j = 0; j < threadRunCount; j++)
    2afe:	1c 82       	std	Y+4, r1	; 0x04
    2b00:	1b 82       	std	Y+3, r1	; 0x03
    2b02:	56 c0       	rjmp	.+172    	; 0x2bb0 <vdmStep+0x35a>
		{
			threads[i].call();
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	9c 01       	movw	r18, r24
    2b0e:	22 0f       	add	r18, r18
    2b10:	33 1f       	adc	r19, r19
    2b12:	22 0f       	add	r18, r18
    2b14:	33 1f       	adc	r19, r19
    2b16:	82 0f       	add	r24, r18
    2b18:	93 1f       	adc	r25, r19
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	e8 5e       	subi	r30, 0xE8	; 232
    2b1e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b20:	01 90       	ld	r0, Z+
    2b22:	f0 81       	ld	r31, Z
    2b24:	e0 2d       	mov	r30, r0
    2b26:	09 95       	icall

			/*  Update the thread's last execution time.  */
			threads[i].lastExecuted += threads[i].period;
    2b28:	cd 80       	ldd	r12, Y+5	; 0x05
    2b2a:	de 80       	ldd	r13, Y+6	; 0x06
    2b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	9c 01       	movw	r18, r24
    2b36:	22 0f       	add	r18, r18
    2b38:	33 1f       	adc	r19, r19
    2b3a:	22 0f       	add	r18, r18
    2b3c:	33 1f       	adc	r19, r19
    2b3e:	82 0f       	add	r24, r18
    2b40:	93 1f       	adc	r25, r19
    2b42:	fc 01       	movw	r30, r24
    2b44:	e6 5e       	subi	r30, 0xE6	; 230
    2b46:	fd 4f       	sbci	r31, 0xFD	; 253
    2b48:	e0 80       	ld	r14, Z
    2b4a:	f1 80       	ldd	r15, Z+1	; 0x01
    2b4c:	02 81       	ldd	r16, Z+2	; 0x02
    2b4e:	13 81       	ldd	r17, Z+3	; 0x03
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	9c 01       	movw	r18, r24
    2b5a:	22 0f       	add	r18, r18
    2b5c:	33 1f       	adc	r19, r19
    2b5e:	22 0f       	add	r18, r18
    2b60:	33 1f       	adc	r19, r19
    2b62:	82 0f       	add	r24, r18
    2b64:	93 1f       	adc	r25, r19
    2b66:	fc 01       	movw	r30, r24
    2b68:	ec 5e       	subi	r30, 0xEC	; 236
    2b6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b6c:	20 81       	ld	r18, Z
    2b6e:	31 81       	ldd	r19, Z+1	; 0x01
    2b70:	42 81       	ldd	r20, Z+2	; 0x02
    2b72:	53 81       	ldd	r21, Z+3	; 0x03
    2b74:	c8 01       	movw	r24, r16
    2b76:	b7 01       	movw	r22, r14
    2b78:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	ac 01       	movw	r20, r24
    2b82:	bd 01       	movw	r22, r26
    2b84:	c6 01       	movw	r24, r12
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	9c 01       	movw	r18, r24
    2b8c:	22 0f       	add	r18, r18
    2b8e:	33 1f       	adc	r19, r19
    2b90:	22 0f       	add	r18, r18
    2b92:	33 1f       	adc	r19, r19
    2b94:	82 0f       	add	r24, r18
    2b96:	93 1f       	adc	r25, r19
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e6 5e       	subi	r30, 0xE6	; 230
    2b9c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b9e:	40 83       	st	Z, r20
    2ba0:	51 83       	std	Z+1, r21	; 0x01
    2ba2:	62 83       	std	Z+2, r22	; 0x02
    2ba4:	73 83       	std	Z+3, r23	; 0x03
				syncOutAllowed = fmi2False;
			}
		}		

		/*  Execute each thread the number of times that its period fits in the step size.  */
		for(j = 0; j < threadRunCount; j++)
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	9c 83       	std	Y+4, r25	; 0x04
    2bae:	8b 83       	std	Y+3, r24	; 0x03
    2bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	28 17       	cp	r18, r24
    2bba:	39 07       	cpc	r19, r25
    2bbc:	0c f4       	brge	.+2      	; 0x2bc0 <vdmStep+0x36a>
    2bbe:	a2 cf       	rjmp	.-188    	; 0x2b04 <vdmStep+0x2ae>

			/*  Update the thread's last execution time.  */
			threads[i].lastExecuted += threads[i].period;
		}

		vdm_gc();
    2bc0:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <vdm_gc>
{
	int i, j;
	int threadRunCount;

	/*  Call each thread the appropriate number of times.  */
	for(i = 0;  i < PERIODIC_GENERATED_COUNT; i++)
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	18 16       	cp	r1, r24
    2bd4:	19 06       	cpc	r1, r25
    2bd6:	0c f0       	brlt	.+2      	; 0x2bda <vdmStep+0x384>
    2bd8:	59 ce       	rjmp	.-846    	; 0x288c <vdmStep+0x36>

	/* Calculate maximum step size for next step.  Cyclic controllers with no feedback do not have
	a limit on how large a step they can take.  To be considered in the future for controllers
	with feedback.
	*/
	maxStepSize = INT_MAX * 1.0;
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	9e ef       	ldi	r25, 0xFE	; 254
    2bde:	af ef       	ldi	r26, 0xFF	; 255
    2be0:	b6 e4       	ldi	r27, 0x46	; 70
    2be2:	80 93 d8 02 	sts	0x02D8, r24
    2be6:	90 93 d9 02 	sts	0x02D9, r25
    2bea:	a0 93 da 02 	sts	0x02DA, r26
    2bee:	b0 93 db 02 	sts	0x02DB, r27

	/*  g_fmiCallbackFunctions->logger((void*) 1, g_fmiInstanceName, fmi2OK, "logDebug", "NOW:  %f, TP: %f, LE:  %f, STEP:  %f, SYNC:  %d, RUNS:  %d\n", currentCommunicationPoint, threads[0].period, threads[0].lastExecuted, communicationStepSize, syncOutAllowed, threadRunCount);  */

	return fmi2OK;
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
}
    2bf6:	2e 96       	adiw	r28, 0x0e	; 14
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
    2c12:	08 95       	ret

00002c14 <systemMain>:

void systemMain()
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <systemMain+0x6>
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
	TVP world = _Z5WorldEV(NULL);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 a7 24 	call	0x494e	; 0x494e <_Z5WorldEV>
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
	CALL_FUNC(World, World, world, CLASS_World__Z3runEV);
    2c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2e:	84 81       	ldd	r24, Z+4	; 0x04
    2c30:	95 81       	ldd	r25, Z+5	; 0x05
    2c32:	fc 01       	movw	r30, r24
    2c34:	80 81       	ld	r24, Z
    2c36:	91 81       	ldd	r25, Z+1	; 0x01
    2c38:	fc 01       	movw	r30, r24
    2c3a:	01 90       	ld	r0, Z+
    2c3c:	f0 81       	ld	r31, Z
    2c3e:	e0 2d       	mov	r30, r0
    2c40:	84 81       	ldd	r24, Z+4	; 0x04
    2c42:	95 81       	ldd	r25, Z+5	; 0x05
    2c44:	9c 01       	movw	r18, r24
    2c46:	e9 81       	ldd	r30, Y+1	; 0x01
    2c48:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4a:	84 81       	ldd	r24, Z+4	; 0x04
    2c4c:	95 81       	ldd	r25, Z+5	; 0x05
    2c4e:	fc 01       	movw	r30, r24
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	f9 01       	movw	r30, r18
    2c56:	09 95       	icall
	vdmFree(world);
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
}
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <HardwareInterface_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void HardwareInterface_free_fields(struct HardwareInterface *this)
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <HardwareInterface_free_fields+0x6>
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
						vdmFree(this->m_HardwareInterface_leftVal);
    2c78:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7c:	86 81       	ldd	r24, Z+6	; 0x06
    2c7e:	97 81       	ldd	r25, Z+7	; 0x07
    2c80:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(this->m_HardwareInterface_rightVal);
    2c84:	e9 81       	ldd	r30, Y+1	; 0x01
    2c86:	fa 81       	ldd	r31, Y+2	; 0x02
    2c88:	80 85       	ldd	r24, Z+8	; 0x08
    2c8a:	91 85       	ldd	r25, Z+9	; 0x09
    2c8c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(this->m_HardwareInterface_total_energy_used);
    2c90:	e9 81       	ldd	r30, Y+1	; 0x01
    2c92:	fa 81       	ldd	r31, Y+2	; 0x02
    2c94:	82 85       	ldd	r24, Z+10	; 0x0a
    2c96:	93 85       	ldd	r25, Z+11	; 0x0b
    2c98:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(this->m_HardwareInterface_servo_right_out);
    2c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca0:	84 85       	ldd	r24, Z+12	; 0x0c
    2ca2:	95 85       	ldd	r25, Z+13	; 0x0d
    2ca4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(this->m_HardwareInterface_servo_left_out);
    2ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    2caa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cac:	86 85       	ldd	r24, Z+14	; 0x0e
    2cae:	97 85       	ldd	r25, Z+15	; 0x0f
    2cb0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <HardwareInterface_free>:

static void HardwareInterface_free(struct HardwareInterface *this)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <HardwareInterface_free+0x6>
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01
	--this->_HardwareInterface_refs;
    2ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cce:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd0:	84 81       	ldd	r24, Z+4	; 0x04
    2cd2:	95 81       	ldd	r25, Z+5	; 0x05
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cda:	95 83       	std	Z+5, r25	; 0x05
    2cdc:	84 83       	std	Z+4, r24	; 0x04
	if (this->_HardwareInterface_refs < 1)
    2cde:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce2:	84 81       	ldd	r24, Z+4	; 0x04
    2ce4:	95 81       	ldd	r25, Z+5	; 0x05
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	41 f4       	brne	.+16     	; 0x2cfa <HardwareInterface_free+0x3c>
	{
		HardwareInterface_free_fields(this);
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <HardwareInterface_free_fields>
		free(this);
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <_Z18fieldInitializer20EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer20EV(HardwareInterfaceCLASS this)	{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <_Z18fieldInitializer20EV+0x6>
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <_Z18fieldInitializer20EV+0x8>
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 26:39 */
TVP ret_17 = _Z8RealPortER(NULL, newReal(0.0))
;
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2d20:	9c 01       	movw	r18, r24
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	b9 01       	movw	r22, r18
    2d28:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01

return ret_17;
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <_Z18fieldInitializer19EV>:



 static  TVP _Z18fieldInitializer19EV(HardwareInterfaceCLASS this)	{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <_Z18fieldInitializer19EV+0x6>
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <_Z18fieldInitializer19EV+0x8>
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 24:40 */
TVP ret_18 = _Z8RealPortER(NULL, newReal(0.0))
;
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2d5e:	9c 01       	movw	r18, r24
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	b9 01       	movw	r22, r18
    2d66:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2d6a:	9a 83       	std	Y+2, r25	; 0x02
    2d6c:	89 83       	std	Y+1, r24	; 0x01

return ret_18;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <_Z18fieldInitializer18EV>:



 static  TVP _Z18fieldInitializer18EV(HardwareInterfaceCLASS this)	{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <_Z18fieldInitializer18EV+0x6>
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <_Z18fieldInitializer18EV+0x8>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	9c 83       	std	Y+4, r25	; 0x04
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 19:42 */
TVP ret_19 = _Z8RealPortER(NULL, newReal(0.0))
;
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2d9c:	9c 01       	movw	r18, r24
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	b9 01       	movw	r22, r18
    2da4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01

return ret_19;
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <_Z18fieldInitializer17EV>:



 static  TVP _Z18fieldInitializer17EV(HardwareInterfaceCLASS this)	{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <_Z18fieldInitializer17EV+0x6>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <_Z18fieldInitializer17EV+0x8>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	9c 83       	std	Y+4, r25	; 0x04
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 17:33 */
TVP ret_20 = _Z8RealPortER(NULL, newReal(0.0))
;
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2dda:	9c 01       	movw	r18, r24
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	b9 01       	movw	r22, r18
    2de2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01

return ret_20;
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <_Z18fieldInitializer16EV>:



 static  TVP _Z18fieldInitializer16EV(HardwareInterfaceCLASS this)	{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <_Z18fieldInitializer16EV+0x6>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <_Z18fieldInitializer16EV+0x8>
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	9c 83       	std	Y+4, r25	; 0x04
    2e0a:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 15:32 */
TVP ret_21 = _Z8RealPortER(NULL, newReal(0.0))
;
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	70 e0       	ldi	r23, 0x00	; 0
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2e18:	9c 01       	movw	r18, r24
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	b9 01       	movw	r22, r18
    2e20:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2e24:	9a 83       	std	Y+2, r25	; 0x02
    2e26:	89 83       	std	Y+1, r24	; 0x01

return ret_21;
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <_Z18fieldInitializer15EV>:



 static  TVP _Z18fieldInitializer15EV()	{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <_Z18fieldInitializer15EV+0x6>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
/* HardwareInterface.vdmrt 9:40 */
TVP ret_22 = _Z8RealPortER(NULL, newReal(1.0))
;
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	80 e8       	ldi	r24, 0x80	; 128
    2e4a:	9f e3       	ldi	r25, 0x3F	; 63
    2e4c:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2e50:	9c 01       	movw	r18, r24
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	b9 01       	movw	r22, r18
    2e58:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01

return ret_22;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <_Z18fieldInitializer14EV>:



 static  TVP _Z18fieldInitializer14EV()	{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <_Z18fieldInitializer14EV+0x6>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
/* HardwareInterface.vdmrt 7:39 */
TVP ret_23 = _Z8RealPortER(NULL, newReal(5.0))
;
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	70 e0       	ldi	r23, 0x00	; 0
    2e7c:	80 ea       	ldi	r24, 0xA0	; 160
    2e7e:	90 e4       	ldi	r25, 0x40	; 64
    2e80:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2e84:	9c 01       	movw	r18, r24
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	b9 01       	movw	r22, r18
    2e8c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2e90:	9a 83       	std	Y+2, r25	; 0x02
    2e92:	89 83       	std	Y+1, r24	; 0x01

return ret_23;
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <_Z18fieldInitializer13EV>:



 static  TVP _Z18fieldInitializer13EV()	{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <_Z18fieldInitializer13EV+0x6>
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
/* HardwareInterface.vdmrt 5:38 */
TVP ret_24 = _Z8RealPortER(NULL, newReal(4.0))
;
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	80 e8       	ldi	r24, 0x80	; 128
    2eb2:	90 e4       	ldi	r25, 0x40	; 64
    2eb4:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    2eb8:	9c 01       	movw	r18, r24
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	b9 01       	movw	r22, r18
    2ec0:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_Z8RealPortER>
    2ec4:	9a 83       	std	Y+2, r25	; 0x02
    2ec6:	89 83       	std	Y+1, r24	; 0x01

return ret_24;
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <_Z18fieldInitializer12EV>:



 static  TVP _Z18fieldInitializer12EV()	{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <_Z18fieldInitializer12EV+0x6>
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62

TVP ret_25 = newInt(8)
;
    2ee0:	88 e0       	ldi	r24, 0x08	; 8
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	89 83       	std	Y+1, r24	; 0x01

return ret_25;
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <HardwareInterface_const_init>:



 void HardwareInterface_const_init()	{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62

numFields_6 = _Z18fieldInitializer12EV();
    2f02:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <_Z18fieldInitializer12EV>
    2f06:	90 93 dd 02 	sts	0x02DD, r25
    2f0a:	80 93 dc 02 	sts	0x02DC, r24

g_HardwareInterface_forwardSpeed = _Z18fieldInitializer13EV();
    2f0e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <_Z18fieldInitializer13EV>
    2f12:	90 93 df 02 	sts	0x02DF, r25
    2f16:	80 93 de 02 	sts	0x02DE, r24

g_HardwareInterface_forwardRotate = _Z18fieldInitializer14EV();
    2f1a:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_Z18fieldInitializer14EV>
    2f1e:	90 93 e1 02 	sts	0x02E1, r25
    2f22:	80 93 e0 02 	sts	0x02E0, r24

g_HardwareInterface_backwardRotate = _Z18fieldInitializer15EV();
    2f26:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_Z18fieldInitializer15EV>
    2f2a:	90 93 e3 02 	sts	0x02E3, r25
    2f2e:	80 93 e2 02 	sts	0x02E2, r24

return ;
}
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <HardwareInterface_const_shutdown>:



 void HardwareInterface_const_shutdown()	{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_6);
    2f40:	80 91 dc 02 	lds	r24, 0x02DC
    2f44:	90 91 dd 02 	lds	r25, 0x02DD
    2f48:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

vdmFree(g_HardwareInterface_forwardSpeed);
    2f4c:	80 91 de 02 	lds	r24, 0x02DE
    2f50:	90 91 df 02 	lds	r25, 0x02DF
    2f54:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

vdmFree(g_HardwareInterface_forwardRotate);
    2f58:	80 91 e0 02 	lds	r24, 0x02E0
    2f5c:	90 91 e1 02 	lds	r25, 0x02E1
    2f60:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

vdmFree(g_HardwareInterface_backwardRotate);
    2f64:	80 91 e2 02 	lds	r24, 0x02E2
    2f68:	90 91 e3 02 	lds	r25, 0x02E3
    2f6c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <HardwareInterface_static_init>:



 void HardwareInterface_static_init()	{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62

return ;
}
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <HardwareInterface_static_shutdown>:



 void HardwareInterface_static_shutdown()	{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62

return ;
}
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <HardwareInterface_Constructor>:
 *
 --------------------------------- */
 
 
HardwareInterfaceCLASS HardwareInterface_Constructor(HardwareInterfaceCLASS this_ptr)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <HardwareInterface_Constructor+0x6>
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	9a 83       	std	Y+2, r25	; 0x02
    2f9e:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	31 f4       	brne	.+12     	; 0x2fb4 <HardwareInterface_Constructor+0x22>
	{
		this_ptr = (HardwareInterfaceCLASS) malloc(sizeof(struct HardwareInterface));
    2fa8:	82 e1       	ldi	r24, 0x12	; 18
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	c1 f1       	breq	.+112    	; 0x302c <HardwareInterface_Constructor+0x9a>
	{
	
			
		/*  HardwareInterface init  */
		this_ptr->_HardwareInterface_id = CLASS_ID_HardwareInterface_ID;
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	89 e0       	ldi	r24, 0x09	; 9
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	93 83       	std	Z+3, r25	; 0x03
    2fc6:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_HardwareInterface_refs = 0;
    2fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fca:	fa 81       	ldd	r31, Y+2	; 0x02
    2fcc:	15 82       	std	Z+5, r1	; 0x05
    2fce:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_HardwareInterface_pVTable=VTableArrayForHardwareInterface;
    2fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd4:	8e e1       	ldi	r24, 0x1E	; 30
    2fd6:	92 e0       	ldi	r25, 0x02	; 2
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24

																this_ptr->m_HardwareInterface_leftVal= _Z18fieldInitializer16EV(this_ptr);
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe0:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <_Z18fieldInitializer16EV>
    2fe4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe8:	97 83       	std	Z+7, r25	; 0x07
    2fea:	86 83       	std	Z+6, r24	; 0x06
						this_ptr->m_HardwareInterface_rightVal= _Z18fieldInitializer17EV(this_ptr);
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_Z18fieldInitializer17EV>
    2ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff8:	91 87       	std	Z+9, r25	; 0x09
    2ffa:	80 87       	std	Z+8, r24	; 0x08
						this_ptr->m_HardwareInterface_total_energy_used= _Z18fieldInitializer18EV(this_ptr);
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_Z18fieldInitializer18EV>
    3004:	e9 81       	ldd	r30, Y+1	; 0x01
    3006:	fa 81       	ldd	r31, Y+2	; 0x02
    3008:	93 87       	std	Z+11, r25	; 0x0b
    300a:	82 87       	std	Z+10, r24	; 0x0a
						this_ptr->m_HardwareInterface_servo_right_out= _Z18fieldInitializer19EV(this_ptr);
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_Z18fieldInitializer19EV>
    3014:	e9 81       	ldd	r30, Y+1	; 0x01
    3016:	fa 81       	ldd	r31, Y+2	; 0x02
    3018:	95 87       	std	Z+13, r25	; 0x0d
    301a:	84 87       	std	Z+12, r24	; 0x0c
						this_ptr->m_HardwareInterface_servo_left_out= _Z18fieldInitializer20EV(this_ptr);
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	0e 94 82 16 	call	0x2d04	; 0x2d04 <_Z18fieldInitializer20EV>
    3024:	e9 81       	ldd	r30, Y+1	; 0x01
    3026:	fa 81       	ldd	r31, Y+2	; 0x02
    3028:	97 87       	std	Z+15, r25	; 0x0f
    302a:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	08 95       	ret

0000303a <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	00 d0       	rcall	.+0      	; 0x3040 <new+0x6>
    3040:	00 d0       	rcall	.+0      	; 0x3042 <new+0x8>
    3042:	00 d0       	rcall	.+0      	; 0x3044 <new+0xa>
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
	HardwareInterfaceCLASS ptr=HardwareInterface_Constructor(NULL);
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <HardwareInterface_Constructor>
    3050:	9a 83       	std	Y+2, r25	; 0x02
    3052:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_HardwareInterface_id, &ptr->_HardwareInterface_refs, (freeVdmClassFunction)&HardwareInterface_free, ptr)});
    3054:	e9 81       	ldd	r30, Y+1	; 0x01
    3056:	fa 81       	ldd	r31, Y+2	; 0x02
    3058:	62 81       	ldd	r22, Z+2	; 0x02
    305a:	73 81       	ldd	r23, Z+3	; 0x03
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	9c 01       	movw	r18, r24
    3062:	2c 5f       	subi	r18, 0xFC	; 252
    3064:	3f 4f       	sbci	r19, 0xFF	; 255
    3066:	4f e5       	ldi	r20, 0x5F	; 95
    3068:	56 e1       	ldi	r21, 0x16	; 22
    306a:	e9 81       	ldd	r30, Y+1	; 0x01
    306c:	fa 81       	ldd	r31, Y+2	; 0x02
    306e:	cb 01       	movw	r24, r22
    3070:	b9 01       	movw	r22, r18
    3072:	9f 01       	movw	r18, r30
    3074:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    3078:	1b 82       	std	Y+3, r1	; 0x03
    307a:	1c 82       	std	Y+4, r1	; 0x04
    307c:	1d 82       	std	Y+5, r1	; 0x05
    307e:	1e 82       	std	Y+6, r1	; 0x06
    3080:	9c 83       	std	Y+4, r25	; 0x04
    3082:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	HardwareInterfaceCLASS ptr=HardwareInterface_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3084:	2b 81       	ldd	r18, Y+3	; 0x03
    3086:	3c 81       	ldd	r19, Y+4	; 0x04
    3088:	4d 81       	ldd	r20, Y+5	; 0x05
    308a:	5e 81       	ldd	r21, Y+6	; 0x06
    308c:	8b e0       	ldi	r24, 0x0B	; 11
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	ba 01       	movw	r22, r20
    3092:	a9 01       	movw	r20, r18
    3094:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_HardwareInterface_id, &ptr->_HardwareInterface_refs, (freeVdmClassFunction)&HardwareInterface_free, ptr)});
}
    3098:	26 96       	adiw	r28, 0x06	; 6
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <_Z17HardwareInterfaceEV>:
 *
 --------------------------------- */ 
 

    /* HardwareInterface.vdmrt 1:7 */
 TVP _Z17HardwareInterfaceEV(HardwareInterfaceCLASS this)	{
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <_Z17HardwareInterfaceEV+0x6>
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <_Z17HardwareInterfaceEV+0x8>
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	9c 83       	std	Y+4, r25	; 0x04
    30b8:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    30ba:	1a 82       	std	Y+2, r1	; 0x02
    30bc:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	9c 81       	ldd	r25, Y+4	; 0x04
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	69 f4       	brne	.+26     	; 0x30e0 <_Z17HardwareInterfaceEV+0x36>
	
	{

__buf = new();
    30c6:	0e 94 1d 18 	call	0x303a	; 0x303a <new>
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, HardwareInterface);
    30ce:	e9 81       	ldd	r30, Y+1	; 0x01
    30d0:	fa 81       	ldd	r31, Y+2	; 0x02
    30d2:	84 81       	ldd	r24, Z+4	; 0x04
    30d4:	95 81       	ldd	r25, Z+5	; 0x05
    30d6:	fc 01       	movw	r30, r24
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <IntPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void IntPort_free_fields(struct IntPort *this)
{
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <IntPort_free_fields+0x6>
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	9a 83       	std	Y+2, r25	; 0x02
    30fe:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_IntPort_value);
    3100:	e9 81       	ldd	r30, Y+1	; 0x01
    3102:	fa 81       	ldd	r31, Y+2	; 0x02
    3104:	86 85       	ldd	r24, Z+14	; 0x0e
    3106:	97 85       	ldd	r25, Z+15	; 0x0f
    3108:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <IntPort_free>:

static void IntPort_free(struct IntPort *this)
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	00 d0       	rcall	.+0      	; 0x311c <IntPort_free+0x6>
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	9a 83       	std	Y+2, r25	; 0x02
    3122:	89 83       	std	Y+1, r24	; 0x01
	--this->_IntPort_refs;
    3124:	e9 81       	ldd	r30, Y+1	; 0x01
    3126:	fa 81       	ldd	r31, Y+2	; 0x02
    3128:	84 85       	ldd	r24, Z+12	; 0x0c
    312a:	95 85       	ldd	r25, Z+13	; 0x0d
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	e9 81       	ldd	r30, Y+1	; 0x01
    3130:	fa 81       	ldd	r31, Y+2	; 0x02
    3132:	95 87       	std	Z+13, r25	; 0x0d
    3134:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_IntPort_refs < 1)
    3136:	e9 81       	ldd	r30, Y+1	; 0x01
    3138:	fa 81       	ldd	r31, Y+2	; 0x02
    313a:	84 85       	ldd	r24, Z+12	; 0x0c
    313c:	95 85       	ldd	r25, Z+13	; 0x0d
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	41 f4       	brne	.+16     	; 0x3152 <IntPort_free+0x3c>
	{
		IntPort_free_fields(this);
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	0e 94 79 18 	call	0x30f2	; 0x30f2 <IntPort_free_fields>
		free(this);
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <_Z17fieldInitializer3EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer3EV(IntPortCLASS this)	{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <_Z17fieldInitializer3EV+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <_Z17fieldInitializer3EV+0x8>
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 37:17 */
TVP ret_4 = newInt(0)
;
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01

return ret_4;
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    317c:	0f 90       	pop	r0
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <_Z8setValueEI>:


/* Fmi.vdmrt 43:12 */
 static  void _Z8setValueEI(IntPortCLASS this, TVP v)	{
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	00 d0       	rcall	.+0      	; 0x3194 <_Z8setValueEI+0xa>
    3194:	00 d0       	rcall	.+0      	; 0x3196 <_Z8setValueEI+0xc>
    3196:	00 d0       	rcall	.+0      	; 0x3198 <_Z8setValueEI+0xe>
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	9c 83       	std	Y+4, r25	; 0x04
    319e:	8b 83       	std	Y+3, r24	; 0x03
    31a0:	7e 83       	std	Y+6, r23	; 0x06
    31a2:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 44:27 */
TVP field_tmp_2 = vdmCloneGC(v, NULL)
;
    31a4:	8d 81       	ldd	r24, Y+5	; 0x05
    31a6:	9e 81       	ldd	r25, Y+6	; 0x06
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(IntPort, IntPort, this, value, field_tmp_2);
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	9c 81       	ldd	r25, Y+4	; 0x04
    31b8:	fc 01       	movw	r30, r24
    31ba:	3e 96       	adiw	r30, 0x0e	; 14
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	9c 81       	ldd	r25, Y+4	; 0x04
    31c8:	8c 01       	movw	r16, r24
    31ca:	02 5f       	subi	r16, 0xF2	; 242
    31cc:	1f 4f       	sbci	r17, 0xFF	; 255
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    31d6:	f8 01       	movw	r30, r16
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	80 83       	st	Z, r24

vdmFree(field_tmp_2);
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
}
    31e4:	26 96       	adiw	r28, 0x06	; 6
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	08 95       	ret

000031fa <_Z8getValueEV>:


/* Fmi.vdmrt 46:12 */
 static  TVP _Z8getValueEV(IntPortCLASS this)	{
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <_Z8getValueEV+0x6>
    3200:	00 d0       	rcall	.+0      	; 0x3202 <_Z8getValueEV+0x8>
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	9c 83       	std	Y+4, r25	; 0x04
    3208:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 47:26 */
TVP ret_5 = vdmCloneGC(GET_FIELD_PTR_GC(IntPort, IntPort, this, value), NULL)
;
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	9c 81       	ldd	r25, Y+4	; 0x04
    320e:	fc 01       	movw	r30, r24
    3210:	3e 96       	adiw	r30, 0x0e	; 14
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 47:19 */
return ret_5;
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <IntPort_const_init>:



 void IntPort_const_init()	{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <IntPort_const_shutdown>:



 void IntPort_const_shutdown()	{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <IntPort_static_init>:



 void IntPort_static_init()	{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <IntPort_static_shutdown>:



 void IntPort_static_shutdown()	{
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62

return ;
}
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	00 d0       	rcall	.+0      	; 0x327a <Port__Z8getValueEV+0x6>
    327a:	00 d0       	rcall	.+0      	; 0x327c <Port__Z8getValueEV+0x8>
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	9c 83       	std	Y+4, r25	; 0x04
    3282:	8b 83       	std	Y+3, r24	; 0x03

IntPortCLASS this = CLASS_DOWNCAST(Port, IntPort, base)
;
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	9c 81       	ldd	r25, Y+4	; 0x04
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	9a 81       	ldd	r25, Y+2	; 0x02
    3290:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_Z8getValueEV>
}
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <IntPort_Constructor>:
 *
 --------------------------------- */
 
 
IntPortCLASS IntPort_Constructor(IntPortCLASS this_ptr)
{
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <IntPort_Constructor+0x6>
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	9a 83       	std	Y+2, r25	; 0x02
    32ae:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	9a 81       	ldd	r25, Y+2	; 0x02
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	31 f4       	brne	.+12     	; 0x32c4 <IntPort_Constructor+0x22>
	{
		this_ptr = (IntPortCLASS) malloc(sizeof(struct IntPort));
    32b8:	82 e1       	ldi	r24, 0x12	; 18
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    32c0:	9a 83       	std	Y+2, r25	; 0x02
    32c2:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	9a 81       	ldd	r25, Y+2	; 0x02
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	c9 f1       	breq	.+114    	; 0x333e <IntPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,IntPort,Port));
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	0e 94 c4 1a 	call	0x3588	; 0x3588 <Port_Constructor>

					if(! g_VTableArrayForIntPort_Override_Port[0].pFunc)
    32d4:	80 91 e8 02 	lds	r24, 0x02E8
    32d8:	90 91 e9 02 	lds	r25, 0x02E9
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	89 f4       	brne	.+34     	; 0x3302 <IntPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForIntPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    32e0:	e9 81       	ldd	r30, Y+1	; 0x01
    32e2:	fa 81       	ldd	r31, Y+2	; 0x02
    32e4:	20 81       	ld	r18, Z
    32e6:	31 81       	ldd	r19, Z+1	; 0x01
    32e8:	84 ee       	ldi	r24, 0xE4	; 228
    32ea:	92 e0       	ldi	r25, 0x02	; 2
    32ec:	b9 01       	movw	r22, r18
    32ee:	42 e1       	ldi	r20, 0x12	; 18
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForIntPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    32f6:	8a e3       	ldi	r24, 0x3A	; 58
    32f8:	99 e1       	ldi	r25, 0x19	; 25
    32fa:	90 93 ef 02 	sts	0x02EF, r25
    32fe:	80 93 ee 02 	sts	0x02EE, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForIntPort_Override_Port;
    3302:	e9 81       	ldd	r30, Y+1	; 0x01
    3304:	fa 81       	ldd	r31, Y+2	; 0x02
    3306:	84 ee       	ldi	r24, 0xE4	; 228
    3308:	92 e0       	ldi	r25, 0x02	; 2
    330a:	91 83       	std	Z+1, r25	; 0x01
    330c:	80 83       	st	Z, r24
				
		
		/*  IntPort init  */
		this_ptr->_IntPort_id = CLASS_ID_IntPort_ID;
    330e:	e9 81       	ldd	r30, Y+1	; 0x01
    3310:	fa 81       	ldd	r31, Y+2	; 0x02
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	93 87       	std	Z+11, r25	; 0x0b
    3318:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_IntPort_refs = 0;
    331a:	e9 81       	ldd	r30, Y+1	; 0x01
    331c:	fa 81       	ldd	r31, Y+2	; 0x02
    331e:	15 86       	std	Z+13, r1	; 0x0d
    3320:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_IntPort_pVTable=VTableArrayForIntPort;
    3322:	e9 81       	ldd	r30, Y+1	; 0x01
    3324:	fa 81       	ldd	r31, Y+2	; 0x02
    3326:	84 e2       	ldi	r24, 0x24	; 36
    3328:	92 e0       	ldi	r25, 0x02	; 2
    332a:	91 87       	std	Z+9, r25	; 0x09
    332c:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_IntPort_value= _Z17fieldInitializer3EV(this_ptr);
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	0e 94 ae 18 	call	0x315c	; 0x315c <_Z17fieldInitializer3EV>
    3336:	e9 81       	ldd	r30, Y+1	; 0x01
    3338:	fa 81       	ldd	r31, Y+2	; 0x02
    333a:	97 87       	std	Z+15, r25	; 0x0f
    333c:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	08 95       	ret

0000334c <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    334c:	df 93       	push	r29
    334e:	cf 93       	push	r28
    3350:	00 d0       	rcall	.+0      	; 0x3352 <new+0x6>
    3352:	00 d0       	rcall	.+0      	; 0x3354 <new+0x8>
    3354:	00 d0       	rcall	.+0      	; 0x3356 <new+0xa>
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
	IntPortCLASS ptr=IntPort_Constructor(NULL);
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <IntPort_Constructor>
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_IntPort_id, &ptr->_IntPort_refs, (freeVdmClassFunction)&IntPort_free, ptr)});
    3366:	e9 81       	ldd	r30, Y+1	; 0x01
    3368:	fa 81       	ldd	r31, Y+2	; 0x02
    336a:	62 85       	ldd	r22, Z+10	; 0x0a
    336c:	73 85       	ldd	r23, Z+11	; 0x0b
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	9c 01       	movw	r18, r24
    3374:	24 5f       	subi	r18, 0xF4	; 244
    3376:	3f 4f       	sbci	r19, 0xFF	; 255
    3378:	4b e8       	ldi	r20, 0x8B	; 139
    337a:	58 e1       	ldi	r21, 0x18	; 24
    337c:	e9 81       	ldd	r30, Y+1	; 0x01
    337e:	fa 81       	ldd	r31, Y+2	; 0x02
    3380:	cb 01       	movw	r24, r22
    3382:	b9 01       	movw	r22, r18
    3384:	9f 01       	movw	r18, r30
    3386:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    338a:	1b 82       	std	Y+3, r1	; 0x03
    338c:	1c 82       	std	Y+4, r1	; 0x04
    338e:	1d 82       	std	Y+5, r1	; 0x05
    3390:	1e 82       	std	Y+6, r1	; 0x06
    3392:	9c 83       	std	Y+4, r25	; 0x04
    3394:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	IntPortCLASS ptr=IntPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3396:	2b 81       	ldd	r18, Y+3	; 0x03
    3398:	3c 81       	ldd	r19, Y+4	; 0x04
    339a:	4d 81       	ldd	r20, Y+5	; 0x05
    339c:	5e 81       	ldd	r21, Y+6	; 0x06
    339e:	8b e0       	ldi	r24, 0x0B	; 11
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	ba 01       	movw	r22, r20
    33a4:	a9 01       	movw	r20, r18
    33a6:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_IntPort_id, &ptr->_IntPort_refs, (freeVdmClassFunction)&IntPort_free, ptr)});
}
    33aa:	26 96       	adiw	r28, 0x06	; 6
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <_Z7IntPortEI>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 40:12 */
 TVP _Z7IntPortEI(IntPortCLASS this, TVP v)	{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <_Z7IntPortEI+0x6>
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <_Z7IntPortEI+0x8>
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <_Z7IntPortEI+0xa>
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	9c 83       	std	Y+4, r25	; 0x04
    33cc:	8b 83       	std	Y+3, r24	; 0x03
    33ce:	7e 83       	std	Y+6, r23	; 0x06
    33d0:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
    33d2:	1a 82       	std	Y+2, r1	; 0x02
    33d4:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	9c 81       	ldd	r25, Y+4	; 0x04
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	69 f4       	brne	.+26     	; 0x33f8 <_Z7IntPortEI+0x3c>
	
	{

__buf = new();
    33de:	0e 94 a6 19 	call	0x334c	; 0x334c <new>
    33e2:	9a 83       	std	Y+2, r25	; 0x02
    33e4:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, IntPort);
    33e6:	e9 81       	ldd	r30, Y+1	; 0x01
    33e8:	fa 81       	ldd	r31, Y+2	; 0x02
    33ea:	84 81       	ldd	r24, Z+4	; 0x04
    33ec:	95 81       	ldd	r25, Z+5	; 0x05
    33ee:	fc 01       	movw	r30, r24
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	9c 83       	std	Y+4, r25	; 0x04
    33f6:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 41:17 */
CALL_FUNC_PTR(IntPort, IntPort, this, CLASS_IntPort__Z8setValueEI, v);
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	9c 81       	ldd	r25, Y+4	; 0x04
    33fc:	fc 01       	movw	r30, r24
    33fe:	38 96       	adiw	r30, 0x08	; 8
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	fc 01       	movw	r30, r24
    3406:	36 96       	adiw	r30, 0x06	; 6
    3408:	84 81       	ldd	r24, Z+4	; 0x04
    340a:	95 81       	ldd	r25, Z+5	; 0x05
    340c:	fc 01       	movw	r30, r24
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	2d 81       	ldd	r18, Y+5	; 0x05
    3414:	3e 81       	ldd	r19, Y+6	; 0x06
    3416:	b9 01       	movw	r22, r18
    3418:	09 95       	icall

return __buf;
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    341e:	26 96       	adiw	r28, 0x06	; 6
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret

00003430 <_Z7IntPortEV>:


    /* Fmi.vdmrt 34:7 */
 TVP _Z7IntPortEV(IntPortCLASS this)	{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	00 d0       	rcall	.+0      	; 0x3436 <_Z7IntPortEV+0x6>
    3436:	00 d0       	rcall	.+0      	; 0x3438 <_Z7IntPortEV+0x8>
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	9c 83       	std	Y+4, r25	; 0x04
    343e:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    3440:	1a 82       	std	Y+2, r1	; 0x02
    3442:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	9c 81       	ldd	r25, Y+4	; 0x04
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	69 f4       	brne	.+26     	; 0x3466 <_Z7IntPortEV+0x36>
	
	{

__buf = new();
    344c:	0e 94 a6 19 	call	0x334c	; 0x334c <new>
    3450:	9a 83       	std	Y+2, r25	; 0x02
    3452:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, IntPort);
    3454:	e9 81       	ldd	r30, Y+1	; 0x01
    3456:	fa 81       	ldd	r31, Y+2	; 0x02
    3458:	84 81       	ldd	r24, Z+4	; 0x04
    345a:	95 81       	ldd	r25, Z+5	; 0x05
    345c:	fc 01       	movw	r30, r24
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	9a 81       	ldd	r25, Y+2	; 0x02
}
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <Port_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void Port_free_fields(struct Port *this)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	00 d0       	rcall	.+0      	; 0x347e <Port_free_fields+0x6>
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
	}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <Port_free>:

static void Port_free(struct Port *this)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <Port_free+0x6>
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	9a 83       	std	Y+2, r25	; 0x02
    349c:	89 83       	std	Y+1, r24	; 0x01
	--this->_Port_refs;
    349e:	e9 81       	ldd	r30, Y+1	; 0x01
    34a0:	fa 81       	ldd	r31, Y+2	; 0x02
    34a2:	84 81       	ldd	r24, Z+4	; 0x04
    34a4:	95 81       	ldd	r25, Z+5	; 0x05
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	e9 81       	ldd	r30, Y+1	; 0x01
    34aa:	fa 81       	ldd	r31, Y+2	; 0x02
    34ac:	95 83       	std	Z+5, r25	; 0x05
    34ae:	84 83       	std	Z+4, r24	; 0x04
	if (this->_Port_refs < 1)
    34b0:	e9 81       	ldd	r30, Y+1	; 0x01
    34b2:	fa 81       	ldd	r31, Y+2	; 0x02
    34b4:	84 81       	ldd	r24, Z+4	; 0x04
    34b6:	95 81       	ldd	r25, Z+5	; 0x05
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	41 f4       	brne	.+16     	; 0x34cc <Port_free+0x3c>
	{
		Port_free_fields(this);
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	9a 81       	ldd	r25, Y+2	; 0x02
    34c0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Port_free_fields>
		free(this);
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	9a 81       	ldd	r25, Y+2	; 0x02
    34c8:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <_Z17fieldInitializer2EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer2EV()	{
    34d6:	df 93       	push	r29
    34d8:	cf 93       	push	r28
    34da:	00 d0       	rcall	.+0      	; 0x34dc <_Z17fieldInitializer2EV+0x6>
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62

TVP ret_3 = newInt(0)
;
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    34e8:	9a 83       	std	Y+2, r25	; 0x02
    34ea:	89 83       	std	Y+1, r24	; 0x01

return ret_3;
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <_Z8setValueE5X1QCBR>:


/* Fmi.vdmrt 26:12 */
 static  void _Z8setValueE5X1QCBR(PortCLASS this, TVP v)	{
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	00 d0       	rcall	.+0      	; 0x3500 <_Z8setValueE5X1QCBR+0x6>
    3500:	00 d0       	rcall	.+0      	; 0x3502 <_Z8setValueE5X1QCBR+0x8>
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	9a 83       	std	Y+2, r25	; 0x02
    3508:	89 83       	std	Y+1, r24	; 0x01
    350a:	7c 83       	std	Y+4, r23	; 0x04
    350c:	6b 83       	std	Y+3, r22	; 0x03

return ;
}
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <_Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP _Z8getValueEV(PortCLASS this)	{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	00 d0       	rcall	.+0      	; 0x3522 <_Z8getValueEV+0x6>
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	9a 83       	std	Y+2, r25	; 0x02
    3528:	89 83       	std	Y+1, r24	; 0x01

return NULL;
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
}
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <Port_const_init>:



 void Port_const_init()	{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62

numFields_2 = _Z17fieldInitializer2EV();
    3540:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_Z17fieldInitializer2EV>
    3544:	90 93 f7 02 	sts	0x02F7, r25
    3548:	80 93 f6 02 	sts	0x02F6, r24

return ;
}
    354c:	cf 91       	pop	r28
    354e:	df 91       	pop	r29
    3550:	08 95       	ret

00003552 <Port_const_shutdown>:



 void Port_const_shutdown()	{
    3552:	df 93       	push	r29
    3554:	cf 93       	push	r28
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_2);
    355a:	80 91 f6 02 	lds	r24, 0x02F6
    355e:	90 91 f7 02 	lds	r25, 0x02F7
    3562:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <Port_static_init>:



 void Port_static_init()	{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <Port_static_shutdown>:



 void Port_static_shutdown()	{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <Port_Constructor>:
 *
 --------------------------------- */
 
 
PortCLASS Port_Constructor(PortCLASS this_ptr)
{
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	00 d0       	rcall	.+0      	; 0x358e <Port_Constructor+0x6>
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	31 f4       	brne	.+12     	; 0x35aa <Port_Constructor+0x22>
	{
		this_ptr = (PortCLASS) malloc(sizeof(struct Port));
    359e:	88 e0       	ldi	r24, 0x08	; 8
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    35a6:	9a 83       	std	Y+2, r25	; 0x02
    35a8:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	81 f0       	breq	.+32     	; 0x35d2 <Port_Constructor+0x4a>
	{
	
			
		/*  Port init  */
		this_ptr->_Port_id = CLASS_ID_Port_ID;
    35b2:	e9 81       	ldd	r30, Y+1	; 0x01
    35b4:	fa 81       	ldd	r31, Y+2	; 0x02
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	93 83       	std	Z+3, r25	; 0x03
    35bc:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_Port_refs = 0;
    35be:	e9 81       	ldd	r30, Y+1	; 0x01
    35c0:	fa 81       	ldd	r31, Y+2	; 0x02
    35c2:	15 82       	std	Z+5, r1	; 0x05
    35c4:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_Port_pVTable=VTableArrayForPort;
    35c6:	e9 81       	ldd	r30, Y+1	; 0x01
    35c8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ca:	8c e3       	ldi	r24, 0x3C	; 60
    35cc:	92 e0       	ldi	r25, 0x02	; 2
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	80 83       	st	Z, r24

				}

	return this_ptr;
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <new+0x6>
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <new+0x8>
    35e8:	00 d0       	rcall	.+0      	; 0x35ea <new+0xa>
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
	PortCLASS ptr=Port_Constructor(NULL);
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	0e 94 c4 1a 	call	0x3588	; 0x3588 <Port_Constructor>
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_Port_id, &ptr->_Port_refs, (freeVdmClassFunction)&Port_free, ptr)});
    35fa:	e9 81       	ldd	r30, Y+1	; 0x01
    35fc:	fa 81       	ldd	r31, Y+2	; 0x02
    35fe:	62 81       	ldd	r22, Z+2	; 0x02
    3600:	73 81       	ldd	r23, Z+3	; 0x03
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	9c 01       	movw	r18, r24
    3608:	2c 5f       	subi	r18, 0xFC	; 252
    360a:	3f 4f       	sbci	r19, 0xFF	; 255
    360c:	48 e4       	ldi	r20, 0x48	; 72
    360e:	5a e1       	ldi	r21, 0x1A	; 26
    3610:	e9 81       	ldd	r30, Y+1	; 0x01
    3612:	fa 81       	ldd	r31, Y+2	; 0x02
    3614:	cb 01       	movw	r24, r22
    3616:	b9 01       	movw	r22, r18
    3618:	9f 01       	movw	r18, r30
    361a:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    361e:	1b 82       	std	Y+3, r1	; 0x03
    3620:	1c 82       	std	Y+4, r1	; 0x04
    3622:	1d 82       	std	Y+5, r1	; 0x05
    3624:	1e 82       	std	Y+6, r1	; 0x06
    3626:	9c 83       	std	Y+4, r25	; 0x04
    3628:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	PortCLASS ptr=Port_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    362a:	2b 81       	ldd	r18, Y+3	; 0x03
    362c:	3c 81       	ldd	r19, Y+4	; 0x04
    362e:	4d 81       	ldd	r20, Y+5	; 0x05
    3630:	5e 81       	ldd	r21, Y+6	; 0x06
    3632:	8b e0       	ldi	r24, 0x0B	; 11
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	ba 01       	movw	r22, r20
    3638:	a9 01       	movw	r20, r18
    363a:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_Port_id, &ptr->_Port_refs, (freeVdmClassFunction)&Port_free, ptr)});
}
    363e:	26 96       	adiw	r28, 0x06	; 6
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	08 95       	ret

00003650 <_Z4PortEV>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 18:7 */
 TVP _Z4PortEV(PortCLASS this)	{
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	00 d0       	rcall	.+0      	; 0x3656 <_Z4PortEV+0x6>
    3656:	00 d0       	rcall	.+0      	; 0x3658 <_Z4PortEV+0x8>
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	9c 83       	std	Y+4, r25	; 0x04
    365e:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    3660:	1a 82       	std	Y+2, r1	; 0x02
    3662:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3664:	8b 81       	ldd	r24, Y+3	; 0x03
    3666:	9c 81       	ldd	r25, Y+4	; 0x04
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	69 f4       	brne	.+26     	; 0x3686 <_Z4PortEV+0x36>
	
	{

__buf = new();
    366c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <new>
    3670:	9a 83       	std	Y+2, r25	; 0x02
    3672:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, Port);
    3674:	e9 81       	ldd	r30, Y+1	; 0x01
    3676:	fa 81       	ldd	r31, Y+2	; 0x02
    3678:	84 81       	ldd	r24, Z+4	; 0x04
    367a:	95 81       	ldd	r25, Z+5	; 0x05
    367c:	fc 01       	movw	r30, r24
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	9c 83       	std	Y+4, r25	; 0x04
    3684:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	9a 81       	ldd	r25, Y+2	; 0x02
}
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	08 95       	ret

00003698 <RealPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void RealPort_free_fields(struct RealPort *this)
{
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	00 d0       	rcall	.+0      	; 0x369e <RealPort_free_fields+0x6>
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
    36a2:	9a 83       	std	Y+2, r25	; 0x02
    36a4:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_RealPort_value);
    36a6:	e9 81       	ldd	r30, Y+1	; 0x01
    36a8:	fa 81       	ldd	r31, Y+2	; 0x02
    36aa:	86 85       	ldd	r24, Z+14	; 0x0e
    36ac:	97 85       	ldd	r25, Z+15	; 0x0f
    36ae:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <RealPort_free>:

static void RealPort_free(struct RealPort *this)
{
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <RealPort_free+0x6>
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01
	--this->_RealPort_refs;
    36ca:	e9 81       	ldd	r30, Y+1	; 0x01
    36cc:	fa 81       	ldd	r31, Y+2	; 0x02
    36ce:	84 85       	ldd	r24, Z+12	; 0x0c
    36d0:	95 85       	ldd	r25, Z+13	; 0x0d
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	e9 81       	ldd	r30, Y+1	; 0x01
    36d6:	fa 81       	ldd	r31, Y+2	; 0x02
    36d8:	95 87       	std	Z+13, r25	; 0x0d
    36da:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_RealPort_refs < 1)
    36dc:	e9 81       	ldd	r30, Y+1	; 0x01
    36de:	fa 81       	ldd	r31, Y+2	; 0x02
    36e0:	84 85       	ldd	r24, Z+12	; 0x0c
    36e2:	95 85       	ldd	r25, Z+13	; 0x0d
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	41 f4       	brne	.+16     	; 0x36f8 <RealPort_free+0x3c>
	{
		RealPort_free_fields(this);
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	9a 81       	ldd	r25, Y+2	; 0x02
    36ec:	0e 94 4c 1b 	call	0x3698	; 0x3698 <RealPort_free_fields>
		free(this);
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <_Z17fieldInitializer5EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer5EV(RealPortCLASS this)	{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	00 d0       	rcall	.+0      	; 0x3708 <_Z17fieldInitializer5EV+0x6>
    3708:	00 d0       	rcall	.+0      	; 0x370a <_Z17fieldInitializer5EV+0x8>
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	9c 83       	std	Y+4, r25	; 0x04
    3710:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 71:18 */
TVP ret_8 = newReal(0.0)
;
    3712:	60 e0       	ldi	r22, 0x00	; 0
    3714:	70 e0       	ldi	r23, 0x00	; 0
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    371e:	9a 83       	std	Y+2, r25	; 0x02
    3720:	89 83       	std	Y+1, r24	; 0x01

return ret_8;
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	cf 91       	pop	r28
    3730:	df 91       	pop	r29
    3732:	08 95       	ret

00003734 <_Z8setValueER>:


/* Fmi.vdmrt 77:12 */
 static  void _Z8setValueER(RealPortCLASS this, TVP v)	{
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <_Z8setValueER+0xa>
    373e:	00 d0       	rcall	.+0      	; 0x3740 <_Z8setValueER+0xc>
    3740:	00 d0       	rcall	.+0      	; 0x3742 <_Z8setValueER+0xe>
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	9c 83       	std	Y+4, r25	; 0x04
    3748:	8b 83       	std	Y+3, r24	; 0x03
    374a:	7e 83       	std	Y+6, r23	; 0x06
    374c:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 78:27 */
TVP field_tmp_4 = vdmCloneGC(v, NULL)
;
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	9e 81       	ldd	r25, Y+6	; 0x06
    3752:	60 e0       	ldi	r22, 0x00	; 0
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    375a:	9a 83       	std	Y+2, r25	; 0x02
    375c:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(RealPort, RealPort, this, value, field_tmp_4);
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	9c 81       	ldd	r25, Y+4	; 0x04
    3762:	fc 01       	movw	r30, r24
    3764:	3e 96       	adiw	r30, 0x0e	; 14
    3766:	80 81       	ld	r24, Z
    3768:	91 81       	ldd	r25, Z+1	; 0x01
    376a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	9c 81       	ldd	r25, Y+4	; 0x04
    3772:	8c 01       	movw	r16, r24
    3774:	02 5f       	subi	r16, 0xF2	; 242
    3776:	1f 4f       	sbci	r17, 0xFF	; 255
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	9a 81       	ldd	r25, Y+2	; 0x02
    377c:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    3780:	f8 01       	movw	r30, r16
    3782:	91 83       	std	Z+1, r25	; 0x01
    3784:	80 83       	st	Z, r24

vdmFree(field_tmp_4);
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	9a 81       	ldd	r25, Y+2	; 0x02
    378a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
}
    378e:	26 96       	adiw	r28, 0x06	; 6
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	08 95       	ret

000037a4 <_Z8getValueEV>:


/* Fmi.vdmrt 80:12 */
 static  TVP _Z8getValueEV(RealPortCLASS this)	{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <_Z8getValueEV+0x6>
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <_Z8getValueEV+0x8>
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	9c 83       	std	Y+4, r25	; 0x04
    37b2:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 81:26 */
TVP ret_9 = vdmCloneGC(GET_FIELD_PTR_GC(RealPort, RealPort, this, value), NULL)
;
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	9c 81       	ldd	r25, Y+4	; 0x04
    37b8:	fc 01       	movw	r30, r24
    37ba:	3e 96       	adiw	r30, 0x0e	; 14
    37bc:	80 81       	ld	r24, Z
    37be:	91 81       	ldd	r25, Z+1	; 0x01
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	70 e0       	ldi	r23, 0x00	; 0
    37cc:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    37d0:	9a 83       	std	Y+2, r25	; 0x02
    37d2:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 81:19 */
return ret_9;
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <RealPort_const_init>:



 void RealPort_const_init()	{
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62

return ;
}
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <RealPort_const_shutdown>:



 void RealPort_const_shutdown()	{
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62

return ;
}
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <RealPort_static_init>:



 void RealPort_static_init()	{
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62

return ;
}
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <RealPort_static_shutdown>:



 void RealPort_static_shutdown()	{
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	00 d0       	rcall	.+0      	; 0x3824 <Port__Z8getValueEV+0x6>
    3824:	00 d0       	rcall	.+0      	; 0x3826 <Port__Z8getValueEV+0x8>
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	9c 83       	std	Y+4, r25	; 0x04
    382c:	8b 83       	std	Y+3, r24	; 0x03

RealPortCLASS this = CLASS_DOWNCAST(Port, RealPort, base)
;
    382e:	8b 81       	ldd	r24, Y+3	; 0x03
    3830:	9c 81       	ldd	r25, Y+4	; 0x04
    3832:	9a 83       	std	Y+2, r25	; 0x02
    3834:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	9a 81       	ldd	r25, Y+2	; 0x02
    383a:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <_Z8getValueEV>
}
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	cf 91       	pop	r28
    3848:	df 91       	pop	r29
    384a:	08 95       	ret

0000384c <RealPort_Constructor>:
 *
 --------------------------------- */
 
 
RealPortCLASS RealPort_Constructor(RealPortCLASS this_ptr)
{
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	00 d0       	rcall	.+0      	; 0x3852 <RealPort_Constructor+0x6>
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	9a 83       	std	Y+2, r25	; 0x02
    3858:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	31 f4       	brne	.+12     	; 0x386e <RealPort_Constructor+0x22>
	{
		this_ptr = (RealPortCLASS) malloc(sizeof(struct RealPort));
    3862:	82 e1       	ldi	r24, 0x12	; 18
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	9a 81       	ldd	r25, Y+2	; 0x02
    3872:	00 97       	sbiw	r24, 0x00	; 0
    3874:	c9 f1       	breq	.+114    	; 0x38e8 <RealPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,RealPort,Port));
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
    387a:	0e 94 c4 1a 	call	0x3588	; 0x3588 <Port_Constructor>

					if(! g_VTableArrayForRealPort_Override_Port[0].pFunc)
    387e:	80 91 fc 02 	lds	r24, 0x02FC
    3882:	90 91 fd 02 	lds	r25, 0x02FD
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	89 f4       	brne	.+34     	; 0x38ac <RealPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForRealPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    388a:	e9 81       	ldd	r30, Y+1	; 0x01
    388c:	fa 81       	ldd	r31, Y+2	; 0x02
    388e:	20 81       	ld	r18, Z
    3890:	31 81       	ldd	r19, Z+1	; 0x01
    3892:	88 ef       	ldi	r24, 0xF8	; 248
    3894:	92 e0       	ldi	r25, 0x02	; 2
    3896:	b9 01       	movw	r22, r18
    3898:	42 e1       	ldi	r20, 0x12	; 18
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForRealPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    38a0:	8f e0       	ldi	r24, 0x0F	; 15
    38a2:	9c e1       	ldi	r25, 0x1C	; 28
    38a4:	90 93 03 03 	sts	0x0303, r25
    38a8:	80 93 02 03 	sts	0x0302, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForRealPort_Override_Port;
    38ac:	e9 81       	ldd	r30, Y+1	; 0x01
    38ae:	fa 81       	ldd	r31, Y+2	; 0x02
    38b0:	88 ef       	ldi	r24, 0xF8	; 248
    38b2:	92 e0       	ldi	r25, 0x02	; 2
    38b4:	91 83       	std	Z+1, r25	; 0x01
    38b6:	80 83       	st	Z, r24
				
		
		/*  RealPort init  */
		this_ptr->_RealPort_id = CLASS_ID_RealPort_ID;
    38b8:	e9 81       	ldd	r30, Y+1	; 0x01
    38ba:	fa 81       	ldd	r31, Y+2	; 0x02
    38bc:	84 e0       	ldi	r24, 0x04	; 4
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	93 87       	std	Z+11, r25	; 0x0b
    38c2:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_RealPort_refs = 0;
    38c4:	e9 81       	ldd	r30, Y+1	; 0x01
    38c6:	fa 81       	ldd	r31, Y+2	; 0x02
    38c8:	15 86       	std	Z+13, r1	; 0x0d
    38ca:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_RealPort_pVTable=VTableArrayForRealPort;
    38cc:	e9 81       	ldd	r30, Y+1	; 0x01
    38ce:	fa 81       	ldd	r31, Y+2	; 0x02
    38d0:	8e e4       	ldi	r24, 0x4E	; 78
    38d2:	92 e0       	ldi	r25, 0x02	; 2
    38d4:	91 87       	std	Z+9, r25	; 0x09
    38d6:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_RealPort_value= _Z17fieldInitializer5EV(this_ptr);
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	9a 81       	ldd	r25, Y+2	; 0x02
    38dc:	0e 94 81 1b 	call	0x3702	; 0x3702 <_Z17fieldInitializer5EV>
    38e0:	e9 81       	ldd	r30, Y+1	; 0x01
    38e2:	fa 81       	ldd	r31, Y+2	; 0x02
    38e4:	97 87       	std	Z+15, r25	; 0x0f
    38e6:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	08 95       	ret

000038f6 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <new+0x6>
    38fc:	00 d0       	rcall	.+0      	; 0x38fe <new+0x8>
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <new+0xa>
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
	RealPortCLASS ptr=RealPort_Constructor(NULL);
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 26 1c 	call	0x384c	; 0x384c <RealPort_Constructor>
    390c:	9a 83       	std	Y+2, r25	; 0x02
    390e:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RealPort_id, &ptr->_RealPort_refs, (freeVdmClassFunction)&RealPort_free, ptr)});
    3910:	e9 81       	ldd	r30, Y+1	; 0x01
    3912:	fa 81       	ldd	r31, Y+2	; 0x02
    3914:	62 85       	ldd	r22, Z+10	; 0x0a
    3916:	73 85       	ldd	r23, Z+11	; 0x0b
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	9a 81       	ldd	r25, Y+2	; 0x02
    391c:	9c 01       	movw	r18, r24
    391e:	24 5f       	subi	r18, 0xF4	; 244
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	4e e5       	ldi	r20, 0x5E	; 94
    3924:	5b e1       	ldi	r21, 0x1B	; 27
    3926:	e9 81       	ldd	r30, Y+1	; 0x01
    3928:	fa 81       	ldd	r31, Y+2	; 0x02
    392a:	cb 01       	movw	r24, r22
    392c:	b9 01       	movw	r22, r18
    392e:	9f 01       	movw	r18, r30
    3930:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    3934:	1b 82       	std	Y+3, r1	; 0x03
    3936:	1c 82       	std	Y+4, r1	; 0x04
    3938:	1d 82       	std	Y+5, r1	; 0x05
    393a:	1e 82       	std	Y+6, r1	; 0x06
    393c:	9c 83       	std	Y+4, r25	; 0x04
    393e:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	RealPortCLASS ptr=RealPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3940:	2b 81       	ldd	r18, Y+3	; 0x03
    3942:	3c 81       	ldd	r19, Y+4	; 0x04
    3944:	4d 81       	ldd	r20, Y+5	; 0x05
    3946:	5e 81       	ldd	r21, Y+6	; 0x06
    3948:	8b e0       	ldi	r24, 0x0B	; 11
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	ba 01       	movw	r22, r20
    394e:	a9 01       	movw	r20, r18
    3950:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RealPort_id, &ptr->_RealPort_refs, (freeVdmClassFunction)&RealPort_free, ptr)});
}
    3954:	26 96       	adiw	r28, 0x06	; 6
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	08 95       	ret

00003966 <_Z8RealPortER>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 74:12 */
 TVP _Z8RealPortER(RealPortCLASS this, TVP v)	{
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	00 d0       	rcall	.+0      	; 0x396c <_Z8RealPortER+0x6>
    396c:	00 d0       	rcall	.+0      	; 0x396e <_Z8RealPortER+0x8>
    396e:	00 d0       	rcall	.+0      	; 0x3970 <_Z8RealPortER+0xa>
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	9c 83       	std	Y+4, r25	; 0x04
    3976:	8b 83       	std	Y+3, r24	; 0x03
    3978:	7e 83       	std	Y+6, r23	; 0x06
    397a:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
    397c:	1a 82       	std	Y+2, r1	; 0x02
    397e:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
    3982:	9c 81       	ldd	r25, Y+4	; 0x04
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f4       	brne	.+26     	; 0x39a2 <_Z8RealPortER+0x3c>
	
	{

__buf = new();
    3988:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <new>
    398c:	9a 83       	std	Y+2, r25	; 0x02
    398e:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RealPort);
    3990:	e9 81       	ldd	r30, Y+1	; 0x01
    3992:	fa 81       	ldd	r31, Y+2	; 0x02
    3994:	84 81       	ldd	r24, Z+4	; 0x04
    3996:	95 81       	ldd	r25, Z+5	; 0x05
    3998:	fc 01       	movw	r30, r24
    399a:	80 81       	ld	r24, Z
    399c:	91 81       	ldd	r25, Z+1	; 0x01
    399e:	9c 83       	std	Y+4, r25	; 0x04
    39a0:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 75:18 */
CALL_FUNC_PTR(RealPort, RealPort, this, CLASS_RealPort__Z8setValueER, v);
    39a2:	8b 81       	ldd	r24, Y+3	; 0x03
    39a4:	9c 81       	ldd	r25, Y+4	; 0x04
    39a6:	fc 01       	movw	r30, r24
    39a8:	38 96       	adiw	r30, 0x08	; 8
    39aa:	80 81       	ld	r24, Z
    39ac:	91 81       	ldd	r25, Z+1	; 0x01
    39ae:	fc 01       	movw	r30, r24
    39b0:	36 96       	adiw	r30, 0x06	; 6
    39b2:	84 81       	ldd	r24, Z+4	; 0x04
    39b4:	95 81       	ldd	r25, Z+5	; 0x05
    39b6:	fc 01       	movw	r30, r24
    39b8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ba:	9c 81       	ldd	r25, Y+4	; 0x04
    39bc:	2d 81       	ldd	r18, Y+5	; 0x05
    39be:	3e 81       	ldd	r19, Y+6	; 0x06
    39c0:	b9 01       	movw	r22, r18
    39c2:	09 95       	icall

return __buf;
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    39c8:	26 96       	adiw	r28, 0x06	; 6
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	08 95       	ret

000039da <_Z8RealPortEV>:


    /* Fmi.vdmrt 68:7 */
 TVP _Z8RealPortEV(RealPortCLASS this)	{
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	00 d0       	rcall	.+0      	; 0x39e0 <_Z8RealPortEV+0x6>
    39e0:	00 d0       	rcall	.+0      	; 0x39e2 <_Z8RealPortEV+0x8>
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
    39e6:	9c 83       	std	Y+4, r25	; 0x04
    39e8:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    39ea:	1a 82       	std	Y+2, r1	; 0x02
    39ec:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    39ee:	8b 81       	ldd	r24, Y+3	; 0x03
    39f0:	9c 81       	ldd	r25, Y+4	; 0x04
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	69 f4       	brne	.+26     	; 0x3a10 <_Z8RealPortEV+0x36>
	
	{

__buf = new();
    39f6:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <new>
    39fa:	9a 83       	std	Y+2, r25	; 0x02
    39fc:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RealPort);
    39fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3a00:	fa 81       	ldd	r31, Y+2	; 0x02
    3a02:	84 81       	ldd	r24, Z+4	; 0x04
    3a04:	95 81       	ldd	r25, Z+5	; 0x05
    3a06:	fc 01       	movw	r30, r24
    3a08:	80 81       	ld	r24, Z
    3a0a:	91 81       	ldd	r25, Z+1	; 0x01
    3a0c:	9c 83       	std	Y+4, r25	; 0x04
    3a0e:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <RobotSensor_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void RobotSensor_free_fields(struct RobotSensor *this)
{
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <RobotSensor_free_fields+0x6>
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	9a 83       	std	Y+2, r25	; 0x02
    3a2e:	89 83       	std	Y+1, r24	; 0x01
			vdmFree(this->m_RobotSensor_port);
    3a30:	e9 81       	ldd	r30, Y+1	; 0x01
    3a32:	fa 81       	ldd	r31, Y+2	; 0x02
    3a34:	86 81       	ldd	r24, Z+6	; 0x06
    3a36:	97 81       	ldd	r25, Z+7	; 0x07
    3a38:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <RobotSensor_free>:

static void RobotSensor_free(struct RobotSensor *this)
{
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	00 d0       	rcall	.+0      	; 0x3a4c <RobotSensor_free+0x6>
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	9a 83       	std	Y+2, r25	; 0x02
    3a52:	89 83       	std	Y+1, r24	; 0x01
	--this->_RobotSensor_refs;
    3a54:	e9 81       	ldd	r30, Y+1	; 0x01
    3a56:	fa 81       	ldd	r31, Y+2	; 0x02
    3a58:	84 81       	ldd	r24, Z+4	; 0x04
    3a5a:	95 81       	ldd	r25, Z+5	; 0x05
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a60:	fa 81       	ldd	r31, Y+2	; 0x02
    3a62:	95 83       	std	Z+5, r25	; 0x05
    3a64:	84 83       	std	Z+4, r24	; 0x04
	if (this->_RobotSensor_refs < 1)
    3a66:	e9 81       	ldd	r30, Y+1	; 0x01
    3a68:	fa 81       	ldd	r31, Y+2	; 0x02
    3a6a:	84 81       	ldd	r24, Z+4	; 0x04
    3a6c:	95 81       	ldd	r25, Z+5	; 0x05
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	41 f4       	brne	.+16     	; 0x3a82 <RobotSensor_free+0x3c>
	{
		RobotSensor_free_fields(this);
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	9a 81       	ldd	r25, Y+2	; 0x02
    3a76:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <RobotSensor_free_fields>
		free(this);
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <_Z17fieldInitializer1EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer1EV()	{
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <_Z17fieldInitializer1EV+0x6>
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62

TVP ret_1 = newInt(1)
;
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    3a9e:	9a 83       	std	Y+2, r25	; 0x02
    3aa0:	89 83       	std	Y+1, r24	; 0x01

return ret_1;
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	cf 91       	pop	r28
    3aac:	df 91       	pop	r29
    3aae:	08 95       	ret

00003ab0 <_Z10getReadingEV>:


/* RobotSensor.vdmrt 12:8 */
 static  TVP _Z10getReadingEV(RobotSensorCLASS this)	{
    3ab0:	0f 93       	push	r16
    3ab2:	1f 93       	push	r17
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <_Z10getReadingEV+0xa>
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <_Z10getReadingEV+0xc>
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	9c 83       	std	Y+4, r25	; 0x04
    3ac2:	8b 83       	std	Y+3, r24	; 0x03
/* RobotSensor.vdmrt 13:23 */
TVP ret_2 = CALL_FUNC(RealPort, RealPort, GET_FIELD_PTR_GC(RobotSensor, RobotSensor, this, port), CLASS_RealPort__Z8getValueEV)
;
    3ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac8:	fc 01       	movw	r30, r24
    3aca:	36 96       	adiw	r30, 0x06	; 6
    3acc:	80 81       	ld	r24, Z
    3ace:	91 81       	ldd	r25, Z+1	; 0x01
    3ad0:	60 e0       	ldi	r22, 0x00	; 0
    3ad2:	70 e0       	ldi	r23, 0x00	; 0
    3ad4:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    3ad8:	fc 01       	movw	r30, r24
    3ada:	84 81       	ldd	r24, Z+4	; 0x04
    3adc:	95 81       	ldd	r25, Z+5	; 0x05
    3ade:	fc 01       	movw	r30, r24
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	38 96       	adiw	r30, 0x08	; 8
    3ae8:	80 81       	ld	r24, Z
    3aea:	91 81       	ldd	r25, Z+1	; 0x01
    3aec:	fc 01       	movw	r30, r24
    3aee:	3c 96       	adiw	r30, 0x0c	; 12
    3af0:	84 81       	ldd	r24, Z+4	; 0x04
    3af2:	95 81       	ldd	r25, Z+5	; 0x05
    3af4:	8c 01       	movw	r16, r24
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	9c 81       	ldd	r25, Y+4	; 0x04
    3afa:	fc 01       	movw	r30, r24
    3afc:	36 96       	adiw	r30, 0x06	; 6
    3afe:	80 81       	ld	r24, Z
    3b00:	91 81       	ldd	r25, Z+1	; 0x01
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	84 81       	ldd	r24, Z+4	; 0x04
    3b0e:	95 81       	ldd	r25, Z+5	; 0x05
    3b10:	fc 01       	movw	r30, r24
    3b12:	80 81       	ld	r24, Z
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	f8 01       	movw	r30, r16
    3b18:	09 95       	icall
    3b1a:	9a 83       	std	Y+2, r25	; 0x02
    3b1c:	89 83       	std	Y+1, r24	; 0x01
/* RobotSensor.vdmrt 13:16 */
return ret_2;
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <RobotSensor_const_init>:



 void RobotSensor_const_init()	{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62

numFields_1 = _Z17fieldInitializer1EV();
    3b3c:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_Z17fieldInitializer1EV>
    3b40:	90 93 0b 03 	sts	0x030B, r25
    3b44:	80 93 0a 03 	sts	0x030A, r24

return ;
}
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <RobotSensor_const_shutdown>:



 void RobotSensor_const_shutdown()	{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_1);
    3b56:	80 91 0a 03 	lds	r24, 0x030A
    3b5a:	90 91 0b 03 	lds	r25, 0x030B
    3b5e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <RobotSensor_static_init>:



 void RobotSensor_static_init()	{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	08 95       	ret

00003b76 <RobotSensor_static_shutdown>:



 void RobotSensor_static_shutdown()	{
    3b76:	df 93       	push	r29
    3b78:	cf 93       	push	r28
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3b7e:	cf 91       	pop	r28
    3b80:	df 91       	pop	r29
    3b82:	08 95       	ret

00003b84 <RobotSensor_Constructor>:
 *
 --------------------------------- */
 
 
RobotSensorCLASS RobotSensor_Constructor(RobotSensorCLASS this_ptr)
{
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	00 d0       	rcall	.+0      	; 0x3b8a <RobotSensor_Constructor+0x6>
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	9a 83       	std	Y+2, r25	; 0x02
    3b90:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	9a 81       	ldd	r25, Y+2	; 0x02
    3b96:	00 97       	sbiw	r24, 0x00	; 0
    3b98:	31 f4       	brne	.+12     	; 0x3ba6 <RobotSensor_Constructor+0x22>
	{
		this_ptr = (RobotSensorCLASS) malloc(sizeof(struct RobotSensor));
    3b9a:	8a e0       	ldi	r24, 0x0A	; 10
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    3ba2:	9a 83       	std	Y+2, r25	; 0x02
    3ba4:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	91 f0       	breq	.+36     	; 0x3bd2 <RobotSensor_Constructor+0x4e>
	{
	
			
		/*  RobotSensor init  */
		this_ptr->_RobotSensor_id = CLASS_ID_RobotSensor_ID;
    3bae:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bb2:	13 82       	std	Z+3, r1	; 0x03
    3bb4:	12 82       	std	Z+2, r1	; 0x02
		this_ptr->_RobotSensor_refs = 0;
    3bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3bba:	15 82       	std	Z+5, r1	; 0x05
    3bbc:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_RobotSensor_pVTable=VTableArrayForRobotSensor;
    3bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bc2:	86 e6       	ldi	r24, 0x66	; 102
    3bc4:	92 e0       	ldi	r25, 0x02	; 2
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	80 83       	st	Z, r24

							this_ptr->m_RobotSensor_port= NULL ;
    3bca:	e9 81       	ldd	r30, Y+1	; 0x01
    3bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bce:	17 82       	std	Z+7, r1	; 0x07
    3bd0:	16 82       	std	Z+6, r1	; 0x06
			}

	return this_ptr;
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <new+0x6>
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <new+0x8>
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <new+0xa>
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
	RobotSensorCLASS ptr=RobotSensor_Constructor(NULL);
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <RobotSensor_Constructor>
    3bf6:	9a 83       	std	Y+2, r25	; 0x02
    3bf8:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RobotSensor_id, &ptr->_RobotSensor_refs, (freeVdmClassFunction)&RobotSensor_free, ptr)});
    3bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    3bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bfe:	62 81       	ldd	r22, Z+2	; 0x02
    3c00:	73 81       	ldd	r23, Z+3	; 0x03
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	9a 81       	ldd	r25, Y+2	; 0x02
    3c06:	9c 01       	movw	r18, r24
    3c08:	2c 5f       	subi	r18, 0xFC	; 252
    3c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0c:	43 e2       	ldi	r20, 0x23	; 35
    3c0e:	5d e1       	ldi	r21, 0x1D	; 29
    3c10:	e9 81       	ldd	r30, Y+1	; 0x01
    3c12:	fa 81       	ldd	r31, Y+2	; 0x02
    3c14:	cb 01       	movw	r24, r22
    3c16:	b9 01       	movw	r22, r18
    3c18:	9f 01       	movw	r18, r30
    3c1a:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    3c1e:	1b 82       	std	Y+3, r1	; 0x03
    3c20:	1c 82       	std	Y+4, r1	; 0x04
    3c22:	1d 82       	std	Y+5, r1	; 0x05
    3c24:	1e 82       	std	Y+6, r1	; 0x06
    3c26:	9c 83       	std	Y+4, r25	; 0x04
    3c28:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	RobotSensorCLASS ptr=RobotSensor_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c2e:	4d 81       	ldd	r20, Y+5	; 0x05
    3c30:	5e 81       	ldd	r21, Y+6	; 0x06
    3c32:	8b e0       	ldi	r24, 0x0B	; 11
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	ba 01       	movw	r22, r20
    3c38:	a9 01       	movw	r20, r18
    3c3a:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RobotSensor_id, &ptr->_RobotSensor_refs, (freeVdmClassFunction)&RobotSensor_free, ptr)});
}
    3c3e:	26 96       	adiw	r28, 0x06	; 6
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	08 95       	ret

00003c50 <_Z11RobotSensorE8CRealPort>:
 *
 --------------------------------- */ 
 

    /* RobotSensor.vdmrt 9:8 */
 TVP _Z11RobotSensorE8CRealPort(RobotSensorCLASS this, TVP p)	{
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	28 97       	sbiw	r28, 0x08	; 8
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	9e 83       	std	Y+6, r25	; 0x06
    3c6a:	8d 83       	std	Y+5, r24	; 0x05
    3c6c:	78 87       	std	Y+8, r23	; 0x08
    3c6e:	6f 83       	std	Y+7, r22	; 0x07

TVP __buf = NULL
;
    3c70:	1c 82       	std	Y+4, r1	; 0x04
    3c72:	1b 82       	std	Y+3, r1	; 0x03

if ( this == NULL )
    3c74:	8d 81       	ldd	r24, Y+5	; 0x05
    3c76:	9e 81       	ldd	r25, Y+6	; 0x06
    3c78:	00 97       	sbiw	r24, 0x00	; 0
    3c7a:	69 f4       	brne	.+26     	; 0x3c96 <_Z11RobotSensorE8CRealPort+0x46>
	
	{

__buf = new();
    3c7c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <new>
    3c80:	9c 83       	std	Y+4, r25	; 0x04
    3c82:	8b 83       	std	Y+3, r24	; 0x03

this = TO_CLASS_PTR(__buf, RobotSensor);
    3c84:	eb 81       	ldd	r30, Y+3	; 0x03
    3c86:	fc 81       	ldd	r31, Y+4	; 0x04
    3c88:	84 81       	ldd	r24, Z+4	; 0x04
    3c8a:	95 81       	ldd	r25, Z+5	; 0x05
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	9e 83       	std	Y+6, r25	; 0x06
    3c94:	8d 83       	std	Y+5, r24	; 0x05
}
;
/* RobotSensor.vdmrt 10:27 */
TVP field_tmp_1 = vdmCloneGC(p, NULL)
;
    3c96:	8f 81       	ldd	r24, Y+7	; 0x07
    3c98:	98 85       	ldd	r25, Y+8	; 0x08
    3c9a:	60 e0       	ldi	r22, 0x00	; 0
    3c9c:	70 e0       	ldi	r23, 0x00	; 0
    3c9e:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    3ca2:	9a 83       	std	Y+2, r25	; 0x02
    3ca4:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(RobotSensor, RobotSensor, this, port, field_tmp_1);
    3ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    3caa:	fc 01       	movw	r30, r24
    3cac:	36 96       	adiw	r30, 0x06	; 6
    3cae:	80 81       	ld	r24, Z
    3cb0:	91 81       	ldd	r25, Z+1	; 0x01
    3cb2:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    3cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cba:	8c 01       	movw	r16, r24
    3cbc:	0a 5f       	subi	r16, 0xFA	; 250
    3cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    3cc8:	f8 01       	movw	r30, r16
    3cca:	91 83       	std	Z+1, r25	; 0x01
    3ccc:	80 83       	st	Z, r24

vdmFree(field_tmp_1);
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd2:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return __buf;
    3cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3cda:	28 96       	adiw	r28, 0x08	; 8
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	cd bf       	out	0x3d, r28	; 61
    3ce6:	cf 91       	pop	r28
    3ce8:	df 91       	pop	r29
    3cea:	1f 91       	pop	r17
    3cec:	0f 91       	pop	r16
    3cee:	08 95       	ret

00003cf0 <_Z11RobotSensorEV>:


    /* RobotSensor.vdmrt 1:7 */
 TVP _Z11RobotSensorEV(RobotSensorCLASS this)	{
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <_Z11RobotSensorEV+0x6>
    3cf6:	00 d0       	rcall	.+0      	; 0x3cf8 <_Z11RobotSensorEV+0x8>
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	9c 83       	std	Y+4, r25	; 0x04
    3cfe:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    3d00:	1a 82       	std	Y+2, r1	; 0x02
    3d02:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3d04:	8b 81       	ldd	r24, Y+3	; 0x03
    3d06:	9c 81       	ldd	r25, Y+4	; 0x04
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	69 f4       	brne	.+26     	; 0x3d26 <_Z11RobotSensorEV+0x36>
	
	{

__buf = new();
    3d0c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <new>
    3d10:	9a 83       	std	Y+2, r25	; 0x02
    3d12:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RobotSensor);
    3d14:	e9 81       	ldd	r30, Y+1	; 0x01
    3d16:	fa 81       	ldd	r31, Y+2	; 0x02
    3d18:	84 81       	ldd	r24, Z+4	; 0x04
    3d1a:	95 81       	ldd	r25, Z+5	; 0x05
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	80 81       	ld	r24, Z
    3d20:	91 81       	ldd	r25, Z+1	; 0x01
    3d22:	9c 83       	std	Y+4, r25	; 0x04
    3d24:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d2a:	0f 90       	pop	r0
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	08 95       	ret

00003d38 <RobotServo_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void RobotServo_free_fields(struct RobotServo *this)
{
    3d38:	df 93       	push	r29
    3d3a:	cf 93       	push	r28
    3d3c:	00 d0       	rcall	.+0      	; 0x3d3e <RobotServo_free_fields+0x6>
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	9a 83       	std	Y+2, r25	; 0x02
    3d44:	89 83       	std	Y+1, r24	; 0x01
			vdmFree(this->m_RobotServo_port);
    3d46:	e9 81       	ldd	r30, Y+1	; 0x01
    3d48:	fa 81       	ldd	r31, Y+2	; 0x02
    3d4a:	86 81       	ldd	r24, Z+6	; 0x06
    3d4c:	97 81       	ldd	r25, Z+7	; 0x07
    3d4e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	cf 91       	pop	r28
    3d58:	df 91       	pop	r29
    3d5a:	08 95       	ret

00003d5c <RobotServo_free>:

static void RobotServo_free(struct RobotServo *this)
{
    3d5c:	df 93       	push	r29
    3d5e:	cf 93       	push	r28
    3d60:	00 d0       	rcall	.+0      	; 0x3d62 <RobotServo_free+0x6>
    3d62:	cd b7       	in	r28, 0x3d	; 61
    3d64:	de b7       	in	r29, 0x3e	; 62
    3d66:	9a 83       	std	Y+2, r25	; 0x02
    3d68:	89 83       	std	Y+1, r24	; 0x01
	--this->_RobotServo_refs;
    3d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d6e:	84 81       	ldd	r24, Z+4	; 0x04
    3d70:	95 81       	ldd	r25, Z+5	; 0x05
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	e9 81       	ldd	r30, Y+1	; 0x01
    3d76:	fa 81       	ldd	r31, Y+2	; 0x02
    3d78:	95 83       	std	Z+5, r25	; 0x05
    3d7a:	84 83       	std	Z+4, r24	; 0x04
	if (this->_RobotServo_refs < 1)
    3d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d80:	84 81       	ldd	r24, Z+4	; 0x04
    3d82:	95 81       	ldd	r25, Z+5	; 0x05
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	41 f4       	brne	.+16     	; 0x3d98 <RobotServo_free+0x3c>
	{
		RobotServo_free_fields(this);
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8c:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <RobotServo_free_fields>
		free(this);
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	9a 81       	ldd	r25, Y+2	; 0x02
    3d94:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <_Z18fieldInitializer21EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer21EV()	{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	00 d0       	rcall	.+0      	; 0x3da8 <_Z18fieldInitializer21EV+0x6>
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62

TVP ret_26 = newInt(1)
;
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    3db4:	9a 83       	std	Y+2, r25	; 0x02
    3db6:	89 83       	std	Y+1, r24	; 0x01

return ret_26;
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	cf 91       	pop	r28
    3dc2:	df 91       	pop	r29
    3dc4:	08 95       	ret

00003dc6 <_Z8setServoER>:


/* RobotServo.vdmrt 12:8 */
 static  void _Z8setServoER(RobotServoCLASS this, TVP value)	{
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <_Z8setServoER+0xa>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <_Z8setServoER+0xc>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    3dda:	7c 83       	std	Y+4, r23	; 0x04
    3ddc:	6b 83       	std	Y+3, r22	; 0x03
/* RobotServo.vdmrt 13:19 */
CALL_FUNC(RealPort, RealPort, GET_FIELD_PTR_GC(RobotServo, RobotServo, this, port), CLASS_RealPort__Z8setValueER, value);
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	fc 01       	movw	r30, r24
    3de4:	36 96       	adiw	r30, 0x06	; 6
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	70 e0       	ldi	r23, 0x00	; 0
    3dee:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    3df2:	fc 01       	movw	r30, r24
    3df4:	84 81       	ldd	r24, Z+4	; 0x04
    3df6:	95 81       	ldd	r25, Z+5	; 0x05
    3df8:	fc 01       	movw	r30, r24
    3dfa:	80 81       	ld	r24, Z
    3dfc:	91 81       	ldd	r25, Z+1	; 0x01
    3dfe:	fc 01       	movw	r30, r24
    3e00:	38 96       	adiw	r30, 0x08	; 8
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	fc 01       	movw	r30, r24
    3e08:	36 96       	adiw	r30, 0x06	; 6
    3e0a:	84 81       	ldd	r24, Z+4	; 0x04
    3e0c:	95 81       	ldd	r25, Z+5	; 0x05
    3e0e:	8c 01       	movw	r16, r24
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	9a 81       	ldd	r25, Y+2	; 0x02
    3e14:	fc 01       	movw	r30, r24
    3e16:	36 96       	adiw	r30, 0x06	; 6
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    3e24:	fc 01       	movw	r30, r24
    3e26:	84 81       	ldd	r24, Z+4	; 0x04
    3e28:	95 81       	ldd	r25, Z+5	; 0x05
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	80 81       	ld	r24, Z
    3e2e:	91 81       	ldd	r25, Z+1	; 0x01
    3e30:	2b 81       	ldd	r18, Y+3	; 0x03
    3e32:	3c 81       	ldd	r19, Y+4	; 0x04
    3e34:	b9 01       	movw	r22, r18
    3e36:	f8 01       	movw	r30, r16
    3e38:	09 95       	icall
}
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	cf 91       	pop	r28
    3e44:	df 91       	pop	r29
    3e46:	1f 91       	pop	r17
    3e48:	0f 91       	pop	r16
    3e4a:	08 95       	ret

00003e4c <RobotServo_const_init>:



 void RobotServo_const_init()	{
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	cd b7       	in	r28, 0x3d	; 61
    3e52:	de b7       	in	r29, 0x3e	; 62

numFields_7 = _Z18fieldInitializer21EV();
    3e54:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z18fieldInitializer21EV>
    3e58:	90 93 0d 03 	sts	0x030D, r25
    3e5c:	80 93 0c 03 	sts	0x030C, r24

return ;
}
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	08 95       	ret

00003e66 <RobotServo_const_shutdown>:



 void RobotServo_const_shutdown()	{
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_7);
    3e6e:	80 91 0c 03 	lds	r24, 0x030C
    3e72:	90 91 0d 03 	lds	r25, 0x030D
    3e76:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <RobotServo_static_init>:



 void RobotServo_static_init()	{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <RobotServo_static_shutdown>:



 void RobotServo_static_shutdown()	{
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3e96:	cf 91       	pop	r28
    3e98:	df 91       	pop	r29
    3e9a:	08 95       	ret

00003e9c <RobotServo_Constructor>:
 *
 --------------------------------- */
 
 
RobotServoCLASS RobotServo_Constructor(RobotServoCLASS this_ptr)
{
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <RobotServo_Constructor+0x6>
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	9a 83       	std	Y+2, r25	; 0x02
    3ea8:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	9a 81       	ldd	r25, Y+2	; 0x02
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	31 f4       	brne	.+12     	; 0x3ebe <RobotServo_Constructor+0x22>
	{
		this_ptr = (RobotServoCLASS) malloc(sizeof(struct RobotServo));
    3eb2:	8a e0       	ldi	r24, 0x0A	; 10
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    3eba:	9a 83       	std	Y+2, r25	; 0x02
    3ebc:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	a1 f0       	breq	.+40     	; 0x3eee <RobotServo_Constructor+0x52>
	{
	
			
		/*  RobotServo init  */
		this_ptr->_RobotServo_id = CLASS_ID_RobotServo_ID;
    3ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eca:	8a e0       	ldi	r24, 0x0A	; 10
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	93 83       	std	Z+3, r25	; 0x03
    3ed0:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_RobotServo_refs = 0;
    3ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed6:	15 82       	std	Z+5, r1	; 0x05
    3ed8:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_RobotServo_pVTable=VTableArrayForRobotServo;
    3eda:	e9 81       	ldd	r30, Y+1	; 0x01
    3edc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ede:	88 e7       	ldi	r24, 0x78	; 120
    3ee0:	92 e0       	ldi	r25, 0x02	; 2
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	80 83       	st	Z, r24

							this_ptr->m_RobotServo_port= NULL ;
    3ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eea:	17 82       	std	Z+7, r1	; 0x07
    3eec:	16 82       	std	Z+6, r1	; 0x06
			}

	return this_ptr;
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	00 d0       	rcall	.+0      	; 0x3f02 <new+0x6>
    3f02:	00 d0       	rcall	.+0      	; 0x3f04 <new+0x8>
    3f04:	00 d0       	rcall	.+0      	; 0x3f06 <new+0xa>
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
	RobotServoCLASS ptr=RobotServo_Constructor(NULL);
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <RobotServo_Constructor>
    3f12:	9a 83       	std	Y+2, r25	; 0x02
    3f14:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RobotServo_id, &ptr->_RobotServo_refs, (freeVdmClassFunction)&RobotServo_free, ptr)});
    3f16:	e9 81       	ldd	r30, Y+1	; 0x01
    3f18:	fa 81       	ldd	r31, Y+2	; 0x02
    3f1a:	62 81       	ldd	r22, Z+2	; 0x02
    3f1c:	73 81       	ldd	r23, Z+3	; 0x03
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	9c 01       	movw	r18, r24
    3f24:	2c 5f       	subi	r18, 0xFC	; 252
    3f26:	3f 4f       	sbci	r19, 0xFF	; 255
    3f28:	4e ea       	ldi	r20, 0xAE	; 174
    3f2a:	5e e1       	ldi	r21, 0x1E	; 30
    3f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f30:	cb 01       	movw	r24, r22
    3f32:	b9 01       	movw	r22, r18
    3f34:	9f 01       	movw	r18, r30
    3f36:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    3f3a:	1b 82       	std	Y+3, r1	; 0x03
    3f3c:	1c 82       	std	Y+4, r1	; 0x04
    3f3e:	1d 82       	std	Y+5, r1	; 0x05
    3f40:	1e 82       	std	Y+6, r1	; 0x06
    3f42:	9c 83       	std	Y+4, r25	; 0x04
    3f44:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	RobotServoCLASS ptr=RobotServo_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3f46:	2b 81       	ldd	r18, Y+3	; 0x03
    3f48:	3c 81       	ldd	r19, Y+4	; 0x04
    3f4a:	4d 81       	ldd	r20, Y+5	; 0x05
    3f4c:	5e 81       	ldd	r21, Y+6	; 0x06
    3f4e:	8b e0       	ldi	r24, 0x0B	; 11
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	ba 01       	movw	r22, r20
    3f54:	a9 01       	movw	r20, r18
    3f56:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RobotServo_id, &ptr->_RobotServo_refs, (freeVdmClassFunction)&RobotServo_free, ptr)});
}
    3f5a:	26 96       	adiw	r28, 0x06	; 6
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	08 95       	ret

00003f6c <_Z10RobotServoE8CRealPort>:
 *
 --------------------------------- */ 
 

    /* RobotServo.vdmrt 9:8 */
 TVP _Z10RobotServoE8CRealPort(RobotServoCLASS this, TVP p)	{
    3f6c:	0f 93       	push	r16
    3f6e:	1f 93       	push	r17
    3f70:	df 93       	push	r29
    3f72:	cf 93       	push	r28
    3f74:	cd b7       	in	r28, 0x3d	; 61
    3f76:	de b7       	in	r29, 0x3e	; 62
    3f78:	28 97       	sbiw	r28, 0x08	; 8
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	f8 94       	cli
    3f7e:	de bf       	out	0x3e, r29	; 62
    3f80:	0f be       	out	0x3f, r0	; 63
    3f82:	cd bf       	out	0x3d, r28	; 61
    3f84:	9e 83       	std	Y+6, r25	; 0x06
    3f86:	8d 83       	std	Y+5, r24	; 0x05
    3f88:	78 87       	std	Y+8, r23	; 0x08
    3f8a:	6f 83       	std	Y+7, r22	; 0x07

TVP __buf = NULL
;
    3f8c:	1c 82       	std	Y+4, r1	; 0x04
    3f8e:	1b 82       	std	Y+3, r1	; 0x03

if ( this == NULL )
    3f90:	8d 81       	ldd	r24, Y+5	; 0x05
    3f92:	9e 81       	ldd	r25, Y+6	; 0x06
    3f94:	00 97       	sbiw	r24, 0x00	; 0
    3f96:	69 f4       	brne	.+26     	; 0x3fb2 <_Z10RobotServoE8CRealPort+0x46>
	
	{

__buf = new();
    3f98:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <new>
    3f9c:	9c 83       	std	Y+4, r25	; 0x04
    3f9e:	8b 83       	std	Y+3, r24	; 0x03

this = TO_CLASS_PTR(__buf, RobotServo);
    3fa0:	eb 81       	ldd	r30, Y+3	; 0x03
    3fa2:	fc 81       	ldd	r31, Y+4	; 0x04
    3fa4:	84 81       	ldd	r24, Z+4	; 0x04
    3fa6:	95 81       	ldd	r25, Z+5	; 0x05
    3fa8:	fc 01       	movw	r30, r24
    3faa:	80 81       	ld	r24, Z
    3fac:	91 81       	ldd	r25, Z+1	; 0x01
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
}
;
/* RobotServo.vdmrt 10:26 */
TVP field_tmp_10 = vdmCloneGC(p, NULL)
;
    3fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fb4:	98 85       	ldd	r25, Y+8	; 0x08
    3fb6:	60 e0       	ldi	r22, 0x00	; 0
    3fb8:	70 e0       	ldi	r23, 0x00	; 0
    3fba:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    3fbe:	9a 83       	std	Y+2, r25	; 0x02
    3fc0:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(RobotServo, RobotServo, this, port, field_tmp_10);
    3fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	36 96       	adiw	r30, 0x06	; 6
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd6:	8c 01       	movw	r16, r24
    3fd8:	0a 5f       	subi	r16, 0xFA	; 250
    3fda:	1f 4f       	sbci	r17, 0xFF	; 255
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    3fe4:	f8 01       	movw	r30, r16
    3fe6:	91 83       	std	Z+1, r25	; 0x01
    3fe8:	80 83       	st	Z, r24

vdmFree(field_tmp_10);
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	9a 81       	ldd	r25, Y+2	; 0x02
    3fee:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return __buf;
    3ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3ff6:	28 96       	adiw	r28, 0x08	; 8
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	cd bf       	out	0x3d, r28	; 61
    4002:	cf 91       	pop	r28
    4004:	df 91       	pop	r29
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	08 95       	ret

0000400c <_Z10RobotServoEV>:


    /* RobotServo.vdmrt 1:7 */
 TVP _Z10RobotServoEV(RobotServoCLASS this)	{
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	00 d0       	rcall	.+0      	; 0x4012 <_Z10RobotServoEV+0x6>
    4012:	00 d0       	rcall	.+0      	; 0x4014 <_Z10RobotServoEV+0x8>
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	9c 83       	std	Y+4, r25	; 0x04
    401a:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    401c:	1a 82       	std	Y+2, r1	; 0x02
    401e:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    4020:	8b 81       	ldd	r24, Y+3	; 0x03
    4022:	9c 81       	ldd	r25, Y+4	; 0x04
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	69 f4       	brne	.+26     	; 0x4042 <_Z10RobotServoEV+0x36>
	
	{

__buf = new();
    4028:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <new>
    402c:	9a 83       	std	Y+2, r25	; 0x02
    402e:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RobotServo);
    4030:	e9 81       	ldd	r30, Y+1	; 0x01
    4032:	fa 81       	ldd	r31, Y+2	; 0x02
    4034:	84 81       	ldd	r24, Z+4	; 0x04
    4036:	95 81       	ldd	r25, Z+5	; 0x05
    4038:	fc 01       	movw	r30, r24
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
    403e:	9c 83       	std	Y+4, r25	; 0x04
    4040:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    4042:	89 81       	ldd	r24, Y+1	; 0x01
    4044:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	0f 90       	pop	r0
    404c:	0f 90       	pop	r0
    404e:	cf 91       	pop	r28
    4050:	df 91       	pop	r29
    4052:	08 95       	ret

00004054 <StringPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void StringPort_free_fields(struct StringPort *this)
{
    4054:	df 93       	push	r29
    4056:	cf 93       	push	r28
    4058:	00 d0       	rcall	.+0      	; 0x405a <StringPort_free_fields+0x6>
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	9a 83       	std	Y+2, r25	; 0x02
    4060:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_StringPort_value);
    4062:	e9 81       	ldd	r30, Y+1	; 0x01
    4064:	fa 81       	ldd	r31, Y+2	; 0x02
    4066:	86 85       	ldd	r24, Z+14	; 0x0e
    4068:	97 85       	ldd	r25, Z+15	; 0x0f
    406a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}
    406e:	0f 90       	pop	r0
    4070:	0f 90       	pop	r0
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	08 95       	ret

00004078 <StringPort_free>:

static void StringPort_free(struct StringPort *this)
{
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	00 d0       	rcall	.+0      	; 0x407e <StringPort_free+0x6>
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
	--this->_StringPort_refs;
    4086:	e9 81       	ldd	r30, Y+1	; 0x01
    4088:	fa 81       	ldd	r31, Y+2	; 0x02
    408a:	84 85       	ldd	r24, Z+12	; 0x0c
    408c:	95 85       	ldd	r25, Z+13	; 0x0d
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	e9 81       	ldd	r30, Y+1	; 0x01
    4092:	fa 81       	ldd	r31, Y+2	; 0x02
    4094:	95 87       	std	Z+13, r25	; 0x0d
    4096:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_StringPort_refs < 1)
    4098:	e9 81       	ldd	r30, Y+1	; 0x01
    409a:	fa 81       	ldd	r31, Y+2	; 0x02
    409c:	84 85       	ldd	r24, Z+12	; 0x0c
    409e:	95 85       	ldd	r25, Z+13	; 0x0d
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	41 f4       	brne	.+16     	; 0x40b4 <StringPort_free+0x3c>
	{
		StringPort_free_fields(this);
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	9a 81       	ldd	r25, Y+2	; 0x02
    40a8:	0e 94 2a 20 	call	0x4054	; 0x4054 <StringPort_free_fields>
		free(this);
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	9a 81       	ldd	r25, Y+2	; 0x02
    40b0:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	08 95       	ret

000040be <_Z17fieldInitializer6EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer6EV(StringPortCLASS this)	{
    40be:	df 93       	push	r29
    40c0:	cf 93       	push	r28
    40c2:	00 d0       	rcall	.+0      	; 0x40c4 <_Z17fieldInitializer6EV+0x6>
    40c4:	00 d0       	rcall	.+0      	; 0x40c6 <_Z17fieldInitializer6EV+0x8>
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	9c 83       	std	Y+4, r25	; 0x04
    40cc:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 88:20 */
TVP ret_10 = newSeqVar(0, NULL)
;
    40ce:	00 d0       	rcall	.+0      	; 0x40d0 <_Z17fieldInitializer6EV+0x12>
    40d0:	00 d0       	rcall	.+0      	; 0x40d2 <_Z17fieldInitializer6EV+0x14>
    40d2:	ed b7       	in	r30, 0x3d	; 61
    40d4:	fe b7       	in	r31, 0x3e	; 62
    40d6:	31 96       	adiw	r30, 0x01	; 1
    40d8:	11 82       	std	Z+1, r1	; 0x01
    40da:	10 82       	st	Z, r1
    40dc:	13 82       	std	Z+3, r1	; 0x03
    40de:	12 82       	std	Z+2, r1	; 0x02
    40e0:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <newSeqVar>
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	9a 83       	std	Y+2, r25	; 0x02
    40ee:	89 83       	std	Y+1, r24	; 0x01

return ret_10;
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
    40f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	0f 90       	pop	r0
    40fc:	cf 91       	pop	r28
    40fe:	df 91       	pop	r29
    4100:	08 95       	ret

00004102 <_Z8setValueE1QC>:


/* Fmi.vdmrt 94:12 */
 static  void _Z8setValueE1QC(StringPortCLASS this, TVP v)	{
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	df 93       	push	r29
    4108:	cf 93       	push	r28
    410a:	00 d0       	rcall	.+0      	; 0x410c <_Z8setValueE1QC+0xa>
    410c:	00 d0       	rcall	.+0      	; 0x410e <_Z8setValueE1QC+0xc>
    410e:	00 d0       	rcall	.+0      	; 0x4110 <_Z8setValueE1QC+0xe>
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
    4114:	9c 83       	std	Y+4, r25	; 0x04
    4116:	8b 83       	std	Y+3, r24	; 0x03
    4118:	7e 83       	std	Y+6, r23	; 0x06
    411a:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 95:27 */
TVP field_tmp_5 = vdmCloneGC(v, NULL)
;
    411c:	8d 81       	ldd	r24, Y+5	; 0x05
    411e:	9e 81       	ldd	r25, Y+6	; 0x06
    4120:	60 e0       	ldi	r22, 0x00	; 0
    4122:	70 e0       	ldi	r23, 0x00	; 0
    4124:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    4128:	9a 83       	std	Y+2, r25	; 0x02
    412a:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(StringPort, StringPort, this, value, field_tmp_5);
    412c:	8b 81       	ldd	r24, Y+3	; 0x03
    412e:	9c 81       	ldd	r25, Y+4	; 0x04
    4130:	fc 01       	movw	r30, r24
    4132:	3e 96       	adiw	r30, 0x0e	; 14
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
    413c:	8b 81       	ldd	r24, Y+3	; 0x03
    413e:	9c 81       	ldd	r25, Y+4	; 0x04
    4140:	8c 01       	movw	r16, r24
    4142:	02 5f       	subi	r16, 0xF2	; 242
    4144:	1f 4f       	sbci	r17, 0xFF	; 255
    4146:	89 81       	ldd	r24, Y+1	; 0x01
    4148:	9a 81       	ldd	r25, Y+2	; 0x02
    414a:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    414e:	f8 01       	movw	r30, r16
    4150:	91 83       	std	Z+1, r25	; 0x01
    4152:	80 83       	st	Z, r24

vdmFree(field_tmp_5);
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	9a 81       	ldd	r25, Y+2	; 0x02
    4158:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
}
    415c:	26 96       	adiw	r28, 0x06	; 6
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	cf 91       	pop	r28
    416a:	df 91       	pop	r29
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	08 95       	ret

00004172 <_Z8getValueEV>:


/* Fmi.vdmrt 97:12 */
 static  TVP _Z8getValueEV(StringPortCLASS this)	{
    4172:	df 93       	push	r29
    4174:	cf 93       	push	r28
    4176:	00 d0       	rcall	.+0      	; 0x4178 <_Z8getValueEV+0x6>
    4178:	00 d0       	rcall	.+0      	; 0x417a <_Z8getValueEV+0x8>
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62
    417e:	9c 83       	std	Y+4, r25	; 0x04
    4180:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 98:26 */
TVP ret_11 = vdmCloneGC(GET_FIELD_PTR_GC(StringPort, StringPort, this, value), NULL)
;
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	fc 01       	movw	r30, r24
    4188:	3e 96       	adiw	r30, 0x0e	; 14
    418a:	80 81       	ld	r24, Z
    418c:	91 81       	ldd	r25, Z+1	; 0x01
    418e:	60 e0       	ldi	r22, 0x00	; 0
    4190:	70 e0       	ldi	r23, 0x00	; 0
    4192:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    419e:	9a 83       	std	Y+2, r25	; 0x02
    41a0:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 98:19 */
return ret_11;
    41a2:	89 81       	ldd	r24, Y+1	; 0x01
    41a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    41a6:	0f 90       	pop	r0
    41a8:	0f 90       	pop	r0
    41aa:	0f 90       	pop	r0
    41ac:	0f 90       	pop	r0
    41ae:	cf 91       	pop	r28
    41b0:	df 91       	pop	r29
    41b2:	08 95       	ret

000041b4 <StringPort_const_init>:



 void StringPort_const_init()	{
    41b4:	df 93       	push	r29
    41b6:	cf 93       	push	r28
    41b8:	cd b7       	in	r28, 0x3d	; 61
    41ba:	de b7       	in	r29, 0x3e	; 62

return ;
}
    41bc:	cf 91       	pop	r28
    41be:	df 91       	pop	r29
    41c0:	08 95       	ret

000041c2 <StringPort_const_shutdown>:



 void StringPort_const_shutdown()	{
    41c2:	df 93       	push	r29
    41c4:	cf 93       	push	r28
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62

return ;
}
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <StringPort_static_init>:



 void StringPort_static_init()	{
    41d0:	df 93       	push	r29
    41d2:	cf 93       	push	r28
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62

return ;
}
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	08 95       	ret

000041de <StringPort_static_shutdown>:



 void StringPort_static_shutdown()	{
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62

return ;
}
    41e6:	cf 91       	pop	r28
    41e8:	df 91       	pop	r29
    41ea:	08 95       	ret

000041ec <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
    41ec:	df 93       	push	r29
    41ee:	cf 93       	push	r28
    41f0:	00 d0       	rcall	.+0      	; 0x41f2 <Port__Z8getValueEV+0x6>
    41f2:	00 d0       	rcall	.+0      	; 0x41f4 <Port__Z8getValueEV+0x8>
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
    41f8:	9c 83       	std	Y+4, r25	; 0x04
    41fa:	8b 83       	std	Y+3, r24	; 0x03

StringPortCLASS this = CLASS_DOWNCAST(Port, StringPort, base)
;
    41fc:	8b 81       	ldd	r24, Y+3	; 0x03
    41fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4200:	9a 83       	std	Y+2, r25	; 0x02
    4202:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	9a 81       	ldd	r25, Y+2	; 0x02
    4208:	0e 94 b9 20 	call	0x4172	; 0x4172 <_Z8getValueEV>
}
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	0f 90       	pop	r0
    4214:	cf 91       	pop	r28
    4216:	df 91       	pop	r29
    4218:	08 95       	ret

0000421a <StringPort_Constructor>:
 *
 --------------------------------- */
 
 
StringPortCLASS StringPort_Constructor(StringPortCLASS this_ptr)
{
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	00 d0       	rcall	.+0      	; 0x4220 <StringPort_Constructor+0x6>
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
    4224:	9a 83       	std	Y+2, r25	; 0x02
    4226:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	9a 81       	ldd	r25, Y+2	; 0x02
    422c:	00 97       	sbiw	r24, 0x00	; 0
    422e:	31 f4       	brne	.+12     	; 0x423c <StringPort_Constructor+0x22>
	{
		this_ptr = (StringPortCLASS) malloc(sizeof(struct StringPort));
    4230:	82 e1       	ldi	r24, 0x12	; 18
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	00 97       	sbiw	r24, 0x00	; 0
    4242:	c9 f1       	breq	.+114    	; 0x42b6 <StringPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,StringPort,Port));
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	9a 81       	ldd	r25, Y+2	; 0x02
    4248:	0e 94 c4 1a 	call	0x3588	; 0x3588 <Port_Constructor>

					if(! g_VTableArrayForStringPort_Override_Port[0].pFunc)
    424c:	80 91 12 03 	lds	r24, 0x0312
    4250:	90 91 13 03 	lds	r25, 0x0313
    4254:	00 97       	sbiw	r24, 0x00	; 0
    4256:	89 f4       	brne	.+34     	; 0x427a <StringPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForStringPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    4258:	e9 81       	ldd	r30, Y+1	; 0x01
    425a:	fa 81       	ldd	r31, Y+2	; 0x02
    425c:	20 81       	ld	r18, Z
    425e:	31 81       	ldd	r19, Z+1	; 0x01
    4260:	8e e0       	ldi	r24, 0x0E	; 14
    4262:	93 e0       	ldi	r25, 0x03	; 3
    4264:	b9 01       	movw	r22, r18
    4266:	42 e1       	ldi	r20, 0x12	; 18
    4268:	50 e0       	ldi	r21, 0x00	; 0
    426a:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForStringPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    426e:	86 ef       	ldi	r24, 0xF6	; 246
    4270:	90 e2       	ldi	r25, 0x20	; 32
    4272:	90 93 19 03 	sts	0x0319, r25
    4276:	80 93 18 03 	sts	0x0318, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForStringPort_Override_Port;
    427a:	e9 81       	ldd	r30, Y+1	; 0x01
    427c:	fa 81       	ldd	r31, Y+2	; 0x02
    427e:	8e e0       	ldi	r24, 0x0E	; 14
    4280:	93 e0       	ldi	r25, 0x03	; 3
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	80 83       	st	Z, r24
				
		
		/*  StringPort init  */
		this_ptr->_StringPort_id = CLASS_ID_StringPort_ID;
    4286:	e9 81       	ldd	r30, Y+1	; 0x01
    4288:	fa 81       	ldd	r31, Y+2	; 0x02
    428a:	85 e0       	ldi	r24, 0x05	; 5
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	93 87       	std	Z+11, r25	; 0x0b
    4290:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_StringPort_refs = 0;
    4292:	e9 81       	ldd	r30, Y+1	; 0x01
    4294:	fa 81       	ldd	r31, Y+2	; 0x02
    4296:	15 86       	std	Z+13, r1	; 0x0d
    4298:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_StringPort_pVTable=VTableArrayForStringPort;
    429a:	e9 81       	ldd	r30, Y+1	; 0x01
    429c:	fa 81       	ldd	r31, Y+2	; 0x02
    429e:	8a e8       	ldi	r24, 0x8A	; 138
    42a0:	92 e0       	ldi	r25, 0x02	; 2
    42a2:	91 87       	std	Z+9, r25	; 0x09
    42a4:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_StringPort_value= _Z17fieldInitializer6EV(this_ptr);
    42a6:	89 81       	ldd	r24, Y+1	; 0x01
    42a8:	9a 81       	ldd	r25, Y+2	; 0x02
    42aa:	0e 94 5f 20 	call	0x40be	; 0x40be <_Z17fieldInitializer6EV>
    42ae:	e9 81       	ldd	r30, Y+1	; 0x01
    42b0:	fa 81       	ldd	r31, Y+2	; 0x02
    42b2:	97 87       	std	Z+15, r25	; 0x0f
    42b4:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    42b6:	89 81       	ldd	r24, Y+1	; 0x01
    42b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    42ba:	0f 90       	pop	r0
    42bc:	0f 90       	pop	r0
    42be:	cf 91       	pop	r28
    42c0:	df 91       	pop	r29
    42c2:	08 95       	ret

000042c4 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    42c4:	df 93       	push	r29
    42c6:	cf 93       	push	r28
    42c8:	00 d0       	rcall	.+0      	; 0x42ca <new+0x6>
    42ca:	00 d0       	rcall	.+0      	; 0x42cc <new+0x8>
    42cc:	00 d0       	rcall	.+0      	; 0x42ce <new+0xa>
    42ce:	cd b7       	in	r28, 0x3d	; 61
    42d0:	de b7       	in	r29, 0x3e	; 62
	StringPortCLASS ptr=StringPort_Constructor(NULL);
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	0e 94 0d 21 	call	0x421a	; 0x421a <StringPort_Constructor>
    42da:	9a 83       	std	Y+2, r25	; 0x02
    42dc:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_StringPort_id, &ptr->_StringPort_refs, (freeVdmClassFunction)&StringPort_free, ptr)});
    42de:	e9 81       	ldd	r30, Y+1	; 0x01
    42e0:	fa 81       	ldd	r31, Y+2	; 0x02
    42e2:	62 85       	ldd	r22, Z+10	; 0x0a
    42e4:	73 85       	ldd	r23, Z+11	; 0x0b
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ea:	9c 01       	movw	r18, r24
    42ec:	24 5f       	subi	r18, 0xF4	; 244
    42ee:	3f 4f       	sbci	r19, 0xFF	; 255
    42f0:	4c e3       	ldi	r20, 0x3C	; 60
    42f2:	50 e2       	ldi	r21, 0x20	; 32
    42f4:	e9 81       	ldd	r30, Y+1	; 0x01
    42f6:	fa 81       	ldd	r31, Y+2	; 0x02
    42f8:	cb 01       	movw	r24, r22
    42fa:	b9 01       	movw	r22, r18
    42fc:	9f 01       	movw	r18, r30
    42fe:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    4302:	1b 82       	std	Y+3, r1	; 0x03
    4304:	1c 82       	std	Y+4, r1	; 0x04
    4306:	1d 82       	std	Y+5, r1	; 0x05
    4308:	1e 82       	std	Y+6, r1	; 0x06
    430a:	9c 83       	std	Y+4, r25	; 0x04
    430c:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	StringPortCLASS ptr=StringPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    430e:	2b 81       	ldd	r18, Y+3	; 0x03
    4310:	3c 81       	ldd	r19, Y+4	; 0x04
    4312:	4d 81       	ldd	r20, Y+5	; 0x05
    4314:	5e 81       	ldd	r21, Y+6	; 0x06
    4316:	8b e0       	ldi	r24, 0x0B	; 11
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	ba 01       	movw	r22, r20
    431c:	a9 01       	movw	r20, r18
    431e:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_StringPort_id, &ptr->_StringPort_refs, (freeVdmClassFunction)&StringPort_free, ptr)});
}
    4322:	26 96       	adiw	r28, 0x06	; 6
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	f8 94       	cli
    4328:	de bf       	out	0x3e, r29	; 62
    432a:	0f be       	out	0x3f, r0	; 63
    432c:	cd bf       	out	0x3d, r28	; 61
    432e:	cf 91       	pop	r28
    4330:	df 91       	pop	r29
    4332:	08 95       	ret

00004334 <_Z10StringPortE1QC>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 91:12 */
 TVP _Z10StringPortE1QC(StringPortCLASS this, TVP v)	{
    4334:	df 93       	push	r29
    4336:	cf 93       	push	r28
    4338:	00 d0       	rcall	.+0      	; 0x433a <_Z10StringPortE1QC+0x6>
    433a:	00 d0       	rcall	.+0      	; 0x433c <_Z10StringPortE1QC+0x8>
    433c:	00 d0       	rcall	.+0      	; 0x433e <_Z10StringPortE1QC+0xa>
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
    4342:	9c 83       	std	Y+4, r25	; 0x04
    4344:	8b 83       	std	Y+3, r24	; 0x03
    4346:	7e 83       	std	Y+6, r23	; 0x06
    4348:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
    434a:	1a 82       	std	Y+2, r1	; 0x02
    434c:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    434e:	8b 81       	ldd	r24, Y+3	; 0x03
    4350:	9c 81       	ldd	r25, Y+4	; 0x04
    4352:	00 97       	sbiw	r24, 0x00	; 0
    4354:	69 f4       	brne	.+26     	; 0x4370 <_Z10StringPortE1QC+0x3c>
	
	{

__buf = new();
    4356:	0e 94 62 21 	call	0x42c4	; 0x42c4 <new>
    435a:	9a 83       	std	Y+2, r25	; 0x02
    435c:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, StringPort);
    435e:	e9 81       	ldd	r30, Y+1	; 0x01
    4360:	fa 81       	ldd	r31, Y+2	; 0x02
    4362:	84 81       	ldd	r24, Z+4	; 0x04
    4364:	95 81       	ldd	r25, Z+5	; 0x05
    4366:	fc 01       	movw	r30, r24
    4368:	80 81       	ld	r24, Z
    436a:	91 81       	ldd	r25, Z+1	; 0x01
    436c:	9c 83       	std	Y+4, r25	; 0x04
    436e:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 92:20 */
CALL_FUNC_PTR(StringPort, StringPort, this, CLASS_StringPort__Z8setValueE1QC, v);
    4370:	8b 81       	ldd	r24, Y+3	; 0x03
    4372:	9c 81       	ldd	r25, Y+4	; 0x04
    4374:	fc 01       	movw	r30, r24
    4376:	38 96       	adiw	r30, 0x08	; 8
    4378:	80 81       	ld	r24, Z
    437a:	91 81       	ldd	r25, Z+1	; 0x01
    437c:	fc 01       	movw	r30, r24
    437e:	36 96       	adiw	r30, 0x06	; 6
    4380:	84 81       	ldd	r24, Z+4	; 0x04
    4382:	95 81       	ldd	r25, Z+5	; 0x05
    4384:	fc 01       	movw	r30, r24
    4386:	8b 81       	ldd	r24, Y+3	; 0x03
    4388:	9c 81       	ldd	r25, Y+4	; 0x04
    438a:	2d 81       	ldd	r18, Y+5	; 0x05
    438c:	3e 81       	ldd	r19, Y+6	; 0x06
    438e:	b9 01       	movw	r22, r18
    4390:	09 95       	icall

return __buf;
    4392:	89 81       	ldd	r24, Y+1	; 0x01
    4394:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4396:	26 96       	adiw	r28, 0x06	; 6
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
    43a2:	cf 91       	pop	r28
    43a4:	df 91       	pop	r29
    43a6:	08 95       	ret

000043a8 <_Z10StringPortEV>:


    /* Fmi.vdmrt 85:7 */
 TVP _Z10StringPortEV(StringPortCLASS this)	{
    43a8:	df 93       	push	r29
    43aa:	cf 93       	push	r28
    43ac:	00 d0       	rcall	.+0      	; 0x43ae <_Z10StringPortEV+0x6>
    43ae:	00 d0       	rcall	.+0      	; 0x43b0 <_Z10StringPortEV+0x8>
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
    43b4:	9c 83       	std	Y+4, r25	; 0x04
    43b6:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    43b8:	1a 82       	std	Y+2, r1	; 0x02
    43ba:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    43bc:	8b 81       	ldd	r24, Y+3	; 0x03
    43be:	9c 81       	ldd	r25, Y+4	; 0x04
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	69 f4       	brne	.+26     	; 0x43de <_Z10StringPortEV+0x36>
	
	{

__buf = new();
    43c4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <new>
    43c8:	9a 83       	std	Y+2, r25	; 0x02
    43ca:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, StringPort);
    43cc:	e9 81       	ldd	r30, Y+1	; 0x01
    43ce:	fa 81       	ldd	r31, Y+2	; 0x02
    43d0:	84 81       	ldd	r24, Z+4	; 0x04
    43d2:	95 81       	ldd	r25, Z+5	; 0x05
    43d4:	fc 01       	movw	r30, r24
    43d6:	80 81       	ld	r24, Z
    43d8:	91 81       	ldd	r25, Z+1	; 0x01
    43da:	9c 83       	std	Y+4, r25	; 0x04
    43dc:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    43e2:	0f 90       	pop	r0
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	cf 91       	pop	r28
    43ec:	df 91       	pop	r29
    43ee:	08 95       	ret

000043f0 <System_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void System_free_fields(struct System *this)
{
    43f0:	df 93       	push	r29
    43f2:	cf 93       	push	r28
    43f4:	00 d0       	rcall	.+0      	; 0x43f6 <System_free_fields+0x6>
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    43fa:	9a 83       	std	Y+2, r25	; 0x02
    43fc:	89 83       	std	Y+1, r24	; 0x01
			}
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	cf 91       	pop	r28
    4404:	df 91       	pop	r29
    4406:	08 95       	ret

00004408 <System_free>:

static void System_free(struct System *this)
{
    4408:	df 93       	push	r29
    440a:	cf 93       	push	r28
    440c:	00 d0       	rcall	.+0      	; 0x440e <System_free+0x6>
    440e:	cd b7       	in	r28, 0x3d	; 61
    4410:	de b7       	in	r29, 0x3e	; 62
    4412:	9a 83       	std	Y+2, r25	; 0x02
    4414:	89 83       	std	Y+1, r24	; 0x01
	--this->_System_refs;
    4416:	e9 81       	ldd	r30, Y+1	; 0x01
    4418:	fa 81       	ldd	r31, Y+2	; 0x02
    441a:	84 81       	ldd	r24, Z+4	; 0x04
    441c:	95 81       	ldd	r25, Z+5	; 0x05
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	e9 81       	ldd	r30, Y+1	; 0x01
    4422:	fa 81       	ldd	r31, Y+2	; 0x02
    4424:	95 83       	std	Z+5, r25	; 0x05
    4426:	84 83       	std	Z+4, r24	; 0x04
	if (this->_System_refs < 1)
    4428:	e9 81       	ldd	r30, Y+1	; 0x01
    442a:	fa 81       	ldd	r31, Y+2	; 0x02
    442c:	84 81       	ldd	r24, Z+4	; 0x04
    442e:	95 81       	ldd	r25, Z+5	; 0x05
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	41 f4       	brne	.+16     	; 0x4444 <System_free+0x3c>
	{
		System_free_fields(this);
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	9a 81       	ldd	r25, Y+2	; 0x02
    4438:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <System_free_fields>
		free(this);
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	9a 81       	ldd	r25, Y+2	; 0x02
    4440:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	cf 91       	pop	r28
    444a:	df 91       	pop	r29
    444c:	08 95       	ret

0000444e <_Z18fieldInitializer10EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer10EV()	{
    444e:	df 93       	push	r29
    4450:	cf 93       	push	r28
    4452:	00 d0       	rcall	.+0      	; 0x4454 <_Z18fieldInitializer10EV+0x6>
    4454:	cd b7       	in	r28, 0x3d	; 61
    4456:	de b7       	in	r29, 0x3e	; 62
/* System.vdmrt 8:46 */
TVP ret_13 = NULL
;
    4458:	1a 82       	std	Y+2, r1	; 0x02
    445a:	19 82       	std	Y+1, r1	; 0x01

return ret_13;
    445c:	89 81       	ldd	r24, Y+1	; 0x01
    445e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4460:	0f 90       	pop	r0
    4462:	0f 90       	pop	r0
    4464:	cf 91       	pop	r28
    4466:	df 91       	pop	r29
    4468:	08 95       	ret

0000446a <_Z17fieldInitializer9EV>:



 static  TVP _Z17fieldInitializer9EV()	{
    446a:	df 93       	push	r29
    446c:	cf 93       	push	r28
    446e:	00 d0       	rcall	.+0      	; 0x4470 <_Z17fieldInitializer9EV+0x6>
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
/* System.vdmrt 6:43 */
TVP ret_14 = _Z17HardwareInterfaceEV(NULL)
;
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	0e 94 55 18 	call	0x30aa	; 0x30aa <_Z17HardwareInterfaceEV>
    447c:	9a 83       	std	Y+2, r25	; 0x02
    447e:	89 83       	std	Y+1, r24	; 0x01

return ret_14;
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4484:	0f 90       	pop	r0
    4486:	0f 90       	pop	r0
    4488:	cf 91       	pop	r28
    448a:	df 91       	pop	r29
    448c:	08 95       	ret

0000448e <_Z17fieldInitializer8EV>:



 static  TVP _Z17fieldInitializer8EV()	{
    448e:	df 93       	push	r29
    4490:	cf 93       	push	r28
    4492:	00 d0       	rcall	.+0      	; 0x4494 <_Z17fieldInitializer8EV+0x6>
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62

TVP ret_15 = newInt(2)
;
    4498:	82 e0       	ldi	r24, 0x02	; 2
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    44a0:	9a 83       	std	Y+2, r25	; 0x02
    44a2:	89 83       	std	Y+1, r24	; 0x01

return ret_15;
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	08 95       	ret

000044b2 <System_const_init>:



 void System_const_init()	{
    44b2:	df 93       	push	r29
    44b4:	cf 93       	push	r28
    44b6:	cd b7       	in	r28, 0x3d	; 61
    44b8:	de b7       	in	r29, 0x3e	; 62

numFields_4 = _Z17fieldInitializer8EV();
    44ba:	0e 94 47 22 	call	0x448e	; 0x448e <_Z17fieldInitializer8EV>
    44be:	90 93 21 03 	sts	0x0321, r25
    44c2:	80 93 20 03 	sts	0x0320, r24

return ;
}
    44c6:	cf 91       	pop	r28
    44c8:	df 91       	pop	r29
    44ca:	08 95       	ret

000044cc <System_const_shutdown>:



 void System_const_shutdown()	{
    44cc:	df 93       	push	r29
    44ce:	cf 93       	push	r28
    44d0:	cd b7       	in	r28, 0x3d	; 61
    44d2:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_4);
    44d4:	80 91 20 03 	lds	r24, 0x0320
    44d8:	90 91 21 03 	lds	r25, 0x0321
    44dc:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    44e0:	cf 91       	pop	r28
    44e2:	df 91       	pop	r29
    44e4:	08 95       	ret

000044e6 <System_static_init>:



 void System_static_init()	{
    44e6:	df 93       	push	r29
    44e8:	cf 93       	push	r28
    44ea:	cd b7       	in	r28, 0x3d	; 61
    44ec:	de b7       	in	r29, 0x3e	; 62

g_System_hwi = _Z17fieldInitializer9EV();
    44ee:	0e 94 35 22 	call	0x446a	; 0x446a <_Z17fieldInitializer9EV>
    44f2:	90 93 23 03 	sts	0x0323, r25
    44f6:	80 93 22 03 	sts	0x0322, r24

g_System_controller = _Z18fieldInitializer10EV();
    44fa:	0e 94 27 22 	call	0x444e	; 0x444e <_Z18fieldInitializer10EV>
    44fe:	90 93 25 03 	sts	0x0325, r25
    4502:	80 93 24 03 	sts	0x0324, r24

return ;
}
    4506:	cf 91       	pop	r28
    4508:	df 91       	pop	r29
    450a:	08 95       	ret

0000450c <System_static_shutdown>:



 void System_static_shutdown()	{
    450c:	df 93       	push	r29
    450e:	cf 93       	push	r28
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62

vdmFree(g_System_hwi);
    4514:	80 91 22 03 	lds	r24, 0x0322
    4518:	90 91 23 03 	lds	r25, 0x0323
    451c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

vdmFree(g_System_controller);
    4520:	80 91 24 03 	lds	r24, 0x0324
    4524:	90 91 25 03 	lds	r25, 0x0325
    4528:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    452c:	cf 91       	pop	r28
    452e:	df 91       	pop	r29
    4530:	08 95       	ret

00004532 <System_Constructor>:
 *
 --------------------------------- */
 
 
SystemCLASS System_Constructor(SystemCLASS this_ptr)
{
    4532:	df 93       	push	r29
    4534:	cf 93       	push	r28
    4536:	00 d0       	rcall	.+0      	; 0x4538 <System_Constructor+0x6>
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    453c:	9a 83       	std	Y+2, r25	; 0x02
    453e:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    4540:	89 81       	ldd	r24, Y+1	; 0x01
    4542:	9a 81       	ldd	r25, Y+2	; 0x02
    4544:	00 97       	sbiw	r24, 0x00	; 0
    4546:	31 f4       	brne	.+12     	; 0x4554 <System_Constructor+0x22>
	{
		this_ptr = (SystemCLASS) malloc(sizeof(struct System));
    4548:	88 e0       	ldi	r24, 0x08	; 8
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	9a 81       	ldd	r25, Y+2	; 0x02
    4558:	00 97       	sbiw	r24, 0x00	; 0
    455a:	81 f0       	breq	.+32     	; 0x457c <System_Constructor+0x4a>
	{
	
			
		/*  System init  */
		this_ptr->_System_id = CLASS_ID_System_ID;
    455c:	e9 81       	ldd	r30, Y+1	; 0x01
    455e:	fa 81       	ldd	r31, Y+2	; 0x02
    4560:	87 e0       	ldi	r24, 0x07	; 7
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	93 83       	std	Z+3, r25	; 0x03
    4566:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_System_refs = 0;
    4568:	e9 81       	ldd	r30, Y+1	; 0x01
    456a:	fa 81       	ldd	r31, Y+2	; 0x02
    456c:	15 82       	std	Z+5, r1	; 0x05
    456e:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_System_pVTable=VTableArrayForSystem;
    4570:	e9 81       	ldd	r30, Y+1	; 0x01
    4572:	fa 81       	ldd	r31, Y+2	; 0x02
    4574:	82 ea       	ldi	r24, 0xA2	; 162
    4576:	92 e0       	ldi	r25, 0x02	; 2
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	80 83       	st	Z, r24

										}

	return this_ptr;
    457c:	89 81       	ldd	r24, Y+1	; 0x01
    457e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	cf 91       	pop	r28
    4586:	df 91       	pop	r29
    4588:	08 95       	ret

0000458a <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    458a:	df 93       	push	r29
    458c:	cf 93       	push	r28
    458e:	00 d0       	rcall	.+0      	; 0x4590 <new+0x6>
    4590:	00 d0       	rcall	.+0      	; 0x4592 <new+0x8>
    4592:	00 d0       	rcall	.+0      	; 0x4594 <new+0xa>
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
	SystemCLASS ptr=System_Constructor(NULL);
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	0e 94 99 22 	call	0x4532	; 0x4532 <System_Constructor>
    45a0:	9a 83       	std	Y+2, r25	; 0x02
    45a2:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_System_id, &ptr->_System_refs, (freeVdmClassFunction)&System_free, ptr)});
    45a4:	e9 81       	ldd	r30, Y+1	; 0x01
    45a6:	fa 81       	ldd	r31, Y+2	; 0x02
    45a8:	62 81       	ldd	r22, Z+2	; 0x02
    45aa:	73 81       	ldd	r23, Z+3	; 0x03
    45ac:	89 81       	ldd	r24, Y+1	; 0x01
    45ae:	9a 81       	ldd	r25, Y+2	; 0x02
    45b0:	9c 01       	movw	r18, r24
    45b2:	2c 5f       	subi	r18, 0xFC	; 252
    45b4:	3f 4f       	sbci	r19, 0xFF	; 255
    45b6:	44 e0       	ldi	r20, 0x04	; 4
    45b8:	52 e2       	ldi	r21, 0x22	; 34
    45ba:	e9 81       	ldd	r30, Y+1	; 0x01
    45bc:	fa 81       	ldd	r31, Y+2	; 0x02
    45be:	cb 01       	movw	r24, r22
    45c0:	b9 01       	movw	r22, r18
    45c2:	9f 01       	movw	r18, r30
    45c4:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    45c8:	1b 82       	std	Y+3, r1	; 0x03
    45ca:	1c 82       	std	Y+4, r1	; 0x04
    45cc:	1d 82       	std	Y+5, r1	; 0x05
    45ce:	1e 82       	std	Y+6, r1	; 0x06
    45d0:	9c 83       	std	Y+4, r25	; 0x04
    45d2:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	SystemCLASS ptr=System_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    45d4:	2b 81       	ldd	r18, Y+3	; 0x03
    45d6:	3c 81       	ldd	r19, Y+4	; 0x04
    45d8:	4d 81       	ldd	r20, Y+5	; 0x05
    45da:	5e 81       	ldd	r21, Y+6	; 0x06
    45dc:	8b e0       	ldi	r24, 0x0B	; 11
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	ba 01       	movw	r22, r20
    45e2:	a9 01       	movw	r20, r18
    45e4:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_System_id, &ptr->_System_refs, (freeVdmClassFunction)&System_free, ptr)});
}
    45e8:	26 96       	adiw	r28, 0x06	; 6
    45ea:	0f b6       	in	r0, 0x3f	; 63
    45ec:	f8 94       	cli
    45ee:	de bf       	out	0x3e, r29	; 62
    45f0:	0f be       	out	0x3f, r0	; 63
    45f2:	cd bf       	out	0x3d, r28	; 61
    45f4:	cf 91       	pop	r28
    45f6:	df 91       	pop	r29
    45f8:	08 95       	ret

000045fa <_Z6SystemEV>:
 *
 --------------------------------- */ 
 

    /* System.vdmrt 14:8 */
 TVP _Z6SystemEV(SystemCLASS this)	{
    45fa:	0f 93       	push	r16
    45fc:	1f 93       	push	r17
    45fe:	df 93       	push	r29
    4600:	cf 93       	push	r28
    4602:	cd b7       	in	r28, 0x3d	; 61
    4604:	de b7       	in	r29, 0x3e	; 62
    4606:	2c 97       	sbiw	r28, 0x0c	; 12
    4608:	0f b6       	in	r0, 0x3f	; 63
    460a:	f8 94       	cli
    460c:	de bf       	out	0x3e, r29	; 62
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	9c 87       	std	Y+12, r25	; 0x0c
    4614:	8b 87       	std	Y+11, r24	; 0x0b

TVP __buf = NULL
;
    4616:	1a 86       	std	Y+10, r1	; 0x0a
    4618:	19 86       	std	Y+9, r1	; 0x09

if ( this == NULL )
    461a:	8b 85       	ldd	r24, Y+11	; 0x0b
    461c:	9c 85       	ldd	r25, Y+12	; 0x0c
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	69 f4       	brne	.+26     	; 0x463c <_Z6SystemEV+0x42>
	
	{

__buf = new();
    4622:	0e 94 c5 22 	call	0x458a	; 0x458a <new>
    4626:	9a 87       	std	Y+10, r25	; 0x0a
    4628:	89 87       	std	Y+9, r24	; 0x09

this = TO_CLASS_PTR(__buf, System);
    462a:	e9 85       	ldd	r30, Y+9	; 0x09
    462c:	fa 85       	ldd	r31, Y+10	; 0x0a
    462e:	84 81       	ldd	r24, Z+4	; 0x04
    4630:	95 81       	ldd	r25, Z+5	; 0x05
    4632:	fc 01       	movw	r30, r24
    4634:	80 81       	ld	r24, Z
    4636:	91 81       	ldd	r25, Z+1	; 0x01
    4638:	9c 87       	std	Y+12, r25	; 0x0c
    463a:	8b 87       	std	Y+11, r24	; 0x0b
}
;
/* System.vdmrt 16:9 */
TVP servoLeft = _Z10RobotServoE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), servo_left_out))
;
    463c:	80 91 22 03 	lds	r24, 0x0322
    4640:	90 91 23 03 	lds	r25, 0x0323
    4644:	60 e0       	ldi	r22, 0x00	; 0
    4646:	70 e0       	ldi	r23, 0x00	; 0
    4648:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    464c:	fc 01       	movw	r30, r24
    464e:	84 81       	ldd	r24, Z+4	; 0x04
    4650:	95 81       	ldd	r25, Z+5	; 0x05
    4652:	fc 01       	movw	r30, r24
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	fc 01       	movw	r30, r24
    465a:	3e 96       	adiw	r30, 0x0e	; 14
    465c:	80 81       	ld	r24, Z
    465e:	91 81       	ldd	r25, Z+1	; 0x01
    4660:	60 e0       	ldi	r22, 0x00	; 0
    4662:	70 e0       	ldi	r23, 0x00	; 0
    4664:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    4668:	9c 01       	movw	r18, r24
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	b9 01       	movw	r22, r18
    4670:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <_Z10RobotServoE8CRealPort>
    4674:	98 87       	std	Y+8, r25	; 0x08
    4676:	8f 83       	std	Y+7, r24	; 0x07
/* System.vdmrt 17:9 */
TVP servoRight = _Z10RobotServoE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), servo_right_out))
;
    4678:	80 91 22 03 	lds	r24, 0x0322
    467c:	90 91 23 03 	lds	r25, 0x0323
    4680:	60 e0       	ldi	r22, 0x00	; 0
    4682:	70 e0       	ldi	r23, 0x00	; 0
    4684:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    4688:	fc 01       	movw	r30, r24
    468a:	84 81       	ldd	r24, Z+4	; 0x04
    468c:	95 81       	ldd	r25, Z+5	; 0x05
    468e:	fc 01       	movw	r30, r24
    4690:	80 81       	ld	r24, Z
    4692:	91 81       	ldd	r25, Z+1	; 0x01
    4694:	fc 01       	movw	r30, r24
    4696:	3c 96       	adiw	r30, 0x0c	; 12
    4698:	80 81       	ld	r24, Z
    469a:	91 81       	ldd	r25, Z+1	; 0x01
    469c:	60 e0       	ldi	r22, 0x00	; 0
    469e:	70 e0       	ldi	r23, 0x00	; 0
    46a0:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    46a4:	9c 01       	movw	r18, r24
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	b9 01       	movw	r22, r18
    46ac:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <_Z10RobotServoE8CRealPort>
    46b0:	9e 83       	std	Y+6, r25	; 0x06
    46b2:	8d 83       	std	Y+5, r24	; 0x05
/* System.vdmrt 18:9 */
TVP sensorRightVal = _Z11RobotSensorE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), rightVal))
;
    46b4:	80 91 22 03 	lds	r24, 0x0322
    46b8:	90 91 23 03 	lds	r25, 0x0323
    46bc:	60 e0       	ldi	r22, 0x00	; 0
    46be:	70 e0       	ldi	r23, 0x00	; 0
    46c0:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    46c4:	fc 01       	movw	r30, r24
    46c6:	84 81       	ldd	r24, Z+4	; 0x04
    46c8:	95 81       	ldd	r25, Z+5	; 0x05
    46ca:	fc 01       	movw	r30, r24
    46cc:	80 81       	ld	r24, Z
    46ce:	91 81       	ldd	r25, Z+1	; 0x01
    46d0:	fc 01       	movw	r30, r24
    46d2:	38 96       	adiw	r30, 0x08	; 8
    46d4:	80 81       	ld	r24, Z
    46d6:	91 81       	ldd	r25, Z+1	; 0x01
    46d8:	60 e0       	ldi	r22, 0x00	; 0
    46da:	70 e0       	ldi	r23, 0x00	; 0
    46dc:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    46e0:	9c 01       	movw	r18, r24
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	b9 01       	movw	r22, r18
    46e8:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_Z11RobotSensorE8CRealPort>
    46ec:	9c 83       	std	Y+4, r25	; 0x04
    46ee:	8b 83       	std	Y+3, r24	; 0x03
/* System.vdmrt 19:9 */
TVP sensorLeftVal = _Z11RobotSensorE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), leftVal))
;
    46f0:	80 91 22 03 	lds	r24, 0x0322
    46f4:	90 91 23 03 	lds	r25, 0x0323
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	70 e0       	ldi	r23, 0x00	; 0
    46fc:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    4700:	fc 01       	movw	r30, r24
    4702:	84 81       	ldd	r24, Z+4	; 0x04
    4704:	95 81       	ldd	r25, Z+5	; 0x05
    4706:	fc 01       	movw	r30, r24
    4708:	80 81       	ld	r24, Z
    470a:	91 81       	ldd	r25, Z+1	; 0x01
    470c:	fc 01       	movw	r30, r24
    470e:	36 96       	adiw	r30, 0x06	; 6
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	60 e0       	ldi	r22, 0x00	; 0
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    471c:	9c 01       	movw	r18, r24
    471e:	80 e0       	ldi	r24, 0x00	; 0
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	b9 01       	movw	r22, r18
    4724:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_Z11RobotSensorE8CRealPort>
    4728:	9a 83       	std	Y+2, r25	; 0x02
    472a:	89 83       	std	Y+1, r24	; 0x01
/* System.vdmrt 21:13 */
g_System_controller = _Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor(NULL, servoLeft, servoRight, sensorRightVal, sensorLeftVal);
    472c:	2f 81       	ldd	r18, Y+7	; 0x07
    472e:	38 85       	ldd	r19, Y+8	; 0x08
    4730:	4d 81       	ldd	r20, Y+5	; 0x05
    4732:	5e 81       	ldd	r21, Y+6	; 0x06
    4734:	eb 81       	ldd	r30, Y+3	; 0x03
    4736:	fc 81       	ldd	r31, Y+4	; 0x04
    4738:	a9 81       	ldd	r26, Y+1	; 0x01
    473a:	ba 81       	ldd	r27, Y+2	; 0x02
    473c:	80 e0       	ldi	r24, 0x00	; 0
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	b9 01       	movw	r22, r18
    4742:	9f 01       	movw	r18, r30
    4744:	8d 01       	movw	r16, r26
    4746:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor>
    474a:	90 93 25 03 	sts	0x0325, r25
    474e:	80 93 24 03 	sts	0x0324, r24

return __buf;
    4752:	89 85       	ldd	r24, Y+9	; 0x09
    4754:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    4756:	2c 96       	adiw	r28, 0x0c	; 12
    4758:	0f b6       	in	r0, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	de bf       	out	0x3e, r29	; 62
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	cd bf       	out	0x3d, r28	; 61
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	08 95       	ret

0000476c <World_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void World_free_fields(struct World *this)
{
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	00 d0       	rcall	.+0      	; 0x4772 <World_free_fields+0x6>
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	9a 83       	std	Y+2, r25	; 0x02
    4778:	89 83       	std	Y+1, r24	; 0x01
	}
    477a:	0f 90       	pop	r0
    477c:	0f 90       	pop	r0
    477e:	cf 91       	pop	r28
    4780:	df 91       	pop	r29
    4782:	08 95       	ret

00004784 <World_free>:

static void World_free(struct World *this)
{
    4784:	df 93       	push	r29
    4786:	cf 93       	push	r28
    4788:	00 d0       	rcall	.+0      	; 0x478a <World_free+0x6>
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	9a 83       	std	Y+2, r25	; 0x02
    4790:	89 83       	std	Y+1, r24	; 0x01
	--this->_World_refs;
    4792:	e9 81       	ldd	r30, Y+1	; 0x01
    4794:	fa 81       	ldd	r31, Y+2	; 0x02
    4796:	84 81       	ldd	r24, Z+4	; 0x04
    4798:	95 81       	ldd	r25, Z+5	; 0x05
    479a:	01 97       	sbiw	r24, 0x01	; 1
    479c:	e9 81       	ldd	r30, Y+1	; 0x01
    479e:	fa 81       	ldd	r31, Y+2	; 0x02
    47a0:	95 83       	std	Z+5, r25	; 0x05
    47a2:	84 83       	std	Z+4, r24	; 0x04
	if (this->_World_refs < 1)
    47a4:	e9 81       	ldd	r30, Y+1	; 0x01
    47a6:	fa 81       	ldd	r31, Y+2	; 0x02
    47a8:	84 81       	ldd	r24, Z+4	; 0x04
    47aa:	95 81       	ldd	r25, Z+5	; 0x05
    47ac:	00 97       	sbiw	r24, 0x00	; 0
    47ae:	41 f4       	brne	.+16     	; 0x47c0 <World_free+0x3c>
	{
		World_free_fields(this);
    47b0:	89 81       	ldd	r24, Y+1	; 0x01
    47b2:	9a 81       	ldd	r25, Y+2	; 0x02
    47b4:	0e 94 b6 23 	call	0x476c	; 0x476c <World_free_fields>
		free(this);
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	9a 81       	ldd	r25, Y+2	; 0x02
    47bc:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	}
}
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	cf 91       	pop	r28
    47c6:	df 91       	pop	r29
    47c8:	08 95       	ret

000047ca <_Z18fieldInitializer11EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer11EV()	{
    47ca:	df 93       	push	r29
    47cc:	cf 93       	push	r28
    47ce:	00 d0       	rcall	.+0      	; 0x47d0 <_Z18fieldInitializer11EV+0x6>
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62

TVP ret_16 = newInt(0)
;
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    47dc:	9a 83       	std	Y+2, r25	; 0x02
    47de:	89 83       	std	Y+1, r24	; 0x01

return ret_16;
    47e0:	89 81       	ldd	r24, Y+1	; 0x01
    47e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	cf 91       	pop	r28
    47ea:	df 91       	pop	r29
    47ec:	08 95       	ret

000047ee <_Z3runEV>:


/* World.vdmrt 5:8 */
 static  void _Z3runEV(WorldCLASS this)	{
    47ee:	df 93       	push	r29
    47f0:	cf 93       	push	r28
    47f2:	00 d0       	rcall	.+0      	; 0x47f4 <_Z3runEV+0x6>
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
    47f8:	9a 83       	std	Y+2, r25	; 0x02
    47fa:	89 83       	std	Y+1, r24	; 0x01
/* World.vdmrt 7:5 */
;
/* World.vdmrt 8:5 */
CALL_FUNC_PTR(World, World, this, CLASS_World__Z5blockEV);
    47fc:	e9 81       	ldd	r30, Y+1	; 0x01
    47fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	fc 01       	movw	r30, r24
    4806:	36 96       	adiw	r30, 0x06	; 6
    4808:	84 81       	ldd	r24, Z+4	; 0x04
    480a:	95 81       	ldd	r25, Z+5	; 0x05
    480c:	fc 01       	movw	r30, r24
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	09 95       	icall
}
    4814:	0f 90       	pop	r0
    4816:	0f 90       	pop	r0
    4818:	cf 91       	pop	r28
    481a:	df 91       	pop	r29
    481c:	08 95       	ret

0000481e <_Z5blockEV>:


/* World.vdmrt 11:9 */
 static  void _Z5blockEV(WorldCLASS this)	{
    481e:	df 93       	push	r29
    4820:	cf 93       	push	r28
    4822:	00 d0       	rcall	.+0      	; 0x4824 <_Z5blockEV+0x6>
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
    4828:	9a 83       	std	Y+2, r25	; 0x02
    482a:	89 83       	std	Y+1, r24	; 0x01
/* World.vdmrt 12:13 */
{
/*  Skip  */
}
;
}
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
    4830:	cf 91       	pop	r28
    4832:	df 91       	pop	r29
    4834:	08 95       	ret

00004836 <World_const_init>:



 void World_const_init()	{
    4836:	df 93       	push	r29
    4838:	cf 93       	push	r28
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62

numFields_5 = _Z18fieldInitializer11EV();
    483e:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z18fieldInitializer11EV>
    4842:	90 93 27 03 	sts	0x0327, r25
    4846:	80 93 26 03 	sts	0x0326, r24

return ;
}
    484a:	cf 91       	pop	r28
    484c:	df 91       	pop	r29
    484e:	08 95       	ret

00004850 <World_const_shutdown>:



 void World_const_shutdown()	{
    4850:	df 93       	push	r29
    4852:	cf 93       	push	r28
    4854:	cd b7       	in	r28, 0x3d	; 61
    4856:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_5);
    4858:	80 91 26 03 	lds	r24, 0x0326
    485c:	90 91 27 03 	lds	r25, 0x0327
    4860:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

return ;
}
    4864:	cf 91       	pop	r28
    4866:	df 91       	pop	r29
    4868:	08 95       	ret

0000486a <World_static_init>:



 void World_static_init()	{
    486a:	df 93       	push	r29
    486c:	cf 93       	push	r28
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62

return ;
}
    4872:	cf 91       	pop	r28
    4874:	df 91       	pop	r29
    4876:	08 95       	ret

00004878 <World_static_shutdown>:



 void World_static_shutdown()	{
    4878:	df 93       	push	r29
    487a:	cf 93       	push	r28
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62

return ;
}
    4880:	cf 91       	pop	r28
    4882:	df 91       	pop	r29
    4884:	08 95       	ret

00004886 <World_Constructor>:
 *
 --------------------------------- */
 
 
WorldCLASS World_Constructor(WorldCLASS this_ptr)
{
    4886:	df 93       	push	r29
    4888:	cf 93       	push	r28
    488a:	00 d0       	rcall	.+0      	; 0x488c <World_Constructor+0x6>
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
    4890:	9a 83       	std	Y+2, r25	; 0x02
    4892:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    4894:	89 81       	ldd	r24, Y+1	; 0x01
    4896:	9a 81       	ldd	r25, Y+2	; 0x02
    4898:	00 97       	sbiw	r24, 0x00	; 0
    489a:	31 f4       	brne	.+12     	; 0x48a8 <World_Constructor+0x22>
	{
		this_ptr = (WorldCLASS) malloc(sizeof(struct World));
    489c:	88 e0       	ldi	r24, 0x08	; 8
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    48a4:	9a 83       	std	Y+2, r25	; 0x02
    48a6:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    48a8:	89 81       	ldd	r24, Y+1	; 0x01
    48aa:	9a 81       	ldd	r25, Y+2	; 0x02
    48ac:	00 97       	sbiw	r24, 0x00	; 0
    48ae:	81 f0       	breq	.+32     	; 0x48d0 <World_Constructor+0x4a>
	{
	
			
		/*  World init  */
		this_ptr->_World_id = CLASS_ID_World_ID;
    48b0:	e9 81       	ldd	r30, Y+1	; 0x01
    48b2:	fa 81       	ldd	r31, Y+2	; 0x02
    48b4:	88 e0       	ldi	r24, 0x08	; 8
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	93 83       	std	Z+3, r25	; 0x03
    48ba:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_World_refs = 0;
    48bc:	e9 81       	ldd	r30, Y+1	; 0x01
    48be:	fa 81       	ldd	r31, Y+2	; 0x02
    48c0:	15 82       	std	Z+5, r1	; 0x05
    48c2:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_World_pVTable=VTableArrayForWorld;
    48c4:	e9 81       	ldd	r30, Y+1	; 0x01
    48c6:	fa 81       	ldd	r31, Y+2	; 0x02
    48c8:	88 ea       	ldi	r24, 0xA8	; 168
    48ca:	92 e0       	ldi	r25, 0x02	; 2
    48cc:	91 83       	std	Z+1, r25	; 0x01
    48ce:	80 83       	st	Z, r24

				}

	return this_ptr;
    48d0:	89 81       	ldd	r24, Y+1	; 0x01
    48d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	cf 91       	pop	r28
    48da:	df 91       	pop	r29
    48dc:	08 95       	ret

000048de <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    48de:	df 93       	push	r29
    48e0:	cf 93       	push	r28
    48e2:	00 d0       	rcall	.+0      	; 0x48e4 <new+0x6>
    48e4:	00 d0       	rcall	.+0      	; 0x48e6 <new+0x8>
    48e6:	00 d0       	rcall	.+0      	; 0x48e8 <new+0xa>
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
	WorldCLASS ptr=World_Constructor(NULL);
    48ec:	80 e0       	ldi	r24, 0x00	; 0
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	0e 94 43 24 	call	0x4886	; 0x4886 <World_Constructor>
    48f4:	9a 83       	std	Y+2, r25	; 0x02
    48f6:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_World_id, &ptr->_World_refs, (freeVdmClassFunction)&World_free, ptr)});
    48f8:	e9 81       	ldd	r30, Y+1	; 0x01
    48fa:	fa 81       	ldd	r31, Y+2	; 0x02
    48fc:	62 81       	ldd	r22, Z+2	; 0x02
    48fe:	73 81       	ldd	r23, Z+3	; 0x03
    4900:	89 81       	ldd	r24, Y+1	; 0x01
    4902:	9a 81       	ldd	r25, Y+2	; 0x02
    4904:	9c 01       	movw	r18, r24
    4906:	2c 5f       	subi	r18, 0xFC	; 252
    4908:	3f 4f       	sbci	r19, 0xFF	; 255
    490a:	42 ec       	ldi	r20, 0xC2	; 194
    490c:	53 e2       	ldi	r21, 0x23	; 35
    490e:	e9 81       	ldd	r30, Y+1	; 0x01
    4910:	fa 81       	ldd	r31, Y+2	; 0x02
    4912:	cb 01       	movw	r24, r22
    4914:	b9 01       	movw	r22, r18
    4916:	9f 01       	movw	r18, r30
    4918:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    491c:	1b 82       	std	Y+3, r1	; 0x03
    491e:	1c 82       	std	Y+4, r1	; 0x04
    4920:	1d 82       	std	Y+5, r1	; 0x05
    4922:	1e 82       	std	Y+6, r1	; 0x06
    4924:	9c 83       	std	Y+4, r25	; 0x04
    4926:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	WorldCLASS ptr=World_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    4928:	2b 81       	ldd	r18, Y+3	; 0x03
    492a:	3c 81       	ldd	r19, Y+4	; 0x04
    492c:	4d 81       	ldd	r20, Y+5	; 0x05
    492e:	5e 81       	ldd	r21, Y+6	; 0x06
    4930:	8b e0       	ldi	r24, 0x0B	; 11
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	ba 01       	movw	r22, r20
    4936:	a9 01       	movw	r20, r18
    4938:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
			{	.ptr=newClassValue(ptr->_World_id, &ptr->_World_refs, (freeVdmClassFunction)&World_free, ptr)});
}
    493c:	26 96       	adiw	r28, 0x06	; 6
    493e:	0f b6       	in	r0, 0x3f	; 63
    4940:	f8 94       	cli
    4942:	de bf       	out	0x3e, r29	; 62
    4944:	0f be       	out	0x3f, r0	; 63
    4946:	cd bf       	out	0x3d, r28	; 61
    4948:	cf 91       	pop	r28
    494a:	df 91       	pop	r29
    494c:	08 95       	ret

0000494e <_Z5WorldEV>:
 *
 --------------------------------- */ 
 

    /* World.vdmrt 1:7 */
 TVP _Z5WorldEV(WorldCLASS this)	{
    494e:	df 93       	push	r29
    4950:	cf 93       	push	r28
    4952:	00 d0       	rcall	.+0      	; 0x4954 <_Z5WorldEV+0x6>
    4954:	00 d0       	rcall	.+0      	; 0x4956 <_Z5WorldEV+0x8>
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	9c 83       	std	Y+4, r25	; 0x04
    495c:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    495e:	1a 82       	std	Y+2, r1	; 0x02
    4960:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    4962:	8b 81       	ldd	r24, Y+3	; 0x03
    4964:	9c 81       	ldd	r25, Y+4	; 0x04
    4966:	00 97       	sbiw	r24, 0x00	; 0
    4968:	69 f4       	brne	.+26     	; 0x4984 <_Z5WorldEV+0x36>
	
	{

__buf = new();
    496a:	0e 94 6f 24 	call	0x48de	; 0x48de <new>
    496e:	9a 83       	std	Y+2, r25	; 0x02
    4970:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, World);
    4972:	e9 81       	ldd	r30, Y+1	; 0x01
    4974:	fa 81       	ldd	r31, Y+2	; 0x02
    4976:	84 81       	ldd	r24, Z+4	; 0x04
    4978:	95 81       	ldd	r25, Z+5	; 0x05
    497a:	fc 01       	movw	r30, r24
    497c:	80 81       	ld	r24, Z
    497e:	91 81       	ldd	r25, Z+1	; 0x01
    4980:	9c 83       	std	Y+4, r25	; 0x04
    4982:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    4984:	89 81       	ldd	r24, Y+1	; 0x01
    4986:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4988:	0f 90       	pop	r0
    498a:	0f 90       	pop	r0
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	cf 91       	pop	r28
    4992:	df 91       	pop	r29
    4994:	08 95       	ret

00004996 <newTypeValue>:




TVP newTypeValue(vdmtype type, TypedValueType value)
{
    4996:	df 93       	push	r29
    4998:	cf 93       	push	r28
    499a:	cd b7       	in	r28, 0x3d	; 61
    499c:	de b7       	in	r29, 0x3e	; 62
    499e:	28 97       	sbiw	r28, 0x08	; 8
    49a0:	0f b6       	in	r0, 0x3f	; 63
    49a2:	f8 94       	cli
    49a4:	de bf       	out	0x3e, r29	; 62
    49a6:	0f be       	out	0x3f, r0	; 63
    49a8:	cd bf       	out	0x3d, r28	; 61
    49aa:	9c 83       	std	Y+4, r25	; 0x04
    49ac:	8b 83       	std	Y+3, r24	; 0x03
    49ae:	4d 83       	std	Y+5, r20	; 0x05
    49b0:	5e 83       	std	Y+6, r21	; 0x06
    49b2:	6f 83       	std	Y+7, r22	; 0x07
    49b4:	78 87       	std	Y+8, r23	; 0x08
	TVP ptr = malloc(sizeof(struct TypedValue));
    49b6:	88 e0       	ldi	r24, 0x08	; 8
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    49be:	9a 83       	std	Y+2, r25	; 0x02
    49c0:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    49c2:	89 81       	ldd	r24, Y+1	; 0x01
    49c4:	9a 81       	ldd	r25, Y+2	; 0x02
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	11 f4       	brne	.+4      	; 0x49ce <newTypeValue+0x38>
    49ca:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ptr->type = type;
    49ce:	e9 81       	ldd	r30, Y+1	; 0x01
    49d0:	fa 81       	ldd	r31, Y+2	; 0x02
    49d2:	8b 81       	ldd	r24, Y+3	; 0x03
    49d4:	9c 81       	ldd	r25, Y+4	; 0x04
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	80 83       	st	Z, r24
	ptr->value = value;
    49da:	e9 81       	ldd	r30, Y+1	; 0x01
    49dc:	fa 81       	ldd	r31, Y+2	; 0x02
    49de:	8d 81       	ldd	r24, Y+5	; 0x05
    49e0:	9e 81       	ldd	r25, Y+6	; 0x06
    49e2:	af 81       	ldd	r26, Y+7	; 0x07
    49e4:	b8 85       	ldd	r27, Y+8	; 0x08
    49e6:	84 83       	std	Z+4, r24	; 0x04
    49e8:	95 83       	std	Z+5, r25	; 0x05
    49ea:	a6 83       	std	Z+6, r26	; 0x06
    49ec:	b7 83       	std	Z+7, r27	; 0x07
	ptr->ref_from = NULL;
    49ee:	e9 81       	ldd	r30, Y+1	; 0x01
    49f0:	fa 81       	ldd	r31, Y+2	; 0x02
    49f2:	13 82       	std	Z+3, r1	; 0x03
    49f4:	12 82       	std	Z+2, r1	; 0x02

	return ptr;
    49f6:	89 81       	ldd	r24, Y+1	; 0x01
    49f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    49fa:	28 96       	adiw	r28, 0x08	; 8
    49fc:	0f b6       	in	r0, 0x3f	; 63
    49fe:	f8 94       	cli
    4a00:	de bf       	out	0x3e, r29	; 62
    4a02:	0f be       	out	0x3f, r0	; 63
    4a04:	cd bf       	out	0x3d, r28	; 61
    4a06:	cf 91       	pop	r28
    4a08:	df 91       	pop	r29
    4a0a:	08 95       	ret

00004a0c <newInt>:

/* #ifndef WITH_GC  */
/* / Basic  */
TVP newInt(int x)
{
    4a0c:	df 93       	push	r29
    4a0e:	cf 93       	push	r28
    4a10:	00 d0       	rcall	.+0      	; 0x4a12 <newInt+0x6>
    4a12:	00 d0       	rcall	.+0      	; 0x4a14 <newInt+0x8>
    4a14:	00 d0       	rcall	.+0      	; 0x4a16 <newInt+0xa>
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	9e 83       	std	Y+6, r25	; 0x06
    4a1c:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_INT, (TypedValueType
	)
			{ .intVal = x });
    4a1e:	19 82       	std	Y+1, r1	; 0x01
    4a20:	1a 82       	std	Y+2, r1	; 0x02
    4a22:	1b 82       	std	Y+3, r1	; 0x03
    4a24:	1c 82       	std	Y+4, r1	; 0x04
    4a26:	8d 81       	ldd	r24, Y+5	; 0x05
    4a28:	9e 81       	ldd	r25, Y+6	; 0x06
    4a2a:	9a 83       	std	Y+2, r25	; 0x02
    4a2c:	89 83       	std	Y+1, r24	; 0x01

/* #ifndef WITH_GC  */
/* / Basic  */
TVP newInt(int x)
{
	return newTypeValue(VDM_INT, (TypedValueType
    4a2e:	29 81       	ldd	r18, Y+1	; 0x01
    4a30:	3a 81       	ldd	r19, Y+2	; 0x02
    4a32:	4b 81       	ldd	r20, Y+3	; 0x03
    4a34:	5c 81       	ldd	r21, Y+4	; 0x04
    4a36:	80 e0       	ldi	r24, 0x00	; 0
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	ba 01       	movw	r22, r20
    4a3c:	a9 01       	movw	r20, r18
    4a3e:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .intVal = x });
}
    4a42:	26 96       	adiw	r28, 0x06	; 6
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	f8 94       	cli
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	cf 91       	pop	r28
    4a50:	df 91       	pop	r29
    4a52:	08 95       	ret

00004a54 <newBool>:

TVP newBool(bool x)
{
    4a54:	df 93       	push	r29
    4a56:	cf 93       	push	r28
    4a58:	00 d0       	rcall	.+0      	; 0x4a5a <newBool+0x6>
    4a5a:	00 d0       	rcall	.+0      	; 0x4a5c <newBool+0x8>
    4a5c:	0f 92       	push	r0
    4a5e:	cd b7       	in	r28, 0x3d	; 61
    4a60:	de b7       	in	r29, 0x3e	; 62
    4a62:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_BOOL, (TypedValueType
	)
			{ .boolVal = x });
    4a64:	19 82       	std	Y+1, r1	; 0x01
    4a66:	1a 82       	std	Y+2, r1	; 0x02
    4a68:	1b 82       	std	Y+3, r1	; 0x03
    4a6a:	1c 82       	std	Y+4, r1	; 0x04
    4a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a6e:	89 83       	std	Y+1, r24	; 0x01
			{ .intVal = x });
}

TVP newBool(bool x)
{
	return newTypeValue(VDM_BOOL, (TypedValueType
    4a70:	29 81       	ldd	r18, Y+1	; 0x01
    4a72:	3a 81       	ldd	r19, Y+2	; 0x02
    4a74:	4b 81       	ldd	r20, Y+3	; 0x03
    4a76:	5c 81       	ldd	r21, Y+4	; 0x04
    4a78:	83 e0       	ldi	r24, 0x03	; 3
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	ba 01       	movw	r22, r20
    4a7e:	a9 01       	movw	r20, r18
    4a80:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .boolVal = x });
}
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	cf 91       	pop	r28
    4a90:	df 91       	pop	r29
    4a92:	08 95       	ret

00004a94 <newReal>:
TVP newReal(double x)
{
    4a94:	df 93       	push	r29
    4a96:	cf 93       	push	r28
    4a98:	cd b7       	in	r28, 0x3d	; 61
    4a9a:	de b7       	in	r29, 0x3e	; 62
    4a9c:	28 97       	sbiw	r28, 0x08	; 8
    4a9e:	0f b6       	in	r0, 0x3f	; 63
    4aa0:	f8 94       	cli
    4aa2:	de bf       	out	0x3e, r29	; 62
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	cd bf       	out	0x3d, r28	; 61
    4aa8:	6d 83       	std	Y+5, r22	; 0x05
    4aaa:	7e 83       	std	Y+6, r23	; 0x06
    4aac:	8f 83       	std	Y+7, r24	; 0x07
    4aae:	98 87       	std	Y+8, r25	; 0x08
	return newTypeValue(VDM_REAL, (TypedValueType
	)
			{ .doubleVal = x });
    4ab0:	19 82       	std	Y+1, r1	; 0x01
    4ab2:	1a 82       	std	Y+2, r1	; 0x02
    4ab4:	1b 82       	std	Y+3, r1	; 0x03
    4ab6:	1c 82       	std	Y+4, r1	; 0x04
    4ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    4aba:	9e 81       	ldd	r25, Y+6	; 0x06
    4abc:	af 81       	ldd	r26, Y+7	; 0x07
    4abe:	b8 85       	ldd	r27, Y+8	; 0x08
    4ac0:	89 83       	std	Y+1, r24	; 0x01
    4ac2:	9a 83       	std	Y+2, r25	; 0x02
    4ac4:	ab 83       	std	Y+3, r26	; 0x03
    4ac6:	bc 83       	std	Y+4, r27	; 0x04
	)
			{ .boolVal = x });
}
TVP newReal(double x)
{
	return newTypeValue(VDM_REAL, (TypedValueType
    4ac8:	29 81       	ldd	r18, Y+1	; 0x01
    4aca:	3a 81       	ldd	r19, Y+2	; 0x02
    4acc:	4b 81       	ldd	r20, Y+3	; 0x03
    4ace:	5c 81       	ldd	r21, Y+4	; 0x04
    4ad0:	84 e0       	ldi	r24, 0x04	; 4
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	ba 01       	movw	r22, r20
    4ad6:	a9 01       	movw	r20, r18
    4ad8:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .doubleVal = x });
}
    4adc:	28 96       	adiw	r28, 0x08	; 8
    4ade:	0f b6       	in	r0, 0x3f	; 63
    4ae0:	f8 94       	cli
    4ae2:	de bf       	out	0x3e, r29	; 62
    4ae4:	0f be       	out	0x3f, r0	; 63
    4ae6:	cd bf       	out	0x3d, r28	; 61
    4ae8:	cf 91       	pop	r28
    4aea:	df 91       	pop	r29
    4aec:	08 95       	ret

00004aee <newChar>:
TVP newChar(char x)
{
    4aee:	df 93       	push	r29
    4af0:	cf 93       	push	r28
    4af2:	00 d0       	rcall	.+0      	; 0x4af4 <newChar+0x6>
    4af4:	00 d0       	rcall	.+0      	; 0x4af6 <newChar+0x8>
    4af6:	0f 92       	push	r0
    4af8:	cd b7       	in	r28, 0x3d	; 61
    4afa:	de b7       	in	r29, 0x3e	; 62
    4afc:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_CHAR, (TypedValueType
	)
			{ .charVal = x });
    4afe:	19 82       	std	Y+1, r1	; 0x01
    4b00:	1a 82       	std	Y+2, r1	; 0x02
    4b02:	1b 82       	std	Y+3, r1	; 0x03
    4b04:	1c 82       	std	Y+4, r1	; 0x04
    4b06:	8d 81       	ldd	r24, Y+5	; 0x05
    4b08:	89 83       	std	Y+1, r24	; 0x01
	)
			{ .doubleVal = x });
}
TVP newChar(char x)
{
	return newTypeValue(VDM_CHAR, (TypedValueType
    4b0a:	29 81       	ldd	r18, Y+1	; 0x01
    4b0c:	3a 81       	ldd	r19, Y+2	; 0x02
    4b0e:	4b 81       	ldd	r20, Y+3	; 0x03
    4b10:	5c 81       	ldd	r21, Y+4	; 0x04
    4b12:	86 e0       	ldi	r24, 0x06	; 6
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	ba 01       	movw	r22, r20
    4b18:	a9 01       	movw	r20, r18
    4b1a:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .charVal = x });
}
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	0f 90       	pop	r0
    4b28:	cf 91       	pop	r28
    4b2a:	df 91       	pop	r29
    4b2c:	08 95       	ret

00004b2e <newQuote>:
TVP newQuote(unsigned int x)
{
    4b2e:	df 93       	push	r29
    4b30:	cf 93       	push	r28
    4b32:	00 d0       	rcall	.+0      	; 0x4b34 <newQuote+0x6>
    4b34:	00 d0       	rcall	.+0      	; 0x4b36 <newQuote+0x8>
    4b36:	00 d0       	rcall	.+0      	; 0x4b38 <newQuote+0xa>
    4b38:	cd b7       	in	r28, 0x3d	; 61
    4b3a:	de b7       	in	r29, 0x3e	; 62
    4b3c:	9e 83       	std	Y+6, r25	; 0x06
    4b3e:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_QUOTE, (TypedValueType
	)
			{ .quoteVal = x });
    4b40:	19 82       	std	Y+1, r1	; 0x01
    4b42:	1a 82       	std	Y+2, r1	; 0x02
    4b44:	1b 82       	std	Y+3, r1	; 0x03
    4b46:	1c 82       	std	Y+4, r1	; 0x04
    4b48:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b4c:	9a 83       	std	Y+2, r25	; 0x02
    4b4e:	89 83       	std	Y+1, r24	; 0x01
	)
			{ .charVal = x });
}
TVP newQuote(unsigned int x)
{
	return newTypeValue(VDM_QUOTE, (TypedValueType
    4b50:	29 81       	ldd	r18, Y+1	; 0x01
    4b52:	3a 81       	ldd	r19, Y+2	; 0x02
    4b54:	4b 81       	ldd	r20, Y+3	; 0x03
    4b56:	5c 81       	ldd	r21, Y+4	; 0x04
    4b58:	89 e0       	ldi	r24, 0x09	; 9
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	ba 01       	movw	r22, r20
    4b5e:	a9 01       	movw	r20, r18
    4b60:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .quoteVal = x });
}
    4b64:	26 96       	adiw	r28, 0x06	; 6
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	cf 91       	pop	r28
    4b72:	df 91       	pop	r29
    4b74:	08 95       	ret

00004b76 <newToken>:

TVP newToken(TVP x)
{
    4b76:	df 93       	push	r29
    4b78:	cf 93       	push	r28
    4b7a:	cd b7       	in	r28, 0x3d	; 61
    4b7c:	de b7       	in	r29, 0x3e	; 62
    4b7e:	2f 97       	sbiw	r28, 0x0f	; 15
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	9e 87       	std	Y+14, r25	; 0x0e
    4b8c:	8d 87       	std	Y+13, r24	; 0x0d
	char *str = unpackString(x);
    4b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b92:	0e 94 3a 69 	call	0xd274	; 0xd274 <unpackString>
    4b96:	98 87       	std	Y+8, r25	; 0x08
    4b98:	8f 83       	std	Y+7, r24	; 0x07
	char *strTmp = str;
    4b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4b9c:	98 85       	ldd	r25, Y+8	; 0x08
    4b9e:	9e 83       	std	Y+6, r25	; 0x06
    4ba0:	8d 83       	std	Y+5, r24	; 0x05
	int hashVal = 5381;
    4ba2:	85 e0       	ldi	r24, 0x05	; 5
    4ba4:	95 e1       	ldi	r25, 0x15	; 21
    4ba6:	9c 83       	std	Y+4, r25	; 0x04
    4ba8:	8b 83       	std	Y+3, r24	; 0x03
    4baa:	11 c0       	rjmp	.+34     	; 0x4bce <newToken+0x58>
	int c;

	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;
    4bac:	8b 81       	ldd	r24, Y+3	; 0x03
    4bae:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb0:	9c 01       	movw	r18, r24
    4bb2:	22 0f       	add	r18, r18
    4bb4:	33 1f       	adc	r19, r19
    4bb6:	22 0f       	add	r18, r18
    4bb8:	33 1f       	adc	r19, r19
    4bba:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    4bbe:	28 0f       	add	r18, r24
    4bc0:	39 1f       	adc	r19, r25
    4bc2:	89 81       	ldd	r24, Y+1	; 0x01
    4bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc6:	82 0f       	add	r24, r18
    4bc8:	93 1f       	adc	r25, r19
    4bca:	9c 83       	std	Y+4, r25	; 0x04
    4bcc:	8b 83       	std	Y+3, r24	; 0x03
	char *str = unpackString(x);
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
    4bce:	ef 81       	ldd	r30, Y+7	; 0x07
    4bd0:	f8 85       	ldd	r31, Y+8	; 0x08
    4bd2:	80 81       	ld	r24, Z
    4bd4:	99 27       	eor	r25, r25
    4bd6:	87 fd       	sbrc	r24, 7
    4bd8:	90 95       	com	r25
    4bda:	9a 83       	std	Y+2, r25	; 0x02
    4bdc:	89 83       	std	Y+1, r24	; 0x01
    4bde:	1f 86       	std	Y+15, r1	; 0x0f
    4be0:	89 81       	ldd	r24, Y+1	; 0x01
    4be2:	9a 81       	ldd	r25, Y+2	; 0x02
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	11 f0       	breq	.+4      	; 0x4bec <newToken+0x76>
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	8f 87       	std	Y+15, r24	; 0x0f
    4bec:	8f 81       	ldd	r24, Y+7	; 0x07
    4bee:	98 85       	ldd	r25, Y+8	; 0x08
    4bf0:	01 96       	adiw	r24, 0x01	; 1
    4bf2:	98 87       	std	Y+8, r25	; 0x08
    4bf4:	8f 83       	std	Y+7, r24	; 0x07
    4bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bf8:	88 23       	and	r24, r24
    4bfa:	c1 f6       	brne	.-80     	; 0x4bac <newToken+0x36>
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);
    4bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    4c00:	0e 94 67 6d 	call	0xdace	; 0xdace <free>

	return newTypeValue(VDM_TOKEN, (TypedValueType
	)
			{ .intVal = hashVal });
    4c04:	19 86       	std	Y+9, r1	; 0x09
    4c06:	1a 86       	std	Y+10, r1	; 0x0a
    4c08:	1b 86       	std	Y+11, r1	; 0x0b
    4c0a:	1c 86       	std	Y+12, r1	; 0x0c
    4c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c10:	9a 87       	std	Y+10, r25	; 0x0a
    4c12:	89 87       	std	Y+9, r24	; 0x09
	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);

	return newTypeValue(VDM_TOKEN, (TypedValueType
    4c14:	29 85       	ldd	r18, Y+9	; 0x09
    4c16:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c18:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c1c:	8a e0       	ldi	r24, 0x0A	; 10
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	ba 01       	movw	r22, r20
    4c22:	a9 01       	movw	r20, r18
    4c24:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .intVal = hashVal });
}
    4c28:	2f 96       	adiw	r28, 0x0f	; 15
    4c2a:	0f b6       	in	r0, 0x3f	; 63
    4c2c:	f8 94       	cli
    4c2e:	de bf       	out	0x3e, r29	; 62
    4c30:	0f be       	out	0x3f, r0	; 63
    4c32:	cd bf       	out	0x3d, r28	; 61
    4c34:	cf 91       	pop	r28
    4c36:	df 91       	pop	r29
    4c38:	08 95       	ret

00004c3a <newCollection>:

TVP newCollection(size_t size, vdmtype type)
{
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	cd b7       	in	r28, 0x3d	; 61
    4c40:	de b7       	in	r29, 0x3e	; 62
    4c42:	2c 97       	sbiw	r28, 0x0c	; 12
    4c44:	0f b6       	in	r0, 0x3f	; 63
    4c46:	f8 94       	cli
    4c48:	de bf       	out	0x3e, r29	; 62
    4c4a:	0f be       	out	0x3f, r0	; 63
    4c4c:	cd bf       	out	0x3d, r28	; 61
    4c4e:	98 87       	std	Y+8, r25	; 0x08
    4c50:	8f 83       	std	Y+7, r24	; 0x07
    4c52:	7a 87       	std	Y+10, r23	; 0x0a
    4c54:	69 87       	std	Y+9, r22	; 0x09
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4c56:	84 e0       	ldi	r24, 0x04	; 4
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    4c5e:	9a 83       	std	Y+2, r25	; 0x02
    4c60:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4c62:	89 81       	ldd	r24, Y+1	; 0x01
    4c64:	9a 81       	ldd	r25, Y+2	; 0x02
    4c66:	00 97       	sbiw	r24, 0x00	; 0
    4c68:	11 f4       	brne	.+4      	; 0x4c6e <newCollection+0x34>
    4c6a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ptr->size = size;
    4c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    4c70:	98 85       	ldd	r25, Y+8	; 0x08
    4c72:	e9 81       	ldd	r30, Y+1	; 0x01
    4c74:	fa 81       	ldd	r31, Y+2	; 0x02
    4c76:	93 83       	std	Z+3, r25	; 0x03
    4c78:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c7c:	98 85       	ldd	r25, Y+8	; 0x08
    4c7e:	00 97       	sbiw	r24, 0x00	; 0
    4c80:	29 f0       	breq	.+10     	; 0x4c8c <newCollection+0x52>
    4c82:	8f 81       	ldd	r24, Y+7	; 0x07
    4c84:	98 85       	ldd	r25, Y+8	; 0x08
    4c86:	9c 87       	std	Y+12, r25	; 0x0c
    4c88:	8b 87       	std	Y+11, r24	; 0x0b
    4c8a:	04 c0       	rjmp	.+8      	; 0x4c94 <newCollection+0x5a>
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	9c 87       	std	Y+12, r25	; 0x0c
    4c92:	8b 87       	std	Y+11, r24	; 0x0b
    4c94:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c96:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c98:	62 e0       	ldi	r22, 0x02	; 2
    4c9a:	70 e0       	ldi	r23, 0x00	; 0
    4c9c:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    4ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ca4:	91 83       	std	Z+1, r25	; 0x01
    4ca6:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    4caa:	fa 81       	ldd	r31, Y+2	; 0x02
    4cac:	80 81       	ld	r24, Z
    4cae:	91 81       	ldd	r25, Z+1	; 0x01
    4cb0:	00 97       	sbiw	r24, 0x00	; 0
    4cb2:	11 f4       	brne	.+4      	; 0x4cb8 <newCollection+0x7e>
    4cb4:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newTypeValue(type, (TypedValueType
	)
			{ .ptr = ptr });
    4cb8:	1b 82       	std	Y+3, r1	; 0x03
    4cba:	1c 82       	std	Y+4, r1	; 0x04
    4cbc:	1d 82       	std	Y+5, r1	; 0x05
    4cbe:	1e 82       	std	Y+6, r1	; 0x06
    4cc0:	89 81       	ldd	r24, Y+1	; 0x01
    4cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc4:	9c 83       	std	Y+4, r25	; 0x04
    4cc6:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValue(type, (TypedValueType
    4cc8:	89 85       	ldd	r24, Y+9	; 0x09
    4cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    4cce:	3c 81       	ldd	r19, Y+4	; 0x04
    4cd0:	4d 81       	ldd	r20, Y+5	; 0x05
    4cd2:	5e 81       	ldd	r21, Y+6	; 0x06
    4cd4:	ba 01       	movw	r22, r20
    4cd6:	a9 01       	movw	r20, r18
    4cd8:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .ptr = ptr });
}
    4cdc:	2c 96       	adiw	r28, 0x0c	; 12
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	f8 94       	cli
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	cf 91       	pop	r28
    4cea:	df 91       	pop	r29
    4cec:	08 95       	ret

00004cee <newCollectionPrealloc>:

TVP newCollectionPrealloc(size_t size, size_t expected_size, vdmtype type)
{
    4cee:	df 93       	push	r29
    4cf0:	cf 93       	push	r28
    4cf2:	cd b7       	in	r28, 0x3d	; 61
    4cf4:	de b7       	in	r29, 0x3e	; 62
    4cf6:	2c 97       	sbiw	r28, 0x0c	; 12
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	f8 94       	cli
    4cfc:	de bf       	out	0x3e, r29	; 62
    4cfe:	0f be       	out	0x3f, r0	; 63
    4d00:	cd bf       	out	0x3d, r28	; 61
    4d02:	98 87       	std	Y+8, r25	; 0x08
    4d04:	8f 83       	std	Y+7, r24	; 0x07
    4d06:	7a 87       	std	Y+10, r23	; 0x0a
    4d08:	69 87       	std	Y+9, r22	; 0x09
    4d0a:	5c 87       	std	Y+12, r21	; 0x0c
    4d0c:	4b 87       	std	Y+11, r20	; 0x0b
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4d0e:	84 e0       	ldi	r24, 0x04	; 4
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    4d16:	9a 83       	std	Y+2, r25	; 0x02
    4d18:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1e:	00 97       	sbiw	r24, 0x00	; 0
    4d20:	11 f4       	brne	.+4      	; 0x4d26 <newCollectionPrealloc+0x38>
    4d22:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ptr->size = size;
    4d26:	8f 81       	ldd	r24, Y+7	; 0x07
    4d28:	98 85       	ldd	r25, Y+8	; 0x08
    4d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    4d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    4d2e:	93 83       	std	Z+3, r25	; 0x03
    4d30:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4d32:	89 85       	ldd	r24, Y+9	; 0x09
    4d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d36:	62 e0       	ldi	r22, 0x02	; 2
    4d38:	70 e0       	ldi	r23, 0x00	; 0
    4d3a:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    4d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    4d40:	fa 81       	ldd	r31, Y+2	; 0x02
    4d42:	91 83       	std	Z+1, r25	; 0x01
    4d44:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4d46:	e9 81       	ldd	r30, Y+1	; 0x01
    4d48:	fa 81       	ldd	r31, Y+2	; 0x02
    4d4a:	80 81       	ld	r24, Z
    4d4c:	91 81       	ldd	r25, Z+1	; 0x01
    4d4e:	00 97       	sbiw	r24, 0x00	; 0
    4d50:	11 f4       	brne	.+4      	; 0x4d56 <newCollectionPrealloc+0x68>
    4d52:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newTypeValue(type, (TypedValueType
	)
			{ .ptr = ptr });
    4d56:	1b 82       	std	Y+3, r1	; 0x03
    4d58:	1c 82       	std	Y+4, r1	; 0x04
    4d5a:	1d 82       	std	Y+5, r1	; 0x05
    4d5c:	1e 82       	std	Y+6, r1	; 0x06
    4d5e:	89 81       	ldd	r24, Y+1	; 0x01
    4d60:	9a 81       	ldd	r25, Y+2	; 0x02
    4d62:	9c 83       	std	Y+4, r25	; 0x04
    4d64:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValue(type, (TypedValueType
    4d66:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d68:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    4d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    4d6e:	4d 81       	ldd	r20, Y+5	; 0x05
    4d70:	5e 81       	ldd	r21, Y+6	; 0x06
    4d72:	ba 01       	movw	r22, r20
    4d74:	a9 01       	movw	r20, r18
    4d76:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
	)
			{ .ptr = ptr });
}
    4d7a:	2c 96       	adiw	r28, 0x0c	; 12
    4d7c:	0f b6       	in	r0, 0x3f	; 63
    4d7e:	f8 94       	cli
    4d80:	de bf       	out	0x3e, r29	; 62
    4d82:	0f be       	out	0x3f, r0	; 63
    4d84:	cd bf       	out	0x3d, r28	; 61
    4d86:	cf 91       	pop	r28
    4d88:	df 91       	pop	r29
    4d8a:	08 95       	ret

00004d8c <newCollectionGC>:

TVP newCollectionGC(size_t size, vdmtype type, TVP *from)
{
    4d8c:	df 93       	push	r29
    4d8e:	cf 93       	push	r28
    4d90:	cd b7       	in	r28, 0x3d	; 61
    4d92:	de b7       	in	r29, 0x3e	; 62
    4d94:	2e 97       	sbiw	r28, 0x0e	; 14
    4d96:	0f b6       	in	r0, 0x3f	; 63
    4d98:	f8 94       	cli
    4d9a:	de bf       	out	0x3e, r29	; 62
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	cd bf       	out	0x3d, r28	; 61
    4da0:	98 87       	std	Y+8, r25	; 0x08
    4da2:	8f 83       	std	Y+7, r24	; 0x07
    4da4:	7a 87       	std	Y+10, r23	; 0x0a
    4da6:	69 87       	std	Y+9, r22	; 0x09
    4da8:	5c 87       	std	Y+12, r21	; 0x0c
    4daa:	4b 87       	std	Y+11, r20	; 0x0b
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4dac:	84 e0       	ldi	r24, 0x04	; 4
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    4db4:	9a 83       	std	Y+2, r25	; 0x02
    4db6:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4db8:	89 81       	ldd	r24, Y+1	; 0x01
    4dba:	9a 81       	ldd	r25, Y+2	; 0x02
    4dbc:	00 97       	sbiw	r24, 0x00	; 0
    4dbe:	11 f4       	brne	.+4      	; 0x4dc4 <newCollectionGC+0x38>
    4dc0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ptr->size = size;
    4dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    4dc6:	98 85       	ldd	r25, Y+8	; 0x08
    4dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    4dca:	fa 81       	ldd	r31, Y+2	; 0x02
    4dcc:	93 83       	std	Z+3, r25	; 0x03
    4dce:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4dd0:	8f 81       	ldd	r24, Y+7	; 0x07
    4dd2:	98 85       	ldd	r25, Y+8	; 0x08
    4dd4:	00 97       	sbiw	r24, 0x00	; 0
    4dd6:	29 f0       	breq	.+10     	; 0x4de2 <newCollectionGC+0x56>
    4dd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4dda:	98 85       	ldd	r25, Y+8	; 0x08
    4ddc:	9e 87       	std	Y+14, r25	; 0x0e
    4dde:	8d 87       	std	Y+13, r24	; 0x0d
    4de0:	04 c0       	rjmp	.+8      	; 0x4dea <newCollectionGC+0x5e>
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	9e 87       	std	Y+14, r25	; 0x0e
    4de8:	8d 87       	std	Y+13, r24	; 0x0d
    4dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dee:	62 e0       	ldi	r22, 0x02	; 2
    4df0:	70 e0       	ldi	r23, 0x00	; 0
    4df2:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    4df6:	e9 81       	ldd	r30, Y+1	; 0x01
    4df8:	fa 81       	ldd	r31, Y+2	; 0x02
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4dfe:	e9 81       	ldd	r30, Y+1	; 0x01
    4e00:	fa 81       	ldd	r31, Y+2	; 0x02
    4e02:	80 81       	ld	r24, Z
    4e04:	91 81       	ldd	r25, Z+1	; 0x01
    4e06:	00 97       	sbiw	r24, 0x00	; 0
    4e08:	11 f4       	brne	.+4      	; 0x4e0e <newCollectionGC+0x82>
    4e0a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newTypeValueGC(type, (TypedValueType
	)
			{ .ptr = ptr }, from);
    4e0e:	1b 82       	std	Y+3, r1	; 0x03
    4e10:	1c 82       	std	Y+4, r1	; 0x04
    4e12:	1d 82       	std	Y+5, r1	; 0x05
    4e14:	1e 82       	std	Y+6, r1	; 0x06
    4e16:	89 81       	ldd	r24, Y+1	; 0x01
    4e18:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1a:	9c 83       	std	Y+4, r25	; 0x04
    4e1c:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValueGC(type, (TypedValueType
    4e1e:	89 85       	ldd	r24, Y+9	; 0x09
    4e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e22:	2b 81       	ldd	r18, Y+3	; 0x03
    4e24:	3c 81       	ldd	r19, Y+4	; 0x04
    4e26:	4d 81       	ldd	r20, Y+5	; 0x05
    4e28:	5e 81       	ldd	r21, Y+6	; 0x06
    4e2a:	eb 85       	ldd	r30, Y+11	; 0x0b
    4e2c:	fc 85       	ldd	r31, Y+12	; 0x0c
    4e2e:	ba 01       	movw	r22, r20
    4e30:	a9 01       	movw	r20, r18
    4e32:	9f 01       	movw	r18, r30
    4e34:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .ptr = ptr }, from);
}
    4e38:	2e 96       	adiw	r28, 0x0e	; 14
    4e3a:	0f b6       	in	r0, 0x3f	; 63
    4e3c:	f8 94       	cli
    4e3e:	de bf       	out	0x3e, r29	; 62
    4e40:	0f be       	out	0x3f, r0	; 63
    4e42:	cd bf       	out	0x3d, r28	; 61
    4e44:	cf 91       	pop	r28
    4e46:	df 91       	pop	r29
    4e48:	08 95       	ret

00004e4a <newCollectionPreallocGC>:

TVP newCollectionPreallocGC(size_t size, size_t expected_size, vdmtype type, TVP *from)
{
    4e4a:	df 93       	push	r29
    4e4c:	cf 93       	push	r28
    4e4e:	cd b7       	in	r28, 0x3d	; 61
    4e50:	de b7       	in	r29, 0x3e	; 62
    4e52:	2e 97       	sbiw	r28, 0x0e	; 14
    4e54:	0f b6       	in	r0, 0x3f	; 63
    4e56:	f8 94       	cli
    4e58:	de bf       	out	0x3e, r29	; 62
    4e5a:	0f be       	out	0x3f, r0	; 63
    4e5c:	cd bf       	out	0x3d, r28	; 61
    4e5e:	98 87       	std	Y+8, r25	; 0x08
    4e60:	8f 83       	std	Y+7, r24	; 0x07
    4e62:	7a 87       	std	Y+10, r23	; 0x0a
    4e64:	69 87       	std	Y+9, r22	; 0x09
    4e66:	5c 87       	std	Y+12, r21	; 0x0c
    4e68:	4b 87       	std	Y+11, r20	; 0x0b
    4e6a:	3e 87       	std	Y+14, r19	; 0x0e
    4e6c:	2d 87       	std	Y+13, r18	; 0x0d
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4e6e:	84 e0       	ldi	r24, 0x04	; 4
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    4e76:	9a 83       	std	Y+2, r25	; 0x02
    4e78:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4e7a:	89 81       	ldd	r24, Y+1	; 0x01
    4e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7e:	00 97       	sbiw	r24, 0x00	; 0
    4e80:	11 f4       	brne	.+4      	; 0x4e86 <newCollectionPreallocGC+0x3c>
    4e82:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ptr->size = size;
    4e86:	8f 81       	ldd	r24, Y+7	; 0x07
    4e88:	98 85       	ldd	r25, Y+8	; 0x08
    4e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e8e:	93 83       	std	Z+3, r25	; 0x03
    4e90:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4e92:	89 85       	ldd	r24, Y+9	; 0x09
    4e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e96:	62 e0       	ldi	r22, 0x02	; 2
    4e98:	70 e0       	ldi	r23, 0x00	; 0
    4e9a:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    4e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    4ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ea2:	91 83       	std	Z+1, r25	; 0x01
    4ea4:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eaa:	80 81       	ld	r24, Z
    4eac:	91 81       	ldd	r25, Z+1	; 0x01
    4eae:	00 97       	sbiw	r24, 0x00	; 0
    4eb0:	11 f4       	brne	.+4      	; 0x4eb6 <newCollectionPreallocGC+0x6c>
    4eb2:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newTypeValueGC(type, (TypedValueType
	)
			{ .ptr = ptr }, from);
    4eb6:	1b 82       	std	Y+3, r1	; 0x03
    4eb8:	1c 82       	std	Y+4, r1	; 0x04
    4eba:	1d 82       	std	Y+5, r1	; 0x05
    4ebc:	1e 82       	std	Y+6, r1	; 0x06
    4ebe:	89 81       	ldd	r24, Y+1	; 0x01
    4ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec2:	9c 83       	std	Y+4, r25	; 0x04
    4ec4:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValueGC(type, (TypedValueType
    4ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4eca:	2b 81       	ldd	r18, Y+3	; 0x03
    4ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    4ece:	4d 81       	ldd	r20, Y+5	; 0x05
    4ed0:	5e 81       	ldd	r21, Y+6	; 0x06
    4ed2:	ed 85       	ldd	r30, Y+13	; 0x0d
    4ed4:	fe 85       	ldd	r31, Y+14	; 0x0e
    4ed6:	ba 01       	movw	r22, r20
    4ed8:	a9 01       	movw	r20, r18
    4eda:	9f 01       	movw	r18, r30
    4edc:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .ptr = ptr }, from);
}
    4ee0:	2e 96       	adiw	r28, 0x0e	; 14
    4ee2:	0f b6       	in	r0, 0x3f	; 63
    4ee4:	f8 94       	cli
    4ee6:	de bf       	out	0x3e, r29	; 62
    4ee8:	0f be       	out	0x3f, r0	; 63
    4eea:	cd bf       	out	0x3d, r28	; 61
    4eec:	cf 91       	pop	r28
    4eee:	df 91       	pop	r29
    4ef0:	08 95       	ret

00004ef2 <newCollectionWithValues>:

TVP newCollectionWithValues(size_t size, vdmtype type, TVP* elements)
{
    4ef2:	0f 93       	push	r16
    4ef4:	1f 93       	push	r17
    4ef6:	df 93       	push	r29
    4ef8:	cf 93       	push	r28
    4efa:	cd b7       	in	r28, 0x3d	; 61
    4efc:	de b7       	in	r29, 0x3e	; 62
    4efe:	2c 97       	sbiw	r28, 0x0c	; 12
    4f00:	0f b6       	in	r0, 0x3f	; 63
    4f02:	f8 94       	cli
    4f04:	de bf       	out	0x3e, r29	; 62
    4f06:	0f be       	out	0x3f, r0	; 63
    4f08:	cd bf       	out	0x3d, r28	; 61
    4f0a:	98 87       	std	Y+8, r25	; 0x08
    4f0c:	8f 83       	std	Y+7, r24	; 0x07
    4f0e:	7a 87       	std	Y+10, r23	; 0x0a
    4f10:	69 87       	std	Y+9, r22	; 0x09
    4f12:	5c 87       	std	Y+12, r21	; 0x0c
    4f14:	4b 87       	std	Y+11, r20	; 0x0b
	int i;

	TVP product = newCollection(size,type);
    4f16:	8f 81       	ldd	r24, Y+7	; 0x07
    4f18:	98 85       	ldd	r25, Y+8	; 0x08
    4f1a:	29 85       	ldd	r18, Y+9	; 0x09
    4f1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f1e:	b9 01       	movw	r22, r18
    4f20:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <newCollection>
    4f24:	9c 83       	std	Y+4, r25	; 0x04
    4f26:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,product);
    4f28:	eb 81       	ldd	r30, Y+3	; 0x03
    4f2a:	fc 81       	ldd	r31, Y+4	; 0x04
    4f2c:	84 81       	ldd	r24, Z+4	; 0x04
    4f2e:	95 81       	ldd	r25, Z+5	; 0x05
    4f30:	9a 83       	std	Y+2, r25	; 0x02
    4f32:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < size; i++)
    4f34:	1e 82       	std	Y+6, r1	; 0x06
    4f36:	1d 82       	std	Y+5, r1	; 0x05
    4f38:	21 c0       	rjmp	.+66     	; 0x4f7c <newCollectionWithValues+0x8a>
	{
		col->value[i]= vdmClone(elements[i]);
    4f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    4f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    4f3e:	20 81       	ld	r18, Z
    4f40:	31 81       	ldd	r19, Z+1	; 0x01
    4f42:	8d 81       	ldd	r24, Y+5	; 0x05
    4f44:	9e 81       	ldd	r25, Y+6	; 0x06
    4f46:	88 0f       	add	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	89 01       	movw	r16, r18
    4f4c:	08 0f       	add	r16, r24
    4f4e:	19 1f       	adc	r17, r25
    4f50:	8d 81       	ldd	r24, Y+5	; 0x05
    4f52:	9e 81       	ldd	r25, Y+6	; 0x06
    4f54:	9c 01       	movw	r18, r24
    4f56:	22 0f       	add	r18, r18
    4f58:	33 1f       	adc	r19, r19
    4f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f5e:	fc 01       	movw	r30, r24
    4f60:	e2 0f       	add	r30, r18
    4f62:	f3 1f       	adc	r31, r19
    4f64:	80 81       	ld	r24, Z
    4f66:	91 81       	ldd	r25, Z+1	; 0x01
    4f68:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    4f6c:	f8 01       	movw	r30, r16
    4f6e:	91 83       	std	Z+1, r25	; 0x01
    4f70:	80 83       	st	Z, r24
	int i;

	TVP product = newCollection(size,type);
	UNWRAP_COLLECTION(col,product);

	for (i = 0; i < size; i++)
    4f72:	8d 81       	ldd	r24, Y+5	; 0x05
    4f74:	9e 81       	ldd	r25, Y+6	; 0x06
    4f76:	01 96       	adiw	r24, 0x01	; 1
    4f78:	9e 83       	std	Y+6, r25	; 0x06
    4f7a:	8d 83       	std	Y+5, r24	; 0x05
    4f7c:	2d 81       	ldd	r18, Y+5	; 0x05
    4f7e:	3e 81       	ldd	r19, Y+6	; 0x06
    4f80:	8f 81       	ldd	r24, Y+7	; 0x07
    4f82:	98 85       	ldd	r25, Y+8	; 0x08
    4f84:	28 17       	cp	r18, r24
    4f86:	39 07       	cpc	r19, r25
    4f88:	c0 f2       	brcs	.-80     	; 0x4f3a <newCollectionWithValues+0x48>
	{
		col->value[i]= vdmClone(elements[i]);
	}
	return product;
    4f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4f8e:	2c 96       	adiw	r28, 0x0c	; 12
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	de bf       	out	0x3e, r29	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	cd bf       	out	0x3d, r28	; 61
    4f9a:	cf 91       	pop	r28
    4f9c:	df 91       	pop	r29
    4f9e:	1f 91       	pop	r17
    4fa0:	0f 91       	pop	r16
    4fa2:	08 95       	ret

00004fa4 <newCollectionWithValuesPrealloc>:

TVP newCollectionWithValuesPrealloc(size_t size, size_t expected_size, vdmtype type, TVP* elements)
{
    4fa4:	0f 93       	push	r16
    4fa6:	1f 93       	push	r17
    4fa8:	df 93       	push	r29
    4faa:	cf 93       	push	r28
    4fac:	cd b7       	in	r28, 0x3d	; 61
    4fae:	de b7       	in	r29, 0x3e	; 62
    4fb0:	2e 97       	sbiw	r28, 0x0e	; 14
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	98 87       	std	Y+8, r25	; 0x08
    4fbe:	8f 83       	std	Y+7, r24	; 0x07
    4fc0:	7a 87       	std	Y+10, r23	; 0x0a
    4fc2:	69 87       	std	Y+9, r22	; 0x09
    4fc4:	5c 87       	std	Y+12, r21	; 0x0c
    4fc6:	4b 87       	std	Y+11, r20	; 0x0b
    4fc8:	3e 87       	std	Y+14, r19	; 0x0e
    4fca:	2d 87       	std	Y+13, r18	; 0x0d
	int i;

	TVP product = newCollectionPrealloc(size, expected_size, type);
    4fcc:	8f 81       	ldd	r24, Y+7	; 0x07
    4fce:	98 85       	ldd	r25, Y+8	; 0x08
    4fd0:	29 85       	ldd	r18, Y+9	; 0x09
    4fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    4fd4:	4b 85       	ldd	r20, Y+11	; 0x0b
    4fd6:	5c 85       	ldd	r21, Y+12	; 0x0c
    4fd8:	b9 01       	movw	r22, r18
    4fda:	0e 94 77 26 	call	0x4cee	; 0x4cee <newCollectionPrealloc>
    4fde:	9c 83       	std	Y+4, r25	; 0x04
    4fe0:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,product);
    4fe2:	eb 81       	ldd	r30, Y+3	; 0x03
    4fe4:	fc 81       	ldd	r31, Y+4	; 0x04
    4fe6:	84 81       	ldd	r24, Z+4	; 0x04
    4fe8:	95 81       	ldd	r25, Z+5	; 0x05
    4fea:	9a 83       	std	Y+2, r25	; 0x02
    4fec:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < size; i++)
    4fee:	1e 82       	std	Y+6, r1	; 0x06
    4ff0:	1d 82       	std	Y+5, r1	; 0x05
    4ff2:	21 c0       	rjmp	.+66     	; 0x5036 <newCollectionWithValuesPrealloc+0x92>
	{
		col->value[i]= vdmClone(elements[i]);
    4ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ff8:	20 81       	ld	r18, Z
    4ffa:	31 81       	ldd	r19, Z+1	; 0x01
    4ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    5000:	88 0f       	add	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	89 01       	movw	r16, r18
    5006:	08 0f       	add	r16, r24
    5008:	19 1f       	adc	r17, r25
    500a:	8d 81       	ldd	r24, Y+5	; 0x05
    500c:	9e 81       	ldd	r25, Y+6	; 0x06
    500e:	9c 01       	movw	r18, r24
    5010:	22 0f       	add	r18, r18
    5012:	33 1f       	adc	r19, r19
    5014:	8d 85       	ldd	r24, Y+13	; 0x0d
    5016:	9e 85       	ldd	r25, Y+14	; 0x0e
    5018:	fc 01       	movw	r30, r24
    501a:	e2 0f       	add	r30, r18
    501c:	f3 1f       	adc	r31, r19
    501e:	80 81       	ld	r24, Z
    5020:	91 81       	ldd	r25, Z+1	; 0x01
    5022:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    5026:	f8 01       	movw	r30, r16
    5028:	91 83       	std	Z+1, r25	; 0x01
    502a:	80 83       	st	Z, r24
	int i;

	TVP product = newCollectionPrealloc(size, expected_size, type);
	UNWRAP_COLLECTION(col,product);

	for (i = 0; i < size; i++)
    502c:	8d 81       	ldd	r24, Y+5	; 0x05
    502e:	9e 81       	ldd	r25, Y+6	; 0x06
    5030:	01 96       	adiw	r24, 0x01	; 1
    5032:	9e 83       	std	Y+6, r25	; 0x06
    5034:	8d 83       	std	Y+5, r24	; 0x05
    5036:	2d 81       	ldd	r18, Y+5	; 0x05
    5038:	3e 81       	ldd	r19, Y+6	; 0x06
    503a:	8f 81       	ldd	r24, Y+7	; 0x07
    503c:	98 85       	ldd	r25, Y+8	; 0x08
    503e:	28 17       	cp	r18, r24
    5040:	39 07       	cpc	r19, r25
    5042:	c0 f2       	brcs	.-80     	; 0x4ff4 <newCollectionWithValuesPrealloc+0x50>
	{
		col->value[i]= vdmClone(elements[i]);
	}
	return product;
    5044:	8b 81       	ldd	r24, Y+3	; 0x03
    5046:	9c 81       	ldd	r25, Y+4	; 0x04
}
    5048:	2e 96       	adiw	r28, 0x0e	; 14
    504a:	0f b6       	in	r0, 0x3f	; 63
    504c:	f8 94       	cli
    504e:	de bf       	out	0x3e, r29	; 62
    5050:	0f be       	out	0x3f, r0	; 63
    5052:	cd bf       	out	0x3d, r28	; 61
    5054:	cf 91       	pop	r28
    5056:	df 91       	pop	r29
    5058:	1f 91       	pop	r17
    505a:	0f 91       	pop	r16
    505c:	08 95       	ret

0000505e <newCollectionWithValuesGC>:

TVP newCollectionWithValuesGC(size_t size, vdmtype type, TVP* elements, TVP *from)
{
    505e:	0f 93       	push	r16
    5060:	1f 93       	push	r17
    5062:	df 93       	push	r29
    5064:	cf 93       	push	r28
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	2e 97       	sbiw	r28, 0x0e	; 14
    506c:	0f b6       	in	r0, 0x3f	; 63
    506e:	f8 94       	cli
    5070:	de bf       	out	0x3e, r29	; 62
    5072:	0f be       	out	0x3f, r0	; 63
    5074:	cd bf       	out	0x3d, r28	; 61
    5076:	98 87       	std	Y+8, r25	; 0x08
    5078:	8f 83       	std	Y+7, r24	; 0x07
    507a:	7a 87       	std	Y+10, r23	; 0x0a
    507c:	69 87       	std	Y+9, r22	; 0x09
    507e:	5c 87       	std	Y+12, r21	; 0x0c
    5080:	4b 87       	std	Y+11, r20	; 0x0b
    5082:	3e 87       	std	Y+14, r19	; 0x0e
    5084:	2d 87       	std	Y+13, r18	; 0x0d
	int i;

	TVP product = newCollectionGC(size, type, from);
    5086:	8f 81       	ldd	r24, Y+7	; 0x07
    5088:	98 85       	ldd	r25, Y+8	; 0x08
    508a:	29 85       	ldd	r18, Y+9	; 0x09
    508c:	3a 85       	ldd	r19, Y+10	; 0x0a
    508e:	4d 85       	ldd	r20, Y+13	; 0x0d
    5090:	5e 85       	ldd	r21, Y+14	; 0x0e
    5092:	b9 01       	movw	r22, r18
    5094:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <newCollectionGC>
    5098:	9c 83       	std	Y+4, r25	; 0x04
    509a:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, product);
    509c:	eb 81       	ldd	r30, Y+3	; 0x03
    509e:	fc 81       	ldd	r31, Y+4	; 0x04
    50a0:	84 81       	ldd	r24, Z+4	; 0x04
    50a2:	95 81       	ldd	r25, Z+5	; 0x05
    50a4:	9a 83       	std	Y+2, r25	; 0x02
    50a6:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < size; i++)
    50a8:	1e 82       	std	Y+6, r1	; 0x06
    50aa:	1d 82       	std	Y+5, r1	; 0x05
    50ac:	21 c0       	rjmp	.+66     	; 0x50f0 <newCollectionWithValuesGC+0x92>
	{
		col->value[i]= vdmClone(elements[i]);
    50ae:	e9 81       	ldd	r30, Y+1	; 0x01
    50b0:	fa 81       	ldd	r31, Y+2	; 0x02
    50b2:	20 81       	ld	r18, Z
    50b4:	31 81       	ldd	r19, Z+1	; 0x01
    50b6:	8d 81       	ldd	r24, Y+5	; 0x05
    50b8:	9e 81       	ldd	r25, Y+6	; 0x06
    50ba:	88 0f       	add	r24, r24
    50bc:	99 1f       	adc	r25, r25
    50be:	89 01       	movw	r16, r18
    50c0:	08 0f       	add	r16, r24
    50c2:	19 1f       	adc	r17, r25
    50c4:	8d 81       	ldd	r24, Y+5	; 0x05
    50c6:	9e 81       	ldd	r25, Y+6	; 0x06
    50c8:	9c 01       	movw	r18, r24
    50ca:	22 0f       	add	r18, r18
    50cc:	33 1f       	adc	r19, r19
    50ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    50d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    50d2:	fc 01       	movw	r30, r24
    50d4:	e2 0f       	add	r30, r18
    50d6:	f3 1f       	adc	r31, r19
    50d8:	80 81       	ld	r24, Z
    50da:	91 81       	ldd	r25, Z+1	; 0x01
    50dc:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    50e0:	f8 01       	movw	r30, r16
    50e2:	91 83       	std	Z+1, r25	; 0x01
    50e4:	80 83       	st	Z, r24
	int i;

	TVP product = newCollectionGC(size, type, from);
	UNWRAP_COLLECTION(col, product);

	for (i = 0; i < size; i++)
    50e6:	8d 81       	ldd	r24, Y+5	; 0x05
    50e8:	9e 81       	ldd	r25, Y+6	; 0x06
    50ea:	01 96       	adiw	r24, 0x01	; 1
    50ec:	9e 83       	std	Y+6, r25	; 0x06
    50ee:	8d 83       	std	Y+5, r24	; 0x05
    50f0:	2d 81       	ldd	r18, Y+5	; 0x05
    50f2:	3e 81       	ldd	r19, Y+6	; 0x06
    50f4:	8f 81       	ldd	r24, Y+7	; 0x07
    50f6:	98 85       	ldd	r25, Y+8	; 0x08
    50f8:	28 17       	cp	r18, r24
    50fa:	39 07       	cpc	r19, r25
    50fc:	c0 f2       	brcs	.-80     	; 0x50ae <newCollectionWithValuesGC+0x50>
	{
		col->value[i]= vdmClone(elements[i]);
	}

	return product;
    50fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5100:	9c 81       	ldd	r25, Y+4	; 0x04
}
    5102:	2e 96       	adiw	r28, 0x0e	; 14
    5104:	0f b6       	in	r0, 0x3f	; 63
    5106:	f8 94       	cli
    5108:	de bf       	out	0x3e, r29	; 62
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	cd bf       	out	0x3d, r28	; 61
    510e:	cf 91       	pop	r28
    5110:	df 91       	pop	r29
    5112:	1f 91       	pop	r17
    5114:	0f 91       	pop	r16
    5116:	08 95       	ret

00005118 <vdmCollectionSize>:

int vdmCollectionSize(TVP collection)
{
    5118:	df 93       	push	r29
    511a:	cf 93       	push	r28
    511c:	00 d0       	rcall	.+0      	; 0x511e <vdmCollectionSize+0x6>
    511e:	00 d0       	rcall	.+0      	; 0x5120 <vdmCollectionSize+0x8>
    5120:	cd b7       	in	r28, 0x3d	; 61
    5122:	de b7       	in	r29, 0x3e	; 62
    5124:	9c 83       	std	Y+4, r25	; 0x04
    5126:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK_COLLECTION(collection);
    5128:	eb 81       	ldd	r30, Y+3	; 0x03
    512a:	fc 81       	ldd	r31, Y+4	; 0x04
    512c:	80 81       	ld	r24, Z
    512e:	91 81       	ldd	r25, Z+1	; 0x01
    5130:	88 30       	cpi	r24, 0x08	; 8
    5132:	91 05       	cpc	r25, r1
    5134:	49 f0       	breq	.+18     	; 0x5148 <vdmCollectionSize+0x30>
    5136:	eb 81       	ldd	r30, Y+3	; 0x03
    5138:	fc 81       	ldd	r31, Y+4	; 0x04
    513a:	80 81       	ld	r24, Z
    513c:	91 81       	ldd	r25, Z+1	; 0x01
    513e:	87 30       	cpi	r24, 0x07	; 7
    5140:	91 05       	cpc	r25, r1
    5142:	11 f0       	breq	.+4      	; 0x5148 <vdmCollectionSize+0x30>
    5144:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,collection);
    5148:	eb 81       	ldd	r30, Y+3	; 0x03
    514a:	fc 81       	ldd	r31, Y+4	; 0x04
    514c:	84 81       	ldd	r24, Z+4	; 0x04
    514e:	95 81       	ldd	r25, Z+5	; 0x05
    5150:	9a 83       	std	Y+2, r25	; 0x02
    5152:	89 83       	std	Y+1, r24	; 0x01
	return col->size;
    5154:	e9 81       	ldd	r30, Y+1	; 0x01
    5156:	fa 81       	ldd	r31, Y+2	; 0x02
    5158:	82 81       	ldd	r24, Z+2	; 0x02
    515a:	93 81       	ldd	r25, Z+3	; 0x03
}
    515c:	0f 90       	pop	r0
    515e:	0f 90       	pop	r0
    5160:	0f 90       	pop	r0
    5162:	0f 90       	pop	r0
    5164:	cf 91       	pop	r28
    5166:	df 91       	pop	r29
    5168:	08 95       	ret

0000516a <vdmCollectionIndex>:

TVP vdmCollectionIndex(TVP collection,int index)
{
    516a:	df 93       	push	r29
    516c:	cf 93       	push	r28
    516e:	00 d0       	rcall	.+0      	; 0x5170 <vdmCollectionIndex+0x6>
    5170:	00 d0       	rcall	.+0      	; 0x5172 <vdmCollectionIndex+0x8>
    5172:	00 d0       	rcall	.+0      	; 0x5174 <vdmCollectionIndex+0xa>
    5174:	cd b7       	in	r28, 0x3d	; 61
    5176:	de b7       	in	r29, 0x3e	; 62
    5178:	9c 83       	std	Y+4, r25	; 0x04
    517a:	8b 83       	std	Y+3, r24	; 0x03
    517c:	7e 83       	std	Y+6, r23	; 0x06
    517e:	6d 83       	std	Y+5, r22	; 0x05

	ASSERT_CHECK_COLLECTION(collection);
    5180:	eb 81       	ldd	r30, Y+3	; 0x03
    5182:	fc 81       	ldd	r31, Y+4	; 0x04
    5184:	80 81       	ld	r24, Z
    5186:	91 81       	ldd	r25, Z+1	; 0x01
    5188:	88 30       	cpi	r24, 0x08	; 8
    518a:	91 05       	cpc	r25, r1
    518c:	49 f0       	breq	.+18     	; 0x51a0 <vdmCollectionIndex+0x36>
    518e:	eb 81       	ldd	r30, Y+3	; 0x03
    5190:	fc 81       	ldd	r31, Y+4	; 0x04
    5192:	80 81       	ld	r24, Z
    5194:	91 81       	ldd	r25, Z+1	; 0x01
    5196:	87 30       	cpi	r24, 0x07	; 7
    5198:	91 05       	cpc	r25, r1
    519a:	11 f0       	breq	.+4      	; 0x51a0 <vdmCollectionIndex+0x36>
    519c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col,collection);
    51a0:	eb 81       	ldd	r30, Y+3	; 0x03
    51a2:	fc 81       	ldd	r31, Y+4	; 0x04
    51a4:	84 81       	ldd	r24, Z+4	; 0x04
    51a6:	95 81       	ldd	r25, Z+5	; 0x05
    51a8:	9a 83       	std	Y+2, r25	; 0x02
    51aa:	89 83       	std	Y+1, r24	; 0x01

	assert(index>=0 && index<col->size && "invalid index");
    51ac:	8d 81       	ldd	r24, Y+5	; 0x05
    51ae:	9e 81       	ldd	r25, Y+6	; 0x06
    51b0:	99 23       	and	r25, r25
    51b2:	4c f0       	brlt	.+18     	; 0x51c6 <vdmCollectionIndex+0x5c>
    51b4:	e9 81       	ldd	r30, Y+1	; 0x01
    51b6:	fa 81       	ldd	r31, Y+2	; 0x02
    51b8:	22 81       	ldd	r18, Z+2	; 0x02
    51ba:	33 81       	ldd	r19, Z+3	; 0x03
    51bc:	8d 81       	ldd	r24, Y+5	; 0x05
    51be:	9e 81       	ldd	r25, Y+6	; 0x06
    51c0:	82 17       	cp	r24, r18
    51c2:	93 07       	cpc	r25, r19
    51c4:	14 f0       	brlt	.+4      	; 0x51ca <vdmCollectionIndex+0x60>
    51c6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return vdmClone(col->value[index]);
    51ca:	e9 81       	ldd	r30, Y+1	; 0x01
    51cc:	fa 81       	ldd	r31, Y+2	; 0x02
    51ce:	20 81       	ld	r18, Z
    51d0:	31 81       	ldd	r19, Z+1	; 0x01
    51d2:	8d 81       	ldd	r24, Y+5	; 0x05
    51d4:	9e 81       	ldd	r25, Y+6	; 0x06
    51d6:	88 0f       	add	r24, r24
    51d8:	99 1f       	adc	r25, r25
    51da:	f9 01       	movw	r30, r18
    51dc:	e8 0f       	add	r30, r24
    51de:	f9 1f       	adc	r31, r25
    51e0:	80 81       	ld	r24, Z
    51e2:	91 81       	ldd	r25, Z+1	; 0x01
    51e4:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>

}
    51e8:	26 96       	adiw	r28, 0x06	; 6
    51ea:	0f b6       	in	r0, 0x3f	; 63
    51ec:	f8 94       	cli
    51ee:	de bf       	out	0x3e, r29	; 62
    51f0:	0f be       	out	0x3f, r0	; 63
    51f2:	cd bf       	out	0x3d, r28	; 61
    51f4:	cf 91       	pop	r28
    51f6:	df 91       	pop	r29
    51f8:	08 95       	ret

000051fa <vdmClone>:

TVP vdmClone(TVP x)
{
    51fa:	0f 93       	push	r16
    51fc:	1f 93       	push	r17
    51fe:	df 93       	push	r29
    5200:	cf 93       	push	r28
    5202:	cd b7       	in	r28, 0x3d	; 61
    5204:	de b7       	in	r29, 0x3e	; 62
    5206:	66 97       	sbiw	r28, 0x16	; 22
    5208:	0f b6       	in	r0, 0x3f	; 63
    520a:	f8 94       	cli
    520c:	de bf       	out	0x3e, r29	; 62
    520e:	0f be       	out	0x3f, r0	; 63
    5210:	cd bf       	out	0x3d, r28	; 61
    5212:	9a 8b       	std	Y+18, r25	; 0x12
    5214:	89 8b       	std	Y+17, r24	; 0x11
	TVP tmp;

	if(x == NULL)
    5216:	89 89       	ldd	r24, Y+17	; 0x11
    5218:	9a 89       	ldd	r25, Y+18	; 0x12
    521a:	00 97       	sbiw	r24, 0x00	; 0
    521c:	19 f4       	brne	.+6      	; 0x5224 <vdmClone+0x2a>
	{
		return NULL;
    521e:	1e 8a       	std	Y+22, r1	; 0x16
    5220:	1d 8a       	std	Y+21, r1	; 0x15
    5222:	22 c1       	rjmp	.+580    	; 0x5468 <vdmClone+0x26e>
	}

	tmp = newTypeValue(x->type, x->value);
    5224:	e9 89       	ldd	r30, Y+17	; 0x11
    5226:	fa 89       	ldd	r31, Y+18	; 0x12
    5228:	80 81       	ld	r24, Z
    522a:	91 81       	ldd	r25, Z+1	; 0x01
    522c:	e9 89       	ldd	r30, Y+17	; 0x11
    522e:	fa 89       	ldd	r31, Y+18	; 0x12
    5230:	24 81       	ldd	r18, Z+4	; 0x04
    5232:	35 81       	ldd	r19, Z+5	; 0x05
    5234:	46 81       	ldd	r20, Z+6	; 0x06
    5236:	57 81       	ldd	r21, Z+7	; 0x07
    5238:	ba 01       	movw	r22, r20
    523a:	a9 01       	movw	r20, r18
    523c:	0e 94 cb 24 	call	0x4996	; 0x4996 <newTypeValue>
    5240:	98 8b       	std	Y+16, r25	; 0x10
    5242:	8f 87       	std	Y+15, r24	; 0x0f

	/* FIXME vdmClone any pointers  */
	switch (tmp->type)
    5244:	ef 85       	ldd	r30, Y+15	; 0x0f
    5246:	f8 89       	ldd	r31, Y+16	; 0x10
    5248:	80 81       	ld	r24, Z
    524a:	91 81       	ldd	r25, Z+1	; 0x01
    524c:	9c 8b       	std	Y+20, r25	; 0x14
    524e:	8b 8b       	std	Y+19, r24	; 0x13
    5250:	eb 89       	ldd	r30, Y+19	; 0x13
    5252:	fc 89       	ldd	r31, Y+20	; 0x14
    5254:	e8 30       	cpi	r30, 0x08	; 8
    5256:	f1 05       	cpc	r31, r1
    5258:	c9 f0       	breq	.+50     	; 0x528c <vdmClone+0x92>
    525a:	8b 89       	ldd	r24, Y+19	; 0x13
    525c:	9c 89       	ldd	r25, Y+20	; 0x14
    525e:	89 30       	cpi	r24, 0x09	; 9
    5260:	91 05       	cpc	r25, r1
    5262:	38 f4       	brcc	.+14     	; 0x5272 <vdmClone+0x78>
    5264:	eb 89       	ldd	r30, Y+19	; 0x13
    5266:	fc 89       	ldd	r31, Y+20	; 0x14
    5268:	e7 30       	cpi	r30, 0x07	; 7
    526a:	f1 05       	cpc	r31, r1
    526c:	08 f4       	brcc	.+2      	; 0x5270 <vdmClone+0x76>
    526e:	f8 c0       	rjmp	.+496    	; 0x5460 <vdmClone+0x266>
    5270:	74 c0       	rjmp	.+232    	; 0x535a <vdmClone+0x160>
    5272:	8b 89       	ldd	r24, Y+19	; 0x13
    5274:	9c 89       	ldd	r25, Y+20	; 0x14
    5276:	8b 30       	cpi	r24, 0x0B	; 11
    5278:	91 05       	cpc	r25, r1
    527a:	08 f4       	brcc	.+2      	; 0x527e <vdmClone+0x84>
    527c:	f1 c0       	rjmp	.+482    	; 0x5460 <vdmClone+0x266>
    527e:	eb 89       	ldd	r30, Y+19	; 0x13
    5280:	fc 89       	ldd	r31, Y+20	; 0x14
    5282:	eb 30       	cpi	r30, 0x0B	; 11
    5284:	f1 05       	cpc	r31, r1
    5286:	09 f4       	brne	.+2      	; 0x528a <vdmClone+0x90>
    5288:	cf c0       	rjmp	.+414    	; 0x5428 <vdmClone+0x22e>
    528a:	ea c0       	rjmp	.+468    	; 0x5460 <vdmClone+0x266>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    528c:	ef 85       	ldd	r30, Y+15	; 0x0f
    528e:	f8 89       	ldd	r31, Y+16	; 0x10
    5290:	84 81       	ldd	r24, Z+4	; 0x04
    5292:	95 81       	ldd	r25, Z+5	; 0x05
    5294:	9c 87       	std	Y+12, r25	; 0x0c
    5296:	8b 87       	std	Y+11, r24	; 0x0b

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    5298:	84 e0       	ldi	r24, 0x04	; 4
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    52a0:	9a 87       	std	Y+10, r25	; 0x0a
    52a2:	89 87       	std	Y+9, r24	; 0x09
		assert(ptr != NULL);
    52a4:	89 85       	ldd	r24, Y+9	; 0x09
    52a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52a8:	00 97       	sbiw	r24, 0x00	; 0
    52aa:	11 f4       	brne	.+4      	; 0x52b0 <vdmClone+0xb6>
    52ac:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    52b0:	eb 85       	ldd	r30, Y+11	; 0x0b
    52b2:	fc 85       	ldd	r31, Y+12	; 0x0c
    52b4:	80 81       	ld	r24, Z
    52b6:	91 81       	ldd	r25, Z+1	; 0x01
    52b8:	a2 81       	ldd	r26, Z+2	; 0x02
    52ba:	b3 81       	ldd	r27, Z+3	; 0x03
    52bc:	e9 85       	ldd	r30, Y+9	; 0x09
    52be:	fa 85       	ldd	r31, Y+10	; 0x0a
    52c0:	80 83       	st	Z, r24
    52c2:	91 83       	std	Z+1, r25	; 0x01
    52c4:	a2 83       	std	Z+2, r26	; 0x02
    52c6:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    52c8:	e9 85       	ldd	r30, Y+9	; 0x09
    52ca:	fa 85       	ldd	r31, Y+10	; 0x0a
    52cc:	82 81       	ldd	r24, Z+2	; 0x02
    52ce:	93 81       	ldd	r25, Z+3	; 0x03
    52d0:	88 0f       	add	r24, r24
    52d2:	99 1f       	adc	r25, r25
    52d4:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    52d8:	e9 85       	ldd	r30, Y+9	; 0x09
    52da:	fa 85       	ldd	r31, Y+10	; 0x0a
    52dc:	91 83       	std	Z+1, r25	; 0x01
    52de:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    52e0:	e9 85       	ldd	r30, Y+9	; 0x09
    52e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    52e4:	80 81       	ld	r24, Z
    52e6:	91 81       	ldd	r25, Z+1	; 0x01
    52e8:	00 97       	sbiw	r24, 0x00	; 0
    52ea:	11 f4       	brne	.+4      	; 0x52f0 <vdmClone+0xf6>
    52ec:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		for (i = 0; i < cptr->size; i++)
    52f0:	1e 86       	std	Y+14, r1	; 0x0e
    52f2:	1d 86       	std	Y+13, r1	; 0x0d
    52f4:	22 c0       	rjmp	.+68     	; 0x533a <vdmClone+0x140>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    52f6:	e9 85       	ldd	r30, Y+9	; 0x09
    52f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    52fa:	20 81       	ld	r18, Z
    52fc:	31 81       	ldd	r19, Z+1	; 0x01
    52fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5300:	9e 85       	ldd	r25, Y+14	; 0x0e
    5302:	88 0f       	add	r24, r24
    5304:	99 1f       	adc	r25, r25
    5306:	89 01       	movw	r16, r18
    5308:	08 0f       	add	r16, r24
    530a:	19 1f       	adc	r17, r25
    530c:	eb 85       	ldd	r30, Y+11	; 0x0b
    530e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5310:	20 81       	ld	r18, Z
    5312:	31 81       	ldd	r19, Z+1	; 0x01
    5314:	8d 85       	ldd	r24, Y+13	; 0x0d
    5316:	9e 85       	ldd	r25, Y+14	; 0x0e
    5318:	88 0f       	add	r24, r24
    531a:	99 1f       	adc	r25, r25
    531c:	f9 01       	movw	r30, r18
    531e:	e8 0f       	add	r30, r24
    5320:	f9 1f       	adc	r31, r25
    5322:	80 81       	ld	r24, Z
    5324:	91 81       	ldd	r25, Z+1	; 0x01
    5326:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    532a:	f8 01       	movw	r30, r16
    532c:	91 83       	std	Z+1, r25	; 0x01
    532e:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    5330:	8d 85       	ldd	r24, Y+13	; 0x0d
    5332:	9e 85       	ldd	r25, Y+14	; 0x0e
    5334:	01 96       	adiw	r24, 0x01	; 1
    5336:	9e 87       	std	Y+14, r25	; 0x0e
    5338:	8d 87       	std	Y+13, r24	; 0x0d
    533a:	eb 85       	ldd	r30, Y+11	; 0x0b
    533c:	fc 85       	ldd	r31, Y+12	; 0x0c
    533e:	22 81       	ldd	r18, Z+2	; 0x02
    5340:	33 81       	ldd	r19, Z+3	; 0x03
    5342:	8d 85       	ldd	r24, Y+13	; 0x0d
    5344:	9e 85       	ldd	r25, Y+14	; 0x0e
    5346:	82 17       	cp	r24, r18
    5348:	93 07       	cpc	r25, r19
    534a:	ac f2       	brlt	.-86     	; 0x52f6 <vdmClone+0xfc>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    534c:	ef 85       	ldd	r30, Y+15	; 0x0f
    534e:	f8 89       	ldd	r31, Y+16	; 0x10
    5350:	89 85       	ldd	r24, Y+9	; 0x09
    5352:	9a 85       	ldd	r25, Y+10	; 0x0a
    5354:	95 83       	std	Z+5, r25	; 0x05
    5356:	84 83       	std	Z+4, r24	; 0x04
    5358:	83 c0       	rjmp	.+262    	; 0x5460 <vdmClone+0x266>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    535a:	ef 85       	ldd	r30, Y+15	; 0x0f
    535c:	f8 89       	ldd	r31, Y+16	; 0x10
    535e:	84 81       	ldd	r24, Z+4	; 0x04
    5360:	95 81       	ldd	r25, Z+5	; 0x05
    5362:	9e 83       	std	Y+6, r25	; 0x06
    5364:	8d 83       	std	Y+5, r24	; 0x05

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    5366:	84 e0       	ldi	r24, 0x04	; 4
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    536e:	9c 83       	std	Y+4, r25	; 0x04
    5370:	8b 83       	std	Y+3, r24	; 0x03
		assert(ptr != NULL);
    5372:	8b 81       	ldd	r24, Y+3	; 0x03
    5374:	9c 81       	ldd	r25, Y+4	; 0x04
    5376:	00 97       	sbiw	r24, 0x00	; 0
    5378:	11 f4       	brne	.+4      	; 0x537e <vdmClone+0x184>
    537a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    537e:	ed 81       	ldd	r30, Y+5	; 0x05
    5380:	fe 81       	ldd	r31, Y+6	; 0x06
    5382:	80 81       	ld	r24, Z
    5384:	91 81       	ldd	r25, Z+1	; 0x01
    5386:	a2 81       	ldd	r26, Z+2	; 0x02
    5388:	b3 81       	ldd	r27, Z+3	; 0x03
    538a:	eb 81       	ldd	r30, Y+3	; 0x03
    538c:	fc 81       	ldd	r31, Y+4	; 0x04
    538e:	80 83       	st	Z, r24
    5390:	91 83       	std	Z+1, r25	; 0x01
    5392:	a2 83       	std	Z+2, r26	; 0x02
    5394:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    5396:	eb 81       	ldd	r30, Y+3	; 0x03
    5398:	fc 81       	ldd	r31, Y+4	; 0x04
    539a:	82 81       	ldd	r24, Z+2	; 0x02
    539c:	93 81       	ldd	r25, Z+3	; 0x03
    539e:	88 0f       	add	r24, r24
    53a0:	99 1f       	adc	r25, r25
    53a2:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    53a6:	eb 81       	ldd	r30, Y+3	; 0x03
    53a8:	fc 81       	ldd	r31, Y+4	; 0x04
    53aa:	91 83       	std	Z+1, r25	; 0x01
    53ac:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    53ae:	eb 81       	ldd	r30, Y+3	; 0x03
    53b0:	fc 81       	ldd	r31, Y+4	; 0x04
    53b2:	80 81       	ld	r24, Z
    53b4:	91 81       	ldd	r25, Z+1	; 0x01
    53b6:	00 97       	sbiw	r24, 0x00	; 0
    53b8:	11 f4       	brne	.+4      	; 0x53be <vdmClone+0x1c4>
    53ba:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		for (i = 0; i < cptr->size; i++)
    53be:	18 86       	std	Y+8, r1	; 0x08
    53c0:	1f 82       	std	Y+7, r1	; 0x07
    53c2:	22 c0       	rjmp	.+68     	; 0x5408 <vdmClone+0x20e>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    53c4:	eb 81       	ldd	r30, Y+3	; 0x03
    53c6:	fc 81       	ldd	r31, Y+4	; 0x04
    53c8:	20 81       	ld	r18, Z
    53ca:	31 81       	ldd	r19, Z+1	; 0x01
    53cc:	8f 81       	ldd	r24, Y+7	; 0x07
    53ce:	98 85       	ldd	r25, Y+8	; 0x08
    53d0:	88 0f       	add	r24, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	89 01       	movw	r16, r18
    53d6:	08 0f       	add	r16, r24
    53d8:	19 1f       	adc	r17, r25
    53da:	ed 81       	ldd	r30, Y+5	; 0x05
    53dc:	fe 81       	ldd	r31, Y+6	; 0x06
    53de:	20 81       	ld	r18, Z
    53e0:	31 81       	ldd	r19, Z+1	; 0x01
    53e2:	8f 81       	ldd	r24, Y+7	; 0x07
    53e4:	98 85       	ldd	r25, Y+8	; 0x08
    53e6:	88 0f       	add	r24, r24
    53e8:	99 1f       	adc	r25, r25
    53ea:	f9 01       	movw	r30, r18
    53ec:	e8 0f       	add	r30, r24
    53ee:	f9 1f       	adc	r31, r25
    53f0:	80 81       	ld	r24, Z
    53f2:	91 81       	ldd	r25, Z+1	; 0x01
    53f4:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    53f8:	f8 01       	movw	r30, r16
    53fa:	91 83       	std	Z+1, r25	; 0x01
    53fc:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    53fe:	8f 81       	ldd	r24, Y+7	; 0x07
    5400:	98 85       	ldd	r25, Y+8	; 0x08
    5402:	01 96       	adiw	r24, 0x01	; 1
    5404:	98 87       	std	Y+8, r25	; 0x08
    5406:	8f 83       	std	Y+7, r24	; 0x07
    5408:	ed 81       	ldd	r30, Y+5	; 0x05
    540a:	fe 81       	ldd	r31, Y+6	; 0x06
    540c:	22 81       	ldd	r18, Z+2	; 0x02
    540e:	33 81       	ldd	r19, Z+3	; 0x03
    5410:	8f 81       	ldd	r24, Y+7	; 0x07
    5412:	98 85       	ldd	r25, Y+8	; 0x08
    5414:	82 17       	cp	r24, r18
    5416:	93 07       	cpc	r25, r19
    5418:	ac f2       	brlt	.-86     	; 0x53c4 <vdmClone+0x1ca>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    541a:	ef 85       	ldd	r30, Y+15	; 0x0f
    541c:	f8 89       	ldd	r31, Y+16	; 0x10
    541e:	8b 81       	ldd	r24, Y+3	; 0x03
    5420:	9c 81       	ldd	r25, Y+4	; 0x04
    5422:	95 83       	std	Z+5, r25	; 0x05
    5424:	84 83       	std	Z+4, r24	; 0x04
    5426:	1c c0       	rjmp	.+56     	; 0x5460 <vdmClone+0x266>
	}
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) tmp->value.ptr;
    5428:	ef 85       	ldd	r30, Y+15	; 0x0f
    542a:	f8 89       	ldd	r31, Y+16	; 0x10
    542c:	84 81       	ldd	r24, Z+4	; 0x04
    542e:	95 81       	ldd	r25, Z+5	; 0x05
    5430:	9a 83       	std	Y+2, r25	; 0x02
    5432:	89 83       	std	Y+1, r24	; 0x01

		/* improve using memcpy  */
		tmp->value.ptr = newClassValue(classTptr->classId, classTptr->refs, classTptr->freeClass, classTptr->value);
    5434:	e9 81       	ldd	r30, Y+1	; 0x01
    5436:	fa 81       	ldd	r31, Y+2	; 0x02
    5438:	82 81       	ldd	r24, Z+2	; 0x02
    543a:	93 81       	ldd	r25, Z+3	; 0x03
    543c:	e9 81       	ldd	r30, Y+1	; 0x01
    543e:	fa 81       	ldd	r31, Y+2	; 0x02
    5440:	64 81       	ldd	r22, Z+4	; 0x04
    5442:	75 81       	ldd	r23, Z+5	; 0x05
    5444:	e9 81       	ldd	r30, Y+1	; 0x01
    5446:	fa 81       	ldd	r31, Y+2	; 0x02
    5448:	46 81       	ldd	r20, Z+6	; 0x06
    544a:	57 81       	ldd	r21, Z+7	; 0x07
    544c:	e9 81       	ldd	r30, Y+1	; 0x01
    544e:	fa 81       	ldd	r31, Y+2	; 0x02
    5450:	20 81       	ld	r18, Z
    5452:	31 81       	ldd	r19, Z+1	; 0x01
    5454:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    5458:	ef 85       	ldd	r30, Y+15	; 0x0f
    545a:	f8 89       	ldd	r31, Y+16	; 0x10
    545c:	95 83       	std	Z+5, r25	; 0x05
    545e:	84 83       	std	Z+4, r24	; 0x04
		break;
	}
	}

	return tmp;
    5460:	8f 85       	ldd	r24, Y+15	; 0x0f
    5462:	98 89       	ldd	r25, Y+16	; 0x10
    5464:	9e 8b       	std	Y+22, r25	; 0x16
    5466:	8d 8b       	std	Y+21, r24	; 0x15
    5468:	8d 89       	ldd	r24, Y+21	; 0x15
    546a:	9e 89       	ldd	r25, Y+22	; 0x16
}
    546c:	66 96       	adiw	r28, 0x16	; 22
    546e:	0f b6       	in	r0, 0x3f	; 63
    5470:	f8 94       	cli
    5472:	de bf       	out	0x3e, r29	; 62
    5474:	0f be       	out	0x3f, r0	; 63
    5476:	cd bf       	out	0x3d, r28	; 61
    5478:	cf 91       	pop	r28
    547a:	df 91       	pop	r29
    547c:	1f 91       	pop	r17
    547e:	0f 91       	pop	r16
    5480:	08 95       	ret

00005482 <equals>:



bool equals(TVP a, TVP b)
{
    5482:	ef 92       	push	r14
    5484:	ff 92       	push	r15
    5486:	0f 93       	push	r16
    5488:	1f 93       	push	r17
    548a:	df 93       	push	r29
    548c:	cf 93       	push	r28
    548e:	cd b7       	in	r28, 0x3d	; 61
    5490:	de b7       	in	r29, 0x3e	; 62
    5492:	2e 97       	sbiw	r28, 0x0e	; 14
    5494:	0f b6       	in	r0, 0x3f	; 63
    5496:	f8 94       	cli
    5498:	de bf       	out	0x3e, r29	; 62
    549a:	0f be       	out	0x3f, r0	; 63
    549c:	cd bf       	out	0x3d, r28	; 61
    549e:	99 87       	std	Y+9, r25	; 0x09
    54a0:	88 87       	std	Y+8, r24	; 0x08
    54a2:	7b 87       	std	Y+11, r23	; 0x0b
    54a4:	6a 87       	std	Y+10, r22	; 0x0a
	if(isNumber(a)&& isNumber(b))
    54a6:	88 85       	ldd	r24, Y+8	; 0x08
    54a8:	99 85       	ldd	r25, Y+9	; 0x09
    54aa:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <isNumber>
    54ae:	88 23       	and	r24, r24
    54b0:	e9 f0       	breq	.+58     	; 0x54ec <equals+0x6a>
    54b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    54b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    54b6:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <isNumber>
    54ba:	88 23       	and	r24, r24
    54bc:	b9 f0       	breq	.+46     	; 0x54ec <equals+0x6a>
	{
		return toDouble(a)==toDouble(b);
    54be:	88 85       	ldd	r24, Y+8	; 0x08
    54c0:	99 85       	ldd	r25, Y+9	; 0x09
    54c2:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    54c6:	7b 01       	movw	r14, r22
    54c8:	8c 01       	movw	r16, r24
    54ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    54cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    54ce:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    54d2:	9b 01       	movw	r18, r22
    54d4:	ac 01       	movw	r20, r24
    54d6:	1e 86       	std	Y+14, r1	; 0x0e
    54d8:	c8 01       	movw	r24, r16
    54da:	b7 01       	movw	r22, r14
    54dc:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    54e0:	88 23       	and	r24, r24
    54e2:	09 f0       	breq	.+2      	; 0x54e6 <equals+0x64>
    54e4:	db c0       	rjmp	.+438    	; 0x569c <equals+0x21a>
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	8e 87       	std	Y+14, r24	; 0x0e
    54ea:	d8 c0       	rjmp	.+432    	; 0x569c <equals+0x21a>
	}
	if (a->type != b->type) /* is this correct for optional types too  */
    54ec:	e8 85       	ldd	r30, Y+8	; 0x08
    54ee:	f9 85       	ldd	r31, Y+9	; 0x09
    54f0:	20 81       	ld	r18, Z
    54f2:	31 81       	ldd	r19, Z+1	; 0x01
    54f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    54f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    54f8:	80 81       	ld	r24, Z
    54fa:	91 81       	ldd	r25, Z+1	; 0x01
    54fc:	28 17       	cp	r18, r24
    54fe:	39 07       	cpc	r19, r25
    5500:	11 f0       	breq	.+4      	; 0x5506 <equals+0x84>
	{
		return false;
    5502:	1e 86       	std	Y+14, r1	; 0x0e
    5504:	cb c0       	rjmp	.+406    	; 0x569c <equals+0x21a>
	}

	switch (a->type)
    5506:	e8 85       	ldd	r30, Y+8	; 0x08
    5508:	f9 85       	ldd	r31, Y+9	; 0x09
    550a:	80 81       	ld	r24, Z
    550c:	91 81       	ldd	r25, Z+1	; 0x01
    550e:	9d 87       	std	Y+13, r25	; 0x0d
    5510:	8c 87       	std	Y+12, r24	; 0x0c
    5512:	8c 85       	ldd	r24, Y+12	; 0x0c
    5514:	9d 85       	ldd	r25, Y+13	; 0x0d
    5516:	86 30       	cpi	r24, 0x06	; 6
    5518:	91 05       	cpc	r25, r1
    551a:	09 f4       	brne	.+2      	; 0x551e <equals+0x9c>
    551c:	42 c0       	rjmp	.+132    	; 0x55a2 <equals+0x120>
    551e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5520:	9d 85       	ldd	r25, Y+13	; 0x0d
    5522:	87 30       	cpi	r24, 0x07	; 7
    5524:	91 05       	cpc	r25, r1
    5526:	60 f4       	brcc	.+24     	; 0x5540 <equals+0xbe>
    5528:	8c 85       	ldd	r24, Y+12	; 0x0c
    552a:	9d 85       	ldd	r25, Y+13	; 0x0d
    552c:	83 30       	cpi	r24, 0x03	; 3
    552e:	91 05       	cpc	r25, r1
    5530:	59 f1       	breq	.+86     	; 0x5588 <equals+0x106>
    5532:	8c 85       	ldd	r24, Y+12	; 0x0c
    5534:	9d 85       	ldd	r25, Y+13	; 0x0d
    5536:	84 30       	cpi	r24, 0x04	; 4
    5538:	91 05       	cpc	r25, r1
    553a:	08 f0       	brcs	.+2      	; 0x553e <equals+0xbc>
    553c:	4f c0       	rjmp	.+158    	; 0x55dc <equals+0x15a>
    553e:	3e c0       	rjmp	.+124    	; 0x55bc <equals+0x13a>
    5540:	8c 85       	ldd	r24, Y+12	; 0x0c
    5542:	9d 85       	ldd	r25, Y+13	; 0x0d
    5544:	89 30       	cpi	r24, 0x09	; 9
    5546:	91 05       	cpc	r25, r1
    5548:	09 f4       	brne	.+2      	; 0x554c <equals+0xca>
    554a:	5f c0       	rjmp	.+190    	; 0x560a <equals+0x188>
    554c:	8c 85       	ldd	r24, Y+12	; 0x0c
    554e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5550:	8a 30       	cpi	r24, 0x0A	; 10
    5552:	91 05       	cpc	r25, r1
    5554:	68 f4       	brcc	.+26     	; 0x5570 <equals+0xee>
    5556:	8c 85       	ldd	r24, Y+12	; 0x0c
    5558:	9d 85       	ldd	r25, Y+13	; 0x0d
    555a:	87 30       	cpi	r24, 0x07	; 7
    555c:	91 05       	cpc	r25, r1
    555e:	09 f4       	brne	.+2      	; 0x5562 <equals+0xe0>
    5560:	6c c0       	rjmp	.+216    	; 0x563a <equals+0x1b8>
    5562:	8c 85       	ldd	r24, Y+12	; 0x0c
    5564:	9d 85       	ldd	r25, Y+13	; 0x0d
    5566:	88 30       	cpi	r24, 0x08	; 8
    5568:	91 05       	cpc	r25, r1
    556a:	09 f4       	brne	.+2      	; 0x556e <equals+0xec>
    556c:	5d c0       	rjmp	.+186    	; 0x5628 <equals+0x1a6>
    556e:	95 c0       	rjmp	.+298    	; 0x569a <equals+0x218>
    5570:	8c 85       	ldd	r24, Y+12	; 0x0c
    5572:	9d 85       	ldd	r25, Y+13	; 0x0d
    5574:	8a 30       	cpi	r24, 0x0A	; 10
    5576:	91 05       	cpc	r25, r1
    5578:	09 f1       	breq	.+66     	; 0x55bc <equals+0x13a>
    557a:	8c 85       	ldd	r24, Y+12	; 0x0c
    557c:	9d 85       	ldd	r25, Y+13	; 0x0d
    557e:	8b 30       	cpi	r24, 0x0B	; 11
    5580:	91 05       	cpc	r25, r1
    5582:	09 f4       	brne	.+2      	; 0x5586 <equals+0x104>
    5584:	6f c0       	rjmp	.+222    	; 0x5664 <equals+0x1e2>
    5586:	89 c0       	rjmp	.+274    	; 0x569a <equals+0x218>
	{
	case VDM_BOOL:
	{
		return a->value.boolVal == b->value.boolVal;
    5588:	e8 85       	ldd	r30, Y+8	; 0x08
    558a:	f9 85       	ldd	r31, Y+9	; 0x09
    558c:	94 81       	ldd	r25, Z+4	; 0x04
    558e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5590:	fb 85       	ldd	r31, Y+11	; 0x0b
    5592:	84 81       	ldd	r24, Z+4	; 0x04
    5594:	1e 86       	std	Y+14, r1	; 0x0e
    5596:	98 17       	cp	r25, r24
    5598:	09 f0       	breq	.+2      	; 0x559c <equals+0x11a>
    559a:	80 c0       	rjmp	.+256    	; 0x569c <equals+0x21a>
    559c:	91 e0       	ldi	r25, 0x01	; 1
    559e:	9e 87       	std	Y+14, r25	; 0x0e
    55a0:	7d c0       	rjmp	.+250    	; 0x569c <equals+0x21a>
	}
	case VDM_CHAR:
	{
		return a->value.charVal == b->value.charVal;
    55a2:	e8 85       	ldd	r30, Y+8	; 0x08
    55a4:	f9 85       	ldd	r31, Y+9	; 0x09
    55a6:	94 81       	ldd	r25, Z+4	; 0x04
    55a8:	ea 85       	ldd	r30, Y+10	; 0x0a
    55aa:	fb 85       	ldd	r31, Y+11	; 0x0b
    55ac:	84 81       	ldd	r24, Z+4	; 0x04
    55ae:	1e 86       	std	Y+14, r1	; 0x0e
    55b0:	98 17       	cp	r25, r24
    55b2:	09 f0       	breq	.+2      	; 0x55b6 <equals+0x134>
    55b4:	73 c0       	rjmp	.+230    	; 0x569c <equals+0x21a>
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	8e 87       	std	Y+14, r24	; 0x0e
    55ba:	70 c0       	rjmp	.+224    	; 0x569c <equals+0x21a>
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
	case VDM_TOKEN:
	{
		return a->value.intVal == b->value.intVal;
    55bc:	e8 85       	ldd	r30, Y+8	; 0x08
    55be:	f9 85       	ldd	r31, Y+9	; 0x09
    55c0:	24 81       	ldd	r18, Z+4	; 0x04
    55c2:	35 81       	ldd	r19, Z+5	; 0x05
    55c4:	ea 85       	ldd	r30, Y+10	; 0x0a
    55c6:	fb 85       	ldd	r31, Y+11	; 0x0b
    55c8:	84 81       	ldd	r24, Z+4	; 0x04
    55ca:	95 81       	ldd	r25, Z+5	; 0x05
    55cc:	1e 86       	std	Y+14, r1	; 0x0e
    55ce:	28 17       	cp	r18, r24
    55d0:	39 07       	cpc	r19, r25
    55d2:	09 f0       	breq	.+2      	; 0x55d6 <equals+0x154>
    55d4:	63 c0       	rjmp	.+198    	; 0x569c <equals+0x21a>
    55d6:	91 e0       	ldi	r25, 0x01	; 1
    55d8:	9e 87       	std	Y+14, r25	; 0x0e
    55da:	60 c0       	rjmp	.+192    	; 0x569c <equals+0x21a>
	}
	case VDM_RAT:
	case VDM_REAL:
	{
		return a->value.doubleVal == b->value.doubleVal;
    55dc:	e8 85       	ldd	r30, Y+8	; 0x08
    55de:	f9 85       	ldd	r31, Y+9	; 0x09
    55e0:	84 81       	ldd	r24, Z+4	; 0x04
    55e2:	95 81       	ldd	r25, Z+5	; 0x05
    55e4:	a6 81       	ldd	r26, Z+6	; 0x06
    55e6:	b7 81       	ldd	r27, Z+7	; 0x07
    55e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    55ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    55ec:	24 81       	ldd	r18, Z+4	; 0x04
    55ee:	35 81       	ldd	r19, Z+5	; 0x05
    55f0:	46 81       	ldd	r20, Z+6	; 0x06
    55f2:	57 81       	ldd	r21, Z+7	; 0x07
    55f4:	1e 86       	std	Y+14, r1	; 0x0e
    55f6:	bc 01       	movw	r22, r24
    55f8:	cd 01       	movw	r24, r26
    55fa:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    55fe:	88 23       	and	r24, r24
    5600:	09 f0       	breq	.+2      	; 0x5604 <equals+0x182>
    5602:	4c c0       	rjmp	.+152    	; 0x569c <equals+0x21a>
    5604:	81 e0       	ldi	r24, 0x01	; 1
    5606:	8e 87       	std	Y+14, r24	; 0x0e
    5608:	49 c0       	rjmp	.+146    	; 0x569c <equals+0x21a>
	}
	case VDM_QUOTE:
	{
		return a->value.quoteVal == b->value.quoteVal;
    560a:	e8 85       	ldd	r30, Y+8	; 0x08
    560c:	f9 85       	ldd	r31, Y+9	; 0x09
    560e:	24 81       	ldd	r18, Z+4	; 0x04
    5610:	35 81       	ldd	r19, Z+5	; 0x05
    5612:	ea 85       	ldd	r30, Y+10	; 0x0a
    5614:	fb 85       	ldd	r31, Y+11	; 0x0b
    5616:	84 81       	ldd	r24, Z+4	; 0x04
    5618:	95 81       	ldd	r25, Z+5	; 0x05
    561a:	1e 86       	std	Y+14, r1	; 0x0e
    561c:	28 17       	cp	r18, r24
    561e:	39 07       	cpc	r19, r25
    5620:	e9 f5       	brne	.+122    	; 0x569c <equals+0x21a>
    5622:	91 e0       	ldi	r25, 0x01	; 1
    5624:	9e 87       	std	Y+14, r25	; 0x0e
    5626:	3a c0       	rjmp	.+116    	; 0x569c <equals+0x21a>
	}
#endif
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		return collectionEqual(a, b);
    5628:	88 85       	ldd	r24, Y+8	; 0x08
    562a:	99 85       	ldd	r25, Y+9	; 0x09
    562c:	2a 85       	ldd	r18, Y+10	; 0x0a
    562e:	3b 85       	ldd	r19, Y+11	; 0x0b
    5630:	b9 01       	movw	r22, r18
    5632:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <collectionEqual>
    5636:	8e 87       	std	Y+14, r24	; 0x0e
    5638:	31 c0       	rjmp	.+98     	; 0x569c <equals+0x21a>
	}
#endif
#ifndef NO_SETS
	case VDM_SET:
	{
		TVP r0 = vdmSetEquals(a, b);
    563a:	88 85       	ldd	r24, Y+8	; 0x08
    563c:	99 85       	ldd	r25, Y+9	; 0x09
    563e:	2a 85       	ldd	r18, Y+10	; 0x0a
    5640:	3b 85       	ldd	r19, Y+11	; 0x0b
    5642:	b9 01       	movw	r22, r18
    5644:	0e 94 e3 63 	call	0xc7c6	; 0xc7c6 <vdmSetEquals>
    5648:	9f 83       	std	Y+7, r25	; 0x07
    564a:	8e 83       	std	Y+6, r24	; 0x06
		bool r = toBool(r0);
    564c:	8e 81       	ldd	r24, Y+6	; 0x06
    564e:	9f 81       	ldd	r25, Y+7	; 0x07
    5650:	0e 94 91 33 	call	0x6722	; 0x6722 <toBool>
    5654:	8d 83       	std	Y+5, r24	; 0x05
		vdmFree(r0);
    5656:	8e 81       	ldd	r24, Y+6	; 0x06
    5658:	9f 81       	ldd	r25, Y+7	; 0x07
    565a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		return r;
    565e:	8d 81       	ldd	r24, Y+5	; 0x05
    5660:	8e 87       	std	Y+14, r24	; 0x0e
    5662:	1c c0       	rjmp	.+56     	; 0x569c <equals+0x21a>

	}
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		struct ClassType* ac = a->value.ptr;
    5664:	e8 85       	ldd	r30, Y+8	; 0x08
    5666:	f9 85       	ldd	r31, Y+9	; 0x09
    5668:	84 81       	ldd	r24, Z+4	; 0x04
    566a:	95 81       	ldd	r25, Z+5	; 0x05
    566c:	9c 83       	std	Y+4, r25	; 0x04
    566e:	8b 83       	std	Y+3, r24	; 0x03
		struct ClassType* bc = b->value.ptr;
    5670:	ea 85       	ldd	r30, Y+10	; 0x0a
    5672:	fb 85       	ldd	r31, Y+11	; 0x0b
    5674:	84 81       	ldd	r24, Z+4	; 0x04
    5676:	95 81       	ldd	r25, Z+5	; 0x05
    5678:	9a 83       	std	Y+2, r25	; 0x02
    567a:	89 83       	std	Y+1, r24	; 0x01

		/* reference compare does the pointer point to the same instance  */
		return ac->value == bc->value;
    567c:	eb 81       	ldd	r30, Y+3	; 0x03
    567e:	fc 81       	ldd	r31, Y+4	; 0x04
    5680:	20 81       	ld	r18, Z
    5682:	31 81       	ldd	r19, Z+1	; 0x01
    5684:	e9 81       	ldd	r30, Y+1	; 0x01
    5686:	fa 81       	ldd	r31, Y+2	; 0x02
    5688:	80 81       	ld	r24, Z
    568a:	91 81       	ldd	r25, Z+1	; 0x01
    568c:	1e 86       	std	Y+14, r1	; 0x0e
    568e:	28 17       	cp	r18, r24
    5690:	39 07       	cpc	r19, r25
    5692:	21 f4       	brne	.+8      	; 0x569c <equals+0x21a>
    5694:	91 e0       	ldi	r25, 0x01	; 1
    5696:	9e 87       	std	Y+14, r25	; 0x0e
    5698:	01 c0       	rjmp	.+2      	; 0x569c <equals+0x21a>
	}

	}
	return false;
    569a:	1e 86       	std	Y+14, r1	; 0x0e
    569c:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    569e:	2e 96       	adiw	r28, 0x0e	; 14
    56a0:	0f b6       	in	r0, 0x3f	; 63
    56a2:	f8 94       	cli
    56a4:	de bf       	out	0x3e, r29	; 62
    56a6:	0f be       	out	0x3f, r0	; 63
    56a8:	cd bf       	out	0x3d, r28	; 61
    56aa:	cf 91       	pop	r28
    56ac:	df 91       	pop	r29
    56ae:	1f 91       	pop	r17
    56b0:	0f 91       	pop	r16
    56b2:	ff 90       	pop	r15
    56b4:	ef 90       	pop	r14
    56b6:	08 95       	ret

000056b8 <collectionEqual>:

bool collectionEqual(TVP col1,TVP col2)
{
    56b8:	0f 93       	push	r16
    56ba:	1f 93       	push	r17
    56bc:	df 93       	push	r29
    56be:	cf 93       	push	r28
    56c0:	cd b7       	in	r28, 0x3d	; 61
    56c2:	de b7       	in	r29, 0x3e	; 62
    56c4:	2c 97       	sbiw	r28, 0x0c	; 12
    56c6:	0f b6       	in	r0, 0x3f	; 63
    56c8:	f8 94       	cli
    56ca:	de bf       	out	0x3e, r29	; 62
    56cc:	0f be       	out	0x3f, r0	; 63
    56ce:	cd bf       	out	0x3d, r28	; 61
    56d0:	99 87       	std	Y+9, r25	; 0x09
    56d2:	88 87       	std	Y+8, r24	; 0x08
    56d4:	7b 87       	std	Y+11, r23	; 0x0b
    56d6:	6a 87       	std	Y+10, r22	; 0x0a
	/* internal function do not call except if args points to a collection  */

	int i;

	UNWRAP_COLLECTION(aCol,col1);
    56d8:	e8 85       	ldd	r30, Y+8	; 0x08
    56da:	f9 85       	ldd	r31, Y+9	; 0x09
    56dc:	84 81       	ldd	r24, Z+4	; 0x04
    56de:	95 81       	ldd	r25, Z+5	; 0x05
    56e0:	9d 83       	std	Y+5, r25	; 0x05
    56e2:	8c 83       	std	Y+4, r24	; 0x04
	UNWRAP_COLLECTION(bCol,col2);
    56e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    56e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    56e8:	84 81       	ldd	r24, Z+4	; 0x04
    56ea:	95 81       	ldd	r25, Z+5	; 0x05
    56ec:	9b 83       	std	Y+3, r25	; 0x03
    56ee:	8a 83       	std	Y+2, r24	; 0x02

	if(aCol->size!=bCol->size)
    56f0:	ec 81       	ldd	r30, Y+4	; 0x04
    56f2:	fd 81       	ldd	r31, Y+5	; 0x05
    56f4:	22 81       	ldd	r18, Z+2	; 0x02
    56f6:	33 81       	ldd	r19, Z+3	; 0x03
    56f8:	ea 81       	ldd	r30, Y+2	; 0x02
    56fa:	fb 81       	ldd	r31, Y+3	; 0x03
    56fc:	82 81       	ldd	r24, Z+2	; 0x02
    56fe:	93 81       	ldd	r25, Z+3	; 0x03
    5700:	28 17       	cp	r18, r24
    5702:	39 07       	cpc	r19, r25
    5704:	11 f0       	breq	.+4      	; 0x570a <collectionEqual+0x52>
	{
		/* wrong sizes  */
		return false;
    5706:	1c 86       	std	Y+12, r1	; 0x0c
    5708:	3f c0       	rjmp	.+126    	; 0x5788 <collectionEqual+0xd0>
	}

	bool match = true;
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < aCol->size; i++)
    570e:	1f 82       	std	Y+7, r1	; 0x07
    5710:	1e 82       	std	Y+6, r1	; 0x06
    5712:	2f c0       	rjmp	.+94     	; 0x5772 <collectionEqual+0xba>
	{
		match &= equals(aCol->value[i],bCol->value[i]);
    5714:	89 81       	ldd	r24, Y+1	; 0x01
    5716:	08 2f       	mov	r16, r24
    5718:	10 e0       	ldi	r17, 0x00	; 0
    571a:	ec 81       	ldd	r30, Y+4	; 0x04
    571c:	fd 81       	ldd	r31, Y+5	; 0x05
    571e:	20 81       	ld	r18, Z
    5720:	31 81       	ldd	r19, Z+1	; 0x01
    5722:	8e 81       	ldd	r24, Y+6	; 0x06
    5724:	9f 81       	ldd	r25, Y+7	; 0x07
    5726:	88 0f       	add	r24, r24
    5728:	99 1f       	adc	r25, r25
    572a:	f9 01       	movw	r30, r18
    572c:	e8 0f       	add	r30, r24
    572e:	f9 1f       	adc	r31, r25
    5730:	40 81       	ld	r20, Z
    5732:	51 81       	ldd	r21, Z+1	; 0x01
    5734:	ea 81       	ldd	r30, Y+2	; 0x02
    5736:	fb 81       	ldd	r31, Y+3	; 0x03
    5738:	20 81       	ld	r18, Z
    573a:	31 81       	ldd	r19, Z+1	; 0x01
    573c:	8e 81       	ldd	r24, Y+6	; 0x06
    573e:	9f 81       	ldd	r25, Y+7	; 0x07
    5740:	88 0f       	add	r24, r24
    5742:	99 1f       	adc	r25, r25
    5744:	f9 01       	movw	r30, r18
    5746:	e8 0f       	add	r30, r24
    5748:	f9 1f       	adc	r31, r25
    574a:	20 81       	ld	r18, Z
    574c:	31 81       	ldd	r19, Z+1	; 0x01
    574e:	ca 01       	movw	r24, r20
    5750:	b9 01       	movw	r22, r18
    5752:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    5756:	88 2f       	mov	r24, r24
    5758:	90 e0       	ldi	r25, 0x00	; 0
    575a:	80 23       	and	r24, r16
    575c:	91 23       	and	r25, r17
    575e:	19 82       	std	Y+1, r1	; 0x01
    5760:	00 97       	sbiw	r24, 0x00	; 0
    5762:	11 f0       	breq	.+4      	; 0x5768 <collectionEqual+0xb0>
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	89 83       	std	Y+1, r24	; 0x01
		return false;
	}

	bool match = true;

	for (i = 0; i < aCol->size; i++)
    5768:	8e 81       	ldd	r24, Y+6	; 0x06
    576a:	9f 81       	ldd	r25, Y+7	; 0x07
    576c:	01 96       	adiw	r24, 0x01	; 1
    576e:	9f 83       	std	Y+7, r25	; 0x07
    5770:	8e 83       	std	Y+6, r24	; 0x06
    5772:	ec 81       	ldd	r30, Y+4	; 0x04
    5774:	fd 81       	ldd	r31, Y+5	; 0x05
    5776:	22 81       	ldd	r18, Z+2	; 0x02
    5778:	33 81       	ldd	r19, Z+3	; 0x03
    577a:	8e 81       	ldd	r24, Y+6	; 0x06
    577c:	9f 81       	ldd	r25, Y+7	; 0x07
    577e:	82 17       	cp	r24, r18
    5780:	93 07       	cpc	r25, r19
    5782:	44 f2       	brlt	.-112    	; 0x5714 <collectionEqual+0x5c>
	{
		match &= equals(aCol->value[i],bCol->value[i]);
	}
	return match;
    5784:	89 81       	ldd	r24, Y+1	; 0x01
    5786:	8c 87       	std	Y+12, r24	; 0x0c
    5788:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    578a:	2c 96       	adiw	r28, 0x0c	; 12
    578c:	0f b6       	in	r0, 0x3f	; 63
    578e:	f8 94       	cli
    5790:	de bf       	out	0x3e, r29	; 62
    5792:	0f be       	out	0x3f, r0	; 63
    5794:	cd bf       	out	0x3d, r28	; 61
    5796:	cf 91       	pop	r28
    5798:	df 91       	pop	r29
    579a:	1f 91       	pop	r17
    579c:	0f 91       	pop	r16
    579e:	08 95       	ret

000057a0 <vdmFree_GCInternal>:


void vdmFree_GCInternal(TVP ptr)
{
    57a0:	df 93       	push	r29
    57a2:	cf 93       	push	r28
    57a4:	cd b7       	in	r28, 0x3d	; 61
    57a6:	de b7       	in	r29, 0x3e	; 62
    57a8:	2e 97       	sbiw	r28, 0x0e	; 14
    57aa:	0f b6       	in	r0, 0x3f	; 63
    57ac:	f8 94       	cli
    57ae:	de bf       	out	0x3e, r29	; 62
    57b0:	0f be       	out	0x3f, r0	; 63
    57b2:	cd bf       	out	0x3d, r28	; 61
    57b4:	9c 87       	std	Y+12, r25	; 0x0c
    57b6:	8b 87       	std	Y+11, r24	; 0x0b
	if (ptr == NULL)
    57b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    57ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    57bc:	00 97       	sbiw	r24, 0x00	; 0
    57be:	09 f4       	brne	.+2      	; 0x57c2 <vdmFree_GCInternal+0x22>
    57c0:	d0 c0       	rjmp	.+416    	; 0x5962 <vdmFree_GCInternal+0x1c2>
		return;

	switch (ptr->type)
    57c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    57c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    57c6:	80 81       	ld	r24, Z
    57c8:	91 81       	ldd	r25, Z+1	; 0x01
    57ca:	9e 87       	std	Y+14, r25	; 0x0e
    57cc:	8d 87       	std	Y+13, r24	; 0x0d
    57ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    57d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    57d2:	88 30       	cpi	r24, 0x08	; 8
    57d4:	91 05       	cpc	r25, r1
    57d6:	c9 f0       	breq	.+50     	; 0x580a <vdmFree_GCInternal+0x6a>
    57d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    57da:	9e 85       	ldd	r25, Y+14	; 0x0e
    57dc:	89 30       	cpi	r24, 0x09	; 9
    57de:	91 05       	cpc	r25, r1
    57e0:	38 f4       	brcc	.+14     	; 0x57f0 <vdmFree_GCInternal+0x50>
    57e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    57e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    57e6:	87 30       	cpi	r24, 0x07	; 7
    57e8:	91 05       	cpc	r25, r1
    57ea:	08 f4       	brcc	.+2      	; 0x57ee <vdmFree_GCInternal+0x4e>
    57ec:	b6 c0       	rjmp	.+364    	; 0x595a <vdmFree_GCInternal+0x1ba>
    57ee:	51 c0       	rjmp	.+162    	; 0x5892 <vdmFree_GCInternal+0xf2>
    57f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    57f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    57f4:	8b 30       	cpi	r24, 0x0B	; 11
    57f6:	91 05       	cpc	r25, r1
    57f8:	08 f4       	brcc	.+2      	; 0x57fc <vdmFree_GCInternal+0x5c>
    57fa:	af c0       	rjmp	.+350    	; 0x595a <vdmFree_GCInternal+0x1ba>
    57fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    57fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5800:	8b 30       	cpi	r24, 0x0B	; 11
    5802:	91 05       	cpc	r25, r1
    5804:	09 f4       	brne	.+2      	; 0x5808 <vdmFree_GCInternal+0x68>
    5806:	89 c0       	rjmp	.+274    	; 0x591a <vdmFree_GCInternal+0x17a>
    5808:	a8 c0       	rjmp	.+336    	; 0x595a <vdmFree_GCInternal+0x1ba>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    580a:	eb 85       	ldd	r30, Y+11	; 0x0b
    580c:	fc 85       	ldd	r31, Y+12	; 0x0c
    580e:	84 81       	ldd	r24, Z+4	; 0x04
    5810:	95 81       	ldd	r25, Z+5	; 0x05
    5812:	98 87       	std	Y+8, r25	; 0x08
    5814:	8f 83       	std	Y+7, r24	; 0x07
		for (i = 0; i < cptr->size; i++)
    5816:	1a 86       	std	Y+10, r1	; 0x0a
    5818:	19 86       	std	Y+9, r1	; 0x09
    581a:	23 c0       	rjmp	.+70     	; 0x5862 <vdmFree_GCInternal+0xc2>
		{
			if (cptr->value[i] != NULL)
    581c:	ef 81       	ldd	r30, Y+7	; 0x07
    581e:	f8 85       	ldd	r31, Y+8	; 0x08
    5820:	20 81       	ld	r18, Z
    5822:	31 81       	ldd	r19, Z+1	; 0x01
    5824:	89 85       	ldd	r24, Y+9	; 0x09
    5826:	9a 85       	ldd	r25, Y+10	; 0x0a
    5828:	88 0f       	add	r24, r24
    582a:	99 1f       	adc	r25, r25
    582c:	f9 01       	movw	r30, r18
    582e:	e8 0f       	add	r30, r24
    5830:	f9 1f       	adc	r31, r25
    5832:	80 81       	ld	r24, Z
    5834:	91 81       	ldd	r25, Z+1	; 0x01
    5836:	00 97       	sbiw	r24, 0x00	; 0
    5838:	79 f0       	breq	.+30     	; 0x5858 <vdmFree_GCInternal+0xb8>
			{
				vdmFree_GCInternal(cptr->value[i]);
    583a:	ef 81       	ldd	r30, Y+7	; 0x07
    583c:	f8 85       	ldd	r31, Y+8	; 0x08
    583e:	20 81       	ld	r18, Z
    5840:	31 81       	ldd	r19, Z+1	; 0x01
    5842:	89 85       	ldd	r24, Y+9	; 0x09
    5844:	9a 85       	ldd	r25, Y+10	; 0x0a
    5846:	88 0f       	add	r24, r24
    5848:	99 1f       	adc	r25, r25
    584a:	f9 01       	movw	r30, r18
    584c:	e8 0f       	add	r30, r24
    584e:	f9 1f       	adc	r31, r25
    5850:	80 81       	ld	r24, Z
    5852:	91 81       	ldd	r25, Z+1	; 0x01
    5854:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <vdmFree_GCInternal>
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    5858:	89 85       	ldd	r24, Y+9	; 0x09
    585a:	9a 85       	ldd	r25, Y+10	; 0x0a
    585c:	01 96       	adiw	r24, 0x01	; 1
    585e:	9a 87       	std	Y+10, r25	; 0x0a
    5860:	89 87       	std	Y+9, r24	; 0x09
    5862:	ef 81       	ldd	r30, Y+7	; 0x07
    5864:	f8 85       	ldd	r31, Y+8	; 0x08
    5866:	22 81       	ldd	r18, Z+2	; 0x02
    5868:	33 81       	ldd	r19, Z+3	; 0x03
    586a:	89 85       	ldd	r24, Y+9	; 0x09
    586c:	9a 85       	ldd	r25, Y+10	; 0x0a
    586e:	82 17       	cp	r24, r18
    5870:	93 07       	cpc	r25, r19
    5872:	a4 f2       	brlt	.-88     	; 0x581c <vdmFree_GCInternal+0x7c>
			if (cptr->value[i] != NULL)
			{
				vdmFree_GCInternal(cptr->value[i]);
			}
		}
		free(cptr->value);
    5874:	ef 81       	ldd	r30, Y+7	; 0x07
    5876:	f8 85       	ldd	r31, Y+8	; 0x08
    5878:	80 81       	ld	r24, Z
    587a:	91 81       	ldd	r25, Z+1	; 0x01
    587c:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		free(cptr);
    5880:	8f 81       	ldd	r24, Y+7	; 0x07
    5882:	98 85       	ldd	r25, Y+8	; 0x08
    5884:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		ptr->value.ptr = NULL;
    5888:	eb 85       	ldd	r30, Y+11	; 0x0b
    588a:	fc 85       	ldd	r31, Y+12	; 0x0c
    588c:	15 82       	std	Z+5, r1	; 0x05
    588e:	14 82       	std	Z+4, r1	; 0x04
    5890:	64 c0       	rjmp	.+200    	; 0x595a <vdmFree_GCInternal+0x1ba>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    5892:	eb 85       	ldd	r30, Y+11	; 0x0b
    5894:	fc 85       	ldd	r31, Y+12	; 0x0c
    5896:	84 81       	ldd	r24, Z+4	; 0x04
    5898:	95 81       	ldd	r25, Z+5	; 0x05
    589a:	9c 83       	std	Y+4, r25	; 0x04
    589c:	8b 83       	std	Y+3, r24	; 0x03
		for (i = 0; i < cptr->size; i++)
    589e:	1e 82       	std	Y+6, r1	; 0x06
    58a0:	1d 82       	std	Y+5, r1	; 0x05
    58a2:	23 c0       	rjmp	.+70     	; 0x58ea <vdmFree_GCInternal+0x14a>
		{
			if (cptr->value[i] != NULL)
    58a4:	eb 81       	ldd	r30, Y+3	; 0x03
    58a6:	fc 81       	ldd	r31, Y+4	; 0x04
    58a8:	20 81       	ld	r18, Z
    58aa:	31 81       	ldd	r19, Z+1	; 0x01
    58ac:	8d 81       	ldd	r24, Y+5	; 0x05
    58ae:	9e 81       	ldd	r25, Y+6	; 0x06
    58b0:	88 0f       	add	r24, r24
    58b2:	99 1f       	adc	r25, r25
    58b4:	f9 01       	movw	r30, r18
    58b6:	e8 0f       	add	r30, r24
    58b8:	f9 1f       	adc	r31, r25
    58ba:	80 81       	ld	r24, Z
    58bc:	91 81       	ldd	r25, Z+1	; 0x01
    58be:	00 97       	sbiw	r24, 0x00	; 0
    58c0:	79 f0       	breq	.+30     	; 0x58e0 <vdmFree_GCInternal+0x140>
			{
				vdmFree_GCInternal(cptr->value[i]);
    58c2:	eb 81       	ldd	r30, Y+3	; 0x03
    58c4:	fc 81       	ldd	r31, Y+4	; 0x04
    58c6:	20 81       	ld	r18, Z
    58c8:	31 81       	ldd	r19, Z+1	; 0x01
    58ca:	8d 81       	ldd	r24, Y+5	; 0x05
    58cc:	9e 81       	ldd	r25, Y+6	; 0x06
    58ce:	88 0f       	add	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	f9 01       	movw	r30, r18
    58d4:	e8 0f       	add	r30, r24
    58d6:	f9 1f       	adc	r31, r25
    58d8:	80 81       	ld	r24, Z
    58da:	91 81       	ldd	r25, Z+1	; 0x01
    58dc:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <vdmFree_GCInternal>
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    58e0:	8d 81       	ldd	r24, Y+5	; 0x05
    58e2:	9e 81       	ldd	r25, Y+6	; 0x06
    58e4:	01 96       	adiw	r24, 0x01	; 1
    58e6:	9e 83       	std	Y+6, r25	; 0x06
    58e8:	8d 83       	std	Y+5, r24	; 0x05
    58ea:	eb 81       	ldd	r30, Y+3	; 0x03
    58ec:	fc 81       	ldd	r31, Y+4	; 0x04
    58ee:	22 81       	ldd	r18, Z+2	; 0x02
    58f0:	33 81       	ldd	r19, Z+3	; 0x03
    58f2:	8d 81       	ldd	r24, Y+5	; 0x05
    58f4:	9e 81       	ldd	r25, Y+6	; 0x06
    58f6:	82 17       	cp	r24, r18
    58f8:	93 07       	cpc	r25, r19
    58fa:	a4 f2       	brlt	.-88     	; 0x58a4 <vdmFree_GCInternal+0x104>
			if (cptr->value[i] != NULL)
			{
				vdmFree_GCInternal(cptr->value[i]);
			}
		}
		free(cptr->value);
    58fc:	eb 81       	ldd	r30, Y+3	; 0x03
    58fe:	fc 81       	ldd	r31, Y+4	; 0x04
    5900:	80 81       	ld	r24, Z
    5902:	91 81       	ldd	r25, Z+1	; 0x01
    5904:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		free(cptr);
    5908:	8b 81       	ldd	r24, Y+3	; 0x03
    590a:	9c 81       	ldd	r25, Y+4	; 0x04
    590c:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		ptr->value.ptr = NULL;
    5910:	eb 85       	ldd	r30, Y+11	; 0x0b
    5912:	fc 85       	ldd	r31, Y+12	; 0x0c
    5914:	15 82       	std	Z+5, r1	; 0x05
    5916:	14 82       	std	Z+4, r1	; 0x04
    5918:	20 c0       	rjmp	.+64     	; 0x595a <vdmFree_GCInternal+0x1ba>
		break;
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) ptr->value.ptr;
    591a:	eb 85       	ldd	r30, Y+11	; 0x0b
    591c:	fc 85       	ldd	r31, Y+12	; 0x0c
    591e:	84 81       	ldd	r24, Z+4	; 0x04
    5920:	95 81       	ldd	r25, Z+5	; 0x05
    5922:	9a 83       	std	Y+2, r25	; 0x02
    5924:	89 83       	std	Y+1, r24	; 0x01
		classTptr->freeClass(classTptr->value);
    5926:	e9 81       	ldd	r30, Y+1	; 0x01
    5928:	fa 81       	ldd	r31, Y+2	; 0x02
    592a:	26 81       	ldd	r18, Z+6	; 0x06
    592c:	37 81       	ldd	r19, Z+7	; 0x07
    592e:	e9 81       	ldd	r30, Y+1	; 0x01
    5930:	fa 81       	ldd	r31, Y+2	; 0x02
    5932:	80 81       	ld	r24, Z
    5934:	91 81       	ldd	r25, Z+1	; 0x01
    5936:	f9 01       	movw	r30, r18
    5938:	09 95       	icall
		classTptr->value = NULL;
    593a:	e9 81       	ldd	r30, Y+1	; 0x01
    593c:	fa 81       	ldd	r31, Y+2	; 0x02
    593e:	11 82       	std	Z+1, r1	; 0x01
    5940:	10 82       	st	Z, r1
		classTptr->freeClass = NULL;
    5942:	e9 81       	ldd	r30, Y+1	; 0x01
    5944:	fa 81       	ldd	r31, Y+2	; 0x02
    5946:	17 82       	std	Z+7, r1	; 0x07
    5948:	16 82       	std	Z+6, r1	; 0x06

		/* free classtype  */
		free(classTptr);
    594a:	89 81       	ldd	r24, Y+1	; 0x01
    594c:	9a 81       	ldd	r25, Y+2	; 0x02
    594e:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		ptr->value.ptr = NULL;
    5952:	eb 85       	ldd	r30, Y+11	; 0x0b
    5954:	fc 85       	ldd	r31, Y+12	; 0x0c
    5956:	15 82       	std	Z+5, r1	; 0x05
    5958:	14 82       	std	Z+4, r1	; 0x04
		break;
	}
	}

	/* free typedvalue  */
	free(ptr);
    595a:	8b 85       	ldd	r24, Y+11	; 0x0b
    595c:	9c 85       	ldd	r25, Y+12	; 0x0c
    595e:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
}
    5962:	2e 96       	adiw	r28, 0x0e	; 14
    5964:	0f b6       	in	r0, 0x3f	; 63
    5966:	f8 94       	cli
    5968:	de bf       	out	0x3e, r29	; 62
    596a:	0f be       	out	0x3f, r0	; 63
    596c:	cd bf       	out	0x3d, r28	; 61
    596e:	cf 91       	pop	r28
    5970:	df 91       	pop	r29
    5972:	08 95       	ret

00005974 <vdmFree>:



void vdmFree(TVP ptr)
{
    5974:	df 93       	push	r29
    5976:	cf 93       	push	r28
    5978:	cd b7       	in	r28, 0x3d	; 61
    597a:	de b7       	in	r29, 0x3e	; 62
    597c:	60 97       	sbiw	r28, 0x10	; 16
    597e:	0f b6       	in	r0, 0x3f	; 63
    5980:	f8 94       	cli
    5982:	de bf       	out	0x3e, r29	; 62
    5984:	0f be       	out	0x3f, r0	; 63
    5986:	cd bf       	out	0x3d, r28	; 61
    5988:	9e 87       	std	Y+14, r25	; 0x0e
    598a:	8d 87       	std	Y+13, r24	; 0x0d
	TVP *tmp;

	if (ptr == NULL)
    598c:	8d 85       	ldd	r24, Y+13	; 0x0d
    598e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5990:	00 97       	sbiw	r24, 0x00	; 0
    5992:	09 f4       	brne	.+2      	; 0x5996 <vdmFree+0x22>
    5994:	e2 c0       	rjmp	.+452    	; 0x5b5a <vdmFree+0x1e6>
		return;

	switch (ptr->type)
    5996:	ed 85       	ldd	r30, Y+13	; 0x0d
    5998:	fe 85       	ldd	r31, Y+14	; 0x0e
    599a:	80 81       	ld	r24, Z
    599c:	91 81       	ldd	r25, Z+1	; 0x01
    599e:	98 8b       	std	Y+16, r25	; 0x10
    59a0:	8f 87       	std	Y+15, r24	; 0x0f
    59a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    59a4:	98 89       	ldd	r25, Y+16	; 0x10
    59a6:	88 30       	cpi	r24, 0x08	; 8
    59a8:	91 05       	cpc	r25, r1
    59aa:	c9 f0       	breq	.+50     	; 0x59de <vdmFree+0x6a>
    59ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    59ae:	98 89       	ldd	r25, Y+16	; 0x10
    59b0:	89 30       	cpi	r24, 0x09	; 9
    59b2:	91 05       	cpc	r25, r1
    59b4:	38 f4       	brcc	.+14     	; 0x59c4 <vdmFree+0x50>
    59b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    59b8:	98 89       	ldd	r25, Y+16	; 0x10
    59ba:	87 30       	cpi	r24, 0x07	; 7
    59bc:	91 05       	cpc	r25, r1
    59be:	08 f4       	brcc	.+2      	; 0x59c2 <vdmFree+0x4e>
    59c0:	b6 c0       	rjmp	.+364    	; 0x5b2e <vdmFree+0x1ba>
    59c2:	51 c0       	rjmp	.+162    	; 0x5a66 <vdmFree+0xf2>
    59c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    59c6:	98 89       	ldd	r25, Y+16	; 0x10
    59c8:	8b 30       	cpi	r24, 0x0B	; 11
    59ca:	91 05       	cpc	r25, r1
    59cc:	08 f4       	brcc	.+2      	; 0x59d0 <vdmFree+0x5c>
    59ce:	af c0       	rjmp	.+350    	; 0x5b2e <vdmFree+0x1ba>
    59d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    59d2:	98 89       	ldd	r25, Y+16	; 0x10
    59d4:	8b 30       	cpi	r24, 0x0B	; 11
    59d6:	91 05       	cpc	r25, r1
    59d8:	09 f4       	brne	.+2      	; 0x59dc <vdmFree+0x68>
    59da:	89 c0       	rjmp	.+274    	; 0x5aee <vdmFree+0x17a>
    59dc:	a8 c0       	rjmp	.+336    	; 0x5b2e <vdmFree+0x1ba>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    59de:	ed 85       	ldd	r30, Y+13	; 0x0d
    59e0:	fe 85       	ldd	r31, Y+14	; 0x0e
    59e2:	84 81       	ldd	r24, Z+4	; 0x04
    59e4:	95 81       	ldd	r25, Z+5	; 0x05
    59e6:	98 87       	std	Y+8, r25	; 0x08
    59e8:	8f 83       	std	Y+7, r24	; 0x07
		for (i = 0; i < cptr->size; i++)
    59ea:	1a 86       	std	Y+10, r1	; 0x0a
    59ec:	19 86       	std	Y+9, r1	; 0x09
    59ee:	23 c0       	rjmp	.+70     	; 0x5a36 <vdmFree+0xc2>
		{
			if (cptr->value[i] != NULL)
    59f0:	ef 81       	ldd	r30, Y+7	; 0x07
    59f2:	f8 85       	ldd	r31, Y+8	; 0x08
    59f4:	20 81       	ld	r18, Z
    59f6:	31 81       	ldd	r19, Z+1	; 0x01
    59f8:	89 85       	ldd	r24, Y+9	; 0x09
    59fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    59fc:	88 0f       	add	r24, r24
    59fe:	99 1f       	adc	r25, r25
    5a00:	f9 01       	movw	r30, r18
    5a02:	e8 0f       	add	r30, r24
    5a04:	f9 1f       	adc	r31, r25
    5a06:	80 81       	ld	r24, Z
    5a08:	91 81       	ldd	r25, Z+1	; 0x01
    5a0a:	00 97       	sbiw	r24, 0x00	; 0
    5a0c:	79 f0       	breq	.+30     	; 0x5a2c <vdmFree+0xb8>
			{
				vdmFree(cptr->value[i]);
    5a0e:	ef 81       	ldd	r30, Y+7	; 0x07
    5a10:	f8 85       	ldd	r31, Y+8	; 0x08
    5a12:	20 81       	ld	r18, Z
    5a14:	31 81       	ldd	r19, Z+1	; 0x01
    5a16:	89 85       	ldd	r24, Y+9	; 0x09
    5a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a1a:	88 0f       	add	r24, r24
    5a1c:	99 1f       	adc	r25, r25
    5a1e:	f9 01       	movw	r30, r18
    5a20:	e8 0f       	add	r30, r24
    5a22:	f9 1f       	adc	r31, r25
    5a24:	80 81       	ld	r24, Z
    5a26:	91 81       	ldd	r25, Z+1	; 0x01
    5a28:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    5a2c:	89 85       	ldd	r24, Y+9	; 0x09
    5a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a30:	01 96       	adiw	r24, 0x01	; 1
    5a32:	9a 87       	std	Y+10, r25	; 0x0a
    5a34:	89 87       	std	Y+9, r24	; 0x09
    5a36:	ef 81       	ldd	r30, Y+7	; 0x07
    5a38:	f8 85       	ldd	r31, Y+8	; 0x08
    5a3a:	22 81       	ldd	r18, Z+2	; 0x02
    5a3c:	33 81       	ldd	r19, Z+3	; 0x03
    5a3e:	89 85       	ldd	r24, Y+9	; 0x09
    5a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a42:	82 17       	cp	r24, r18
    5a44:	93 07       	cpc	r25, r19
    5a46:	a4 f2       	brlt	.-88     	; 0x59f0 <vdmFree+0x7c>
			if (cptr->value[i] != NULL)
			{
				vdmFree(cptr->value[i]);
			}
		}
		free(cptr->value);
    5a48:	ef 81       	ldd	r30, Y+7	; 0x07
    5a4a:	f8 85       	ldd	r31, Y+8	; 0x08
    5a4c:	80 81       	ld	r24, Z
    5a4e:	91 81       	ldd	r25, Z+1	; 0x01
    5a50:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		free(cptr);
    5a54:	8f 81       	ldd	r24, Y+7	; 0x07
    5a56:	98 85       	ldd	r25, Y+8	; 0x08
    5a58:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		ptr->value.ptr = NULL;
    5a5c:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a5e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a60:	15 82       	std	Z+5, r1	; 0x05
    5a62:	14 82       	std	Z+4, r1	; 0x04
    5a64:	64 c0       	rjmp	.+200    	; 0x5b2e <vdmFree+0x1ba>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    5a66:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a68:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a6a:	84 81       	ldd	r24, Z+4	; 0x04
    5a6c:	95 81       	ldd	r25, Z+5	; 0x05
    5a6e:	9c 83       	std	Y+4, r25	; 0x04
    5a70:	8b 83       	std	Y+3, r24	; 0x03
		for (i = 0; i < cptr->size; i++)
    5a72:	1e 82       	std	Y+6, r1	; 0x06
    5a74:	1d 82       	std	Y+5, r1	; 0x05
    5a76:	23 c0       	rjmp	.+70     	; 0x5abe <vdmFree+0x14a>
		{
			if (cptr->value[i] != NULL)
    5a78:	eb 81       	ldd	r30, Y+3	; 0x03
    5a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    5a7c:	20 81       	ld	r18, Z
    5a7e:	31 81       	ldd	r19, Z+1	; 0x01
    5a80:	8d 81       	ldd	r24, Y+5	; 0x05
    5a82:	9e 81       	ldd	r25, Y+6	; 0x06
    5a84:	88 0f       	add	r24, r24
    5a86:	99 1f       	adc	r25, r25
    5a88:	f9 01       	movw	r30, r18
    5a8a:	e8 0f       	add	r30, r24
    5a8c:	f9 1f       	adc	r31, r25
    5a8e:	80 81       	ld	r24, Z
    5a90:	91 81       	ldd	r25, Z+1	; 0x01
    5a92:	00 97       	sbiw	r24, 0x00	; 0
    5a94:	79 f0       	breq	.+30     	; 0x5ab4 <vdmFree+0x140>
			{
				vdmFree(cptr->value[i]);
    5a96:	eb 81       	ldd	r30, Y+3	; 0x03
    5a98:	fc 81       	ldd	r31, Y+4	; 0x04
    5a9a:	20 81       	ld	r18, Z
    5a9c:	31 81       	ldd	r19, Z+1	; 0x01
    5a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    5aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    5aa2:	88 0f       	add	r24, r24
    5aa4:	99 1f       	adc	r25, r25
    5aa6:	f9 01       	movw	r30, r18
    5aa8:	e8 0f       	add	r30, r24
    5aaa:	f9 1f       	adc	r31, r25
    5aac:	80 81       	ld	r24, Z
    5aae:	91 81       	ldd	r25, Z+1	; 0x01
    5ab0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    5ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ab8:	01 96       	adiw	r24, 0x01	; 1
    5aba:	9e 83       	std	Y+6, r25	; 0x06
    5abc:	8d 83       	std	Y+5, r24	; 0x05
    5abe:	eb 81       	ldd	r30, Y+3	; 0x03
    5ac0:	fc 81       	ldd	r31, Y+4	; 0x04
    5ac2:	22 81       	ldd	r18, Z+2	; 0x02
    5ac4:	33 81       	ldd	r19, Z+3	; 0x03
    5ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aca:	82 17       	cp	r24, r18
    5acc:	93 07       	cpc	r25, r19
    5ace:	a4 f2       	brlt	.-88     	; 0x5a78 <vdmFree+0x104>
			if (cptr->value[i] != NULL)
			{
				vdmFree(cptr->value[i]);
			}
		}
		free(cptr->value);
    5ad0:	eb 81       	ldd	r30, Y+3	; 0x03
    5ad2:	fc 81       	ldd	r31, Y+4	; 0x04
    5ad4:	80 81       	ld	r24, Z
    5ad6:	91 81       	ldd	r25, Z+1	; 0x01
    5ad8:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		free(cptr);
    5adc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ade:	9c 81       	ldd	r25, Y+4	; 0x04
    5ae0:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		ptr->value.ptr = NULL;
    5ae4:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ae6:	fe 85       	ldd	r31, Y+14	; 0x0e
    5ae8:	15 82       	std	Z+5, r1	; 0x05
    5aea:	14 82       	std	Z+4, r1	; 0x04
    5aec:	20 c0       	rjmp	.+64     	; 0x5b2e <vdmFree+0x1ba>
		break;
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) ptr->value.ptr;
    5aee:	ed 85       	ldd	r30, Y+13	; 0x0d
    5af0:	fe 85       	ldd	r31, Y+14	; 0x0e
    5af2:	84 81       	ldd	r24, Z+4	; 0x04
    5af4:	95 81       	ldd	r25, Z+5	; 0x05
    5af6:	9a 83       	std	Y+2, r25	; 0x02
    5af8:	89 83       	std	Y+1, r24	; 0x01
		classTptr->freeClass(classTptr->value);
    5afa:	e9 81       	ldd	r30, Y+1	; 0x01
    5afc:	fa 81       	ldd	r31, Y+2	; 0x02
    5afe:	26 81       	ldd	r18, Z+6	; 0x06
    5b00:	37 81       	ldd	r19, Z+7	; 0x07
    5b02:	e9 81       	ldd	r30, Y+1	; 0x01
    5b04:	fa 81       	ldd	r31, Y+2	; 0x02
    5b06:	80 81       	ld	r24, Z
    5b08:	91 81       	ldd	r25, Z+1	; 0x01
    5b0a:	f9 01       	movw	r30, r18
    5b0c:	09 95       	icall
		classTptr->value = NULL;
    5b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    5b10:	fa 81       	ldd	r31, Y+2	; 0x02
    5b12:	11 82       	std	Z+1, r1	; 0x01
    5b14:	10 82       	st	Z, r1
		classTptr->freeClass = NULL;
    5b16:	e9 81       	ldd	r30, Y+1	; 0x01
    5b18:	fa 81       	ldd	r31, Y+2	; 0x02
    5b1a:	17 82       	std	Z+7, r1	; 0x07
    5b1c:	16 82       	std	Z+6, r1	; 0x06

		/* free classtype  */
		free(classTptr);
    5b1e:	89 81       	ldd	r24, Y+1	; 0x01
    5b20:	9a 81       	ldd	r25, Y+2	; 0x02
    5b22:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		ptr->value.ptr = NULL;
    5b26:	ed 85       	ldd	r30, Y+13	; 0x0d
    5b28:	fe 85       	ldd	r31, Y+14	; 0x0e
    5b2a:	15 82       	std	Z+5, r1	; 0x05
    5b2c:	14 82       	std	Z+4, r1	; 0x04
		break;
	}
	}

	/* free typedvalue  */
	remove_allocd_mem_node_by_location(ptr);
    5b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b32:	0e 94 c3 48 	call	0x9186	; 0x9186 <remove_allocd_mem_node_by_location>
	tmp = ptr->ref_from;
    5b36:	ed 85       	ldd	r30, Y+13	; 0x0d
    5b38:	fe 85       	ldd	r31, Y+14	; 0x0e
    5b3a:	82 81       	ldd	r24, Z+2	; 0x02
    5b3c:	93 81       	ldd	r25, Z+3	; 0x03
    5b3e:	9c 87       	std	Y+12, r25	; 0x0c
    5b40:	8b 87       	std	Y+11, r24	; 0x0b
	free(ptr);
    5b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b46:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	if(tmp != NULL)
    5b4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b4e:	00 97       	sbiw	r24, 0x00	; 0
    5b50:	21 f0       	breq	.+8      	; 0x5b5a <vdmFree+0x1e6>
	{
		*tmp = NULL;
    5b52:	eb 85       	ldd	r30, Y+11	; 0x0b
    5b54:	fc 85       	ldd	r31, Y+12	; 0x0c
    5b56:	11 82       	std	Z+1, r1	; 0x01
    5b58:	10 82       	st	Z, r1
	}
}
    5b5a:	60 96       	adiw	r28, 0x10	; 16
    5b5c:	0f b6       	in	r0, 0x3f	; 63
    5b5e:	f8 94       	cli
    5b60:	de bf       	out	0x3e, r29	; 62
    5b62:	0f be       	out	0x3f, r0	; 63
    5b64:	cd bf       	out	0x3d, r28	; 61
    5b66:	cf 91       	pop	r28
    5b68:	df 91       	pop	r29
    5b6a:	08 95       	ret

00005b6c <vdmEquals>:

TVP vdmEquals(TVP a, TVP b)
{	return newBool(equals(a,b));}
    5b6c:	df 93       	push	r29
    5b6e:	cf 93       	push	r28
    5b70:	00 d0       	rcall	.+0      	; 0x5b72 <vdmEquals+0x6>
    5b72:	00 d0       	rcall	.+0      	; 0x5b74 <vdmEquals+0x8>
    5b74:	cd b7       	in	r28, 0x3d	; 61
    5b76:	de b7       	in	r29, 0x3e	; 62
    5b78:	9a 83       	std	Y+2, r25	; 0x02
    5b7a:	89 83       	std	Y+1, r24	; 0x01
    5b7c:	7c 83       	std	Y+4, r23	; 0x04
    5b7e:	6b 83       	std	Y+3, r22	; 0x03
    5b80:	89 81       	ldd	r24, Y+1	; 0x01
    5b82:	9a 81       	ldd	r25, Y+2	; 0x02
    5b84:	2b 81       	ldd	r18, Y+3	; 0x03
    5b86:	3c 81       	ldd	r19, Y+4	; 0x04
    5b88:	b9 01       	movw	r22, r18
    5b8a:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    5b8e:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    5b92:	0f 90       	pop	r0
    5b94:	0f 90       	pop	r0
    5b96:	0f 90       	pop	r0
    5b98:	0f 90       	pop	r0
    5b9a:	cf 91       	pop	r28
    5b9c:	df 91       	pop	r29
    5b9e:	08 95       	ret

00005ba0 <vdmEqualsGC>:

TVP vdmEqualsGC(TVP a, TVP b, TVP *from)
{	return newBoolGC(equals(a,b), from);}
    5ba0:	df 93       	push	r29
    5ba2:	cf 93       	push	r28
    5ba4:	00 d0       	rcall	.+0      	; 0x5ba6 <vdmEqualsGC+0x6>
    5ba6:	00 d0       	rcall	.+0      	; 0x5ba8 <vdmEqualsGC+0x8>
    5ba8:	00 d0       	rcall	.+0      	; 0x5baa <vdmEqualsGC+0xa>
    5baa:	cd b7       	in	r28, 0x3d	; 61
    5bac:	de b7       	in	r29, 0x3e	; 62
    5bae:	9a 83       	std	Y+2, r25	; 0x02
    5bb0:	89 83       	std	Y+1, r24	; 0x01
    5bb2:	7c 83       	std	Y+4, r23	; 0x04
    5bb4:	6b 83       	std	Y+3, r22	; 0x03
    5bb6:	5e 83       	std	Y+6, r21	; 0x06
    5bb8:	4d 83       	std	Y+5, r20	; 0x05
    5bba:	89 81       	ldd	r24, Y+1	; 0x01
    5bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    5bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    5bc2:	b9 01       	movw	r22, r18
    5bc4:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    5bc8:	2d 81       	ldd	r18, Y+5	; 0x05
    5bca:	3e 81       	ldd	r19, Y+6	; 0x06
    5bcc:	b9 01       	movw	r22, r18
    5bce:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    5bd2:	26 96       	adiw	r28, 0x06	; 6
    5bd4:	0f b6       	in	r0, 0x3f	; 63
    5bd6:	f8 94       	cli
    5bd8:	de bf       	out	0x3e, r29	; 62
    5bda:	0f be       	out	0x3f, r0	; 63
    5bdc:	cd bf       	out	0x3d, r28	; 61
    5bde:	cf 91       	pop	r28
    5be0:	df 91       	pop	r29
    5be2:	08 95       	ret

00005be4 <vdmInEquals>:

TVP vdmInEquals(TVP a, TVP b)
{	return newBool(!equals(a,b));}
    5be4:	df 93       	push	r29
    5be6:	cf 93       	push	r28
    5be8:	00 d0       	rcall	.+0      	; 0x5bea <vdmInEquals+0x6>
    5bea:	00 d0       	rcall	.+0      	; 0x5bec <vdmInEquals+0x8>
    5bec:	cd b7       	in	r28, 0x3d	; 61
    5bee:	de b7       	in	r29, 0x3e	; 62
    5bf0:	9a 83       	std	Y+2, r25	; 0x02
    5bf2:	89 83       	std	Y+1, r24	; 0x01
    5bf4:	7c 83       	std	Y+4, r23	; 0x04
    5bf6:	6b 83       	std	Y+3, r22	; 0x03
    5bf8:	89 81       	ldd	r24, Y+1	; 0x01
    5bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    5bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    5c00:	b9 01       	movw	r22, r18
    5c02:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    5c06:	98 2f       	mov	r25, r24
    5c08:	81 e0       	ldi	r24, 0x01	; 1
    5c0a:	89 27       	eor	r24, r25
    5c0c:	88 2f       	mov	r24, r24
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    5c14:	0f 90       	pop	r0
    5c16:	0f 90       	pop	r0
    5c18:	0f 90       	pop	r0
    5c1a:	0f 90       	pop	r0
    5c1c:	cf 91       	pop	r28
    5c1e:	df 91       	pop	r29
    5c20:	08 95       	ret

00005c22 <vdmInEqualsGC>:

TVP vdmInEqualsGC(TVP a, TVP b, TVP *from)
{	return newBoolGC(!equals(a,b), from);}
    5c22:	df 93       	push	r29
    5c24:	cf 93       	push	r28
    5c26:	00 d0       	rcall	.+0      	; 0x5c28 <vdmInEqualsGC+0x6>
    5c28:	00 d0       	rcall	.+0      	; 0x5c2a <vdmInEqualsGC+0x8>
    5c2a:	00 d0       	rcall	.+0      	; 0x5c2c <vdmInEqualsGC+0xa>
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	9a 83       	std	Y+2, r25	; 0x02
    5c32:	89 83       	std	Y+1, r24	; 0x01
    5c34:	7c 83       	std	Y+4, r23	; 0x04
    5c36:	6b 83       	std	Y+3, r22	; 0x03
    5c38:	5e 83       	std	Y+6, r21	; 0x06
    5c3a:	4d 83       	std	Y+5, r20	; 0x05
    5c3c:	89 81       	ldd	r24, Y+1	; 0x01
    5c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c40:	2b 81       	ldd	r18, Y+3	; 0x03
    5c42:	3c 81       	ldd	r19, Y+4	; 0x04
    5c44:	b9 01       	movw	r22, r18
    5c46:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    5c4a:	98 2f       	mov	r25, r24
    5c4c:	81 e0       	ldi	r24, 0x01	; 1
    5c4e:	89 27       	eor	r24, r25
    5c50:	88 2f       	mov	r24, r24
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	2d 81       	ldd	r18, Y+5	; 0x05
    5c56:	3e 81       	ldd	r19, Y+6	; 0x06
    5c58:	b9 01       	movw	r22, r18
    5c5a:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    5c5e:	26 96       	adiw	r28, 0x06	; 6
    5c60:	0f b6       	in	r0, 0x3f	; 63
    5c62:	f8 94       	cli
    5c64:	de bf       	out	0x3e, r29	; 62
    5c66:	0f be       	out	0x3f, r0	; 63
    5c68:	cd bf       	out	0x3d, r28	; 61
    5c6a:	cf 91       	pop	r28
    5c6c:	df 91       	pop	r29
    5c6e:	08 95       	ret

00005c70 <vdmNot>:
/*
 * Boolean
 */

TVP vdmNot(TVP arg)
{
    5c70:	df 93       	push	r29
    5c72:	cf 93       	push	r28
    5c74:	00 d0       	rcall	.+0      	; 0x5c76 <vdmNot+0x6>
    5c76:	00 d0       	rcall	.+0      	; 0x5c78 <vdmNot+0x8>
    5c78:	cd b7       	in	r28, 0x3d	; 61
    5c7a:	de b7       	in	r29, 0x3e	; 62
    5c7c:	9a 83       	std	Y+2, r25	; 0x02
    5c7e:	89 83       	std	Y+1, r24	; 0x01
	if(arg == NULL)
    5c80:	89 81       	ldd	r24, Y+1	; 0x01
    5c82:	9a 81       	ldd	r25, Y+2	; 0x02
    5c84:	00 97       	sbiw	r24, 0x00	; 0
    5c86:	19 f4       	brne	.+6      	; 0x5c8e <vdmNot+0x1e>
		return NULL;
    5c88:	1c 82       	std	Y+4, r1	; 0x04
    5c8a:	1b 82       	std	Y+3, r1	; 0x03
    5c8c:	14 c0       	rjmp	.+40     	; 0x5cb6 <vdmNot+0x46>

	ASSERT_CHECK_BOOL(arg);
    5c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    5c90:	fa 81       	ldd	r31, Y+2	; 0x02
    5c92:	80 81       	ld	r24, Z
    5c94:	91 81       	ldd	r25, Z+1	; 0x01
    5c96:	83 30       	cpi	r24, 0x03	; 3
    5c98:	91 05       	cpc	r25, r1
    5c9a:	11 f0       	breq	.+4      	; 0x5ca0 <vdmNot+0x30>
    5c9c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	return newBool(!arg->value.boolVal);
    5ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    5ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    5ca4:	94 81       	ldd	r25, Z+4	; 0x04
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	89 27       	eor	r24, r25
    5caa:	88 2f       	mov	r24, r24
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    5cb2:	9c 83       	std	Y+4, r25	; 0x04
    5cb4:	8b 83       	std	Y+3, r24	; 0x03
    5cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    5cb8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    5cba:	0f 90       	pop	r0
    5cbc:	0f 90       	pop	r0
    5cbe:	0f 90       	pop	r0
    5cc0:	0f 90       	pop	r0
    5cc2:	cf 91       	pop	r28
    5cc4:	df 91       	pop	r29
    5cc6:	08 95       	ret

00005cc8 <vdmNotGC>:

TVP vdmNotGC(TVP arg, TVP *from)
{
    5cc8:	df 93       	push	r29
    5cca:	cf 93       	push	r28
    5ccc:	00 d0       	rcall	.+0      	; 0x5cce <vdmNotGC+0x6>
    5cce:	00 d0       	rcall	.+0      	; 0x5cd0 <vdmNotGC+0x8>
    5cd0:	00 d0       	rcall	.+0      	; 0x5cd2 <vdmNotGC+0xa>
    5cd2:	cd b7       	in	r28, 0x3d	; 61
    5cd4:	de b7       	in	r29, 0x3e	; 62
    5cd6:	9a 83       	std	Y+2, r25	; 0x02
    5cd8:	89 83       	std	Y+1, r24	; 0x01
    5cda:	7c 83       	std	Y+4, r23	; 0x04
    5cdc:	6b 83       	std	Y+3, r22	; 0x03
	if(arg == NULL)
    5cde:	89 81       	ldd	r24, Y+1	; 0x01
    5ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce2:	00 97       	sbiw	r24, 0x00	; 0
    5ce4:	19 f4       	brne	.+6      	; 0x5cec <vdmNotGC+0x24>
		return NULL;
    5ce6:	1e 82       	std	Y+6, r1	; 0x06
    5ce8:	1d 82       	std	Y+5, r1	; 0x05
    5cea:	17 c0       	rjmp	.+46     	; 0x5d1a <vdmNotGC+0x52>

	ASSERT_CHECK_BOOL(arg);
    5cec:	e9 81       	ldd	r30, Y+1	; 0x01
    5cee:	fa 81       	ldd	r31, Y+2	; 0x02
    5cf0:	80 81       	ld	r24, Z
    5cf2:	91 81       	ldd	r25, Z+1	; 0x01
    5cf4:	83 30       	cpi	r24, 0x03	; 3
    5cf6:	91 05       	cpc	r25, r1
    5cf8:	11 f0       	breq	.+4      	; 0x5cfe <vdmNotGC+0x36>
    5cfa:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	return newBoolGC(!arg->value.boolVal, from);
    5cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    5d00:	fa 81       	ldd	r31, Y+2	; 0x02
    5d02:	94 81       	ldd	r25, Z+4	; 0x04
    5d04:	81 e0       	ldi	r24, 0x01	; 1
    5d06:	89 27       	eor	r24, r25
    5d08:	88 2f       	mov	r24, r24
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    5d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    5d10:	b9 01       	movw	r22, r18
    5d12:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    5d16:	9e 83       	std	Y+6, r25	; 0x06
    5d18:	8d 83       	std	Y+5, r24	; 0x05
    5d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d1c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5d1e:	26 96       	adiw	r28, 0x06	; 6
    5d20:	0f b6       	in	r0, 0x3f	; 63
    5d22:	f8 94       	cli
    5d24:	de bf       	out	0x3e, r29	; 62
    5d26:	0f be       	out	0x3f, r0	; 63
    5d28:	cd bf       	out	0x3d, r28	; 61
    5d2a:	cf 91       	pop	r28
    5d2c:	df 91       	pop	r29
    5d2e:	08 95       	ret

00005d30 <vdmAnd>:

TVP vdmAnd(TVP a,TVP b)
{
    5d30:	df 93       	push	r29
    5d32:	cf 93       	push	r28
    5d34:	00 d0       	rcall	.+0      	; 0x5d36 <vdmAnd+0x6>
    5d36:	00 d0       	rcall	.+0      	; 0x5d38 <vdmAnd+0x8>
    5d38:	00 d0       	rcall	.+0      	; 0x5d3a <vdmAnd+0xa>
    5d3a:	cd b7       	in	r28, 0x3d	; 61
    5d3c:	de b7       	in	r29, 0x3e	; 62
    5d3e:	9a 83       	std	Y+2, r25	; 0x02
    5d40:	89 83       	std	Y+1, r24	; 0x01
    5d42:	7c 83       	std	Y+4, r23	; 0x04
    5d44:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL)
    5d46:	89 81       	ldd	r24, Y+1	; 0x01
    5d48:	9a 81       	ldd	r25, Y+2	; 0x02
    5d4a:	00 97       	sbiw	r24, 0x00	; 0
    5d4c:	19 f4       	brne	.+6      	; 0x5d54 <vdmAnd+0x24>
		return NULL;
    5d4e:	1e 82       	std	Y+6, r1	; 0x06
    5d50:	1d 82       	std	Y+5, r1	; 0x05
    5d52:	2d c0       	rjmp	.+90     	; 0x5dae <vdmAnd+0x7e>

	ASSERT_CHECK_BOOL(a);
    5d54:	e9 81       	ldd	r30, Y+1	; 0x01
    5d56:	fa 81       	ldd	r31, Y+2	; 0x02
    5d58:	80 81       	ld	r24, Z
    5d5a:	91 81       	ldd	r25, Z+1	; 0x01
    5d5c:	83 30       	cpi	r24, 0x03	; 3
    5d5e:	91 05       	cpc	r25, r1
    5d60:	11 f0       	breq	.+4      	; 0x5d66 <vdmAnd+0x36>
    5d62:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	if(!a->value.boolVal)
    5d66:	e9 81       	ldd	r30, Y+1	; 0x01
    5d68:	fa 81       	ldd	r31, Y+2	; 0x02
    5d6a:	94 81       	ldd	r25, Z+4	; 0x04
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	89 27       	eor	r24, r25
    5d70:	88 23       	and	r24, r24
    5d72:	31 f0       	breq	.+12     	; 0x5d80 <vdmAnd+0x50>
		return newBool(false);
    5d74:	80 e0       	ldi	r24, 0x00	; 0
    5d76:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    5d7a:	9e 83       	std	Y+6, r25	; 0x06
    5d7c:	8d 83       	std	Y+5, r24	; 0x05
    5d7e:	17 c0       	rjmp	.+46     	; 0x5dae <vdmAnd+0x7e>

	if(b == NULL)
    5d80:	8b 81       	ldd	r24, Y+3	; 0x03
    5d82:	9c 81       	ldd	r25, Y+4	; 0x04
    5d84:	00 97       	sbiw	r24, 0x00	; 0
    5d86:	19 f4       	brne	.+6      	; 0x5d8e <vdmAnd+0x5e>
		return NULL;
    5d88:	1e 82       	std	Y+6, r1	; 0x06
    5d8a:	1d 82       	std	Y+5, r1	; 0x05
    5d8c:	10 c0       	rjmp	.+32     	; 0x5dae <vdmAnd+0x7e>

	ASSERT_CHECK_BOOL(b);
    5d8e:	eb 81       	ldd	r30, Y+3	; 0x03
    5d90:	fc 81       	ldd	r31, Y+4	; 0x04
    5d92:	80 81       	ld	r24, Z
    5d94:	91 81       	ldd	r25, Z+1	; 0x01
    5d96:	83 30       	cpi	r24, 0x03	; 3
    5d98:	91 05       	cpc	r25, r1
    5d9a:	11 f0       	breq	.+4      	; 0x5da0 <vdmAnd+0x70>
    5d9c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBool(b->value.boolVal);
    5da0:	eb 81       	ldd	r30, Y+3	; 0x03
    5da2:	fc 81       	ldd	r31, Y+4	; 0x04
    5da4:	84 81       	ldd	r24, Z+4	; 0x04
    5da6:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    5daa:	9e 83       	std	Y+6, r25	; 0x06
    5dac:	8d 83       	std	Y+5, r24	; 0x05
    5dae:	8d 81       	ldd	r24, Y+5	; 0x05
    5db0:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5db2:	26 96       	adiw	r28, 0x06	; 6
    5db4:	0f b6       	in	r0, 0x3f	; 63
    5db6:	f8 94       	cli
    5db8:	de bf       	out	0x3e, r29	; 62
    5dba:	0f be       	out	0x3f, r0	; 63
    5dbc:	cd bf       	out	0x3d, r28	; 61
    5dbe:	cf 91       	pop	r28
    5dc0:	df 91       	pop	r29
    5dc2:	08 95       	ret

00005dc4 <vdmAndGC>:

TVP vdmAndGC(TVP a, TVP b, TVP *from)
{
    5dc4:	df 93       	push	r29
    5dc6:	cf 93       	push	r28
    5dc8:	cd b7       	in	r28, 0x3d	; 61
    5dca:	de b7       	in	r29, 0x3e	; 62
    5dcc:	28 97       	sbiw	r28, 0x08	; 8
    5dce:	0f b6       	in	r0, 0x3f	; 63
    5dd0:	f8 94       	cli
    5dd2:	de bf       	out	0x3e, r29	; 62
    5dd4:	0f be       	out	0x3f, r0	; 63
    5dd6:	cd bf       	out	0x3d, r28	; 61
    5dd8:	9a 83       	std	Y+2, r25	; 0x02
    5dda:	89 83       	std	Y+1, r24	; 0x01
    5ddc:	7c 83       	std	Y+4, r23	; 0x04
    5dde:	6b 83       	std	Y+3, r22	; 0x03
    5de0:	5e 83       	std	Y+6, r21	; 0x06
    5de2:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL)
    5de4:	89 81       	ldd	r24, Y+1	; 0x01
    5de6:	9a 81       	ldd	r25, Y+2	; 0x02
    5de8:	00 97       	sbiw	r24, 0x00	; 0
    5dea:	19 f4       	brne	.+6      	; 0x5df2 <vdmAndGC+0x2e>
		return NULL;
    5dec:	18 86       	std	Y+8, r1	; 0x08
    5dee:	1f 82       	std	Y+7, r1	; 0x07
    5df0:	33 c0       	rjmp	.+102    	; 0x5e58 <vdmAndGC+0x94>

	ASSERT_CHECK_BOOL(a);
    5df2:	e9 81       	ldd	r30, Y+1	; 0x01
    5df4:	fa 81       	ldd	r31, Y+2	; 0x02
    5df6:	80 81       	ld	r24, Z
    5df8:	91 81       	ldd	r25, Z+1	; 0x01
    5dfa:	83 30       	cpi	r24, 0x03	; 3
    5dfc:	91 05       	cpc	r25, r1
    5dfe:	11 f0       	breq	.+4      	; 0x5e04 <vdmAndGC+0x40>
    5e00:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	if(!a->value.boolVal)
    5e04:	e9 81       	ldd	r30, Y+1	; 0x01
    5e06:	fa 81       	ldd	r31, Y+2	; 0x02
    5e08:	94 81       	ldd	r25, Z+4	; 0x04
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	89 27       	eor	r24, r25
    5e0e:	88 23       	and	r24, r24
    5e10:	49 f0       	breq	.+18     	; 0x5e24 <vdmAndGC+0x60>
		return newBoolGC(false, from);
    5e12:	2d 81       	ldd	r18, Y+5	; 0x05
    5e14:	3e 81       	ldd	r19, Y+6	; 0x06
    5e16:	80 e0       	ldi	r24, 0x00	; 0
    5e18:	b9 01       	movw	r22, r18
    5e1a:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    5e1e:	98 87       	std	Y+8, r25	; 0x08
    5e20:	8f 83       	std	Y+7, r24	; 0x07
    5e22:	1a c0       	rjmp	.+52     	; 0x5e58 <vdmAndGC+0x94>

	if(b == NULL)
    5e24:	8b 81       	ldd	r24, Y+3	; 0x03
    5e26:	9c 81       	ldd	r25, Y+4	; 0x04
    5e28:	00 97       	sbiw	r24, 0x00	; 0
    5e2a:	19 f4       	brne	.+6      	; 0x5e32 <vdmAndGC+0x6e>
		return NULL;
    5e2c:	18 86       	std	Y+8, r1	; 0x08
    5e2e:	1f 82       	std	Y+7, r1	; 0x07
    5e30:	13 c0       	rjmp	.+38     	; 0x5e58 <vdmAndGC+0x94>

	ASSERT_CHECK_BOOL(b);
    5e32:	eb 81       	ldd	r30, Y+3	; 0x03
    5e34:	fc 81       	ldd	r31, Y+4	; 0x04
    5e36:	80 81       	ld	r24, Z
    5e38:	91 81       	ldd	r25, Z+1	; 0x01
    5e3a:	83 30       	cpi	r24, 0x03	; 3
    5e3c:	91 05       	cpc	r25, r1
    5e3e:	11 f0       	breq	.+4      	; 0x5e44 <vdmAndGC+0x80>
    5e40:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBoolGC(b->value.boolVal, from);
    5e44:	eb 81       	ldd	r30, Y+3	; 0x03
    5e46:	fc 81       	ldd	r31, Y+4	; 0x04
    5e48:	84 81       	ldd	r24, Z+4	; 0x04
    5e4a:	2d 81       	ldd	r18, Y+5	; 0x05
    5e4c:	3e 81       	ldd	r19, Y+6	; 0x06
    5e4e:	b9 01       	movw	r22, r18
    5e50:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    5e54:	98 87       	std	Y+8, r25	; 0x08
    5e56:	8f 83       	std	Y+7, r24	; 0x07
    5e58:	8f 81       	ldd	r24, Y+7	; 0x07
    5e5a:	98 85       	ldd	r25, Y+8	; 0x08
}
    5e5c:	28 96       	adiw	r28, 0x08	; 8
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	cd bf       	out	0x3d, r28	; 61
    5e68:	cf 91       	pop	r28
    5e6a:	df 91       	pop	r29
    5e6c:	08 95       	ret

00005e6e <vdmOr>:

TVP vdmOr(TVP a,TVP b)
{
    5e6e:	df 93       	push	r29
    5e70:	cf 93       	push	r28
    5e72:	00 d0       	rcall	.+0      	; 0x5e74 <vdmOr+0x6>
    5e74:	00 d0       	rcall	.+0      	; 0x5e76 <vdmOr+0x8>
    5e76:	00 d0       	rcall	.+0      	; 0x5e78 <vdmOr+0xa>
    5e78:	cd b7       	in	r28, 0x3d	; 61
    5e7a:	de b7       	in	r29, 0x3e	; 62
    5e7c:	9a 83       	std	Y+2, r25	; 0x02
    5e7e:	89 83       	std	Y+1, r24	; 0x01
    5e80:	7c 83       	std	Y+4, r23	; 0x04
    5e82:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL)
    5e84:	89 81       	ldd	r24, Y+1	; 0x01
    5e86:	9a 81       	ldd	r25, Y+2	; 0x02
    5e88:	00 97       	sbiw	r24, 0x00	; 0
    5e8a:	19 f4       	brne	.+6      	; 0x5e92 <vdmOr+0x24>
		return NULL;
    5e8c:	1e 82       	std	Y+6, r1	; 0x06
    5e8e:	1d 82       	std	Y+5, r1	; 0x05
    5e90:	2b c0       	rjmp	.+86     	; 0x5ee8 <vdmOr+0x7a>

	ASSERT_CHECK_BOOL(a);
    5e92:	e9 81       	ldd	r30, Y+1	; 0x01
    5e94:	fa 81       	ldd	r31, Y+2	; 0x02
    5e96:	80 81       	ld	r24, Z
    5e98:	91 81       	ldd	r25, Z+1	; 0x01
    5e9a:	83 30       	cpi	r24, 0x03	; 3
    5e9c:	91 05       	cpc	r25, r1
    5e9e:	11 f0       	breq	.+4      	; 0x5ea4 <vdmOr+0x36>
    5ea0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	if(a->value.boolVal)
    5ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    5ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    5ea8:	84 81       	ldd	r24, Z+4	; 0x04
    5eaa:	88 23       	and	r24, r24
    5eac:	31 f0       	breq	.+12     	; 0x5eba <vdmOr+0x4c>
		return newBool(true);
    5eae:	81 e0       	ldi	r24, 0x01	; 1
    5eb0:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    5eb4:	9e 83       	std	Y+6, r25	; 0x06
    5eb6:	8d 83       	std	Y+5, r24	; 0x05
    5eb8:	17 c0       	rjmp	.+46     	; 0x5ee8 <vdmOr+0x7a>

	if(b == NULL)
    5eba:	8b 81       	ldd	r24, Y+3	; 0x03
    5ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    5ebe:	00 97       	sbiw	r24, 0x00	; 0
    5ec0:	19 f4       	brne	.+6      	; 0x5ec8 <vdmOr+0x5a>
		return NULL;
    5ec2:	1e 82       	std	Y+6, r1	; 0x06
    5ec4:	1d 82       	std	Y+5, r1	; 0x05
    5ec6:	10 c0       	rjmp	.+32     	; 0x5ee8 <vdmOr+0x7a>

	ASSERT_CHECK_BOOL(b);
    5ec8:	eb 81       	ldd	r30, Y+3	; 0x03
    5eca:	fc 81       	ldd	r31, Y+4	; 0x04
    5ecc:	80 81       	ld	r24, Z
    5ece:	91 81       	ldd	r25, Z+1	; 0x01
    5ed0:	83 30       	cpi	r24, 0x03	; 3
    5ed2:	91 05       	cpc	r25, r1
    5ed4:	11 f0       	breq	.+4      	; 0x5eda <vdmOr+0x6c>
    5ed6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBool(b->value.boolVal);
    5eda:	eb 81       	ldd	r30, Y+3	; 0x03
    5edc:	fc 81       	ldd	r31, Y+4	; 0x04
    5ede:	84 81       	ldd	r24, Z+4	; 0x04
    5ee0:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    5ee4:	9e 83       	std	Y+6, r25	; 0x06
    5ee6:	8d 83       	std	Y+5, r24	; 0x05
    5ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    5eea:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5eec:	26 96       	adiw	r28, 0x06	; 6
    5eee:	0f b6       	in	r0, 0x3f	; 63
    5ef0:	f8 94       	cli
    5ef2:	de bf       	out	0x3e, r29	; 62
    5ef4:	0f be       	out	0x3f, r0	; 63
    5ef6:	cd bf       	out	0x3d, r28	; 61
    5ef8:	cf 91       	pop	r28
    5efa:	df 91       	pop	r29
    5efc:	08 95       	ret

00005efe <vdmOrGC>:

TVP vdmOrGC(TVP a, TVP b, TVP *from)
{
    5efe:	df 93       	push	r29
    5f00:	cf 93       	push	r28
    5f02:	cd b7       	in	r28, 0x3d	; 61
    5f04:	de b7       	in	r29, 0x3e	; 62
    5f06:	28 97       	sbiw	r28, 0x08	; 8
    5f08:	0f b6       	in	r0, 0x3f	; 63
    5f0a:	f8 94       	cli
    5f0c:	de bf       	out	0x3e, r29	; 62
    5f0e:	0f be       	out	0x3f, r0	; 63
    5f10:	cd bf       	out	0x3d, r28	; 61
    5f12:	9a 83       	std	Y+2, r25	; 0x02
    5f14:	89 83       	std	Y+1, r24	; 0x01
    5f16:	7c 83       	std	Y+4, r23	; 0x04
    5f18:	6b 83       	std	Y+3, r22	; 0x03
    5f1a:	5e 83       	std	Y+6, r21	; 0x06
    5f1c:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL)
    5f1e:	89 81       	ldd	r24, Y+1	; 0x01
    5f20:	9a 81       	ldd	r25, Y+2	; 0x02
    5f22:	00 97       	sbiw	r24, 0x00	; 0
    5f24:	19 f4       	brne	.+6      	; 0x5f2c <vdmOrGC+0x2e>
		return NULL;
    5f26:	18 86       	std	Y+8, r1	; 0x08
    5f28:	1f 82       	std	Y+7, r1	; 0x07
    5f2a:	31 c0       	rjmp	.+98     	; 0x5f8e <vdmOrGC+0x90>

	ASSERT_CHECK_BOOL(a);
    5f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    5f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    5f30:	80 81       	ld	r24, Z
    5f32:	91 81       	ldd	r25, Z+1	; 0x01
    5f34:	83 30       	cpi	r24, 0x03	; 3
    5f36:	91 05       	cpc	r25, r1
    5f38:	11 f0       	breq	.+4      	; 0x5f3e <vdmOrGC+0x40>
    5f3a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	if(a->value.boolVal)
    5f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    5f40:	fa 81       	ldd	r31, Y+2	; 0x02
    5f42:	84 81       	ldd	r24, Z+4	; 0x04
    5f44:	88 23       	and	r24, r24
    5f46:	49 f0       	breq	.+18     	; 0x5f5a <vdmOrGC+0x5c>
		return newBoolGC(true, from);
    5f48:	2d 81       	ldd	r18, Y+5	; 0x05
    5f4a:	3e 81       	ldd	r19, Y+6	; 0x06
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	b9 01       	movw	r22, r18
    5f50:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    5f54:	98 87       	std	Y+8, r25	; 0x08
    5f56:	8f 83       	std	Y+7, r24	; 0x07
    5f58:	1a c0       	rjmp	.+52     	; 0x5f8e <vdmOrGC+0x90>

	if(b == NULL)
    5f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5f5e:	00 97       	sbiw	r24, 0x00	; 0
    5f60:	19 f4       	brne	.+6      	; 0x5f68 <vdmOrGC+0x6a>
		return NULL;
    5f62:	18 86       	std	Y+8, r1	; 0x08
    5f64:	1f 82       	std	Y+7, r1	; 0x07
    5f66:	13 c0       	rjmp	.+38     	; 0x5f8e <vdmOrGC+0x90>

	ASSERT_CHECK_BOOL(b);
    5f68:	eb 81       	ldd	r30, Y+3	; 0x03
    5f6a:	fc 81       	ldd	r31, Y+4	; 0x04
    5f6c:	80 81       	ld	r24, Z
    5f6e:	91 81       	ldd	r25, Z+1	; 0x01
    5f70:	83 30       	cpi	r24, 0x03	; 3
    5f72:	91 05       	cpc	r25, r1
    5f74:	11 f0       	breq	.+4      	; 0x5f7a <vdmOrGC+0x7c>
    5f76:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBoolGC(b->value.boolVal, from);
    5f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    5f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    5f7e:	84 81       	ldd	r24, Z+4	; 0x04
    5f80:	2d 81       	ldd	r18, Y+5	; 0x05
    5f82:	3e 81       	ldd	r19, Y+6	; 0x06
    5f84:	b9 01       	movw	r22, r18
    5f86:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    5f8a:	98 87       	std	Y+8, r25	; 0x08
    5f8c:	8f 83       	std	Y+7, r24	; 0x07
    5f8e:	8f 81       	ldd	r24, Y+7	; 0x07
    5f90:	98 85       	ldd	r25, Y+8	; 0x08
}
    5f92:	28 96       	adiw	r28, 0x08	; 8
    5f94:	0f b6       	in	r0, 0x3f	; 63
    5f96:	f8 94       	cli
    5f98:	de bf       	out	0x3e, r29	; 62
    5f9a:	0f be       	out	0x3f, r0	; 63
    5f9c:	cd bf       	out	0x3d, r28	; 61
    5f9e:	cf 91       	pop	r28
    5fa0:	df 91       	pop	r29
    5fa2:	08 95       	ret

00005fa4 <vdmXor>:

TVP vdmXor(TVP a,TVP b)
{
    5fa4:	df 93       	push	r29
    5fa6:	cf 93       	push	r28
    5fa8:	cd b7       	in	r28, 0x3d	; 61
    5faa:	de b7       	in	r29, 0x3e	; 62
    5fac:	28 97       	sbiw	r28, 0x08	; 8
    5fae:	0f b6       	in	r0, 0x3f	; 63
    5fb0:	f8 94       	cli
    5fb2:	de bf       	out	0x3e, r29	; 62
    5fb4:	0f be       	out	0x3f, r0	; 63
    5fb6:	cd bf       	out	0x3d, r28	; 61
    5fb8:	9a 83       	std	Y+2, r25	; 0x02
    5fba:	89 83       	std	Y+1, r24	; 0x01
    5fbc:	7c 83       	std	Y+4, r23	; 0x04
    5fbe:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL || b == NULL)
    5fc0:	89 81       	ldd	r24, Y+1	; 0x01
    5fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc4:	00 97       	sbiw	r24, 0x00	; 0
    5fc6:	21 f0       	breq	.+8      	; 0x5fd0 <vdmXor+0x2c>
    5fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    5fca:	9c 81       	ldd	r25, Y+4	; 0x04
    5fcc:	00 97       	sbiw	r24, 0x00	; 0
    5fce:	19 f4       	brne	.+6      	; 0x5fd6 <vdmXor+0x32>
		return NULL;
    5fd0:	18 86       	std	Y+8, r1	; 0x08
    5fd2:	1f 82       	std	Y+7, r1	; 0x07
    5fd4:	3a c0       	rjmp	.+116    	; 0x604a <vdmXor+0xa6>

	ASSERT_CHECK_BOOL(a);
    5fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    5fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    5fda:	80 81       	ld	r24, Z
    5fdc:	91 81       	ldd	r25, Z+1	; 0x01
    5fde:	83 30       	cpi	r24, 0x03	; 3
    5fe0:	91 05       	cpc	r25, r1
    5fe2:	11 f0       	breq	.+4      	; 0x5fe8 <vdmXor+0x44>
    5fe4:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_BOOL(b);
    5fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    5fea:	fc 81       	ldd	r31, Y+4	; 0x04
    5fec:	80 81       	ld	r24, Z
    5fee:	91 81       	ldd	r25, Z+1	; 0x01
    5ff0:	83 30       	cpi	r24, 0x03	; 3
    5ff2:	91 05       	cpc	r25, r1
    5ff4:	11 f0       	breq	.+4      	; 0x5ffa <vdmXor+0x56>
    5ff6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBool((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)));
    5ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    5ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    5ffe:	94 81       	ldd	r25, Z+4	; 0x04
    6000:	81 e0       	ldi	r24, 0x01	; 1
    6002:	98 27       	eor	r25, r24
    6004:	81 e0       	ldi	r24, 0x01	; 1
    6006:	89 27       	eor	r24, r25
    6008:	88 23       	and	r24, r24
    600a:	29 f4       	brne	.+10     	; 0x6016 <vdmXor+0x72>
    600c:	eb 81       	ldd	r30, Y+3	; 0x03
    600e:	fc 81       	ldd	r31, Y+4	; 0x04
    6010:	84 81       	ldd	r24, Z+4	; 0x04
    6012:	88 23       	and	r24, r24
    6014:	71 f4       	brne	.+28     	; 0x6032 <vdmXor+0x8e>
    6016:	e9 81       	ldd	r30, Y+1	; 0x01
    6018:	fa 81       	ldd	r31, Y+2	; 0x02
    601a:	94 81       	ldd	r25, Z+4	; 0x04
    601c:	81 e0       	ldi	r24, 0x01	; 1
    601e:	89 27       	eor	r24, r25
    6020:	88 23       	and	r24, r24
    6022:	61 f4       	brne	.+24     	; 0x603c <vdmXor+0x98>
    6024:	eb 81       	ldd	r30, Y+3	; 0x03
    6026:	fc 81       	ldd	r31, Y+4	; 0x04
    6028:	94 81       	ldd	r25, Z+4	; 0x04
    602a:	81 e0       	ldi	r24, 0x01	; 1
    602c:	89 27       	eor	r24, r25
    602e:	88 23       	and	r24, r24
    6030:	29 f0       	breq	.+10     	; 0x603c <vdmXor+0x98>
    6032:	81 e0       	ldi	r24, 0x01	; 1
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	9e 83       	std	Y+6, r25	; 0x06
    6038:	8d 83       	std	Y+5, r24	; 0x05
    603a:	02 c0       	rjmp	.+4      	; 0x6040 <vdmXor+0x9c>
    603c:	1e 82       	std	Y+6, r1	; 0x06
    603e:	1d 82       	std	Y+5, r1	; 0x05
    6040:	8d 81       	ldd	r24, Y+5	; 0x05
    6042:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    6046:	98 87       	std	Y+8, r25	; 0x08
    6048:	8f 83       	std	Y+7, r24	; 0x07
    604a:	8f 81       	ldd	r24, Y+7	; 0x07
    604c:	98 85       	ldd	r25, Y+8	; 0x08
}
    604e:	28 96       	adiw	r28, 0x08	; 8
    6050:	0f b6       	in	r0, 0x3f	; 63
    6052:	f8 94       	cli
    6054:	de bf       	out	0x3e, r29	; 62
    6056:	0f be       	out	0x3f, r0	; 63
    6058:	cd bf       	out	0x3d, r28	; 61
    605a:	cf 91       	pop	r28
    605c:	df 91       	pop	r29
    605e:	08 95       	ret

00006060 <vdmXorGC>:

TVP vdmXorGC(TVP a, TVP b, TVP *from)
{
    6060:	df 93       	push	r29
    6062:	cf 93       	push	r28
    6064:	cd b7       	in	r28, 0x3d	; 61
    6066:	de b7       	in	r29, 0x3e	; 62
    6068:	2a 97       	sbiw	r28, 0x0a	; 10
    606a:	0f b6       	in	r0, 0x3f	; 63
    606c:	f8 94       	cli
    606e:	de bf       	out	0x3e, r29	; 62
    6070:	0f be       	out	0x3f, r0	; 63
    6072:	cd bf       	out	0x3d, r28	; 61
    6074:	9a 83       	std	Y+2, r25	; 0x02
    6076:	89 83       	std	Y+1, r24	; 0x01
    6078:	7c 83       	std	Y+4, r23	; 0x04
    607a:	6b 83       	std	Y+3, r22	; 0x03
    607c:	5e 83       	std	Y+6, r21	; 0x06
    607e:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL || b == NULL)
    6080:	89 81       	ldd	r24, Y+1	; 0x01
    6082:	9a 81       	ldd	r25, Y+2	; 0x02
    6084:	00 97       	sbiw	r24, 0x00	; 0
    6086:	21 f0       	breq	.+8      	; 0x6090 <vdmXorGC+0x30>
    6088:	8b 81       	ldd	r24, Y+3	; 0x03
    608a:	9c 81       	ldd	r25, Y+4	; 0x04
    608c:	00 97       	sbiw	r24, 0x00	; 0
    608e:	19 f4       	brne	.+6      	; 0x6096 <vdmXorGC+0x36>
		return NULL;
    6090:	1a 86       	std	Y+10, r1	; 0x0a
    6092:	19 86       	std	Y+9, r1	; 0x09
    6094:	3d c0       	rjmp	.+122    	; 0x6110 <vdmXorGC+0xb0>

	ASSERT_CHECK_BOOL(a);
    6096:	e9 81       	ldd	r30, Y+1	; 0x01
    6098:	fa 81       	ldd	r31, Y+2	; 0x02
    609a:	80 81       	ld	r24, Z
    609c:	91 81       	ldd	r25, Z+1	; 0x01
    609e:	83 30       	cpi	r24, 0x03	; 3
    60a0:	91 05       	cpc	r25, r1
    60a2:	11 f0       	breq	.+4      	; 0x60a8 <vdmXorGC+0x48>
    60a4:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_BOOL(b);
    60a8:	eb 81       	ldd	r30, Y+3	; 0x03
    60aa:	fc 81       	ldd	r31, Y+4	; 0x04
    60ac:	80 81       	ld	r24, Z
    60ae:	91 81       	ldd	r25, Z+1	; 0x01
    60b0:	83 30       	cpi	r24, 0x03	; 3
    60b2:	91 05       	cpc	r25, r1
    60b4:	11 f0       	breq	.+4      	; 0x60ba <vdmXorGC+0x5a>
    60b6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBoolGC((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)), from);
    60ba:	e9 81       	ldd	r30, Y+1	; 0x01
    60bc:	fa 81       	ldd	r31, Y+2	; 0x02
    60be:	94 81       	ldd	r25, Z+4	; 0x04
    60c0:	81 e0       	ldi	r24, 0x01	; 1
    60c2:	98 27       	eor	r25, r24
    60c4:	81 e0       	ldi	r24, 0x01	; 1
    60c6:	89 27       	eor	r24, r25
    60c8:	88 23       	and	r24, r24
    60ca:	29 f4       	brne	.+10     	; 0x60d6 <vdmXorGC+0x76>
    60cc:	eb 81       	ldd	r30, Y+3	; 0x03
    60ce:	fc 81       	ldd	r31, Y+4	; 0x04
    60d0:	84 81       	ldd	r24, Z+4	; 0x04
    60d2:	88 23       	and	r24, r24
    60d4:	71 f4       	brne	.+28     	; 0x60f2 <vdmXorGC+0x92>
    60d6:	e9 81       	ldd	r30, Y+1	; 0x01
    60d8:	fa 81       	ldd	r31, Y+2	; 0x02
    60da:	94 81       	ldd	r25, Z+4	; 0x04
    60dc:	81 e0       	ldi	r24, 0x01	; 1
    60de:	89 27       	eor	r24, r25
    60e0:	88 23       	and	r24, r24
    60e2:	61 f4       	brne	.+24     	; 0x60fc <vdmXorGC+0x9c>
    60e4:	eb 81       	ldd	r30, Y+3	; 0x03
    60e6:	fc 81       	ldd	r31, Y+4	; 0x04
    60e8:	94 81       	ldd	r25, Z+4	; 0x04
    60ea:	81 e0       	ldi	r24, 0x01	; 1
    60ec:	89 27       	eor	r24, r25
    60ee:	88 23       	and	r24, r24
    60f0:	29 f0       	breq	.+10     	; 0x60fc <vdmXorGC+0x9c>
    60f2:	81 e0       	ldi	r24, 0x01	; 1
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	98 87       	std	Y+8, r25	; 0x08
    60f8:	8f 83       	std	Y+7, r24	; 0x07
    60fa:	02 c0       	rjmp	.+4      	; 0x6100 <vdmXorGC+0xa0>
    60fc:	18 86       	std	Y+8, r1	; 0x08
    60fe:	1f 82       	std	Y+7, r1	; 0x07
    6100:	8f 81       	ldd	r24, Y+7	; 0x07
    6102:	2d 81       	ldd	r18, Y+5	; 0x05
    6104:	3e 81       	ldd	r19, Y+6	; 0x06
    6106:	b9 01       	movw	r22, r18
    6108:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    610c:	9a 87       	std	Y+10, r25	; 0x0a
    610e:	89 87       	std	Y+9, r24	; 0x09
    6110:	89 85       	ldd	r24, Y+9	; 0x09
    6112:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    6114:	2a 96       	adiw	r28, 0x0a	; 10
    6116:	0f b6       	in	r0, 0x3f	; 63
    6118:	f8 94       	cli
    611a:	de bf       	out	0x3e, r29	; 62
    611c:	0f be       	out	0x3f, r0	; 63
    611e:	cd bf       	out	0x3d, r28	; 61
    6120:	cf 91       	pop	r28
    6122:	df 91       	pop	r29
    6124:	08 95       	ret

00006126 <vdmImplies>:

TVP vdmImplies(TVP a,TVP b)
{
    6126:	df 93       	push	r29
    6128:	cf 93       	push	r28
    612a:	00 d0       	rcall	.+0      	; 0x612c <vdmImplies+0x6>
    612c:	00 d0       	rcall	.+0      	; 0x612e <vdmImplies+0x8>
    612e:	00 d0       	rcall	.+0      	; 0x6130 <vdmImplies+0xa>
    6130:	cd b7       	in	r28, 0x3d	; 61
    6132:	de b7       	in	r29, 0x3e	; 62
    6134:	9a 83       	std	Y+2, r25	; 0x02
    6136:	89 83       	std	Y+1, r24	; 0x01
    6138:	7c 83       	std	Y+4, r23	; 0x04
    613a:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL)
    613c:	89 81       	ldd	r24, Y+1	; 0x01
    613e:	9a 81       	ldd	r25, Y+2	; 0x02
    6140:	00 97       	sbiw	r24, 0x00	; 0
    6142:	19 f4       	brne	.+6      	; 0x614a <vdmImplies+0x24>
		return NULL;
    6144:	1e 82       	std	Y+6, r1	; 0x06
    6146:	1d 82       	std	Y+5, r1	; 0x05
    6148:	2d c0       	rjmp	.+90     	; 0x61a4 <vdmImplies+0x7e>

	ASSERT_CHECK_BOOL(a);
    614a:	e9 81       	ldd	r30, Y+1	; 0x01
    614c:	fa 81       	ldd	r31, Y+2	; 0x02
    614e:	80 81       	ld	r24, Z
    6150:	91 81       	ldd	r25, Z+1	; 0x01
    6152:	83 30       	cpi	r24, 0x03	; 3
    6154:	91 05       	cpc	r25, r1
    6156:	11 f0       	breq	.+4      	; 0x615c <vdmImplies+0x36>
    6158:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	if(!a->value.boolVal)
    615c:	e9 81       	ldd	r30, Y+1	; 0x01
    615e:	fa 81       	ldd	r31, Y+2	; 0x02
    6160:	94 81       	ldd	r25, Z+4	; 0x04
    6162:	81 e0       	ldi	r24, 0x01	; 1
    6164:	89 27       	eor	r24, r25
    6166:	88 23       	and	r24, r24
    6168:	31 f0       	breq	.+12     	; 0x6176 <vdmImplies+0x50>
		return newBool(true);
    616a:	81 e0       	ldi	r24, 0x01	; 1
    616c:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    6170:	9e 83       	std	Y+6, r25	; 0x06
    6172:	8d 83       	std	Y+5, r24	; 0x05
    6174:	17 c0       	rjmp	.+46     	; 0x61a4 <vdmImplies+0x7e>

	if(b == NULL)
    6176:	8b 81       	ldd	r24, Y+3	; 0x03
    6178:	9c 81       	ldd	r25, Y+4	; 0x04
    617a:	00 97       	sbiw	r24, 0x00	; 0
    617c:	19 f4       	brne	.+6      	; 0x6184 <vdmImplies+0x5e>
		return NULL;
    617e:	1e 82       	std	Y+6, r1	; 0x06
    6180:	1d 82       	std	Y+5, r1	; 0x05
    6182:	10 c0       	rjmp	.+32     	; 0x61a4 <vdmImplies+0x7e>

	ASSERT_CHECK_BOOL(b);
    6184:	eb 81       	ldd	r30, Y+3	; 0x03
    6186:	fc 81       	ldd	r31, Y+4	; 0x04
    6188:	80 81       	ld	r24, Z
    618a:	91 81       	ldd	r25, Z+1	; 0x01
    618c:	83 30       	cpi	r24, 0x03	; 3
    618e:	91 05       	cpc	r25, r1
    6190:	11 f0       	breq	.+4      	; 0x6196 <vdmImplies+0x70>
    6192:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBool(b->value.boolVal);
    6196:	eb 81       	ldd	r30, Y+3	; 0x03
    6198:	fc 81       	ldd	r31, Y+4	; 0x04
    619a:	84 81       	ldd	r24, Z+4	; 0x04
    619c:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    61a0:	9e 83       	std	Y+6, r25	; 0x06
    61a2:	8d 83       	std	Y+5, r24	; 0x05
    61a4:	8d 81       	ldd	r24, Y+5	; 0x05
    61a6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    61a8:	26 96       	adiw	r28, 0x06	; 6
    61aa:	0f b6       	in	r0, 0x3f	; 63
    61ac:	f8 94       	cli
    61ae:	de bf       	out	0x3e, r29	; 62
    61b0:	0f be       	out	0x3f, r0	; 63
    61b2:	cd bf       	out	0x3d, r28	; 61
    61b4:	cf 91       	pop	r28
    61b6:	df 91       	pop	r29
    61b8:	08 95       	ret

000061ba <vdmImpliesGC>:

TVP vdmImpliesGC(TVP a, TVP b, TVP *from)
{
    61ba:	df 93       	push	r29
    61bc:	cf 93       	push	r28
    61be:	cd b7       	in	r28, 0x3d	; 61
    61c0:	de b7       	in	r29, 0x3e	; 62
    61c2:	28 97       	sbiw	r28, 0x08	; 8
    61c4:	0f b6       	in	r0, 0x3f	; 63
    61c6:	f8 94       	cli
    61c8:	de bf       	out	0x3e, r29	; 62
    61ca:	0f be       	out	0x3f, r0	; 63
    61cc:	cd bf       	out	0x3d, r28	; 61
    61ce:	9a 83       	std	Y+2, r25	; 0x02
    61d0:	89 83       	std	Y+1, r24	; 0x01
    61d2:	7c 83       	std	Y+4, r23	; 0x04
    61d4:	6b 83       	std	Y+3, r22	; 0x03
    61d6:	5e 83       	std	Y+6, r21	; 0x06
    61d8:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL)
    61da:	89 81       	ldd	r24, Y+1	; 0x01
    61dc:	9a 81       	ldd	r25, Y+2	; 0x02
    61de:	00 97       	sbiw	r24, 0x00	; 0
    61e0:	19 f4       	brne	.+6      	; 0x61e8 <vdmImpliesGC+0x2e>
		return NULL;
    61e2:	18 86       	std	Y+8, r1	; 0x08
    61e4:	1f 82       	std	Y+7, r1	; 0x07
    61e6:	33 c0       	rjmp	.+102    	; 0x624e <vdmImpliesGC+0x94>

	ASSERT_CHECK_BOOL(a);
    61e8:	e9 81       	ldd	r30, Y+1	; 0x01
    61ea:	fa 81       	ldd	r31, Y+2	; 0x02
    61ec:	80 81       	ld	r24, Z
    61ee:	91 81       	ldd	r25, Z+1	; 0x01
    61f0:	83 30       	cpi	r24, 0x03	; 3
    61f2:	91 05       	cpc	r25, r1
    61f4:	11 f0       	breq	.+4      	; 0x61fa <vdmImpliesGC+0x40>
    61f6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	if(!a->value.boolVal)
    61fa:	e9 81       	ldd	r30, Y+1	; 0x01
    61fc:	fa 81       	ldd	r31, Y+2	; 0x02
    61fe:	94 81       	ldd	r25, Z+4	; 0x04
    6200:	81 e0       	ldi	r24, 0x01	; 1
    6202:	89 27       	eor	r24, r25
    6204:	88 23       	and	r24, r24
    6206:	49 f0       	breq	.+18     	; 0x621a <vdmImpliesGC+0x60>
		return newBoolGC(true, from);
    6208:	2d 81       	ldd	r18, Y+5	; 0x05
    620a:	3e 81       	ldd	r19, Y+6	; 0x06
    620c:	81 e0       	ldi	r24, 0x01	; 1
    620e:	b9 01       	movw	r22, r18
    6210:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    6214:	98 87       	std	Y+8, r25	; 0x08
    6216:	8f 83       	std	Y+7, r24	; 0x07
    6218:	1a c0       	rjmp	.+52     	; 0x624e <vdmImpliesGC+0x94>

	if(b == NULL)
    621a:	8b 81       	ldd	r24, Y+3	; 0x03
    621c:	9c 81       	ldd	r25, Y+4	; 0x04
    621e:	00 97       	sbiw	r24, 0x00	; 0
    6220:	19 f4       	brne	.+6      	; 0x6228 <vdmImpliesGC+0x6e>
		return NULL;
    6222:	18 86       	std	Y+8, r1	; 0x08
    6224:	1f 82       	std	Y+7, r1	; 0x07
    6226:	13 c0       	rjmp	.+38     	; 0x624e <vdmImpliesGC+0x94>

	ASSERT_CHECK_BOOL(b);
    6228:	eb 81       	ldd	r30, Y+3	; 0x03
    622a:	fc 81       	ldd	r31, Y+4	; 0x04
    622c:	80 81       	ld	r24, Z
    622e:	91 81       	ldd	r25, Z+1	; 0x01
    6230:	83 30       	cpi	r24, 0x03	; 3
    6232:	91 05       	cpc	r25, r1
    6234:	11 f0       	breq	.+4      	; 0x623a <vdmImpliesGC+0x80>
    6236:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBoolGC(b->value.boolVal, from);
    623a:	eb 81       	ldd	r30, Y+3	; 0x03
    623c:	fc 81       	ldd	r31, Y+4	; 0x04
    623e:	84 81       	ldd	r24, Z+4	; 0x04
    6240:	2d 81       	ldd	r18, Y+5	; 0x05
    6242:	3e 81       	ldd	r19, Y+6	; 0x06
    6244:	b9 01       	movw	r22, r18
    6246:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    624a:	98 87       	std	Y+8, r25	; 0x08
    624c:	8f 83       	std	Y+7, r24	; 0x07
    624e:	8f 81       	ldd	r24, Y+7	; 0x07
    6250:	98 85       	ldd	r25, Y+8	; 0x08
}
    6252:	28 96       	adiw	r28, 0x08	; 8
    6254:	0f b6       	in	r0, 0x3f	; 63
    6256:	f8 94       	cli
    6258:	de bf       	out	0x3e, r29	; 62
    625a:	0f be       	out	0x3f, r0	; 63
    625c:	cd bf       	out	0x3d, r28	; 61
    625e:	cf 91       	pop	r28
    6260:	df 91       	pop	r29
    6262:	08 95       	ret

00006264 <vdmBiimplication>:

TVP vdmBiimplication(TVP a,TVP b)
{
    6264:	df 93       	push	r29
    6266:	cf 93       	push	r28
    6268:	cd b7       	in	r28, 0x3d	; 61
    626a:	de b7       	in	r29, 0x3e	; 62
    626c:	28 97       	sbiw	r28, 0x08	; 8
    626e:	0f b6       	in	r0, 0x3f	; 63
    6270:	f8 94       	cli
    6272:	de bf       	out	0x3e, r29	; 62
    6274:	0f be       	out	0x3f, r0	; 63
    6276:	cd bf       	out	0x3d, r28	; 61
    6278:	9a 83       	std	Y+2, r25	; 0x02
    627a:	89 83       	std	Y+1, r24	; 0x01
    627c:	7c 83       	std	Y+4, r23	; 0x04
    627e:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL || b == NULL)
    6280:	89 81       	ldd	r24, Y+1	; 0x01
    6282:	9a 81       	ldd	r25, Y+2	; 0x02
    6284:	00 97       	sbiw	r24, 0x00	; 0
    6286:	21 f0       	breq	.+8      	; 0x6290 <vdmBiimplication+0x2c>
    6288:	8b 81       	ldd	r24, Y+3	; 0x03
    628a:	9c 81       	ldd	r25, Y+4	; 0x04
    628c:	00 97       	sbiw	r24, 0x00	; 0
    628e:	19 f4       	brne	.+6      	; 0x6296 <vdmBiimplication+0x32>
		return NULL;
    6290:	18 86       	std	Y+8, r1	; 0x08
    6292:	1f 82       	std	Y+7, r1	; 0x07
    6294:	36 c0       	rjmp	.+108    	; 0x6302 <vdmBiimplication+0x9e>

	ASSERT_CHECK_BOOL(a);
    6296:	e9 81       	ldd	r30, Y+1	; 0x01
    6298:	fa 81       	ldd	r31, Y+2	; 0x02
    629a:	80 81       	ld	r24, Z
    629c:	91 81       	ldd	r25, Z+1	; 0x01
    629e:	83 30       	cpi	r24, 0x03	; 3
    62a0:	91 05       	cpc	r25, r1
    62a2:	11 f0       	breq	.+4      	; 0x62a8 <vdmBiimplication+0x44>
    62a4:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_BOOL(b);
    62a8:	eb 81       	ldd	r30, Y+3	; 0x03
    62aa:	fc 81       	ldd	r31, Y+4	; 0x04
    62ac:	80 81       	ld	r24, Z
    62ae:	91 81       	ldd	r25, Z+1	; 0x01
    62b0:	83 30       	cpi	r24, 0x03	; 3
    62b2:	91 05       	cpc	r25, r1
    62b4:	11 f0       	breq	.+4      	; 0x62ba <vdmBiimplication+0x56>
    62b6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBool((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal));
    62ba:	e9 81       	ldd	r30, Y+1	; 0x01
    62bc:	fa 81       	ldd	r31, Y+2	; 0x02
    62be:	94 81       	ldd	r25, Z+4	; 0x04
    62c0:	81 e0       	ldi	r24, 0x01	; 1
    62c2:	89 27       	eor	r24, r25
    62c4:	88 23       	and	r24, r24
    62c6:	29 f4       	brne	.+10     	; 0x62d2 <vdmBiimplication+0x6e>
    62c8:	eb 81       	ldd	r30, Y+3	; 0x03
    62ca:	fc 81       	ldd	r31, Y+4	; 0x04
    62cc:	84 81       	ldd	r24, Z+4	; 0x04
    62ce:	88 23       	and	r24, r24
    62d0:	89 f0       	breq	.+34     	; 0x62f4 <vdmBiimplication+0x90>
    62d2:	eb 81       	ldd	r30, Y+3	; 0x03
    62d4:	fc 81       	ldd	r31, Y+4	; 0x04
    62d6:	94 81       	ldd	r25, Z+4	; 0x04
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	89 27       	eor	r24, r25
    62dc:	88 23       	and	r24, r24
    62de:	29 f4       	brne	.+10     	; 0x62ea <vdmBiimplication+0x86>
    62e0:	e9 81       	ldd	r30, Y+1	; 0x01
    62e2:	fa 81       	ldd	r31, Y+2	; 0x02
    62e4:	84 81       	ldd	r24, Z+4	; 0x04
    62e6:	88 23       	and	r24, r24
    62e8:	29 f0       	breq	.+10     	; 0x62f4 <vdmBiimplication+0x90>
    62ea:	81 e0       	ldi	r24, 0x01	; 1
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	9e 83       	std	Y+6, r25	; 0x06
    62f0:	8d 83       	std	Y+5, r24	; 0x05
    62f2:	02 c0       	rjmp	.+4      	; 0x62f8 <vdmBiimplication+0x94>
    62f4:	1e 82       	std	Y+6, r1	; 0x06
    62f6:	1d 82       	std	Y+5, r1	; 0x05
    62f8:	8d 81       	ldd	r24, Y+5	; 0x05
    62fa:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    62fe:	98 87       	std	Y+8, r25	; 0x08
    6300:	8f 83       	std	Y+7, r24	; 0x07
    6302:	8f 81       	ldd	r24, Y+7	; 0x07
    6304:	98 85       	ldd	r25, Y+8	; 0x08
}
    6306:	28 96       	adiw	r28, 0x08	; 8
    6308:	0f b6       	in	r0, 0x3f	; 63
    630a:	f8 94       	cli
    630c:	de bf       	out	0x3e, r29	; 62
    630e:	0f be       	out	0x3f, r0	; 63
    6310:	cd bf       	out	0x3d, r28	; 61
    6312:	cf 91       	pop	r28
    6314:	df 91       	pop	r29
    6316:	08 95       	ret

00006318 <vdmBiimplicationGC>:

TVP vdmBiimplicationGC(TVP a, TVP b, TVP *from)
{
    6318:	df 93       	push	r29
    631a:	cf 93       	push	r28
    631c:	cd b7       	in	r28, 0x3d	; 61
    631e:	de b7       	in	r29, 0x3e	; 62
    6320:	2a 97       	sbiw	r28, 0x0a	; 10
    6322:	0f b6       	in	r0, 0x3f	; 63
    6324:	f8 94       	cli
    6326:	de bf       	out	0x3e, r29	; 62
    6328:	0f be       	out	0x3f, r0	; 63
    632a:	cd bf       	out	0x3d, r28	; 61
    632c:	9a 83       	std	Y+2, r25	; 0x02
    632e:	89 83       	std	Y+1, r24	; 0x01
    6330:	7c 83       	std	Y+4, r23	; 0x04
    6332:	6b 83       	std	Y+3, r22	; 0x03
    6334:	5e 83       	std	Y+6, r21	; 0x06
    6336:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL || b == NULL)
    6338:	89 81       	ldd	r24, Y+1	; 0x01
    633a:	9a 81       	ldd	r25, Y+2	; 0x02
    633c:	00 97       	sbiw	r24, 0x00	; 0
    633e:	21 f0       	breq	.+8      	; 0x6348 <vdmBiimplicationGC+0x30>
    6340:	8b 81       	ldd	r24, Y+3	; 0x03
    6342:	9c 81       	ldd	r25, Y+4	; 0x04
    6344:	00 97       	sbiw	r24, 0x00	; 0
    6346:	19 f4       	brne	.+6      	; 0x634e <vdmBiimplicationGC+0x36>
		return NULL;
    6348:	1a 86       	std	Y+10, r1	; 0x0a
    634a:	19 86       	std	Y+9, r1	; 0x09
    634c:	39 c0       	rjmp	.+114    	; 0x63c0 <vdmBiimplicationGC+0xa8>

	ASSERT_CHECK_BOOL(a);
    634e:	e9 81       	ldd	r30, Y+1	; 0x01
    6350:	fa 81       	ldd	r31, Y+2	; 0x02
    6352:	80 81       	ld	r24, Z
    6354:	91 81       	ldd	r25, Z+1	; 0x01
    6356:	83 30       	cpi	r24, 0x03	; 3
    6358:	91 05       	cpc	r25, r1
    635a:	11 f0       	breq	.+4      	; 0x6360 <vdmBiimplicationGC+0x48>
    635c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_BOOL(b);
    6360:	eb 81       	ldd	r30, Y+3	; 0x03
    6362:	fc 81       	ldd	r31, Y+4	; 0x04
    6364:	80 81       	ld	r24, Z
    6366:	91 81       	ldd	r25, Z+1	; 0x01
    6368:	83 30       	cpi	r24, 0x03	; 3
    636a:	91 05       	cpc	r25, r1
    636c:	11 f0       	breq	.+4      	; 0x6372 <vdmBiimplicationGC+0x5a>
    636e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return newBoolGC((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal), from);
    6372:	e9 81       	ldd	r30, Y+1	; 0x01
    6374:	fa 81       	ldd	r31, Y+2	; 0x02
    6376:	94 81       	ldd	r25, Z+4	; 0x04
    6378:	81 e0       	ldi	r24, 0x01	; 1
    637a:	89 27       	eor	r24, r25
    637c:	88 23       	and	r24, r24
    637e:	29 f4       	brne	.+10     	; 0x638a <vdmBiimplicationGC+0x72>
    6380:	eb 81       	ldd	r30, Y+3	; 0x03
    6382:	fc 81       	ldd	r31, Y+4	; 0x04
    6384:	84 81       	ldd	r24, Z+4	; 0x04
    6386:	88 23       	and	r24, r24
    6388:	89 f0       	breq	.+34     	; 0x63ac <vdmBiimplicationGC+0x94>
    638a:	eb 81       	ldd	r30, Y+3	; 0x03
    638c:	fc 81       	ldd	r31, Y+4	; 0x04
    638e:	94 81       	ldd	r25, Z+4	; 0x04
    6390:	81 e0       	ldi	r24, 0x01	; 1
    6392:	89 27       	eor	r24, r25
    6394:	88 23       	and	r24, r24
    6396:	29 f4       	brne	.+10     	; 0x63a2 <vdmBiimplicationGC+0x8a>
    6398:	e9 81       	ldd	r30, Y+1	; 0x01
    639a:	fa 81       	ldd	r31, Y+2	; 0x02
    639c:	84 81       	ldd	r24, Z+4	; 0x04
    639e:	88 23       	and	r24, r24
    63a0:	29 f0       	breq	.+10     	; 0x63ac <vdmBiimplicationGC+0x94>
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	98 87       	std	Y+8, r25	; 0x08
    63a8:	8f 83       	std	Y+7, r24	; 0x07
    63aa:	02 c0       	rjmp	.+4      	; 0x63b0 <vdmBiimplicationGC+0x98>
    63ac:	18 86       	std	Y+8, r1	; 0x08
    63ae:	1f 82       	std	Y+7, r1	; 0x07
    63b0:	8f 81       	ldd	r24, Y+7	; 0x07
    63b2:	2d 81       	ldd	r18, Y+5	; 0x05
    63b4:	3e 81       	ldd	r19, Y+6	; 0x06
    63b6:	b9 01       	movw	r22, r18
    63b8:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    63bc:	9a 87       	std	Y+10, r25	; 0x0a
    63be:	89 87       	std	Y+9, r24	; 0x09
    63c0:	89 85       	ldd	r24, Y+9	; 0x09
    63c2:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    63c4:	2a 96       	adiw	r28, 0x0a	; 10
    63c6:	0f b6       	in	r0, 0x3f	; 63
    63c8:	f8 94       	cli
    63ca:	de bf       	out	0x3e, r29	; 62
    63cc:	0f be       	out	0x3f, r0	; 63
    63ce:	cd bf       	out	0x3d, r28	; 61
    63d0:	cf 91       	pop	r28
    63d2:	df 91       	pop	r29
    63d4:	08 95       	ret

000063d6 <isNumber>:

bool isNumber(TVP val)
{
    63d6:	df 93       	push	r29
    63d8:	cf 93       	push	r28
    63da:	00 d0       	rcall	.+0      	; 0x63dc <isNumber+0x6>
    63dc:	00 d0       	rcall	.+0      	; 0x63de <isNumber+0x8>
    63de:	0f 92       	push	r0
    63e0:	cd b7       	in	r28, 0x3d	; 61
    63e2:	de b7       	in	r29, 0x3e	; 62
    63e4:	9a 83       	std	Y+2, r25	; 0x02
    63e6:	89 83       	std	Y+1, r24	; 0x01
	switch(val->type)
    63e8:	e9 81       	ldd	r30, Y+1	; 0x01
    63ea:	fa 81       	ldd	r31, Y+2	; 0x02
    63ec:	80 81       	ld	r24, Z
    63ee:	91 81       	ldd	r25, Z+1	; 0x01
    63f0:	9d 83       	std	Y+5, r25	; 0x05
    63f2:	8c 83       	std	Y+4, r24	; 0x04
    63f4:	8c 81       	ldd	r24, Y+4	; 0x04
    63f6:	9d 81       	ldd	r25, Y+5	; 0x05
    63f8:	83 30       	cpi	r24, 0x03	; 3
    63fa:	91 05       	cpc	r25, r1
    63fc:	30 f0       	brcs	.+12     	; 0x640a <isNumber+0x34>
    63fe:	8c 81       	ldd	r24, Y+4	; 0x04
    6400:	9d 81       	ldd	r25, Y+5	; 0x05
    6402:	04 97       	sbiw	r24, 0x04	; 4
    6404:	82 30       	cpi	r24, 0x02	; 2
    6406:	91 05       	cpc	r25, r1
    6408:	18 f4       	brcc	.+6      	; 0x6410 <isNumber+0x3a>
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
	case VDM_REAL:
	case VDM_RAT:
		return true;
    640a:	91 e0       	ldi	r25, 0x01	; 1
    640c:	9b 83       	std	Y+3, r25	; 0x03
    640e:	01 c0       	rjmp	.+2      	; 0x6412 <isNumber+0x3c>
	default:
		return false;
    6410:	1b 82       	std	Y+3, r1	; 0x03
    6412:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    6414:	0f 90       	pop	r0
    6416:	0f 90       	pop	r0
    6418:	0f 90       	pop	r0
    641a:	0f 90       	pop	r0
    641c:	0f 90       	pop	r0
    641e:	cf 91       	pop	r28
    6420:	df 91       	pop	r29
    6422:	08 95       	ret

00006424 <isInt>:

TVP isInt(TVP v)
{
    6424:	df 93       	push	r29
    6426:	cf 93       	push	r28
    6428:	00 d0       	rcall	.+0      	; 0x642a <isInt+0x6>
    642a:	00 d0       	rcall	.+0      	; 0x642c <isInt+0x8>
    642c:	cd b7       	in	r28, 0x3d	; 61
    642e:	de b7       	in	r29, 0x3e	; 62
    6430:	9a 83       	std	Y+2, r25	; 0x02
    6432:	89 83       	std	Y+1, r24	; 0x01
	if(v->type == VDM_INT)
    6434:	e9 81       	ldd	r30, Y+1	; 0x01
    6436:	fa 81       	ldd	r31, Y+2	; 0x02
    6438:	80 81       	ld	r24, Z
    643a:	91 81       	ldd	r25, Z+1	; 0x01
    643c:	00 97       	sbiw	r24, 0x00	; 0
    643e:	31 f4       	brne	.+12     	; 0x644c <isInt+0x28>
		return newBool(true);
    6440:	81 e0       	ldi	r24, 0x01	; 1
    6442:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    6446:	9c 83       	std	Y+4, r25	; 0x04
    6448:	8b 83       	std	Y+3, r24	; 0x03
    644a:	05 c0       	rjmp	.+10     	; 0x6456 <isInt+0x32>
	return newBool(false);
    644c:	80 e0       	ldi	r24, 0x00	; 0
    644e:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    6452:	9c 83       	std	Y+4, r25	; 0x04
    6454:	8b 83       	std	Y+3, r24	; 0x03
    6456:	8b 81       	ldd	r24, Y+3	; 0x03
    6458:	9c 81       	ldd	r25, Y+4	; 0x04
}
    645a:	0f 90       	pop	r0
    645c:	0f 90       	pop	r0
    645e:	0f 90       	pop	r0
    6460:	0f 90       	pop	r0
    6462:	cf 91       	pop	r28
    6464:	df 91       	pop	r29
    6466:	08 95       	ret

00006468 <isIntGC>:

TVP isIntGC(TVP v, TVP *from)
{
    6468:	df 93       	push	r29
    646a:	cf 93       	push	r28
    646c:	00 d0       	rcall	.+0      	; 0x646e <isIntGC+0x6>
    646e:	00 d0       	rcall	.+0      	; 0x6470 <isIntGC+0x8>
    6470:	00 d0       	rcall	.+0      	; 0x6472 <isIntGC+0xa>
    6472:	cd b7       	in	r28, 0x3d	; 61
    6474:	de b7       	in	r29, 0x3e	; 62
    6476:	9a 83       	std	Y+2, r25	; 0x02
    6478:	89 83       	std	Y+1, r24	; 0x01
    647a:	7c 83       	std	Y+4, r23	; 0x04
    647c:	6b 83       	std	Y+3, r22	; 0x03
	if(v->type == VDM_INT)
    647e:	e9 81       	ldd	r30, Y+1	; 0x01
    6480:	fa 81       	ldd	r31, Y+2	; 0x02
    6482:	80 81       	ld	r24, Z
    6484:	91 81       	ldd	r25, Z+1	; 0x01
    6486:	00 97       	sbiw	r24, 0x00	; 0
    6488:	49 f4       	brne	.+18     	; 0x649c <isIntGC+0x34>
		return newBoolGC(true, from);
    648a:	2b 81       	ldd	r18, Y+3	; 0x03
    648c:	3c 81       	ldd	r19, Y+4	; 0x04
    648e:	81 e0       	ldi	r24, 0x01	; 1
    6490:	b9 01       	movw	r22, r18
    6492:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    6496:	9e 83       	std	Y+6, r25	; 0x06
    6498:	8d 83       	std	Y+5, r24	; 0x05
    649a:	08 c0       	rjmp	.+16     	; 0x64ac <isIntGC+0x44>
	return newBoolGC(false, from);
    649c:	2b 81       	ldd	r18, Y+3	; 0x03
    649e:	3c 81       	ldd	r19, Y+4	; 0x04
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	b9 01       	movw	r22, r18
    64a4:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    64a8:	9e 83       	std	Y+6, r25	; 0x06
    64aa:	8d 83       	std	Y+5, r24	; 0x05
    64ac:	8d 81       	ldd	r24, Y+5	; 0x05
    64ae:	9e 81       	ldd	r25, Y+6	; 0x06
}
    64b0:	26 96       	adiw	r28, 0x06	; 6
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	f8 94       	cli
    64b6:	de bf       	out	0x3e, r29	; 62
    64b8:	0f be       	out	0x3f, r0	; 63
    64ba:	cd bf       	out	0x3d, r28	; 61
    64bc:	cf 91       	pop	r28
    64be:	df 91       	pop	r29
    64c0:	08 95       	ret

000064c2 <isReal>:

TVP isReal(TVP v)
{
    64c2:	df 93       	push	r29
    64c4:	cf 93       	push	r28
    64c6:	00 d0       	rcall	.+0      	; 0x64c8 <isReal+0x6>
    64c8:	00 d0       	rcall	.+0      	; 0x64ca <isReal+0x8>
    64ca:	cd b7       	in	r28, 0x3d	; 61
    64cc:	de b7       	in	r29, 0x3e	; 62
    64ce:	9a 83       	std	Y+2, r25	; 0x02
    64d0:	89 83       	std	Y+1, r24	; 0x01
	if(v->type == VDM_REAL)
    64d2:	e9 81       	ldd	r30, Y+1	; 0x01
    64d4:	fa 81       	ldd	r31, Y+2	; 0x02
    64d6:	80 81       	ld	r24, Z
    64d8:	91 81       	ldd	r25, Z+1	; 0x01
    64da:	84 30       	cpi	r24, 0x04	; 4
    64dc:	91 05       	cpc	r25, r1
    64de:	31 f4       	brne	.+12     	; 0x64ec <isReal+0x2a>
		return newBool(true);
    64e0:	81 e0       	ldi	r24, 0x01	; 1
    64e2:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    64e6:	9c 83       	std	Y+4, r25	; 0x04
    64e8:	8b 83       	std	Y+3, r24	; 0x03
    64ea:	05 c0       	rjmp	.+10     	; 0x64f6 <isReal+0x34>
	return newBool(false);
    64ec:	80 e0       	ldi	r24, 0x00	; 0
    64ee:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    64f2:	9c 83       	std	Y+4, r25	; 0x04
    64f4:	8b 83       	std	Y+3, r24	; 0x03
    64f6:	8b 81       	ldd	r24, Y+3	; 0x03
    64f8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    64fa:	0f 90       	pop	r0
    64fc:	0f 90       	pop	r0
    64fe:	0f 90       	pop	r0
    6500:	0f 90       	pop	r0
    6502:	cf 91       	pop	r28
    6504:	df 91       	pop	r29
    6506:	08 95       	ret

00006508 <isRealGC>:

TVP isRealGC(TVP v, TVP *from)
{
    6508:	df 93       	push	r29
    650a:	cf 93       	push	r28
    650c:	00 d0       	rcall	.+0      	; 0x650e <isRealGC+0x6>
    650e:	00 d0       	rcall	.+0      	; 0x6510 <isRealGC+0x8>
    6510:	00 d0       	rcall	.+0      	; 0x6512 <isRealGC+0xa>
    6512:	cd b7       	in	r28, 0x3d	; 61
    6514:	de b7       	in	r29, 0x3e	; 62
    6516:	9a 83       	std	Y+2, r25	; 0x02
    6518:	89 83       	std	Y+1, r24	; 0x01
    651a:	7c 83       	std	Y+4, r23	; 0x04
    651c:	6b 83       	std	Y+3, r22	; 0x03
	if(v->type == VDM_REAL)
    651e:	e9 81       	ldd	r30, Y+1	; 0x01
    6520:	fa 81       	ldd	r31, Y+2	; 0x02
    6522:	80 81       	ld	r24, Z
    6524:	91 81       	ldd	r25, Z+1	; 0x01
    6526:	84 30       	cpi	r24, 0x04	; 4
    6528:	91 05       	cpc	r25, r1
    652a:	49 f4       	brne	.+18     	; 0x653e <isRealGC+0x36>
		return newBoolGC(true, from);
    652c:	2b 81       	ldd	r18, Y+3	; 0x03
    652e:	3c 81       	ldd	r19, Y+4	; 0x04
    6530:	81 e0       	ldi	r24, 0x01	; 1
    6532:	b9 01       	movw	r22, r18
    6534:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    6538:	9e 83       	std	Y+6, r25	; 0x06
    653a:	8d 83       	std	Y+5, r24	; 0x05
    653c:	08 c0       	rjmp	.+16     	; 0x654e <isRealGC+0x46>
	return newBoolGC(false, from);
    653e:	2b 81       	ldd	r18, Y+3	; 0x03
    6540:	3c 81       	ldd	r19, Y+4	; 0x04
    6542:	80 e0       	ldi	r24, 0x00	; 0
    6544:	b9 01       	movw	r22, r18
    6546:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    654a:	9e 83       	std	Y+6, r25	; 0x06
    654c:	8d 83       	std	Y+5, r24	; 0x05
    654e:	8d 81       	ldd	r24, Y+5	; 0x05
    6550:	9e 81       	ldd	r25, Y+6	; 0x06
}
    6552:	26 96       	adiw	r28, 0x06	; 6
    6554:	0f b6       	in	r0, 0x3f	; 63
    6556:	f8 94       	cli
    6558:	de bf       	out	0x3e, r29	; 62
    655a:	0f be       	out	0x3f, r0	; 63
    655c:	cd bf       	out	0x3d, r28	; 61
    655e:	cf 91       	pop	r28
    6560:	df 91       	pop	r29
    6562:	08 95       	ret

00006564 <isBool>:

TVP isBool(TVP v)
{
    6564:	df 93       	push	r29
    6566:	cf 93       	push	r28
    6568:	00 d0       	rcall	.+0      	; 0x656a <isBool+0x6>
    656a:	00 d0       	rcall	.+0      	; 0x656c <isBool+0x8>
    656c:	cd b7       	in	r28, 0x3d	; 61
    656e:	de b7       	in	r29, 0x3e	; 62
    6570:	9a 83       	std	Y+2, r25	; 0x02
    6572:	89 83       	std	Y+1, r24	; 0x01
	if(v->type == VDM_BOOL)
    6574:	e9 81       	ldd	r30, Y+1	; 0x01
    6576:	fa 81       	ldd	r31, Y+2	; 0x02
    6578:	80 81       	ld	r24, Z
    657a:	91 81       	ldd	r25, Z+1	; 0x01
    657c:	83 30       	cpi	r24, 0x03	; 3
    657e:	91 05       	cpc	r25, r1
    6580:	31 f4       	brne	.+12     	; 0x658e <isBool+0x2a>
		return newBool(true);
    6582:	81 e0       	ldi	r24, 0x01	; 1
    6584:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    6588:	9c 83       	std	Y+4, r25	; 0x04
    658a:	8b 83       	std	Y+3, r24	; 0x03
    658c:	05 c0       	rjmp	.+10     	; 0x6598 <isBool+0x34>
	return newBool(false);
    658e:	80 e0       	ldi	r24, 0x00	; 0
    6590:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    6594:	9c 83       	std	Y+4, r25	; 0x04
    6596:	8b 83       	std	Y+3, r24	; 0x03
    6598:	8b 81       	ldd	r24, Y+3	; 0x03
    659a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    659c:	0f 90       	pop	r0
    659e:	0f 90       	pop	r0
    65a0:	0f 90       	pop	r0
    65a2:	0f 90       	pop	r0
    65a4:	cf 91       	pop	r28
    65a6:	df 91       	pop	r29
    65a8:	08 95       	ret

000065aa <isBoolGC>:

TVP isBoolGC(TVP v, TVP *from)
{
    65aa:	df 93       	push	r29
    65ac:	cf 93       	push	r28
    65ae:	00 d0       	rcall	.+0      	; 0x65b0 <isBoolGC+0x6>
    65b0:	00 d0       	rcall	.+0      	; 0x65b2 <isBoolGC+0x8>
    65b2:	00 d0       	rcall	.+0      	; 0x65b4 <isBoolGC+0xa>
    65b4:	cd b7       	in	r28, 0x3d	; 61
    65b6:	de b7       	in	r29, 0x3e	; 62
    65b8:	9a 83       	std	Y+2, r25	; 0x02
    65ba:	89 83       	std	Y+1, r24	; 0x01
    65bc:	7c 83       	std	Y+4, r23	; 0x04
    65be:	6b 83       	std	Y+3, r22	; 0x03
	if(v->type == VDM_BOOL)
    65c0:	e9 81       	ldd	r30, Y+1	; 0x01
    65c2:	fa 81       	ldd	r31, Y+2	; 0x02
    65c4:	80 81       	ld	r24, Z
    65c6:	91 81       	ldd	r25, Z+1	; 0x01
    65c8:	83 30       	cpi	r24, 0x03	; 3
    65ca:	91 05       	cpc	r25, r1
    65cc:	49 f4       	brne	.+18     	; 0x65e0 <isBoolGC+0x36>
		return newBoolGC(true, from);
    65ce:	2b 81       	ldd	r18, Y+3	; 0x03
    65d0:	3c 81       	ldd	r19, Y+4	; 0x04
    65d2:	81 e0       	ldi	r24, 0x01	; 1
    65d4:	b9 01       	movw	r22, r18
    65d6:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    65da:	9e 83       	std	Y+6, r25	; 0x06
    65dc:	8d 83       	std	Y+5, r24	; 0x05
    65de:	08 c0       	rjmp	.+16     	; 0x65f0 <isBoolGC+0x46>
	return newBoolGC(false, from);
    65e0:	2b 81       	ldd	r18, Y+3	; 0x03
    65e2:	3c 81       	ldd	r19, Y+4	; 0x04
    65e4:	80 e0       	ldi	r24, 0x00	; 0
    65e6:	b9 01       	movw	r22, r18
    65e8:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    65ec:	9e 83       	std	Y+6, r25	; 0x06
    65ee:	8d 83       	std	Y+5, r24	; 0x05
    65f0:	8d 81       	ldd	r24, Y+5	; 0x05
    65f2:	9e 81       	ldd	r25, Y+6	; 0x06
}
    65f4:	26 96       	adiw	r28, 0x06	; 6
    65f6:	0f b6       	in	r0, 0x3f	; 63
    65f8:	f8 94       	cli
    65fa:	de bf       	out	0x3e, r29	; 62
    65fc:	0f be       	out	0x3f, r0	; 63
    65fe:	cd bf       	out	0x3d, r28	; 61
    6600:	cf 91       	pop	r28
    6602:	df 91       	pop	r29
    6604:	08 95       	ret

00006606 <toDouble>:
 *
 * Note that the following functions are defined for all numbers
 */

double toDouble(TVP a)
{
    6606:	df 93       	push	r29
    6608:	cf 93       	push	r28
    660a:	cd b7       	in	r28, 0x3d	; 61
    660c:	de b7       	in	r29, 0x3e	; 62
    660e:	28 97       	sbiw	r28, 0x08	; 8
    6610:	0f b6       	in	r0, 0x3f	; 63
    6612:	f8 94       	cli
    6614:	de bf       	out	0x3e, r29	; 62
    6616:	0f be       	out	0x3f, r0	; 63
    6618:	cd bf       	out	0x3d, r28	; 61
    661a:	9a 83       	std	Y+2, r25	; 0x02
    661c:	89 83       	std	Y+1, r24	; 0x01
	switch(a->type)
    661e:	e9 81       	ldd	r30, Y+1	; 0x01
    6620:	fa 81       	ldd	r31, Y+2	; 0x02
    6622:	80 81       	ld	r24, Z
    6624:	91 81       	ldd	r25, Z+1	; 0x01
    6626:	98 87       	std	Y+8, r25	; 0x08
    6628:	8f 83       	std	Y+7, r24	; 0x07
    662a:	af 81       	ldd	r26, Y+7	; 0x07
    662c:	b8 85       	ldd	r27, Y+8	; 0x08
    662e:	a3 30       	cpi	r26, 0x03	; 3
    6630:	b1 05       	cpc	r27, r1
    6632:	38 f0       	brcs	.+14     	; 0x6642 <toDouble+0x3c>
    6634:	8f 81       	ldd	r24, Y+7	; 0x07
    6636:	98 85       	ldd	r25, Y+8	; 0x08
    6638:	04 97       	sbiw	r24, 0x04	; 4
    663a:	82 30       	cpi	r24, 0x02	; 2
    663c:	91 05       	cpc	r25, r1
    663e:	e8 f4       	brcc	.+58     	; 0x667a <toDouble+0x74>
    6640:	11 c0       	rjmp	.+34     	; 0x6664 <toDouble+0x5e>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return (double) a->value.intVal;
    6642:	e9 81       	ldd	r30, Y+1	; 0x01
    6644:	fa 81       	ldd	r31, Y+2	; 0x02
    6646:	84 81       	ldd	r24, Z+4	; 0x04
    6648:	95 81       	ldd	r25, Z+5	; 0x05
    664a:	aa 27       	eor	r26, r26
    664c:	97 fd       	sbrc	r25, 7
    664e:	a0 95       	com	r26
    6650:	ba 2f       	mov	r27, r26
    6652:	bc 01       	movw	r22, r24
    6654:	cd 01       	movw	r24, r26
    6656:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    665a:	6b 83       	std	Y+3, r22	; 0x03
    665c:	7c 83       	std	Y+4, r23	; 0x04
    665e:	8d 83       	std	Y+5, r24	; 0x05
    6660:	9e 83       	std	Y+6, r25	; 0x06
    6662:	13 c0       	rjmp	.+38     	; 0x668a <toDouble+0x84>
	case VDM_REAL:
	case VDM_RAT:
		return a->value.doubleVal;
    6664:	e9 81       	ldd	r30, Y+1	; 0x01
    6666:	fa 81       	ldd	r31, Y+2	; 0x02
    6668:	84 81       	ldd	r24, Z+4	; 0x04
    666a:	95 81       	ldd	r25, Z+5	; 0x05
    666c:	a6 81       	ldd	r26, Z+6	; 0x06
    666e:	b7 81       	ldd	r27, Z+7	; 0x07
    6670:	8b 83       	std	Y+3, r24	; 0x03
    6672:	9c 83       	std	Y+4, r25	; 0x04
    6674:	ad 83       	std	Y+5, r26	; 0x05
    6676:	be 83       	std	Y+6, r27	; 0x06
    6678:	08 c0       	rjmp	.+16     	; 0x668a <toDouble+0x84>
	default:
		FATAL_ERROR("Invalid type");
		return 0;
    667a:	80 e0       	ldi	r24, 0x00	; 0
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	a0 e0       	ldi	r26, 0x00	; 0
    6680:	b0 e0       	ldi	r27, 0x00	; 0
    6682:	8b 83       	std	Y+3, r24	; 0x03
    6684:	9c 83       	std	Y+4, r25	; 0x04
    6686:	ad 83       	std	Y+5, r26	; 0x05
    6688:	be 83       	std	Y+6, r27	; 0x06
    668a:	8b 81       	ldd	r24, Y+3	; 0x03
    668c:	9c 81       	ldd	r25, Y+4	; 0x04
    668e:	ad 81       	ldd	r26, Y+5	; 0x05
    6690:	be 81       	ldd	r27, Y+6	; 0x06
	}
}
    6692:	bc 01       	movw	r22, r24
    6694:	cd 01       	movw	r24, r26
    6696:	28 96       	adiw	r28, 0x08	; 8
    6698:	0f b6       	in	r0, 0x3f	; 63
    669a:	f8 94       	cli
    669c:	de bf       	out	0x3e, r29	; 62
    669e:	0f be       	out	0x3f, r0	; 63
    66a0:	cd bf       	out	0x3d, r28	; 61
    66a2:	cf 91       	pop	r28
    66a4:	df 91       	pop	r29
    66a6:	08 95       	ret

000066a8 <toInteger>:

int toInteger(TVP a)
{
    66a8:	df 93       	push	r29
    66aa:	cf 93       	push	r28
    66ac:	00 d0       	rcall	.+0      	; 0x66ae <toInteger+0x6>
    66ae:	00 d0       	rcall	.+0      	; 0x66b0 <toInteger+0x8>
    66b0:	00 d0       	rcall	.+0      	; 0x66b2 <toInteger+0xa>
    66b2:	cd b7       	in	r28, 0x3d	; 61
    66b4:	de b7       	in	r29, 0x3e	; 62
    66b6:	9a 83       	std	Y+2, r25	; 0x02
    66b8:	89 83       	std	Y+1, r24	; 0x01
	switch(a->type)
    66ba:	e9 81       	ldd	r30, Y+1	; 0x01
    66bc:	fa 81       	ldd	r31, Y+2	; 0x02
    66be:	80 81       	ld	r24, Z
    66c0:	91 81       	ldd	r25, Z+1	; 0x01
    66c2:	9e 83       	std	Y+6, r25	; 0x06
    66c4:	8d 83       	std	Y+5, r24	; 0x05
    66c6:	8d 81       	ldd	r24, Y+5	; 0x05
    66c8:	9e 81       	ldd	r25, Y+6	; 0x06
    66ca:	83 30       	cpi	r24, 0x03	; 3
    66cc:	91 05       	cpc	r25, r1
    66ce:	30 f0       	brcs	.+12     	; 0x66dc <toInteger+0x34>
    66d0:	8d 81       	ldd	r24, Y+5	; 0x05
    66d2:	9e 81       	ldd	r25, Y+6	; 0x06
    66d4:	84 30       	cpi	r24, 0x04	; 4
    66d6:	91 05       	cpc	r25, r1
    66d8:	41 f0       	breq	.+16     	; 0x66ea <toInteger+0x42>
    66da:	16 c0       	rjmp	.+44     	; 0x6708 <toInteger+0x60>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return a->value.intVal;
    66dc:	e9 81       	ldd	r30, Y+1	; 0x01
    66de:	fa 81       	ldd	r31, Y+2	; 0x02
    66e0:	84 81       	ldd	r24, Z+4	; 0x04
    66e2:	95 81       	ldd	r25, Z+5	; 0x05
    66e4:	9c 83       	std	Y+4, r25	; 0x04
    66e6:	8b 83       	std	Y+3, r24	; 0x03
    66e8:	11 c0       	rjmp	.+34     	; 0x670c <toInteger+0x64>
	case VDM_REAL:
		return a->value.doubleVal;
    66ea:	e9 81       	ldd	r30, Y+1	; 0x01
    66ec:	fa 81       	ldd	r31, Y+2	; 0x02
    66ee:	84 81       	ldd	r24, Z+4	; 0x04
    66f0:	95 81       	ldd	r25, Z+5	; 0x05
    66f2:	a6 81       	ldd	r26, Z+6	; 0x06
    66f4:	b7 81       	ldd	r27, Z+7	; 0x07
    66f6:	bc 01       	movw	r22, r24
    66f8:	cd 01       	movw	r24, r26
    66fa:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    66fe:	dc 01       	movw	r26, r24
    6700:	cb 01       	movw	r24, r22
    6702:	9c 83       	std	Y+4, r25	; 0x04
    6704:	8b 83       	std	Y+3, r24	; 0x03
    6706:	02 c0       	rjmp	.+4      	; 0x670c <toInteger+0x64>
	default:
		FATAL_ERROR("Invalid type");
		return 0;
    6708:	1c 82       	std	Y+4, r1	; 0x04
    670a:	1b 82       	std	Y+3, r1	; 0x03
    670c:	8b 81       	ldd	r24, Y+3	; 0x03
    670e:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    6710:	26 96       	adiw	r28, 0x06	; 6
    6712:	0f b6       	in	r0, 0x3f	; 63
    6714:	f8 94       	cli
    6716:	de bf       	out	0x3e, r29	; 62
    6718:	0f be       	out	0x3f, r0	; 63
    671a:	cd bf       	out	0x3d, r28	; 61
    671c:	cf 91       	pop	r28
    671e:	df 91       	pop	r29
    6720:	08 95       	ret

00006722 <toBool>:

bool toBool(TVP a)
{
    6722:	df 93       	push	r29
    6724:	cf 93       	push	r28
    6726:	00 d0       	rcall	.+0      	; 0x6728 <toBool+0x6>
    6728:	cd b7       	in	r28, 0x3d	; 61
    672a:	de b7       	in	r29, 0x3e	; 62
    672c:	9a 83       	std	Y+2, r25	; 0x02
    672e:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_BOOL(a);
    6730:	e9 81       	ldd	r30, Y+1	; 0x01
    6732:	fa 81       	ldd	r31, Y+2	; 0x02
    6734:	80 81       	ld	r24, Z
    6736:	91 81       	ldd	r25, Z+1	; 0x01
    6738:	83 30       	cpi	r24, 0x03	; 3
    673a:	91 05       	cpc	r25, r1
    673c:	11 f0       	breq	.+4      	; 0x6742 <toBool+0x20>
    673e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return a->value.boolVal;
    6742:	e9 81       	ldd	r30, Y+1	; 0x01
    6744:	fa 81       	ldd	r31, Y+2	; 0x02
    6746:	84 81       	ldd	r24, Z+4	; 0x04
}
    6748:	0f 90       	pop	r0
    674a:	0f 90       	pop	r0
    674c:	cf 91       	pop	r28
    674e:	df 91       	pop	r29
    6750:	08 95       	ret

00006752 <vdmMinus>:

TVP vdmMinus(TVP arg)
{
    6752:	df 93       	push	r29
    6754:	cf 93       	push	r28
    6756:	00 d0       	rcall	.+0      	; 0x6758 <vdmMinus+0x6>
    6758:	00 d0       	rcall	.+0      	; 0x675a <vdmMinus+0x8>
    675a:	00 d0       	rcall	.+0      	; 0x675c <vdmMinus+0xa>
    675c:	cd b7       	in	r28, 0x3d	; 61
    675e:	de b7       	in	r29, 0x3e	; 62
    6760:	9a 83       	std	Y+2, r25	; 0x02
    6762:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_NUMERIC(arg);
    6764:	e9 81       	ldd	r30, Y+1	; 0x01
    6766:	fa 81       	ldd	r31, Y+2	; 0x02
    6768:	80 81       	ld	r24, Z
    676a:	91 81       	ldd	r25, Z+1	; 0x01
    676c:	00 97       	sbiw	r24, 0x00	; 0
    676e:	f1 f0       	breq	.+60     	; 0x67ac <vdmMinus+0x5a>
    6770:	e9 81       	ldd	r30, Y+1	; 0x01
    6772:	fa 81       	ldd	r31, Y+2	; 0x02
    6774:	80 81       	ld	r24, Z
    6776:	91 81       	ldd	r25, Z+1	; 0x01
    6778:	81 30       	cpi	r24, 0x01	; 1
    677a:	91 05       	cpc	r25, r1
    677c:	b9 f0       	breq	.+46     	; 0x67ac <vdmMinus+0x5a>
    677e:	e9 81       	ldd	r30, Y+1	; 0x01
    6780:	fa 81       	ldd	r31, Y+2	; 0x02
    6782:	80 81       	ld	r24, Z
    6784:	91 81       	ldd	r25, Z+1	; 0x01
    6786:	82 30       	cpi	r24, 0x02	; 2
    6788:	91 05       	cpc	r25, r1
    678a:	81 f0       	breq	.+32     	; 0x67ac <vdmMinus+0x5a>
    678c:	e9 81       	ldd	r30, Y+1	; 0x01
    678e:	fa 81       	ldd	r31, Y+2	; 0x02
    6790:	80 81       	ld	r24, Z
    6792:	91 81       	ldd	r25, Z+1	; 0x01
    6794:	84 30       	cpi	r24, 0x04	; 4
    6796:	91 05       	cpc	r25, r1
    6798:	49 f0       	breq	.+18     	; 0x67ac <vdmMinus+0x5a>
    679a:	e9 81       	ldd	r30, Y+1	; 0x01
    679c:	fa 81       	ldd	r31, Y+2	; 0x02
    679e:	80 81       	ld	r24, Z
    67a0:	91 81       	ldd	r25, Z+1	; 0x01
    67a2:	85 30       	cpi	r24, 0x05	; 5
    67a4:	91 05       	cpc	r25, r1
    67a6:	11 f0       	breq	.+4      	; 0x67ac <vdmMinus+0x5a>
    67a8:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	switch(arg->type)
    67ac:	e9 81       	ldd	r30, Y+1	; 0x01
    67ae:	fa 81       	ldd	r31, Y+2	; 0x02
    67b0:	80 81       	ld	r24, Z
    67b2:	91 81       	ldd	r25, Z+1	; 0x01
    67b4:	9e 83       	std	Y+6, r25	; 0x06
    67b6:	8d 83       	std	Y+5, r24	; 0x05
    67b8:	8d 81       	ldd	r24, Y+5	; 0x05
    67ba:	9e 81       	ldd	r25, Y+6	; 0x06
    67bc:	83 30       	cpi	r24, 0x03	; 3
    67be:	91 05       	cpc	r25, r1
    67c0:	30 f0       	brcs	.+12     	; 0x67ce <vdmMinus+0x7c>
    67c2:	8d 81       	ldd	r24, Y+5	; 0x05
    67c4:	9e 81       	ldd	r25, Y+6	; 0x06
    67c6:	84 30       	cpi	r24, 0x04	; 4
    67c8:	91 05       	cpc	r25, r1
    67ca:	69 f0       	breq	.+26     	; 0x67e6 <vdmMinus+0x94>
    67cc:	1a c0       	rjmp	.+52     	; 0x6802 <vdmMinus+0xb0>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newInt(-arg->value.intVal);
    67ce:	e9 81       	ldd	r30, Y+1	; 0x01
    67d0:	fa 81       	ldd	r31, Y+2	; 0x02
    67d2:	84 81       	ldd	r24, Z+4	; 0x04
    67d4:	95 81       	ldd	r25, Z+5	; 0x05
    67d6:	90 95       	com	r25
    67d8:	81 95       	neg	r24
    67da:	9f 4f       	sbci	r25, 0xFF	; 255
    67dc:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    67e0:	9c 83       	std	Y+4, r25	; 0x04
    67e2:	8b 83       	std	Y+3, r24	; 0x03
    67e4:	10 c0       	rjmp	.+32     	; 0x6806 <vdmMinus+0xb4>
	case VDM_REAL:
		return newReal(-arg->value.doubleVal);
    67e6:	e9 81       	ldd	r30, Y+1	; 0x01
    67e8:	fa 81       	ldd	r31, Y+2	; 0x02
    67ea:	84 81       	ldd	r24, Z+4	; 0x04
    67ec:	95 81       	ldd	r25, Z+5	; 0x05
    67ee:	a6 81       	ldd	r26, Z+6	; 0x06
    67f0:	b7 81       	ldd	r27, Z+7	; 0x07
    67f2:	b0 58       	subi	r27, 0x80	; 128
    67f4:	bc 01       	movw	r22, r24
    67f6:	cd 01       	movw	r24, r26
    67f8:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    67fc:	9c 83       	std	Y+4, r25	; 0x04
    67fe:	8b 83       	std	Y+3, r24	; 0x03
    6800:	02 c0       	rjmp	.+4      	; 0x6806 <vdmMinus+0xb4>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    6802:	1c 82       	std	Y+4, r1	; 0x04
    6804:	1b 82       	std	Y+3, r1	; 0x03
    6806:	8b 81       	ldd	r24, Y+3	; 0x03
    6808:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    680a:	26 96       	adiw	r28, 0x06	; 6
    680c:	0f b6       	in	r0, 0x3f	; 63
    680e:	f8 94       	cli
    6810:	de bf       	out	0x3e, r29	; 62
    6812:	0f be       	out	0x3f, r0	; 63
    6814:	cd bf       	out	0x3d, r28	; 61
    6816:	cf 91       	pop	r28
    6818:	df 91       	pop	r29
    681a:	08 95       	ret

0000681c <vdmMinusGC>:

TVP vdmMinusGC(TVP arg, TVP *from)
{
    681c:	df 93       	push	r29
    681e:	cf 93       	push	r28
    6820:	cd b7       	in	r28, 0x3d	; 61
    6822:	de b7       	in	r29, 0x3e	; 62
    6824:	28 97       	sbiw	r28, 0x08	; 8
    6826:	0f b6       	in	r0, 0x3f	; 63
    6828:	f8 94       	cli
    682a:	de bf       	out	0x3e, r29	; 62
    682c:	0f be       	out	0x3f, r0	; 63
    682e:	cd bf       	out	0x3d, r28	; 61
    6830:	9a 83       	std	Y+2, r25	; 0x02
    6832:	89 83       	std	Y+1, r24	; 0x01
    6834:	7c 83       	std	Y+4, r23	; 0x04
    6836:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK_NUMERIC(arg);
    6838:	e9 81       	ldd	r30, Y+1	; 0x01
    683a:	fa 81       	ldd	r31, Y+2	; 0x02
    683c:	80 81       	ld	r24, Z
    683e:	91 81       	ldd	r25, Z+1	; 0x01
    6840:	00 97       	sbiw	r24, 0x00	; 0
    6842:	f1 f0       	breq	.+60     	; 0x6880 <vdmMinusGC+0x64>
    6844:	e9 81       	ldd	r30, Y+1	; 0x01
    6846:	fa 81       	ldd	r31, Y+2	; 0x02
    6848:	80 81       	ld	r24, Z
    684a:	91 81       	ldd	r25, Z+1	; 0x01
    684c:	81 30       	cpi	r24, 0x01	; 1
    684e:	91 05       	cpc	r25, r1
    6850:	b9 f0       	breq	.+46     	; 0x6880 <vdmMinusGC+0x64>
    6852:	e9 81       	ldd	r30, Y+1	; 0x01
    6854:	fa 81       	ldd	r31, Y+2	; 0x02
    6856:	80 81       	ld	r24, Z
    6858:	91 81       	ldd	r25, Z+1	; 0x01
    685a:	82 30       	cpi	r24, 0x02	; 2
    685c:	91 05       	cpc	r25, r1
    685e:	81 f0       	breq	.+32     	; 0x6880 <vdmMinusGC+0x64>
    6860:	e9 81       	ldd	r30, Y+1	; 0x01
    6862:	fa 81       	ldd	r31, Y+2	; 0x02
    6864:	80 81       	ld	r24, Z
    6866:	91 81       	ldd	r25, Z+1	; 0x01
    6868:	84 30       	cpi	r24, 0x04	; 4
    686a:	91 05       	cpc	r25, r1
    686c:	49 f0       	breq	.+18     	; 0x6880 <vdmMinusGC+0x64>
    686e:	e9 81       	ldd	r30, Y+1	; 0x01
    6870:	fa 81       	ldd	r31, Y+2	; 0x02
    6872:	80 81       	ld	r24, Z
    6874:	91 81       	ldd	r25, Z+1	; 0x01
    6876:	85 30       	cpi	r24, 0x05	; 5
    6878:	91 05       	cpc	r25, r1
    687a:	11 f0       	breq	.+4      	; 0x6880 <vdmMinusGC+0x64>
    687c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	switch(arg->type)
    6880:	e9 81       	ldd	r30, Y+1	; 0x01
    6882:	fa 81       	ldd	r31, Y+2	; 0x02
    6884:	80 81       	ld	r24, Z
    6886:	91 81       	ldd	r25, Z+1	; 0x01
    6888:	98 87       	std	Y+8, r25	; 0x08
    688a:	8f 83       	std	Y+7, r24	; 0x07
    688c:	8f 81       	ldd	r24, Y+7	; 0x07
    688e:	98 85       	ldd	r25, Y+8	; 0x08
    6890:	83 30       	cpi	r24, 0x03	; 3
    6892:	91 05       	cpc	r25, r1
    6894:	30 f0       	brcs	.+12     	; 0x68a2 <vdmMinusGC+0x86>
    6896:	8f 81       	ldd	r24, Y+7	; 0x07
    6898:	98 85       	ldd	r25, Y+8	; 0x08
    689a:	84 30       	cpi	r24, 0x04	; 4
    689c:	91 05       	cpc	r25, r1
    689e:	81 f0       	breq	.+32     	; 0x68c0 <vdmMinusGC+0xa4>
    68a0:	20 c0       	rjmp	.+64     	; 0x68e2 <vdmMinusGC+0xc6>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newIntGC(-arg->value.intVal, from);
    68a2:	e9 81       	ldd	r30, Y+1	; 0x01
    68a4:	fa 81       	ldd	r31, Y+2	; 0x02
    68a6:	84 81       	ldd	r24, Z+4	; 0x04
    68a8:	95 81       	ldd	r25, Z+5	; 0x05
    68aa:	90 95       	com	r25
    68ac:	81 95       	neg	r24
    68ae:	9f 4f       	sbci	r25, 0xFF	; 255
    68b0:	2b 81       	ldd	r18, Y+3	; 0x03
    68b2:	3c 81       	ldd	r19, Y+4	; 0x04
    68b4:	b9 01       	movw	r22, r18
    68b6:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    68ba:	9e 83       	std	Y+6, r25	; 0x06
    68bc:	8d 83       	std	Y+5, r24	; 0x05
    68be:	13 c0       	rjmp	.+38     	; 0x68e6 <vdmMinusGC+0xca>
	case VDM_REAL:
		return newRealGC(-arg->value.doubleVal, from);
    68c0:	e9 81       	ldd	r30, Y+1	; 0x01
    68c2:	fa 81       	ldd	r31, Y+2	; 0x02
    68c4:	84 81       	ldd	r24, Z+4	; 0x04
    68c6:	95 81       	ldd	r25, Z+5	; 0x05
    68c8:	a6 81       	ldd	r26, Z+6	; 0x06
    68ca:	b7 81       	ldd	r27, Z+7	; 0x07
    68cc:	b0 58       	subi	r27, 0x80	; 128
    68ce:	2b 81       	ldd	r18, Y+3	; 0x03
    68d0:	3c 81       	ldd	r19, Y+4	; 0x04
    68d2:	bc 01       	movw	r22, r24
    68d4:	cd 01       	movw	r24, r26
    68d6:	a9 01       	movw	r20, r18
    68d8:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
    68dc:	9e 83       	std	Y+6, r25	; 0x06
    68de:	8d 83       	std	Y+5, r24	; 0x05
    68e0:	02 c0       	rjmp	.+4      	; 0x68e6 <vdmMinusGC+0xca>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    68e2:	1e 82       	std	Y+6, r1	; 0x06
    68e4:	1d 82       	std	Y+5, r1	; 0x05
    68e6:	8d 81       	ldd	r24, Y+5	; 0x05
    68e8:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    68ea:	28 96       	adiw	r28, 0x08	; 8
    68ec:	0f b6       	in	r0, 0x3f	; 63
    68ee:	f8 94       	cli
    68f0:	de bf       	out	0x3e, r29	; 62
    68f2:	0f be       	out	0x3f, r0	; 63
    68f4:	cd bf       	out	0x3d, r28	; 61
    68f6:	cf 91       	pop	r28
    68f8:	df 91       	pop	r29
    68fa:	08 95       	ret

000068fc <vdmAbs>:

TVP vdmAbs(TVP arg)
{
    68fc:	df 93       	push	r29
    68fe:	cf 93       	push	r28
    6900:	cd b7       	in	r28, 0x3d	; 61
    6902:	de b7       	in	r29, 0x3e	; 62
    6904:	28 97       	sbiw	r28, 0x08	; 8
    6906:	0f b6       	in	r0, 0x3f	; 63
    6908:	f8 94       	cli
    690a:	de bf       	out	0x3e, r29	; 62
    690c:	0f be       	out	0x3f, r0	; 63
    690e:	cd bf       	out	0x3d, r28	; 61
    6910:	9a 83       	std	Y+2, r25	; 0x02
    6912:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_NUMERIC(arg);
    6914:	e9 81       	ldd	r30, Y+1	; 0x01
    6916:	fa 81       	ldd	r31, Y+2	; 0x02
    6918:	80 81       	ld	r24, Z
    691a:	91 81       	ldd	r25, Z+1	; 0x01
    691c:	00 97       	sbiw	r24, 0x00	; 0
    691e:	f1 f0       	breq	.+60     	; 0x695c <vdmAbs+0x60>
    6920:	e9 81       	ldd	r30, Y+1	; 0x01
    6922:	fa 81       	ldd	r31, Y+2	; 0x02
    6924:	80 81       	ld	r24, Z
    6926:	91 81       	ldd	r25, Z+1	; 0x01
    6928:	81 30       	cpi	r24, 0x01	; 1
    692a:	91 05       	cpc	r25, r1
    692c:	b9 f0       	breq	.+46     	; 0x695c <vdmAbs+0x60>
    692e:	e9 81       	ldd	r30, Y+1	; 0x01
    6930:	fa 81       	ldd	r31, Y+2	; 0x02
    6932:	80 81       	ld	r24, Z
    6934:	91 81       	ldd	r25, Z+1	; 0x01
    6936:	82 30       	cpi	r24, 0x02	; 2
    6938:	91 05       	cpc	r25, r1
    693a:	81 f0       	breq	.+32     	; 0x695c <vdmAbs+0x60>
    693c:	e9 81       	ldd	r30, Y+1	; 0x01
    693e:	fa 81       	ldd	r31, Y+2	; 0x02
    6940:	80 81       	ld	r24, Z
    6942:	91 81       	ldd	r25, Z+1	; 0x01
    6944:	84 30       	cpi	r24, 0x04	; 4
    6946:	91 05       	cpc	r25, r1
    6948:	49 f0       	breq	.+18     	; 0x695c <vdmAbs+0x60>
    694a:	e9 81       	ldd	r30, Y+1	; 0x01
    694c:	fa 81       	ldd	r31, Y+2	; 0x02
    694e:	80 81       	ld	r24, Z
    6950:	91 81       	ldd	r25, Z+1	; 0x01
    6952:	85 30       	cpi	r24, 0x05	; 5
    6954:	91 05       	cpc	r25, r1
    6956:	11 f0       	breq	.+4      	; 0x695c <vdmAbs+0x60>
    6958:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	switch(arg->type)
    695c:	e9 81       	ldd	r30, Y+1	; 0x01
    695e:	fa 81       	ldd	r31, Y+2	; 0x02
    6960:	80 81       	ld	r24, Z
    6962:	91 81       	ldd	r25, Z+1	; 0x01
    6964:	98 87       	std	Y+8, r25	; 0x08
    6966:	8f 83       	std	Y+7, r24	; 0x07
    6968:	8f 81       	ldd	r24, Y+7	; 0x07
    696a:	98 85       	ldd	r25, Y+8	; 0x08
    696c:	83 30       	cpi	r24, 0x03	; 3
    696e:	91 05       	cpc	r25, r1
    6970:	30 f0       	brcs	.+12     	; 0x697e <vdmAbs+0x82>
    6972:	8f 81       	ldd	r24, Y+7	; 0x07
    6974:	98 85       	ldd	r25, Y+8	; 0x08
    6976:	84 30       	cpi	r24, 0x04	; 4
    6978:	91 05       	cpc	r25, r1
    697a:	c9 f0       	breq	.+50     	; 0x69ae <vdmAbs+0xb2>
    697c:	26 c0       	rjmp	.+76     	; 0x69ca <vdmAbs+0xce>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newInt(abs(arg->value.intVal));
    697e:	e9 81       	ldd	r30, Y+1	; 0x01
    6980:	fa 81       	ldd	r31, Y+2	; 0x02
    6982:	84 81       	ldd	r24, Z+4	; 0x04
    6984:	95 81       	ldd	r25, Z+5	; 0x05
    6986:	9c 83       	std	Y+4, r25	; 0x04
    6988:	8b 83       	std	Y+3, r24	; 0x03
    698a:	8b 81       	ldd	r24, Y+3	; 0x03
    698c:	9c 81       	ldd	r25, Y+4	; 0x04
    698e:	99 23       	and	r25, r25
    6990:	3c f4       	brge	.+14     	; 0x69a0 <vdmAbs+0xa4>
    6992:	8b 81       	ldd	r24, Y+3	; 0x03
    6994:	9c 81       	ldd	r25, Y+4	; 0x04
    6996:	90 95       	com	r25
    6998:	81 95       	neg	r24
    699a:	9f 4f       	sbci	r25, 0xFF	; 255
    699c:	9c 83       	std	Y+4, r25	; 0x04
    699e:	8b 83       	std	Y+3, r24	; 0x03
    69a0:	8b 81       	ldd	r24, Y+3	; 0x03
    69a2:	9c 81       	ldd	r25, Y+4	; 0x04
    69a4:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    69a8:	9e 83       	std	Y+6, r25	; 0x06
    69aa:	8d 83       	std	Y+5, r24	; 0x05
    69ac:	10 c0       	rjmp	.+32     	; 0x69ce <vdmAbs+0xd2>
	case VDM_REAL:
		return newReal(fabs(arg->value.doubleVal));
    69ae:	e9 81       	ldd	r30, Y+1	; 0x01
    69b0:	fa 81       	ldd	r31, Y+2	; 0x02
    69b2:	84 81       	ldd	r24, Z+4	; 0x04
    69b4:	95 81       	ldd	r25, Z+5	; 0x05
    69b6:	a6 81       	ldd	r26, Z+6	; 0x06
    69b8:	b7 81       	ldd	r27, Z+7	; 0x07
    69ba:	bf 77       	andi	r27, 0x7F	; 127
    69bc:	bc 01       	movw	r22, r24
    69be:	cd 01       	movw	r24, r26
    69c0:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    69c4:	9e 83       	std	Y+6, r25	; 0x06
    69c6:	8d 83       	std	Y+5, r24	; 0x05
    69c8:	02 c0       	rjmp	.+4      	; 0x69ce <vdmAbs+0xd2>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    69ca:	1e 82       	std	Y+6, r1	; 0x06
    69cc:	1d 82       	std	Y+5, r1	; 0x05
    69ce:	8d 81       	ldd	r24, Y+5	; 0x05
    69d0:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    69d2:	28 96       	adiw	r28, 0x08	; 8
    69d4:	0f b6       	in	r0, 0x3f	; 63
    69d6:	f8 94       	cli
    69d8:	de bf       	out	0x3e, r29	; 62
    69da:	0f be       	out	0x3f, r0	; 63
    69dc:	cd bf       	out	0x3d, r28	; 61
    69de:	cf 91       	pop	r28
    69e0:	df 91       	pop	r29
    69e2:	08 95       	ret

000069e4 <vdmAbsGC>:

TVP vdmAbsGC(TVP arg, TVP *from)
{
    69e4:	df 93       	push	r29
    69e6:	cf 93       	push	r28
    69e8:	cd b7       	in	r28, 0x3d	; 61
    69ea:	de b7       	in	r29, 0x3e	; 62
    69ec:	2a 97       	sbiw	r28, 0x0a	; 10
    69ee:	0f b6       	in	r0, 0x3f	; 63
    69f0:	f8 94       	cli
    69f2:	de bf       	out	0x3e, r29	; 62
    69f4:	0f be       	out	0x3f, r0	; 63
    69f6:	cd bf       	out	0x3d, r28	; 61
    69f8:	9a 83       	std	Y+2, r25	; 0x02
    69fa:	89 83       	std	Y+1, r24	; 0x01
    69fc:	7c 83       	std	Y+4, r23	; 0x04
    69fe:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK_NUMERIC(arg);
    6a00:	e9 81       	ldd	r30, Y+1	; 0x01
    6a02:	fa 81       	ldd	r31, Y+2	; 0x02
    6a04:	80 81       	ld	r24, Z
    6a06:	91 81       	ldd	r25, Z+1	; 0x01
    6a08:	00 97       	sbiw	r24, 0x00	; 0
    6a0a:	f1 f0       	breq	.+60     	; 0x6a48 <vdmAbsGC+0x64>
    6a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    6a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    6a10:	80 81       	ld	r24, Z
    6a12:	91 81       	ldd	r25, Z+1	; 0x01
    6a14:	81 30       	cpi	r24, 0x01	; 1
    6a16:	91 05       	cpc	r25, r1
    6a18:	b9 f0       	breq	.+46     	; 0x6a48 <vdmAbsGC+0x64>
    6a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    6a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    6a1e:	80 81       	ld	r24, Z
    6a20:	91 81       	ldd	r25, Z+1	; 0x01
    6a22:	82 30       	cpi	r24, 0x02	; 2
    6a24:	91 05       	cpc	r25, r1
    6a26:	81 f0       	breq	.+32     	; 0x6a48 <vdmAbsGC+0x64>
    6a28:	e9 81       	ldd	r30, Y+1	; 0x01
    6a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    6a2c:	80 81       	ld	r24, Z
    6a2e:	91 81       	ldd	r25, Z+1	; 0x01
    6a30:	84 30       	cpi	r24, 0x04	; 4
    6a32:	91 05       	cpc	r25, r1
    6a34:	49 f0       	breq	.+18     	; 0x6a48 <vdmAbsGC+0x64>
    6a36:	e9 81       	ldd	r30, Y+1	; 0x01
    6a38:	fa 81       	ldd	r31, Y+2	; 0x02
    6a3a:	80 81       	ld	r24, Z
    6a3c:	91 81       	ldd	r25, Z+1	; 0x01
    6a3e:	85 30       	cpi	r24, 0x05	; 5
    6a40:	91 05       	cpc	r25, r1
    6a42:	11 f0       	breq	.+4      	; 0x6a48 <vdmAbsGC+0x64>
    6a44:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	switch(arg->type)
    6a48:	e9 81       	ldd	r30, Y+1	; 0x01
    6a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    6a4c:	80 81       	ld	r24, Z
    6a4e:	91 81       	ldd	r25, Z+1	; 0x01
    6a50:	9a 87       	std	Y+10, r25	; 0x0a
    6a52:	89 87       	std	Y+9, r24	; 0x09
    6a54:	89 85       	ldd	r24, Y+9	; 0x09
    6a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a58:	83 30       	cpi	r24, 0x03	; 3
    6a5a:	91 05       	cpc	r25, r1
    6a5c:	30 f0       	brcs	.+12     	; 0x6a6a <vdmAbsGC+0x86>
    6a5e:	89 85       	ldd	r24, Y+9	; 0x09
    6a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a62:	84 30       	cpi	r24, 0x04	; 4
    6a64:	91 05       	cpc	r25, r1
    6a66:	e1 f0       	breq	.+56     	; 0x6aa0 <vdmAbsGC+0xbc>
    6a68:	2c c0       	rjmp	.+88     	; 0x6ac2 <vdmAbsGC+0xde>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newIntGC(abs(arg->value.intVal), from);
    6a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    6a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    6a6e:	84 81       	ldd	r24, Z+4	; 0x04
    6a70:	95 81       	ldd	r25, Z+5	; 0x05
    6a72:	9e 83       	std	Y+6, r25	; 0x06
    6a74:	8d 83       	std	Y+5, r24	; 0x05
    6a76:	8d 81       	ldd	r24, Y+5	; 0x05
    6a78:	9e 81       	ldd	r25, Y+6	; 0x06
    6a7a:	99 23       	and	r25, r25
    6a7c:	3c f4       	brge	.+14     	; 0x6a8c <vdmAbsGC+0xa8>
    6a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    6a80:	9e 81       	ldd	r25, Y+6	; 0x06
    6a82:	90 95       	com	r25
    6a84:	81 95       	neg	r24
    6a86:	9f 4f       	sbci	r25, 0xFF	; 255
    6a88:	9e 83       	std	Y+6, r25	; 0x06
    6a8a:	8d 83       	std	Y+5, r24	; 0x05
    6a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    6a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    6a90:	8d 81       	ldd	r24, Y+5	; 0x05
    6a92:	9e 81       	ldd	r25, Y+6	; 0x06
    6a94:	b9 01       	movw	r22, r18
    6a96:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    6a9a:	98 87       	std	Y+8, r25	; 0x08
    6a9c:	8f 83       	std	Y+7, r24	; 0x07
    6a9e:	13 c0       	rjmp	.+38     	; 0x6ac6 <vdmAbsGC+0xe2>
	case VDM_REAL:
		return newRealGC(fabs(arg->value.doubleVal), from);
    6aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    6aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    6aa4:	84 81       	ldd	r24, Z+4	; 0x04
    6aa6:	95 81       	ldd	r25, Z+5	; 0x05
    6aa8:	a6 81       	ldd	r26, Z+6	; 0x06
    6aaa:	b7 81       	ldd	r27, Z+7	; 0x07
    6aac:	bf 77       	andi	r27, 0x7F	; 127
    6aae:	2b 81       	ldd	r18, Y+3	; 0x03
    6ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    6ab2:	bc 01       	movw	r22, r24
    6ab4:	cd 01       	movw	r24, r26
    6ab6:	a9 01       	movw	r20, r18
    6ab8:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
    6abc:	98 87       	std	Y+8, r25	; 0x08
    6abe:	8f 83       	std	Y+7, r24	; 0x07
    6ac0:	02 c0       	rjmp	.+4      	; 0x6ac6 <vdmAbsGC+0xe2>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    6ac2:	18 86       	std	Y+8, r1	; 0x08
    6ac4:	1f 82       	std	Y+7, r1	; 0x07
    6ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    6ac8:	98 85       	ldd	r25, Y+8	; 0x08
	}
}
    6aca:	2a 96       	adiw	r28, 0x0a	; 10
    6acc:	0f b6       	in	r0, 0x3f	; 63
    6ace:	f8 94       	cli
    6ad0:	de bf       	out	0x3e, r29	; 62
    6ad2:	0f be       	out	0x3f, r0	; 63
    6ad4:	cd bf       	out	0x3d, r28	; 61
    6ad6:	cf 91       	pop	r28
    6ad8:	df 91       	pop	r29
    6ada:	08 95       	ret

00006adc <vdmFloor>:

TVP vdmFloor(TVP arg)
{
    6adc:	df 93       	push	r29
    6ade:	cf 93       	push	r28
    6ae0:	00 d0       	rcall	.+0      	; 0x6ae2 <vdmFloor+0x6>
    6ae2:	cd b7       	in	r28, 0x3d	; 61
    6ae4:	de b7       	in	r29, 0x3e	; 62
    6ae6:	9a 83       	std	Y+2, r25	; 0x02
    6ae8:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_REAL(arg);
    6aea:	e9 81       	ldd	r30, Y+1	; 0x01
    6aec:	fa 81       	ldd	r31, Y+2	; 0x02
    6aee:	80 81       	ld	r24, Z
    6af0:	91 81       	ldd	r25, Z+1	; 0x01
    6af2:	84 30       	cpi	r24, 0x04	; 4
    6af4:	91 05       	cpc	r25, r1
    6af6:	11 f0       	breq	.+4      	; 0x6afc <vdmFloor+0x20>
    6af8:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	return newInt(floor(arg->value.doubleVal));
    6afc:	e9 81       	ldd	r30, Y+1	; 0x01
    6afe:	fa 81       	ldd	r31, Y+2	; 0x02
    6b00:	84 81       	ldd	r24, Z+4	; 0x04
    6b02:	95 81       	ldd	r25, Z+5	; 0x05
    6b04:	a6 81       	ldd	r26, Z+6	; 0x06
    6b06:	b7 81       	ldd	r27, Z+7	; 0x07
    6b08:	bc 01       	movw	r22, r24
    6b0a:	cd 01       	movw	r24, r26
    6b0c:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    6b10:	dc 01       	movw	r26, r24
    6b12:	cb 01       	movw	r24, r22
    6b14:	bc 01       	movw	r22, r24
    6b16:	cd 01       	movw	r24, r26
    6b18:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    6b1c:	dc 01       	movw	r26, r24
    6b1e:	cb 01       	movw	r24, r22
    6b20:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
}
    6b24:	0f 90       	pop	r0
    6b26:	0f 90       	pop	r0
    6b28:	cf 91       	pop	r28
    6b2a:	df 91       	pop	r29
    6b2c:	08 95       	ret

00006b2e <vdmFloorGC>:

TVP vdmFloorGC(TVP arg, TVP *from)
{
    6b2e:	df 93       	push	r29
    6b30:	cf 93       	push	r28
    6b32:	00 d0       	rcall	.+0      	; 0x6b34 <vdmFloorGC+0x6>
    6b34:	00 d0       	rcall	.+0      	; 0x6b36 <vdmFloorGC+0x8>
    6b36:	cd b7       	in	r28, 0x3d	; 61
    6b38:	de b7       	in	r29, 0x3e	; 62
    6b3a:	9a 83       	std	Y+2, r25	; 0x02
    6b3c:	89 83       	std	Y+1, r24	; 0x01
    6b3e:	7c 83       	std	Y+4, r23	; 0x04
    6b40:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK_REAL(arg);
    6b42:	e9 81       	ldd	r30, Y+1	; 0x01
    6b44:	fa 81       	ldd	r31, Y+2	; 0x02
    6b46:	80 81       	ld	r24, Z
    6b48:	91 81       	ldd	r25, Z+1	; 0x01
    6b4a:	84 30       	cpi	r24, 0x04	; 4
    6b4c:	91 05       	cpc	r25, r1
    6b4e:	11 f0       	breq	.+4      	; 0x6b54 <vdmFloorGC+0x26>
    6b50:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* TODO: Why do we return a Real, when floor is int in VDM?  */
	return newIntGC(floor(arg->value.doubleVal), from);
    6b54:	e9 81       	ldd	r30, Y+1	; 0x01
    6b56:	fa 81       	ldd	r31, Y+2	; 0x02
    6b58:	84 81       	ldd	r24, Z+4	; 0x04
    6b5a:	95 81       	ldd	r25, Z+5	; 0x05
    6b5c:	a6 81       	ldd	r26, Z+6	; 0x06
    6b5e:	b7 81       	ldd	r27, Z+7	; 0x07
    6b60:	bc 01       	movw	r22, r24
    6b62:	cd 01       	movw	r24, r26
    6b64:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    6b68:	dc 01       	movw	r26, r24
    6b6a:	cb 01       	movw	r24, r22
    6b6c:	bc 01       	movw	r22, r24
    6b6e:	cd 01       	movw	r24, r26
    6b70:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    6b74:	dc 01       	movw	r26, r24
    6b76:	cb 01       	movw	r24, r22
    6b78:	2b 81       	ldd	r18, Y+3	; 0x03
    6b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    6b7c:	b9 01       	movw	r22, r18
    6b7e:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
}
    6b82:	0f 90       	pop	r0
    6b84:	0f 90       	pop	r0
    6b86:	0f 90       	pop	r0
    6b88:	0f 90       	pop	r0
    6b8a:	cf 91       	pop	r28
    6b8c:	df 91       	pop	r29
    6b8e:	08 95       	ret

00006b90 <vdmSum>:

TVP vdmSum(TVP a,TVP b)
{
    6b90:	df 93       	push	r29
    6b92:	cf 93       	push	r28
    6b94:	cd b7       	in	r28, 0x3d	; 61
    6b96:	de b7       	in	r29, 0x3e	; 62
    6b98:	2e 97       	sbiw	r28, 0x0e	; 14
    6b9a:	0f b6       	in	r0, 0x3f	; 63
    6b9c:	f8 94       	cli
    6b9e:	de bf       	out	0x3e, r29	; 62
    6ba0:	0f be       	out	0x3f, r0	; 63
    6ba2:	cd bf       	out	0x3d, r28	; 61
    6ba4:	9a 87       	std	Y+10, r25	; 0x0a
    6ba6:	89 87       	std	Y+9, r24	; 0x09
    6ba8:	7c 87       	std	Y+12, r23	; 0x0c
    6baa:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    6bac:	e9 85       	ldd	r30, Y+9	; 0x09
    6bae:	fa 85       	ldd	r31, Y+10	; 0x0a
    6bb0:	80 81       	ld	r24, Z
    6bb2:	91 81       	ldd	r25, Z+1	; 0x01
    6bb4:	00 97       	sbiw	r24, 0x00	; 0
    6bb6:	f1 f0       	breq	.+60     	; 0x6bf4 <vdmSum+0x64>
    6bb8:	e9 85       	ldd	r30, Y+9	; 0x09
    6bba:	fa 85       	ldd	r31, Y+10	; 0x0a
    6bbc:	80 81       	ld	r24, Z
    6bbe:	91 81       	ldd	r25, Z+1	; 0x01
    6bc0:	81 30       	cpi	r24, 0x01	; 1
    6bc2:	91 05       	cpc	r25, r1
    6bc4:	b9 f0       	breq	.+46     	; 0x6bf4 <vdmSum+0x64>
    6bc6:	e9 85       	ldd	r30, Y+9	; 0x09
    6bc8:	fa 85       	ldd	r31, Y+10	; 0x0a
    6bca:	80 81       	ld	r24, Z
    6bcc:	91 81       	ldd	r25, Z+1	; 0x01
    6bce:	82 30       	cpi	r24, 0x02	; 2
    6bd0:	91 05       	cpc	r25, r1
    6bd2:	81 f0       	breq	.+32     	; 0x6bf4 <vdmSum+0x64>
    6bd4:	e9 85       	ldd	r30, Y+9	; 0x09
    6bd6:	fa 85       	ldd	r31, Y+10	; 0x0a
    6bd8:	80 81       	ld	r24, Z
    6bda:	91 81       	ldd	r25, Z+1	; 0x01
    6bdc:	84 30       	cpi	r24, 0x04	; 4
    6bde:	91 05       	cpc	r25, r1
    6be0:	49 f0       	breq	.+18     	; 0x6bf4 <vdmSum+0x64>
    6be2:	e9 85       	ldd	r30, Y+9	; 0x09
    6be4:	fa 85       	ldd	r31, Y+10	; 0x0a
    6be6:	80 81       	ld	r24, Z
    6be8:	91 81       	ldd	r25, Z+1	; 0x01
    6bea:	85 30       	cpi	r24, 0x05	; 5
    6bec:	91 05       	cpc	r25, r1
    6bee:	11 f0       	breq	.+4      	; 0x6bf4 <vdmSum+0x64>
    6bf0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    6bf4:	eb 85       	ldd	r30, Y+11	; 0x0b
    6bf6:	fc 85       	ldd	r31, Y+12	; 0x0c
    6bf8:	80 81       	ld	r24, Z
    6bfa:	91 81       	ldd	r25, Z+1	; 0x01
    6bfc:	00 97       	sbiw	r24, 0x00	; 0
    6bfe:	f1 f0       	breq	.+60     	; 0x6c3c <vdmSum+0xac>
    6c00:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c02:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c04:	80 81       	ld	r24, Z
    6c06:	91 81       	ldd	r25, Z+1	; 0x01
    6c08:	81 30       	cpi	r24, 0x01	; 1
    6c0a:	91 05       	cpc	r25, r1
    6c0c:	b9 f0       	breq	.+46     	; 0x6c3c <vdmSum+0xac>
    6c0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c10:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c12:	80 81       	ld	r24, Z
    6c14:	91 81       	ldd	r25, Z+1	; 0x01
    6c16:	82 30       	cpi	r24, 0x02	; 2
    6c18:	91 05       	cpc	r25, r1
    6c1a:	81 f0       	breq	.+32     	; 0x6c3c <vdmSum+0xac>
    6c1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c20:	80 81       	ld	r24, Z
    6c22:	91 81       	ldd	r25, Z+1	; 0x01
    6c24:	84 30       	cpi	r24, 0x04	; 4
    6c26:	91 05       	cpc	r25, r1
    6c28:	49 f0       	breq	.+18     	; 0x6c3c <vdmSum+0xac>
    6c2a:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c2c:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c2e:	80 81       	ld	r24, Z
    6c30:	91 81       	ldd	r25, Z+1	; 0x01
    6c32:	85 30       	cpi	r24, 0x05	; 5
    6c34:	91 05       	cpc	r25, r1
    6c36:	11 f0       	breq	.+4      	; 0x6c3c <vdmSum+0xac>
    6c38:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    6c3c:	89 85       	ldd	r24, Y+9	; 0x09
    6c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c40:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    6c44:	dc 01       	movw	r26, r24
    6c46:	cb 01       	movw	r24, r22
    6c48:	8d 83       	std	Y+5, r24	; 0x05
    6c4a:	9e 83       	std	Y+6, r25	; 0x06
    6c4c:	af 83       	std	Y+7, r26	; 0x07
    6c4e:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    6c50:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c52:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c54:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    6c58:	dc 01       	movw	r26, r24
    6c5a:	cb 01       	movw	r24, r22
    6c5c:	89 83       	std	Y+1, r24	; 0x01
    6c5e:	9a 83       	std	Y+2, r25	; 0x02
    6c60:	ab 83       	std	Y+3, r26	; 0x03
    6c62:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    6c64:	e9 85       	ldd	r30, Y+9	; 0x09
    6c66:	fa 85       	ldd	r31, Y+10	; 0x0a
    6c68:	80 81       	ld	r24, Z
    6c6a:	91 81       	ldd	r25, Z+1	; 0x01
    6c6c:	00 97       	sbiw	r24, 0x00	; 0
    6c6e:	71 f0       	breq	.+28     	; 0x6c8c <vdmSum+0xfc>
    6c70:	e9 85       	ldd	r30, Y+9	; 0x09
    6c72:	fa 85       	ldd	r31, Y+10	; 0x0a
    6c74:	80 81       	ld	r24, Z
    6c76:	91 81       	ldd	r25, Z+1	; 0x01
    6c78:	81 30       	cpi	r24, 0x01	; 1
    6c7a:	91 05       	cpc	r25, r1
    6c7c:	39 f0       	breq	.+14     	; 0x6c8c <vdmSum+0xfc>
    6c7e:	e9 85       	ldd	r30, Y+9	; 0x09
    6c80:	fa 85       	ldd	r31, Y+10	; 0x0a
    6c82:	80 81       	ld	r24, Z
    6c84:	91 81       	ldd	r25, Z+1	; 0x01
    6c86:	82 30       	cpi	r24, 0x02	; 2
    6c88:	91 05       	cpc	r25, r1
    6c8a:	59 f5       	brne	.+86     	; 0x6ce2 <vdmSum+0x152>
    6c8c:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c8e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c90:	80 81       	ld	r24, Z
    6c92:	91 81       	ldd	r25, Z+1	; 0x01
    6c94:	00 97       	sbiw	r24, 0x00	; 0
    6c96:	71 f0       	breq	.+28     	; 0x6cb4 <vdmSum+0x124>
    6c98:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c9a:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c9c:	80 81       	ld	r24, Z
    6c9e:	91 81       	ldd	r25, Z+1	; 0x01
    6ca0:	81 30       	cpi	r24, 0x01	; 1
    6ca2:	91 05       	cpc	r25, r1
    6ca4:	39 f0       	breq	.+14     	; 0x6cb4 <vdmSum+0x124>
    6ca6:	eb 85       	ldd	r30, Y+11	; 0x0b
    6ca8:	fc 85       	ldd	r31, Y+12	; 0x0c
    6caa:	80 81       	ld	r24, Z
    6cac:	91 81       	ldd	r25, Z+1	; 0x01
    6cae:	82 30       	cpi	r24, 0x02	; 2
    6cb0:	91 05       	cpc	r25, r1
    6cb2:	b9 f4       	brne	.+46     	; 0x6ce2 <vdmSum+0x152>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av + bv));
    6cb4:	6d 81       	ldd	r22, Y+5	; 0x05
    6cb6:	7e 81       	ldd	r23, Y+6	; 0x06
    6cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    6cba:	98 85       	ldd	r25, Y+8	; 0x08
    6cbc:	29 81       	ldd	r18, Y+1	; 0x01
    6cbe:	3a 81       	ldd	r19, Y+2	; 0x02
    6cc0:	4b 81       	ldd	r20, Y+3	; 0x03
    6cc2:	5c 81       	ldd	r21, Y+4	; 0x04
    6cc4:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    6cc8:	dc 01       	movw	r26, r24
    6cca:	cb 01       	movw	r24, r22
    6ccc:	bc 01       	movw	r22, r24
    6cce:	cd 01       	movw	r24, r26
    6cd0:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    6cd4:	dc 01       	movw	r26, r24
    6cd6:	cb 01       	movw	r24, r22
    6cd8:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    6cdc:	9e 87       	std	Y+14, r25	; 0x0e
    6cde:	8d 87       	std	Y+13, r24	; 0x0d
    6ce0:	12 c0       	rjmp	.+36     	; 0x6d06 <vdmSum+0x176>

	return newReal(av+bv);
    6ce2:	6d 81       	ldd	r22, Y+5	; 0x05
    6ce4:	7e 81       	ldd	r23, Y+6	; 0x06
    6ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    6ce8:	98 85       	ldd	r25, Y+8	; 0x08
    6cea:	29 81       	ldd	r18, Y+1	; 0x01
    6cec:	3a 81       	ldd	r19, Y+2	; 0x02
    6cee:	4b 81       	ldd	r20, Y+3	; 0x03
    6cf0:	5c 81       	ldd	r21, Y+4	; 0x04
    6cf2:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    6cf6:	dc 01       	movw	r26, r24
    6cf8:	cb 01       	movw	r24, r22
    6cfa:	bc 01       	movw	r22, r24
    6cfc:	cd 01       	movw	r24, r26
    6cfe:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    6d02:	9e 87       	std	Y+14, r25	; 0x0e
    6d04:	8d 87       	std	Y+13, r24	; 0x0d
    6d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d08:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    6d0a:	2e 96       	adiw	r28, 0x0e	; 14
    6d0c:	0f b6       	in	r0, 0x3f	; 63
    6d0e:	f8 94       	cli
    6d10:	de bf       	out	0x3e, r29	; 62
    6d12:	0f be       	out	0x3f, r0	; 63
    6d14:	cd bf       	out	0x3d, r28	; 61
    6d16:	cf 91       	pop	r28
    6d18:	df 91       	pop	r29
    6d1a:	08 95       	ret

00006d1c <vdmSumGC>:

TVP vdmSumGC(TVP a,TVP b, TVP *from)
{
    6d1c:	df 93       	push	r29
    6d1e:	cf 93       	push	r28
    6d20:	cd b7       	in	r28, 0x3d	; 61
    6d22:	de b7       	in	r29, 0x3e	; 62
    6d24:	60 97       	sbiw	r28, 0x10	; 16
    6d26:	0f b6       	in	r0, 0x3f	; 63
    6d28:	f8 94       	cli
    6d2a:	de bf       	out	0x3e, r29	; 62
    6d2c:	0f be       	out	0x3f, r0	; 63
    6d2e:	cd bf       	out	0x3d, r28	; 61
    6d30:	9a 87       	std	Y+10, r25	; 0x0a
    6d32:	89 87       	std	Y+9, r24	; 0x09
    6d34:	7c 87       	std	Y+12, r23	; 0x0c
    6d36:	6b 87       	std	Y+11, r22	; 0x0b
    6d38:	5e 87       	std	Y+14, r21	; 0x0e
    6d3a:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    6d3c:	e9 85       	ldd	r30, Y+9	; 0x09
    6d3e:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d40:	80 81       	ld	r24, Z
    6d42:	91 81       	ldd	r25, Z+1	; 0x01
    6d44:	00 97       	sbiw	r24, 0x00	; 0
    6d46:	f1 f0       	breq	.+60     	; 0x6d84 <vdmSumGC+0x68>
    6d48:	e9 85       	ldd	r30, Y+9	; 0x09
    6d4a:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d4c:	80 81       	ld	r24, Z
    6d4e:	91 81       	ldd	r25, Z+1	; 0x01
    6d50:	81 30       	cpi	r24, 0x01	; 1
    6d52:	91 05       	cpc	r25, r1
    6d54:	b9 f0       	breq	.+46     	; 0x6d84 <vdmSumGC+0x68>
    6d56:	e9 85       	ldd	r30, Y+9	; 0x09
    6d58:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d5a:	80 81       	ld	r24, Z
    6d5c:	91 81       	ldd	r25, Z+1	; 0x01
    6d5e:	82 30       	cpi	r24, 0x02	; 2
    6d60:	91 05       	cpc	r25, r1
    6d62:	81 f0       	breq	.+32     	; 0x6d84 <vdmSumGC+0x68>
    6d64:	e9 85       	ldd	r30, Y+9	; 0x09
    6d66:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d68:	80 81       	ld	r24, Z
    6d6a:	91 81       	ldd	r25, Z+1	; 0x01
    6d6c:	84 30       	cpi	r24, 0x04	; 4
    6d6e:	91 05       	cpc	r25, r1
    6d70:	49 f0       	breq	.+18     	; 0x6d84 <vdmSumGC+0x68>
    6d72:	e9 85       	ldd	r30, Y+9	; 0x09
    6d74:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d76:	80 81       	ld	r24, Z
    6d78:	91 81       	ldd	r25, Z+1	; 0x01
    6d7a:	85 30       	cpi	r24, 0x05	; 5
    6d7c:	91 05       	cpc	r25, r1
    6d7e:	11 f0       	breq	.+4      	; 0x6d84 <vdmSumGC+0x68>
    6d80:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    6d84:	eb 85       	ldd	r30, Y+11	; 0x0b
    6d86:	fc 85       	ldd	r31, Y+12	; 0x0c
    6d88:	80 81       	ld	r24, Z
    6d8a:	91 81       	ldd	r25, Z+1	; 0x01
    6d8c:	00 97       	sbiw	r24, 0x00	; 0
    6d8e:	f1 f0       	breq	.+60     	; 0x6dcc <vdmSumGC+0xb0>
    6d90:	eb 85       	ldd	r30, Y+11	; 0x0b
    6d92:	fc 85       	ldd	r31, Y+12	; 0x0c
    6d94:	80 81       	ld	r24, Z
    6d96:	91 81       	ldd	r25, Z+1	; 0x01
    6d98:	81 30       	cpi	r24, 0x01	; 1
    6d9a:	91 05       	cpc	r25, r1
    6d9c:	b9 f0       	breq	.+46     	; 0x6dcc <vdmSumGC+0xb0>
    6d9e:	eb 85       	ldd	r30, Y+11	; 0x0b
    6da0:	fc 85       	ldd	r31, Y+12	; 0x0c
    6da2:	80 81       	ld	r24, Z
    6da4:	91 81       	ldd	r25, Z+1	; 0x01
    6da6:	82 30       	cpi	r24, 0x02	; 2
    6da8:	91 05       	cpc	r25, r1
    6daa:	81 f0       	breq	.+32     	; 0x6dcc <vdmSumGC+0xb0>
    6dac:	eb 85       	ldd	r30, Y+11	; 0x0b
    6dae:	fc 85       	ldd	r31, Y+12	; 0x0c
    6db0:	80 81       	ld	r24, Z
    6db2:	91 81       	ldd	r25, Z+1	; 0x01
    6db4:	84 30       	cpi	r24, 0x04	; 4
    6db6:	91 05       	cpc	r25, r1
    6db8:	49 f0       	breq	.+18     	; 0x6dcc <vdmSumGC+0xb0>
    6dba:	eb 85       	ldd	r30, Y+11	; 0x0b
    6dbc:	fc 85       	ldd	r31, Y+12	; 0x0c
    6dbe:	80 81       	ld	r24, Z
    6dc0:	91 81       	ldd	r25, Z+1	; 0x01
    6dc2:	85 30       	cpi	r24, 0x05	; 5
    6dc4:	91 05       	cpc	r25, r1
    6dc6:	11 f0       	breq	.+4      	; 0x6dcc <vdmSumGC+0xb0>
    6dc8:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    6dcc:	89 85       	ldd	r24, Y+9	; 0x09
    6dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dd0:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    6dd4:	dc 01       	movw	r26, r24
    6dd6:	cb 01       	movw	r24, r22
    6dd8:	8d 83       	std	Y+5, r24	; 0x05
    6dda:	9e 83       	std	Y+6, r25	; 0x06
    6ddc:	af 83       	std	Y+7, r26	; 0x07
    6dde:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    6de0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6de2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6de4:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    6de8:	dc 01       	movw	r26, r24
    6dea:	cb 01       	movw	r24, r22
    6dec:	89 83       	std	Y+1, r24	; 0x01
    6dee:	9a 83       	std	Y+2, r25	; 0x02
    6df0:	ab 83       	std	Y+3, r26	; 0x03
    6df2:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    6df4:	e9 85       	ldd	r30, Y+9	; 0x09
    6df6:	fa 85       	ldd	r31, Y+10	; 0x0a
    6df8:	80 81       	ld	r24, Z
    6dfa:	91 81       	ldd	r25, Z+1	; 0x01
    6dfc:	00 97       	sbiw	r24, 0x00	; 0
    6dfe:	71 f0       	breq	.+28     	; 0x6e1c <vdmSumGC+0x100>
    6e00:	e9 85       	ldd	r30, Y+9	; 0x09
    6e02:	fa 85       	ldd	r31, Y+10	; 0x0a
    6e04:	80 81       	ld	r24, Z
    6e06:	91 81       	ldd	r25, Z+1	; 0x01
    6e08:	81 30       	cpi	r24, 0x01	; 1
    6e0a:	91 05       	cpc	r25, r1
    6e0c:	39 f0       	breq	.+14     	; 0x6e1c <vdmSumGC+0x100>
    6e0e:	e9 85       	ldd	r30, Y+9	; 0x09
    6e10:	fa 85       	ldd	r31, Y+10	; 0x0a
    6e12:	80 81       	ld	r24, Z
    6e14:	91 81       	ldd	r25, Z+1	; 0x01
    6e16:	82 30       	cpi	r24, 0x02	; 2
    6e18:	91 05       	cpc	r25, r1
    6e1a:	71 f5       	brne	.+92     	; 0x6e78 <vdmSumGC+0x15c>
    6e1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    6e1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6e20:	80 81       	ld	r24, Z
    6e22:	91 81       	ldd	r25, Z+1	; 0x01
    6e24:	00 97       	sbiw	r24, 0x00	; 0
    6e26:	71 f0       	breq	.+28     	; 0x6e44 <vdmSumGC+0x128>
    6e28:	eb 85       	ldd	r30, Y+11	; 0x0b
    6e2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    6e2c:	80 81       	ld	r24, Z
    6e2e:	91 81       	ldd	r25, Z+1	; 0x01
    6e30:	81 30       	cpi	r24, 0x01	; 1
    6e32:	91 05       	cpc	r25, r1
    6e34:	39 f0       	breq	.+14     	; 0x6e44 <vdmSumGC+0x128>
    6e36:	eb 85       	ldd	r30, Y+11	; 0x0b
    6e38:	fc 85       	ldd	r31, Y+12	; 0x0c
    6e3a:	80 81       	ld	r24, Z
    6e3c:	91 81       	ldd	r25, Z+1	; 0x01
    6e3e:	82 30       	cpi	r24, 0x02	; 2
    6e40:	91 05       	cpc	r25, r1
    6e42:	d1 f4       	brne	.+52     	; 0x6e78 <vdmSumGC+0x15c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av + bv), from);
    6e44:	6d 81       	ldd	r22, Y+5	; 0x05
    6e46:	7e 81       	ldd	r23, Y+6	; 0x06
    6e48:	8f 81       	ldd	r24, Y+7	; 0x07
    6e4a:	98 85       	ldd	r25, Y+8	; 0x08
    6e4c:	29 81       	ldd	r18, Y+1	; 0x01
    6e4e:	3a 81       	ldd	r19, Y+2	; 0x02
    6e50:	4b 81       	ldd	r20, Y+3	; 0x03
    6e52:	5c 81       	ldd	r21, Y+4	; 0x04
    6e54:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    6e58:	dc 01       	movw	r26, r24
    6e5a:	cb 01       	movw	r24, r22
    6e5c:	bc 01       	movw	r22, r24
    6e5e:	cd 01       	movw	r24, r26
    6e60:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    6e64:	dc 01       	movw	r26, r24
    6e66:	cb 01       	movw	r24, r22
    6e68:	2d 85       	ldd	r18, Y+13	; 0x0d
    6e6a:	3e 85       	ldd	r19, Y+14	; 0x0e
    6e6c:	b9 01       	movw	r22, r18
    6e6e:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    6e72:	98 8b       	std	Y+16, r25	; 0x10
    6e74:	8f 87       	std	Y+15, r24	; 0x0f
    6e76:	15 c0       	rjmp	.+42     	; 0x6ea2 <vdmSumGC+0x186>

		return newRealGC(av+bv, from);
    6e78:	6d 81       	ldd	r22, Y+5	; 0x05
    6e7a:	7e 81       	ldd	r23, Y+6	; 0x06
    6e7c:	8f 81       	ldd	r24, Y+7	; 0x07
    6e7e:	98 85       	ldd	r25, Y+8	; 0x08
    6e80:	29 81       	ldd	r18, Y+1	; 0x01
    6e82:	3a 81       	ldd	r19, Y+2	; 0x02
    6e84:	4b 81       	ldd	r20, Y+3	; 0x03
    6e86:	5c 81       	ldd	r21, Y+4	; 0x04
    6e88:	0e 94 ee 6e 	call	0xdddc	; 0xdddc <__addsf3>
    6e8c:	dc 01       	movw	r26, r24
    6e8e:	cb 01       	movw	r24, r22
    6e90:	2d 85       	ldd	r18, Y+13	; 0x0d
    6e92:	3e 85       	ldd	r19, Y+14	; 0x0e
    6e94:	bc 01       	movw	r22, r24
    6e96:	cd 01       	movw	r24, r26
    6e98:	a9 01       	movw	r20, r18
    6e9a:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
    6e9e:	98 8b       	std	Y+16, r25	; 0x10
    6ea0:	8f 87       	std	Y+15, r24	; 0x0f
    6ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ea4:	98 89       	ldd	r25, Y+16	; 0x10
}
    6ea6:	60 96       	adiw	r28, 0x10	; 16
    6ea8:	0f b6       	in	r0, 0x3f	; 63
    6eaa:	f8 94       	cli
    6eac:	de bf       	out	0x3e, r29	; 62
    6eae:	0f be       	out	0x3f, r0	; 63
    6eb0:	cd bf       	out	0x3d, r28	; 61
    6eb2:	cf 91       	pop	r28
    6eb4:	df 91       	pop	r29
    6eb6:	08 95       	ret

00006eb8 <vdmDifference>:

TVP vdmDifference(TVP a,TVP b)
{
    6eb8:	df 93       	push	r29
    6eba:	cf 93       	push	r28
    6ebc:	cd b7       	in	r28, 0x3d	; 61
    6ebe:	de b7       	in	r29, 0x3e	; 62
    6ec0:	2e 97       	sbiw	r28, 0x0e	; 14
    6ec2:	0f b6       	in	r0, 0x3f	; 63
    6ec4:	f8 94       	cli
    6ec6:	de bf       	out	0x3e, r29	; 62
    6ec8:	0f be       	out	0x3f, r0	; 63
    6eca:	cd bf       	out	0x3d, r28	; 61
    6ecc:	9a 87       	std	Y+10, r25	; 0x0a
    6ece:	89 87       	std	Y+9, r24	; 0x09
    6ed0:	7c 87       	std	Y+12, r23	; 0x0c
    6ed2:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    6ed4:	e9 85       	ldd	r30, Y+9	; 0x09
    6ed6:	fa 85       	ldd	r31, Y+10	; 0x0a
    6ed8:	80 81       	ld	r24, Z
    6eda:	91 81       	ldd	r25, Z+1	; 0x01
    6edc:	00 97       	sbiw	r24, 0x00	; 0
    6ede:	f1 f0       	breq	.+60     	; 0x6f1c <vdmDifference+0x64>
    6ee0:	e9 85       	ldd	r30, Y+9	; 0x09
    6ee2:	fa 85       	ldd	r31, Y+10	; 0x0a
    6ee4:	80 81       	ld	r24, Z
    6ee6:	91 81       	ldd	r25, Z+1	; 0x01
    6ee8:	81 30       	cpi	r24, 0x01	; 1
    6eea:	91 05       	cpc	r25, r1
    6eec:	b9 f0       	breq	.+46     	; 0x6f1c <vdmDifference+0x64>
    6eee:	e9 85       	ldd	r30, Y+9	; 0x09
    6ef0:	fa 85       	ldd	r31, Y+10	; 0x0a
    6ef2:	80 81       	ld	r24, Z
    6ef4:	91 81       	ldd	r25, Z+1	; 0x01
    6ef6:	82 30       	cpi	r24, 0x02	; 2
    6ef8:	91 05       	cpc	r25, r1
    6efa:	81 f0       	breq	.+32     	; 0x6f1c <vdmDifference+0x64>
    6efc:	e9 85       	ldd	r30, Y+9	; 0x09
    6efe:	fa 85       	ldd	r31, Y+10	; 0x0a
    6f00:	80 81       	ld	r24, Z
    6f02:	91 81       	ldd	r25, Z+1	; 0x01
    6f04:	84 30       	cpi	r24, 0x04	; 4
    6f06:	91 05       	cpc	r25, r1
    6f08:	49 f0       	breq	.+18     	; 0x6f1c <vdmDifference+0x64>
    6f0a:	e9 85       	ldd	r30, Y+9	; 0x09
    6f0c:	fa 85       	ldd	r31, Y+10	; 0x0a
    6f0e:	80 81       	ld	r24, Z
    6f10:	91 81       	ldd	r25, Z+1	; 0x01
    6f12:	85 30       	cpi	r24, 0x05	; 5
    6f14:	91 05       	cpc	r25, r1
    6f16:	11 f0       	breq	.+4      	; 0x6f1c <vdmDifference+0x64>
    6f18:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    6f1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f20:	80 81       	ld	r24, Z
    6f22:	91 81       	ldd	r25, Z+1	; 0x01
    6f24:	00 97       	sbiw	r24, 0x00	; 0
    6f26:	f1 f0       	breq	.+60     	; 0x6f64 <vdmDifference+0xac>
    6f28:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f2c:	80 81       	ld	r24, Z
    6f2e:	91 81       	ldd	r25, Z+1	; 0x01
    6f30:	81 30       	cpi	r24, 0x01	; 1
    6f32:	91 05       	cpc	r25, r1
    6f34:	b9 f0       	breq	.+46     	; 0x6f64 <vdmDifference+0xac>
    6f36:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f38:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f3a:	80 81       	ld	r24, Z
    6f3c:	91 81       	ldd	r25, Z+1	; 0x01
    6f3e:	82 30       	cpi	r24, 0x02	; 2
    6f40:	91 05       	cpc	r25, r1
    6f42:	81 f0       	breq	.+32     	; 0x6f64 <vdmDifference+0xac>
    6f44:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f46:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f48:	80 81       	ld	r24, Z
    6f4a:	91 81       	ldd	r25, Z+1	; 0x01
    6f4c:	84 30       	cpi	r24, 0x04	; 4
    6f4e:	91 05       	cpc	r25, r1
    6f50:	49 f0       	breq	.+18     	; 0x6f64 <vdmDifference+0xac>
    6f52:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f54:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f56:	80 81       	ld	r24, Z
    6f58:	91 81       	ldd	r25, Z+1	; 0x01
    6f5a:	85 30       	cpi	r24, 0x05	; 5
    6f5c:	91 05       	cpc	r25, r1
    6f5e:	11 f0       	breq	.+4      	; 0x6f64 <vdmDifference+0xac>
    6f60:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    6f64:	89 85       	ldd	r24, Y+9	; 0x09
    6f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f68:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    6f6c:	dc 01       	movw	r26, r24
    6f6e:	cb 01       	movw	r24, r22
    6f70:	8d 83       	std	Y+5, r24	; 0x05
    6f72:	9e 83       	std	Y+6, r25	; 0x06
    6f74:	af 83       	std	Y+7, r26	; 0x07
    6f76:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    6f78:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    6f7c:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    6f80:	dc 01       	movw	r26, r24
    6f82:	cb 01       	movw	r24, r22
    6f84:	89 83       	std	Y+1, r24	; 0x01
    6f86:	9a 83       	std	Y+2, r25	; 0x02
    6f88:	ab 83       	std	Y+3, r26	; 0x03
    6f8a:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    6f8c:	e9 85       	ldd	r30, Y+9	; 0x09
    6f8e:	fa 85       	ldd	r31, Y+10	; 0x0a
    6f90:	80 81       	ld	r24, Z
    6f92:	91 81       	ldd	r25, Z+1	; 0x01
    6f94:	00 97       	sbiw	r24, 0x00	; 0
    6f96:	71 f0       	breq	.+28     	; 0x6fb4 <vdmDifference+0xfc>
    6f98:	e9 85       	ldd	r30, Y+9	; 0x09
    6f9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    6f9c:	80 81       	ld	r24, Z
    6f9e:	91 81       	ldd	r25, Z+1	; 0x01
    6fa0:	81 30       	cpi	r24, 0x01	; 1
    6fa2:	91 05       	cpc	r25, r1
    6fa4:	39 f0       	breq	.+14     	; 0x6fb4 <vdmDifference+0xfc>
    6fa6:	e9 85       	ldd	r30, Y+9	; 0x09
    6fa8:	fa 85       	ldd	r31, Y+10	; 0x0a
    6faa:	80 81       	ld	r24, Z
    6fac:	91 81       	ldd	r25, Z+1	; 0x01
    6fae:	82 30       	cpi	r24, 0x02	; 2
    6fb0:	91 05       	cpc	r25, r1
    6fb2:	59 f5       	brne	.+86     	; 0x700a <vdmDifference+0x152>
    6fb4:	eb 85       	ldd	r30, Y+11	; 0x0b
    6fb6:	fc 85       	ldd	r31, Y+12	; 0x0c
    6fb8:	80 81       	ld	r24, Z
    6fba:	91 81       	ldd	r25, Z+1	; 0x01
    6fbc:	00 97       	sbiw	r24, 0x00	; 0
    6fbe:	71 f0       	breq	.+28     	; 0x6fdc <vdmDifference+0x124>
    6fc0:	eb 85       	ldd	r30, Y+11	; 0x0b
    6fc2:	fc 85       	ldd	r31, Y+12	; 0x0c
    6fc4:	80 81       	ld	r24, Z
    6fc6:	91 81       	ldd	r25, Z+1	; 0x01
    6fc8:	81 30       	cpi	r24, 0x01	; 1
    6fca:	91 05       	cpc	r25, r1
    6fcc:	39 f0       	breq	.+14     	; 0x6fdc <vdmDifference+0x124>
    6fce:	eb 85       	ldd	r30, Y+11	; 0x0b
    6fd0:	fc 85       	ldd	r31, Y+12	; 0x0c
    6fd2:	80 81       	ld	r24, Z
    6fd4:	91 81       	ldd	r25, Z+1	; 0x01
    6fd6:	82 30       	cpi	r24, 0x02	; 2
    6fd8:	91 05       	cpc	r25, r1
    6fda:	b9 f4       	brne	.+46     	; 0x700a <vdmDifference+0x152>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av - bv));
    6fdc:	6d 81       	ldd	r22, Y+5	; 0x05
    6fde:	7e 81       	ldd	r23, Y+6	; 0x06
    6fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    6fe2:	98 85       	ldd	r25, Y+8	; 0x08
    6fe4:	29 81       	ldd	r18, Y+1	; 0x01
    6fe6:	3a 81       	ldd	r19, Y+2	; 0x02
    6fe8:	4b 81       	ldd	r20, Y+3	; 0x03
    6fea:	5c 81       	ldd	r21, Y+4	; 0x04
    6fec:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    6ff0:	dc 01       	movw	r26, r24
    6ff2:	cb 01       	movw	r24, r22
    6ff4:	bc 01       	movw	r22, r24
    6ff6:	cd 01       	movw	r24, r26
    6ff8:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    6ffc:	dc 01       	movw	r26, r24
    6ffe:	cb 01       	movw	r24, r22
    7000:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    7004:	9e 87       	std	Y+14, r25	; 0x0e
    7006:	8d 87       	std	Y+13, r24	; 0x0d
    7008:	12 c0       	rjmp	.+36     	; 0x702e <vdmDifference+0x176>

	return newReal(av - bv);
    700a:	6d 81       	ldd	r22, Y+5	; 0x05
    700c:	7e 81       	ldd	r23, Y+6	; 0x06
    700e:	8f 81       	ldd	r24, Y+7	; 0x07
    7010:	98 85       	ldd	r25, Y+8	; 0x08
    7012:	29 81       	ldd	r18, Y+1	; 0x01
    7014:	3a 81       	ldd	r19, Y+2	; 0x02
    7016:	4b 81       	ldd	r20, Y+3	; 0x03
    7018:	5c 81       	ldd	r21, Y+4	; 0x04
    701a:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    701e:	dc 01       	movw	r26, r24
    7020:	cb 01       	movw	r24, r22
    7022:	bc 01       	movw	r22, r24
    7024:	cd 01       	movw	r24, r26
    7026:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    702a:	9e 87       	std	Y+14, r25	; 0x0e
    702c:	8d 87       	std	Y+13, r24	; 0x0d
    702e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7030:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    7032:	2e 96       	adiw	r28, 0x0e	; 14
    7034:	0f b6       	in	r0, 0x3f	; 63
    7036:	f8 94       	cli
    7038:	de bf       	out	0x3e, r29	; 62
    703a:	0f be       	out	0x3f, r0	; 63
    703c:	cd bf       	out	0x3d, r28	; 61
    703e:	cf 91       	pop	r28
    7040:	df 91       	pop	r29
    7042:	08 95       	ret

00007044 <vdmDifferenceGC>:

TVP vdmDifferenceGC(TVP a,TVP b, TVP *from)
{
    7044:	df 93       	push	r29
    7046:	cf 93       	push	r28
    7048:	cd b7       	in	r28, 0x3d	; 61
    704a:	de b7       	in	r29, 0x3e	; 62
    704c:	60 97       	sbiw	r28, 0x10	; 16
    704e:	0f b6       	in	r0, 0x3f	; 63
    7050:	f8 94       	cli
    7052:	de bf       	out	0x3e, r29	; 62
    7054:	0f be       	out	0x3f, r0	; 63
    7056:	cd bf       	out	0x3d, r28	; 61
    7058:	9a 87       	std	Y+10, r25	; 0x0a
    705a:	89 87       	std	Y+9, r24	; 0x09
    705c:	7c 87       	std	Y+12, r23	; 0x0c
    705e:	6b 87       	std	Y+11, r22	; 0x0b
    7060:	5e 87       	std	Y+14, r21	; 0x0e
    7062:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    7064:	e9 85       	ldd	r30, Y+9	; 0x09
    7066:	fa 85       	ldd	r31, Y+10	; 0x0a
    7068:	80 81       	ld	r24, Z
    706a:	91 81       	ldd	r25, Z+1	; 0x01
    706c:	00 97       	sbiw	r24, 0x00	; 0
    706e:	f1 f0       	breq	.+60     	; 0x70ac <vdmDifferenceGC+0x68>
    7070:	e9 85       	ldd	r30, Y+9	; 0x09
    7072:	fa 85       	ldd	r31, Y+10	; 0x0a
    7074:	80 81       	ld	r24, Z
    7076:	91 81       	ldd	r25, Z+1	; 0x01
    7078:	81 30       	cpi	r24, 0x01	; 1
    707a:	91 05       	cpc	r25, r1
    707c:	b9 f0       	breq	.+46     	; 0x70ac <vdmDifferenceGC+0x68>
    707e:	e9 85       	ldd	r30, Y+9	; 0x09
    7080:	fa 85       	ldd	r31, Y+10	; 0x0a
    7082:	80 81       	ld	r24, Z
    7084:	91 81       	ldd	r25, Z+1	; 0x01
    7086:	82 30       	cpi	r24, 0x02	; 2
    7088:	91 05       	cpc	r25, r1
    708a:	81 f0       	breq	.+32     	; 0x70ac <vdmDifferenceGC+0x68>
    708c:	e9 85       	ldd	r30, Y+9	; 0x09
    708e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7090:	80 81       	ld	r24, Z
    7092:	91 81       	ldd	r25, Z+1	; 0x01
    7094:	84 30       	cpi	r24, 0x04	; 4
    7096:	91 05       	cpc	r25, r1
    7098:	49 f0       	breq	.+18     	; 0x70ac <vdmDifferenceGC+0x68>
    709a:	e9 85       	ldd	r30, Y+9	; 0x09
    709c:	fa 85       	ldd	r31, Y+10	; 0x0a
    709e:	80 81       	ld	r24, Z
    70a0:	91 81       	ldd	r25, Z+1	; 0x01
    70a2:	85 30       	cpi	r24, 0x05	; 5
    70a4:	91 05       	cpc	r25, r1
    70a6:	11 f0       	breq	.+4      	; 0x70ac <vdmDifferenceGC+0x68>
    70a8:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    70ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    70ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    70b0:	80 81       	ld	r24, Z
    70b2:	91 81       	ldd	r25, Z+1	; 0x01
    70b4:	00 97       	sbiw	r24, 0x00	; 0
    70b6:	f1 f0       	breq	.+60     	; 0x70f4 <vdmDifferenceGC+0xb0>
    70b8:	eb 85       	ldd	r30, Y+11	; 0x0b
    70ba:	fc 85       	ldd	r31, Y+12	; 0x0c
    70bc:	80 81       	ld	r24, Z
    70be:	91 81       	ldd	r25, Z+1	; 0x01
    70c0:	81 30       	cpi	r24, 0x01	; 1
    70c2:	91 05       	cpc	r25, r1
    70c4:	b9 f0       	breq	.+46     	; 0x70f4 <vdmDifferenceGC+0xb0>
    70c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    70c8:	fc 85       	ldd	r31, Y+12	; 0x0c
    70ca:	80 81       	ld	r24, Z
    70cc:	91 81       	ldd	r25, Z+1	; 0x01
    70ce:	82 30       	cpi	r24, 0x02	; 2
    70d0:	91 05       	cpc	r25, r1
    70d2:	81 f0       	breq	.+32     	; 0x70f4 <vdmDifferenceGC+0xb0>
    70d4:	eb 85       	ldd	r30, Y+11	; 0x0b
    70d6:	fc 85       	ldd	r31, Y+12	; 0x0c
    70d8:	80 81       	ld	r24, Z
    70da:	91 81       	ldd	r25, Z+1	; 0x01
    70dc:	84 30       	cpi	r24, 0x04	; 4
    70de:	91 05       	cpc	r25, r1
    70e0:	49 f0       	breq	.+18     	; 0x70f4 <vdmDifferenceGC+0xb0>
    70e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    70e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    70e6:	80 81       	ld	r24, Z
    70e8:	91 81       	ldd	r25, Z+1	; 0x01
    70ea:	85 30       	cpi	r24, 0x05	; 5
    70ec:	91 05       	cpc	r25, r1
    70ee:	11 f0       	breq	.+4      	; 0x70f4 <vdmDifferenceGC+0xb0>
    70f0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    70f4:	89 85       	ldd	r24, Y+9	; 0x09
    70f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    70f8:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    70fc:	dc 01       	movw	r26, r24
    70fe:	cb 01       	movw	r24, r22
    7100:	8d 83       	std	Y+5, r24	; 0x05
    7102:	9e 83       	std	Y+6, r25	; 0x06
    7104:	af 83       	std	Y+7, r26	; 0x07
    7106:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    7108:	8b 85       	ldd	r24, Y+11	; 0x0b
    710a:	9c 85       	ldd	r25, Y+12	; 0x0c
    710c:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7110:	dc 01       	movw	r26, r24
    7112:	cb 01       	movw	r24, r22
    7114:	89 83       	std	Y+1, r24	; 0x01
    7116:	9a 83       	std	Y+2, r25	; 0x02
    7118:	ab 83       	std	Y+3, r26	; 0x03
    711a:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    711c:	e9 85       	ldd	r30, Y+9	; 0x09
    711e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7120:	80 81       	ld	r24, Z
    7122:	91 81       	ldd	r25, Z+1	; 0x01
    7124:	00 97       	sbiw	r24, 0x00	; 0
    7126:	71 f0       	breq	.+28     	; 0x7144 <vdmDifferenceGC+0x100>
    7128:	e9 85       	ldd	r30, Y+9	; 0x09
    712a:	fa 85       	ldd	r31, Y+10	; 0x0a
    712c:	80 81       	ld	r24, Z
    712e:	91 81       	ldd	r25, Z+1	; 0x01
    7130:	81 30       	cpi	r24, 0x01	; 1
    7132:	91 05       	cpc	r25, r1
    7134:	39 f0       	breq	.+14     	; 0x7144 <vdmDifferenceGC+0x100>
    7136:	e9 85       	ldd	r30, Y+9	; 0x09
    7138:	fa 85       	ldd	r31, Y+10	; 0x0a
    713a:	80 81       	ld	r24, Z
    713c:	91 81       	ldd	r25, Z+1	; 0x01
    713e:	82 30       	cpi	r24, 0x02	; 2
    7140:	91 05       	cpc	r25, r1
    7142:	71 f5       	brne	.+92     	; 0x71a0 <vdmDifferenceGC+0x15c>
    7144:	eb 85       	ldd	r30, Y+11	; 0x0b
    7146:	fc 85       	ldd	r31, Y+12	; 0x0c
    7148:	80 81       	ld	r24, Z
    714a:	91 81       	ldd	r25, Z+1	; 0x01
    714c:	00 97       	sbiw	r24, 0x00	; 0
    714e:	71 f0       	breq	.+28     	; 0x716c <vdmDifferenceGC+0x128>
    7150:	eb 85       	ldd	r30, Y+11	; 0x0b
    7152:	fc 85       	ldd	r31, Y+12	; 0x0c
    7154:	80 81       	ld	r24, Z
    7156:	91 81       	ldd	r25, Z+1	; 0x01
    7158:	81 30       	cpi	r24, 0x01	; 1
    715a:	91 05       	cpc	r25, r1
    715c:	39 f0       	breq	.+14     	; 0x716c <vdmDifferenceGC+0x128>
    715e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7160:	fc 85       	ldd	r31, Y+12	; 0x0c
    7162:	80 81       	ld	r24, Z
    7164:	91 81       	ldd	r25, Z+1	; 0x01
    7166:	82 30       	cpi	r24, 0x02	; 2
    7168:	91 05       	cpc	r25, r1
    716a:	d1 f4       	brne	.+52     	; 0x71a0 <vdmDifferenceGC+0x15c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av - bv), from);
    716c:	6d 81       	ldd	r22, Y+5	; 0x05
    716e:	7e 81       	ldd	r23, Y+6	; 0x06
    7170:	8f 81       	ldd	r24, Y+7	; 0x07
    7172:	98 85       	ldd	r25, Y+8	; 0x08
    7174:	29 81       	ldd	r18, Y+1	; 0x01
    7176:	3a 81       	ldd	r19, Y+2	; 0x02
    7178:	4b 81       	ldd	r20, Y+3	; 0x03
    717a:	5c 81       	ldd	r21, Y+4	; 0x04
    717c:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    7180:	dc 01       	movw	r26, r24
    7182:	cb 01       	movw	r24, r22
    7184:	bc 01       	movw	r22, r24
    7186:	cd 01       	movw	r24, r26
    7188:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    718c:	dc 01       	movw	r26, r24
    718e:	cb 01       	movw	r24, r22
    7190:	2d 85       	ldd	r18, Y+13	; 0x0d
    7192:	3e 85       	ldd	r19, Y+14	; 0x0e
    7194:	b9 01       	movw	r22, r18
    7196:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    719a:	98 8b       	std	Y+16, r25	; 0x10
    719c:	8f 87       	std	Y+15, r24	; 0x0f
    719e:	15 c0       	rjmp	.+42     	; 0x71ca <vdmDifferenceGC+0x186>

		return newRealGC(av - bv, from);
    71a0:	6d 81       	ldd	r22, Y+5	; 0x05
    71a2:	7e 81       	ldd	r23, Y+6	; 0x06
    71a4:	8f 81       	ldd	r24, Y+7	; 0x07
    71a6:	98 85       	ldd	r25, Y+8	; 0x08
    71a8:	29 81       	ldd	r18, Y+1	; 0x01
    71aa:	3a 81       	ldd	r19, Y+2	; 0x02
    71ac:	4b 81       	ldd	r20, Y+3	; 0x03
    71ae:	5c 81       	ldd	r21, Y+4	; 0x04
    71b0:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    71b4:	dc 01       	movw	r26, r24
    71b6:	cb 01       	movw	r24, r22
    71b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    71ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    71bc:	bc 01       	movw	r22, r24
    71be:	cd 01       	movw	r24, r26
    71c0:	a9 01       	movw	r20, r18
    71c2:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
    71c6:	98 8b       	std	Y+16, r25	; 0x10
    71c8:	8f 87       	std	Y+15, r24	; 0x0f
    71ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    71cc:	98 89       	ldd	r25, Y+16	; 0x10
}
    71ce:	60 96       	adiw	r28, 0x10	; 16
    71d0:	0f b6       	in	r0, 0x3f	; 63
    71d2:	f8 94       	cli
    71d4:	de bf       	out	0x3e, r29	; 62
    71d6:	0f be       	out	0x3f, r0	; 63
    71d8:	cd bf       	out	0x3d, r28	; 61
    71da:	cf 91       	pop	r28
    71dc:	df 91       	pop	r29
    71de:	08 95       	ret

000071e0 <vdmProduct>:

TVP vdmProduct(TVP a,TVP b)
{
    71e0:	df 93       	push	r29
    71e2:	cf 93       	push	r28
    71e4:	cd b7       	in	r28, 0x3d	; 61
    71e6:	de b7       	in	r29, 0x3e	; 62
    71e8:	2e 97       	sbiw	r28, 0x0e	; 14
    71ea:	0f b6       	in	r0, 0x3f	; 63
    71ec:	f8 94       	cli
    71ee:	de bf       	out	0x3e, r29	; 62
    71f0:	0f be       	out	0x3f, r0	; 63
    71f2:	cd bf       	out	0x3d, r28	; 61
    71f4:	9a 87       	std	Y+10, r25	; 0x0a
    71f6:	89 87       	std	Y+9, r24	; 0x09
    71f8:	7c 87       	std	Y+12, r23	; 0x0c
    71fa:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    71fc:	e9 85       	ldd	r30, Y+9	; 0x09
    71fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    7200:	80 81       	ld	r24, Z
    7202:	91 81       	ldd	r25, Z+1	; 0x01
    7204:	00 97       	sbiw	r24, 0x00	; 0
    7206:	f1 f0       	breq	.+60     	; 0x7244 <vdmProduct+0x64>
    7208:	e9 85       	ldd	r30, Y+9	; 0x09
    720a:	fa 85       	ldd	r31, Y+10	; 0x0a
    720c:	80 81       	ld	r24, Z
    720e:	91 81       	ldd	r25, Z+1	; 0x01
    7210:	81 30       	cpi	r24, 0x01	; 1
    7212:	91 05       	cpc	r25, r1
    7214:	b9 f0       	breq	.+46     	; 0x7244 <vdmProduct+0x64>
    7216:	e9 85       	ldd	r30, Y+9	; 0x09
    7218:	fa 85       	ldd	r31, Y+10	; 0x0a
    721a:	80 81       	ld	r24, Z
    721c:	91 81       	ldd	r25, Z+1	; 0x01
    721e:	82 30       	cpi	r24, 0x02	; 2
    7220:	91 05       	cpc	r25, r1
    7222:	81 f0       	breq	.+32     	; 0x7244 <vdmProduct+0x64>
    7224:	e9 85       	ldd	r30, Y+9	; 0x09
    7226:	fa 85       	ldd	r31, Y+10	; 0x0a
    7228:	80 81       	ld	r24, Z
    722a:	91 81       	ldd	r25, Z+1	; 0x01
    722c:	84 30       	cpi	r24, 0x04	; 4
    722e:	91 05       	cpc	r25, r1
    7230:	49 f0       	breq	.+18     	; 0x7244 <vdmProduct+0x64>
    7232:	e9 85       	ldd	r30, Y+9	; 0x09
    7234:	fa 85       	ldd	r31, Y+10	; 0x0a
    7236:	80 81       	ld	r24, Z
    7238:	91 81       	ldd	r25, Z+1	; 0x01
    723a:	85 30       	cpi	r24, 0x05	; 5
    723c:	91 05       	cpc	r25, r1
    723e:	11 f0       	breq	.+4      	; 0x7244 <vdmProduct+0x64>
    7240:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7244:	eb 85       	ldd	r30, Y+11	; 0x0b
    7246:	fc 85       	ldd	r31, Y+12	; 0x0c
    7248:	80 81       	ld	r24, Z
    724a:	91 81       	ldd	r25, Z+1	; 0x01
    724c:	00 97       	sbiw	r24, 0x00	; 0
    724e:	f1 f0       	breq	.+60     	; 0x728c <vdmProduct+0xac>
    7250:	eb 85       	ldd	r30, Y+11	; 0x0b
    7252:	fc 85       	ldd	r31, Y+12	; 0x0c
    7254:	80 81       	ld	r24, Z
    7256:	91 81       	ldd	r25, Z+1	; 0x01
    7258:	81 30       	cpi	r24, 0x01	; 1
    725a:	91 05       	cpc	r25, r1
    725c:	b9 f0       	breq	.+46     	; 0x728c <vdmProduct+0xac>
    725e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7260:	fc 85       	ldd	r31, Y+12	; 0x0c
    7262:	80 81       	ld	r24, Z
    7264:	91 81       	ldd	r25, Z+1	; 0x01
    7266:	82 30       	cpi	r24, 0x02	; 2
    7268:	91 05       	cpc	r25, r1
    726a:	81 f0       	breq	.+32     	; 0x728c <vdmProduct+0xac>
    726c:	eb 85       	ldd	r30, Y+11	; 0x0b
    726e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7270:	80 81       	ld	r24, Z
    7272:	91 81       	ldd	r25, Z+1	; 0x01
    7274:	84 30       	cpi	r24, 0x04	; 4
    7276:	91 05       	cpc	r25, r1
    7278:	49 f0       	breq	.+18     	; 0x728c <vdmProduct+0xac>
    727a:	eb 85       	ldd	r30, Y+11	; 0x0b
    727c:	fc 85       	ldd	r31, Y+12	; 0x0c
    727e:	80 81       	ld	r24, Z
    7280:	91 81       	ldd	r25, Z+1	; 0x01
    7282:	85 30       	cpi	r24, 0x05	; 5
    7284:	91 05       	cpc	r25, r1
    7286:	11 f0       	breq	.+4      	; 0x728c <vdmProduct+0xac>
    7288:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    728c:	89 85       	ldd	r24, Y+9	; 0x09
    728e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7290:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7294:	dc 01       	movw	r26, r24
    7296:	cb 01       	movw	r24, r22
    7298:	8d 83       	std	Y+5, r24	; 0x05
    729a:	9e 83       	std	Y+6, r25	; 0x06
    729c:	af 83       	std	Y+7, r26	; 0x07
    729e:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    72a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    72a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    72a4:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    72a8:	dc 01       	movw	r26, r24
    72aa:	cb 01       	movw	r24, r22
    72ac:	89 83       	std	Y+1, r24	; 0x01
    72ae:	9a 83       	std	Y+2, r25	; 0x02
    72b0:	ab 83       	std	Y+3, r26	; 0x03
    72b2:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    72b4:	e9 85       	ldd	r30, Y+9	; 0x09
    72b6:	fa 85       	ldd	r31, Y+10	; 0x0a
    72b8:	80 81       	ld	r24, Z
    72ba:	91 81       	ldd	r25, Z+1	; 0x01
    72bc:	00 97       	sbiw	r24, 0x00	; 0
    72be:	71 f0       	breq	.+28     	; 0x72dc <vdmProduct+0xfc>
    72c0:	e9 85       	ldd	r30, Y+9	; 0x09
    72c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    72c4:	80 81       	ld	r24, Z
    72c6:	91 81       	ldd	r25, Z+1	; 0x01
    72c8:	81 30       	cpi	r24, 0x01	; 1
    72ca:	91 05       	cpc	r25, r1
    72cc:	39 f0       	breq	.+14     	; 0x72dc <vdmProduct+0xfc>
    72ce:	e9 85       	ldd	r30, Y+9	; 0x09
    72d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    72d2:	80 81       	ld	r24, Z
    72d4:	91 81       	ldd	r25, Z+1	; 0x01
    72d6:	82 30       	cpi	r24, 0x02	; 2
    72d8:	91 05       	cpc	r25, r1
    72da:	59 f5       	brne	.+86     	; 0x7332 <vdmProduct+0x152>
    72dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    72de:	fc 85       	ldd	r31, Y+12	; 0x0c
    72e0:	80 81       	ld	r24, Z
    72e2:	91 81       	ldd	r25, Z+1	; 0x01
    72e4:	00 97       	sbiw	r24, 0x00	; 0
    72e6:	71 f0       	breq	.+28     	; 0x7304 <vdmProduct+0x124>
    72e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    72ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    72ec:	80 81       	ld	r24, Z
    72ee:	91 81       	ldd	r25, Z+1	; 0x01
    72f0:	81 30       	cpi	r24, 0x01	; 1
    72f2:	91 05       	cpc	r25, r1
    72f4:	39 f0       	breq	.+14     	; 0x7304 <vdmProduct+0x124>
    72f6:	eb 85       	ldd	r30, Y+11	; 0x0b
    72f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    72fa:	80 81       	ld	r24, Z
    72fc:	91 81       	ldd	r25, Z+1	; 0x01
    72fe:	82 30       	cpi	r24, 0x02	; 2
    7300:	91 05       	cpc	r25, r1
    7302:	b9 f4       	brne	.+46     	; 0x7332 <vdmProduct+0x152>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av * bv));
    7304:	6d 81       	ldd	r22, Y+5	; 0x05
    7306:	7e 81       	ldd	r23, Y+6	; 0x06
    7308:	8f 81       	ldd	r24, Y+7	; 0x07
    730a:	98 85       	ldd	r25, Y+8	; 0x08
    730c:	29 81       	ldd	r18, Y+1	; 0x01
    730e:	3a 81       	ldd	r19, Y+2	; 0x02
    7310:	4b 81       	ldd	r20, Y+3	; 0x03
    7312:	5c 81       	ldd	r21, Y+4	; 0x04
    7314:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    7318:	dc 01       	movw	r26, r24
    731a:	cb 01       	movw	r24, r22
    731c:	bc 01       	movw	r22, r24
    731e:	cd 01       	movw	r24, r26
    7320:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7324:	dc 01       	movw	r26, r24
    7326:	cb 01       	movw	r24, r22
    7328:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    732c:	9e 87       	std	Y+14, r25	; 0x0e
    732e:	8d 87       	std	Y+13, r24	; 0x0d
    7330:	12 c0       	rjmp	.+36     	; 0x7356 <vdmProduct+0x176>

	return newReal(av * bv);
    7332:	6d 81       	ldd	r22, Y+5	; 0x05
    7334:	7e 81       	ldd	r23, Y+6	; 0x06
    7336:	8f 81       	ldd	r24, Y+7	; 0x07
    7338:	98 85       	ldd	r25, Y+8	; 0x08
    733a:	29 81       	ldd	r18, Y+1	; 0x01
    733c:	3a 81       	ldd	r19, Y+2	; 0x02
    733e:	4b 81       	ldd	r20, Y+3	; 0x03
    7340:	5c 81       	ldd	r21, Y+4	; 0x04
    7342:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    7346:	dc 01       	movw	r26, r24
    7348:	cb 01       	movw	r24, r22
    734a:	bc 01       	movw	r22, r24
    734c:	cd 01       	movw	r24, r26
    734e:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    7352:	9e 87       	std	Y+14, r25	; 0x0e
    7354:	8d 87       	std	Y+13, r24	; 0x0d
    7356:	8d 85       	ldd	r24, Y+13	; 0x0d
    7358:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    735a:	2e 96       	adiw	r28, 0x0e	; 14
    735c:	0f b6       	in	r0, 0x3f	; 63
    735e:	f8 94       	cli
    7360:	de bf       	out	0x3e, r29	; 62
    7362:	0f be       	out	0x3f, r0	; 63
    7364:	cd bf       	out	0x3d, r28	; 61
    7366:	cf 91       	pop	r28
    7368:	df 91       	pop	r29
    736a:	08 95       	ret

0000736c <vdmProductGC>:

TVP vdmProductGC(TVP a, TVP b, TVP *from)
{
    736c:	df 93       	push	r29
    736e:	cf 93       	push	r28
    7370:	cd b7       	in	r28, 0x3d	; 61
    7372:	de b7       	in	r29, 0x3e	; 62
    7374:	60 97       	sbiw	r28, 0x10	; 16
    7376:	0f b6       	in	r0, 0x3f	; 63
    7378:	f8 94       	cli
    737a:	de bf       	out	0x3e, r29	; 62
    737c:	0f be       	out	0x3f, r0	; 63
    737e:	cd bf       	out	0x3d, r28	; 61
    7380:	9a 87       	std	Y+10, r25	; 0x0a
    7382:	89 87       	std	Y+9, r24	; 0x09
    7384:	7c 87       	std	Y+12, r23	; 0x0c
    7386:	6b 87       	std	Y+11, r22	; 0x0b
    7388:	5e 87       	std	Y+14, r21	; 0x0e
    738a:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    738c:	e9 85       	ldd	r30, Y+9	; 0x09
    738e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7390:	80 81       	ld	r24, Z
    7392:	91 81       	ldd	r25, Z+1	; 0x01
    7394:	00 97       	sbiw	r24, 0x00	; 0
    7396:	f1 f0       	breq	.+60     	; 0x73d4 <vdmProductGC+0x68>
    7398:	e9 85       	ldd	r30, Y+9	; 0x09
    739a:	fa 85       	ldd	r31, Y+10	; 0x0a
    739c:	80 81       	ld	r24, Z
    739e:	91 81       	ldd	r25, Z+1	; 0x01
    73a0:	81 30       	cpi	r24, 0x01	; 1
    73a2:	91 05       	cpc	r25, r1
    73a4:	b9 f0       	breq	.+46     	; 0x73d4 <vdmProductGC+0x68>
    73a6:	e9 85       	ldd	r30, Y+9	; 0x09
    73a8:	fa 85       	ldd	r31, Y+10	; 0x0a
    73aa:	80 81       	ld	r24, Z
    73ac:	91 81       	ldd	r25, Z+1	; 0x01
    73ae:	82 30       	cpi	r24, 0x02	; 2
    73b0:	91 05       	cpc	r25, r1
    73b2:	81 f0       	breq	.+32     	; 0x73d4 <vdmProductGC+0x68>
    73b4:	e9 85       	ldd	r30, Y+9	; 0x09
    73b6:	fa 85       	ldd	r31, Y+10	; 0x0a
    73b8:	80 81       	ld	r24, Z
    73ba:	91 81       	ldd	r25, Z+1	; 0x01
    73bc:	84 30       	cpi	r24, 0x04	; 4
    73be:	91 05       	cpc	r25, r1
    73c0:	49 f0       	breq	.+18     	; 0x73d4 <vdmProductGC+0x68>
    73c2:	e9 85       	ldd	r30, Y+9	; 0x09
    73c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    73c6:	80 81       	ld	r24, Z
    73c8:	91 81       	ldd	r25, Z+1	; 0x01
    73ca:	85 30       	cpi	r24, 0x05	; 5
    73cc:	91 05       	cpc	r25, r1
    73ce:	11 f0       	breq	.+4      	; 0x73d4 <vdmProductGC+0x68>
    73d0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    73d4:	eb 85       	ldd	r30, Y+11	; 0x0b
    73d6:	fc 85       	ldd	r31, Y+12	; 0x0c
    73d8:	80 81       	ld	r24, Z
    73da:	91 81       	ldd	r25, Z+1	; 0x01
    73dc:	00 97       	sbiw	r24, 0x00	; 0
    73de:	f1 f0       	breq	.+60     	; 0x741c <vdmProductGC+0xb0>
    73e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    73e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    73e4:	80 81       	ld	r24, Z
    73e6:	91 81       	ldd	r25, Z+1	; 0x01
    73e8:	81 30       	cpi	r24, 0x01	; 1
    73ea:	91 05       	cpc	r25, r1
    73ec:	b9 f0       	breq	.+46     	; 0x741c <vdmProductGC+0xb0>
    73ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    73f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    73f2:	80 81       	ld	r24, Z
    73f4:	91 81       	ldd	r25, Z+1	; 0x01
    73f6:	82 30       	cpi	r24, 0x02	; 2
    73f8:	91 05       	cpc	r25, r1
    73fa:	81 f0       	breq	.+32     	; 0x741c <vdmProductGC+0xb0>
    73fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    73fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    7400:	80 81       	ld	r24, Z
    7402:	91 81       	ldd	r25, Z+1	; 0x01
    7404:	84 30       	cpi	r24, 0x04	; 4
    7406:	91 05       	cpc	r25, r1
    7408:	49 f0       	breq	.+18     	; 0x741c <vdmProductGC+0xb0>
    740a:	eb 85       	ldd	r30, Y+11	; 0x0b
    740c:	fc 85       	ldd	r31, Y+12	; 0x0c
    740e:	80 81       	ld	r24, Z
    7410:	91 81       	ldd	r25, Z+1	; 0x01
    7412:	85 30       	cpi	r24, 0x05	; 5
    7414:	91 05       	cpc	r25, r1
    7416:	11 f0       	breq	.+4      	; 0x741c <vdmProductGC+0xb0>
    7418:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    741c:	89 85       	ldd	r24, Y+9	; 0x09
    741e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7420:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7424:	dc 01       	movw	r26, r24
    7426:	cb 01       	movw	r24, r22
    7428:	8d 83       	std	Y+5, r24	; 0x05
    742a:	9e 83       	std	Y+6, r25	; 0x06
    742c:	af 83       	std	Y+7, r26	; 0x07
    742e:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    7430:	8b 85       	ldd	r24, Y+11	; 0x0b
    7432:	9c 85       	ldd	r25, Y+12	; 0x0c
    7434:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7438:	dc 01       	movw	r26, r24
    743a:	cb 01       	movw	r24, r22
    743c:	89 83       	std	Y+1, r24	; 0x01
    743e:	9a 83       	std	Y+2, r25	; 0x02
    7440:	ab 83       	std	Y+3, r26	; 0x03
    7442:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    7444:	e9 85       	ldd	r30, Y+9	; 0x09
    7446:	fa 85       	ldd	r31, Y+10	; 0x0a
    7448:	80 81       	ld	r24, Z
    744a:	91 81       	ldd	r25, Z+1	; 0x01
    744c:	00 97       	sbiw	r24, 0x00	; 0
    744e:	71 f0       	breq	.+28     	; 0x746c <vdmProductGC+0x100>
    7450:	e9 85       	ldd	r30, Y+9	; 0x09
    7452:	fa 85       	ldd	r31, Y+10	; 0x0a
    7454:	80 81       	ld	r24, Z
    7456:	91 81       	ldd	r25, Z+1	; 0x01
    7458:	81 30       	cpi	r24, 0x01	; 1
    745a:	91 05       	cpc	r25, r1
    745c:	39 f0       	breq	.+14     	; 0x746c <vdmProductGC+0x100>
    745e:	e9 85       	ldd	r30, Y+9	; 0x09
    7460:	fa 85       	ldd	r31, Y+10	; 0x0a
    7462:	80 81       	ld	r24, Z
    7464:	91 81       	ldd	r25, Z+1	; 0x01
    7466:	82 30       	cpi	r24, 0x02	; 2
    7468:	91 05       	cpc	r25, r1
    746a:	71 f5       	brne	.+92     	; 0x74c8 <vdmProductGC+0x15c>
    746c:	eb 85       	ldd	r30, Y+11	; 0x0b
    746e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7470:	80 81       	ld	r24, Z
    7472:	91 81       	ldd	r25, Z+1	; 0x01
    7474:	00 97       	sbiw	r24, 0x00	; 0
    7476:	71 f0       	breq	.+28     	; 0x7494 <vdmProductGC+0x128>
    7478:	eb 85       	ldd	r30, Y+11	; 0x0b
    747a:	fc 85       	ldd	r31, Y+12	; 0x0c
    747c:	80 81       	ld	r24, Z
    747e:	91 81       	ldd	r25, Z+1	; 0x01
    7480:	81 30       	cpi	r24, 0x01	; 1
    7482:	91 05       	cpc	r25, r1
    7484:	39 f0       	breq	.+14     	; 0x7494 <vdmProductGC+0x128>
    7486:	eb 85       	ldd	r30, Y+11	; 0x0b
    7488:	fc 85       	ldd	r31, Y+12	; 0x0c
    748a:	80 81       	ld	r24, Z
    748c:	91 81       	ldd	r25, Z+1	; 0x01
    748e:	82 30       	cpi	r24, 0x02	; 2
    7490:	91 05       	cpc	r25, r1
    7492:	d1 f4       	brne	.+52     	; 0x74c8 <vdmProductGC+0x15c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av * bv), from);
    7494:	6d 81       	ldd	r22, Y+5	; 0x05
    7496:	7e 81       	ldd	r23, Y+6	; 0x06
    7498:	8f 81       	ldd	r24, Y+7	; 0x07
    749a:	98 85       	ldd	r25, Y+8	; 0x08
    749c:	29 81       	ldd	r18, Y+1	; 0x01
    749e:	3a 81       	ldd	r19, Y+2	; 0x02
    74a0:	4b 81       	ldd	r20, Y+3	; 0x03
    74a2:	5c 81       	ldd	r21, Y+4	; 0x04
    74a4:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    74a8:	dc 01       	movw	r26, r24
    74aa:	cb 01       	movw	r24, r22
    74ac:	bc 01       	movw	r22, r24
    74ae:	cd 01       	movw	r24, r26
    74b0:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    74b4:	dc 01       	movw	r26, r24
    74b6:	cb 01       	movw	r24, r22
    74b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    74ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    74bc:	b9 01       	movw	r22, r18
    74be:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    74c2:	98 8b       	std	Y+16, r25	; 0x10
    74c4:	8f 87       	std	Y+15, r24	; 0x0f
    74c6:	15 c0       	rjmp	.+42     	; 0x74f2 <vdmProductGC+0x186>

		return newRealGC(av * bv, from);
    74c8:	6d 81       	ldd	r22, Y+5	; 0x05
    74ca:	7e 81       	ldd	r23, Y+6	; 0x06
    74cc:	8f 81       	ldd	r24, Y+7	; 0x07
    74ce:	98 85       	ldd	r25, Y+8	; 0x08
    74d0:	29 81       	ldd	r18, Y+1	; 0x01
    74d2:	3a 81       	ldd	r19, Y+2	; 0x02
    74d4:	4b 81       	ldd	r20, Y+3	; 0x03
    74d6:	5c 81       	ldd	r21, Y+4	; 0x04
    74d8:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    74dc:	dc 01       	movw	r26, r24
    74de:	cb 01       	movw	r24, r22
    74e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    74e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    74e4:	bc 01       	movw	r22, r24
    74e6:	cd 01       	movw	r24, r26
    74e8:	a9 01       	movw	r20, r18
    74ea:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
    74ee:	98 8b       	std	Y+16, r25	; 0x10
    74f0:	8f 87       	std	Y+15, r24	; 0x0f
    74f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    74f4:	98 89       	ldd	r25, Y+16	; 0x10
}
    74f6:	60 96       	adiw	r28, 0x10	; 16
    74f8:	0f b6       	in	r0, 0x3f	; 63
    74fa:	f8 94       	cli
    74fc:	de bf       	out	0x3e, r29	; 62
    74fe:	0f be       	out	0x3f, r0	; 63
    7500:	cd bf       	out	0x3d, r28	; 61
    7502:	cf 91       	pop	r28
    7504:	df 91       	pop	r29
    7506:	08 95       	ret

00007508 <vdmDivision>:

TVP vdmDivision(TVP a,TVP b)
{
    7508:	df 93       	push	r29
    750a:	cf 93       	push	r28
    750c:	cd b7       	in	r28, 0x3d	; 61
    750e:	de b7       	in	r29, 0x3e	; 62
    7510:	2c 97       	sbiw	r28, 0x0c	; 12
    7512:	0f b6       	in	r0, 0x3f	; 63
    7514:	f8 94       	cli
    7516:	de bf       	out	0x3e, r29	; 62
    7518:	0f be       	out	0x3f, r0	; 63
    751a:	cd bf       	out	0x3d, r28	; 61
    751c:	9a 87       	std	Y+10, r25	; 0x0a
    751e:	89 87       	std	Y+9, r24	; 0x09
    7520:	7c 87       	std	Y+12, r23	; 0x0c
    7522:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    7524:	e9 85       	ldd	r30, Y+9	; 0x09
    7526:	fa 85       	ldd	r31, Y+10	; 0x0a
    7528:	80 81       	ld	r24, Z
    752a:	91 81       	ldd	r25, Z+1	; 0x01
    752c:	00 97       	sbiw	r24, 0x00	; 0
    752e:	f1 f0       	breq	.+60     	; 0x756c <vdmDivision+0x64>
    7530:	e9 85       	ldd	r30, Y+9	; 0x09
    7532:	fa 85       	ldd	r31, Y+10	; 0x0a
    7534:	80 81       	ld	r24, Z
    7536:	91 81       	ldd	r25, Z+1	; 0x01
    7538:	81 30       	cpi	r24, 0x01	; 1
    753a:	91 05       	cpc	r25, r1
    753c:	b9 f0       	breq	.+46     	; 0x756c <vdmDivision+0x64>
    753e:	e9 85       	ldd	r30, Y+9	; 0x09
    7540:	fa 85       	ldd	r31, Y+10	; 0x0a
    7542:	80 81       	ld	r24, Z
    7544:	91 81       	ldd	r25, Z+1	; 0x01
    7546:	82 30       	cpi	r24, 0x02	; 2
    7548:	91 05       	cpc	r25, r1
    754a:	81 f0       	breq	.+32     	; 0x756c <vdmDivision+0x64>
    754c:	e9 85       	ldd	r30, Y+9	; 0x09
    754e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7550:	80 81       	ld	r24, Z
    7552:	91 81       	ldd	r25, Z+1	; 0x01
    7554:	84 30       	cpi	r24, 0x04	; 4
    7556:	91 05       	cpc	r25, r1
    7558:	49 f0       	breq	.+18     	; 0x756c <vdmDivision+0x64>
    755a:	e9 85       	ldd	r30, Y+9	; 0x09
    755c:	fa 85       	ldd	r31, Y+10	; 0x0a
    755e:	80 81       	ld	r24, Z
    7560:	91 81       	ldd	r25, Z+1	; 0x01
    7562:	85 30       	cpi	r24, 0x05	; 5
    7564:	91 05       	cpc	r25, r1
    7566:	11 f0       	breq	.+4      	; 0x756c <vdmDivision+0x64>
    7568:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    756c:	eb 85       	ldd	r30, Y+11	; 0x0b
    756e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7570:	80 81       	ld	r24, Z
    7572:	91 81       	ldd	r25, Z+1	; 0x01
    7574:	00 97       	sbiw	r24, 0x00	; 0
    7576:	f1 f0       	breq	.+60     	; 0x75b4 <vdmDivision+0xac>
    7578:	eb 85       	ldd	r30, Y+11	; 0x0b
    757a:	fc 85       	ldd	r31, Y+12	; 0x0c
    757c:	80 81       	ld	r24, Z
    757e:	91 81       	ldd	r25, Z+1	; 0x01
    7580:	81 30       	cpi	r24, 0x01	; 1
    7582:	91 05       	cpc	r25, r1
    7584:	b9 f0       	breq	.+46     	; 0x75b4 <vdmDivision+0xac>
    7586:	eb 85       	ldd	r30, Y+11	; 0x0b
    7588:	fc 85       	ldd	r31, Y+12	; 0x0c
    758a:	80 81       	ld	r24, Z
    758c:	91 81       	ldd	r25, Z+1	; 0x01
    758e:	82 30       	cpi	r24, 0x02	; 2
    7590:	91 05       	cpc	r25, r1
    7592:	81 f0       	breq	.+32     	; 0x75b4 <vdmDivision+0xac>
    7594:	eb 85       	ldd	r30, Y+11	; 0x0b
    7596:	fc 85       	ldd	r31, Y+12	; 0x0c
    7598:	80 81       	ld	r24, Z
    759a:	91 81       	ldd	r25, Z+1	; 0x01
    759c:	84 30       	cpi	r24, 0x04	; 4
    759e:	91 05       	cpc	r25, r1
    75a0:	49 f0       	breq	.+18     	; 0x75b4 <vdmDivision+0xac>
    75a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    75a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    75a6:	80 81       	ld	r24, Z
    75a8:	91 81       	ldd	r25, Z+1	; 0x01
    75aa:	85 30       	cpi	r24, 0x05	; 5
    75ac:	91 05       	cpc	r25, r1
    75ae:	11 f0       	breq	.+4      	; 0x75b4 <vdmDivision+0xac>
    75b0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    75b4:	89 85       	ldd	r24, Y+9	; 0x09
    75b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    75b8:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    75bc:	dc 01       	movw	r26, r24
    75be:	cb 01       	movw	r24, r22
    75c0:	8d 83       	std	Y+5, r24	; 0x05
    75c2:	9e 83       	std	Y+6, r25	; 0x06
    75c4:	af 83       	std	Y+7, r26	; 0x07
    75c6:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    75c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    75ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    75cc:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    75d0:	dc 01       	movw	r26, r24
    75d2:	cb 01       	movw	r24, r22
    75d4:	89 83       	std	Y+1, r24	; 0x01
    75d6:	9a 83       	std	Y+2, r25	; 0x02
    75d8:	ab 83       	std	Y+3, r26	; 0x03
    75da:	bc 83       	std	Y+4, r27	; 0x04

	return newReal(av/bv);
    75dc:	6d 81       	ldd	r22, Y+5	; 0x05
    75de:	7e 81       	ldd	r23, Y+6	; 0x06
    75e0:	8f 81       	ldd	r24, Y+7	; 0x07
    75e2:	98 85       	ldd	r25, Y+8	; 0x08
    75e4:	29 81       	ldd	r18, Y+1	; 0x01
    75e6:	3a 81       	ldd	r19, Y+2	; 0x02
    75e8:	4b 81       	ldd	r20, Y+3	; 0x03
    75ea:	5c 81       	ldd	r21, Y+4	; 0x04
    75ec:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    75f0:	dc 01       	movw	r26, r24
    75f2:	cb 01       	movw	r24, r22
    75f4:	bc 01       	movw	r22, r24
    75f6:	cd 01       	movw	r24, r26
    75f8:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
}
    75fc:	2c 96       	adiw	r28, 0x0c	; 12
    75fe:	0f b6       	in	r0, 0x3f	; 63
    7600:	f8 94       	cli
    7602:	de bf       	out	0x3e, r29	; 62
    7604:	0f be       	out	0x3f, r0	; 63
    7606:	cd bf       	out	0x3d, r28	; 61
    7608:	cf 91       	pop	r28
    760a:	df 91       	pop	r29
    760c:	08 95       	ret

0000760e <vdmDivisionGC>:

TVP vdmDivisionGC(TVP a,TVP b, TVP *from)
{
    760e:	df 93       	push	r29
    7610:	cf 93       	push	r28
    7612:	cd b7       	in	r28, 0x3d	; 61
    7614:	de b7       	in	r29, 0x3e	; 62
    7616:	2e 97       	sbiw	r28, 0x0e	; 14
    7618:	0f b6       	in	r0, 0x3f	; 63
    761a:	f8 94       	cli
    761c:	de bf       	out	0x3e, r29	; 62
    761e:	0f be       	out	0x3f, r0	; 63
    7620:	cd bf       	out	0x3d, r28	; 61
    7622:	9a 87       	std	Y+10, r25	; 0x0a
    7624:	89 87       	std	Y+9, r24	; 0x09
    7626:	7c 87       	std	Y+12, r23	; 0x0c
    7628:	6b 87       	std	Y+11, r22	; 0x0b
    762a:	5e 87       	std	Y+14, r21	; 0x0e
    762c:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    762e:	e9 85       	ldd	r30, Y+9	; 0x09
    7630:	fa 85       	ldd	r31, Y+10	; 0x0a
    7632:	80 81       	ld	r24, Z
    7634:	91 81       	ldd	r25, Z+1	; 0x01
    7636:	00 97       	sbiw	r24, 0x00	; 0
    7638:	f1 f0       	breq	.+60     	; 0x7676 <vdmDivisionGC+0x68>
    763a:	e9 85       	ldd	r30, Y+9	; 0x09
    763c:	fa 85       	ldd	r31, Y+10	; 0x0a
    763e:	80 81       	ld	r24, Z
    7640:	91 81       	ldd	r25, Z+1	; 0x01
    7642:	81 30       	cpi	r24, 0x01	; 1
    7644:	91 05       	cpc	r25, r1
    7646:	b9 f0       	breq	.+46     	; 0x7676 <vdmDivisionGC+0x68>
    7648:	e9 85       	ldd	r30, Y+9	; 0x09
    764a:	fa 85       	ldd	r31, Y+10	; 0x0a
    764c:	80 81       	ld	r24, Z
    764e:	91 81       	ldd	r25, Z+1	; 0x01
    7650:	82 30       	cpi	r24, 0x02	; 2
    7652:	91 05       	cpc	r25, r1
    7654:	81 f0       	breq	.+32     	; 0x7676 <vdmDivisionGC+0x68>
    7656:	e9 85       	ldd	r30, Y+9	; 0x09
    7658:	fa 85       	ldd	r31, Y+10	; 0x0a
    765a:	80 81       	ld	r24, Z
    765c:	91 81       	ldd	r25, Z+1	; 0x01
    765e:	84 30       	cpi	r24, 0x04	; 4
    7660:	91 05       	cpc	r25, r1
    7662:	49 f0       	breq	.+18     	; 0x7676 <vdmDivisionGC+0x68>
    7664:	e9 85       	ldd	r30, Y+9	; 0x09
    7666:	fa 85       	ldd	r31, Y+10	; 0x0a
    7668:	80 81       	ld	r24, Z
    766a:	91 81       	ldd	r25, Z+1	; 0x01
    766c:	85 30       	cpi	r24, 0x05	; 5
    766e:	91 05       	cpc	r25, r1
    7670:	11 f0       	breq	.+4      	; 0x7676 <vdmDivisionGC+0x68>
    7672:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7676:	eb 85       	ldd	r30, Y+11	; 0x0b
    7678:	fc 85       	ldd	r31, Y+12	; 0x0c
    767a:	80 81       	ld	r24, Z
    767c:	91 81       	ldd	r25, Z+1	; 0x01
    767e:	00 97       	sbiw	r24, 0x00	; 0
    7680:	f1 f0       	breq	.+60     	; 0x76be <vdmDivisionGC+0xb0>
    7682:	eb 85       	ldd	r30, Y+11	; 0x0b
    7684:	fc 85       	ldd	r31, Y+12	; 0x0c
    7686:	80 81       	ld	r24, Z
    7688:	91 81       	ldd	r25, Z+1	; 0x01
    768a:	81 30       	cpi	r24, 0x01	; 1
    768c:	91 05       	cpc	r25, r1
    768e:	b9 f0       	breq	.+46     	; 0x76be <vdmDivisionGC+0xb0>
    7690:	eb 85       	ldd	r30, Y+11	; 0x0b
    7692:	fc 85       	ldd	r31, Y+12	; 0x0c
    7694:	80 81       	ld	r24, Z
    7696:	91 81       	ldd	r25, Z+1	; 0x01
    7698:	82 30       	cpi	r24, 0x02	; 2
    769a:	91 05       	cpc	r25, r1
    769c:	81 f0       	breq	.+32     	; 0x76be <vdmDivisionGC+0xb0>
    769e:	eb 85       	ldd	r30, Y+11	; 0x0b
    76a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    76a2:	80 81       	ld	r24, Z
    76a4:	91 81       	ldd	r25, Z+1	; 0x01
    76a6:	84 30       	cpi	r24, 0x04	; 4
    76a8:	91 05       	cpc	r25, r1
    76aa:	49 f0       	breq	.+18     	; 0x76be <vdmDivisionGC+0xb0>
    76ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    76ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    76b0:	80 81       	ld	r24, Z
    76b2:	91 81       	ldd	r25, Z+1	; 0x01
    76b4:	85 30       	cpi	r24, 0x05	; 5
    76b6:	91 05       	cpc	r25, r1
    76b8:	11 f0       	breq	.+4      	; 0x76be <vdmDivisionGC+0xb0>
    76ba:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    76be:	89 85       	ldd	r24, Y+9	; 0x09
    76c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    76c2:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    76c6:	dc 01       	movw	r26, r24
    76c8:	cb 01       	movw	r24, r22
    76ca:	8d 83       	std	Y+5, r24	; 0x05
    76cc:	9e 83       	std	Y+6, r25	; 0x06
    76ce:	af 83       	std	Y+7, r26	; 0x07
    76d0:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    76d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    76d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    76d6:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    76da:	dc 01       	movw	r26, r24
    76dc:	cb 01       	movw	r24, r22
    76de:	89 83       	std	Y+1, r24	; 0x01
    76e0:	9a 83       	std	Y+2, r25	; 0x02
    76e2:	ab 83       	std	Y+3, r26	; 0x03
    76e4:	bc 83       	std	Y+4, r27	; 0x04

	return newRealGC(av/bv, from);
    76e6:	6d 81       	ldd	r22, Y+5	; 0x05
    76e8:	7e 81       	ldd	r23, Y+6	; 0x06
    76ea:	8f 81       	ldd	r24, Y+7	; 0x07
    76ec:	98 85       	ldd	r25, Y+8	; 0x08
    76ee:	29 81       	ldd	r18, Y+1	; 0x01
    76f0:	3a 81       	ldd	r19, Y+2	; 0x02
    76f2:	4b 81       	ldd	r20, Y+3	; 0x03
    76f4:	5c 81       	ldd	r21, Y+4	; 0x04
    76f6:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    76fa:	dc 01       	movw	r26, r24
    76fc:	cb 01       	movw	r24, r22
    76fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    7700:	3e 85       	ldd	r19, Y+14	; 0x0e
    7702:	bc 01       	movw	r22, r24
    7704:	cd 01       	movw	r24, r26
    7706:	a9 01       	movw	r20, r18
    7708:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
}
    770c:	2e 96       	adiw	r28, 0x0e	; 14
    770e:	0f b6       	in	r0, 0x3f	; 63
    7710:	f8 94       	cli
    7712:	de bf       	out	0x3e, r29	; 62
    7714:	0f be       	out	0x3f, r0	; 63
    7716:	cd bf       	out	0x3d, r28	; 61
    7718:	cf 91       	pop	r28
    771a:	df 91       	pop	r29
    771c:	08 95       	ret

0000771e <divi>:

static long divi(double lv, double rv)
{
    771e:	df 93       	push	r29
    7720:	cf 93       	push	r28
    7722:	cd b7       	in	r28, 0x3d	; 61
    7724:	de b7       	in	r29, 0x3e	; 62
    7726:	2c 97       	sbiw	r28, 0x0c	; 12
    7728:	0f b6       	in	r0, 0x3f	; 63
    772a:	f8 94       	cli
    772c:	de bf       	out	0x3e, r29	; 62
    772e:	0f be       	out	0x3f, r0	; 63
    7730:	cd bf       	out	0x3d, r28	; 61
    7732:	69 83       	std	Y+1, r22	; 0x01
    7734:	7a 83       	std	Y+2, r23	; 0x02
    7736:	8b 83       	std	Y+3, r24	; 0x03
    7738:	9c 83       	std	Y+4, r25	; 0x04
    773a:	2d 83       	std	Y+5, r18	; 0x05
    773c:	3e 83       	std	Y+6, r19	; 0x06
    773e:	4f 83       	std	Y+7, r20	; 0x07
    7740:	58 87       	std	Y+8, r21	; 0x08
	 * div y = floor(abs(x/y)) Note that the order of floor and abs on the right-hand side makes a difference, the
	 * above example would yield -5 if we changed the order. This is because floor always yields a smaller (or
	 * equal) integer, e.g. floor (14/3) is 4 while floor (-14/3) is -5.
	 */

	if (lv / rv < 0)
    7742:	69 81       	ldd	r22, Y+1	; 0x01
    7744:	7a 81       	ldd	r23, Y+2	; 0x02
    7746:	8b 81       	ldd	r24, Y+3	; 0x03
    7748:	9c 81       	ldd	r25, Y+4	; 0x04
    774a:	2d 81       	ldd	r18, Y+5	; 0x05
    774c:	3e 81       	ldd	r19, Y+6	; 0x06
    774e:	4f 81       	ldd	r20, Y+7	; 0x07
    7750:	58 85       	ldd	r21, Y+8	; 0x08
    7752:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    7756:	dc 01       	movw	r26, r24
    7758:	cb 01       	movw	r24, r22
    775a:	bc 01       	movw	r22, r24
    775c:	cd 01       	movw	r24, r26
    775e:	20 e0       	ldi	r18, 0x00	; 0
    7760:	30 e0       	ldi	r19, 0x00	; 0
    7762:	40 e0       	ldi	r20, 0x00	; 0
    7764:	50 e0       	ldi	r21, 0x00	; 0
    7766:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    776a:	88 23       	and	r24, r24
    776c:	ec f4       	brge	.+58     	; 0x77a8 <divi+0x8a>
	{
		return (long) -floor(fabs(lv / rv));
    776e:	69 81       	ldd	r22, Y+1	; 0x01
    7770:	7a 81       	ldd	r23, Y+2	; 0x02
    7772:	8b 81       	ldd	r24, Y+3	; 0x03
    7774:	9c 81       	ldd	r25, Y+4	; 0x04
    7776:	2d 81       	ldd	r18, Y+5	; 0x05
    7778:	3e 81       	ldd	r19, Y+6	; 0x06
    777a:	4f 81       	ldd	r20, Y+7	; 0x07
    777c:	58 85       	ldd	r21, Y+8	; 0x08
    777e:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    7782:	dc 01       	movw	r26, r24
    7784:	cb 01       	movw	r24, r22
    7786:	bf 77       	andi	r27, 0x7F	; 127
    7788:	bc 01       	movw	r22, r24
    778a:	cd 01       	movw	r24, r26
    778c:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    7790:	dc 01       	movw	r26, r24
    7792:	cb 01       	movw	r24, r22
    7794:	b0 58       	subi	r27, 0x80	; 128
    7796:	bc 01       	movw	r22, r24
    7798:	cd 01       	movw	r24, r26
    779a:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    779e:	69 87       	std	Y+9, r22	; 0x09
    77a0:	7a 87       	std	Y+10, r23	; 0x0a
    77a2:	8b 87       	std	Y+11, r24	; 0x0b
    77a4:	9c 87       	std	Y+12, r25	; 0x0c
    77a6:	1b c0       	rjmp	.+54     	; 0x77de <divi+0xc0>
	} else
	{
		return (long) floor(fabs(-lv / rv));
    77a8:	69 81       	ldd	r22, Y+1	; 0x01
    77aa:	7a 81       	ldd	r23, Y+2	; 0x02
    77ac:	8b 81       	ldd	r24, Y+3	; 0x03
    77ae:	9c 81       	ldd	r25, Y+4	; 0x04
    77b0:	2d 81       	ldd	r18, Y+5	; 0x05
    77b2:	3e 81       	ldd	r19, Y+6	; 0x06
    77b4:	4f 81       	ldd	r20, Y+7	; 0x07
    77b6:	58 85       	ldd	r21, Y+8	; 0x08
    77b8:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    77bc:	dc 01       	movw	r26, r24
    77be:	cb 01       	movw	r24, r22
    77c0:	bf 77       	andi	r27, 0x7F	; 127
    77c2:	bc 01       	movw	r22, r24
    77c4:	cd 01       	movw	r24, r26
    77c6:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    77ca:	dc 01       	movw	r26, r24
    77cc:	cb 01       	movw	r24, r22
    77ce:	bc 01       	movw	r22, r24
    77d0:	cd 01       	movw	r24, r26
    77d2:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    77d6:	69 87       	std	Y+9, r22	; 0x09
    77d8:	7a 87       	std	Y+10, r23	; 0x0a
    77da:	8b 87       	std	Y+11, r24	; 0x0b
    77dc:	9c 87       	std	Y+12, r25	; 0x0c
    77de:	89 85       	ldd	r24, Y+9	; 0x09
    77e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    77e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    77e4:	bc 85       	ldd	r27, Y+12	; 0x0c
	}
}
    77e6:	bc 01       	movw	r22, r24
    77e8:	cd 01       	movw	r24, r26
    77ea:	2c 96       	adiw	r28, 0x0c	; 12
    77ec:	0f b6       	in	r0, 0x3f	; 63
    77ee:	f8 94       	cli
    77f0:	de bf       	out	0x3e, r29	; 62
    77f2:	0f be       	out	0x3f, r0	; 63
    77f4:	cd bf       	out	0x3d, r28	; 61
    77f6:	cf 91       	pop	r28
    77f8:	df 91       	pop	r29
    77fa:	08 95       	ret

000077fc <vdmDiv>:

TVP vdmDiv(TVP a, TVP b)
{
    77fc:	ef 92       	push	r14
    77fe:	ff 92       	push	r15
    7800:	0f 93       	push	r16
    7802:	1f 93       	push	r17
    7804:	df 93       	push	r29
    7806:	cf 93       	push	r28
    7808:	cd b7       	in	r28, 0x3d	; 61
    780a:	de b7       	in	r29, 0x3e	; 62
    780c:	28 97       	sbiw	r28, 0x08	; 8
    780e:	0f b6       	in	r0, 0x3f	; 63
    7810:	f8 94       	cli
    7812:	de bf       	out	0x3e, r29	; 62
    7814:	0f be       	out	0x3f, r0	; 63
    7816:	cd bf       	out	0x3d, r28	; 61
    7818:	9e 83       	std	Y+6, r25	; 0x06
    781a:	8d 83       	std	Y+5, r24	; 0x05
    781c:	78 87       	std	Y+8, r23	; 0x08
    781e:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK_NUMERIC(a);
    7820:	ed 81       	ldd	r30, Y+5	; 0x05
    7822:	fe 81       	ldd	r31, Y+6	; 0x06
    7824:	80 81       	ld	r24, Z
    7826:	91 81       	ldd	r25, Z+1	; 0x01
    7828:	00 97       	sbiw	r24, 0x00	; 0
    782a:	f1 f0       	breq	.+60     	; 0x7868 <vdmDiv+0x6c>
    782c:	ed 81       	ldd	r30, Y+5	; 0x05
    782e:	fe 81       	ldd	r31, Y+6	; 0x06
    7830:	80 81       	ld	r24, Z
    7832:	91 81       	ldd	r25, Z+1	; 0x01
    7834:	81 30       	cpi	r24, 0x01	; 1
    7836:	91 05       	cpc	r25, r1
    7838:	b9 f0       	breq	.+46     	; 0x7868 <vdmDiv+0x6c>
    783a:	ed 81       	ldd	r30, Y+5	; 0x05
    783c:	fe 81       	ldd	r31, Y+6	; 0x06
    783e:	80 81       	ld	r24, Z
    7840:	91 81       	ldd	r25, Z+1	; 0x01
    7842:	82 30       	cpi	r24, 0x02	; 2
    7844:	91 05       	cpc	r25, r1
    7846:	81 f0       	breq	.+32     	; 0x7868 <vdmDiv+0x6c>
    7848:	ed 81       	ldd	r30, Y+5	; 0x05
    784a:	fe 81       	ldd	r31, Y+6	; 0x06
    784c:	80 81       	ld	r24, Z
    784e:	91 81       	ldd	r25, Z+1	; 0x01
    7850:	84 30       	cpi	r24, 0x04	; 4
    7852:	91 05       	cpc	r25, r1
    7854:	49 f0       	breq	.+18     	; 0x7868 <vdmDiv+0x6c>
    7856:	ed 81       	ldd	r30, Y+5	; 0x05
    7858:	fe 81       	ldd	r31, Y+6	; 0x06
    785a:	80 81       	ld	r24, Z
    785c:	91 81       	ldd	r25, Z+1	; 0x01
    785e:	85 30       	cpi	r24, 0x05	; 5
    7860:	91 05       	cpc	r25, r1
    7862:	11 f0       	breq	.+4      	; 0x7868 <vdmDiv+0x6c>
    7864:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7868:	ef 81       	ldd	r30, Y+7	; 0x07
    786a:	f8 85       	ldd	r31, Y+8	; 0x08
    786c:	80 81       	ld	r24, Z
    786e:	91 81       	ldd	r25, Z+1	; 0x01
    7870:	00 97       	sbiw	r24, 0x00	; 0
    7872:	f1 f0       	breq	.+60     	; 0x78b0 <vdmDiv+0xb4>
    7874:	ef 81       	ldd	r30, Y+7	; 0x07
    7876:	f8 85       	ldd	r31, Y+8	; 0x08
    7878:	80 81       	ld	r24, Z
    787a:	91 81       	ldd	r25, Z+1	; 0x01
    787c:	81 30       	cpi	r24, 0x01	; 1
    787e:	91 05       	cpc	r25, r1
    7880:	b9 f0       	breq	.+46     	; 0x78b0 <vdmDiv+0xb4>
    7882:	ef 81       	ldd	r30, Y+7	; 0x07
    7884:	f8 85       	ldd	r31, Y+8	; 0x08
    7886:	80 81       	ld	r24, Z
    7888:	91 81       	ldd	r25, Z+1	; 0x01
    788a:	82 30       	cpi	r24, 0x02	; 2
    788c:	91 05       	cpc	r25, r1
    788e:	81 f0       	breq	.+32     	; 0x78b0 <vdmDiv+0xb4>
    7890:	ef 81       	ldd	r30, Y+7	; 0x07
    7892:	f8 85       	ldd	r31, Y+8	; 0x08
    7894:	80 81       	ld	r24, Z
    7896:	91 81       	ldd	r25, Z+1	; 0x01
    7898:	84 30       	cpi	r24, 0x04	; 4
    789a:	91 05       	cpc	r25, r1
    789c:	49 f0       	breq	.+18     	; 0x78b0 <vdmDiv+0xb4>
    789e:	ef 81       	ldd	r30, Y+7	; 0x07
    78a0:	f8 85       	ldd	r31, Y+8	; 0x08
    78a2:	80 81       	ld	r24, Z
    78a4:	91 81       	ldd	r25, Z+1	; 0x01
    78a6:	85 30       	cpi	r24, 0x05	; 5
    78a8:	91 05       	cpc	r25, r1
    78aa:	11 f0       	breq	.+4      	; 0x78b0 <vdmDiv+0xb4>
    78ac:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L444  */

	ASSERT_CHECK_INT(a);
    78b0:	ed 81       	ldd	r30, Y+5	; 0x05
    78b2:	fe 81       	ldd	r31, Y+6	; 0x06
    78b4:	80 81       	ld	r24, Z
    78b6:	91 81       	ldd	r25, Z+1	; 0x01
    78b8:	00 97       	sbiw	r24, 0x00	; 0
    78ba:	11 f0       	breq	.+4      	; 0x78c0 <vdmDiv+0xc4>
    78bc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_INT(b);
    78c0:	ef 81       	ldd	r30, Y+7	; 0x07
    78c2:	f8 85       	ldd	r31, Y+8	; 0x08
    78c4:	80 81       	ld	r24, Z
    78c6:	91 81       	ldd	r25, Z+1	; 0x01
    78c8:	00 97       	sbiw	r24, 0x00	; 0
    78ca:	11 f0       	breq	.+4      	; 0x78d0 <vdmDiv+0xd4>
    78cc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	int av = toDouble(a);
    78d0:	8d 81       	ldd	r24, Y+5	; 0x05
    78d2:	9e 81       	ldd	r25, Y+6	; 0x06
    78d4:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    78d8:	dc 01       	movw	r26, r24
    78da:	cb 01       	movw	r24, r22
    78dc:	bc 01       	movw	r22, r24
    78de:	cd 01       	movw	r24, r26
    78e0:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    78e4:	dc 01       	movw	r26, r24
    78e6:	cb 01       	movw	r24, r22
    78e8:	9c 83       	std	Y+4, r25	; 0x04
    78ea:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    78ec:	8f 81       	ldd	r24, Y+7	; 0x07
    78ee:	98 85       	ldd	r25, Y+8	; 0x08
    78f0:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    78f4:	dc 01       	movw	r26, r24
    78f6:	cb 01       	movw	r24, r22
    78f8:	bc 01       	movw	r22, r24
    78fa:	cd 01       	movw	r24, r26
    78fc:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7900:	dc 01       	movw	r26, r24
    7902:	cb 01       	movw	r24, r22
    7904:	9a 83       	std	Y+2, r25	; 0x02
    7906:	89 83       	std	Y+1, r24	; 0x01

	return newInt(divi(av,bv));
    7908:	8b 81       	ldd	r24, Y+3	; 0x03
    790a:	9c 81       	ldd	r25, Y+4	; 0x04
    790c:	aa 27       	eor	r26, r26
    790e:	97 fd       	sbrc	r25, 7
    7910:	a0 95       	com	r26
    7912:	ba 2f       	mov	r27, r26
    7914:	bc 01       	movw	r22, r24
    7916:	cd 01       	movw	r24, r26
    7918:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    791c:	7b 01       	movw	r14, r22
    791e:	8c 01       	movw	r16, r24
    7920:	89 81       	ldd	r24, Y+1	; 0x01
    7922:	9a 81       	ldd	r25, Y+2	; 0x02
    7924:	aa 27       	eor	r26, r26
    7926:	97 fd       	sbrc	r25, 7
    7928:	a0 95       	com	r26
    792a:	ba 2f       	mov	r27, r26
    792c:	bc 01       	movw	r22, r24
    792e:	cd 01       	movw	r24, r26
    7930:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7934:	9b 01       	movw	r18, r22
    7936:	ac 01       	movw	r20, r24
    7938:	c8 01       	movw	r24, r16
    793a:	b7 01       	movw	r22, r14
    793c:	0e 94 8f 3b 	call	0x771e	; 0x771e <divi>
    7940:	dc 01       	movw	r26, r24
    7942:	cb 01       	movw	r24, r22
    7944:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
}
    7948:	28 96       	adiw	r28, 0x08	; 8
    794a:	0f b6       	in	r0, 0x3f	; 63
    794c:	f8 94       	cli
    794e:	de bf       	out	0x3e, r29	; 62
    7950:	0f be       	out	0x3f, r0	; 63
    7952:	cd bf       	out	0x3d, r28	; 61
    7954:	cf 91       	pop	r28
    7956:	df 91       	pop	r29
    7958:	1f 91       	pop	r17
    795a:	0f 91       	pop	r16
    795c:	ff 90       	pop	r15
    795e:	ef 90       	pop	r14
    7960:	08 95       	ret

00007962 <vdmDivGC>:

TVP vdmDivGC(TVP a, TVP b, TVP *from)
{
    7962:	ef 92       	push	r14
    7964:	ff 92       	push	r15
    7966:	0f 93       	push	r16
    7968:	1f 93       	push	r17
    796a:	df 93       	push	r29
    796c:	cf 93       	push	r28
    796e:	cd b7       	in	r28, 0x3d	; 61
    7970:	de b7       	in	r29, 0x3e	; 62
    7972:	2a 97       	sbiw	r28, 0x0a	; 10
    7974:	0f b6       	in	r0, 0x3f	; 63
    7976:	f8 94       	cli
    7978:	de bf       	out	0x3e, r29	; 62
    797a:	0f be       	out	0x3f, r0	; 63
    797c:	cd bf       	out	0x3d, r28	; 61
    797e:	9e 83       	std	Y+6, r25	; 0x06
    7980:	8d 83       	std	Y+5, r24	; 0x05
    7982:	78 87       	std	Y+8, r23	; 0x08
    7984:	6f 83       	std	Y+7, r22	; 0x07
    7986:	5a 87       	std	Y+10, r21	; 0x0a
    7988:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK_NUMERIC(a);
    798a:	ed 81       	ldd	r30, Y+5	; 0x05
    798c:	fe 81       	ldd	r31, Y+6	; 0x06
    798e:	80 81       	ld	r24, Z
    7990:	91 81       	ldd	r25, Z+1	; 0x01
    7992:	00 97       	sbiw	r24, 0x00	; 0
    7994:	f1 f0       	breq	.+60     	; 0x79d2 <vdmDivGC+0x70>
    7996:	ed 81       	ldd	r30, Y+5	; 0x05
    7998:	fe 81       	ldd	r31, Y+6	; 0x06
    799a:	80 81       	ld	r24, Z
    799c:	91 81       	ldd	r25, Z+1	; 0x01
    799e:	81 30       	cpi	r24, 0x01	; 1
    79a0:	91 05       	cpc	r25, r1
    79a2:	b9 f0       	breq	.+46     	; 0x79d2 <vdmDivGC+0x70>
    79a4:	ed 81       	ldd	r30, Y+5	; 0x05
    79a6:	fe 81       	ldd	r31, Y+6	; 0x06
    79a8:	80 81       	ld	r24, Z
    79aa:	91 81       	ldd	r25, Z+1	; 0x01
    79ac:	82 30       	cpi	r24, 0x02	; 2
    79ae:	91 05       	cpc	r25, r1
    79b0:	81 f0       	breq	.+32     	; 0x79d2 <vdmDivGC+0x70>
    79b2:	ed 81       	ldd	r30, Y+5	; 0x05
    79b4:	fe 81       	ldd	r31, Y+6	; 0x06
    79b6:	80 81       	ld	r24, Z
    79b8:	91 81       	ldd	r25, Z+1	; 0x01
    79ba:	84 30       	cpi	r24, 0x04	; 4
    79bc:	91 05       	cpc	r25, r1
    79be:	49 f0       	breq	.+18     	; 0x79d2 <vdmDivGC+0x70>
    79c0:	ed 81       	ldd	r30, Y+5	; 0x05
    79c2:	fe 81       	ldd	r31, Y+6	; 0x06
    79c4:	80 81       	ld	r24, Z
    79c6:	91 81       	ldd	r25, Z+1	; 0x01
    79c8:	85 30       	cpi	r24, 0x05	; 5
    79ca:	91 05       	cpc	r25, r1
    79cc:	11 f0       	breq	.+4      	; 0x79d2 <vdmDivGC+0x70>
    79ce:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    79d2:	ef 81       	ldd	r30, Y+7	; 0x07
    79d4:	f8 85       	ldd	r31, Y+8	; 0x08
    79d6:	80 81       	ld	r24, Z
    79d8:	91 81       	ldd	r25, Z+1	; 0x01
    79da:	00 97       	sbiw	r24, 0x00	; 0
    79dc:	f1 f0       	breq	.+60     	; 0x7a1a <vdmDivGC+0xb8>
    79de:	ef 81       	ldd	r30, Y+7	; 0x07
    79e0:	f8 85       	ldd	r31, Y+8	; 0x08
    79e2:	80 81       	ld	r24, Z
    79e4:	91 81       	ldd	r25, Z+1	; 0x01
    79e6:	81 30       	cpi	r24, 0x01	; 1
    79e8:	91 05       	cpc	r25, r1
    79ea:	b9 f0       	breq	.+46     	; 0x7a1a <vdmDivGC+0xb8>
    79ec:	ef 81       	ldd	r30, Y+7	; 0x07
    79ee:	f8 85       	ldd	r31, Y+8	; 0x08
    79f0:	80 81       	ld	r24, Z
    79f2:	91 81       	ldd	r25, Z+1	; 0x01
    79f4:	82 30       	cpi	r24, 0x02	; 2
    79f6:	91 05       	cpc	r25, r1
    79f8:	81 f0       	breq	.+32     	; 0x7a1a <vdmDivGC+0xb8>
    79fa:	ef 81       	ldd	r30, Y+7	; 0x07
    79fc:	f8 85       	ldd	r31, Y+8	; 0x08
    79fe:	80 81       	ld	r24, Z
    7a00:	91 81       	ldd	r25, Z+1	; 0x01
    7a02:	84 30       	cpi	r24, 0x04	; 4
    7a04:	91 05       	cpc	r25, r1
    7a06:	49 f0       	breq	.+18     	; 0x7a1a <vdmDivGC+0xb8>
    7a08:	ef 81       	ldd	r30, Y+7	; 0x07
    7a0a:	f8 85       	ldd	r31, Y+8	; 0x08
    7a0c:	80 81       	ld	r24, Z
    7a0e:	91 81       	ldd	r25, Z+1	; 0x01
    7a10:	85 30       	cpi	r24, 0x05	; 5
    7a12:	91 05       	cpc	r25, r1
    7a14:	11 f0       	breq	.+4      	; 0x7a1a <vdmDivGC+0xb8>
    7a16:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L444  */

	ASSERT_CHECK_INT(a);
    7a1a:	ed 81       	ldd	r30, Y+5	; 0x05
    7a1c:	fe 81       	ldd	r31, Y+6	; 0x06
    7a1e:	80 81       	ld	r24, Z
    7a20:	91 81       	ldd	r25, Z+1	; 0x01
    7a22:	00 97       	sbiw	r24, 0x00	; 0
    7a24:	11 f0       	breq	.+4      	; 0x7a2a <vdmDivGC+0xc8>
    7a26:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_INT(b);
    7a2a:	ef 81       	ldd	r30, Y+7	; 0x07
    7a2c:	f8 85       	ldd	r31, Y+8	; 0x08
    7a2e:	80 81       	ld	r24, Z
    7a30:	91 81       	ldd	r25, Z+1	; 0x01
    7a32:	00 97       	sbiw	r24, 0x00	; 0
    7a34:	11 f0       	breq	.+4      	; 0x7a3a <vdmDivGC+0xd8>
    7a36:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	int av = toDouble(a);
    7a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    7a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    7a3e:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7a42:	dc 01       	movw	r26, r24
    7a44:	cb 01       	movw	r24, r22
    7a46:	bc 01       	movw	r22, r24
    7a48:	cd 01       	movw	r24, r26
    7a4a:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7a4e:	dc 01       	movw	r26, r24
    7a50:	cb 01       	movw	r24, r22
    7a52:	9c 83       	std	Y+4, r25	; 0x04
    7a54:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    7a56:	8f 81       	ldd	r24, Y+7	; 0x07
    7a58:	98 85       	ldd	r25, Y+8	; 0x08
    7a5a:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7a5e:	dc 01       	movw	r26, r24
    7a60:	cb 01       	movw	r24, r22
    7a62:	bc 01       	movw	r22, r24
    7a64:	cd 01       	movw	r24, r26
    7a66:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7a6a:	dc 01       	movw	r26, r24
    7a6c:	cb 01       	movw	r24, r22
    7a6e:	9a 83       	std	Y+2, r25	; 0x02
    7a70:	89 83       	std	Y+1, r24	; 0x01

	return newIntGC(divi(av,bv), from);
    7a72:	8b 81       	ldd	r24, Y+3	; 0x03
    7a74:	9c 81       	ldd	r25, Y+4	; 0x04
    7a76:	aa 27       	eor	r26, r26
    7a78:	97 fd       	sbrc	r25, 7
    7a7a:	a0 95       	com	r26
    7a7c:	ba 2f       	mov	r27, r26
    7a7e:	bc 01       	movw	r22, r24
    7a80:	cd 01       	movw	r24, r26
    7a82:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7a86:	7b 01       	movw	r14, r22
    7a88:	8c 01       	movw	r16, r24
    7a8a:	89 81       	ldd	r24, Y+1	; 0x01
    7a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    7a8e:	aa 27       	eor	r26, r26
    7a90:	97 fd       	sbrc	r25, 7
    7a92:	a0 95       	com	r26
    7a94:	ba 2f       	mov	r27, r26
    7a96:	bc 01       	movw	r22, r24
    7a98:	cd 01       	movw	r24, r26
    7a9a:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7a9e:	9b 01       	movw	r18, r22
    7aa0:	ac 01       	movw	r20, r24
    7aa2:	c8 01       	movw	r24, r16
    7aa4:	b7 01       	movw	r22, r14
    7aa6:	0e 94 8f 3b 	call	0x771e	; 0x771e <divi>
    7aaa:	dc 01       	movw	r26, r24
    7aac:	cb 01       	movw	r24, r22
    7aae:	29 85       	ldd	r18, Y+9	; 0x09
    7ab0:	3a 85       	ldd	r19, Y+10	; 0x0a
    7ab2:	b9 01       	movw	r22, r18
    7ab4:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
}
    7ab8:	2a 96       	adiw	r28, 0x0a	; 10
    7aba:	0f b6       	in	r0, 0x3f	; 63
    7abc:	f8 94       	cli
    7abe:	de bf       	out	0x3e, r29	; 62
    7ac0:	0f be       	out	0x3f, r0	; 63
    7ac2:	cd bf       	out	0x3d, r28	; 61
    7ac4:	cf 91       	pop	r28
    7ac6:	df 91       	pop	r29
    7ac8:	1f 91       	pop	r17
    7aca:	0f 91       	pop	r16
    7acc:	ff 90       	pop	r15
    7ace:	ef 90       	pop	r14
    7ad0:	08 95       	ret

00007ad2 <vdmRem>:

TVP vdmRem(TVP a,TVP b)
{
    7ad2:	8f 92       	push	r8
    7ad4:	9f 92       	push	r9
    7ad6:	af 92       	push	r10
    7ad8:	bf 92       	push	r11
    7ada:	cf 92       	push	r12
    7adc:	df 92       	push	r13
    7ade:	ef 92       	push	r14
    7ae0:	ff 92       	push	r15
    7ae2:	0f 93       	push	r16
    7ae4:	1f 93       	push	r17
    7ae6:	df 93       	push	r29
    7ae8:	cf 93       	push	r28
    7aea:	cd b7       	in	r28, 0x3d	; 61
    7aec:	de b7       	in	r29, 0x3e	; 62
    7aee:	28 97       	sbiw	r28, 0x08	; 8
    7af0:	0f b6       	in	r0, 0x3f	; 63
    7af2:	f8 94       	cli
    7af4:	de bf       	out	0x3e, r29	; 62
    7af6:	0f be       	out	0x3f, r0	; 63
    7af8:	cd bf       	out	0x3d, r28	; 61
    7afa:	9e 83       	std	Y+6, r25	; 0x06
    7afc:	8d 83       	std	Y+5, r24	; 0x05
    7afe:	78 87       	std	Y+8, r23	; 0x08
    7b00:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK_NUMERIC(a);
    7b02:	ed 81       	ldd	r30, Y+5	; 0x05
    7b04:	fe 81       	ldd	r31, Y+6	; 0x06
    7b06:	80 81       	ld	r24, Z
    7b08:	91 81       	ldd	r25, Z+1	; 0x01
    7b0a:	00 97       	sbiw	r24, 0x00	; 0
    7b0c:	f1 f0       	breq	.+60     	; 0x7b4a <vdmRem+0x78>
    7b0e:	ed 81       	ldd	r30, Y+5	; 0x05
    7b10:	fe 81       	ldd	r31, Y+6	; 0x06
    7b12:	80 81       	ld	r24, Z
    7b14:	91 81       	ldd	r25, Z+1	; 0x01
    7b16:	81 30       	cpi	r24, 0x01	; 1
    7b18:	91 05       	cpc	r25, r1
    7b1a:	b9 f0       	breq	.+46     	; 0x7b4a <vdmRem+0x78>
    7b1c:	ed 81       	ldd	r30, Y+5	; 0x05
    7b1e:	fe 81       	ldd	r31, Y+6	; 0x06
    7b20:	80 81       	ld	r24, Z
    7b22:	91 81       	ldd	r25, Z+1	; 0x01
    7b24:	82 30       	cpi	r24, 0x02	; 2
    7b26:	91 05       	cpc	r25, r1
    7b28:	81 f0       	breq	.+32     	; 0x7b4a <vdmRem+0x78>
    7b2a:	ed 81       	ldd	r30, Y+5	; 0x05
    7b2c:	fe 81       	ldd	r31, Y+6	; 0x06
    7b2e:	80 81       	ld	r24, Z
    7b30:	91 81       	ldd	r25, Z+1	; 0x01
    7b32:	84 30       	cpi	r24, 0x04	; 4
    7b34:	91 05       	cpc	r25, r1
    7b36:	49 f0       	breq	.+18     	; 0x7b4a <vdmRem+0x78>
    7b38:	ed 81       	ldd	r30, Y+5	; 0x05
    7b3a:	fe 81       	ldd	r31, Y+6	; 0x06
    7b3c:	80 81       	ld	r24, Z
    7b3e:	91 81       	ldd	r25, Z+1	; 0x01
    7b40:	85 30       	cpi	r24, 0x05	; 5
    7b42:	91 05       	cpc	r25, r1
    7b44:	11 f0       	breq	.+4      	; 0x7b4a <vdmRem+0x78>
    7b46:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7b4a:	ef 81       	ldd	r30, Y+7	; 0x07
    7b4c:	f8 85       	ldd	r31, Y+8	; 0x08
    7b4e:	80 81       	ld	r24, Z
    7b50:	91 81       	ldd	r25, Z+1	; 0x01
    7b52:	00 97       	sbiw	r24, 0x00	; 0
    7b54:	f1 f0       	breq	.+60     	; 0x7b92 <vdmRem+0xc0>
    7b56:	ef 81       	ldd	r30, Y+7	; 0x07
    7b58:	f8 85       	ldd	r31, Y+8	; 0x08
    7b5a:	80 81       	ld	r24, Z
    7b5c:	91 81       	ldd	r25, Z+1	; 0x01
    7b5e:	81 30       	cpi	r24, 0x01	; 1
    7b60:	91 05       	cpc	r25, r1
    7b62:	b9 f0       	breq	.+46     	; 0x7b92 <vdmRem+0xc0>
    7b64:	ef 81       	ldd	r30, Y+7	; 0x07
    7b66:	f8 85       	ldd	r31, Y+8	; 0x08
    7b68:	80 81       	ld	r24, Z
    7b6a:	91 81       	ldd	r25, Z+1	; 0x01
    7b6c:	82 30       	cpi	r24, 0x02	; 2
    7b6e:	91 05       	cpc	r25, r1
    7b70:	81 f0       	breq	.+32     	; 0x7b92 <vdmRem+0xc0>
    7b72:	ef 81       	ldd	r30, Y+7	; 0x07
    7b74:	f8 85       	ldd	r31, Y+8	; 0x08
    7b76:	80 81       	ld	r24, Z
    7b78:	91 81       	ldd	r25, Z+1	; 0x01
    7b7a:	84 30       	cpi	r24, 0x04	; 4
    7b7c:	91 05       	cpc	r25, r1
    7b7e:	49 f0       	breq	.+18     	; 0x7b92 <vdmRem+0xc0>
    7b80:	ef 81       	ldd	r30, Y+7	; 0x07
    7b82:	f8 85       	ldd	r31, Y+8	; 0x08
    7b84:	80 81       	ld	r24, Z
    7b86:	91 81       	ldd	r25, Z+1	; 0x01
    7b88:	85 30       	cpi	r24, 0x05	; 5
    7b8a:	91 05       	cpc	r25, r1
    7b8c:	11 f0       	breq	.+4      	; 0x7b92 <vdmRem+0xc0>
    7b8e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L628  */
	ASSERT_CHECK_INT(a);
    7b92:	ed 81       	ldd	r30, Y+5	; 0x05
    7b94:	fe 81       	ldd	r31, Y+6	; 0x06
    7b96:	80 81       	ld	r24, Z
    7b98:	91 81       	ldd	r25, Z+1	; 0x01
    7b9a:	00 97       	sbiw	r24, 0x00	; 0
    7b9c:	11 f0       	breq	.+4      	; 0x7ba2 <vdmRem+0xd0>
    7b9e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_INT(b);
    7ba2:	ef 81       	ldd	r30, Y+7	; 0x07
    7ba4:	f8 85       	ldd	r31, Y+8	; 0x08
    7ba6:	80 81       	ld	r24, Z
    7ba8:	91 81       	ldd	r25, Z+1	; 0x01
    7baa:	00 97       	sbiw	r24, 0x00	; 0
    7bac:	11 f0       	breq	.+4      	; 0x7bb2 <vdmRem+0xe0>
    7bae:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	int av = toDouble(a);
    7bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    7bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    7bb6:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7bba:	dc 01       	movw	r26, r24
    7bbc:	cb 01       	movw	r24, r22
    7bbe:	bc 01       	movw	r22, r24
    7bc0:	cd 01       	movw	r24, r26
    7bc2:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7bc6:	dc 01       	movw	r26, r24
    7bc8:	cb 01       	movw	r24, r22
    7bca:	9c 83       	std	Y+4, r25	; 0x04
    7bcc:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    7bce:	8f 81       	ldd	r24, Y+7	; 0x07
    7bd0:	98 85       	ldd	r25, Y+8	; 0x08
    7bd2:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7bd6:	dc 01       	movw	r26, r24
    7bd8:	cb 01       	movw	r24, r22
    7bda:	bc 01       	movw	r22, r24
    7bdc:	cd 01       	movw	r24, r26
    7bde:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7be2:	dc 01       	movw	r26, r24
    7be4:	cb 01       	movw	r24, r22
    7be6:	9a 83       	std	Y+2, r25	; 0x02
    7be8:	89 83       	std	Y+1, r24	; 0x01

	return newInt(av-bv*divi(av,bv));
    7bea:	8b 80       	ldd	r8, Y+3	; 0x03
    7bec:	9c 80       	ldd	r9, Y+4	; 0x04
    7bee:	89 81       	ldd	r24, Y+1	; 0x01
    7bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    7bf2:	5c 01       	movw	r10, r24
    7bf4:	cc 24       	eor	r12, r12
    7bf6:	b7 fc       	sbrc	r11, 7
    7bf8:	c0 94       	com	r12
    7bfa:	dc 2c       	mov	r13, r12
    7bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    7bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    7c00:	aa 27       	eor	r26, r26
    7c02:	97 fd       	sbrc	r25, 7
    7c04:	a0 95       	com	r26
    7c06:	ba 2f       	mov	r27, r26
    7c08:	bc 01       	movw	r22, r24
    7c0a:	cd 01       	movw	r24, r26
    7c0c:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7c10:	7b 01       	movw	r14, r22
    7c12:	8c 01       	movw	r16, r24
    7c14:	89 81       	ldd	r24, Y+1	; 0x01
    7c16:	9a 81       	ldd	r25, Y+2	; 0x02
    7c18:	aa 27       	eor	r26, r26
    7c1a:	97 fd       	sbrc	r25, 7
    7c1c:	a0 95       	com	r26
    7c1e:	ba 2f       	mov	r27, r26
    7c20:	bc 01       	movw	r22, r24
    7c22:	cd 01       	movw	r24, r26
    7c24:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7c28:	9b 01       	movw	r18, r22
    7c2a:	ac 01       	movw	r20, r24
    7c2c:	c8 01       	movw	r24, r16
    7c2e:	b7 01       	movw	r22, r14
    7c30:	0e 94 8f 3b 	call	0x771e	; 0x771e <divi>
    7c34:	9b 01       	movw	r18, r22
    7c36:	ac 01       	movw	r20, r24
    7c38:	c6 01       	movw	r24, r12
    7c3a:	b5 01       	movw	r22, r10
    7c3c:	0e 94 c2 72 	call	0xe584	; 0xe584 <__mulsi3>
    7c40:	dc 01       	movw	r26, r24
    7c42:	cb 01       	movw	r24, r22
    7c44:	94 01       	movw	r18, r8
    7c46:	28 1b       	sub	r18, r24
    7c48:	39 0b       	sbc	r19, r25
    7c4a:	c9 01       	movw	r24, r18
    7c4c:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
}
    7c50:	28 96       	adiw	r28, 0x08	; 8
    7c52:	0f b6       	in	r0, 0x3f	; 63
    7c54:	f8 94       	cli
    7c56:	de bf       	out	0x3e, r29	; 62
    7c58:	0f be       	out	0x3f, r0	; 63
    7c5a:	cd bf       	out	0x3d, r28	; 61
    7c5c:	cf 91       	pop	r28
    7c5e:	df 91       	pop	r29
    7c60:	1f 91       	pop	r17
    7c62:	0f 91       	pop	r16
    7c64:	ff 90       	pop	r15
    7c66:	ef 90       	pop	r14
    7c68:	df 90       	pop	r13
    7c6a:	cf 90       	pop	r12
    7c6c:	bf 90       	pop	r11
    7c6e:	af 90       	pop	r10
    7c70:	9f 90       	pop	r9
    7c72:	8f 90       	pop	r8
    7c74:	08 95       	ret

00007c76 <vdmRemGC>:

TVP vdmRemGC(TVP a, TVP b, TVP *from)
{
    7c76:	8f 92       	push	r8
    7c78:	9f 92       	push	r9
    7c7a:	af 92       	push	r10
    7c7c:	bf 92       	push	r11
    7c7e:	cf 92       	push	r12
    7c80:	df 92       	push	r13
    7c82:	ef 92       	push	r14
    7c84:	ff 92       	push	r15
    7c86:	0f 93       	push	r16
    7c88:	1f 93       	push	r17
    7c8a:	df 93       	push	r29
    7c8c:	cf 93       	push	r28
    7c8e:	cd b7       	in	r28, 0x3d	; 61
    7c90:	de b7       	in	r29, 0x3e	; 62
    7c92:	2a 97       	sbiw	r28, 0x0a	; 10
    7c94:	0f b6       	in	r0, 0x3f	; 63
    7c96:	f8 94       	cli
    7c98:	de bf       	out	0x3e, r29	; 62
    7c9a:	0f be       	out	0x3f, r0	; 63
    7c9c:	cd bf       	out	0x3d, r28	; 61
    7c9e:	9e 83       	std	Y+6, r25	; 0x06
    7ca0:	8d 83       	std	Y+5, r24	; 0x05
    7ca2:	78 87       	std	Y+8, r23	; 0x08
    7ca4:	6f 83       	std	Y+7, r22	; 0x07
    7ca6:	5a 87       	std	Y+10, r21	; 0x0a
    7ca8:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK_NUMERIC(a);
    7caa:	ed 81       	ldd	r30, Y+5	; 0x05
    7cac:	fe 81       	ldd	r31, Y+6	; 0x06
    7cae:	80 81       	ld	r24, Z
    7cb0:	91 81       	ldd	r25, Z+1	; 0x01
    7cb2:	00 97       	sbiw	r24, 0x00	; 0
    7cb4:	f1 f0       	breq	.+60     	; 0x7cf2 <vdmRemGC+0x7c>
    7cb6:	ed 81       	ldd	r30, Y+5	; 0x05
    7cb8:	fe 81       	ldd	r31, Y+6	; 0x06
    7cba:	80 81       	ld	r24, Z
    7cbc:	91 81       	ldd	r25, Z+1	; 0x01
    7cbe:	81 30       	cpi	r24, 0x01	; 1
    7cc0:	91 05       	cpc	r25, r1
    7cc2:	b9 f0       	breq	.+46     	; 0x7cf2 <vdmRemGC+0x7c>
    7cc4:	ed 81       	ldd	r30, Y+5	; 0x05
    7cc6:	fe 81       	ldd	r31, Y+6	; 0x06
    7cc8:	80 81       	ld	r24, Z
    7cca:	91 81       	ldd	r25, Z+1	; 0x01
    7ccc:	82 30       	cpi	r24, 0x02	; 2
    7cce:	91 05       	cpc	r25, r1
    7cd0:	81 f0       	breq	.+32     	; 0x7cf2 <vdmRemGC+0x7c>
    7cd2:	ed 81       	ldd	r30, Y+5	; 0x05
    7cd4:	fe 81       	ldd	r31, Y+6	; 0x06
    7cd6:	80 81       	ld	r24, Z
    7cd8:	91 81       	ldd	r25, Z+1	; 0x01
    7cda:	84 30       	cpi	r24, 0x04	; 4
    7cdc:	91 05       	cpc	r25, r1
    7cde:	49 f0       	breq	.+18     	; 0x7cf2 <vdmRemGC+0x7c>
    7ce0:	ed 81       	ldd	r30, Y+5	; 0x05
    7ce2:	fe 81       	ldd	r31, Y+6	; 0x06
    7ce4:	80 81       	ld	r24, Z
    7ce6:	91 81       	ldd	r25, Z+1	; 0x01
    7ce8:	85 30       	cpi	r24, 0x05	; 5
    7cea:	91 05       	cpc	r25, r1
    7cec:	11 f0       	breq	.+4      	; 0x7cf2 <vdmRemGC+0x7c>
    7cee:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7cf2:	ef 81       	ldd	r30, Y+7	; 0x07
    7cf4:	f8 85       	ldd	r31, Y+8	; 0x08
    7cf6:	80 81       	ld	r24, Z
    7cf8:	91 81       	ldd	r25, Z+1	; 0x01
    7cfa:	00 97       	sbiw	r24, 0x00	; 0
    7cfc:	f1 f0       	breq	.+60     	; 0x7d3a <vdmRemGC+0xc4>
    7cfe:	ef 81       	ldd	r30, Y+7	; 0x07
    7d00:	f8 85       	ldd	r31, Y+8	; 0x08
    7d02:	80 81       	ld	r24, Z
    7d04:	91 81       	ldd	r25, Z+1	; 0x01
    7d06:	81 30       	cpi	r24, 0x01	; 1
    7d08:	91 05       	cpc	r25, r1
    7d0a:	b9 f0       	breq	.+46     	; 0x7d3a <vdmRemGC+0xc4>
    7d0c:	ef 81       	ldd	r30, Y+7	; 0x07
    7d0e:	f8 85       	ldd	r31, Y+8	; 0x08
    7d10:	80 81       	ld	r24, Z
    7d12:	91 81       	ldd	r25, Z+1	; 0x01
    7d14:	82 30       	cpi	r24, 0x02	; 2
    7d16:	91 05       	cpc	r25, r1
    7d18:	81 f0       	breq	.+32     	; 0x7d3a <vdmRemGC+0xc4>
    7d1a:	ef 81       	ldd	r30, Y+7	; 0x07
    7d1c:	f8 85       	ldd	r31, Y+8	; 0x08
    7d1e:	80 81       	ld	r24, Z
    7d20:	91 81       	ldd	r25, Z+1	; 0x01
    7d22:	84 30       	cpi	r24, 0x04	; 4
    7d24:	91 05       	cpc	r25, r1
    7d26:	49 f0       	breq	.+18     	; 0x7d3a <vdmRemGC+0xc4>
    7d28:	ef 81       	ldd	r30, Y+7	; 0x07
    7d2a:	f8 85       	ldd	r31, Y+8	; 0x08
    7d2c:	80 81       	ld	r24, Z
    7d2e:	91 81       	ldd	r25, Z+1	; 0x01
    7d30:	85 30       	cpi	r24, 0x05	; 5
    7d32:	91 05       	cpc	r25, r1
    7d34:	11 f0       	breq	.+4      	; 0x7d3a <vdmRemGC+0xc4>
    7d36:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L628  */
	ASSERT_CHECK_INT(a);
    7d3a:	ed 81       	ldd	r30, Y+5	; 0x05
    7d3c:	fe 81       	ldd	r31, Y+6	; 0x06
    7d3e:	80 81       	ld	r24, Z
    7d40:	91 81       	ldd	r25, Z+1	; 0x01
    7d42:	00 97       	sbiw	r24, 0x00	; 0
    7d44:	11 f0       	breq	.+4      	; 0x7d4a <vdmRemGC+0xd4>
    7d46:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_INT(b);
    7d4a:	ef 81       	ldd	r30, Y+7	; 0x07
    7d4c:	f8 85       	ldd	r31, Y+8	; 0x08
    7d4e:	80 81       	ld	r24, Z
    7d50:	91 81       	ldd	r25, Z+1	; 0x01
    7d52:	00 97       	sbiw	r24, 0x00	; 0
    7d54:	11 f0       	breq	.+4      	; 0x7d5a <vdmRemGC+0xe4>
    7d56:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	int av = toDouble(a);
    7d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    7d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    7d5e:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7d62:	dc 01       	movw	r26, r24
    7d64:	cb 01       	movw	r24, r22
    7d66:	bc 01       	movw	r22, r24
    7d68:	cd 01       	movw	r24, r26
    7d6a:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7d6e:	dc 01       	movw	r26, r24
    7d70:	cb 01       	movw	r24, r22
    7d72:	9c 83       	std	Y+4, r25	; 0x04
    7d74:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    7d76:	8f 81       	ldd	r24, Y+7	; 0x07
    7d78:	98 85       	ldd	r25, Y+8	; 0x08
    7d7a:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7d7e:	dc 01       	movw	r26, r24
    7d80:	cb 01       	movw	r24, r22
    7d82:	bc 01       	movw	r22, r24
    7d84:	cd 01       	movw	r24, r26
    7d86:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7d8a:	dc 01       	movw	r26, r24
    7d8c:	cb 01       	movw	r24, r22
    7d8e:	9a 83       	std	Y+2, r25	; 0x02
    7d90:	89 83       	std	Y+1, r24	; 0x01

	return newIntGC(av-bv*divi(av,bv), from);
    7d92:	8b 80       	ldd	r8, Y+3	; 0x03
    7d94:	9c 80       	ldd	r9, Y+4	; 0x04
    7d96:	89 81       	ldd	r24, Y+1	; 0x01
    7d98:	9a 81       	ldd	r25, Y+2	; 0x02
    7d9a:	5c 01       	movw	r10, r24
    7d9c:	cc 24       	eor	r12, r12
    7d9e:	b7 fc       	sbrc	r11, 7
    7da0:	c0 94       	com	r12
    7da2:	dc 2c       	mov	r13, r12
    7da4:	8b 81       	ldd	r24, Y+3	; 0x03
    7da6:	9c 81       	ldd	r25, Y+4	; 0x04
    7da8:	aa 27       	eor	r26, r26
    7daa:	97 fd       	sbrc	r25, 7
    7dac:	a0 95       	com	r26
    7dae:	ba 2f       	mov	r27, r26
    7db0:	bc 01       	movw	r22, r24
    7db2:	cd 01       	movw	r24, r26
    7db4:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7db8:	7b 01       	movw	r14, r22
    7dba:	8c 01       	movw	r16, r24
    7dbc:	89 81       	ldd	r24, Y+1	; 0x01
    7dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    7dc0:	aa 27       	eor	r26, r26
    7dc2:	97 fd       	sbrc	r25, 7
    7dc4:	a0 95       	com	r26
    7dc6:	ba 2f       	mov	r27, r26
    7dc8:	bc 01       	movw	r22, r24
    7dca:	cd 01       	movw	r24, r26
    7dcc:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7dd0:	9b 01       	movw	r18, r22
    7dd2:	ac 01       	movw	r20, r24
    7dd4:	c8 01       	movw	r24, r16
    7dd6:	b7 01       	movw	r22, r14
    7dd8:	0e 94 8f 3b 	call	0x771e	; 0x771e <divi>
    7ddc:	9b 01       	movw	r18, r22
    7dde:	ac 01       	movw	r20, r24
    7de0:	c6 01       	movw	r24, r12
    7de2:	b5 01       	movw	r22, r10
    7de4:	0e 94 c2 72 	call	0xe584	; 0xe584 <__mulsi3>
    7de8:	dc 01       	movw	r26, r24
    7dea:	cb 01       	movw	r24, r22
    7dec:	94 01       	movw	r18, r8
    7dee:	28 1b       	sub	r18, r24
    7df0:	39 0b       	sbc	r19, r25
    7df2:	c9 01       	movw	r24, r18
    7df4:	29 85       	ldd	r18, Y+9	; 0x09
    7df6:	3a 85       	ldd	r19, Y+10	; 0x0a
    7df8:	b9 01       	movw	r22, r18
    7dfa:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
}
    7dfe:	2a 96       	adiw	r28, 0x0a	; 10
    7e00:	0f b6       	in	r0, 0x3f	; 63
    7e02:	f8 94       	cli
    7e04:	de bf       	out	0x3e, r29	; 62
    7e06:	0f be       	out	0x3f, r0	; 63
    7e08:	cd bf       	out	0x3d, r28	; 61
    7e0a:	cf 91       	pop	r28
    7e0c:	df 91       	pop	r29
    7e0e:	1f 91       	pop	r17
    7e10:	0f 91       	pop	r16
    7e12:	ff 90       	pop	r15
    7e14:	ef 90       	pop	r14
    7e16:	df 90       	pop	r13
    7e18:	cf 90       	pop	r12
    7e1a:	bf 90       	pop	r11
    7e1c:	af 90       	pop	r10
    7e1e:	9f 90       	pop	r9
    7e20:	8f 90       	pop	r8
    7e22:	08 95       	ret

00007e24 <vdmMod>:

TVP vdmMod(TVP a,TVP b)
{
    7e24:	df 93       	push	r29
    7e26:	cf 93       	push	r28
    7e28:	cd b7       	in	r28, 0x3d	; 61
    7e2a:	de b7       	in	r29, 0x3e	; 62
    7e2c:	2e 97       	sbiw	r28, 0x0e	; 14
    7e2e:	0f b6       	in	r0, 0x3f	; 63
    7e30:	f8 94       	cli
    7e32:	de bf       	out	0x3e, r29	; 62
    7e34:	0f be       	out	0x3f, r0	; 63
    7e36:	cd bf       	out	0x3d, r28	; 61
    7e38:	9a 87       	std	Y+10, r25	; 0x0a
    7e3a:	89 87       	std	Y+9, r24	; 0x09
    7e3c:	7c 87       	std	Y+12, r23	; 0x0c
    7e3e:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    7e40:	e9 85       	ldd	r30, Y+9	; 0x09
    7e42:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e44:	80 81       	ld	r24, Z
    7e46:	91 81       	ldd	r25, Z+1	; 0x01
    7e48:	00 97       	sbiw	r24, 0x00	; 0
    7e4a:	f1 f0       	breq	.+60     	; 0x7e88 <vdmMod+0x64>
    7e4c:	e9 85       	ldd	r30, Y+9	; 0x09
    7e4e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e50:	80 81       	ld	r24, Z
    7e52:	91 81       	ldd	r25, Z+1	; 0x01
    7e54:	81 30       	cpi	r24, 0x01	; 1
    7e56:	91 05       	cpc	r25, r1
    7e58:	b9 f0       	breq	.+46     	; 0x7e88 <vdmMod+0x64>
    7e5a:	e9 85       	ldd	r30, Y+9	; 0x09
    7e5c:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e5e:	80 81       	ld	r24, Z
    7e60:	91 81       	ldd	r25, Z+1	; 0x01
    7e62:	82 30       	cpi	r24, 0x02	; 2
    7e64:	91 05       	cpc	r25, r1
    7e66:	81 f0       	breq	.+32     	; 0x7e88 <vdmMod+0x64>
    7e68:	e9 85       	ldd	r30, Y+9	; 0x09
    7e6a:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e6c:	80 81       	ld	r24, Z
    7e6e:	91 81       	ldd	r25, Z+1	; 0x01
    7e70:	84 30       	cpi	r24, 0x04	; 4
    7e72:	91 05       	cpc	r25, r1
    7e74:	49 f0       	breq	.+18     	; 0x7e88 <vdmMod+0x64>
    7e76:	e9 85       	ldd	r30, Y+9	; 0x09
    7e78:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e7a:	80 81       	ld	r24, Z
    7e7c:	91 81       	ldd	r25, Z+1	; 0x01
    7e7e:	85 30       	cpi	r24, 0x05	; 5
    7e80:	91 05       	cpc	r25, r1
    7e82:	11 f0       	breq	.+4      	; 0x7e88 <vdmMod+0x64>
    7e84:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7e88:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e8c:	80 81       	ld	r24, Z
    7e8e:	91 81       	ldd	r25, Z+1	; 0x01
    7e90:	00 97       	sbiw	r24, 0x00	; 0
    7e92:	f1 f0       	breq	.+60     	; 0x7ed0 <vdmMod+0xac>
    7e94:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e96:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e98:	80 81       	ld	r24, Z
    7e9a:	91 81       	ldd	r25, Z+1	; 0x01
    7e9c:	81 30       	cpi	r24, 0x01	; 1
    7e9e:	91 05       	cpc	r25, r1
    7ea0:	b9 f0       	breq	.+46     	; 0x7ed0 <vdmMod+0xac>
    7ea2:	eb 85       	ldd	r30, Y+11	; 0x0b
    7ea4:	fc 85       	ldd	r31, Y+12	; 0x0c
    7ea6:	80 81       	ld	r24, Z
    7ea8:	91 81       	ldd	r25, Z+1	; 0x01
    7eaa:	82 30       	cpi	r24, 0x02	; 2
    7eac:	91 05       	cpc	r25, r1
    7eae:	81 f0       	breq	.+32     	; 0x7ed0 <vdmMod+0xac>
    7eb0:	eb 85       	ldd	r30, Y+11	; 0x0b
    7eb2:	fc 85       	ldd	r31, Y+12	; 0x0c
    7eb4:	80 81       	ld	r24, Z
    7eb6:	91 81       	ldd	r25, Z+1	; 0x01
    7eb8:	84 30       	cpi	r24, 0x04	; 4
    7eba:	91 05       	cpc	r25, r1
    7ebc:	49 f0       	breq	.+18     	; 0x7ed0 <vdmMod+0xac>
    7ebe:	eb 85       	ldd	r30, Y+11	; 0x0b
    7ec0:	fc 85       	ldd	r31, Y+12	; 0x0c
    7ec2:	80 81       	ld	r24, Z
    7ec4:	91 81       	ldd	r25, Z+1	; 0x01
    7ec6:	85 30       	cpi	r24, 0x05	; 5
    7ec8:	91 05       	cpc	r25, r1
    7eca:	11 f0       	breq	.+4      	; 0x7ed0 <vdmMod+0xac>
    7ecc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L575  */
	ASSERT_CHECK_INT(a);
    7ed0:	e9 85       	ldd	r30, Y+9	; 0x09
    7ed2:	fa 85       	ldd	r31, Y+10	; 0x0a
    7ed4:	80 81       	ld	r24, Z
    7ed6:	91 81       	ldd	r25, Z+1	; 0x01
    7ed8:	00 97       	sbiw	r24, 0x00	; 0
    7eda:	11 f0       	breq	.+4      	; 0x7ee0 <vdmMod+0xbc>
    7edc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_INT(b);
    7ee0:	eb 85       	ldd	r30, Y+11	; 0x0b
    7ee2:	fc 85       	ldd	r31, Y+12	; 0x0c
    7ee4:	80 81       	ld	r24, Z
    7ee6:	91 81       	ldd	r25, Z+1	; 0x01
    7ee8:	00 97       	sbiw	r24, 0x00	; 0
    7eea:	11 f0       	breq	.+4      	; 0x7ef0 <vdmMod+0xcc>
    7eec:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double lv =(int) toDouble(a);
    7ef0:	89 85       	ldd	r24, Y+9	; 0x09
    7ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    7ef4:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7ef8:	dc 01       	movw	r26, r24
    7efa:	cb 01       	movw	r24, r22
    7efc:	bc 01       	movw	r22, r24
    7efe:	cd 01       	movw	r24, r26
    7f00:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7f04:	dc 01       	movw	r26, r24
    7f06:	cb 01       	movw	r24, r22
    7f08:	aa 27       	eor	r26, r26
    7f0a:	97 fd       	sbrc	r25, 7
    7f0c:	a0 95       	com	r26
    7f0e:	ba 2f       	mov	r27, r26
    7f10:	bc 01       	movw	r22, r24
    7f12:	cd 01       	movw	r24, r26
    7f14:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7f18:	dc 01       	movw	r26, r24
    7f1a:	cb 01       	movw	r24, r22
    7f1c:	8d 83       	std	Y+5, r24	; 0x05
    7f1e:	9e 83       	std	Y+6, r25	; 0x06
    7f20:	af 83       	std	Y+7, r26	; 0x07
    7f22:	b8 87       	std	Y+8, r27	; 0x08
	double rv = (int)toDouble(b);
    7f24:	8b 85       	ldd	r24, Y+11	; 0x0b
    7f26:	9c 85       	ldd	r25, Y+12	; 0x0c
    7f28:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    7f2c:	dc 01       	movw	r26, r24
    7f2e:	cb 01       	movw	r24, r22
    7f30:	bc 01       	movw	r22, r24
    7f32:	cd 01       	movw	r24, r26
    7f34:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7f38:	dc 01       	movw	r26, r24
    7f3a:	cb 01       	movw	r24, r22
    7f3c:	aa 27       	eor	r26, r26
    7f3e:	97 fd       	sbrc	r25, 7
    7f40:	a0 95       	com	r26
    7f42:	ba 2f       	mov	r27, r26
    7f44:	bc 01       	movw	r22, r24
    7f46:	cd 01       	movw	r24, r26
    7f48:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7f4c:	dc 01       	movw	r26, r24
    7f4e:	cb 01       	movw	r24, r22
    7f50:	89 83       	std	Y+1, r24	; 0x01
    7f52:	9a 83       	std	Y+2, r25	; 0x02
    7f54:	ab 83       	std	Y+3, r26	; 0x03
    7f56:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    7f58:	e9 85       	ldd	r30, Y+9	; 0x09
    7f5a:	fa 85       	ldd	r31, Y+10	; 0x0a
    7f5c:	80 81       	ld	r24, Z
    7f5e:	91 81       	ldd	r25, Z+1	; 0x01
    7f60:	00 97       	sbiw	r24, 0x00	; 0
    7f62:	79 f0       	breq	.+30     	; 0x7f82 <vdmMod+0x15e>
    7f64:	e9 85       	ldd	r30, Y+9	; 0x09
    7f66:	fa 85       	ldd	r31, Y+10	; 0x0a
    7f68:	80 81       	ld	r24, Z
    7f6a:	91 81       	ldd	r25, Z+1	; 0x01
    7f6c:	81 30       	cpi	r24, 0x01	; 1
    7f6e:	91 05       	cpc	r25, r1
    7f70:	41 f0       	breq	.+16     	; 0x7f82 <vdmMod+0x15e>
    7f72:	e9 85       	ldd	r30, Y+9	; 0x09
    7f74:	fa 85       	ldd	r31, Y+10	; 0x0a
    7f76:	80 81       	ld	r24, Z
    7f78:	91 81       	ldd	r25, Z+1	; 0x01
    7f7a:	82 30       	cpi	r24, 0x02	; 2
    7f7c:	91 05       	cpc	r25, r1
    7f7e:	09 f0       	breq	.+2      	; 0x7f82 <vdmMod+0x15e>
    7f80:	51 c0       	rjmp	.+162    	; 0x8024 <vdmMod+0x200>
    7f82:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f84:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f86:	80 81       	ld	r24, Z
    7f88:	91 81       	ldd	r25, Z+1	; 0x01
    7f8a:	00 97       	sbiw	r24, 0x00	; 0
    7f8c:	71 f0       	breq	.+28     	; 0x7faa <vdmMod+0x186>
    7f8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f90:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f92:	80 81       	ld	r24, Z
    7f94:	91 81       	ldd	r25, Z+1	; 0x01
    7f96:	81 30       	cpi	r24, 0x01	; 1
    7f98:	91 05       	cpc	r25, r1
    7f9a:	39 f0       	breq	.+14     	; 0x7faa <vdmMod+0x186>
    7f9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7fa0:	80 81       	ld	r24, Z
    7fa2:	91 81       	ldd	r25, Z+1	; 0x01
    7fa4:	82 30       	cpi	r24, 0x02	; 2
    7fa6:	91 05       	cpc	r25, r1
    7fa8:	e9 f5       	brne	.+122    	; 0x8024 <vdmMod+0x200>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(lv-rv*(long) floor(lv/rv)));
    7faa:	6d 81       	ldd	r22, Y+5	; 0x05
    7fac:	7e 81       	ldd	r23, Y+6	; 0x06
    7fae:	8f 81       	ldd	r24, Y+7	; 0x07
    7fb0:	98 85       	ldd	r25, Y+8	; 0x08
    7fb2:	29 81       	ldd	r18, Y+1	; 0x01
    7fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    7fb6:	4b 81       	ldd	r20, Y+3	; 0x03
    7fb8:	5c 81       	ldd	r21, Y+4	; 0x04
    7fba:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    7fbe:	dc 01       	movw	r26, r24
    7fc0:	cb 01       	movw	r24, r22
    7fc2:	bc 01       	movw	r22, r24
    7fc4:	cd 01       	movw	r24, r26
    7fc6:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    7fca:	dc 01       	movw	r26, r24
    7fcc:	cb 01       	movw	r24, r22
    7fce:	bc 01       	movw	r22, r24
    7fd0:	cd 01       	movw	r24, r26
    7fd2:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    7fd6:	dc 01       	movw	r26, r24
    7fd8:	cb 01       	movw	r24, r22
    7fda:	bc 01       	movw	r22, r24
    7fdc:	cd 01       	movw	r24, r26
    7fde:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    7fe2:	dc 01       	movw	r26, r24
    7fe4:	cb 01       	movw	r24, r22
    7fe6:	bc 01       	movw	r22, r24
    7fe8:	cd 01       	movw	r24, r26
    7fea:	29 81       	ldd	r18, Y+1	; 0x01
    7fec:	3a 81       	ldd	r19, Y+2	; 0x02
    7fee:	4b 81       	ldd	r20, Y+3	; 0x03
    7ff0:	5c 81       	ldd	r21, Y+4	; 0x04
    7ff2:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    7ff6:	dc 01       	movw	r26, r24
    7ff8:	cb 01       	movw	r24, r22
    7ffa:	9c 01       	movw	r18, r24
    7ffc:	ad 01       	movw	r20, r26
    7ffe:	6d 81       	ldd	r22, Y+5	; 0x05
    8000:	7e 81       	ldd	r23, Y+6	; 0x06
    8002:	8f 81       	ldd	r24, Y+7	; 0x07
    8004:	98 85       	ldd	r25, Y+8	; 0x08
    8006:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    800a:	dc 01       	movw	r26, r24
    800c:	cb 01       	movw	r24, r22
    800e:	bc 01       	movw	r22, r24
    8010:	cd 01       	movw	r24, r26
    8012:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    8016:	dc 01       	movw	r26, r24
    8018:	cb 01       	movw	r24, r22
    801a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    801e:	9e 87       	std	Y+14, r25	; 0x0e
    8020:	8d 87       	std	Y+13, r24	; 0x0d
    8022:	38 c0       	rjmp	.+112    	; 0x8094 <vdmMod+0x270>

	return newReal(lv-rv*(long) floor(lv/rv));
    8024:	6d 81       	ldd	r22, Y+5	; 0x05
    8026:	7e 81       	ldd	r23, Y+6	; 0x06
    8028:	8f 81       	ldd	r24, Y+7	; 0x07
    802a:	98 85       	ldd	r25, Y+8	; 0x08
    802c:	29 81       	ldd	r18, Y+1	; 0x01
    802e:	3a 81       	ldd	r19, Y+2	; 0x02
    8030:	4b 81       	ldd	r20, Y+3	; 0x03
    8032:	5c 81       	ldd	r21, Y+4	; 0x04
    8034:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    8038:	dc 01       	movw	r26, r24
    803a:	cb 01       	movw	r24, r22
    803c:	bc 01       	movw	r22, r24
    803e:	cd 01       	movw	r24, r26
    8040:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    8044:	dc 01       	movw	r26, r24
    8046:	cb 01       	movw	r24, r22
    8048:	bc 01       	movw	r22, r24
    804a:	cd 01       	movw	r24, r26
    804c:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    8050:	dc 01       	movw	r26, r24
    8052:	cb 01       	movw	r24, r22
    8054:	bc 01       	movw	r22, r24
    8056:	cd 01       	movw	r24, r26
    8058:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    805c:	dc 01       	movw	r26, r24
    805e:	cb 01       	movw	r24, r22
    8060:	bc 01       	movw	r22, r24
    8062:	cd 01       	movw	r24, r26
    8064:	29 81       	ldd	r18, Y+1	; 0x01
    8066:	3a 81       	ldd	r19, Y+2	; 0x02
    8068:	4b 81       	ldd	r20, Y+3	; 0x03
    806a:	5c 81       	ldd	r21, Y+4	; 0x04
    806c:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    8070:	dc 01       	movw	r26, r24
    8072:	cb 01       	movw	r24, r22
    8074:	9c 01       	movw	r18, r24
    8076:	ad 01       	movw	r20, r26
    8078:	6d 81       	ldd	r22, Y+5	; 0x05
    807a:	7e 81       	ldd	r23, Y+6	; 0x06
    807c:	8f 81       	ldd	r24, Y+7	; 0x07
    807e:	98 85       	ldd	r25, Y+8	; 0x08
    8080:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    8084:	dc 01       	movw	r26, r24
    8086:	cb 01       	movw	r24, r22
    8088:	bc 01       	movw	r22, r24
    808a:	cd 01       	movw	r24, r26
    808c:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
    8090:	9e 87       	std	Y+14, r25	; 0x0e
    8092:	8d 87       	std	Y+13, r24	; 0x0d
    8094:	8d 85       	ldd	r24, Y+13	; 0x0d
    8096:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    8098:	2e 96       	adiw	r28, 0x0e	; 14
    809a:	0f b6       	in	r0, 0x3f	; 63
    809c:	f8 94       	cli
    809e:	de bf       	out	0x3e, r29	; 62
    80a0:	0f be       	out	0x3f, r0	; 63
    80a2:	cd bf       	out	0x3d, r28	; 61
    80a4:	cf 91       	pop	r28
    80a6:	df 91       	pop	r29
    80a8:	08 95       	ret

000080aa <vdmModGC>:

TVP vdmModGC(TVP a, TVP b, TVP *from)
{
    80aa:	df 93       	push	r29
    80ac:	cf 93       	push	r28
    80ae:	cd b7       	in	r28, 0x3d	; 61
    80b0:	de b7       	in	r29, 0x3e	; 62
    80b2:	60 97       	sbiw	r28, 0x10	; 16
    80b4:	0f b6       	in	r0, 0x3f	; 63
    80b6:	f8 94       	cli
    80b8:	de bf       	out	0x3e, r29	; 62
    80ba:	0f be       	out	0x3f, r0	; 63
    80bc:	cd bf       	out	0x3d, r28	; 61
    80be:	9a 87       	std	Y+10, r25	; 0x0a
    80c0:	89 87       	std	Y+9, r24	; 0x09
    80c2:	7c 87       	std	Y+12, r23	; 0x0c
    80c4:	6b 87       	std	Y+11, r22	; 0x0b
    80c6:	5e 87       	std	Y+14, r21	; 0x0e
    80c8:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    80ca:	e9 85       	ldd	r30, Y+9	; 0x09
    80cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    80ce:	80 81       	ld	r24, Z
    80d0:	91 81       	ldd	r25, Z+1	; 0x01
    80d2:	00 97       	sbiw	r24, 0x00	; 0
    80d4:	f1 f0       	breq	.+60     	; 0x8112 <vdmModGC+0x68>
    80d6:	e9 85       	ldd	r30, Y+9	; 0x09
    80d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    80da:	80 81       	ld	r24, Z
    80dc:	91 81       	ldd	r25, Z+1	; 0x01
    80de:	81 30       	cpi	r24, 0x01	; 1
    80e0:	91 05       	cpc	r25, r1
    80e2:	b9 f0       	breq	.+46     	; 0x8112 <vdmModGC+0x68>
    80e4:	e9 85       	ldd	r30, Y+9	; 0x09
    80e6:	fa 85       	ldd	r31, Y+10	; 0x0a
    80e8:	80 81       	ld	r24, Z
    80ea:	91 81       	ldd	r25, Z+1	; 0x01
    80ec:	82 30       	cpi	r24, 0x02	; 2
    80ee:	91 05       	cpc	r25, r1
    80f0:	81 f0       	breq	.+32     	; 0x8112 <vdmModGC+0x68>
    80f2:	e9 85       	ldd	r30, Y+9	; 0x09
    80f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    80f6:	80 81       	ld	r24, Z
    80f8:	91 81       	ldd	r25, Z+1	; 0x01
    80fa:	84 30       	cpi	r24, 0x04	; 4
    80fc:	91 05       	cpc	r25, r1
    80fe:	49 f0       	breq	.+18     	; 0x8112 <vdmModGC+0x68>
    8100:	e9 85       	ldd	r30, Y+9	; 0x09
    8102:	fa 85       	ldd	r31, Y+10	; 0x0a
    8104:	80 81       	ld	r24, Z
    8106:	91 81       	ldd	r25, Z+1	; 0x01
    8108:	85 30       	cpi	r24, 0x05	; 5
    810a:	91 05       	cpc	r25, r1
    810c:	11 f0       	breq	.+4      	; 0x8112 <vdmModGC+0x68>
    810e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8112:	eb 85       	ldd	r30, Y+11	; 0x0b
    8114:	fc 85       	ldd	r31, Y+12	; 0x0c
    8116:	80 81       	ld	r24, Z
    8118:	91 81       	ldd	r25, Z+1	; 0x01
    811a:	00 97       	sbiw	r24, 0x00	; 0
    811c:	f1 f0       	breq	.+60     	; 0x815a <vdmModGC+0xb0>
    811e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8120:	fc 85       	ldd	r31, Y+12	; 0x0c
    8122:	80 81       	ld	r24, Z
    8124:	91 81       	ldd	r25, Z+1	; 0x01
    8126:	81 30       	cpi	r24, 0x01	; 1
    8128:	91 05       	cpc	r25, r1
    812a:	b9 f0       	breq	.+46     	; 0x815a <vdmModGC+0xb0>
    812c:	eb 85       	ldd	r30, Y+11	; 0x0b
    812e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8130:	80 81       	ld	r24, Z
    8132:	91 81       	ldd	r25, Z+1	; 0x01
    8134:	82 30       	cpi	r24, 0x02	; 2
    8136:	91 05       	cpc	r25, r1
    8138:	81 f0       	breq	.+32     	; 0x815a <vdmModGC+0xb0>
    813a:	eb 85       	ldd	r30, Y+11	; 0x0b
    813c:	fc 85       	ldd	r31, Y+12	; 0x0c
    813e:	80 81       	ld	r24, Z
    8140:	91 81       	ldd	r25, Z+1	; 0x01
    8142:	84 30       	cpi	r24, 0x04	; 4
    8144:	91 05       	cpc	r25, r1
    8146:	49 f0       	breq	.+18     	; 0x815a <vdmModGC+0xb0>
    8148:	eb 85       	ldd	r30, Y+11	; 0x0b
    814a:	fc 85       	ldd	r31, Y+12	; 0x0c
    814c:	80 81       	ld	r24, Z
    814e:	91 81       	ldd	r25, Z+1	; 0x01
    8150:	85 30       	cpi	r24, 0x05	; 5
    8152:	91 05       	cpc	r25, r1
    8154:	11 f0       	breq	.+4      	; 0x815a <vdmModGC+0xb0>
    8156:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L575  */
	ASSERT_CHECK_INT(a);
    815a:	e9 85       	ldd	r30, Y+9	; 0x09
    815c:	fa 85       	ldd	r31, Y+10	; 0x0a
    815e:	80 81       	ld	r24, Z
    8160:	91 81       	ldd	r25, Z+1	; 0x01
    8162:	00 97       	sbiw	r24, 0x00	; 0
    8164:	11 f0       	breq	.+4      	; 0x816a <vdmModGC+0xc0>
    8166:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_INT(b);
    816a:	eb 85       	ldd	r30, Y+11	; 0x0b
    816c:	fc 85       	ldd	r31, Y+12	; 0x0c
    816e:	80 81       	ld	r24, Z
    8170:	91 81       	ldd	r25, Z+1	; 0x01
    8172:	00 97       	sbiw	r24, 0x00	; 0
    8174:	11 f0       	breq	.+4      	; 0x817a <vdmModGC+0xd0>
    8176:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double lv =(int) toDouble(a);
    817a:	89 85       	ldd	r24, Y+9	; 0x09
    817c:	9a 85       	ldd	r25, Y+10	; 0x0a
    817e:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8182:	dc 01       	movw	r26, r24
    8184:	cb 01       	movw	r24, r22
    8186:	bc 01       	movw	r22, r24
    8188:	cd 01       	movw	r24, r26
    818a:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    818e:	dc 01       	movw	r26, r24
    8190:	cb 01       	movw	r24, r22
    8192:	aa 27       	eor	r26, r26
    8194:	97 fd       	sbrc	r25, 7
    8196:	a0 95       	com	r26
    8198:	ba 2f       	mov	r27, r26
    819a:	bc 01       	movw	r22, r24
    819c:	cd 01       	movw	r24, r26
    819e:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    81a2:	dc 01       	movw	r26, r24
    81a4:	cb 01       	movw	r24, r22
    81a6:	8d 83       	std	Y+5, r24	; 0x05
    81a8:	9e 83       	std	Y+6, r25	; 0x06
    81aa:	af 83       	std	Y+7, r26	; 0x07
    81ac:	b8 87       	std	Y+8, r27	; 0x08
	double rv = (int)toDouble(b);
    81ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    81b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    81b2:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    81b6:	dc 01       	movw	r26, r24
    81b8:	cb 01       	movw	r24, r22
    81ba:	bc 01       	movw	r22, r24
    81bc:	cd 01       	movw	r24, r26
    81be:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    81c2:	dc 01       	movw	r26, r24
    81c4:	cb 01       	movw	r24, r22
    81c6:	aa 27       	eor	r26, r26
    81c8:	97 fd       	sbrc	r25, 7
    81ca:	a0 95       	com	r26
    81cc:	ba 2f       	mov	r27, r26
    81ce:	bc 01       	movw	r22, r24
    81d0:	cd 01       	movw	r24, r26
    81d2:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    81d6:	dc 01       	movw	r26, r24
    81d8:	cb 01       	movw	r24, r22
    81da:	89 83       	std	Y+1, r24	; 0x01
    81dc:	9a 83       	std	Y+2, r25	; 0x02
    81de:	ab 83       	std	Y+3, r26	; 0x03
    81e0:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    81e2:	e9 85       	ldd	r30, Y+9	; 0x09
    81e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    81e6:	80 81       	ld	r24, Z
    81e8:	91 81       	ldd	r25, Z+1	; 0x01
    81ea:	00 97       	sbiw	r24, 0x00	; 0
    81ec:	79 f0       	breq	.+30     	; 0x820c <vdmModGC+0x162>
    81ee:	e9 85       	ldd	r30, Y+9	; 0x09
    81f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    81f2:	80 81       	ld	r24, Z
    81f4:	91 81       	ldd	r25, Z+1	; 0x01
    81f6:	81 30       	cpi	r24, 0x01	; 1
    81f8:	91 05       	cpc	r25, r1
    81fa:	41 f0       	breq	.+16     	; 0x820c <vdmModGC+0x162>
    81fc:	e9 85       	ldd	r30, Y+9	; 0x09
    81fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    8200:	80 81       	ld	r24, Z
    8202:	91 81       	ldd	r25, Z+1	; 0x01
    8204:	82 30       	cpi	r24, 0x02	; 2
    8206:	91 05       	cpc	r25, r1
    8208:	09 f0       	breq	.+2      	; 0x820c <vdmModGC+0x162>
    820a:	55 c0       	rjmp	.+170    	; 0x82b6 <vdmModGC+0x20c>
    820c:	eb 85       	ldd	r30, Y+11	; 0x0b
    820e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8210:	80 81       	ld	r24, Z
    8212:	91 81       	ldd	r25, Z+1	; 0x01
    8214:	00 97       	sbiw	r24, 0x00	; 0
    8216:	79 f0       	breq	.+30     	; 0x8236 <vdmModGC+0x18c>
    8218:	eb 85       	ldd	r30, Y+11	; 0x0b
    821a:	fc 85       	ldd	r31, Y+12	; 0x0c
    821c:	80 81       	ld	r24, Z
    821e:	91 81       	ldd	r25, Z+1	; 0x01
    8220:	81 30       	cpi	r24, 0x01	; 1
    8222:	91 05       	cpc	r25, r1
    8224:	41 f0       	breq	.+16     	; 0x8236 <vdmModGC+0x18c>
    8226:	eb 85       	ldd	r30, Y+11	; 0x0b
    8228:	fc 85       	ldd	r31, Y+12	; 0x0c
    822a:	80 81       	ld	r24, Z
    822c:	91 81       	ldd	r25, Z+1	; 0x01
    822e:	82 30       	cpi	r24, 0x02	; 2
    8230:	91 05       	cpc	r25, r1
    8232:	09 f0       	breq	.+2      	; 0x8236 <vdmModGC+0x18c>
    8234:	40 c0       	rjmp	.+128    	; 0x82b6 <vdmModGC+0x20c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(lv-rv*(long) floor(lv/rv)), from);
    8236:	6d 81       	ldd	r22, Y+5	; 0x05
    8238:	7e 81       	ldd	r23, Y+6	; 0x06
    823a:	8f 81       	ldd	r24, Y+7	; 0x07
    823c:	98 85       	ldd	r25, Y+8	; 0x08
    823e:	29 81       	ldd	r18, Y+1	; 0x01
    8240:	3a 81       	ldd	r19, Y+2	; 0x02
    8242:	4b 81       	ldd	r20, Y+3	; 0x03
    8244:	5c 81       	ldd	r21, Y+4	; 0x04
    8246:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    824a:	dc 01       	movw	r26, r24
    824c:	cb 01       	movw	r24, r22
    824e:	bc 01       	movw	r22, r24
    8250:	cd 01       	movw	r24, r26
    8252:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    8256:	dc 01       	movw	r26, r24
    8258:	cb 01       	movw	r24, r22
    825a:	bc 01       	movw	r22, r24
    825c:	cd 01       	movw	r24, r26
    825e:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    8262:	dc 01       	movw	r26, r24
    8264:	cb 01       	movw	r24, r22
    8266:	bc 01       	movw	r22, r24
    8268:	cd 01       	movw	r24, r26
    826a:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    826e:	dc 01       	movw	r26, r24
    8270:	cb 01       	movw	r24, r22
    8272:	bc 01       	movw	r22, r24
    8274:	cd 01       	movw	r24, r26
    8276:	29 81       	ldd	r18, Y+1	; 0x01
    8278:	3a 81       	ldd	r19, Y+2	; 0x02
    827a:	4b 81       	ldd	r20, Y+3	; 0x03
    827c:	5c 81       	ldd	r21, Y+4	; 0x04
    827e:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    8282:	dc 01       	movw	r26, r24
    8284:	cb 01       	movw	r24, r22
    8286:	9c 01       	movw	r18, r24
    8288:	ad 01       	movw	r20, r26
    828a:	6d 81       	ldd	r22, Y+5	; 0x05
    828c:	7e 81       	ldd	r23, Y+6	; 0x06
    828e:	8f 81       	ldd	r24, Y+7	; 0x07
    8290:	98 85       	ldd	r25, Y+8	; 0x08
    8292:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    8296:	dc 01       	movw	r26, r24
    8298:	cb 01       	movw	r24, r22
    829a:	bc 01       	movw	r22, r24
    829c:	cd 01       	movw	r24, r26
    829e:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    82a2:	dc 01       	movw	r26, r24
    82a4:	cb 01       	movw	r24, r22
    82a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    82a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    82aa:	b9 01       	movw	r22, r18
    82ac:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
    82b0:	98 8b       	std	Y+16, r25	; 0x10
    82b2:	8f 87       	std	Y+15, r24	; 0x0f
    82b4:	3b c0       	rjmp	.+118    	; 0x832c <vdmModGC+0x282>

		return newRealGC(lv-rv*(long) floor(lv/rv), from);
    82b6:	6d 81       	ldd	r22, Y+5	; 0x05
    82b8:	7e 81       	ldd	r23, Y+6	; 0x06
    82ba:	8f 81       	ldd	r24, Y+7	; 0x07
    82bc:	98 85       	ldd	r25, Y+8	; 0x08
    82be:	29 81       	ldd	r18, Y+1	; 0x01
    82c0:	3a 81       	ldd	r19, Y+2	; 0x02
    82c2:	4b 81       	ldd	r20, Y+3	; 0x03
    82c4:	5c 81       	ldd	r21, Y+4	; 0x04
    82c6:	0e 94 56 6f 	call	0xdeac	; 0xdeac <__divsf3>
    82ca:	dc 01       	movw	r26, r24
    82cc:	cb 01       	movw	r24, r22
    82ce:	bc 01       	movw	r22, r24
    82d0:	cd 01       	movw	r24, r26
    82d2:	0e 94 2c 70 	call	0xe058	; 0xe058 <floor>
    82d6:	dc 01       	movw	r26, r24
    82d8:	cb 01       	movw	r24, r22
    82da:	bc 01       	movw	r22, r24
    82dc:	cd 01       	movw	r24, r26
    82de:	0e 94 be 6f 	call	0xdf7c	; 0xdf7c <__fixsfsi>
    82e2:	dc 01       	movw	r26, r24
    82e4:	cb 01       	movw	r24, r22
    82e6:	bc 01       	movw	r22, r24
    82e8:	cd 01       	movw	r24, r26
    82ea:	0e 94 f1 6f 	call	0xdfe2	; 0xdfe2 <__floatsisf>
    82ee:	dc 01       	movw	r26, r24
    82f0:	cb 01       	movw	r24, r22
    82f2:	bc 01       	movw	r22, r24
    82f4:	cd 01       	movw	r24, r26
    82f6:	29 81       	ldd	r18, Y+1	; 0x01
    82f8:	3a 81       	ldd	r19, Y+2	; 0x02
    82fa:	4b 81       	ldd	r20, Y+3	; 0x03
    82fc:	5c 81       	ldd	r21, Y+4	; 0x04
    82fe:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <__mulsf3>
    8302:	dc 01       	movw	r26, r24
    8304:	cb 01       	movw	r24, r22
    8306:	9c 01       	movw	r18, r24
    8308:	ad 01       	movw	r20, r26
    830a:	6d 81       	ldd	r22, Y+5	; 0x05
    830c:	7e 81       	ldd	r23, Y+6	; 0x06
    830e:	8f 81       	ldd	r24, Y+7	; 0x07
    8310:	98 85       	ldd	r25, Y+8	; 0x08
    8312:	0e 94 ed 6e 	call	0xddda	; 0xddda <__subsf3>
    8316:	dc 01       	movw	r26, r24
    8318:	cb 01       	movw	r24, r22
    831a:	2d 85       	ldd	r18, Y+13	; 0x0d
    831c:	3e 85       	ldd	r19, Y+14	; 0x0e
    831e:	bc 01       	movw	r22, r24
    8320:	cd 01       	movw	r24, r26
    8322:	a9 01       	movw	r20, r18
    8324:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
    8328:	98 8b       	std	Y+16, r25	; 0x10
    832a:	8f 87       	std	Y+15, r24	; 0x0f
    832c:	8f 85       	ldd	r24, Y+15	; 0x0f
    832e:	98 89       	ldd	r25, Y+16	; 0x10
}
    8330:	60 96       	adiw	r28, 0x10	; 16
    8332:	0f b6       	in	r0, 0x3f	; 63
    8334:	f8 94       	cli
    8336:	de bf       	out	0x3e, r29	; 62
    8338:	0f be       	out	0x3f, r0	; 63
    833a:	cd bf       	out	0x3d, r28	; 61
    833c:	cf 91       	pop	r28
    833e:	df 91       	pop	r29
    8340:	08 95       	ret

00008342 <vdmPower>:

TVP vdmPower(TVP a,TVP b)
{
    8342:	df 93       	push	r29
    8344:	cf 93       	push	r28
    8346:	cd b7       	in	r28, 0x3d	; 61
    8348:	de b7       	in	r29, 0x3e	; 62
    834a:	2c 97       	sbiw	r28, 0x0c	; 12
    834c:	0f b6       	in	r0, 0x3f	; 63
    834e:	f8 94       	cli
    8350:	de bf       	out	0x3e, r29	; 62
    8352:	0f be       	out	0x3f, r0	; 63
    8354:	cd bf       	out	0x3d, r28	; 61
    8356:	9a 87       	std	Y+10, r25	; 0x0a
    8358:	89 87       	std	Y+9, r24	; 0x09
    835a:	7c 87       	std	Y+12, r23	; 0x0c
    835c:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    835e:	e9 85       	ldd	r30, Y+9	; 0x09
    8360:	fa 85       	ldd	r31, Y+10	; 0x0a
    8362:	80 81       	ld	r24, Z
    8364:	91 81       	ldd	r25, Z+1	; 0x01
    8366:	00 97       	sbiw	r24, 0x00	; 0
    8368:	f1 f0       	breq	.+60     	; 0x83a6 <vdmPower+0x64>
    836a:	e9 85       	ldd	r30, Y+9	; 0x09
    836c:	fa 85       	ldd	r31, Y+10	; 0x0a
    836e:	80 81       	ld	r24, Z
    8370:	91 81       	ldd	r25, Z+1	; 0x01
    8372:	81 30       	cpi	r24, 0x01	; 1
    8374:	91 05       	cpc	r25, r1
    8376:	b9 f0       	breq	.+46     	; 0x83a6 <vdmPower+0x64>
    8378:	e9 85       	ldd	r30, Y+9	; 0x09
    837a:	fa 85       	ldd	r31, Y+10	; 0x0a
    837c:	80 81       	ld	r24, Z
    837e:	91 81       	ldd	r25, Z+1	; 0x01
    8380:	82 30       	cpi	r24, 0x02	; 2
    8382:	91 05       	cpc	r25, r1
    8384:	81 f0       	breq	.+32     	; 0x83a6 <vdmPower+0x64>
    8386:	e9 85       	ldd	r30, Y+9	; 0x09
    8388:	fa 85       	ldd	r31, Y+10	; 0x0a
    838a:	80 81       	ld	r24, Z
    838c:	91 81       	ldd	r25, Z+1	; 0x01
    838e:	84 30       	cpi	r24, 0x04	; 4
    8390:	91 05       	cpc	r25, r1
    8392:	49 f0       	breq	.+18     	; 0x83a6 <vdmPower+0x64>
    8394:	e9 85       	ldd	r30, Y+9	; 0x09
    8396:	fa 85       	ldd	r31, Y+10	; 0x0a
    8398:	80 81       	ld	r24, Z
    839a:	91 81       	ldd	r25, Z+1	; 0x01
    839c:	85 30       	cpi	r24, 0x05	; 5
    839e:	91 05       	cpc	r25, r1
    83a0:	11 f0       	breq	.+4      	; 0x83a6 <vdmPower+0x64>
    83a2:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    83a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    83a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    83aa:	80 81       	ld	r24, Z
    83ac:	91 81       	ldd	r25, Z+1	; 0x01
    83ae:	00 97       	sbiw	r24, 0x00	; 0
    83b0:	f1 f0       	breq	.+60     	; 0x83ee <vdmPower+0xac>
    83b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    83b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    83b6:	80 81       	ld	r24, Z
    83b8:	91 81       	ldd	r25, Z+1	; 0x01
    83ba:	81 30       	cpi	r24, 0x01	; 1
    83bc:	91 05       	cpc	r25, r1
    83be:	b9 f0       	breq	.+46     	; 0x83ee <vdmPower+0xac>
    83c0:	eb 85       	ldd	r30, Y+11	; 0x0b
    83c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    83c4:	80 81       	ld	r24, Z
    83c6:	91 81       	ldd	r25, Z+1	; 0x01
    83c8:	82 30       	cpi	r24, 0x02	; 2
    83ca:	91 05       	cpc	r25, r1
    83cc:	81 f0       	breq	.+32     	; 0x83ee <vdmPower+0xac>
    83ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    83d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    83d2:	80 81       	ld	r24, Z
    83d4:	91 81       	ldd	r25, Z+1	; 0x01
    83d6:	84 30       	cpi	r24, 0x04	; 4
    83d8:	91 05       	cpc	r25, r1
    83da:	49 f0       	breq	.+18     	; 0x83ee <vdmPower+0xac>
    83dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    83de:	fc 85       	ldd	r31, Y+12	; 0x0c
    83e0:	80 81       	ld	r24, Z
    83e2:	91 81       	ldd	r25, Z+1	; 0x01
    83e4:	85 30       	cpi	r24, 0x05	; 5
    83e6:	91 05       	cpc	r25, r1
    83e8:	11 f0       	breq	.+4      	; 0x83ee <vdmPower+0xac>
    83ea:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    83ee:	89 85       	ldd	r24, Y+9	; 0x09
    83f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    83f2:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    83f6:	dc 01       	movw	r26, r24
    83f8:	cb 01       	movw	r24, r22
    83fa:	8d 83       	std	Y+5, r24	; 0x05
    83fc:	9e 83       	std	Y+6, r25	; 0x06
    83fe:	af 83       	std	Y+7, r26	; 0x07
    8400:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8402:	8b 85       	ldd	r24, Y+11	; 0x0b
    8404:	9c 85       	ldd	r25, Y+12	; 0x0c
    8406:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    840a:	dc 01       	movw	r26, r24
    840c:	cb 01       	movw	r24, r22
    840e:	89 83       	std	Y+1, r24	; 0x01
    8410:	9a 83       	std	Y+2, r25	; 0x02
    8412:	ab 83       	std	Y+3, r26	; 0x03
    8414:	bc 83       	std	Y+4, r27	; 0x04

	return newReal(pow(av,bv));
    8416:	8d 81       	ldd	r24, Y+5	; 0x05
    8418:	9e 81       	ldd	r25, Y+6	; 0x06
    841a:	af 81       	ldd	r26, Y+7	; 0x07
    841c:	b8 85       	ldd	r27, Y+8	; 0x08
    841e:	29 81       	ldd	r18, Y+1	; 0x01
    8420:	3a 81       	ldd	r19, Y+2	; 0x02
    8422:	4b 81       	ldd	r20, Y+3	; 0x03
    8424:	5c 81       	ldd	r21, Y+4	; 0x04
    8426:	bc 01       	movw	r22, r24
    8428:	cd 01       	movw	r24, r26
    842a:	0e 94 5b 71 	call	0xe2b6	; 0xe2b6 <pow>
    842e:	dc 01       	movw	r26, r24
    8430:	cb 01       	movw	r24, r22
    8432:	bc 01       	movw	r22, r24
    8434:	cd 01       	movw	r24, r26
    8436:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <newReal>
}
    843a:	2c 96       	adiw	r28, 0x0c	; 12
    843c:	0f b6       	in	r0, 0x3f	; 63
    843e:	f8 94       	cli
    8440:	de bf       	out	0x3e, r29	; 62
    8442:	0f be       	out	0x3f, r0	; 63
    8444:	cd bf       	out	0x3d, r28	; 61
    8446:	cf 91       	pop	r28
    8448:	df 91       	pop	r29
    844a:	08 95       	ret

0000844c <vdmPowerGC>:

TVP vdmPowerGC(TVP a, TVP b, TVP *from)
{
    844c:	df 93       	push	r29
    844e:	cf 93       	push	r28
    8450:	cd b7       	in	r28, 0x3d	; 61
    8452:	de b7       	in	r29, 0x3e	; 62
    8454:	2e 97       	sbiw	r28, 0x0e	; 14
    8456:	0f b6       	in	r0, 0x3f	; 63
    8458:	f8 94       	cli
    845a:	de bf       	out	0x3e, r29	; 62
    845c:	0f be       	out	0x3f, r0	; 63
    845e:	cd bf       	out	0x3d, r28	; 61
    8460:	9a 87       	std	Y+10, r25	; 0x0a
    8462:	89 87       	std	Y+9, r24	; 0x09
    8464:	7c 87       	std	Y+12, r23	; 0x0c
    8466:	6b 87       	std	Y+11, r22	; 0x0b
    8468:	5e 87       	std	Y+14, r21	; 0x0e
    846a:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    846c:	e9 85       	ldd	r30, Y+9	; 0x09
    846e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8470:	80 81       	ld	r24, Z
    8472:	91 81       	ldd	r25, Z+1	; 0x01
    8474:	00 97       	sbiw	r24, 0x00	; 0
    8476:	f1 f0       	breq	.+60     	; 0x84b4 <vdmPowerGC+0x68>
    8478:	e9 85       	ldd	r30, Y+9	; 0x09
    847a:	fa 85       	ldd	r31, Y+10	; 0x0a
    847c:	80 81       	ld	r24, Z
    847e:	91 81       	ldd	r25, Z+1	; 0x01
    8480:	81 30       	cpi	r24, 0x01	; 1
    8482:	91 05       	cpc	r25, r1
    8484:	b9 f0       	breq	.+46     	; 0x84b4 <vdmPowerGC+0x68>
    8486:	e9 85       	ldd	r30, Y+9	; 0x09
    8488:	fa 85       	ldd	r31, Y+10	; 0x0a
    848a:	80 81       	ld	r24, Z
    848c:	91 81       	ldd	r25, Z+1	; 0x01
    848e:	82 30       	cpi	r24, 0x02	; 2
    8490:	91 05       	cpc	r25, r1
    8492:	81 f0       	breq	.+32     	; 0x84b4 <vdmPowerGC+0x68>
    8494:	e9 85       	ldd	r30, Y+9	; 0x09
    8496:	fa 85       	ldd	r31, Y+10	; 0x0a
    8498:	80 81       	ld	r24, Z
    849a:	91 81       	ldd	r25, Z+1	; 0x01
    849c:	84 30       	cpi	r24, 0x04	; 4
    849e:	91 05       	cpc	r25, r1
    84a0:	49 f0       	breq	.+18     	; 0x84b4 <vdmPowerGC+0x68>
    84a2:	e9 85       	ldd	r30, Y+9	; 0x09
    84a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    84a6:	80 81       	ld	r24, Z
    84a8:	91 81       	ldd	r25, Z+1	; 0x01
    84aa:	85 30       	cpi	r24, 0x05	; 5
    84ac:	91 05       	cpc	r25, r1
    84ae:	11 f0       	breq	.+4      	; 0x84b4 <vdmPowerGC+0x68>
    84b0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    84b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    84b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    84b8:	80 81       	ld	r24, Z
    84ba:	91 81       	ldd	r25, Z+1	; 0x01
    84bc:	00 97       	sbiw	r24, 0x00	; 0
    84be:	f1 f0       	breq	.+60     	; 0x84fc <vdmPowerGC+0xb0>
    84c0:	eb 85       	ldd	r30, Y+11	; 0x0b
    84c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    84c4:	80 81       	ld	r24, Z
    84c6:	91 81       	ldd	r25, Z+1	; 0x01
    84c8:	81 30       	cpi	r24, 0x01	; 1
    84ca:	91 05       	cpc	r25, r1
    84cc:	b9 f0       	breq	.+46     	; 0x84fc <vdmPowerGC+0xb0>
    84ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    84d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    84d2:	80 81       	ld	r24, Z
    84d4:	91 81       	ldd	r25, Z+1	; 0x01
    84d6:	82 30       	cpi	r24, 0x02	; 2
    84d8:	91 05       	cpc	r25, r1
    84da:	81 f0       	breq	.+32     	; 0x84fc <vdmPowerGC+0xb0>
    84dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    84de:	fc 85       	ldd	r31, Y+12	; 0x0c
    84e0:	80 81       	ld	r24, Z
    84e2:	91 81       	ldd	r25, Z+1	; 0x01
    84e4:	84 30       	cpi	r24, 0x04	; 4
    84e6:	91 05       	cpc	r25, r1
    84e8:	49 f0       	breq	.+18     	; 0x84fc <vdmPowerGC+0xb0>
    84ea:	eb 85       	ldd	r30, Y+11	; 0x0b
    84ec:	fc 85       	ldd	r31, Y+12	; 0x0c
    84ee:	80 81       	ld	r24, Z
    84f0:	91 81       	ldd	r25, Z+1	; 0x01
    84f2:	85 30       	cpi	r24, 0x05	; 5
    84f4:	91 05       	cpc	r25, r1
    84f6:	11 f0       	breq	.+4      	; 0x84fc <vdmPowerGC+0xb0>
    84f8:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    84fc:	89 85       	ldd	r24, Y+9	; 0x09
    84fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    8500:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8504:	dc 01       	movw	r26, r24
    8506:	cb 01       	movw	r24, r22
    8508:	8d 83       	std	Y+5, r24	; 0x05
    850a:	9e 83       	std	Y+6, r25	; 0x06
    850c:	af 83       	std	Y+7, r26	; 0x07
    850e:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8510:	8b 85       	ldd	r24, Y+11	; 0x0b
    8512:	9c 85       	ldd	r25, Y+12	; 0x0c
    8514:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8518:	dc 01       	movw	r26, r24
    851a:	cb 01       	movw	r24, r22
    851c:	89 83       	std	Y+1, r24	; 0x01
    851e:	9a 83       	std	Y+2, r25	; 0x02
    8520:	ab 83       	std	Y+3, r26	; 0x03
    8522:	bc 83       	std	Y+4, r27	; 0x04

	return newRealGC(pow(av,bv), from);
    8524:	8d 81       	ldd	r24, Y+5	; 0x05
    8526:	9e 81       	ldd	r25, Y+6	; 0x06
    8528:	af 81       	ldd	r26, Y+7	; 0x07
    852a:	b8 85       	ldd	r27, Y+8	; 0x08
    852c:	29 81       	ldd	r18, Y+1	; 0x01
    852e:	3a 81       	ldd	r19, Y+2	; 0x02
    8530:	4b 81       	ldd	r20, Y+3	; 0x03
    8532:	5c 81       	ldd	r21, Y+4	; 0x04
    8534:	bc 01       	movw	r22, r24
    8536:	cd 01       	movw	r24, r26
    8538:	0e 94 5b 71 	call	0xe2b6	; 0xe2b6 <pow>
    853c:	dc 01       	movw	r26, r24
    853e:	cb 01       	movw	r24, r22
    8540:	2d 85       	ldd	r18, Y+13	; 0x0d
    8542:	3e 85       	ldd	r19, Y+14	; 0x0e
    8544:	bc 01       	movw	r22, r24
    8546:	cd 01       	movw	r24, r26
    8548:	a9 01       	movw	r20, r18
    854a:	0e 94 38 4b 	call	0x9670	; 0x9670 <newRealGC>
}
    854e:	2e 96       	adiw	r28, 0x0e	; 14
    8550:	0f b6       	in	r0, 0x3f	; 63
    8552:	f8 94       	cli
    8554:	de bf       	out	0x3e, r29	; 62
    8556:	0f be       	out	0x3f, r0	; 63
    8558:	cd bf       	out	0x3d, r28	; 61
    855a:	cf 91       	pop	r28
    855c:	df 91       	pop	r29
    855e:	08 95       	ret

00008560 <vdmNumericEqual>:

TVP vdmNumericEqual(TVP a,TVP b)
{
    8560:	df 93       	push	r29
    8562:	cf 93       	push	r28
    8564:	cd b7       	in	r28, 0x3d	; 61
    8566:	de b7       	in	r29, 0x3e	; 62
    8568:	2d 97       	sbiw	r28, 0x0d	; 13
    856a:	0f b6       	in	r0, 0x3f	; 63
    856c:	f8 94       	cli
    856e:	de bf       	out	0x3e, r29	; 62
    8570:	0f be       	out	0x3f, r0	; 63
    8572:	cd bf       	out	0x3d, r28	; 61
    8574:	9a 87       	std	Y+10, r25	; 0x0a
    8576:	89 87       	std	Y+9, r24	; 0x09
    8578:	7c 87       	std	Y+12, r23	; 0x0c
    857a:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    857c:	e9 85       	ldd	r30, Y+9	; 0x09
    857e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8580:	80 81       	ld	r24, Z
    8582:	91 81       	ldd	r25, Z+1	; 0x01
    8584:	00 97       	sbiw	r24, 0x00	; 0
    8586:	f1 f0       	breq	.+60     	; 0x85c4 <vdmNumericEqual+0x64>
    8588:	e9 85       	ldd	r30, Y+9	; 0x09
    858a:	fa 85       	ldd	r31, Y+10	; 0x0a
    858c:	80 81       	ld	r24, Z
    858e:	91 81       	ldd	r25, Z+1	; 0x01
    8590:	81 30       	cpi	r24, 0x01	; 1
    8592:	91 05       	cpc	r25, r1
    8594:	b9 f0       	breq	.+46     	; 0x85c4 <vdmNumericEqual+0x64>
    8596:	e9 85       	ldd	r30, Y+9	; 0x09
    8598:	fa 85       	ldd	r31, Y+10	; 0x0a
    859a:	80 81       	ld	r24, Z
    859c:	91 81       	ldd	r25, Z+1	; 0x01
    859e:	82 30       	cpi	r24, 0x02	; 2
    85a0:	91 05       	cpc	r25, r1
    85a2:	81 f0       	breq	.+32     	; 0x85c4 <vdmNumericEqual+0x64>
    85a4:	e9 85       	ldd	r30, Y+9	; 0x09
    85a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    85a8:	80 81       	ld	r24, Z
    85aa:	91 81       	ldd	r25, Z+1	; 0x01
    85ac:	84 30       	cpi	r24, 0x04	; 4
    85ae:	91 05       	cpc	r25, r1
    85b0:	49 f0       	breq	.+18     	; 0x85c4 <vdmNumericEqual+0x64>
    85b2:	e9 85       	ldd	r30, Y+9	; 0x09
    85b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    85b6:	80 81       	ld	r24, Z
    85b8:	91 81       	ldd	r25, Z+1	; 0x01
    85ba:	85 30       	cpi	r24, 0x05	; 5
    85bc:	91 05       	cpc	r25, r1
    85be:	11 f0       	breq	.+4      	; 0x85c4 <vdmNumericEqual+0x64>
    85c0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    85c4:	eb 85       	ldd	r30, Y+11	; 0x0b
    85c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    85c8:	80 81       	ld	r24, Z
    85ca:	91 81       	ldd	r25, Z+1	; 0x01
    85cc:	00 97       	sbiw	r24, 0x00	; 0
    85ce:	f1 f0       	breq	.+60     	; 0x860c <vdmNumericEqual+0xac>
    85d0:	eb 85       	ldd	r30, Y+11	; 0x0b
    85d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    85d4:	80 81       	ld	r24, Z
    85d6:	91 81       	ldd	r25, Z+1	; 0x01
    85d8:	81 30       	cpi	r24, 0x01	; 1
    85da:	91 05       	cpc	r25, r1
    85dc:	b9 f0       	breq	.+46     	; 0x860c <vdmNumericEqual+0xac>
    85de:	eb 85       	ldd	r30, Y+11	; 0x0b
    85e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    85e2:	80 81       	ld	r24, Z
    85e4:	91 81       	ldd	r25, Z+1	; 0x01
    85e6:	82 30       	cpi	r24, 0x02	; 2
    85e8:	91 05       	cpc	r25, r1
    85ea:	81 f0       	breq	.+32     	; 0x860c <vdmNumericEqual+0xac>
    85ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    85ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    85f0:	80 81       	ld	r24, Z
    85f2:	91 81       	ldd	r25, Z+1	; 0x01
    85f4:	84 30       	cpi	r24, 0x04	; 4
    85f6:	91 05       	cpc	r25, r1
    85f8:	49 f0       	breq	.+18     	; 0x860c <vdmNumericEqual+0xac>
    85fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    85fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    85fe:	80 81       	ld	r24, Z
    8600:	91 81       	ldd	r25, Z+1	; 0x01
    8602:	85 30       	cpi	r24, 0x05	; 5
    8604:	91 05       	cpc	r25, r1
    8606:	11 f0       	breq	.+4      	; 0x860c <vdmNumericEqual+0xac>
    8608:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    860c:	89 85       	ldd	r24, Y+9	; 0x09
    860e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8610:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8614:	dc 01       	movw	r26, r24
    8616:	cb 01       	movw	r24, r22
    8618:	8d 83       	std	Y+5, r24	; 0x05
    861a:	9e 83       	std	Y+6, r25	; 0x06
    861c:	af 83       	std	Y+7, r26	; 0x07
    861e:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8620:	8b 85       	ldd	r24, Y+11	; 0x0b
    8622:	9c 85       	ldd	r25, Y+12	; 0x0c
    8624:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8628:	dc 01       	movw	r26, r24
    862a:	cb 01       	movw	r24, r22
    862c:	89 83       	std	Y+1, r24	; 0x01
    862e:	9a 83       	std	Y+2, r25	; 0x02
    8630:	ab 83       	std	Y+3, r26	; 0x03
    8632:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av==bv);
    8634:	1d 86       	std	Y+13, r1	; 0x0d
    8636:	6d 81       	ldd	r22, Y+5	; 0x05
    8638:	7e 81       	ldd	r23, Y+6	; 0x06
    863a:	8f 81       	ldd	r24, Y+7	; 0x07
    863c:	98 85       	ldd	r25, Y+8	; 0x08
    863e:	29 81       	ldd	r18, Y+1	; 0x01
    8640:	3a 81       	ldd	r19, Y+2	; 0x02
    8642:	4b 81       	ldd	r20, Y+3	; 0x03
    8644:	5c 81       	ldd	r21, Y+4	; 0x04
    8646:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    864a:	88 23       	and	r24, r24
    864c:	11 f4       	brne	.+4      	; 0x8652 <vdmNumericEqual+0xf2>
    864e:	81 e0       	ldi	r24, 0x01	; 1
    8650:	8d 87       	std	Y+13, r24	; 0x0d
    8652:	8d 85       	ldd	r24, Y+13	; 0x0d
    8654:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    8658:	2d 96       	adiw	r28, 0x0d	; 13
    865a:	0f b6       	in	r0, 0x3f	; 63
    865c:	f8 94       	cli
    865e:	de bf       	out	0x3e, r29	; 62
    8660:	0f be       	out	0x3f, r0	; 63
    8662:	cd bf       	out	0x3d, r28	; 61
    8664:	cf 91       	pop	r28
    8666:	df 91       	pop	r29
    8668:	08 95       	ret

0000866a <vdmNumericEqualGC>:

TVP vdmNumericEqualGC(TVP a, TVP b, TVP *from)
{
    866a:	df 93       	push	r29
    866c:	cf 93       	push	r28
    866e:	cd b7       	in	r28, 0x3d	; 61
    8670:	de b7       	in	r29, 0x3e	; 62
    8672:	2f 97       	sbiw	r28, 0x0f	; 15
    8674:	0f b6       	in	r0, 0x3f	; 63
    8676:	f8 94       	cli
    8678:	de bf       	out	0x3e, r29	; 62
    867a:	0f be       	out	0x3f, r0	; 63
    867c:	cd bf       	out	0x3d, r28	; 61
    867e:	9a 87       	std	Y+10, r25	; 0x0a
    8680:	89 87       	std	Y+9, r24	; 0x09
    8682:	7c 87       	std	Y+12, r23	; 0x0c
    8684:	6b 87       	std	Y+11, r22	; 0x0b
    8686:	5e 87       	std	Y+14, r21	; 0x0e
    8688:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    868a:	e9 85       	ldd	r30, Y+9	; 0x09
    868c:	fa 85       	ldd	r31, Y+10	; 0x0a
    868e:	80 81       	ld	r24, Z
    8690:	91 81       	ldd	r25, Z+1	; 0x01
    8692:	00 97       	sbiw	r24, 0x00	; 0
    8694:	f1 f0       	breq	.+60     	; 0x86d2 <vdmNumericEqualGC+0x68>
    8696:	e9 85       	ldd	r30, Y+9	; 0x09
    8698:	fa 85       	ldd	r31, Y+10	; 0x0a
    869a:	80 81       	ld	r24, Z
    869c:	91 81       	ldd	r25, Z+1	; 0x01
    869e:	81 30       	cpi	r24, 0x01	; 1
    86a0:	91 05       	cpc	r25, r1
    86a2:	b9 f0       	breq	.+46     	; 0x86d2 <vdmNumericEqualGC+0x68>
    86a4:	e9 85       	ldd	r30, Y+9	; 0x09
    86a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    86a8:	80 81       	ld	r24, Z
    86aa:	91 81       	ldd	r25, Z+1	; 0x01
    86ac:	82 30       	cpi	r24, 0x02	; 2
    86ae:	91 05       	cpc	r25, r1
    86b0:	81 f0       	breq	.+32     	; 0x86d2 <vdmNumericEqualGC+0x68>
    86b2:	e9 85       	ldd	r30, Y+9	; 0x09
    86b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    86b6:	80 81       	ld	r24, Z
    86b8:	91 81       	ldd	r25, Z+1	; 0x01
    86ba:	84 30       	cpi	r24, 0x04	; 4
    86bc:	91 05       	cpc	r25, r1
    86be:	49 f0       	breq	.+18     	; 0x86d2 <vdmNumericEqualGC+0x68>
    86c0:	e9 85       	ldd	r30, Y+9	; 0x09
    86c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    86c4:	80 81       	ld	r24, Z
    86c6:	91 81       	ldd	r25, Z+1	; 0x01
    86c8:	85 30       	cpi	r24, 0x05	; 5
    86ca:	91 05       	cpc	r25, r1
    86cc:	11 f0       	breq	.+4      	; 0x86d2 <vdmNumericEqualGC+0x68>
    86ce:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    86d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    86d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    86d6:	80 81       	ld	r24, Z
    86d8:	91 81       	ldd	r25, Z+1	; 0x01
    86da:	00 97       	sbiw	r24, 0x00	; 0
    86dc:	f1 f0       	breq	.+60     	; 0x871a <vdmNumericEqualGC+0xb0>
    86de:	eb 85       	ldd	r30, Y+11	; 0x0b
    86e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    86e2:	80 81       	ld	r24, Z
    86e4:	91 81       	ldd	r25, Z+1	; 0x01
    86e6:	81 30       	cpi	r24, 0x01	; 1
    86e8:	91 05       	cpc	r25, r1
    86ea:	b9 f0       	breq	.+46     	; 0x871a <vdmNumericEqualGC+0xb0>
    86ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    86ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    86f0:	80 81       	ld	r24, Z
    86f2:	91 81       	ldd	r25, Z+1	; 0x01
    86f4:	82 30       	cpi	r24, 0x02	; 2
    86f6:	91 05       	cpc	r25, r1
    86f8:	81 f0       	breq	.+32     	; 0x871a <vdmNumericEqualGC+0xb0>
    86fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    86fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    86fe:	80 81       	ld	r24, Z
    8700:	91 81       	ldd	r25, Z+1	; 0x01
    8702:	84 30       	cpi	r24, 0x04	; 4
    8704:	91 05       	cpc	r25, r1
    8706:	49 f0       	breq	.+18     	; 0x871a <vdmNumericEqualGC+0xb0>
    8708:	eb 85       	ldd	r30, Y+11	; 0x0b
    870a:	fc 85       	ldd	r31, Y+12	; 0x0c
    870c:	80 81       	ld	r24, Z
    870e:	91 81       	ldd	r25, Z+1	; 0x01
    8710:	85 30       	cpi	r24, 0x05	; 5
    8712:	91 05       	cpc	r25, r1
    8714:	11 f0       	breq	.+4      	; 0x871a <vdmNumericEqualGC+0xb0>
    8716:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    871a:	89 85       	ldd	r24, Y+9	; 0x09
    871c:	9a 85       	ldd	r25, Y+10	; 0x0a
    871e:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8722:	dc 01       	movw	r26, r24
    8724:	cb 01       	movw	r24, r22
    8726:	8d 83       	std	Y+5, r24	; 0x05
    8728:	9e 83       	std	Y+6, r25	; 0x06
    872a:	af 83       	std	Y+7, r26	; 0x07
    872c:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    872e:	8b 85       	ldd	r24, Y+11	; 0x0b
    8730:	9c 85       	ldd	r25, Y+12	; 0x0c
    8732:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8736:	dc 01       	movw	r26, r24
    8738:	cb 01       	movw	r24, r22
    873a:	89 83       	std	Y+1, r24	; 0x01
    873c:	9a 83       	std	Y+2, r25	; 0x02
    873e:	ab 83       	std	Y+3, r26	; 0x03
    8740:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av==bv, from);
    8742:	1f 86       	std	Y+15, r1	; 0x0f
    8744:	6d 81       	ldd	r22, Y+5	; 0x05
    8746:	7e 81       	ldd	r23, Y+6	; 0x06
    8748:	8f 81       	ldd	r24, Y+7	; 0x07
    874a:	98 85       	ldd	r25, Y+8	; 0x08
    874c:	29 81       	ldd	r18, Y+1	; 0x01
    874e:	3a 81       	ldd	r19, Y+2	; 0x02
    8750:	4b 81       	ldd	r20, Y+3	; 0x03
    8752:	5c 81       	ldd	r21, Y+4	; 0x04
    8754:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    8758:	88 23       	and	r24, r24
    875a:	11 f4       	brne	.+4      	; 0x8760 <vdmNumericEqualGC+0xf6>
    875c:	81 e0       	ldi	r24, 0x01	; 1
    875e:	8f 87       	std	Y+15, r24	; 0x0f
    8760:	2d 85       	ldd	r18, Y+13	; 0x0d
    8762:	3e 85       	ldd	r19, Y+14	; 0x0e
    8764:	8f 85       	ldd	r24, Y+15	; 0x0f
    8766:	b9 01       	movw	r22, r18
    8768:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
}
    876c:	2f 96       	adiw	r28, 0x0f	; 15
    876e:	0f b6       	in	r0, 0x3f	; 63
    8770:	f8 94       	cli
    8772:	de bf       	out	0x3e, r29	; 62
    8774:	0f be       	out	0x3f, r0	; 63
    8776:	cd bf       	out	0x3d, r28	; 61
    8778:	cf 91       	pop	r28
    877a:	df 91       	pop	r29
    877c:	08 95       	ret

0000877e <vdmGreaterThan>:

TVP vdmGreaterThan(TVP a,TVP b)
{
    877e:	df 93       	push	r29
    8780:	cf 93       	push	r28
    8782:	cd b7       	in	r28, 0x3d	; 61
    8784:	de b7       	in	r29, 0x3e	; 62
    8786:	2d 97       	sbiw	r28, 0x0d	; 13
    8788:	0f b6       	in	r0, 0x3f	; 63
    878a:	f8 94       	cli
    878c:	de bf       	out	0x3e, r29	; 62
    878e:	0f be       	out	0x3f, r0	; 63
    8790:	cd bf       	out	0x3d, r28	; 61
    8792:	9a 87       	std	Y+10, r25	; 0x0a
    8794:	89 87       	std	Y+9, r24	; 0x09
    8796:	7c 87       	std	Y+12, r23	; 0x0c
    8798:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    879a:	e9 85       	ldd	r30, Y+9	; 0x09
    879c:	fa 85       	ldd	r31, Y+10	; 0x0a
    879e:	80 81       	ld	r24, Z
    87a0:	91 81       	ldd	r25, Z+1	; 0x01
    87a2:	00 97       	sbiw	r24, 0x00	; 0
    87a4:	f1 f0       	breq	.+60     	; 0x87e2 <vdmGreaterThan+0x64>
    87a6:	e9 85       	ldd	r30, Y+9	; 0x09
    87a8:	fa 85       	ldd	r31, Y+10	; 0x0a
    87aa:	80 81       	ld	r24, Z
    87ac:	91 81       	ldd	r25, Z+1	; 0x01
    87ae:	81 30       	cpi	r24, 0x01	; 1
    87b0:	91 05       	cpc	r25, r1
    87b2:	b9 f0       	breq	.+46     	; 0x87e2 <vdmGreaterThan+0x64>
    87b4:	e9 85       	ldd	r30, Y+9	; 0x09
    87b6:	fa 85       	ldd	r31, Y+10	; 0x0a
    87b8:	80 81       	ld	r24, Z
    87ba:	91 81       	ldd	r25, Z+1	; 0x01
    87bc:	82 30       	cpi	r24, 0x02	; 2
    87be:	91 05       	cpc	r25, r1
    87c0:	81 f0       	breq	.+32     	; 0x87e2 <vdmGreaterThan+0x64>
    87c2:	e9 85       	ldd	r30, Y+9	; 0x09
    87c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    87c6:	80 81       	ld	r24, Z
    87c8:	91 81       	ldd	r25, Z+1	; 0x01
    87ca:	84 30       	cpi	r24, 0x04	; 4
    87cc:	91 05       	cpc	r25, r1
    87ce:	49 f0       	breq	.+18     	; 0x87e2 <vdmGreaterThan+0x64>
    87d0:	e9 85       	ldd	r30, Y+9	; 0x09
    87d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    87d4:	80 81       	ld	r24, Z
    87d6:	91 81       	ldd	r25, Z+1	; 0x01
    87d8:	85 30       	cpi	r24, 0x05	; 5
    87da:	91 05       	cpc	r25, r1
    87dc:	11 f0       	breq	.+4      	; 0x87e2 <vdmGreaterThan+0x64>
    87de:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    87e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    87e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    87e6:	80 81       	ld	r24, Z
    87e8:	91 81       	ldd	r25, Z+1	; 0x01
    87ea:	00 97       	sbiw	r24, 0x00	; 0
    87ec:	f1 f0       	breq	.+60     	; 0x882a <vdmGreaterThan+0xac>
    87ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    87f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    87f2:	80 81       	ld	r24, Z
    87f4:	91 81       	ldd	r25, Z+1	; 0x01
    87f6:	81 30       	cpi	r24, 0x01	; 1
    87f8:	91 05       	cpc	r25, r1
    87fa:	b9 f0       	breq	.+46     	; 0x882a <vdmGreaterThan+0xac>
    87fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    87fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    8800:	80 81       	ld	r24, Z
    8802:	91 81       	ldd	r25, Z+1	; 0x01
    8804:	82 30       	cpi	r24, 0x02	; 2
    8806:	91 05       	cpc	r25, r1
    8808:	81 f0       	breq	.+32     	; 0x882a <vdmGreaterThan+0xac>
    880a:	eb 85       	ldd	r30, Y+11	; 0x0b
    880c:	fc 85       	ldd	r31, Y+12	; 0x0c
    880e:	80 81       	ld	r24, Z
    8810:	91 81       	ldd	r25, Z+1	; 0x01
    8812:	84 30       	cpi	r24, 0x04	; 4
    8814:	91 05       	cpc	r25, r1
    8816:	49 f0       	breq	.+18     	; 0x882a <vdmGreaterThan+0xac>
    8818:	eb 85       	ldd	r30, Y+11	; 0x0b
    881a:	fc 85       	ldd	r31, Y+12	; 0x0c
    881c:	80 81       	ld	r24, Z
    881e:	91 81       	ldd	r25, Z+1	; 0x01
    8820:	85 30       	cpi	r24, 0x05	; 5
    8822:	91 05       	cpc	r25, r1
    8824:	11 f0       	breq	.+4      	; 0x882a <vdmGreaterThan+0xac>
    8826:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    882a:	89 85       	ldd	r24, Y+9	; 0x09
    882c:	9a 85       	ldd	r25, Y+10	; 0x0a
    882e:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8832:	dc 01       	movw	r26, r24
    8834:	cb 01       	movw	r24, r22
    8836:	8d 83       	std	Y+5, r24	; 0x05
    8838:	9e 83       	std	Y+6, r25	; 0x06
    883a:	af 83       	std	Y+7, r26	; 0x07
    883c:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    883e:	8b 85       	ldd	r24, Y+11	; 0x0b
    8840:	9c 85       	ldd	r25, Y+12	; 0x0c
    8842:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8846:	dc 01       	movw	r26, r24
    8848:	cb 01       	movw	r24, r22
    884a:	89 83       	std	Y+1, r24	; 0x01
    884c:	9a 83       	std	Y+2, r25	; 0x02
    884e:	ab 83       	std	Y+3, r26	; 0x03
    8850:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av>bv);
    8852:	1d 86       	std	Y+13, r1	; 0x0d
    8854:	6d 81       	ldd	r22, Y+5	; 0x05
    8856:	7e 81       	ldd	r23, Y+6	; 0x06
    8858:	8f 81       	ldd	r24, Y+7	; 0x07
    885a:	98 85       	ldd	r25, Y+8	; 0x08
    885c:	29 81       	ldd	r18, Y+1	; 0x01
    885e:	3a 81       	ldd	r19, Y+2	; 0x02
    8860:	4b 81       	ldd	r20, Y+3	; 0x03
    8862:	5c 81       	ldd	r21, Y+4	; 0x04
    8864:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
    8868:	18 16       	cp	r1, r24
    886a:	14 f4       	brge	.+4      	; 0x8870 <vdmGreaterThan+0xf2>
    886c:	81 e0       	ldi	r24, 0x01	; 1
    886e:	8d 87       	std	Y+13, r24	; 0x0d
    8870:	8d 85       	ldd	r24, Y+13	; 0x0d
    8872:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    8876:	2d 96       	adiw	r28, 0x0d	; 13
    8878:	0f b6       	in	r0, 0x3f	; 63
    887a:	f8 94       	cli
    887c:	de bf       	out	0x3e, r29	; 62
    887e:	0f be       	out	0x3f, r0	; 63
    8880:	cd bf       	out	0x3d, r28	; 61
    8882:	cf 91       	pop	r28
    8884:	df 91       	pop	r29
    8886:	08 95       	ret

00008888 <vdmGreaterThanGC>:

TVP vdmGreaterThanGC(TVP a,TVP b, TVP *from)
{
    8888:	df 93       	push	r29
    888a:	cf 93       	push	r28
    888c:	cd b7       	in	r28, 0x3d	; 61
    888e:	de b7       	in	r29, 0x3e	; 62
    8890:	2f 97       	sbiw	r28, 0x0f	; 15
    8892:	0f b6       	in	r0, 0x3f	; 63
    8894:	f8 94       	cli
    8896:	de bf       	out	0x3e, r29	; 62
    8898:	0f be       	out	0x3f, r0	; 63
    889a:	cd bf       	out	0x3d, r28	; 61
    889c:	9a 87       	std	Y+10, r25	; 0x0a
    889e:	89 87       	std	Y+9, r24	; 0x09
    88a0:	7c 87       	std	Y+12, r23	; 0x0c
    88a2:	6b 87       	std	Y+11, r22	; 0x0b
    88a4:	5e 87       	std	Y+14, r21	; 0x0e
    88a6:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    88a8:	e9 85       	ldd	r30, Y+9	; 0x09
    88aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    88ac:	80 81       	ld	r24, Z
    88ae:	91 81       	ldd	r25, Z+1	; 0x01
    88b0:	00 97       	sbiw	r24, 0x00	; 0
    88b2:	f1 f0       	breq	.+60     	; 0x88f0 <vdmGreaterThanGC+0x68>
    88b4:	e9 85       	ldd	r30, Y+9	; 0x09
    88b6:	fa 85       	ldd	r31, Y+10	; 0x0a
    88b8:	80 81       	ld	r24, Z
    88ba:	91 81       	ldd	r25, Z+1	; 0x01
    88bc:	81 30       	cpi	r24, 0x01	; 1
    88be:	91 05       	cpc	r25, r1
    88c0:	b9 f0       	breq	.+46     	; 0x88f0 <vdmGreaterThanGC+0x68>
    88c2:	e9 85       	ldd	r30, Y+9	; 0x09
    88c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    88c6:	80 81       	ld	r24, Z
    88c8:	91 81       	ldd	r25, Z+1	; 0x01
    88ca:	82 30       	cpi	r24, 0x02	; 2
    88cc:	91 05       	cpc	r25, r1
    88ce:	81 f0       	breq	.+32     	; 0x88f0 <vdmGreaterThanGC+0x68>
    88d0:	e9 85       	ldd	r30, Y+9	; 0x09
    88d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    88d4:	80 81       	ld	r24, Z
    88d6:	91 81       	ldd	r25, Z+1	; 0x01
    88d8:	84 30       	cpi	r24, 0x04	; 4
    88da:	91 05       	cpc	r25, r1
    88dc:	49 f0       	breq	.+18     	; 0x88f0 <vdmGreaterThanGC+0x68>
    88de:	e9 85       	ldd	r30, Y+9	; 0x09
    88e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    88e2:	80 81       	ld	r24, Z
    88e4:	91 81       	ldd	r25, Z+1	; 0x01
    88e6:	85 30       	cpi	r24, 0x05	; 5
    88e8:	91 05       	cpc	r25, r1
    88ea:	11 f0       	breq	.+4      	; 0x88f0 <vdmGreaterThanGC+0x68>
    88ec:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    88f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    88f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    88f4:	80 81       	ld	r24, Z
    88f6:	91 81       	ldd	r25, Z+1	; 0x01
    88f8:	00 97       	sbiw	r24, 0x00	; 0
    88fa:	f1 f0       	breq	.+60     	; 0x8938 <vdmGreaterThanGC+0xb0>
    88fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    88fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    8900:	80 81       	ld	r24, Z
    8902:	91 81       	ldd	r25, Z+1	; 0x01
    8904:	81 30       	cpi	r24, 0x01	; 1
    8906:	91 05       	cpc	r25, r1
    8908:	b9 f0       	breq	.+46     	; 0x8938 <vdmGreaterThanGC+0xb0>
    890a:	eb 85       	ldd	r30, Y+11	; 0x0b
    890c:	fc 85       	ldd	r31, Y+12	; 0x0c
    890e:	80 81       	ld	r24, Z
    8910:	91 81       	ldd	r25, Z+1	; 0x01
    8912:	82 30       	cpi	r24, 0x02	; 2
    8914:	91 05       	cpc	r25, r1
    8916:	81 f0       	breq	.+32     	; 0x8938 <vdmGreaterThanGC+0xb0>
    8918:	eb 85       	ldd	r30, Y+11	; 0x0b
    891a:	fc 85       	ldd	r31, Y+12	; 0x0c
    891c:	80 81       	ld	r24, Z
    891e:	91 81       	ldd	r25, Z+1	; 0x01
    8920:	84 30       	cpi	r24, 0x04	; 4
    8922:	91 05       	cpc	r25, r1
    8924:	49 f0       	breq	.+18     	; 0x8938 <vdmGreaterThanGC+0xb0>
    8926:	eb 85       	ldd	r30, Y+11	; 0x0b
    8928:	fc 85       	ldd	r31, Y+12	; 0x0c
    892a:	80 81       	ld	r24, Z
    892c:	91 81       	ldd	r25, Z+1	; 0x01
    892e:	85 30       	cpi	r24, 0x05	; 5
    8930:	91 05       	cpc	r25, r1
    8932:	11 f0       	breq	.+4      	; 0x8938 <vdmGreaterThanGC+0xb0>
    8934:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    8938:	89 85       	ldd	r24, Y+9	; 0x09
    893a:	9a 85       	ldd	r25, Y+10	; 0x0a
    893c:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8940:	dc 01       	movw	r26, r24
    8942:	cb 01       	movw	r24, r22
    8944:	8d 83       	std	Y+5, r24	; 0x05
    8946:	9e 83       	std	Y+6, r25	; 0x06
    8948:	af 83       	std	Y+7, r26	; 0x07
    894a:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    894c:	8b 85       	ldd	r24, Y+11	; 0x0b
    894e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8950:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8954:	dc 01       	movw	r26, r24
    8956:	cb 01       	movw	r24, r22
    8958:	89 83       	std	Y+1, r24	; 0x01
    895a:	9a 83       	std	Y+2, r25	; 0x02
    895c:	ab 83       	std	Y+3, r26	; 0x03
    895e:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av>bv, from);
    8960:	1f 86       	std	Y+15, r1	; 0x0f
    8962:	6d 81       	ldd	r22, Y+5	; 0x05
    8964:	7e 81       	ldd	r23, Y+6	; 0x06
    8966:	8f 81       	ldd	r24, Y+7	; 0x07
    8968:	98 85       	ldd	r25, Y+8	; 0x08
    896a:	29 81       	ldd	r18, Y+1	; 0x01
    896c:	3a 81       	ldd	r19, Y+2	; 0x02
    896e:	4b 81       	ldd	r20, Y+3	; 0x03
    8970:	5c 81       	ldd	r21, Y+4	; 0x04
    8972:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
    8976:	18 16       	cp	r1, r24
    8978:	14 f4       	brge	.+4      	; 0x897e <vdmGreaterThanGC+0xf6>
    897a:	81 e0       	ldi	r24, 0x01	; 1
    897c:	8f 87       	std	Y+15, r24	; 0x0f
    897e:	2d 85       	ldd	r18, Y+13	; 0x0d
    8980:	3e 85       	ldd	r19, Y+14	; 0x0e
    8982:	8f 85       	ldd	r24, Y+15	; 0x0f
    8984:	b9 01       	movw	r22, r18
    8986:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
}
    898a:	2f 96       	adiw	r28, 0x0f	; 15
    898c:	0f b6       	in	r0, 0x3f	; 63
    898e:	f8 94       	cli
    8990:	de bf       	out	0x3e, r29	; 62
    8992:	0f be       	out	0x3f, r0	; 63
    8994:	cd bf       	out	0x3d, r28	; 61
    8996:	cf 91       	pop	r28
    8998:	df 91       	pop	r29
    899a:	08 95       	ret

0000899c <vdmGreaterOrEqual>:

TVP vdmGreaterOrEqual(TVP a,TVP b)
{
    899c:	df 93       	push	r29
    899e:	cf 93       	push	r28
    89a0:	cd b7       	in	r28, 0x3d	; 61
    89a2:	de b7       	in	r29, 0x3e	; 62
    89a4:	2d 97       	sbiw	r28, 0x0d	; 13
    89a6:	0f b6       	in	r0, 0x3f	; 63
    89a8:	f8 94       	cli
    89aa:	de bf       	out	0x3e, r29	; 62
    89ac:	0f be       	out	0x3f, r0	; 63
    89ae:	cd bf       	out	0x3d, r28	; 61
    89b0:	9a 87       	std	Y+10, r25	; 0x0a
    89b2:	89 87       	std	Y+9, r24	; 0x09
    89b4:	7c 87       	std	Y+12, r23	; 0x0c
    89b6:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    89b8:	e9 85       	ldd	r30, Y+9	; 0x09
    89ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    89bc:	80 81       	ld	r24, Z
    89be:	91 81       	ldd	r25, Z+1	; 0x01
    89c0:	00 97       	sbiw	r24, 0x00	; 0
    89c2:	f1 f0       	breq	.+60     	; 0x8a00 <vdmGreaterOrEqual+0x64>
    89c4:	e9 85       	ldd	r30, Y+9	; 0x09
    89c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    89c8:	80 81       	ld	r24, Z
    89ca:	91 81       	ldd	r25, Z+1	; 0x01
    89cc:	81 30       	cpi	r24, 0x01	; 1
    89ce:	91 05       	cpc	r25, r1
    89d0:	b9 f0       	breq	.+46     	; 0x8a00 <vdmGreaterOrEqual+0x64>
    89d2:	e9 85       	ldd	r30, Y+9	; 0x09
    89d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    89d6:	80 81       	ld	r24, Z
    89d8:	91 81       	ldd	r25, Z+1	; 0x01
    89da:	82 30       	cpi	r24, 0x02	; 2
    89dc:	91 05       	cpc	r25, r1
    89de:	81 f0       	breq	.+32     	; 0x8a00 <vdmGreaterOrEqual+0x64>
    89e0:	e9 85       	ldd	r30, Y+9	; 0x09
    89e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    89e4:	80 81       	ld	r24, Z
    89e6:	91 81       	ldd	r25, Z+1	; 0x01
    89e8:	84 30       	cpi	r24, 0x04	; 4
    89ea:	91 05       	cpc	r25, r1
    89ec:	49 f0       	breq	.+18     	; 0x8a00 <vdmGreaterOrEqual+0x64>
    89ee:	e9 85       	ldd	r30, Y+9	; 0x09
    89f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    89f2:	80 81       	ld	r24, Z
    89f4:	91 81       	ldd	r25, Z+1	; 0x01
    89f6:	85 30       	cpi	r24, 0x05	; 5
    89f8:	91 05       	cpc	r25, r1
    89fa:	11 f0       	breq	.+4      	; 0x8a00 <vdmGreaterOrEqual+0x64>
    89fc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8a00:	eb 85       	ldd	r30, Y+11	; 0x0b
    8a02:	fc 85       	ldd	r31, Y+12	; 0x0c
    8a04:	80 81       	ld	r24, Z
    8a06:	91 81       	ldd	r25, Z+1	; 0x01
    8a08:	00 97       	sbiw	r24, 0x00	; 0
    8a0a:	f1 f0       	breq	.+60     	; 0x8a48 <vdmGreaterOrEqual+0xac>
    8a0c:	eb 85       	ldd	r30, Y+11	; 0x0b
    8a0e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8a10:	80 81       	ld	r24, Z
    8a12:	91 81       	ldd	r25, Z+1	; 0x01
    8a14:	81 30       	cpi	r24, 0x01	; 1
    8a16:	91 05       	cpc	r25, r1
    8a18:	b9 f0       	breq	.+46     	; 0x8a48 <vdmGreaterOrEqual+0xac>
    8a1a:	eb 85       	ldd	r30, Y+11	; 0x0b
    8a1c:	fc 85       	ldd	r31, Y+12	; 0x0c
    8a1e:	80 81       	ld	r24, Z
    8a20:	91 81       	ldd	r25, Z+1	; 0x01
    8a22:	82 30       	cpi	r24, 0x02	; 2
    8a24:	91 05       	cpc	r25, r1
    8a26:	81 f0       	breq	.+32     	; 0x8a48 <vdmGreaterOrEqual+0xac>
    8a28:	eb 85       	ldd	r30, Y+11	; 0x0b
    8a2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    8a2c:	80 81       	ld	r24, Z
    8a2e:	91 81       	ldd	r25, Z+1	; 0x01
    8a30:	84 30       	cpi	r24, 0x04	; 4
    8a32:	91 05       	cpc	r25, r1
    8a34:	49 f0       	breq	.+18     	; 0x8a48 <vdmGreaterOrEqual+0xac>
    8a36:	eb 85       	ldd	r30, Y+11	; 0x0b
    8a38:	fc 85       	ldd	r31, Y+12	; 0x0c
    8a3a:	80 81       	ld	r24, Z
    8a3c:	91 81       	ldd	r25, Z+1	; 0x01
    8a3e:	85 30       	cpi	r24, 0x05	; 5
    8a40:	91 05       	cpc	r25, r1
    8a42:	11 f0       	breq	.+4      	; 0x8a48 <vdmGreaterOrEqual+0xac>
    8a44:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    8a48:	89 85       	ldd	r24, Y+9	; 0x09
    8a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    8a4c:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8a50:	dc 01       	movw	r26, r24
    8a52:	cb 01       	movw	r24, r22
    8a54:	8d 83       	std	Y+5, r24	; 0x05
    8a56:	9e 83       	std	Y+6, r25	; 0x06
    8a58:	af 83       	std	Y+7, r26	; 0x07
    8a5a:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8a5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    8a5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8a60:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8a64:	dc 01       	movw	r26, r24
    8a66:	cb 01       	movw	r24, r22
    8a68:	89 83       	std	Y+1, r24	; 0x01
    8a6a:	9a 83       	std	Y+2, r25	; 0x02
    8a6c:	ab 83       	std	Y+3, r26	; 0x03
    8a6e:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av>=bv);
    8a70:	1d 86       	std	Y+13, r1	; 0x0d
    8a72:	6d 81       	ldd	r22, Y+5	; 0x05
    8a74:	7e 81       	ldd	r23, Y+6	; 0x06
    8a76:	8f 81       	ldd	r24, Y+7	; 0x07
    8a78:	98 85       	ldd	r25, Y+8	; 0x08
    8a7a:	29 81       	ldd	r18, Y+1	; 0x01
    8a7c:	3a 81       	ldd	r19, Y+2	; 0x02
    8a7e:	4b 81       	ldd	r20, Y+3	; 0x03
    8a80:	5c 81       	ldd	r21, Y+4	; 0x04
    8a82:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
    8a86:	88 23       	and	r24, r24
    8a88:	14 f0       	brlt	.+4      	; 0x8a8e <vdmGreaterOrEqual+0xf2>
    8a8a:	81 e0       	ldi	r24, 0x01	; 1
    8a8c:	8d 87       	std	Y+13, r24	; 0x0d
    8a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a90:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    8a94:	2d 96       	adiw	r28, 0x0d	; 13
    8a96:	0f b6       	in	r0, 0x3f	; 63
    8a98:	f8 94       	cli
    8a9a:	de bf       	out	0x3e, r29	; 62
    8a9c:	0f be       	out	0x3f, r0	; 63
    8a9e:	cd bf       	out	0x3d, r28	; 61
    8aa0:	cf 91       	pop	r28
    8aa2:	df 91       	pop	r29
    8aa4:	08 95       	ret

00008aa6 <vdmGreaterOrEqualGC>:

TVP vdmGreaterOrEqualGC(TVP a, TVP b, TVP *from)
{
    8aa6:	df 93       	push	r29
    8aa8:	cf 93       	push	r28
    8aaa:	cd b7       	in	r28, 0x3d	; 61
    8aac:	de b7       	in	r29, 0x3e	; 62
    8aae:	2f 97       	sbiw	r28, 0x0f	; 15
    8ab0:	0f b6       	in	r0, 0x3f	; 63
    8ab2:	f8 94       	cli
    8ab4:	de bf       	out	0x3e, r29	; 62
    8ab6:	0f be       	out	0x3f, r0	; 63
    8ab8:	cd bf       	out	0x3d, r28	; 61
    8aba:	9a 87       	std	Y+10, r25	; 0x0a
    8abc:	89 87       	std	Y+9, r24	; 0x09
    8abe:	7c 87       	std	Y+12, r23	; 0x0c
    8ac0:	6b 87       	std	Y+11, r22	; 0x0b
    8ac2:	5e 87       	std	Y+14, r21	; 0x0e
    8ac4:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8ac6:	e9 85       	ldd	r30, Y+9	; 0x09
    8ac8:	fa 85       	ldd	r31, Y+10	; 0x0a
    8aca:	80 81       	ld	r24, Z
    8acc:	91 81       	ldd	r25, Z+1	; 0x01
    8ace:	00 97       	sbiw	r24, 0x00	; 0
    8ad0:	f1 f0       	breq	.+60     	; 0x8b0e <vdmGreaterOrEqualGC+0x68>
    8ad2:	e9 85       	ldd	r30, Y+9	; 0x09
    8ad4:	fa 85       	ldd	r31, Y+10	; 0x0a
    8ad6:	80 81       	ld	r24, Z
    8ad8:	91 81       	ldd	r25, Z+1	; 0x01
    8ada:	81 30       	cpi	r24, 0x01	; 1
    8adc:	91 05       	cpc	r25, r1
    8ade:	b9 f0       	breq	.+46     	; 0x8b0e <vdmGreaterOrEqualGC+0x68>
    8ae0:	e9 85       	ldd	r30, Y+9	; 0x09
    8ae2:	fa 85       	ldd	r31, Y+10	; 0x0a
    8ae4:	80 81       	ld	r24, Z
    8ae6:	91 81       	ldd	r25, Z+1	; 0x01
    8ae8:	82 30       	cpi	r24, 0x02	; 2
    8aea:	91 05       	cpc	r25, r1
    8aec:	81 f0       	breq	.+32     	; 0x8b0e <vdmGreaterOrEqualGC+0x68>
    8aee:	e9 85       	ldd	r30, Y+9	; 0x09
    8af0:	fa 85       	ldd	r31, Y+10	; 0x0a
    8af2:	80 81       	ld	r24, Z
    8af4:	91 81       	ldd	r25, Z+1	; 0x01
    8af6:	84 30       	cpi	r24, 0x04	; 4
    8af8:	91 05       	cpc	r25, r1
    8afa:	49 f0       	breq	.+18     	; 0x8b0e <vdmGreaterOrEqualGC+0x68>
    8afc:	e9 85       	ldd	r30, Y+9	; 0x09
    8afe:	fa 85       	ldd	r31, Y+10	; 0x0a
    8b00:	80 81       	ld	r24, Z
    8b02:	91 81       	ldd	r25, Z+1	; 0x01
    8b04:	85 30       	cpi	r24, 0x05	; 5
    8b06:	91 05       	cpc	r25, r1
    8b08:	11 f0       	breq	.+4      	; 0x8b0e <vdmGreaterOrEqualGC+0x68>
    8b0a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8b0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8b10:	fc 85       	ldd	r31, Y+12	; 0x0c
    8b12:	80 81       	ld	r24, Z
    8b14:	91 81       	ldd	r25, Z+1	; 0x01
    8b16:	00 97       	sbiw	r24, 0x00	; 0
    8b18:	f1 f0       	breq	.+60     	; 0x8b56 <vdmGreaterOrEqualGC+0xb0>
    8b1a:	eb 85       	ldd	r30, Y+11	; 0x0b
    8b1c:	fc 85       	ldd	r31, Y+12	; 0x0c
    8b1e:	80 81       	ld	r24, Z
    8b20:	91 81       	ldd	r25, Z+1	; 0x01
    8b22:	81 30       	cpi	r24, 0x01	; 1
    8b24:	91 05       	cpc	r25, r1
    8b26:	b9 f0       	breq	.+46     	; 0x8b56 <vdmGreaterOrEqualGC+0xb0>
    8b28:	eb 85       	ldd	r30, Y+11	; 0x0b
    8b2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    8b2c:	80 81       	ld	r24, Z
    8b2e:	91 81       	ldd	r25, Z+1	; 0x01
    8b30:	82 30       	cpi	r24, 0x02	; 2
    8b32:	91 05       	cpc	r25, r1
    8b34:	81 f0       	breq	.+32     	; 0x8b56 <vdmGreaterOrEqualGC+0xb0>
    8b36:	eb 85       	ldd	r30, Y+11	; 0x0b
    8b38:	fc 85       	ldd	r31, Y+12	; 0x0c
    8b3a:	80 81       	ld	r24, Z
    8b3c:	91 81       	ldd	r25, Z+1	; 0x01
    8b3e:	84 30       	cpi	r24, 0x04	; 4
    8b40:	91 05       	cpc	r25, r1
    8b42:	49 f0       	breq	.+18     	; 0x8b56 <vdmGreaterOrEqualGC+0xb0>
    8b44:	eb 85       	ldd	r30, Y+11	; 0x0b
    8b46:	fc 85       	ldd	r31, Y+12	; 0x0c
    8b48:	80 81       	ld	r24, Z
    8b4a:	91 81       	ldd	r25, Z+1	; 0x01
    8b4c:	85 30       	cpi	r24, 0x05	; 5
    8b4e:	91 05       	cpc	r25, r1
    8b50:	11 f0       	breq	.+4      	; 0x8b56 <vdmGreaterOrEqualGC+0xb0>
    8b52:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    8b56:	89 85       	ldd	r24, Y+9	; 0x09
    8b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b5a:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8b5e:	dc 01       	movw	r26, r24
    8b60:	cb 01       	movw	r24, r22
    8b62:	8d 83       	std	Y+5, r24	; 0x05
    8b64:	9e 83       	std	Y+6, r25	; 0x06
    8b66:	af 83       	std	Y+7, r26	; 0x07
    8b68:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8b6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    8b6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    8b6e:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8b72:	dc 01       	movw	r26, r24
    8b74:	cb 01       	movw	r24, r22
    8b76:	89 83       	std	Y+1, r24	; 0x01
    8b78:	9a 83       	std	Y+2, r25	; 0x02
    8b7a:	ab 83       	std	Y+3, r26	; 0x03
    8b7c:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av>=bv, from);
    8b7e:	1f 86       	std	Y+15, r1	; 0x0f
    8b80:	6d 81       	ldd	r22, Y+5	; 0x05
    8b82:	7e 81       	ldd	r23, Y+6	; 0x06
    8b84:	8f 81       	ldd	r24, Y+7	; 0x07
    8b86:	98 85       	ldd	r25, Y+8	; 0x08
    8b88:	29 81       	ldd	r18, Y+1	; 0x01
    8b8a:	3a 81       	ldd	r19, Y+2	; 0x02
    8b8c:	4b 81       	ldd	r20, Y+3	; 0x03
    8b8e:	5c 81       	ldd	r21, Y+4	; 0x04
    8b90:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__gesf2>
    8b94:	88 23       	and	r24, r24
    8b96:	14 f0       	brlt	.+4      	; 0x8b9c <vdmGreaterOrEqualGC+0xf6>
    8b98:	81 e0       	ldi	r24, 0x01	; 1
    8b9a:	8f 87       	std	Y+15, r24	; 0x0f
    8b9c:	2d 85       	ldd	r18, Y+13	; 0x0d
    8b9e:	3e 85       	ldd	r19, Y+14	; 0x0e
    8ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    8ba2:	b9 01       	movw	r22, r18
    8ba4:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
}
    8ba8:	2f 96       	adiw	r28, 0x0f	; 15
    8baa:	0f b6       	in	r0, 0x3f	; 63
    8bac:	f8 94       	cli
    8bae:	de bf       	out	0x3e, r29	; 62
    8bb0:	0f be       	out	0x3f, r0	; 63
    8bb2:	cd bf       	out	0x3d, r28	; 61
    8bb4:	cf 91       	pop	r28
    8bb6:	df 91       	pop	r29
    8bb8:	08 95       	ret

00008bba <vdmLessThan>:

TVP vdmLessThan(TVP a,TVP b)
{
    8bba:	df 93       	push	r29
    8bbc:	cf 93       	push	r28
    8bbe:	cd b7       	in	r28, 0x3d	; 61
    8bc0:	de b7       	in	r29, 0x3e	; 62
    8bc2:	2d 97       	sbiw	r28, 0x0d	; 13
    8bc4:	0f b6       	in	r0, 0x3f	; 63
    8bc6:	f8 94       	cli
    8bc8:	de bf       	out	0x3e, r29	; 62
    8bca:	0f be       	out	0x3f, r0	; 63
    8bcc:	cd bf       	out	0x3d, r28	; 61
    8bce:	9a 87       	std	Y+10, r25	; 0x0a
    8bd0:	89 87       	std	Y+9, r24	; 0x09
    8bd2:	7c 87       	std	Y+12, r23	; 0x0c
    8bd4:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    8bd6:	e9 85       	ldd	r30, Y+9	; 0x09
    8bd8:	fa 85       	ldd	r31, Y+10	; 0x0a
    8bda:	80 81       	ld	r24, Z
    8bdc:	91 81       	ldd	r25, Z+1	; 0x01
    8bde:	00 97       	sbiw	r24, 0x00	; 0
    8be0:	f1 f0       	breq	.+60     	; 0x8c1e <vdmLessThan+0x64>
    8be2:	e9 85       	ldd	r30, Y+9	; 0x09
    8be4:	fa 85       	ldd	r31, Y+10	; 0x0a
    8be6:	80 81       	ld	r24, Z
    8be8:	91 81       	ldd	r25, Z+1	; 0x01
    8bea:	81 30       	cpi	r24, 0x01	; 1
    8bec:	91 05       	cpc	r25, r1
    8bee:	b9 f0       	breq	.+46     	; 0x8c1e <vdmLessThan+0x64>
    8bf0:	e9 85       	ldd	r30, Y+9	; 0x09
    8bf2:	fa 85       	ldd	r31, Y+10	; 0x0a
    8bf4:	80 81       	ld	r24, Z
    8bf6:	91 81       	ldd	r25, Z+1	; 0x01
    8bf8:	82 30       	cpi	r24, 0x02	; 2
    8bfa:	91 05       	cpc	r25, r1
    8bfc:	81 f0       	breq	.+32     	; 0x8c1e <vdmLessThan+0x64>
    8bfe:	e9 85       	ldd	r30, Y+9	; 0x09
    8c00:	fa 85       	ldd	r31, Y+10	; 0x0a
    8c02:	80 81       	ld	r24, Z
    8c04:	91 81       	ldd	r25, Z+1	; 0x01
    8c06:	84 30       	cpi	r24, 0x04	; 4
    8c08:	91 05       	cpc	r25, r1
    8c0a:	49 f0       	breq	.+18     	; 0x8c1e <vdmLessThan+0x64>
    8c0c:	e9 85       	ldd	r30, Y+9	; 0x09
    8c0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8c10:	80 81       	ld	r24, Z
    8c12:	91 81       	ldd	r25, Z+1	; 0x01
    8c14:	85 30       	cpi	r24, 0x05	; 5
    8c16:	91 05       	cpc	r25, r1
    8c18:	11 f0       	breq	.+4      	; 0x8c1e <vdmLessThan+0x64>
    8c1a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8c1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c20:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c22:	80 81       	ld	r24, Z
    8c24:	91 81       	ldd	r25, Z+1	; 0x01
    8c26:	00 97       	sbiw	r24, 0x00	; 0
    8c28:	f1 f0       	breq	.+60     	; 0x8c66 <vdmLessThan+0xac>
    8c2a:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c2c:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c2e:	80 81       	ld	r24, Z
    8c30:	91 81       	ldd	r25, Z+1	; 0x01
    8c32:	81 30       	cpi	r24, 0x01	; 1
    8c34:	91 05       	cpc	r25, r1
    8c36:	b9 f0       	breq	.+46     	; 0x8c66 <vdmLessThan+0xac>
    8c38:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c3a:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c3c:	80 81       	ld	r24, Z
    8c3e:	91 81       	ldd	r25, Z+1	; 0x01
    8c40:	82 30       	cpi	r24, 0x02	; 2
    8c42:	91 05       	cpc	r25, r1
    8c44:	81 f0       	breq	.+32     	; 0x8c66 <vdmLessThan+0xac>
    8c46:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c48:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c4a:	80 81       	ld	r24, Z
    8c4c:	91 81       	ldd	r25, Z+1	; 0x01
    8c4e:	84 30       	cpi	r24, 0x04	; 4
    8c50:	91 05       	cpc	r25, r1
    8c52:	49 f0       	breq	.+18     	; 0x8c66 <vdmLessThan+0xac>
    8c54:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c56:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c58:	80 81       	ld	r24, Z
    8c5a:	91 81       	ldd	r25, Z+1	; 0x01
    8c5c:	85 30       	cpi	r24, 0x05	; 5
    8c5e:	91 05       	cpc	r25, r1
    8c60:	11 f0       	breq	.+4      	; 0x8c66 <vdmLessThan+0xac>
    8c62:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    8c66:	89 85       	ldd	r24, Y+9	; 0x09
    8c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    8c6a:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8c6e:	dc 01       	movw	r26, r24
    8c70:	cb 01       	movw	r24, r22
    8c72:	8d 83       	std	Y+5, r24	; 0x05
    8c74:	9e 83       	std	Y+6, r25	; 0x06
    8c76:	af 83       	std	Y+7, r26	; 0x07
    8c78:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8c7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    8c7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    8c7e:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8c82:	dc 01       	movw	r26, r24
    8c84:	cb 01       	movw	r24, r22
    8c86:	89 83       	std	Y+1, r24	; 0x01
    8c88:	9a 83       	std	Y+2, r25	; 0x02
    8c8a:	ab 83       	std	Y+3, r26	; 0x03
    8c8c:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av<bv);
    8c8e:	1d 86       	std	Y+13, r1	; 0x0d
    8c90:	6d 81       	ldd	r22, Y+5	; 0x05
    8c92:	7e 81       	ldd	r23, Y+6	; 0x06
    8c94:	8f 81       	ldd	r24, Y+7	; 0x07
    8c96:	98 85       	ldd	r25, Y+8	; 0x08
    8c98:	29 81       	ldd	r18, Y+1	; 0x01
    8c9a:	3a 81       	ldd	r19, Y+2	; 0x02
    8c9c:	4b 81       	ldd	r20, Y+3	; 0x03
    8c9e:	5c 81       	ldd	r21, Y+4	; 0x04
    8ca0:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    8ca4:	88 23       	and	r24, r24
    8ca6:	14 f4       	brge	.+4      	; 0x8cac <vdmLessThan+0xf2>
    8ca8:	81 e0       	ldi	r24, 0x01	; 1
    8caa:	8d 87       	std	Y+13, r24	; 0x0d
    8cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    8cae:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    8cb2:	2d 96       	adiw	r28, 0x0d	; 13
    8cb4:	0f b6       	in	r0, 0x3f	; 63
    8cb6:	f8 94       	cli
    8cb8:	de bf       	out	0x3e, r29	; 62
    8cba:	0f be       	out	0x3f, r0	; 63
    8cbc:	cd bf       	out	0x3d, r28	; 61
    8cbe:	cf 91       	pop	r28
    8cc0:	df 91       	pop	r29
    8cc2:	08 95       	ret

00008cc4 <vdmLessThanGC>:

TVP vdmLessThanGC(TVP a, TVP b, TVP *from)
{
    8cc4:	df 93       	push	r29
    8cc6:	cf 93       	push	r28
    8cc8:	cd b7       	in	r28, 0x3d	; 61
    8cca:	de b7       	in	r29, 0x3e	; 62
    8ccc:	2f 97       	sbiw	r28, 0x0f	; 15
    8cce:	0f b6       	in	r0, 0x3f	; 63
    8cd0:	f8 94       	cli
    8cd2:	de bf       	out	0x3e, r29	; 62
    8cd4:	0f be       	out	0x3f, r0	; 63
    8cd6:	cd bf       	out	0x3d, r28	; 61
    8cd8:	9a 87       	std	Y+10, r25	; 0x0a
    8cda:	89 87       	std	Y+9, r24	; 0x09
    8cdc:	7c 87       	std	Y+12, r23	; 0x0c
    8cde:	6b 87       	std	Y+11, r22	; 0x0b
    8ce0:	5e 87       	std	Y+14, r21	; 0x0e
    8ce2:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8ce4:	e9 85       	ldd	r30, Y+9	; 0x09
    8ce6:	fa 85       	ldd	r31, Y+10	; 0x0a
    8ce8:	80 81       	ld	r24, Z
    8cea:	91 81       	ldd	r25, Z+1	; 0x01
    8cec:	00 97       	sbiw	r24, 0x00	; 0
    8cee:	f1 f0       	breq	.+60     	; 0x8d2c <vdmLessThanGC+0x68>
    8cf0:	e9 85       	ldd	r30, Y+9	; 0x09
    8cf2:	fa 85       	ldd	r31, Y+10	; 0x0a
    8cf4:	80 81       	ld	r24, Z
    8cf6:	91 81       	ldd	r25, Z+1	; 0x01
    8cf8:	81 30       	cpi	r24, 0x01	; 1
    8cfa:	91 05       	cpc	r25, r1
    8cfc:	b9 f0       	breq	.+46     	; 0x8d2c <vdmLessThanGC+0x68>
    8cfe:	e9 85       	ldd	r30, Y+9	; 0x09
    8d00:	fa 85       	ldd	r31, Y+10	; 0x0a
    8d02:	80 81       	ld	r24, Z
    8d04:	91 81       	ldd	r25, Z+1	; 0x01
    8d06:	82 30       	cpi	r24, 0x02	; 2
    8d08:	91 05       	cpc	r25, r1
    8d0a:	81 f0       	breq	.+32     	; 0x8d2c <vdmLessThanGC+0x68>
    8d0c:	e9 85       	ldd	r30, Y+9	; 0x09
    8d0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8d10:	80 81       	ld	r24, Z
    8d12:	91 81       	ldd	r25, Z+1	; 0x01
    8d14:	84 30       	cpi	r24, 0x04	; 4
    8d16:	91 05       	cpc	r25, r1
    8d18:	49 f0       	breq	.+18     	; 0x8d2c <vdmLessThanGC+0x68>
    8d1a:	e9 85       	ldd	r30, Y+9	; 0x09
    8d1c:	fa 85       	ldd	r31, Y+10	; 0x0a
    8d1e:	80 81       	ld	r24, Z
    8d20:	91 81       	ldd	r25, Z+1	; 0x01
    8d22:	85 30       	cpi	r24, 0x05	; 5
    8d24:	91 05       	cpc	r25, r1
    8d26:	11 f0       	breq	.+4      	; 0x8d2c <vdmLessThanGC+0x68>
    8d28:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8d2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    8d2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8d30:	80 81       	ld	r24, Z
    8d32:	91 81       	ldd	r25, Z+1	; 0x01
    8d34:	00 97       	sbiw	r24, 0x00	; 0
    8d36:	f1 f0       	breq	.+60     	; 0x8d74 <vdmLessThanGC+0xb0>
    8d38:	eb 85       	ldd	r30, Y+11	; 0x0b
    8d3a:	fc 85       	ldd	r31, Y+12	; 0x0c
    8d3c:	80 81       	ld	r24, Z
    8d3e:	91 81       	ldd	r25, Z+1	; 0x01
    8d40:	81 30       	cpi	r24, 0x01	; 1
    8d42:	91 05       	cpc	r25, r1
    8d44:	b9 f0       	breq	.+46     	; 0x8d74 <vdmLessThanGC+0xb0>
    8d46:	eb 85       	ldd	r30, Y+11	; 0x0b
    8d48:	fc 85       	ldd	r31, Y+12	; 0x0c
    8d4a:	80 81       	ld	r24, Z
    8d4c:	91 81       	ldd	r25, Z+1	; 0x01
    8d4e:	82 30       	cpi	r24, 0x02	; 2
    8d50:	91 05       	cpc	r25, r1
    8d52:	81 f0       	breq	.+32     	; 0x8d74 <vdmLessThanGC+0xb0>
    8d54:	eb 85       	ldd	r30, Y+11	; 0x0b
    8d56:	fc 85       	ldd	r31, Y+12	; 0x0c
    8d58:	80 81       	ld	r24, Z
    8d5a:	91 81       	ldd	r25, Z+1	; 0x01
    8d5c:	84 30       	cpi	r24, 0x04	; 4
    8d5e:	91 05       	cpc	r25, r1
    8d60:	49 f0       	breq	.+18     	; 0x8d74 <vdmLessThanGC+0xb0>
    8d62:	eb 85       	ldd	r30, Y+11	; 0x0b
    8d64:	fc 85       	ldd	r31, Y+12	; 0x0c
    8d66:	80 81       	ld	r24, Z
    8d68:	91 81       	ldd	r25, Z+1	; 0x01
    8d6a:	85 30       	cpi	r24, 0x05	; 5
    8d6c:	91 05       	cpc	r25, r1
    8d6e:	11 f0       	breq	.+4      	; 0x8d74 <vdmLessThanGC+0xb0>
    8d70:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    8d74:	89 85       	ldd	r24, Y+9	; 0x09
    8d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    8d78:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8d7c:	dc 01       	movw	r26, r24
    8d7e:	cb 01       	movw	r24, r22
    8d80:	8d 83       	std	Y+5, r24	; 0x05
    8d82:	9e 83       	std	Y+6, r25	; 0x06
    8d84:	af 83       	std	Y+7, r26	; 0x07
    8d86:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8d88:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d8c:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8d90:	dc 01       	movw	r26, r24
    8d92:	cb 01       	movw	r24, r22
    8d94:	89 83       	std	Y+1, r24	; 0x01
    8d96:	9a 83       	std	Y+2, r25	; 0x02
    8d98:	ab 83       	std	Y+3, r26	; 0x03
    8d9a:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av<bv, from);
    8d9c:	1f 86       	std	Y+15, r1	; 0x0f
    8d9e:	6d 81       	ldd	r22, Y+5	; 0x05
    8da0:	7e 81       	ldd	r23, Y+6	; 0x06
    8da2:	8f 81       	ldd	r24, Y+7	; 0x07
    8da4:	98 85       	ldd	r25, Y+8	; 0x08
    8da6:	29 81       	ldd	r18, Y+1	; 0x01
    8da8:	3a 81       	ldd	r19, Y+2	; 0x02
    8daa:	4b 81       	ldd	r20, Y+3	; 0x03
    8dac:	5c 81       	ldd	r21, Y+4	; 0x04
    8dae:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    8db2:	88 23       	and	r24, r24
    8db4:	14 f4       	brge	.+4      	; 0x8dba <vdmLessThanGC+0xf6>
    8db6:	81 e0       	ldi	r24, 0x01	; 1
    8db8:	8f 87       	std	Y+15, r24	; 0x0f
    8dba:	2d 85       	ldd	r18, Y+13	; 0x0d
    8dbc:	3e 85       	ldd	r19, Y+14	; 0x0e
    8dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    8dc0:	b9 01       	movw	r22, r18
    8dc2:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
}
    8dc6:	2f 96       	adiw	r28, 0x0f	; 15
    8dc8:	0f b6       	in	r0, 0x3f	; 63
    8dca:	f8 94       	cli
    8dcc:	de bf       	out	0x3e, r29	; 62
    8dce:	0f be       	out	0x3f, r0	; 63
    8dd0:	cd bf       	out	0x3d, r28	; 61
    8dd2:	cf 91       	pop	r28
    8dd4:	df 91       	pop	r29
    8dd6:	08 95       	ret

00008dd8 <vdmLessOrEqual>:

TVP vdmLessOrEqual(TVP a,TVP b)
{
    8dd8:	df 93       	push	r29
    8dda:	cf 93       	push	r28
    8ddc:	cd b7       	in	r28, 0x3d	; 61
    8dde:	de b7       	in	r29, 0x3e	; 62
    8de0:	2d 97       	sbiw	r28, 0x0d	; 13
    8de2:	0f b6       	in	r0, 0x3f	; 63
    8de4:	f8 94       	cli
    8de6:	de bf       	out	0x3e, r29	; 62
    8de8:	0f be       	out	0x3f, r0	; 63
    8dea:	cd bf       	out	0x3d, r28	; 61
    8dec:	9a 87       	std	Y+10, r25	; 0x0a
    8dee:	89 87       	std	Y+9, r24	; 0x09
    8df0:	7c 87       	std	Y+12, r23	; 0x0c
    8df2:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    8df4:	e9 85       	ldd	r30, Y+9	; 0x09
    8df6:	fa 85       	ldd	r31, Y+10	; 0x0a
    8df8:	80 81       	ld	r24, Z
    8dfa:	91 81       	ldd	r25, Z+1	; 0x01
    8dfc:	00 97       	sbiw	r24, 0x00	; 0
    8dfe:	f1 f0       	breq	.+60     	; 0x8e3c <vdmLessOrEqual+0x64>
    8e00:	e9 85       	ldd	r30, Y+9	; 0x09
    8e02:	fa 85       	ldd	r31, Y+10	; 0x0a
    8e04:	80 81       	ld	r24, Z
    8e06:	91 81       	ldd	r25, Z+1	; 0x01
    8e08:	81 30       	cpi	r24, 0x01	; 1
    8e0a:	91 05       	cpc	r25, r1
    8e0c:	b9 f0       	breq	.+46     	; 0x8e3c <vdmLessOrEqual+0x64>
    8e0e:	e9 85       	ldd	r30, Y+9	; 0x09
    8e10:	fa 85       	ldd	r31, Y+10	; 0x0a
    8e12:	80 81       	ld	r24, Z
    8e14:	91 81       	ldd	r25, Z+1	; 0x01
    8e16:	82 30       	cpi	r24, 0x02	; 2
    8e18:	91 05       	cpc	r25, r1
    8e1a:	81 f0       	breq	.+32     	; 0x8e3c <vdmLessOrEqual+0x64>
    8e1c:	e9 85       	ldd	r30, Y+9	; 0x09
    8e1e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8e20:	80 81       	ld	r24, Z
    8e22:	91 81       	ldd	r25, Z+1	; 0x01
    8e24:	84 30       	cpi	r24, 0x04	; 4
    8e26:	91 05       	cpc	r25, r1
    8e28:	49 f0       	breq	.+18     	; 0x8e3c <vdmLessOrEqual+0x64>
    8e2a:	e9 85       	ldd	r30, Y+9	; 0x09
    8e2c:	fa 85       	ldd	r31, Y+10	; 0x0a
    8e2e:	80 81       	ld	r24, Z
    8e30:	91 81       	ldd	r25, Z+1	; 0x01
    8e32:	85 30       	cpi	r24, 0x05	; 5
    8e34:	91 05       	cpc	r25, r1
    8e36:	11 f0       	breq	.+4      	; 0x8e3c <vdmLessOrEqual+0x64>
    8e38:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8e3c:	eb 85       	ldd	r30, Y+11	; 0x0b
    8e3e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8e40:	80 81       	ld	r24, Z
    8e42:	91 81       	ldd	r25, Z+1	; 0x01
    8e44:	00 97       	sbiw	r24, 0x00	; 0
    8e46:	f1 f0       	breq	.+60     	; 0x8e84 <vdmLessOrEqual+0xac>
    8e48:	eb 85       	ldd	r30, Y+11	; 0x0b
    8e4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    8e4c:	80 81       	ld	r24, Z
    8e4e:	91 81       	ldd	r25, Z+1	; 0x01
    8e50:	81 30       	cpi	r24, 0x01	; 1
    8e52:	91 05       	cpc	r25, r1
    8e54:	b9 f0       	breq	.+46     	; 0x8e84 <vdmLessOrEqual+0xac>
    8e56:	eb 85       	ldd	r30, Y+11	; 0x0b
    8e58:	fc 85       	ldd	r31, Y+12	; 0x0c
    8e5a:	80 81       	ld	r24, Z
    8e5c:	91 81       	ldd	r25, Z+1	; 0x01
    8e5e:	82 30       	cpi	r24, 0x02	; 2
    8e60:	91 05       	cpc	r25, r1
    8e62:	81 f0       	breq	.+32     	; 0x8e84 <vdmLessOrEqual+0xac>
    8e64:	eb 85       	ldd	r30, Y+11	; 0x0b
    8e66:	fc 85       	ldd	r31, Y+12	; 0x0c
    8e68:	80 81       	ld	r24, Z
    8e6a:	91 81       	ldd	r25, Z+1	; 0x01
    8e6c:	84 30       	cpi	r24, 0x04	; 4
    8e6e:	91 05       	cpc	r25, r1
    8e70:	49 f0       	breq	.+18     	; 0x8e84 <vdmLessOrEqual+0xac>
    8e72:	eb 85       	ldd	r30, Y+11	; 0x0b
    8e74:	fc 85       	ldd	r31, Y+12	; 0x0c
    8e76:	80 81       	ld	r24, Z
    8e78:	91 81       	ldd	r25, Z+1	; 0x01
    8e7a:	85 30       	cpi	r24, 0x05	; 5
    8e7c:	91 05       	cpc	r25, r1
    8e7e:	11 f0       	breq	.+4      	; 0x8e84 <vdmLessOrEqual+0xac>
    8e80:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    8e84:	89 85       	ldd	r24, Y+9	; 0x09
    8e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    8e88:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8e8c:	dc 01       	movw	r26, r24
    8e8e:	cb 01       	movw	r24, r22
    8e90:	8d 83       	std	Y+5, r24	; 0x05
    8e92:	9e 83       	std	Y+6, r25	; 0x06
    8e94:	af 83       	std	Y+7, r26	; 0x07
    8e96:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8e98:	8b 85       	ldd	r24, Y+11	; 0x0b
    8e9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    8e9c:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8ea0:	dc 01       	movw	r26, r24
    8ea2:	cb 01       	movw	r24, r22
    8ea4:	89 83       	std	Y+1, r24	; 0x01
    8ea6:	9a 83       	std	Y+2, r25	; 0x02
    8ea8:	ab 83       	std	Y+3, r26	; 0x03
    8eaa:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av<=bv);
    8eac:	1d 86       	std	Y+13, r1	; 0x0d
    8eae:	6d 81       	ldd	r22, Y+5	; 0x05
    8eb0:	7e 81       	ldd	r23, Y+6	; 0x06
    8eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    8eb4:	98 85       	ldd	r25, Y+8	; 0x08
    8eb6:	29 81       	ldd	r18, Y+1	; 0x01
    8eb8:	3a 81       	ldd	r19, Y+2	; 0x02
    8eba:	4b 81       	ldd	r20, Y+3	; 0x03
    8ebc:	5c 81       	ldd	r21, Y+4	; 0x04
    8ebe:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    8ec2:	18 16       	cp	r1, r24
    8ec4:	14 f0       	brlt	.+4      	; 0x8eca <vdmLessOrEqual+0xf2>
    8ec6:	81 e0       	ldi	r24, 0x01	; 1
    8ec8:	8d 87       	std	Y+13, r24	; 0x0d
    8eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ecc:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    8ed0:	2d 96       	adiw	r28, 0x0d	; 13
    8ed2:	0f b6       	in	r0, 0x3f	; 63
    8ed4:	f8 94       	cli
    8ed6:	de bf       	out	0x3e, r29	; 62
    8ed8:	0f be       	out	0x3f, r0	; 63
    8eda:	cd bf       	out	0x3d, r28	; 61
    8edc:	cf 91       	pop	r28
    8ede:	df 91       	pop	r29
    8ee0:	08 95       	ret

00008ee2 <vdmLessOrEqualGC>:

TVP vdmLessOrEqualGC(TVP a, TVP b, TVP *from)
{
    8ee2:	df 93       	push	r29
    8ee4:	cf 93       	push	r28
    8ee6:	cd b7       	in	r28, 0x3d	; 61
    8ee8:	de b7       	in	r29, 0x3e	; 62
    8eea:	2f 97       	sbiw	r28, 0x0f	; 15
    8eec:	0f b6       	in	r0, 0x3f	; 63
    8eee:	f8 94       	cli
    8ef0:	de bf       	out	0x3e, r29	; 62
    8ef2:	0f be       	out	0x3f, r0	; 63
    8ef4:	cd bf       	out	0x3d, r28	; 61
    8ef6:	9a 87       	std	Y+10, r25	; 0x0a
    8ef8:	89 87       	std	Y+9, r24	; 0x09
    8efa:	7c 87       	std	Y+12, r23	; 0x0c
    8efc:	6b 87       	std	Y+11, r22	; 0x0b
    8efe:	5e 87       	std	Y+14, r21	; 0x0e
    8f00:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8f02:	e9 85       	ldd	r30, Y+9	; 0x09
    8f04:	fa 85       	ldd	r31, Y+10	; 0x0a
    8f06:	80 81       	ld	r24, Z
    8f08:	91 81       	ldd	r25, Z+1	; 0x01
    8f0a:	00 97       	sbiw	r24, 0x00	; 0
    8f0c:	f1 f0       	breq	.+60     	; 0x8f4a <vdmLessOrEqualGC+0x68>
    8f0e:	e9 85       	ldd	r30, Y+9	; 0x09
    8f10:	fa 85       	ldd	r31, Y+10	; 0x0a
    8f12:	80 81       	ld	r24, Z
    8f14:	91 81       	ldd	r25, Z+1	; 0x01
    8f16:	81 30       	cpi	r24, 0x01	; 1
    8f18:	91 05       	cpc	r25, r1
    8f1a:	b9 f0       	breq	.+46     	; 0x8f4a <vdmLessOrEqualGC+0x68>
    8f1c:	e9 85       	ldd	r30, Y+9	; 0x09
    8f1e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8f20:	80 81       	ld	r24, Z
    8f22:	91 81       	ldd	r25, Z+1	; 0x01
    8f24:	82 30       	cpi	r24, 0x02	; 2
    8f26:	91 05       	cpc	r25, r1
    8f28:	81 f0       	breq	.+32     	; 0x8f4a <vdmLessOrEqualGC+0x68>
    8f2a:	e9 85       	ldd	r30, Y+9	; 0x09
    8f2c:	fa 85       	ldd	r31, Y+10	; 0x0a
    8f2e:	80 81       	ld	r24, Z
    8f30:	91 81       	ldd	r25, Z+1	; 0x01
    8f32:	84 30       	cpi	r24, 0x04	; 4
    8f34:	91 05       	cpc	r25, r1
    8f36:	49 f0       	breq	.+18     	; 0x8f4a <vdmLessOrEqualGC+0x68>
    8f38:	e9 85       	ldd	r30, Y+9	; 0x09
    8f3a:	fa 85       	ldd	r31, Y+10	; 0x0a
    8f3c:	80 81       	ld	r24, Z
    8f3e:	91 81       	ldd	r25, Z+1	; 0x01
    8f40:	85 30       	cpi	r24, 0x05	; 5
    8f42:	91 05       	cpc	r25, r1
    8f44:	11 f0       	breq	.+4      	; 0x8f4a <vdmLessOrEqualGC+0x68>
    8f46:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8f4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f4e:	80 81       	ld	r24, Z
    8f50:	91 81       	ldd	r25, Z+1	; 0x01
    8f52:	00 97       	sbiw	r24, 0x00	; 0
    8f54:	f1 f0       	breq	.+60     	; 0x8f92 <vdmLessOrEqualGC+0xb0>
    8f56:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f58:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f5a:	80 81       	ld	r24, Z
    8f5c:	91 81       	ldd	r25, Z+1	; 0x01
    8f5e:	81 30       	cpi	r24, 0x01	; 1
    8f60:	91 05       	cpc	r25, r1
    8f62:	b9 f0       	breq	.+46     	; 0x8f92 <vdmLessOrEqualGC+0xb0>
    8f64:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f66:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f68:	80 81       	ld	r24, Z
    8f6a:	91 81       	ldd	r25, Z+1	; 0x01
    8f6c:	82 30       	cpi	r24, 0x02	; 2
    8f6e:	91 05       	cpc	r25, r1
    8f70:	81 f0       	breq	.+32     	; 0x8f92 <vdmLessOrEqualGC+0xb0>
    8f72:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f74:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f76:	80 81       	ld	r24, Z
    8f78:	91 81       	ldd	r25, Z+1	; 0x01
    8f7a:	84 30       	cpi	r24, 0x04	; 4
    8f7c:	91 05       	cpc	r25, r1
    8f7e:	49 f0       	breq	.+18     	; 0x8f92 <vdmLessOrEqualGC+0xb0>
    8f80:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f82:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f84:	80 81       	ld	r24, Z
    8f86:	91 81       	ldd	r25, Z+1	; 0x01
    8f88:	85 30       	cpi	r24, 0x05	; 5
    8f8a:	91 05       	cpc	r25, r1
    8f8c:	11 f0       	breq	.+4      	; 0x8f92 <vdmLessOrEqualGC+0xb0>
    8f8e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	double av = toDouble(a);
    8f92:	89 85       	ldd	r24, Y+9	; 0x09
    8f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    8f96:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8f9a:	dc 01       	movw	r26, r24
    8f9c:	cb 01       	movw	r24, r22
    8f9e:	8d 83       	std	Y+5, r24	; 0x05
    8fa0:	9e 83       	std	Y+6, r25	; 0x06
    8fa2:	af 83       	std	Y+7, r26	; 0x07
    8fa4:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8fa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    8fa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    8faa:	0e 94 03 33 	call	0x6606	; 0x6606 <toDouble>
    8fae:	dc 01       	movw	r26, r24
    8fb0:	cb 01       	movw	r24, r22
    8fb2:	89 83       	std	Y+1, r24	; 0x01
    8fb4:	9a 83       	std	Y+2, r25	; 0x02
    8fb6:	ab 83       	std	Y+3, r26	; 0x03
    8fb8:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av <= bv, from);
    8fba:	1f 86       	std	Y+15, r1	; 0x0f
    8fbc:	6d 81       	ldd	r22, Y+5	; 0x05
    8fbe:	7e 81       	ldd	r23, Y+6	; 0x06
    8fc0:	8f 81       	ldd	r24, Y+7	; 0x07
    8fc2:	98 85       	ldd	r25, Y+8	; 0x08
    8fc4:	29 81       	ldd	r18, Y+1	; 0x01
    8fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    8fc8:	4b 81       	ldd	r20, Y+3	; 0x03
    8fca:	5c 81       	ldd	r21, Y+4	; 0x04
    8fcc:	0e 94 52 6f 	call	0xdea4	; 0xdea4 <__cmpsf2>
    8fd0:	18 16       	cp	r1, r24
    8fd2:	14 f0       	brlt	.+4      	; 0x8fd8 <vdmLessOrEqualGC+0xf6>
    8fd4:	81 e0       	ldi	r24, 0x01	; 1
    8fd6:	8f 87       	std	Y+15, r24	; 0x0f
    8fd8:	2d 85       	ldd	r18, Y+13	; 0x0d
    8fda:	3e 85       	ldd	r19, Y+14	; 0x0e
    8fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    8fde:	b9 01       	movw	r22, r18
    8fe0:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
}
    8fe4:	2f 96       	adiw	r28, 0x0f	; 15
    8fe6:	0f b6       	in	r0, 0x3f	; 63
    8fe8:	f8 94       	cli
    8fea:	de bf       	out	0x3e, r29	; 62
    8fec:	0f be       	out	0x3f, r0	; 63
    8fee:	cd bf       	out	0x3d, r28	; 61
    8ff0:	cf 91       	pop	r28
    8ff2:	df 91       	pop	r29
    8ff4:	08 95       	ret

00008ff6 <newClassValue>:


#include "VdmClass.h"

struct ClassType* newClassValue(int id, unsigned int* refs, freeVdmClassFunction freeClass, void* value)
{
    8ff6:	df 93       	push	r29
    8ff8:	cf 93       	push	r28
    8ffa:	cd b7       	in	r28, 0x3d	; 61
    8ffc:	de b7       	in	r29, 0x3e	; 62
    8ffe:	2a 97       	sbiw	r28, 0x0a	; 10
    9000:	0f b6       	in	r0, 0x3f	; 63
    9002:	f8 94       	cli
    9004:	de bf       	out	0x3e, r29	; 62
    9006:	0f be       	out	0x3f, r0	; 63
    9008:	cd bf       	out	0x3d, r28	; 61
    900a:	9c 83       	std	Y+4, r25	; 0x04
    900c:	8b 83       	std	Y+3, r24	; 0x03
    900e:	7e 83       	std	Y+6, r23	; 0x06
    9010:	6d 83       	std	Y+5, r22	; 0x05
    9012:	58 87       	std	Y+8, r21	; 0x08
    9014:	4f 83       	std	Y+7, r20	; 0x07
    9016:	3a 87       	std	Y+10, r19	; 0x0a
    9018:	29 87       	std	Y+9, r18	; 0x09
	struct ClassType* ptr = (struct ClassType*) malloc(sizeof(struct ClassType));
    901a:	88 e0       	ldi	r24, 0x08	; 8
    901c:	90 e0       	ldi	r25, 0x00	; 0
    901e:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    9022:	9a 83       	std	Y+2, r25	; 0x02
    9024:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    9026:	89 81       	ldd	r24, Y+1	; 0x01
    9028:	9a 81       	ldd	r25, Y+2	; 0x02
    902a:	00 97       	sbiw	r24, 0x00	; 0
    902c:	11 f4       	brne	.+4      	; 0x9032 <newClassValue+0x3c>
    902e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ptr->classId = id;
    9032:	e9 81       	ldd	r30, Y+1	; 0x01
    9034:	fa 81       	ldd	r31, Y+2	; 0x02
    9036:	8b 81       	ldd	r24, Y+3	; 0x03
    9038:	9c 81       	ldd	r25, Y+4	; 0x04
    903a:	93 83       	std	Z+3, r25	; 0x03
    903c:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = value;
    903e:	e9 81       	ldd	r30, Y+1	; 0x01
    9040:	fa 81       	ldd	r31, Y+2	; 0x02
    9042:	89 85       	ldd	r24, Y+9	; 0x09
    9044:	9a 85       	ldd	r25, Y+10	; 0x0a
    9046:	91 83       	std	Z+1, r25	; 0x01
    9048:	80 83       	st	Z, r24
	ptr->freeClass = freeClass;
    904a:	e9 81       	ldd	r30, Y+1	; 0x01
    904c:	fa 81       	ldd	r31, Y+2	; 0x02
    904e:	8f 81       	ldd	r24, Y+7	; 0x07
    9050:	98 85       	ldd	r25, Y+8	; 0x08
    9052:	97 83       	std	Z+7, r25	; 0x07
    9054:	86 83       	std	Z+6, r24	; 0x06
	ptr->refs = refs;
    9056:	e9 81       	ldd	r30, Y+1	; 0x01
    9058:	fa 81       	ldd	r31, Y+2	; 0x02
    905a:	8d 81       	ldd	r24, Y+5	; 0x05
    905c:	9e 81       	ldd	r25, Y+6	; 0x06
    905e:	95 83       	std	Z+5, r25	; 0x05
    9060:	84 83       	std	Z+4, r24	; 0x04
	(*refs)++;
    9062:	ed 81       	ldd	r30, Y+5	; 0x05
    9064:	fe 81       	ldd	r31, Y+6	; 0x06
    9066:	80 81       	ld	r24, Z
    9068:	91 81       	ldd	r25, Z+1	; 0x01
    906a:	01 96       	adiw	r24, 0x01	; 1
    906c:	ed 81       	ldd	r30, Y+5	; 0x05
    906e:	fe 81       	ldd	r31, Y+6	; 0x06
    9070:	91 83       	std	Z+1, r25	; 0x01
    9072:	80 83       	st	Z, r24
	return ptr;
    9074:	89 81       	ldd	r24, Y+1	; 0x01
    9076:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9078:	2a 96       	adiw	r28, 0x0a	; 10
    907a:	0f b6       	in	r0, 0x3f	; 63
    907c:	f8 94       	cli
    907e:	de bf       	out	0x3e, r29	; 62
    9080:	0f be       	out	0x3f, r0	; 63
    9082:	cd bf       	out	0x3d, r28	; 61
    9084:	cf 91       	pop	r28
    9086:	df 91       	pop	r29
    9088:	08 95       	ret

0000908a <vdm_gc_init>:

struct alloc_list_node *allocd_mem_head = NULL;
struct alloc_list_node *allocd_mem_tail = NULL;

void vdm_gc_init()
{
    908a:	df 93       	push	r29
    908c:	cf 93       	push	r28
    908e:	cd b7       	in	r28, 0x3d	; 61
    9090:	de b7       	in	r29, 0x3e	; 62
	allocd_mem_head = (struct alloc_list_node*)malloc(sizeof (struct alloc_list_node));
    9092:	84 e0       	ldi	r24, 0x04	; 4
    9094:	90 e0       	ldi	r25, 0x00	; 0
    9096:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    909a:	90 93 2b 03 	sts	0x032B, r25
    909e:	80 93 2a 03 	sts	0x032A, r24
	assert(allocd_mem_head != NULL);
    90a2:	80 91 2a 03 	lds	r24, 0x032A
    90a6:	90 91 2b 03 	lds	r25, 0x032B
    90aa:	00 97       	sbiw	r24, 0x00	; 0
    90ac:	11 f4       	brne	.+4      	; 0x90b2 <vdm_gc_init+0x28>
    90ae:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	allocd_mem_head->loc = NULL;
    90b2:	e0 91 2a 03 	lds	r30, 0x032A
    90b6:	f0 91 2b 03 	lds	r31, 0x032B
    90ba:	11 82       	std	Z+1, r1	; 0x01
    90bc:	10 82       	st	Z, r1
	allocd_mem_head->next = NULL;
    90be:	e0 91 2a 03 	lds	r30, 0x032A
    90c2:	f0 91 2b 03 	lds	r31, 0x032B
    90c6:	13 82       	std	Z+3, r1	; 0x03
    90c8:	12 82       	std	Z+2, r1	; 0x02

	allocd_mem_tail = allocd_mem_head;
    90ca:	80 91 2a 03 	lds	r24, 0x032A
    90ce:	90 91 2b 03 	lds	r25, 0x032B
    90d2:	90 93 2d 03 	sts	0x032D, r25
    90d6:	80 93 2c 03 	sts	0x032C, r24
}
    90da:	cf 91       	pop	r28
    90dc:	df 91       	pop	r29
    90de:	08 95       	ret

000090e0 <add_allocd_mem_node>:

void add_allocd_mem_node(TVP l, TVP *from)
{
    90e0:	0f 93       	push	r16
    90e2:	1f 93       	push	r17
    90e4:	df 93       	push	r29
    90e6:	cf 93       	push	r28
    90e8:	00 d0       	rcall	.+0      	; 0x90ea <add_allocd_mem_node+0xa>
    90ea:	00 d0       	rcall	.+0      	; 0x90ec <add_allocd_mem_node+0xc>
    90ec:	cd b7       	in	r28, 0x3d	; 61
    90ee:	de b7       	in	r29, 0x3e	; 62
    90f0:	9a 83       	std	Y+2, r25	; 0x02
    90f2:	89 83       	std	Y+1, r24	; 0x01
    90f4:	7c 83       	std	Y+4, r23	; 0x04
    90f6:	6b 83       	std	Y+3, r22	; 0x03
	allocd_mem_tail->loc = l;
    90f8:	e0 91 2c 03 	lds	r30, 0x032C
    90fc:	f0 91 2d 03 	lds	r31, 0x032D
    9100:	89 81       	ldd	r24, Y+1	; 0x01
    9102:	9a 81       	ldd	r25, Y+2	; 0x02
    9104:	91 83       	std	Z+1, r25	; 0x01
    9106:	80 83       	st	Z, r24
	allocd_mem_tail->loc->ref_from = from;
    9108:	e0 91 2c 03 	lds	r30, 0x032C
    910c:	f0 91 2d 03 	lds	r31, 0x032D
    9110:	01 90       	ld	r0, Z+
    9112:	f0 81       	ld	r31, Z
    9114:	e0 2d       	mov	r30, r0
    9116:	8b 81       	ldd	r24, Y+3	; 0x03
    9118:	9c 81       	ldd	r25, Y+4	; 0x04
    911a:	93 83       	std	Z+3, r25	; 0x03
    911c:	82 83       	std	Z+2, r24	; 0x02

	allocd_mem_tail->next = (struct alloc_list_node*)malloc(sizeof(struct alloc_list_node));
    911e:	00 91 2c 03 	lds	r16, 0x032C
    9122:	10 91 2d 03 	lds	r17, 0x032D
    9126:	84 e0       	ldi	r24, 0x04	; 4
    9128:	90 e0       	ldi	r25, 0x00	; 0
    912a:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    912e:	f8 01       	movw	r30, r16
    9130:	93 83       	std	Z+3, r25	; 0x03
    9132:	82 83       	std	Z+2, r24	; 0x02
	assert(allocd_mem_tail->next != NULL);
    9134:	e0 91 2c 03 	lds	r30, 0x032C
    9138:	f0 91 2d 03 	lds	r31, 0x032D
    913c:	82 81       	ldd	r24, Z+2	; 0x02
    913e:	93 81       	ldd	r25, Z+3	; 0x03
    9140:	00 97       	sbiw	r24, 0x00	; 0
    9142:	11 f4       	brne	.+4      	; 0x9148 <add_allocd_mem_node+0x68>
    9144:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	allocd_mem_tail = allocd_mem_tail->next;
    9148:	e0 91 2c 03 	lds	r30, 0x032C
    914c:	f0 91 2d 03 	lds	r31, 0x032D
    9150:	82 81       	ldd	r24, Z+2	; 0x02
    9152:	93 81       	ldd	r25, Z+3	; 0x03
    9154:	90 93 2d 03 	sts	0x032D, r25
    9158:	80 93 2c 03 	sts	0x032C, r24

	allocd_mem_tail->loc = NULL;
    915c:	e0 91 2c 03 	lds	r30, 0x032C
    9160:	f0 91 2d 03 	lds	r31, 0x032D
    9164:	11 82       	std	Z+1, r1	; 0x01
    9166:	10 82       	st	Z, r1
	allocd_mem_tail->next = NULL;
    9168:	e0 91 2c 03 	lds	r30, 0x032C
    916c:	f0 91 2d 03 	lds	r31, 0x032D
    9170:	13 82       	std	Z+3, r1	; 0x03
    9172:	12 82       	std	Z+2, r1	; 0x02
}
    9174:	0f 90       	pop	r0
    9176:	0f 90       	pop	r0
    9178:	0f 90       	pop	r0
    917a:	0f 90       	pop	r0
    917c:	cf 91       	pop	r28
    917e:	df 91       	pop	r29
    9180:	1f 91       	pop	r17
    9182:	0f 91       	pop	r16
    9184:	08 95       	ret

00009186 <remove_allocd_mem_node_by_location>:



void remove_allocd_mem_node_by_location(TVP loc)
{
    9186:	df 93       	push	r29
    9188:	cf 93       	push	r28
    918a:	00 d0       	rcall	.+0      	; 0x918c <remove_allocd_mem_node_by_location+0x6>
    918c:	00 d0       	rcall	.+0      	; 0x918e <remove_allocd_mem_node_by_location+0x8>
    918e:	00 d0       	rcall	.+0      	; 0x9190 <remove_allocd_mem_node_by_location+0xa>
    9190:	cd b7       	in	r28, 0x3d	; 61
    9192:	de b7       	in	r29, 0x3e	; 62
    9194:	9e 83       	std	Y+6, r25	; 0x06
    9196:	8d 83       	std	Y+5, r24	; 0x05
	struct alloc_list_node *tmp, *prev;

	prev = NULL;
    9198:	1a 82       	std	Y+2, r1	; 0x02
    919a:	19 82       	std	Y+1, r1	; 0x01
	tmp = allocd_mem_head;
    919c:	80 91 2a 03 	lds	r24, 0x032A
    91a0:	90 91 2b 03 	lds	r25, 0x032B
    91a4:	9c 83       	std	Y+4, r25	; 0x04
    91a6:	8b 83       	std	Y+3, r24	; 0x03

	if(tmp == NULL)
    91a8:	8b 81       	ldd	r24, Y+3	; 0x03
    91aa:	9c 81       	ldd	r25, Y+4	; 0x04
    91ac:	00 97       	sbiw	r24, 0x00	; 0
    91ae:	09 f4       	brne	.+2      	; 0x91b2 <remove_allocd_mem_node_by_location+0x2c>
    91b0:	51 c0       	rjmp	.+162    	; 0x9254 <remove_allocd_mem_node_by_location+0xce>
    91b2:	0e c0       	rjmp	.+28     	; 0x91d0 <remove_allocd_mem_node_by_location+0x4a>
		return;
	}

	while(tmp->loc != loc)
	{
		prev = tmp;
    91b4:	8b 81       	ldd	r24, Y+3	; 0x03
    91b6:	9c 81       	ldd	r25, Y+4	; 0x04
    91b8:	9a 83       	std	Y+2, r25	; 0x02
    91ba:	89 83       	std	Y+1, r24	; 0x01
		tmp = tmp->next;
    91bc:	eb 81       	ldd	r30, Y+3	; 0x03
    91be:	fc 81       	ldd	r31, Y+4	; 0x04
    91c0:	82 81       	ldd	r24, Z+2	; 0x02
    91c2:	93 81       	ldd	r25, Z+3	; 0x03
    91c4:	9c 83       	std	Y+4, r25	; 0x04
    91c6:	8b 83       	std	Y+3, r24	; 0x03

		if(tmp == NULL)
    91c8:	8b 81       	ldd	r24, Y+3	; 0x03
    91ca:	9c 81       	ldd	r25, Y+4	; 0x04
    91cc:	00 97       	sbiw	r24, 0x00	; 0
    91ce:	49 f0       	breq	.+18     	; 0x91e2 <remove_allocd_mem_node_by_location+0x5c>
	{
		/* GC list empty.  */
		return;
	}

	while(tmp->loc != loc)
    91d0:	eb 81       	ldd	r30, Y+3	; 0x03
    91d2:	fc 81       	ldd	r31, Y+4	; 0x04
    91d4:	20 81       	ld	r18, Z
    91d6:	31 81       	ldd	r19, Z+1	; 0x01
    91d8:	8d 81       	ldd	r24, Y+5	; 0x05
    91da:	9e 81       	ldd	r25, Y+6	; 0x06
    91dc:	28 17       	cp	r18, r24
    91de:	39 07       	cpc	r19, r25
    91e0:	49 f7       	brne	.-46     	; 0x91b4 <remove_allocd_mem_node_by_location+0x2e>
		{
			break;
		}
	}

	if(tmp == NULL)
    91e2:	8b 81       	ldd	r24, Y+3	; 0x03
    91e4:	9c 81       	ldd	r25, Y+4	; 0x04
    91e6:	00 97       	sbiw	r24, 0x00	; 0
    91e8:	a9 f1       	breq	.+106    	; 0x9254 <remove_allocd_mem_node_by_location+0xce>
	{
		/* This memory is not under GC control.  */
		return;
	}
	else if(tmp == allocd_mem_head)
    91ea:	20 91 2a 03 	lds	r18, 0x032A
    91ee:	30 91 2b 03 	lds	r19, 0x032B
    91f2:	8b 81       	ldd	r24, Y+3	; 0x03
    91f4:	9c 81       	ldd	r25, Y+4	; 0x04
    91f6:	82 17       	cp	r24, r18
    91f8:	93 07       	cpc	r25, r19
    91fa:	01 f5       	brne	.+64     	; 0x923c <remove_allocd_mem_node_by_location+0xb6>
	{
		allocd_mem_head = allocd_mem_head->next;
    91fc:	e0 91 2a 03 	lds	r30, 0x032A
    9200:	f0 91 2b 03 	lds	r31, 0x032B
    9204:	82 81       	ldd	r24, Z+2	; 0x02
    9206:	93 81       	ldd	r25, Z+3	; 0x03
    9208:	90 93 2b 03 	sts	0x032B, r25
    920c:	80 93 2a 03 	sts	0x032A, r24
		if(allocd_mem_tail == tmp)
    9210:	20 91 2c 03 	lds	r18, 0x032C
    9214:	30 91 2d 03 	lds	r19, 0x032D
    9218:	8b 81       	ldd	r24, Y+3	; 0x03
    921a:	9c 81       	ldd	r25, Y+4	; 0x04
    921c:	28 17       	cp	r18, r24
    921e:	39 07       	cpc	r19, r25
    9220:	41 f4       	brne	.+16     	; 0x9232 <remove_allocd_mem_node_by_location+0xac>
		{
			allocd_mem_tail = allocd_mem_head;
    9222:	80 91 2a 03 	lds	r24, 0x032A
    9226:	90 91 2b 03 	lds	r25, 0x032B
    922a:	90 93 2d 03 	sts	0x032D, r25
    922e:	80 93 2c 03 	sts	0x032C, r24
		}

		free(tmp);
    9232:	8b 81       	ldd	r24, Y+3	; 0x03
    9234:	9c 81       	ldd	r25, Y+4	; 0x04
    9236:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
    923a:	0c c0       	rjmp	.+24     	; 0x9254 <remove_allocd_mem_node_by_location+0xce>
		return;
	}
	else
	{
		prev->next = tmp->next;
    923c:	eb 81       	ldd	r30, Y+3	; 0x03
    923e:	fc 81       	ldd	r31, Y+4	; 0x04
    9240:	82 81       	ldd	r24, Z+2	; 0x02
    9242:	93 81       	ldd	r25, Z+3	; 0x03
    9244:	e9 81       	ldd	r30, Y+1	; 0x01
    9246:	fa 81       	ldd	r31, Y+2	; 0x02
    9248:	93 83       	std	Z+3, r25	; 0x03
    924a:	82 83       	std	Z+2, r24	; 0x02
		free(tmp);
    924c:	8b 81       	ldd	r24, Y+3	; 0x03
    924e:	9c 81       	ldd	r25, Y+4	; 0x04
    9250:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		return;
	}
	return;
}
    9254:	26 96       	adiw	r28, 0x06	; 6
    9256:	0f b6       	in	r0, 0x3f	; 63
    9258:	f8 94       	cli
    925a:	de bf       	out	0x3e, r29	; 62
    925c:	0f be       	out	0x3f, r0	; 63
    925e:	cd bf       	out	0x3d, r28	; 61
    9260:	cf 91       	pop	r28
    9262:	df 91       	pop	r29
    9264:	08 95       	ret

00009266 <remove_allocd_mem_node>:



void remove_allocd_mem_node(struct alloc_list_node *node)
{
    9266:	df 93       	push	r29
    9268:	cf 93       	push	r28
    926a:	00 d0       	rcall	.+0      	; 0x926c <remove_allocd_mem_node+0x6>
    926c:	00 d0       	rcall	.+0      	; 0x926e <remove_allocd_mem_node+0x8>
    926e:	00 d0       	rcall	.+0      	; 0x9270 <remove_allocd_mem_node+0xa>
    9270:	cd b7       	in	r28, 0x3d	; 61
    9272:	de b7       	in	r29, 0x3e	; 62
    9274:	9e 83       	std	Y+6, r25	; 0x06
    9276:	8d 83       	std	Y+5, r24	; 0x05
	struct alloc_list_node *tmp, *prev;

	tmp = allocd_mem_head;
    9278:	80 91 2a 03 	lds	r24, 0x032A
    927c:	90 91 2b 03 	lds	r25, 0x032B
    9280:	9c 83       	std	Y+4, r25	; 0x04
    9282:	8b 83       	std	Y+3, r24	; 0x03
	prev = NULL;
    9284:	1a 82       	std	Y+2, r1	; 0x02
    9286:	19 82       	std	Y+1, r1	; 0x01

	if(tmp == NULL)
    9288:	8b 81       	ldd	r24, Y+3	; 0x03
    928a:	9c 81       	ldd	r25, Y+4	; 0x04
    928c:	00 97       	sbiw	r24, 0x00	; 0
    928e:	09 f4       	brne	.+2      	; 0x9292 <remove_allocd_mem_node+0x2c>
    9290:	4b c0       	rjmp	.+150    	; 0x9328 <remove_allocd_mem_node+0xc2>
    9292:	0e c0       	rjmp	.+28     	; 0x92b0 <remove_allocd_mem_node+0x4a>
		return;
	}

	while(tmp != node)
	{
		prev = tmp;
    9294:	8b 81       	ldd	r24, Y+3	; 0x03
    9296:	9c 81       	ldd	r25, Y+4	; 0x04
    9298:	9a 83       	std	Y+2, r25	; 0x02
    929a:	89 83       	std	Y+1, r24	; 0x01
		tmp = tmp->next;
    929c:	eb 81       	ldd	r30, Y+3	; 0x03
    929e:	fc 81       	ldd	r31, Y+4	; 0x04
    92a0:	82 81       	ldd	r24, Z+2	; 0x02
    92a2:	93 81       	ldd	r25, Z+3	; 0x03
    92a4:	9c 83       	std	Y+4, r25	; 0x04
    92a6:	8b 83       	std	Y+3, r24	; 0x03

		if(tmp == NULL)
    92a8:	8b 81       	ldd	r24, Y+3	; 0x03
    92aa:	9c 81       	ldd	r25, Y+4	; 0x04
    92ac:	00 97       	sbiw	r24, 0x00	; 0
    92ae:	e1 f1       	breq	.+120    	; 0x9328 <remove_allocd_mem_node+0xc2>
	{
		/* GC list empty.  */
		return;
	}

	while(tmp != node)
    92b0:	2b 81       	ldd	r18, Y+3	; 0x03
    92b2:	3c 81       	ldd	r19, Y+4	; 0x04
    92b4:	8d 81       	ldd	r24, Y+5	; 0x05
    92b6:	9e 81       	ldd	r25, Y+6	; 0x06
    92b8:	28 17       	cp	r18, r24
    92ba:	39 07       	cpc	r19, r25
    92bc:	59 f7       	brne	.-42     	; 0x9294 <remove_allocd_mem_node+0x2e>
		{
			return;
		}
	}

	if(tmp == allocd_mem_head)
    92be:	20 91 2a 03 	lds	r18, 0x032A
    92c2:	30 91 2b 03 	lds	r19, 0x032B
    92c6:	8b 81       	ldd	r24, Y+3	; 0x03
    92c8:	9c 81       	ldd	r25, Y+4	; 0x04
    92ca:	82 17       	cp	r24, r18
    92cc:	93 07       	cpc	r25, r19
    92ce:	01 f5       	brne	.+64     	; 0x9310 <remove_allocd_mem_node+0xaa>
	{
		allocd_mem_head = allocd_mem_head->next;
    92d0:	e0 91 2a 03 	lds	r30, 0x032A
    92d4:	f0 91 2b 03 	lds	r31, 0x032B
    92d8:	82 81       	ldd	r24, Z+2	; 0x02
    92da:	93 81       	ldd	r25, Z+3	; 0x03
    92dc:	90 93 2b 03 	sts	0x032B, r25
    92e0:	80 93 2a 03 	sts	0x032A, r24
		if(allocd_mem_tail == tmp)
    92e4:	20 91 2c 03 	lds	r18, 0x032C
    92e8:	30 91 2d 03 	lds	r19, 0x032D
    92ec:	8b 81       	ldd	r24, Y+3	; 0x03
    92ee:	9c 81       	ldd	r25, Y+4	; 0x04
    92f0:	28 17       	cp	r18, r24
    92f2:	39 07       	cpc	r19, r25
    92f4:	41 f4       	brne	.+16     	; 0x9306 <remove_allocd_mem_node+0xa0>
		{
			allocd_mem_tail = allocd_mem_head;
    92f6:	80 91 2a 03 	lds	r24, 0x032A
    92fa:	90 91 2b 03 	lds	r25, 0x032B
    92fe:	90 93 2d 03 	sts	0x032D, r25
    9302:	80 93 2c 03 	sts	0x032C, r24
		}

		free(node);
    9306:	8d 81       	ldd	r24, Y+5	; 0x05
    9308:	9e 81       	ldd	r25, Y+6	; 0x06
    930a:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
    930e:	0c c0       	rjmp	.+24     	; 0x9328 <remove_allocd_mem_node+0xc2>
		return;
	}
	else
	{
		prev->next = tmp->next;
    9310:	eb 81       	ldd	r30, Y+3	; 0x03
    9312:	fc 81       	ldd	r31, Y+4	; 0x04
    9314:	82 81       	ldd	r24, Z+2	; 0x02
    9316:	93 81       	ldd	r25, Z+3	; 0x03
    9318:	e9 81       	ldd	r30, Y+1	; 0x01
    931a:	fa 81       	ldd	r31, Y+2	; 0x02
    931c:	93 83       	std	Z+3, r25	; 0x03
    931e:	82 83       	std	Z+2, r24	; 0x02
		free(tmp);
    9320:	8b 81       	ldd	r24, Y+3	; 0x03
    9322:	9c 81       	ldd	r25, Y+4	; 0x04
    9324:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
		return;
	}
	return;
}
    9328:	26 96       	adiw	r28, 0x06	; 6
    932a:	0f b6       	in	r0, 0x3f	; 63
    932c:	f8 94       	cli
    932e:	de bf       	out	0x3e, r29	; 62
    9330:	0f be       	out	0x3f, r0	; 63
    9332:	cd bf       	out	0x3d, r28	; 61
    9334:	cf 91       	pop	r28
    9336:	df 91       	pop	r29
    9338:	08 95       	ret

0000933a <vdm_gc_shutdown>:

void vdm_gc_shutdown()
{
    933a:	df 93       	push	r29
    933c:	cf 93       	push	r28
    933e:	00 d0       	rcall	.+0      	; 0x9340 <vdm_gc_shutdown+0x6>
    9340:	00 d0       	rcall	.+0      	; 0x9342 <vdm_gc_shutdown+0x8>
    9342:	cd b7       	in	r28, 0x3d	; 61
    9344:	de b7       	in	r29, 0x3e	; 62
	struct alloc_list_node *tmp, *tmp2;

	tmp = allocd_mem_head;
    9346:	80 91 2a 03 	lds	r24, 0x032A
    934a:	90 91 2b 03 	lds	r25, 0x032B
    934e:	9c 83       	std	Y+4, r25	; 0x04
    9350:	8b 83       	std	Y+3, r24	; 0x03
    9352:	1a c0       	rjmp	.+52     	; 0x9388 <vdm_gc_shutdown+0x4e>

	while(tmp != allocd_mem_tail)
	{
		tmp2 = tmp->next;
    9354:	eb 81       	ldd	r30, Y+3	; 0x03
    9356:	fc 81       	ldd	r31, Y+4	; 0x04
    9358:	82 81       	ldd	r24, Z+2	; 0x02
    935a:	93 81       	ldd	r25, Z+3	; 0x03
    935c:	9a 83       	std	Y+2, r25	; 0x02
    935e:	89 83       	std	Y+1, r24	; 0x01

		if(tmp->loc != NULL)
    9360:	eb 81       	ldd	r30, Y+3	; 0x03
    9362:	fc 81       	ldd	r31, Y+4	; 0x04
    9364:	80 81       	ld	r24, Z
    9366:	91 81       	ldd	r25, Z+1	; 0x01
    9368:	00 97       	sbiw	r24, 0x00	; 0
    936a:	51 f0       	breq	.+20     	; 0x9380 <vdm_gc_shutdown+0x46>
		{
			vdmFree_GCInternal(tmp->loc);
    936c:	eb 81       	ldd	r30, Y+3	; 0x03
    936e:	fc 81       	ldd	r31, Y+4	; 0x04
    9370:	80 81       	ld	r24, Z
    9372:	91 81       	ldd	r25, Z+1	; 0x01
    9374:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <vdmFree_GCInternal>
			remove_allocd_mem_node(tmp);
    9378:	8b 81       	ldd	r24, Y+3	; 0x03
    937a:	9c 81       	ldd	r25, Y+4	; 0x04
    937c:	0e 94 33 49 	call	0x9266	; 0x9266 <remove_allocd_mem_node>
		}
		tmp = tmp2;
    9380:	89 81       	ldd	r24, Y+1	; 0x01
    9382:	9a 81       	ldd	r25, Y+2	; 0x02
    9384:	9c 83       	std	Y+4, r25	; 0x04
    9386:	8b 83       	std	Y+3, r24	; 0x03
{
	struct alloc_list_node *tmp, *tmp2;

	tmp = allocd_mem_head;

	while(tmp != allocd_mem_tail)
    9388:	20 91 2c 03 	lds	r18, 0x032C
    938c:	30 91 2d 03 	lds	r19, 0x032D
    9390:	8b 81       	ldd	r24, Y+3	; 0x03
    9392:	9c 81       	ldd	r25, Y+4	; 0x04
    9394:	82 17       	cp	r24, r18
    9396:	93 07       	cpc	r25, r19
    9398:	e9 f6       	brne	.-70     	; 0x9354 <vdm_gc_shutdown+0x1a>
			vdmFree_GCInternal(tmp->loc);
			remove_allocd_mem_node(tmp);
		}
		tmp = tmp2;
	}
	free(allocd_mem_tail);
    939a:	80 91 2c 03 	lds	r24, 0x032C
    939e:	90 91 2d 03 	lds	r25, 0x032D
    93a2:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	allocd_mem_head = NULL;
    93a6:	10 92 2b 03 	sts	0x032B, r1
    93aa:	10 92 2a 03 	sts	0x032A, r1
	allocd_mem_tail = NULL;
    93ae:	10 92 2d 03 	sts	0x032D, r1
    93b2:	10 92 2c 03 	sts	0x032C, r1
}
    93b6:	0f 90       	pop	r0
    93b8:	0f 90       	pop	r0
    93ba:	0f 90       	pop	r0
    93bc:	0f 90       	pop	r0
    93be:	cf 91       	pop	r28
    93c0:	df 91       	pop	r29
    93c2:	08 95       	ret

000093c4 <vdm_gc>:

void vdm_gc()
{
    93c4:	df 93       	push	r29
    93c6:	cf 93       	push	r28
    93c8:	00 d0       	rcall	.+0      	; 0x93ca <vdm_gc+0x6>
    93ca:	00 d0       	rcall	.+0      	; 0x93cc <vdm_gc+0x8>
    93cc:	00 d0       	rcall	.+0      	; 0x93ce <vdm_gc+0xa>
    93ce:	cd b7       	in	r28, 0x3d	; 61
    93d0:	de b7       	in	r29, 0x3e	; 62
	struct alloc_list_node *current, *tmp;
	TVP tmp_loc;

	current = allocd_mem_head;
    93d2:	80 91 2a 03 	lds	r24, 0x032A
    93d6:	90 91 2b 03 	lds	r25, 0x032B
    93da:	9a 83       	std	Y+2, r25	; 0x02
    93dc:	89 83       	std	Y+1, r24	; 0x01

	/* Nothing to do if no memory currently allocated.  */
	if(current->loc == NULL && current->next == NULL)
    93de:	e9 81       	ldd	r30, Y+1	; 0x01
    93e0:	fa 81       	ldd	r31, Y+2	; 0x02
    93e2:	80 81       	ld	r24, Z
    93e4:	91 81       	ldd	r25, Z+1	; 0x01
    93e6:	00 97       	sbiw	r24, 0x00	; 0
    93e8:	09 f0       	breq	.+2      	; 0x93ec <vdm_gc+0x28>
    93ea:	9a c0       	rjmp	.+308    	; 0x9520 <vdm_gc+0x15c>
    93ec:	e9 81       	ldd	r30, Y+1	; 0x01
    93ee:	fa 81       	ldd	r31, Y+2	; 0x02
    93f0:	82 81       	ldd	r24, Z+2	; 0x02
    93f2:	93 81       	ldd	r25, Z+3	; 0x03
    93f4:	00 97       	sbiw	r24, 0x00	; 0
    93f6:	09 f4       	brne	.+2      	; 0x93fa <vdm_gc+0x36>
    93f8:	9d c0       	rjmp	.+314    	; 0x9534 <vdm_gc+0x170>
    93fa:	92 c0       	rjmp	.+292    	; 0x9520 <vdm_gc+0x15c>
		return;

	while(current != allocd_mem_tail)
	{
		tmp = current->next;
    93fc:	e9 81       	ldd	r30, Y+1	; 0x01
    93fe:	fa 81       	ldd	r31, Y+2	; 0x02
    9400:	82 81       	ldd	r24, Z+2	; 0x02
    9402:	93 81       	ldd	r25, Z+3	; 0x03
    9404:	9c 83       	std	Y+4, r25	; 0x04
    9406:	8b 83       	std	Y+3, r24	; 0x03
		tmp_loc = current->loc;
    9408:	e9 81       	ldd	r30, Y+1	; 0x01
    940a:	fa 81       	ldd	r31, Y+2	; 0x02
    940c:	80 81       	ld	r24, Z
    940e:	91 81       	ldd	r25, Z+1	; 0x01
    9410:	9e 83       	std	Y+6, r25	; 0x06
    9412:	8d 83       	std	Y+5, r24	; 0x05

		/* No information was passed about where the reference was assigned.  */
		/* This is the case when the value is created in-place or when freed using vdmFree().  */
		if(current->loc->ref_from == NULL)
    9414:	e9 81       	ldd	r30, Y+1	; 0x01
    9416:	fa 81       	ldd	r31, Y+2	; 0x02
    9418:	01 90       	ld	r0, Z+
    941a:	f0 81       	ld	r31, Z
    941c:	e0 2d       	mov	r30, r0
    941e:	82 81       	ldd	r24, Z+2	; 0x02
    9420:	93 81       	ldd	r25, Z+3	; 0x03
    9422:	00 97       	sbiw	r24, 0x00	; 0
    9424:	49 f4       	brne	.+18     	; 0x9438 <vdm_gc+0x74>
		{
			remove_allocd_mem_node(current);
    9426:	89 81       	ldd	r24, Y+1	; 0x01
    9428:	9a 81       	ldd	r25, Y+2	; 0x02
    942a:	0e 94 33 49 	call	0x9266	; 0x9266 <remove_allocd_mem_node>
			vdmFree_GCInternal(tmp_loc);
    942e:	8d 81       	ldd	r24, Y+5	; 0x05
    9430:	9e 81       	ldd	r25, Y+6	; 0x06
    9432:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <vdmFree_GCInternal>
    9436:	70 c0       	rjmp	.+224    	; 0x9518 <vdm_gc+0x154>
		}
		else if(*(current->loc->ref_from) != current->loc)
    9438:	e9 81       	ldd	r30, Y+1	; 0x01
    943a:	fa 81       	ldd	r31, Y+2	; 0x02
    943c:	01 90       	ld	r0, Z+
    943e:	f0 81       	ld	r31, Z
    9440:	e0 2d       	mov	r30, r0
    9442:	02 80       	ldd	r0, Z+2	; 0x02
    9444:	f3 81       	ldd	r31, Z+3	; 0x03
    9446:	e0 2d       	mov	r30, r0
    9448:	20 81       	ld	r18, Z
    944a:	31 81       	ldd	r19, Z+1	; 0x01
    944c:	e9 81       	ldd	r30, Y+1	; 0x01
    944e:	fa 81       	ldd	r31, Y+2	; 0x02
    9450:	80 81       	ld	r24, Z
    9452:	91 81       	ldd	r25, Z+1	; 0x01
    9454:	28 17       	cp	r18, r24
    9456:	39 07       	cpc	r19, r25
    9458:	09 f4       	brne	.+2      	; 0x945c <vdm_gc+0x98>
    945a:	5e c0       	rjmp	.+188    	; 0x9518 <vdm_gc+0x154>
		{
			/* For compatibility with vdmFree().  */
			/* Check that there is no interference between this call's stack  */
			/* variables and the reference to the memory we are freeing  */
			/* Before NULLing the referencing location for vdmFree.  */
			if(!((((void *)&tmp) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&tmp + 1))) ||
    945c:	e9 81       	ldd	r30, Y+1	; 0x01
    945e:	fa 81       	ldd	r31, Y+2	; 0x02
    9460:	01 90       	ld	r0, Z+
    9462:	f0 81       	ld	r31, Z
    9464:	e0 2d       	mov	r30, r0
    9466:	22 81       	ldd	r18, Z+2	; 0x02
    9468:	33 81       	ldd	r19, Z+3	; 0x03
    946a:	ce 01       	movw	r24, r28
    946c:	03 96       	adiw	r24, 0x03	; 3
    946e:	28 17       	cp	r18, r24
    9470:	39 07       	cpc	r19, r25
    9472:	68 f0       	brcs	.+26     	; 0x948e <vdm_gc+0xca>
    9474:	e9 81       	ldd	r30, Y+1	; 0x01
    9476:	fa 81       	ldd	r31, Y+2	; 0x02
    9478:	01 90       	ld	r0, Z+
    947a:	f0 81       	ld	r31, Z
    947c:	e0 2d       	mov	r30, r0
    947e:	22 81       	ldd	r18, Z+2	; 0x02
    9480:	33 81       	ldd	r19, Z+3	; 0x03
    9482:	ce 01       	movw	r24, r28
    9484:	03 96       	adiw	r24, 0x03	; 3
    9486:	02 96       	adiw	r24, 0x02	; 2
    9488:	82 17       	cp	r24, r18
    948a:	93 07       	cpc	r25, r19
    948c:	d8 f5       	brcc	.+118    	; 0x9504 <vdm_gc+0x140>
    948e:	e9 81       	ldd	r30, Y+1	; 0x01
    9490:	fa 81       	ldd	r31, Y+2	; 0x02
    9492:	01 90       	ld	r0, Z+
    9494:	f0 81       	ld	r31, Z
    9496:	e0 2d       	mov	r30, r0
    9498:	22 81       	ldd	r18, Z+2	; 0x02
    949a:	33 81       	ldd	r19, Z+3	; 0x03
    949c:	ce 01       	movw	r24, r28
    949e:	01 96       	adiw	r24, 0x01	; 1
    94a0:	28 17       	cp	r18, r24
    94a2:	39 07       	cpc	r19, r25
    94a4:	60 f0       	brcs	.+24     	; 0x94be <vdm_gc+0xfa>
    94a6:	e9 81       	ldd	r30, Y+1	; 0x01
    94a8:	fa 81       	ldd	r31, Y+2	; 0x02
    94aa:	01 90       	ld	r0, Z+
    94ac:	f0 81       	ld	r31, Z
    94ae:	e0 2d       	mov	r30, r0
    94b0:	22 81       	ldd	r18, Z+2	; 0x02
    94b2:	33 81       	ldd	r19, Z+3	; 0x03
    94b4:	ce 01       	movw	r24, r28
    94b6:	03 96       	adiw	r24, 0x03	; 3
    94b8:	82 17       	cp	r24, r18
    94ba:	93 07       	cpc	r25, r19
    94bc:	18 f5       	brcc	.+70     	; 0x9504 <vdm_gc+0x140>
    94be:	e9 81       	ldd	r30, Y+1	; 0x01
    94c0:	fa 81       	ldd	r31, Y+2	; 0x02
    94c2:	01 90       	ld	r0, Z+
    94c4:	f0 81       	ld	r31, Z
    94c6:	e0 2d       	mov	r30, r0
    94c8:	22 81       	ldd	r18, Z+2	; 0x02
    94ca:	33 81       	ldd	r19, Z+3	; 0x03
    94cc:	ce 01       	movw	r24, r28
    94ce:	05 96       	adiw	r24, 0x05	; 5
    94d0:	28 17       	cp	r18, r24
    94d2:	39 07       	cpc	r19, r25
    94d4:	68 f0       	brcs	.+26     	; 0x94f0 <vdm_gc+0x12c>
    94d6:	e9 81       	ldd	r30, Y+1	; 0x01
    94d8:	fa 81       	ldd	r31, Y+2	; 0x02
    94da:	01 90       	ld	r0, Z+
    94dc:	f0 81       	ld	r31, Z
    94de:	e0 2d       	mov	r30, r0
    94e0:	22 81       	ldd	r18, Z+2	; 0x02
    94e2:	33 81       	ldd	r19, Z+3	; 0x03
    94e4:	ce 01       	movw	r24, r28
    94e6:	05 96       	adiw	r24, 0x05	; 5
    94e8:	02 96       	adiw	r24, 0x02	; 2
    94ea:	82 17       	cp	r24, r18
    94ec:	93 07       	cpc	r25, r19
    94ee:	50 f4       	brcc	.+20     	; 0x9504 <vdm_gc+0x140>
					(((void *)&current) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&current + 1))) ||
					(((void *)&tmp_loc) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&tmp_loc + 1)))))
				*(current->loc->ref_from) = NULL;
    94f0:	e9 81       	ldd	r30, Y+1	; 0x01
    94f2:	fa 81       	ldd	r31, Y+2	; 0x02
    94f4:	01 90       	ld	r0, Z+
    94f6:	f0 81       	ld	r31, Z
    94f8:	e0 2d       	mov	r30, r0
    94fa:	02 80       	ldd	r0, Z+2	; 0x02
    94fc:	f3 81       	ldd	r31, Z+3	; 0x03
    94fe:	e0 2d       	mov	r30, r0
    9500:	11 82       	std	Z+1, r1	; 0x01
    9502:	10 82       	st	Z, r1


			vdmFree_GCInternal(current->loc);
    9504:	e9 81       	ldd	r30, Y+1	; 0x01
    9506:	fa 81       	ldd	r31, Y+2	; 0x02
    9508:	80 81       	ld	r24, Z
    950a:	91 81       	ldd	r25, Z+1	; 0x01
    950c:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <vdmFree_GCInternal>
			remove_allocd_mem_node(current);
    9510:	89 81       	ldd	r24, Y+1	; 0x01
    9512:	9a 81       	ldd	r25, Y+2	; 0x02
    9514:	0e 94 33 49 	call	0x9266	; 0x9266 <remove_allocd_mem_node>
		}
		current = tmp;
    9518:	8b 81       	ldd	r24, Y+3	; 0x03
    951a:	9c 81       	ldd	r25, Y+4	; 0x04
    951c:	9a 83       	std	Y+2, r25	; 0x02
    951e:	89 83       	std	Y+1, r24	; 0x01

	/* Nothing to do if no memory currently allocated.  */
	if(current->loc == NULL && current->next == NULL)
		return;

	while(current != allocd_mem_tail)
    9520:	29 81       	ldd	r18, Y+1	; 0x01
    9522:	3a 81       	ldd	r19, Y+2	; 0x02
    9524:	80 91 2c 03 	lds	r24, 0x032C
    9528:	90 91 2d 03 	lds	r25, 0x032D
    952c:	28 17       	cp	r18, r24
    952e:	39 07       	cpc	r19, r25
    9530:	09 f0       	breq	.+2      	; 0x9534 <vdm_gc+0x170>
    9532:	64 cf       	rjmp	.-312    	; 0x93fc <vdm_gc+0x38>
			vdmFree_GCInternal(current->loc);
			remove_allocd_mem_node(current);
		}
		current = tmp;
	}
}
    9534:	26 96       	adiw	r28, 0x06	; 6
    9536:	0f b6       	in	r0, 0x3f	; 63
    9538:	f8 94       	cli
    953a:	de bf       	out	0x3e, r29	; 62
    953c:	0f be       	out	0x3f, r0	; 63
    953e:	cd bf       	out	0x3d, r28	; 61
    9540:	cf 91       	pop	r28
    9542:	df 91       	pop	r29
    9544:	08 95       	ret

00009546 <newTypeValueGC>:

/* #ifdef WITH_GC  */
/* ===============  Garbage collected versions  ==============  */
TVP newTypeValueGC(vdmtype type, TypedValueType value, TVP *ref_from)
{
    9546:	df 93       	push	r29
    9548:	cf 93       	push	r28
    954a:	cd b7       	in	r28, 0x3d	; 61
    954c:	de b7       	in	r29, 0x3e	; 62
    954e:	2a 97       	sbiw	r28, 0x0a	; 10
    9550:	0f b6       	in	r0, 0x3f	; 63
    9552:	f8 94       	cli
    9554:	de bf       	out	0x3e, r29	; 62
    9556:	0f be       	out	0x3f, r0	; 63
    9558:	cd bf       	out	0x3d, r28	; 61
    955a:	9c 83       	std	Y+4, r25	; 0x04
    955c:	8b 83       	std	Y+3, r24	; 0x03
    955e:	4d 83       	std	Y+5, r20	; 0x05
    9560:	5e 83       	std	Y+6, r21	; 0x06
    9562:	6f 83       	std	Y+7, r22	; 0x07
    9564:	78 87       	std	Y+8, r23	; 0x08
    9566:	3a 87       	std	Y+10, r19	; 0x0a
    9568:	29 87       	std	Y+9, r18	; 0x09
	TVP ptr = (TVP) malloc(sizeof(struct TypedValue));
    956a:	88 e0       	ldi	r24, 0x08	; 8
    956c:	90 e0       	ldi	r25, 0x00	; 0
    956e:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    9572:	9a 83       	std	Y+2, r25	; 0x02
    9574:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    9576:	89 81       	ldd	r24, Y+1	; 0x01
    9578:	9a 81       	ldd	r25, Y+2	; 0x02
    957a:	00 97       	sbiw	r24, 0x00	; 0
    957c:	11 f4       	brne	.+4      	; 0x9582 <newTypeValueGC+0x3c>
    957e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ptr->type = type;
    9582:	e9 81       	ldd	r30, Y+1	; 0x01
    9584:	fa 81       	ldd	r31, Y+2	; 0x02
    9586:	8b 81       	ldd	r24, Y+3	; 0x03
    9588:	9c 81       	ldd	r25, Y+4	; 0x04
    958a:	91 83       	std	Z+1, r25	; 0x01
    958c:	80 83       	st	Z, r24
	ptr->value = value;
    958e:	e9 81       	ldd	r30, Y+1	; 0x01
    9590:	fa 81       	ldd	r31, Y+2	; 0x02
    9592:	8d 81       	ldd	r24, Y+5	; 0x05
    9594:	9e 81       	ldd	r25, Y+6	; 0x06
    9596:	af 81       	ldd	r26, Y+7	; 0x07
    9598:	b8 85       	ldd	r27, Y+8	; 0x08
    959a:	84 83       	std	Z+4, r24	; 0x04
    959c:	95 83       	std	Z+5, r25	; 0x05
    959e:	a6 83       	std	Z+6, r26	; 0x06
    95a0:	b7 83       	std	Z+7, r27	; 0x07
	add_allocd_mem_node(ptr, ref_from);
    95a2:	89 81       	ldd	r24, Y+1	; 0x01
    95a4:	9a 81       	ldd	r25, Y+2	; 0x02
    95a6:	29 85       	ldd	r18, Y+9	; 0x09
    95a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    95aa:	b9 01       	movw	r22, r18
    95ac:	0e 94 70 48 	call	0x90e0	; 0x90e0 <add_allocd_mem_node>

	return ptr;
    95b0:	89 81       	ldd	r24, Y+1	; 0x01
    95b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    95b4:	2a 96       	adiw	r28, 0x0a	; 10
    95b6:	0f b6       	in	r0, 0x3f	; 63
    95b8:	f8 94       	cli
    95ba:	de bf       	out	0x3e, r29	; 62
    95bc:	0f be       	out	0x3f, r0	; 63
    95be:	cd bf       	out	0x3d, r28	; 61
    95c0:	cf 91       	pop	r28
    95c2:	df 91       	pop	r29
    95c4:	08 95       	ret

000095c6 <newIntGC>:

/* / Basic  */
TVP newIntGC(int x, TVP *from)
{
    95c6:	df 93       	push	r29
    95c8:	cf 93       	push	r28
    95ca:	cd b7       	in	r28, 0x3d	; 61
    95cc:	de b7       	in	r29, 0x3e	; 62
    95ce:	28 97       	sbiw	r28, 0x08	; 8
    95d0:	0f b6       	in	r0, 0x3f	; 63
    95d2:	f8 94       	cli
    95d4:	de bf       	out	0x3e, r29	; 62
    95d6:	0f be       	out	0x3f, r0	; 63
    95d8:	cd bf       	out	0x3d, r28	; 61
    95da:	9e 83       	std	Y+6, r25	; 0x06
    95dc:	8d 83       	std	Y+5, r24	; 0x05
    95de:	78 87       	std	Y+8, r23	; 0x08
    95e0:	6f 83       	std	Y+7, r22	; 0x07
	return newTypeValueGC(VDM_INT, (TypedValueType
	)
			{ .intVal = x }, from);
    95e2:	19 82       	std	Y+1, r1	; 0x01
    95e4:	1a 82       	std	Y+2, r1	; 0x02
    95e6:	1b 82       	std	Y+3, r1	; 0x03
    95e8:	1c 82       	std	Y+4, r1	; 0x04
    95ea:	8d 81       	ldd	r24, Y+5	; 0x05
    95ec:	9e 81       	ldd	r25, Y+6	; 0x06
    95ee:	9a 83       	std	Y+2, r25	; 0x02
    95f0:	89 83       	std	Y+1, r24	; 0x01
}

/* / Basic  */
TVP newIntGC(int x, TVP *from)
{
	return newTypeValueGC(VDM_INT, (TypedValueType
    95f2:	29 81       	ldd	r18, Y+1	; 0x01
    95f4:	3a 81       	ldd	r19, Y+2	; 0x02
    95f6:	4b 81       	ldd	r20, Y+3	; 0x03
    95f8:	5c 81       	ldd	r21, Y+4	; 0x04
    95fa:	ef 81       	ldd	r30, Y+7	; 0x07
    95fc:	f8 85       	ldd	r31, Y+8	; 0x08
    95fe:	80 e0       	ldi	r24, 0x00	; 0
    9600:	90 e0       	ldi	r25, 0x00	; 0
    9602:	ba 01       	movw	r22, r20
    9604:	a9 01       	movw	r20, r18
    9606:	9f 01       	movw	r18, r30
    9608:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .intVal = x }, from);
}
    960c:	28 96       	adiw	r28, 0x08	; 8
    960e:	0f b6       	in	r0, 0x3f	; 63
    9610:	f8 94       	cli
    9612:	de bf       	out	0x3e, r29	; 62
    9614:	0f be       	out	0x3f, r0	; 63
    9616:	cd bf       	out	0x3d, r28	; 61
    9618:	cf 91       	pop	r28
    961a:	df 91       	pop	r29
    961c:	08 95       	ret

0000961e <newBoolGC>:

TVP newBoolGC(bool x, TVP *from)
{
    961e:	df 93       	push	r29
    9620:	cf 93       	push	r28
    9622:	cd b7       	in	r28, 0x3d	; 61
    9624:	de b7       	in	r29, 0x3e	; 62
    9626:	27 97       	sbiw	r28, 0x07	; 7
    9628:	0f b6       	in	r0, 0x3f	; 63
    962a:	f8 94       	cli
    962c:	de bf       	out	0x3e, r29	; 62
    962e:	0f be       	out	0x3f, r0	; 63
    9630:	cd bf       	out	0x3d, r28	; 61
    9632:	8d 83       	std	Y+5, r24	; 0x05
    9634:	7f 83       	std	Y+7, r23	; 0x07
    9636:	6e 83       	std	Y+6, r22	; 0x06
	return newTypeValueGC(VDM_BOOL, (TypedValueType
	)
			{ .boolVal = x }, from);
    9638:	19 82       	std	Y+1, r1	; 0x01
    963a:	1a 82       	std	Y+2, r1	; 0x02
    963c:	1b 82       	std	Y+3, r1	; 0x03
    963e:	1c 82       	std	Y+4, r1	; 0x04
    9640:	8d 81       	ldd	r24, Y+5	; 0x05
    9642:	89 83       	std	Y+1, r24	; 0x01
			{ .intVal = x }, from);
}

TVP newBoolGC(bool x, TVP *from)
{
	return newTypeValueGC(VDM_BOOL, (TypedValueType
    9644:	29 81       	ldd	r18, Y+1	; 0x01
    9646:	3a 81       	ldd	r19, Y+2	; 0x02
    9648:	4b 81       	ldd	r20, Y+3	; 0x03
    964a:	5c 81       	ldd	r21, Y+4	; 0x04
    964c:	ee 81       	ldd	r30, Y+6	; 0x06
    964e:	ff 81       	ldd	r31, Y+7	; 0x07
    9650:	83 e0       	ldi	r24, 0x03	; 3
    9652:	90 e0       	ldi	r25, 0x00	; 0
    9654:	ba 01       	movw	r22, r20
    9656:	a9 01       	movw	r20, r18
    9658:	9f 01       	movw	r18, r30
    965a:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .boolVal = x }, from);
}
    965e:	27 96       	adiw	r28, 0x07	; 7
    9660:	0f b6       	in	r0, 0x3f	; 63
    9662:	f8 94       	cli
    9664:	de bf       	out	0x3e, r29	; 62
    9666:	0f be       	out	0x3f, r0	; 63
    9668:	cd bf       	out	0x3d, r28	; 61
    966a:	cf 91       	pop	r28
    966c:	df 91       	pop	r29
    966e:	08 95       	ret

00009670 <newRealGC>:

TVP newRealGC(double x, TVP *from)
{
    9670:	df 93       	push	r29
    9672:	cf 93       	push	r28
    9674:	cd b7       	in	r28, 0x3d	; 61
    9676:	de b7       	in	r29, 0x3e	; 62
    9678:	2a 97       	sbiw	r28, 0x0a	; 10
    967a:	0f b6       	in	r0, 0x3f	; 63
    967c:	f8 94       	cli
    967e:	de bf       	out	0x3e, r29	; 62
    9680:	0f be       	out	0x3f, r0	; 63
    9682:	cd bf       	out	0x3d, r28	; 61
    9684:	6d 83       	std	Y+5, r22	; 0x05
    9686:	7e 83       	std	Y+6, r23	; 0x06
    9688:	8f 83       	std	Y+7, r24	; 0x07
    968a:	98 87       	std	Y+8, r25	; 0x08
    968c:	5a 87       	std	Y+10, r21	; 0x0a
    968e:	49 87       	std	Y+9, r20	; 0x09
	return newTypeValueGC(VDM_REAL, (TypedValueType
	)
			{ .doubleVal = x }, from);
    9690:	19 82       	std	Y+1, r1	; 0x01
    9692:	1a 82       	std	Y+2, r1	; 0x02
    9694:	1b 82       	std	Y+3, r1	; 0x03
    9696:	1c 82       	std	Y+4, r1	; 0x04
    9698:	8d 81       	ldd	r24, Y+5	; 0x05
    969a:	9e 81       	ldd	r25, Y+6	; 0x06
    969c:	af 81       	ldd	r26, Y+7	; 0x07
    969e:	b8 85       	ldd	r27, Y+8	; 0x08
    96a0:	89 83       	std	Y+1, r24	; 0x01
    96a2:	9a 83       	std	Y+2, r25	; 0x02
    96a4:	ab 83       	std	Y+3, r26	; 0x03
    96a6:	bc 83       	std	Y+4, r27	; 0x04
			{ .boolVal = x }, from);
}

TVP newRealGC(double x, TVP *from)
{
	return newTypeValueGC(VDM_REAL, (TypedValueType
    96a8:	29 81       	ldd	r18, Y+1	; 0x01
    96aa:	3a 81       	ldd	r19, Y+2	; 0x02
    96ac:	4b 81       	ldd	r20, Y+3	; 0x03
    96ae:	5c 81       	ldd	r21, Y+4	; 0x04
    96b0:	e9 85       	ldd	r30, Y+9	; 0x09
    96b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    96b4:	84 e0       	ldi	r24, 0x04	; 4
    96b6:	90 e0       	ldi	r25, 0x00	; 0
    96b8:	ba 01       	movw	r22, r20
    96ba:	a9 01       	movw	r20, r18
    96bc:	9f 01       	movw	r18, r30
    96be:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .doubleVal = x }, from);
}
    96c2:	2a 96       	adiw	r28, 0x0a	; 10
    96c4:	0f b6       	in	r0, 0x3f	; 63
    96c6:	f8 94       	cli
    96c8:	de bf       	out	0x3e, r29	; 62
    96ca:	0f be       	out	0x3f, r0	; 63
    96cc:	cd bf       	out	0x3d, r28	; 61
    96ce:	cf 91       	pop	r28
    96d0:	df 91       	pop	r29
    96d2:	08 95       	ret

000096d4 <newCharGC>:

TVP newCharGC(char x, TVP *from)
{
    96d4:	df 93       	push	r29
    96d6:	cf 93       	push	r28
    96d8:	cd b7       	in	r28, 0x3d	; 61
    96da:	de b7       	in	r29, 0x3e	; 62
    96dc:	27 97       	sbiw	r28, 0x07	; 7
    96de:	0f b6       	in	r0, 0x3f	; 63
    96e0:	f8 94       	cli
    96e2:	de bf       	out	0x3e, r29	; 62
    96e4:	0f be       	out	0x3f, r0	; 63
    96e6:	cd bf       	out	0x3d, r28	; 61
    96e8:	8d 83       	std	Y+5, r24	; 0x05
    96ea:	7f 83       	std	Y+7, r23	; 0x07
    96ec:	6e 83       	std	Y+6, r22	; 0x06
	return newTypeValueGC(VDM_CHAR, (TypedValueType
	)
			{ .charVal = x }, from);
    96ee:	19 82       	std	Y+1, r1	; 0x01
    96f0:	1a 82       	std	Y+2, r1	; 0x02
    96f2:	1b 82       	std	Y+3, r1	; 0x03
    96f4:	1c 82       	std	Y+4, r1	; 0x04
    96f6:	8d 81       	ldd	r24, Y+5	; 0x05
    96f8:	89 83       	std	Y+1, r24	; 0x01
			{ .doubleVal = x }, from);
}

TVP newCharGC(char x, TVP *from)
{
	return newTypeValueGC(VDM_CHAR, (TypedValueType
    96fa:	29 81       	ldd	r18, Y+1	; 0x01
    96fc:	3a 81       	ldd	r19, Y+2	; 0x02
    96fe:	4b 81       	ldd	r20, Y+3	; 0x03
    9700:	5c 81       	ldd	r21, Y+4	; 0x04
    9702:	ee 81       	ldd	r30, Y+6	; 0x06
    9704:	ff 81       	ldd	r31, Y+7	; 0x07
    9706:	86 e0       	ldi	r24, 0x06	; 6
    9708:	90 e0       	ldi	r25, 0x00	; 0
    970a:	ba 01       	movw	r22, r20
    970c:	a9 01       	movw	r20, r18
    970e:	9f 01       	movw	r18, r30
    9710:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .charVal = x }, from);
}
    9714:	27 96       	adiw	r28, 0x07	; 7
    9716:	0f b6       	in	r0, 0x3f	; 63
    9718:	f8 94       	cli
    971a:	de bf       	out	0x3e, r29	; 62
    971c:	0f be       	out	0x3f, r0	; 63
    971e:	cd bf       	out	0x3d, r28	; 61
    9720:	cf 91       	pop	r28
    9722:	df 91       	pop	r29
    9724:	08 95       	ret

00009726 <newQuoteGC>:

TVP newQuoteGC(unsigned int x, TVP *from)
{
    9726:	df 93       	push	r29
    9728:	cf 93       	push	r28
    972a:	cd b7       	in	r28, 0x3d	; 61
    972c:	de b7       	in	r29, 0x3e	; 62
    972e:	28 97       	sbiw	r28, 0x08	; 8
    9730:	0f b6       	in	r0, 0x3f	; 63
    9732:	f8 94       	cli
    9734:	de bf       	out	0x3e, r29	; 62
    9736:	0f be       	out	0x3f, r0	; 63
    9738:	cd bf       	out	0x3d, r28	; 61
    973a:	9e 83       	std	Y+6, r25	; 0x06
    973c:	8d 83       	std	Y+5, r24	; 0x05
    973e:	78 87       	std	Y+8, r23	; 0x08
    9740:	6f 83       	std	Y+7, r22	; 0x07
	return newTypeValueGC(VDM_QUOTE, (TypedValueType
	)
			{ .quoteVal = x }, from);
    9742:	19 82       	std	Y+1, r1	; 0x01
    9744:	1a 82       	std	Y+2, r1	; 0x02
    9746:	1b 82       	std	Y+3, r1	; 0x03
    9748:	1c 82       	std	Y+4, r1	; 0x04
    974a:	8d 81       	ldd	r24, Y+5	; 0x05
    974c:	9e 81       	ldd	r25, Y+6	; 0x06
    974e:	9a 83       	std	Y+2, r25	; 0x02
    9750:	89 83       	std	Y+1, r24	; 0x01
			{ .charVal = x }, from);
}

TVP newQuoteGC(unsigned int x, TVP *from)
{
	return newTypeValueGC(VDM_QUOTE, (TypedValueType
    9752:	29 81       	ldd	r18, Y+1	; 0x01
    9754:	3a 81       	ldd	r19, Y+2	; 0x02
    9756:	4b 81       	ldd	r20, Y+3	; 0x03
    9758:	5c 81       	ldd	r21, Y+4	; 0x04
    975a:	ef 81       	ldd	r30, Y+7	; 0x07
    975c:	f8 85       	ldd	r31, Y+8	; 0x08
    975e:	89 e0       	ldi	r24, 0x09	; 9
    9760:	90 e0       	ldi	r25, 0x00	; 0
    9762:	ba 01       	movw	r22, r20
    9764:	a9 01       	movw	r20, r18
    9766:	9f 01       	movw	r18, r30
    9768:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .quoteVal = x }, from);
}
    976c:	28 96       	adiw	r28, 0x08	; 8
    976e:	0f b6       	in	r0, 0x3f	; 63
    9770:	f8 94       	cli
    9772:	de bf       	out	0x3e, r29	; 62
    9774:	0f be       	out	0x3f, r0	; 63
    9776:	cd bf       	out	0x3d, r28	; 61
    9778:	cf 91       	pop	r28
    977a:	df 91       	pop	r29
    977c:	08 95       	ret

0000977e <newTokenGC>:

TVP newTokenGC(TVP x, TVP *from)
{
    977e:	df 93       	push	r29
    9780:	cf 93       	push	r28
    9782:	cd b7       	in	r28, 0x3d	; 61
    9784:	de b7       	in	r29, 0x3e	; 62
    9786:	61 97       	sbiw	r28, 0x11	; 17
    9788:	0f b6       	in	r0, 0x3f	; 63
    978a:	f8 94       	cli
    978c:	de bf       	out	0x3e, r29	; 62
    978e:	0f be       	out	0x3f, r0	; 63
    9790:	cd bf       	out	0x3d, r28	; 61
    9792:	9e 87       	std	Y+14, r25	; 0x0e
    9794:	8d 87       	std	Y+13, r24	; 0x0d
    9796:	78 8b       	std	Y+16, r23	; 0x10
    9798:	6f 87       	std	Y+15, r22	; 0x0f
	char *str = unpackString(x);
    979a:	8d 85       	ldd	r24, Y+13	; 0x0d
    979c:	9e 85       	ldd	r25, Y+14	; 0x0e
    979e:	0e 94 3a 69 	call	0xd274	; 0xd274 <unpackString>
    97a2:	98 87       	std	Y+8, r25	; 0x08
    97a4:	8f 83       	std	Y+7, r24	; 0x07
	char *strTmp = str;
    97a6:	8f 81       	ldd	r24, Y+7	; 0x07
    97a8:	98 85       	ldd	r25, Y+8	; 0x08
    97aa:	9e 83       	std	Y+6, r25	; 0x06
    97ac:	8d 83       	std	Y+5, r24	; 0x05
	int hashVal = 5381;
    97ae:	85 e0       	ldi	r24, 0x05	; 5
    97b0:	95 e1       	ldi	r25, 0x15	; 21
    97b2:	9c 83       	std	Y+4, r25	; 0x04
    97b4:	8b 83       	std	Y+3, r24	; 0x03
    97b6:	11 c0       	rjmp	.+34     	; 0x97da <newTokenGC+0x5c>
	int c;

	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;
    97b8:	8b 81       	ldd	r24, Y+3	; 0x03
    97ba:	9c 81       	ldd	r25, Y+4	; 0x04
    97bc:	9c 01       	movw	r18, r24
    97be:	22 0f       	add	r18, r18
    97c0:	33 1f       	adc	r19, r19
    97c2:	22 0f       	add	r18, r18
    97c4:	33 1f       	adc	r19, r19
    97c6:	8b 81       	ldd	r24, Y+3	; 0x03
    97c8:	9c 81       	ldd	r25, Y+4	; 0x04
    97ca:	28 0f       	add	r18, r24
    97cc:	39 1f       	adc	r19, r25
    97ce:	89 81       	ldd	r24, Y+1	; 0x01
    97d0:	9a 81       	ldd	r25, Y+2	; 0x02
    97d2:	82 0f       	add	r24, r18
    97d4:	93 1f       	adc	r25, r19
    97d6:	9c 83       	std	Y+4, r25	; 0x04
    97d8:	8b 83       	std	Y+3, r24	; 0x03
	char *str = unpackString(x);
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
    97da:	ef 81       	ldd	r30, Y+7	; 0x07
    97dc:	f8 85       	ldd	r31, Y+8	; 0x08
    97de:	80 81       	ld	r24, Z
    97e0:	99 27       	eor	r25, r25
    97e2:	87 fd       	sbrc	r24, 7
    97e4:	90 95       	com	r25
    97e6:	9a 83       	std	Y+2, r25	; 0x02
    97e8:	89 83       	std	Y+1, r24	; 0x01
    97ea:	19 8a       	std	Y+17, r1	; 0x11
    97ec:	89 81       	ldd	r24, Y+1	; 0x01
    97ee:	9a 81       	ldd	r25, Y+2	; 0x02
    97f0:	00 97       	sbiw	r24, 0x00	; 0
    97f2:	11 f0       	breq	.+4      	; 0x97f8 <newTokenGC+0x7a>
    97f4:	81 e0       	ldi	r24, 0x01	; 1
    97f6:	89 8b       	std	Y+17, r24	; 0x11
    97f8:	8f 81       	ldd	r24, Y+7	; 0x07
    97fa:	98 85       	ldd	r25, Y+8	; 0x08
    97fc:	01 96       	adiw	r24, 0x01	; 1
    97fe:	98 87       	std	Y+8, r25	; 0x08
    9800:	8f 83       	std	Y+7, r24	; 0x07
    9802:	89 89       	ldd	r24, Y+17	; 0x11
    9804:	88 23       	and	r24, r24
    9806:	c1 f6       	brne	.-80     	; 0x97b8 <newTokenGC+0x3a>
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);
    9808:	8d 81       	ldd	r24, Y+5	; 0x05
    980a:	9e 81       	ldd	r25, Y+6	; 0x06
    980c:	0e 94 67 6d 	call	0xdace	; 0xdace <free>

	return newTypeValueGC(VDM_TOKEN, (TypedValueType
	)
			{ .intVal = hashVal }, from);
    9810:	19 86       	std	Y+9, r1	; 0x09
    9812:	1a 86       	std	Y+10, r1	; 0x0a
    9814:	1b 86       	std	Y+11, r1	; 0x0b
    9816:	1c 86       	std	Y+12, r1	; 0x0c
    9818:	8b 81       	ldd	r24, Y+3	; 0x03
    981a:	9c 81       	ldd	r25, Y+4	; 0x04
    981c:	9a 87       	std	Y+10, r25	; 0x0a
    981e:	89 87       	std	Y+9, r24	; 0x09
	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);

	return newTypeValueGC(VDM_TOKEN, (TypedValueType
    9820:	29 85       	ldd	r18, Y+9	; 0x09
    9822:	3a 85       	ldd	r19, Y+10	; 0x0a
    9824:	4b 85       	ldd	r20, Y+11	; 0x0b
    9826:	5c 85       	ldd	r21, Y+12	; 0x0c
    9828:	ef 85       	ldd	r30, Y+15	; 0x0f
    982a:	f8 89       	ldd	r31, Y+16	; 0x10
    982c:	8a e0       	ldi	r24, 0x0A	; 10
    982e:	90 e0       	ldi	r25, 0x00	; 0
    9830:	ba 01       	movw	r22, r20
    9832:	a9 01       	movw	r20, r18
    9834:	9f 01       	movw	r18, r30
    9836:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
	)
			{ .intVal = hashVal }, from);
}
    983a:	61 96       	adiw	r28, 0x11	; 17
    983c:	0f b6       	in	r0, 0x3f	; 63
    983e:	f8 94       	cli
    9840:	de bf       	out	0x3e, r29	; 62
    9842:	0f be       	out	0x3f, r0	; 63
    9844:	cd bf       	out	0x3d, r28	; 61
    9846:	cf 91       	pop	r28
    9848:	df 91       	pop	r29
    984a:	08 95       	ret

0000984c <vdmCloneGC>:

TVP vdmCloneGC(TVP x, TVP *from)
{
    984c:	0f 93       	push	r16
    984e:	1f 93       	push	r17
    9850:	df 93       	push	r29
    9852:	cf 93       	push	r28
    9854:	cd b7       	in	r28, 0x3d	; 61
    9856:	de b7       	in	r29, 0x3e	; 62
    9858:	68 97       	sbiw	r28, 0x18	; 24
    985a:	0f b6       	in	r0, 0x3f	; 63
    985c:	f8 94       	cli
    985e:	de bf       	out	0x3e, r29	; 62
    9860:	0f be       	out	0x3f, r0	; 63
    9862:	cd bf       	out	0x3d, r28	; 61
    9864:	9a 8b       	std	Y+18, r25	; 0x12
    9866:	89 8b       	std	Y+17, r24	; 0x11
    9868:	7c 8b       	std	Y+20, r23	; 0x14
    986a:	6b 8b       	std	Y+19, r22	; 0x13
	TVP tmp;

	if(x == NULL)
    986c:	89 89       	ldd	r24, Y+17	; 0x11
    986e:	9a 89       	ldd	r25, Y+18	; 0x12
    9870:	00 97       	sbiw	r24, 0x00	; 0
    9872:	19 f4       	brne	.+6      	; 0x987a <vdmCloneGC+0x2e>
	{
		return NULL;
    9874:	18 8e       	std	Y+24, r1	; 0x18
    9876:	1f 8a       	std	Y+23, r1	; 0x17
    9878:	25 c1       	rjmp	.+586    	; 0x9ac4 <vdmCloneGC+0x278>
	}

	tmp = newTypeValueGC(x->type, x->value, from);
    987a:	e9 89       	ldd	r30, Y+17	; 0x11
    987c:	fa 89       	ldd	r31, Y+18	; 0x12
    987e:	80 81       	ld	r24, Z
    9880:	91 81       	ldd	r25, Z+1	; 0x01
    9882:	e9 89       	ldd	r30, Y+17	; 0x11
    9884:	fa 89       	ldd	r31, Y+18	; 0x12
    9886:	24 81       	ldd	r18, Z+4	; 0x04
    9888:	35 81       	ldd	r19, Z+5	; 0x05
    988a:	46 81       	ldd	r20, Z+6	; 0x06
    988c:	57 81       	ldd	r21, Z+7	; 0x07
    988e:	eb 89       	ldd	r30, Y+19	; 0x13
    9890:	fc 89       	ldd	r31, Y+20	; 0x14
    9892:	ba 01       	movw	r22, r20
    9894:	a9 01       	movw	r20, r18
    9896:	9f 01       	movw	r18, r30
    9898:	0e 94 a3 4a 	call	0x9546	; 0x9546 <newTypeValueGC>
    989c:	98 8b       	std	Y+16, r25	; 0x10
    989e:	8f 87       	std	Y+15, r24	; 0x0f

	/* FIXME vdmClone any pointers  */
	switch (tmp->type)
    98a0:	ef 85       	ldd	r30, Y+15	; 0x0f
    98a2:	f8 89       	ldd	r31, Y+16	; 0x10
    98a4:	80 81       	ld	r24, Z
    98a6:	91 81       	ldd	r25, Z+1	; 0x01
    98a8:	9e 8b       	std	Y+22, r25	; 0x16
    98aa:	8d 8b       	std	Y+21, r24	; 0x15
    98ac:	ed 89       	ldd	r30, Y+21	; 0x15
    98ae:	fe 89       	ldd	r31, Y+22	; 0x16
    98b0:	e8 30       	cpi	r30, 0x08	; 8
    98b2:	f1 05       	cpc	r31, r1
    98b4:	c9 f0       	breq	.+50     	; 0x98e8 <vdmCloneGC+0x9c>
    98b6:	8d 89       	ldd	r24, Y+21	; 0x15
    98b8:	9e 89       	ldd	r25, Y+22	; 0x16
    98ba:	89 30       	cpi	r24, 0x09	; 9
    98bc:	91 05       	cpc	r25, r1
    98be:	38 f4       	brcc	.+14     	; 0x98ce <vdmCloneGC+0x82>
    98c0:	ed 89       	ldd	r30, Y+21	; 0x15
    98c2:	fe 89       	ldd	r31, Y+22	; 0x16
    98c4:	e7 30       	cpi	r30, 0x07	; 7
    98c6:	f1 05       	cpc	r31, r1
    98c8:	08 f4       	brcc	.+2      	; 0x98cc <vdmCloneGC+0x80>
    98ca:	f8 c0       	rjmp	.+496    	; 0x9abc <vdmCloneGC+0x270>
    98cc:	74 c0       	rjmp	.+232    	; 0x99b6 <vdmCloneGC+0x16a>
    98ce:	8d 89       	ldd	r24, Y+21	; 0x15
    98d0:	9e 89       	ldd	r25, Y+22	; 0x16
    98d2:	8b 30       	cpi	r24, 0x0B	; 11
    98d4:	91 05       	cpc	r25, r1
    98d6:	08 f4       	brcc	.+2      	; 0x98da <vdmCloneGC+0x8e>
    98d8:	f1 c0       	rjmp	.+482    	; 0x9abc <vdmCloneGC+0x270>
    98da:	ed 89       	ldd	r30, Y+21	; 0x15
    98dc:	fe 89       	ldd	r31, Y+22	; 0x16
    98de:	eb 30       	cpi	r30, 0x0B	; 11
    98e0:	f1 05       	cpc	r31, r1
    98e2:	09 f4       	brne	.+2      	; 0x98e6 <vdmCloneGC+0x9a>
    98e4:	cf c0       	rjmp	.+414    	; 0x9a84 <vdmCloneGC+0x238>
    98e6:	ea c0       	rjmp	.+468    	; 0x9abc <vdmCloneGC+0x270>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    98e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    98ea:	f8 89       	ldd	r31, Y+16	; 0x10
    98ec:	84 81       	ldd	r24, Z+4	; 0x04
    98ee:	95 81       	ldd	r25, Z+5	; 0x05
    98f0:	9c 87       	std	Y+12, r25	; 0x0c
    98f2:	8b 87       	std	Y+11, r24	; 0x0b

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    98f4:	84 e0       	ldi	r24, 0x04	; 4
    98f6:	90 e0       	ldi	r25, 0x00	; 0
    98f8:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    98fc:	9a 87       	std	Y+10, r25	; 0x0a
    98fe:	89 87       	std	Y+9, r24	; 0x09
		assert(ptr != NULL);
    9900:	89 85       	ldd	r24, Y+9	; 0x09
    9902:	9a 85       	ldd	r25, Y+10	; 0x0a
    9904:	00 97       	sbiw	r24, 0x00	; 0
    9906:	11 f4       	brne	.+4      	; 0x990c <vdmCloneGC+0xc0>
    9908:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    990c:	eb 85       	ldd	r30, Y+11	; 0x0b
    990e:	fc 85       	ldd	r31, Y+12	; 0x0c
    9910:	80 81       	ld	r24, Z
    9912:	91 81       	ldd	r25, Z+1	; 0x01
    9914:	a2 81       	ldd	r26, Z+2	; 0x02
    9916:	b3 81       	ldd	r27, Z+3	; 0x03
    9918:	e9 85       	ldd	r30, Y+9	; 0x09
    991a:	fa 85       	ldd	r31, Y+10	; 0x0a
    991c:	80 83       	st	Z, r24
    991e:	91 83       	std	Z+1, r25	; 0x01
    9920:	a2 83       	std	Z+2, r26	; 0x02
    9922:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    9924:	e9 85       	ldd	r30, Y+9	; 0x09
    9926:	fa 85       	ldd	r31, Y+10	; 0x0a
    9928:	82 81       	ldd	r24, Z+2	; 0x02
    992a:	93 81       	ldd	r25, Z+3	; 0x03
    992c:	88 0f       	add	r24, r24
    992e:	99 1f       	adc	r25, r25
    9930:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    9934:	e9 85       	ldd	r30, Y+9	; 0x09
    9936:	fa 85       	ldd	r31, Y+10	; 0x0a
    9938:	91 83       	std	Z+1, r25	; 0x01
    993a:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    993c:	e9 85       	ldd	r30, Y+9	; 0x09
    993e:	fa 85       	ldd	r31, Y+10	; 0x0a
    9940:	80 81       	ld	r24, Z
    9942:	91 81       	ldd	r25, Z+1	; 0x01
    9944:	00 97       	sbiw	r24, 0x00	; 0
    9946:	11 f4       	brne	.+4      	; 0x994c <vdmCloneGC+0x100>
    9948:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		for (i = 0; i < cptr->size; i++)
    994c:	1e 86       	std	Y+14, r1	; 0x0e
    994e:	1d 86       	std	Y+13, r1	; 0x0d
    9950:	22 c0       	rjmp	.+68     	; 0x9996 <vdmCloneGC+0x14a>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    9952:	e9 85       	ldd	r30, Y+9	; 0x09
    9954:	fa 85       	ldd	r31, Y+10	; 0x0a
    9956:	20 81       	ld	r18, Z
    9958:	31 81       	ldd	r19, Z+1	; 0x01
    995a:	8d 85       	ldd	r24, Y+13	; 0x0d
    995c:	9e 85       	ldd	r25, Y+14	; 0x0e
    995e:	88 0f       	add	r24, r24
    9960:	99 1f       	adc	r25, r25
    9962:	89 01       	movw	r16, r18
    9964:	08 0f       	add	r16, r24
    9966:	19 1f       	adc	r17, r25
    9968:	eb 85       	ldd	r30, Y+11	; 0x0b
    996a:	fc 85       	ldd	r31, Y+12	; 0x0c
    996c:	20 81       	ld	r18, Z
    996e:	31 81       	ldd	r19, Z+1	; 0x01
    9970:	8d 85       	ldd	r24, Y+13	; 0x0d
    9972:	9e 85       	ldd	r25, Y+14	; 0x0e
    9974:	88 0f       	add	r24, r24
    9976:	99 1f       	adc	r25, r25
    9978:	f9 01       	movw	r30, r18
    997a:	e8 0f       	add	r30, r24
    997c:	f9 1f       	adc	r31, r25
    997e:	80 81       	ld	r24, Z
    9980:	91 81       	ldd	r25, Z+1	; 0x01
    9982:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    9986:	f8 01       	movw	r30, r16
    9988:	91 83       	std	Z+1, r25	; 0x01
    998a:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    998c:	8d 85       	ldd	r24, Y+13	; 0x0d
    998e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9990:	01 96       	adiw	r24, 0x01	; 1
    9992:	9e 87       	std	Y+14, r25	; 0x0e
    9994:	8d 87       	std	Y+13, r24	; 0x0d
    9996:	eb 85       	ldd	r30, Y+11	; 0x0b
    9998:	fc 85       	ldd	r31, Y+12	; 0x0c
    999a:	22 81       	ldd	r18, Z+2	; 0x02
    999c:	33 81       	ldd	r19, Z+3	; 0x03
    999e:	8d 85       	ldd	r24, Y+13	; 0x0d
    99a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    99a2:	82 17       	cp	r24, r18
    99a4:	93 07       	cpc	r25, r19
    99a6:	ac f2       	brlt	.-86     	; 0x9952 <vdmCloneGC+0x106>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    99a8:	ef 85       	ldd	r30, Y+15	; 0x0f
    99aa:	f8 89       	ldd	r31, Y+16	; 0x10
    99ac:	89 85       	ldd	r24, Y+9	; 0x09
    99ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    99b0:	95 83       	std	Z+5, r25	; 0x05
    99b2:	84 83       	std	Z+4, r24	; 0x04
    99b4:	83 c0       	rjmp	.+262    	; 0x9abc <vdmCloneGC+0x270>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    99b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    99b8:	f8 89       	ldd	r31, Y+16	; 0x10
    99ba:	84 81       	ldd	r24, Z+4	; 0x04
    99bc:	95 81       	ldd	r25, Z+5	; 0x05
    99be:	9e 83       	std	Y+6, r25	; 0x06
    99c0:	8d 83       	std	Y+5, r24	; 0x05

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    99c2:	84 e0       	ldi	r24, 0x04	; 4
    99c4:	90 e0       	ldi	r25, 0x00	; 0
    99c6:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    99ca:	9c 83       	std	Y+4, r25	; 0x04
    99cc:	8b 83       	std	Y+3, r24	; 0x03
		assert(ptr != NULL);
    99ce:	8b 81       	ldd	r24, Y+3	; 0x03
    99d0:	9c 81       	ldd	r25, Y+4	; 0x04
    99d2:	00 97       	sbiw	r24, 0x00	; 0
    99d4:	11 f4       	brne	.+4      	; 0x99da <vdmCloneGC+0x18e>
    99d6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    99da:	ed 81       	ldd	r30, Y+5	; 0x05
    99dc:	fe 81       	ldd	r31, Y+6	; 0x06
    99de:	80 81       	ld	r24, Z
    99e0:	91 81       	ldd	r25, Z+1	; 0x01
    99e2:	a2 81       	ldd	r26, Z+2	; 0x02
    99e4:	b3 81       	ldd	r27, Z+3	; 0x03
    99e6:	eb 81       	ldd	r30, Y+3	; 0x03
    99e8:	fc 81       	ldd	r31, Y+4	; 0x04
    99ea:	80 83       	st	Z, r24
    99ec:	91 83       	std	Z+1, r25	; 0x01
    99ee:	a2 83       	std	Z+2, r26	; 0x02
    99f0:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    99f2:	eb 81       	ldd	r30, Y+3	; 0x03
    99f4:	fc 81       	ldd	r31, Y+4	; 0x04
    99f6:	82 81       	ldd	r24, Z+2	; 0x02
    99f8:	93 81       	ldd	r25, Z+3	; 0x03
    99fa:	88 0f       	add	r24, r24
    99fc:	99 1f       	adc	r25, r25
    99fe:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    9a02:	eb 81       	ldd	r30, Y+3	; 0x03
    9a04:	fc 81       	ldd	r31, Y+4	; 0x04
    9a06:	91 83       	std	Z+1, r25	; 0x01
    9a08:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    9a0a:	eb 81       	ldd	r30, Y+3	; 0x03
    9a0c:	fc 81       	ldd	r31, Y+4	; 0x04
    9a0e:	80 81       	ld	r24, Z
    9a10:	91 81       	ldd	r25, Z+1	; 0x01
    9a12:	00 97       	sbiw	r24, 0x00	; 0
    9a14:	11 f4       	brne	.+4      	; 0x9a1a <vdmCloneGC+0x1ce>
    9a16:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

		for (i = 0; i < cptr->size; i++)
    9a1a:	18 86       	std	Y+8, r1	; 0x08
    9a1c:	1f 82       	std	Y+7, r1	; 0x07
    9a1e:	22 c0       	rjmp	.+68     	; 0x9a64 <vdmCloneGC+0x218>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    9a20:	eb 81       	ldd	r30, Y+3	; 0x03
    9a22:	fc 81       	ldd	r31, Y+4	; 0x04
    9a24:	20 81       	ld	r18, Z
    9a26:	31 81       	ldd	r19, Z+1	; 0x01
    9a28:	8f 81       	ldd	r24, Y+7	; 0x07
    9a2a:	98 85       	ldd	r25, Y+8	; 0x08
    9a2c:	88 0f       	add	r24, r24
    9a2e:	99 1f       	adc	r25, r25
    9a30:	89 01       	movw	r16, r18
    9a32:	08 0f       	add	r16, r24
    9a34:	19 1f       	adc	r17, r25
    9a36:	ed 81       	ldd	r30, Y+5	; 0x05
    9a38:	fe 81       	ldd	r31, Y+6	; 0x06
    9a3a:	20 81       	ld	r18, Z
    9a3c:	31 81       	ldd	r19, Z+1	; 0x01
    9a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    9a40:	98 85       	ldd	r25, Y+8	; 0x08
    9a42:	88 0f       	add	r24, r24
    9a44:	99 1f       	adc	r25, r25
    9a46:	f9 01       	movw	r30, r18
    9a48:	e8 0f       	add	r30, r24
    9a4a:	f9 1f       	adc	r31, r25
    9a4c:	80 81       	ld	r24, Z
    9a4e:	91 81       	ldd	r25, Z+1	; 0x01
    9a50:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    9a54:	f8 01       	movw	r30, r16
    9a56:	91 83       	std	Z+1, r25	; 0x01
    9a58:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    9a5a:	8f 81       	ldd	r24, Y+7	; 0x07
    9a5c:	98 85       	ldd	r25, Y+8	; 0x08
    9a5e:	01 96       	adiw	r24, 0x01	; 1
    9a60:	98 87       	std	Y+8, r25	; 0x08
    9a62:	8f 83       	std	Y+7, r24	; 0x07
    9a64:	ed 81       	ldd	r30, Y+5	; 0x05
    9a66:	fe 81       	ldd	r31, Y+6	; 0x06
    9a68:	22 81       	ldd	r18, Z+2	; 0x02
    9a6a:	33 81       	ldd	r19, Z+3	; 0x03
    9a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    9a6e:	98 85       	ldd	r25, Y+8	; 0x08
    9a70:	82 17       	cp	r24, r18
    9a72:	93 07       	cpc	r25, r19
    9a74:	ac f2       	brlt	.-86     	; 0x9a20 <vdmCloneGC+0x1d4>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    9a76:	ef 85       	ldd	r30, Y+15	; 0x0f
    9a78:	f8 89       	ldd	r31, Y+16	; 0x10
    9a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    9a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    9a7e:	95 83       	std	Z+5, r25	; 0x05
    9a80:	84 83       	std	Z+4, r24	; 0x04
    9a82:	1c c0       	rjmp	.+56     	; 0x9abc <vdmCloneGC+0x270>
	}
#endif
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) tmp->value.ptr;
    9a84:	ef 85       	ldd	r30, Y+15	; 0x0f
    9a86:	f8 89       	ldd	r31, Y+16	; 0x10
    9a88:	84 81       	ldd	r24, Z+4	; 0x04
    9a8a:	95 81       	ldd	r25, Z+5	; 0x05
    9a8c:	9a 83       	std	Y+2, r25	; 0x02
    9a8e:	89 83       	std	Y+1, r24	; 0x01

		/* improve using memcpy  */
		tmp->value.ptr = newClassValue(classTptr->classId, classTptr->refs, classTptr->freeClass, classTptr->value);
    9a90:	e9 81       	ldd	r30, Y+1	; 0x01
    9a92:	fa 81       	ldd	r31, Y+2	; 0x02
    9a94:	82 81       	ldd	r24, Z+2	; 0x02
    9a96:	93 81       	ldd	r25, Z+3	; 0x03
    9a98:	e9 81       	ldd	r30, Y+1	; 0x01
    9a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    9a9c:	64 81       	ldd	r22, Z+4	; 0x04
    9a9e:	75 81       	ldd	r23, Z+5	; 0x05
    9aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    9aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    9aa4:	46 81       	ldd	r20, Z+6	; 0x06
    9aa6:	57 81       	ldd	r21, Z+7	; 0x07
    9aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    9aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    9aac:	20 81       	ld	r18, Z
    9aae:	31 81       	ldd	r19, Z+1	; 0x01
    9ab0:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <newClassValue>
    9ab4:	ef 85       	ldd	r30, Y+15	; 0x0f
    9ab6:	f8 89       	ldd	r31, Y+16	; 0x10
    9ab8:	95 83       	std	Z+5, r25	; 0x05
    9aba:	84 83       	std	Z+4, r24	; 0x04
		break;
	}
	}

	return tmp;
    9abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    9abe:	98 89       	ldd	r25, Y+16	; 0x10
    9ac0:	98 8f       	std	Y+24, r25	; 0x18
    9ac2:	8f 8b       	std	Y+23, r24	; 0x17
    9ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    9ac6:	98 8d       	ldd	r25, Y+24	; 0x18
}
    9ac8:	68 96       	adiw	r28, 0x18	; 24
    9aca:	0f b6       	in	r0, 0x3f	; 63
    9acc:	f8 94       	cli
    9ace:	de bf       	out	0x3e, r29	; 62
    9ad0:	0f be       	out	0x3f, r0	; 63
    9ad2:	cd bf       	out	0x3d, r28	; 61
    9ad4:	cf 91       	pop	r28
    9ad6:	df 91       	pop	r29
    9ad8:	1f 91       	pop	r17
    9ada:	0f 91       	pop	r16
    9adc:	08 95       	ret

00009ade <vdmSeqAdd>:
#define DEFAULT_SEQ_COMP_BUFFER_STEPSIZE 10

/* Utility functions.  */
/* ------------------------------------------------  */
static void vdmSeqAdd(TVP* value, int* index, TVP newValue)
{
    9ade:	df 93       	push	r29
    9ae0:	cf 93       	push	r28
    9ae2:	00 d0       	rcall	.+0      	; 0x9ae4 <vdmSeqAdd+0x6>
    9ae4:	00 d0       	rcall	.+0      	; 0x9ae6 <vdmSeqAdd+0x8>
    9ae6:	00 d0       	rcall	.+0      	; 0x9ae8 <vdmSeqAdd+0xa>
    9ae8:	cd b7       	in	r28, 0x3d	; 61
    9aea:	de b7       	in	r29, 0x3e	; 62
    9aec:	9a 83       	std	Y+2, r25	; 0x02
    9aee:	89 83       	std	Y+1, r24	; 0x01
    9af0:	7c 83       	std	Y+4, r23	; 0x04
    9af2:	6b 83       	std	Y+3, r22	; 0x03
    9af4:	5e 83       	std	Y+6, r21	; 0x06
    9af6:	4d 83       	std	Y+5, r20	; 0x05
	value[*index] = newValue;
    9af8:	eb 81       	ldd	r30, Y+3	; 0x03
    9afa:	fc 81       	ldd	r31, Y+4	; 0x04
    9afc:	80 81       	ld	r24, Z
    9afe:	91 81       	ldd	r25, Z+1	; 0x01
    9b00:	9c 01       	movw	r18, r24
    9b02:	22 0f       	add	r18, r18
    9b04:	33 1f       	adc	r19, r19
    9b06:	89 81       	ldd	r24, Y+1	; 0x01
    9b08:	9a 81       	ldd	r25, Y+2	; 0x02
    9b0a:	fc 01       	movw	r30, r24
    9b0c:	e2 0f       	add	r30, r18
    9b0e:	f3 1f       	adc	r31, r19
    9b10:	8d 81       	ldd	r24, Y+5	; 0x05
    9b12:	9e 81       	ldd	r25, Y+6	; 0x06
    9b14:	91 83       	std	Z+1, r25	; 0x01
    9b16:	80 83       	st	Z, r24
	*index = (*index) + 1;
    9b18:	eb 81       	ldd	r30, Y+3	; 0x03
    9b1a:	fc 81       	ldd	r31, Y+4	; 0x04
    9b1c:	80 81       	ld	r24, Z
    9b1e:	91 81       	ldd	r25, Z+1	; 0x01
    9b20:	01 96       	adiw	r24, 0x01	; 1
    9b22:	eb 81       	ldd	r30, Y+3	; 0x03
    9b24:	fc 81       	ldd	r31, Y+4	; 0x04
    9b26:	91 83       	std	Z+1, r25	; 0x01
    9b28:	80 83       	st	Z, r24
}
    9b2a:	26 96       	adiw	r28, 0x06	; 6
    9b2c:	0f b6       	in	r0, 0x3f	; 63
    9b2e:	f8 94       	cli
    9b30:	de bf       	out	0x3e, r29	; 62
    9b32:	0f be       	out	0x3f, r0	; 63
    9b34:	cd bf       	out	0x3d, r28	; 61
    9b36:	cf 91       	pop	r28
    9b38:	df 91       	pop	r29
    9b3a:	08 95       	ret

00009b3c <newSeq>:




TVP newSeq(size_t size)
{
    9b3c:	df 93       	push	r29
    9b3e:	cf 93       	push	r28
    9b40:	00 d0       	rcall	.+0      	; 0x9b42 <newSeq+0x6>
    9b42:	cd b7       	in	r28, 0x3d	; 61
    9b44:	de b7       	in	r29, 0x3e	; 62
    9b46:	9a 83       	std	Y+2, r25	; 0x02
    9b48:	89 83       	std	Y+1, r24	; 0x01
	return newCollection(size, VDM_SEQ);
    9b4a:	89 81       	ldd	r24, Y+1	; 0x01
    9b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    9b4e:	68 e0       	ldi	r22, 0x08	; 8
    9b50:	70 e0       	ldi	r23, 0x00	; 0
    9b52:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <newCollection>
}
    9b56:	0f 90       	pop	r0
    9b58:	0f 90       	pop	r0
    9b5a:	cf 91       	pop	r28
    9b5c:	df 91       	pop	r29
    9b5e:	08 95       	ret

00009b60 <newSeqGC>:

static TVP newSeqGC(size_t size, TVP *from)
{
    9b60:	df 93       	push	r29
    9b62:	cf 93       	push	r28
    9b64:	00 d0       	rcall	.+0      	; 0x9b66 <newSeqGC+0x6>
    9b66:	00 d0       	rcall	.+0      	; 0x9b68 <newSeqGC+0x8>
    9b68:	cd b7       	in	r28, 0x3d	; 61
    9b6a:	de b7       	in	r29, 0x3e	; 62
    9b6c:	9a 83       	std	Y+2, r25	; 0x02
    9b6e:	89 83       	std	Y+1, r24	; 0x01
    9b70:	7c 83       	std	Y+4, r23	; 0x04
    9b72:	6b 83       	std	Y+3, r22	; 0x03
	return newCollectionGC(size, VDM_SEQ, from);
    9b74:	89 81       	ldd	r24, Y+1	; 0x01
    9b76:	9a 81       	ldd	r25, Y+2	; 0x02
    9b78:	2b 81       	ldd	r18, Y+3	; 0x03
    9b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    9b7c:	68 e0       	ldi	r22, 0x08	; 8
    9b7e:	70 e0       	ldi	r23, 0x00	; 0
    9b80:	a9 01       	movw	r20, r18
    9b82:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <newCollectionGC>
}
    9b86:	0f 90       	pop	r0
    9b88:	0f 90       	pop	r0
    9b8a:	0f 90       	pop	r0
    9b8c:	0f 90       	pop	r0
    9b8e:	cf 91       	pop	r28
    9b90:	df 91       	pop	r29
    9b92:	08 95       	ret

00009b94 <newSeqWithValues>:

TVP newSeqWithValues(size_t size, TVP* elements)
{
    9b94:	df 93       	push	r29
    9b96:	cf 93       	push	r28
    9b98:	00 d0       	rcall	.+0      	; 0x9b9a <newSeqWithValues+0x6>
    9b9a:	00 d0       	rcall	.+0      	; 0x9b9c <newSeqWithValues+0x8>
    9b9c:	cd b7       	in	r28, 0x3d	; 61
    9b9e:	de b7       	in	r29, 0x3e	; 62
    9ba0:	9a 83       	std	Y+2, r25	; 0x02
    9ba2:	89 83       	std	Y+1, r24	; 0x01
    9ba4:	7c 83       	std	Y+4, r23	; 0x04
    9ba6:	6b 83       	std	Y+3, r22	; 0x03
	return newCollectionWithValues(size, VDM_SEQ,elements);
    9ba8:	89 81       	ldd	r24, Y+1	; 0x01
    9baa:	9a 81       	ldd	r25, Y+2	; 0x02
    9bac:	2b 81       	ldd	r18, Y+3	; 0x03
    9bae:	3c 81       	ldd	r19, Y+4	; 0x04
    9bb0:	68 e0       	ldi	r22, 0x08	; 8
    9bb2:	70 e0       	ldi	r23, 0x00	; 0
    9bb4:	a9 01       	movw	r20, r18
    9bb6:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <newCollectionWithValues>
}
    9bba:	0f 90       	pop	r0
    9bbc:	0f 90       	pop	r0
    9bbe:	0f 90       	pop	r0
    9bc0:	0f 90       	pop	r0
    9bc2:	cf 91       	pop	r28
    9bc4:	df 91       	pop	r29
    9bc6:	08 95       	ret

00009bc8 <newSeqVar>:

TVP newSeqVar(size_t size, ...)
{
    9bc8:	df 93       	push	r29
    9bca:	cf 93       	push	r28
    9bcc:	cd b7       	in	r28, 0x3d	; 61
    9bce:	de b7       	in	r29, 0x3e	; 62
    9bd0:	2e 97       	sbiw	r28, 0x0e	; 14
    9bd2:	0f b6       	in	r0, 0x3f	; 63
    9bd4:	f8 94       	cli
    9bd6:	de bf       	out	0x3e, r29	; 62
    9bd8:	0f be       	out	0x3f, r0	; 63
    9bda:	cd bf       	out	0x3d, r28	; 61
		elements[i]=arg;
	}
	va_end(ap);

	return newCollectionWithValues(size, VDM_SEQ, elements);
}
    9bdc:	2d b7       	in	r18, 0x3d	; 61
    9bde:	3e b7       	in	r19, 0x3e	; 62
    9be0:	3e 87       	std	Y+14, r19	; 0x0e
    9be2:	2d 87       	std	Y+13, r18	; 0x0d
{
	return newCollectionWithValues(size, VDM_SEQ,elements);
}

TVP newSeqVar(size_t size, ...)
{
    9be4:	8d b7       	in	r24, 0x3d	; 61
    9be6:	9e b7       	in	r25, 0x3e	; 62
    9be8:	9a 87       	std	Y+10, r25	; 0x0a
    9bea:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP elements[size];
    9bec:	8b 89       	ldd	r24, Y+19	; 0x13
    9bee:	9c 89       	ldd	r25, Y+20	; 0x14
    9bf0:	88 0f       	add	r24, r24
    9bf2:	99 1f       	adc	r25, r25
    9bf4:	2d b7       	in	r18, 0x3d	; 61
    9bf6:	3e b7       	in	r19, 0x3e	; 62
    9bf8:	28 1b       	sub	r18, r24
    9bfa:	39 0b       	sbc	r19, r25
    9bfc:	0f b6       	in	r0, 0x3f	; 63
    9bfe:	f8 94       	cli
    9c00:	3e bf       	out	0x3e, r19	; 62
    9c02:	0f be       	out	0x3f, r0	; 63
    9c04:	2d bf       	out	0x3d, r18	; 61
    9c06:	8d b7       	in	r24, 0x3d	; 61
    9c08:	9e b7       	in	r25, 0x3e	; 62
    9c0a:	01 96       	adiw	r24, 0x01	; 1
    9c0c:	9c 87       	std	Y+12, r25	; 0x0c
    9c0e:	8b 87       	std	Y+11, r24	; 0x0b
    9c10:	8b 85       	ldd	r24, Y+11	; 0x0b
    9c12:	9c 85       	ldd	r25, Y+12	; 0x0c
    9c14:	00 96       	adiw	r24, 0x00	; 0
    9c16:	9c 87       	std	Y+12, r25	; 0x0c
    9c18:	8b 87       	std	Y+11, r24	; 0x0b
    9c1a:	2b 85       	ldd	r18, Y+11	; 0x0b
    9c1c:	3c 85       	ldd	r19, Y+12	; 0x0c
    9c1e:	3e 83       	std	Y+6, r19	; 0x06
    9c20:	2d 83       	std	Y+5, r18	; 0x05

	va_list ap;
	va_start(ap, size);
    9c22:	ce 01       	movw	r24, r28
    9c24:	45 96       	adiw	r24, 0x15	; 21
    9c26:	98 87       	std	Y+8, r25	; 0x08
    9c28:	8f 83       	std	Y+7, r24	; 0x07

	for (i = 0; i < size; i++)
    9c2a:	1c 82       	std	Y+4, r1	; 0x04
    9c2c:	1b 82       	std	Y+3, r1	; 0x03
    9c2e:	1d c0       	rjmp	.+58     	; 0x9c6a <newSeqVar+0xa2>
	{
		TVP arg = va_arg(ap, TVP);
    9c30:	2f 81       	ldd	r18, Y+7	; 0x07
    9c32:	38 85       	ldd	r19, Y+8	; 0x08
    9c34:	c9 01       	movw	r24, r18
    9c36:	02 96       	adiw	r24, 0x02	; 2
    9c38:	98 87       	std	Y+8, r25	; 0x08
    9c3a:	8f 83       	std	Y+7, r24	; 0x07
    9c3c:	f9 01       	movw	r30, r18
    9c3e:	80 81       	ld	r24, Z
    9c40:	91 81       	ldd	r25, Z+1	; 0x01
    9c42:	9a 83       	std	Y+2, r25	; 0x02
    9c44:	89 83       	std	Y+1, r24	; 0x01
		elements[i]=arg;
    9c46:	8b 81       	ldd	r24, Y+3	; 0x03
    9c48:	9c 81       	ldd	r25, Y+4	; 0x04
    9c4a:	2d 81       	ldd	r18, Y+5	; 0x05
    9c4c:	3e 81       	ldd	r19, Y+6	; 0x06
    9c4e:	88 0f       	add	r24, r24
    9c50:	99 1f       	adc	r25, r25
    9c52:	f9 01       	movw	r30, r18
    9c54:	e8 0f       	add	r30, r24
    9c56:	f9 1f       	adc	r31, r25
    9c58:	89 81       	ldd	r24, Y+1	; 0x01
    9c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    9c5c:	91 83       	std	Z+1, r25	; 0x01
    9c5e:	80 83       	st	Z, r24
	TVP elements[size];

	va_list ap;
	va_start(ap, size);

	for (i = 0; i < size; i++)
    9c60:	8b 81       	ldd	r24, Y+3	; 0x03
    9c62:	9c 81       	ldd	r25, Y+4	; 0x04
    9c64:	01 96       	adiw	r24, 0x01	; 1
    9c66:	9c 83       	std	Y+4, r25	; 0x04
    9c68:	8b 83       	std	Y+3, r24	; 0x03
    9c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    9c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    9c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    9c70:	9c 89       	ldd	r25, Y+20	; 0x14
    9c72:	28 17       	cp	r18, r24
    9c74:	39 07       	cpc	r19, r25
    9c76:	e0 f2       	brcs	.-72     	; 0x9c30 <newSeqVar+0x68>
		TVP arg = va_arg(ap, TVP);
		elements[i]=arg;
	}
	va_end(ap);

	return newCollectionWithValues(size, VDM_SEQ, elements);
    9c78:	2d 81       	ldd	r18, Y+5	; 0x05
    9c7a:	3e 81       	ldd	r19, Y+6	; 0x06
    9c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    9c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    9c80:	68 e0       	ldi	r22, 0x08	; 8
    9c82:	70 e0       	ldi	r23, 0x00	; 0
    9c84:	a9 01       	movw	r20, r18
    9c86:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <newCollectionWithValues>
    9c8a:	29 85       	ldd	r18, Y+9	; 0x09
    9c8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    9c8e:	0f b6       	in	r0, 0x3f	; 63
    9c90:	f8 94       	cli
    9c92:	3e bf       	out	0x3e, r19	; 62
    9c94:	0f be       	out	0x3f, r0	; 63
    9c96:	2d bf       	out	0x3d, r18	; 61
}
    9c98:	2d 85       	ldd	r18, Y+13	; 0x0d
    9c9a:	3e 85       	ldd	r19, Y+14	; 0x0e
    9c9c:	0f b6       	in	r0, 0x3f	; 63
    9c9e:	f8 94       	cli
    9ca0:	3e bf       	out	0x3e, r19	; 62
    9ca2:	0f be       	out	0x3f, r0	; 63
    9ca4:	2d bf       	out	0x3d, r18	; 61
    9ca6:	2e 96       	adiw	r28, 0x0e	; 14
    9ca8:	0f b6       	in	r0, 0x3f	; 63
    9caa:	f8 94       	cli
    9cac:	de bf       	out	0x3e, r29	; 62
    9cae:	0f be       	out	0x3f, r0	; 63
    9cb0:	cd bf       	out	0x3d, r28	; 61
    9cb2:	cf 91       	pop	r28
    9cb4:	df 91       	pop	r29
    9cb6:	08 95       	ret

00009cb8 <newSeqVarGC>:

TVP newSeqVarGC(size_t size, TVP *from, ...)
{
    9cb8:	df 93       	push	r29
    9cba:	cf 93       	push	r28
    9cbc:	cd b7       	in	r28, 0x3d	; 61
    9cbe:	de b7       	in	r29, 0x3e	; 62
    9cc0:	2e 97       	sbiw	r28, 0x0e	; 14
    9cc2:	0f b6       	in	r0, 0x3f	; 63
    9cc4:	f8 94       	cli
    9cc6:	de bf       	out	0x3e, r29	; 62
    9cc8:	0f be       	out	0x3f, r0	; 63
    9cca:	cd bf       	out	0x3d, r28	; 61
		elements[i] = arg;
	}
	va_end(ap);

	return newCollectionWithValuesGC(size, VDM_SEQ, elements, from);
}
    9ccc:	2d b7       	in	r18, 0x3d	; 61
    9cce:	3e b7       	in	r19, 0x3e	; 62
    9cd0:	3e 87       	std	Y+14, r19	; 0x0e
    9cd2:	2d 87       	std	Y+13, r18	; 0x0d

	return newCollectionWithValues(size, VDM_SEQ, elements);
}

TVP newSeqVarGC(size_t size, TVP *from, ...)
{
    9cd4:	8d b7       	in	r24, 0x3d	; 61
    9cd6:	9e b7       	in	r25, 0x3e	; 62
    9cd8:	9a 87       	std	Y+10, r25	; 0x0a
    9cda:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP elements[size];
    9cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    9cde:	9c 89       	ldd	r25, Y+20	; 0x14
    9ce0:	88 0f       	add	r24, r24
    9ce2:	99 1f       	adc	r25, r25
    9ce4:	2d b7       	in	r18, 0x3d	; 61
    9ce6:	3e b7       	in	r19, 0x3e	; 62
    9ce8:	28 1b       	sub	r18, r24
    9cea:	39 0b       	sbc	r19, r25
    9cec:	0f b6       	in	r0, 0x3f	; 63
    9cee:	f8 94       	cli
    9cf0:	3e bf       	out	0x3e, r19	; 62
    9cf2:	0f be       	out	0x3f, r0	; 63
    9cf4:	2d bf       	out	0x3d, r18	; 61
    9cf6:	8d b7       	in	r24, 0x3d	; 61
    9cf8:	9e b7       	in	r25, 0x3e	; 62
    9cfa:	01 96       	adiw	r24, 0x01	; 1
    9cfc:	9c 87       	std	Y+12, r25	; 0x0c
    9cfe:	8b 87       	std	Y+11, r24	; 0x0b
    9d00:	8b 85       	ldd	r24, Y+11	; 0x0b
    9d02:	9c 85       	ldd	r25, Y+12	; 0x0c
    9d04:	00 96       	adiw	r24, 0x00	; 0
    9d06:	9c 87       	std	Y+12, r25	; 0x0c
    9d08:	8b 87       	std	Y+11, r24	; 0x0b
    9d0a:	2b 85       	ldd	r18, Y+11	; 0x0b
    9d0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    9d0e:	3e 83       	std	Y+6, r19	; 0x06
    9d10:	2d 83       	std	Y+5, r18	; 0x05

	va_list ap;
	va_start(ap, from);
    9d12:	ce 01       	movw	r24, r28
    9d14:	47 96       	adiw	r24, 0x17	; 23
    9d16:	98 87       	std	Y+8, r25	; 0x08
    9d18:	8f 83       	std	Y+7, r24	; 0x07

	for (i = 0; i < size; i++)
    9d1a:	1c 82       	std	Y+4, r1	; 0x04
    9d1c:	1b 82       	std	Y+3, r1	; 0x03
    9d1e:	1d c0       	rjmp	.+58     	; 0x9d5a <newSeqVarGC+0xa2>
	{
		TVP arg = va_arg(ap, TVP);
    9d20:	2f 81       	ldd	r18, Y+7	; 0x07
    9d22:	38 85       	ldd	r19, Y+8	; 0x08
    9d24:	c9 01       	movw	r24, r18
    9d26:	02 96       	adiw	r24, 0x02	; 2
    9d28:	98 87       	std	Y+8, r25	; 0x08
    9d2a:	8f 83       	std	Y+7, r24	; 0x07
    9d2c:	f9 01       	movw	r30, r18
    9d2e:	80 81       	ld	r24, Z
    9d30:	91 81       	ldd	r25, Z+1	; 0x01
    9d32:	9a 83       	std	Y+2, r25	; 0x02
    9d34:	89 83       	std	Y+1, r24	; 0x01
		elements[i] = arg;
    9d36:	8b 81       	ldd	r24, Y+3	; 0x03
    9d38:	9c 81       	ldd	r25, Y+4	; 0x04
    9d3a:	2d 81       	ldd	r18, Y+5	; 0x05
    9d3c:	3e 81       	ldd	r19, Y+6	; 0x06
    9d3e:	88 0f       	add	r24, r24
    9d40:	99 1f       	adc	r25, r25
    9d42:	f9 01       	movw	r30, r18
    9d44:	e8 0f       	add	r30, r24
    9d46:	f9 1f       	adc	r31, r25
    9d48:	89 81       	ldd	r24, Y+1	; 0x01
    9d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    9d4c:	91 83       	std	Z+1, r25	; 0x01
    9d4e:	80 83       	st	Z, r24
	TVP elements[size];

	va_list ap;
	va_start(ap, from);

	for (i = 0; i < size; i++)
    9d50:	8b 81       	ldd	r24, Y+3	; 0x03
    9d52:	9c 81       	ldd	r25, Y+4	; 0x04
    9d54:	01 96       	adiw	r24, 0x01	; 1
    9d56:	9c 83       	std	Y+4, r25	; 0x04
    9d58:	8b 83       	std	Y+3, r24	; 0x03
    9d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    9d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    9d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    9d60:	9c 89       	ldd	r25, Y+20	; 0x14
    9d62:	28 17       	cp	r18, r24
    9d64:	39 07       	cpc	r19, r25
    9d66:	e0 f2       	brcs	.-72     	; 0x9d20 <newSeqVarGC+0x68>
		TVP arg = va_arg(ap, TVP);
		elements[i] = arg;
	}
	va_end(ap);

	return newCollectionWithValuesGC(size, VDM_SEQ, elements, from);
    9d68:	4d 81       	ldd	r20, Y+5	; 0x05
    9d6a:	5e 81       	ldd	r21, Y+6	; 0x06
    9d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    9d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    9d70:	2d 89       	ldd	r18, Y+21	; 0x15
    9d72:	3e 89       	ldd	r19, Y+22	; 0x16
    9d74:	68 e0       	ldi	r22, 0x08	; 8
    9d76:	70 e0       	ldi	r23, 0x00	; 0
    9d78:	0e 94 2f 28 	call	0x505e	; 0x505e <newCollectionWithValuesGC>
    9d7c:	29 85       	ldd	r18, Y+9	; 0x09
    9d7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    9d80:	0f b6       	in	r0, 0x3f	; 63
    9d82:	f8 94       	cli
    9d84:	3e bf       	out	0x3e, r19	; 62
    9d86:	0f be       	out	0x3f, r0	; 63
    9d88:	2d bf       	out	0x3d, r18	; 61
}
    9d8a:	2d 85       	ldd	r18, Y+13	; 0x0d
    9d8c:	3e 85       	ldd	r19, Y+14	; 0x0e
    9d8e:	0f b6       	in	r0, 0x3f	; 63
    9d90:	f8 94       	cli
    9d92:	3e bf       	out	0x3e, r19	; 62
    9d94:	0f be       	out	0x3f, r0	; 63
    9d96:	2d bf       	out	0x3d, r18	; 61
    9d98:	2e 96       	adiw	r28, 0x0e	; 14
    9d9a:	0f b6       	in	r0, 0x3f	; 63
    9d9c:	f8 94       	cli
    9d9e:	de bf       	out	0x3e, r29	; 62
    9da0:	0f be       	out	0x3f, r0	; 63
    9da2:	cd bf       	out	0x3d, r28	; 61
    9da4:	cf 91       	pop	r28
    9da6:	df 91       	pop	r29
    9da8:	08 95       	ret

00009daa <newSeqVarToGrow>:

/* Just like newSeqVar, but with memory preallocated to an expected  */
/* result sequence length.  */
TVP newSeqVarToGrow(size_t size, size_t expected_size, ...)
{
    9daa:	df 93       	push	r29
    9dac:	cf 93       	push	r28
    9dae:	cd b7       	in	r28, 0x3d	; 61
    9db0:	de b7       	in	r29, 0x3e	; 62
    9db2:	60 97       	sbiw	r28, 0x10	; 16
    9db4:	0f b6       	in	r0, 0x3f	; 63
    9db6:	f8 94       	cli
    9db8:	de bf       	out	0x3e, r29	; 62
    9dba:	0f be       	out	0x3f, r0	; 63
    9dbc:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, expected_size);
    9dbe:	ce 01       	movw	r24, r28
    9dc0:	49 96       	adiw	r24, 0x19	; 25
    9dc2:	9e 87       	std	Y+14, r25	; 0x0e
    9dc4:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    9dc6:	18 8a       	std	Y+16, r1	; 0x10
    9dc8:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = expected_size;  /* DEFAULT_SEQ_COMP_BUFFER;  */
    9dca:	8f 89       	ldd	r24, Y+23	; 0x17
    9dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    9dce:	9a 87       	std	Y+10, r25	; 0x0a
    9dd0:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    9dd2:	89 85       	ldd	r24, Y+9	; 0x09
    9dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    9dd6:	62 e0       	ldi	r22, 0x02	; 2
    9dd8:	70 e0       	ldi	r23, 0x00	; 0
    9dda:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    9dde:	98 87       	std	Y+8, r25	; 0x08
    9de0:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    9de2:	8f 81       	ldd	r24, Y+7	; 0x07
    9de4:	98 85       	ldd	r25, Y+8	; 0x08
    9de6:	00 97       	sbiw	r24, 0x00	; 0
    9de8:	11 f4       	brne	.+4      	; 0x9dee <newSeqVarToGrow+0x44>
    9dea:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	for(i = 0; i < size; i++)
    9dee:	1c 86       	std	Y+12, r1	; 0x0c
    9df0:	1b 86       	std	Y+11, r1	; 0x0b
    9df2:	3e c0       	rjmp	.+124    	; 0x9e70 <newSeqVarToGrow+0xc6>
	{
		TVP arg = va_arg(ap, TVP);
    9df4:	2d 85       	ldd	r18, Y+13	; 0x0d
    9df6:	3e 85       	ldd	r19, Y+14	; 0x0e
    9df8:	c9 01       	movw	r24, r18
    9dfa:	02 96       	adiw	r24, 0x02	; 2
    9dfc:	9e 87       	std	Y+14, r25	; 0x0e
    9dfe:	8d 87       	std	Y+13, r24	; 0x0d
    9e00:	f9 01       	movw	r30, r18
    9e02:	80 81       	ld	r24, Z
    9e04:	91 81       	ldd	r25, Z+1	; 0x01
    9e06:	9c 83       	std	Y+4, r25	; 0x04
    9e08:	8b 83       	std	Y+3, r24	; 0x03
		TVP v= vdmClone(arg); /*  set binding  */
    9e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    9e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    9e0e:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    9e12:	9a 83       	std	Y+2, r25	; 0x02
    9e14:	89 83       	std	Y+1, r24	; 0x01


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    9e16:	2f 85       	ldd	r18, Y+15	; 0x0f
    9e18:	38 89       	ldd	r19, Y+16	; 0x10
    9e1a:	89 85       	ldd	r24, Y+9	; 0x09
    9e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e1e:	28 17       	cp	r18, r24
    9e20:	39 07       	cpc	r19, r25
    9e22:	bc f0       	brlt	.+46     	; 0x9e52 <newSeqVarToGrow+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SEQ_COMP_BUFFER_STEPSIZE;
    9e24:	89 85       	ldd	r24, Y+9	; 0x09
    9e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e28:	0a 96       	adiw	r24, 0x0a	; 10
    9e2a:	9a 87       	std	Y+10, r25	; 0x0a
    9e2c:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    9e2e:	89 85       	ldd	r24, Y+9	; 0x09
    9e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e32:	9c 01       	movw	r18, r24
    9e34:	22 0f       	add	r18, r18
    9e36:	33 1f       	adc	r19, r19
    9e38:	8f 81       	ldd	r24, Y+7	; 0x07
    9e3a:	98 85       	ldd	r25, Y+8	; 0x08
    9e3c:	b9 01       	movw	r22, r18
    9e3e:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    9e42:	98 87       	std	Y+8, r25	; 0x08
    9e44:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    9e46:	8f 81       	ldd	r24, Y+7	; 0x07
    9e48:	98 85       	ldd	r25, Y+8	; 0x08
    9e4a:	00 97       	sbiw	r24, 0x00	; 0
    9e4c:	11 f4       	brne	.+4      	; 0x9e52 <newSeqVarToGrow+0xa8>
    9e4e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		}
		vdmSeqAdd(value,&count,v);
    9e52:	8f 81       	ldd	r24, Y+7	; 0x07
    9e54:	98 85       	ldd	r25, Y+8	; 0x08
    9e56:	9e 01       	movw	r18, r28
    9e58:	21 5f       	subi	r18, 0xF1	; 241
    9e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    9e5c:	49 81       	ldd	r20, Y+1	; 0x01
    9e5e:	5a 81       	ldd	r21, Y+2	; 0x02
    9e60:	b9 01       	movw	r22, r18
    9e62:	0e 94 6f 4d 	call	0x9ade	; 0x9ade <vdmSeqAdd>

	int bufsize = expected_size;  /* DEFAULT_SEQ_COMP_BUFFER;  */
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for(i = 0; i < size; i++)
    9e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    9e68:	9c 85       	ldd	r25, Y+12	; 0x0c
    9e6a:	01 96       	adiw	r24, 0x01	; 1
    9e6c:	9c 87       	std	Y+12, r25	; 0x0c
    9e6e:	8b 87       	std	Y+11, r24	; 0x0b
    9e70:	2b 85       	ldd	r18, Y+11	; 0x0b
    9e72:	3c 85       	ldd	r19, Y+12	; 0x0c
    9e74:	8d 89       	ldd	r24, Y+21	; 0x15
    9e76:	9e 89       	ldd	r25, Y+22	; 0x16
    9e78:	28 17       	cp	r18, r24
    9e7a:	39 07       	cpc	r19, r25
    9e7c:	08 f4       	brcc	.+2      	; 0x9e80 <newSeqVarToGrow+0xd6>
    9e7e:	ba cf       	rjmp	.-140    	; 0x9df4 <newSeqVarToGrow+0x4a>
		vdmSeqAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesPrealloc(count, expected_size, VDM_SEQ, value);
    9e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    9e82:	98 89       	ldd	r25, Y+16	; 0x10
    9e84:	2f 89       	ldd	r18, Y+23	; 0x17
    9e86:	38 8d       	ldd	r19, Y+24	; 0x18
    9e88:	ef 81       	ldd	r30, Y+7	; 0x07
    9e8a:	f8 85       	ldd	r31, Y+8	; 0x08
    9e8c:	b9 01       	movw	r22, r18
    9e8e:	48 e0       	ldi	r20, 0x08	; 8
    9e90:	50 e0       	ldi	r21, 0x00	; 0
    9e92:	9f 01       	movw	r18, r30
    9e94:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <newCollectionWithValuesPrealloc>
    9e98:	9e 83       	std	Y+6, r25	; 0x06
    9e9a:	8d 83       	std	Y+5, r24	; 0x05
	free(value);
    9e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    9e9e:	98 85       	ldd	r25, Y+8	; 0x08
    9ea0:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    9ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    9ea6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    9ea8:	60 96       	adiw	r28, 0x10	; 16
    9eaa:	0f b6       	in	r0, 0x3f	; 63
    9eac:	f8 94       	cli
    9eae:	de bf       	out	0x3e, r29	; 62
    9eb0:	0f be       	out	0x3f, r0	; 63
    9eb2:	cd bf       	out	0x3d, r28	; 61
    9eb4:	cf 91       	pop	r28
    9eb6:	df 91       	pop	r29
    9eb8:	08 95       	ret

00009eba <vdmSeqGrow>:

void vdmSeqGrow(TVP seq, TVP element)
{
    9eba:	df 93       	push	r29
    9ebc:	cf 93       	push	r28
    9ebe:	cd b7       	in	r28, 0x3d	; 61
    9ec0:	de b7       	in	r29, 0x3e	; 62
    9ec2:	28 97       	sbiw	r28, 0x08	; 8
    9ec4:	0f b6       	in	r0, 0x3f	; 63
    9ec6:	f8 94       	cli
    9ec8:	de bf       	out	0x3e, r29	; 62
    9eca:	0f be       	out	0x3f, r0	; 63
    9ecc:	cd bf       	out	0x3d, r28	; 61
    9ece:	9e 83       	std	Y+6, r25	; 0x06
    9ed0:	8d 83       	std	Y+5, r24	; 0x05
    9ed2:	78 87       	std	Y+8, r23	; 0x08
    9ed4:	6f 83       	std	Y+7, r22	; 0x07
	int bufsize = DEFAULT_SEQ_COMP_BUFFER;
    9ed6:	82 e0       	ldi	r24, 0x02	; 2
    9ed8:	90 e0       	ldi	r25, 0x00	; 0
    9eda:	9c 83       	std	Y+4, r25	; 0x04
    9edc:	8b 83       	std	Y+3, r24	; 0x03

	UNWRAP_COLLECTION(col, seq);
    9ede:	ed 81       	ldd	r30, Y+5	; 0x05
    9ee0:	fe 81       	ldd	r31, Y+6	; 0x06
    9ee2:	84 81       	ldd	r24, Z+4	; 0x04
    9ee4:	95 81       	ldd	r25, Z+5	; 0x05
    9ee6:	9a 83       	std	Y+2, r25	; 0x02
    9ee8:	89 83       	std	Y+1, r24	; 0x01

	if(col->size >= bufsize)
    9eea:	e9 81       	ldd	r30, Y+1	; 0x01
    9eec:	fa 81       	ldd	r31, Y+2	; 0x02
    9eee:	22 81       	ldd	r18, Z+2	; 0x02
    9ef0:	33 81       	ldd	r19, Z+3	; 0x03
    9ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    9ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    9ef6:	28 17       	cp	r18, r24
    9ef8:	39 07       	cpc	r19, r25
    9efa:	f4 f0       	brlt	.+60     	; 0x9f38 <vdmSeqGrow+0x7e>
	{
		/* buffer too small add memory chunk  */
		bufsize += DEFAULT_SEQ_COMP_BUFFER_STEPSIZE;
    9efc:	8b 81       	ldd	r24, Y+3	; 0x03
    9efe:	9c 81       	ldd	r25, Y+4	; 0x04
    9f00:	0a 96       	adiw	r24, 0x0a	; 10
    9f02:	9c 83       	std	Y+4, r25	; 0x04
    9f04:	8b 83       	std	Y+3, r24	; 0x03
		col->value = (TVP*)realloc(col->value, bufsize * sizeof(TVP));
    9f06:	e9 81       	ldd	r30, Y+1	; 0x01
    9f08:	fa 81       	ldd	r31, Y+2	; 0x02
    9f0a:	40 81       	ld	r20, Z
    9f0c:	51 81       	ldd	r21, Z+1	; 0x01
    9f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    9f10:	9c 81       	ldd	r25, Y+4	; 0x04
    9f12:	9c 01       	movw	r18, r24
    9f14:	22 0f       	add	r18, r18
    9f16:	33 1f       	adc	r19, r19
    9f18:	ca 01       	movw	r24, r20
    9f1a:	b9 01       	movw	r22, r18
    9f1c:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    9f20:	e9 81       	ldd	r30, Y+1	; 0x01
    9f22:	fa 81       	ldd	r31, Y+2	; 0x02
    9f24:	91 83       	std	Z+1, r25	; 0x01
    9f26:	80 83       	st	Z, r24
		assert(col->value != NULL);
    9f28:	e9 81       	ldd	r30, Y+1	; 0x01
    9f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    9f2c:	80 81       	ld	r24, Z
    9f2e:	91 81       	ldd	r25, Z+1	; 0x01
    9f30:	00 97       	sbiw	r24, 0x00	; 0
    9f32:	11 f4       	brne	.+4      	; 0x9f38 <vdmSeqGrow+0x7e>
    9f34:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	}
	vdmSeqAdd(col->value, &(col->size), element);
    9f38:	e9 81       	ldd	r30, Y+1	; 0x01
    9f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    9f3c:	60 81       	ld	r22, Z
    9f3e:	71 81       	ldd	r23, Z+1	; 0x01
    9f40:	89 81       	ldd	r24, Y+1	; 0x01
    9f42:	9a 81       	ldd	r25, Y+2	; 0x02
    9f44:	9c 01       	movw	r18, r24
    9f46:	2e 5f       	subi	r18, 0xFE	; 254
    9f48:	3f 4f       	sbci	r19, 0xFF	; 255
    9f4a:	4f 81       	ldd	r20, Y+7	; 0x07
    9f4c:	58 85       	ldd	r21, Y+8	; 0x08
    9f4e:	cb 01       	movw	r24, r22
    9f50:	b9 01       	movw	r22, r18
    9f52:	0e 94 6f 4d 	call	0x9ade	; 0x9ade <vdmSeqAdd>
}
    9f56:	28 96       	adiw	r28, 0x08	; 8
    9f58:	0f b6       	in	r0, 0x3f	; 63
    9f5a:	f8 94       	cli
    9f5c:	de bf       	out	0x3e, r29	; 62
    9f5e:	0f be       	out	0x3f, r0	; 63
    9f60:	cd bf       	out	0x3d, r28	; 61
    9f62:	cf 91       	pop	r28
    9f64:	df 91       	pop	r29
    9f66:	08 95       	ret

00009f68 <vdmSeqFit>:

void vdmSeqFit(TVP seq)
{
    9f68:	df 93       	push	r29
    9f6a:	cf 93       	push	r28
    9f6c:	00 d0       	rcall	.+0      	; 0x9f6e <vdmSeqFit+0x6>
    9f6e:	00 d0       	rcall	.+0      	; 0x9f70 <vdmSeqFit+0x8>
    9f70:	cd b7       	in	r28, 0x3d	; 61
    9f72:	de b7       	in	r29, 0x3e	; 62
    9f74:	9c 83       	std	Y+4, r25	; 0x04
    9f76:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, seq);
    9f78:	eb 81       	ldd	r30, Y+3	; 0x03
    9f7a:	fc 81       	ldd	r31, Y+4	; 0x04
    9f7c:	84 81       	ldd	r24, Z+4	; 0x04
    9f7e:	95 81       	ldd	r25, Z+5	; 0x05
    9f80:	9a 83       	std	Y+2, r25	; 0x02
    9f82:	89 83       	std	Y+1, r24	; 0x01

	/* Assumes that more memory is allocated in the col->value array than there are elements.  */
	col->value = (TVP*)realloc(col->value, col->size * sizeof(TVP));
    9f84:	e9 81       	ldd	r30, Y+1	; 0x01
    9f86:	fa 81       	ldd	r31, Y+2	; 0x02
    9f88:	40 81       	ld	r20, Z
    9f8a:	51 81       	ldd	r21, Z+1	; 0x01
    9f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    9f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    9f90:	82 81       	ldd	r24, Z+2	; 0x02
    9f92:	93 81       	ldd	r25, Z+3	; 0x03
    9f94:	9c 01       	movw	r18, r24
    9f96:	22 0f       	add	r18, r18
    9f98:	33 1f       	adc	r19, r19
    9f9a:	ca 01       	movw	r24, r20
    9f9c:	b9 01       	movw	r22, r18
    9f9e:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    9fa2:	e9 81       	ldd	r30, Y+1	; 0x01
    9fa4:	fa 81       	ldd	r31, Y+2	; 0x02
    9fa6:	91 83       	std	Z+1, r25	; 0x01
    9fa8:	80 83       	st	Z, r24
	assert(col->value != NULL);
    9faa:	e9 81       	ldd	r30, Y+1	; 0x01
    9fac:	fa 81       	ldd	r31, Y+2	; 0x02
    9fae:	80 81       	ld	r24, Z
    9fb0:	91 81       	ldd	r25, Z+1	; 0x01
    9fb2:	00 97       	sbiw	r24, 0x00	; 0
    9fb4:	11 f4       	brne	.+4      	; 0x9fba <vdmSeqFit+0x52>
    9fb6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
}
    9fba:	0f 90       	pop	r0
    9fbc:	0f 90       	pop	r0
    9fbe:	0f 90       	pop	r0
    9fc0:	0f 90       	pop	r0
    9fc2:	cf 91       	pop	r28
    9fc4:	df 91       	pop	r29
    9fc6:	08 95       	ret

00009fc8 <vdmSeqHd>:

TVP vdmSeqHd(TVP seq)
{
    9fc8:	df 93       	push	r29
    9fca:	cf 93       	push	r28
    9fcc:	00 d0       	rcall	.+0      	; 0x9fce <vdmSeqHd+0x6>
    9fce:	00 d0       	rcall	.+0      	; 0x9fd0 <vdmSeqHd+0x8>
    9fd0:	cd b7       	in	r28, 0x3d	; 61
    9fd2:	de b7       	in	r29, 0x3e	; 62
    9fd4:	9c 83       	std	Y+4, r25	; 0x04
    9fd6:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK(seq);
    9fd8:	eb 81       	ldd	r30, Y+3	; 0x03
    9fda:	fc 81       	ldd	r31, Y+4	; 0x04
    9fdc:	80 81       	ld	r24, Z
    9fde:	91 81       	ldd	r25, Z+1	; 0x01
    9fe0:	88 30       	cpi	r24, 0x08	; 8
    9fe2:	91 05       	cpc	r25, r1
    9fe4:	11 f0       	breq	.+4      	; 0x9fea <vdmSeqHd+0x22>
    9fe6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    9fea:	eb 81       	ldd	r30, Y+3	; 0x03
    9fec:	fc 81       	ldd	r31, Y+4	; 0x04
    9fee:	84 81       	ldd	r24, Z+4	; 0x04
    9ff0:	95 81       	ldd	r25, Z+5	; 0x05
    9ff2:	9a 83       	std	Y+2, r25	; 0x02
    9ff4:	89 83       	std	Y+1, r24	; 0x01
	return vdmClone(col->value[0]);
    9ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    9ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    9ffa:	01 90       	ld	r0, Z+
    9ffc:	f0 81       	ld	r31, Z
    9ffe:	e0 2d       	mov	r30, r0
    a000:	80 81       	ld	r24, Z
    a002:	91 81       	ldd	r25, Z+1	; 0x01
    a004:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
}
    a008:	0f 90       	pop	r0
    a00a:	0f 90       	pop	r0
    a00c:	0f 90       	pop	r0
    a00e:	0f 90       	pop	r0
    a010:	cf 91       	pop	r28
    a012:	df 91       	pop	r29
    a014:	08 95       	ret

0000a016 <vdmSeqHdGC>:

TVP vdmSeqHdGC(TVP seq, TVP *from)
{
    a016:	df 93       	push	r29
    a018:	cf 93       	push	r28
    a01a:	00 d0       	rcall	.+0      	; 0xa01c <vdmSeqHdGC+0x6>
    a01c:	00 d0       	rcall	.+0      	; 0xa01e <vdmSeqHdGC+0x8>
    a01e:	00 d0       	rcall	.+0      	; 0xa020 <vdmSeqHdGC+0xa>
    a020:	cd b7       	in	r28, 0x3d	; 61
    a022:	de b7       	in	r29, 0x3e	; 62
    a024:	9c 83       	std	Y+4, r25	; 0x04
    a026:	8b 83       	std	Y+3, r24	; 0x03
    a028:	7e 83       	std	Y+6, r23	; 0x06
    a02a:	6d 83       	std	Y+5, r22	; 0x05
	ASSERT_CHECK(seq);
    a02c:	eb 81       	ldd	r30, Y+3	; 0x03
    a02e:	fc 81       	ldd	r31, Y+4	; 0x04
    a030:	80 81       	ld	r24, Z
    a032:	91 81       	ldd	r25, Z+1	; 0x01
    a034:	88 30       	cpi	r24, 0x08	; 8
    a036:	91 05       	cpc	r25, r1
    a038:	11 f0       	breq	.+4      	; 0xa03e <vdmSeqHdGC+0x28>
    a03a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a03e:	eb 81       	ldd	r30, Y+3	; 0x03
    a040:	fc 81       	ldd	r31, Y+4	; 0x04
    a042:	84 81       	ldd	r24, Z+4	; 0x04
    a044:	95 81       	ldd	r25, Z+5	; 0x05
    a046:	9a 83       	std	Y+2, r25	; 0x02
    a048:	89 83       	std	Y+1, r24	; 0x01
	return vdmCloneGC(col->value[0], from);
    a04a:	e9 81       	ldd	r30, Y+1	; 0x01
    a04c:	fa 81       	ldd	r31, Y+2	; 0x02
    a04e:	01 90       	ld	r0, Z+
    a050:	f0 81       	ld	r31, Z
    a052:	e0 2d       	mov	r30, r0
    a054:	80 81       	ld	r24, Z
    a056:	91 81       	ldd	r25, Z+1	; 0x01
    a058:	2d 81       	ldd	r18, Y+5	; 0x05
    a05a:	3e 81       	ldd	r19, Y+6	; 0x06
    a05c:	b9 01       	movw	r22, r18
    a05e:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
}
    a062:	26 96       	adiw	r28, 0x06	; 6
    a064:	0f b6       	in	r0, 0x3f	; 63
    a066:	f8 94       	cli
    a068:	de bf       	out	0x3e, r29	; 62
    a06a:	0f be       	out	0x3f, r0	; 63
    a06c:	cd bf       	out	0x3d, r28	; 61
    a06e:	cf 91       	pop	r28
    a070:	df 91       	pop	r29
    a072:	08 95       	ret

0000a074 <vdmSeqTl>:

TVP vdmSeqTl(TVP seq)
{
    a074:	0f 93       	push	r16
    a076:	1f 93       	push	r17
    a078:	df 93       	push	r29
    a07a:	cf 93       	push	r28
    a07c:	cd b7       	in	r28, 0x3d	; 61
    a07e:	de b7       	in	r29, 0x3e	; 62
    a080:	2a 97       	sbiw	r28, 0x0a	; 10
    a082:	0f b6       	in	r0, 0x3f	; 63
    a084:	f8 94       	cli
    a086:	de bf       	out	0x3e, r29	; 62
    a088:	0f be       	out	0x3f, r0	; 63
    a08a:	cd bf       	out	0x3d, r28	; 61
    a08c:	9a 87       	std	Y+10, r25	; 0x0a
    a08e:	89 87       	std	Y+9, r24	; 0x09
	int i;

	ASSERT_CHECK(seq);
    a090:	e9 85       	ldd	r30, Y+9	; 0x09
    a092:	fa 85       	ldd	r31, Y+10	; 0x0a
    a094:	80 81       	ld	r24, Z
    a096:	91 81       	ldd	r25, Z+1	; 0x01
    a098:	88 30       	cpi	r24, 0x08	; 8
    a09a:	91 05       	cpc	r25, r1
    a09c:	11 f0       	breq	.+4      	; 0xa0a2 <vdmSeqTl+0x2e>
    a09e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a0a2:	e9 85       	ldd	r30, Y+9	; 0x09
    a0a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    a0a6:	84 81       	ldd	r24, Z+4	; 0x04
    a0a8:	95 81       	ldd	r25, Z+5	; 0x05
    a0aa:	9e 83       	std	Y+6, r25	; 0x06
    a0ac:	8d 83       	std	Y+5, r24	; 0x05

	/* malloc  */
	TVP tailVal = newSeq(col->size-1);
    a0ae:	ed 81       	ldd	r30, Y+5	; 0x05
    a0b0:	fe 81       	ldd	r31, Y+6	; 0x06
    a0b2:	82 81       	ldd	r24, Z+2	; 0x02
    a0b4:	93 81       	ldd	r25, Z+3	; 0x03
    a0b6:	01 97       	sbiw	r24, 0x01	; 1
    a0b8:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <newSeq>
    a0bc:	9c 83       	std	Y+4, r25	; 0x04
    a0be:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(tail,tailVal);
    a0c0:	eb 81       	ldd	r30, Y+3	; 0x03
    a0c2:	fc 81       	ldd	r31, Y+4	; 0x04
    a0c4:	84 81       	ldd	r24, Z+4	; 0x04
    a0c6:	95 81       	ldd	r25, Z+5	; 0x05
    a0c8:	9a 83       	std	Y+2, r25	; 0x02
    a0ca:	89 83       	std	Y+1, r24	; 0x01

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a0cc:	81 e0       	ldi	r24, 0x01	; 1
    a0ce:	90 e0       	ldi	r25, 0x00	; 0
    a0d0:	98 87       	std	Y+8, r25	; 0x08
    a0d2:	8f 83       	std	Y+7, r24	; 0x07
    a0d4:	29 c0       	rjmp	.+82     	; 0xa128 <vdmSeqTl+0xb4>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
    a0d6:	e9 81       	ldd	r30, Y+1	; 0x01
    a0d8:	fa 81       	ldd	r31, Y+2	; 0x02
    a0da:	40 81       	ld	r20, Z
    a0dc:	51 81       	ldd	r21, Z+1	; 0x01
    a0de:	2f 81       	ldd	r18, Y+7	; 0x07
    a0e0:	38 85       	ldd	r19, Y+8	; 0x08
    a0e2:	81 e0       	ldi	r24, 0x01	; 1
    a0e4:	90 e0       	ldi	r25, 0x00	; 0
    a0e6:	82 1b       	sub	r24, r18
    a0e8:	93 0b       	sbc	r25, r19
    a0ea:	88 0f       	add	r24, r24
    a0ec:	99 1f       	adc	r25, r25
    a0ee:	90 95       	com	r25
    a0f0:	81 95       	neg	r24
    a0f2:	9f 4f       	sbci	r25, 0xFF	; 255
    a0f4:	8a 01       	movw	r16, r20
    a0f6:	08 0f       	add	r16, r24
    a0f8:	19 1f       	adc	r17, r25
    a0fa:	ed 81       	ldd	r30, Y+5	; 0x05
    a0fc:	fe 81       	ldd	r31, Y+6	; 0x06
    a0fe:	20 81       	ld	r18, Z
    a100:	31 81       	ldd	r19, Z+1	; 0x01
    a102:	8f 81       	ldd	r24, Y+7	; 0x07
    a104:	98 85       	ldd	r25, Y+8	; 0x08
    a106:	88 0f       	add	r24, r24
    a108:	99 1f       	adc	r25, r25
    a10a:	f9 01       	movw	r30, r18
    a10c:	e8 0f       	add	r30, r24
    a10e:	f9 1f       	adc	r31, r25
    a110:	80 81       	ld	r24, Z
    a112:	91 81       	ldd	r25, Z+1	; 0x01
    a114:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a118:	f8 01       	movw	r30, r16
    a11a:	91 83       	std	Z+1, r25	; 0x01
    a11c:	80 83       	st	Z, r24
	/* malloc  */
	TVP tailVal = newSeq(col->size-1);
	UNWRAP_COLLECTION(tail,tailVal);

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a11e:	8f 81       	ldd	r24, Y+7	; 0x07
    a120:	98 85       	ldd	r25, Y+8	; 0x08
    a122:	01 96       	adiw	r24, 0x01	; 1
    a124:	98 87       	std	Y+8, r25	; 0x08
    a126:	8f 83       	std	Y+7, r24	; 0x07
    a128:	ed 81       	ldd	r30, Y+5	; 0x05
    a12a:	fe 81       	ldd	r31, Y+6	; 0x06
    a12c:	22 81       	ldd	r18, Z+2	; 0x02
    a12e:	33 81       	ldd	r19, Z+3	; 0x03
    a130:	8f 81       	ldd	r24, Y+7	; 0x07
    a132:	98 85       	ldd	r25, Y+8	; 0x08
    a134:	82 17       	cp	r24, r18
    a136:	93 07       	cpc	r25, r19
    a138:	74 f2       	brlt	.-100    	; 0xa0d6 <vdmSeqTl+0x62>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
	}

	return tailVal;
    a13a:	8b 81       	ldd	r24, Y+3	; 0x03
    a13c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    a13e:	2a 96       	adiw	r28, 0x0a	; 10
    a140:	0f b6       	in	r0, 0x3f	; 63
    a142:	f8 94       	cli
    a144:	de bf       	out	0x3e, r29	; 62
    a146:	0f be       	out	0x3f, r0	; 63
    a148:	cd bf       	out	0x3d, r28	; 61
    a14a:	cf 91       	pop	r28
    a14c:	df 91       	pop	r29
    a14e:	1f 91       	pop	r17
    a150:	0f 91       	pop	r16
    a152:	08 95       	ret

0000a154 <vdmSeqTlGC>:

TVP vdmSeqTlGC(TVP seq, TVP *from)
{
    a154:	0f 93       	push	r16
    a156:	1f 93       	push	r17
    a158:	df 93       	push	r29
    a15a:	cf 93       	push	r28
    a15c:	cd b7       	in	r28, 0x3d	; 61
    a15e:	de b7       	in	r29, 0x3e	; 62
    a160:	2c 97       	sbiw	r28, 0x0c	; 12
    a162:	0f b6       	in	r0, 0x3f	; 63
    a164:	f8 94       	cli
    a166:	de bf       	out	0x3e, r29	; 62
    a168:	0f be       	out	0x3f, r0	; 63
    a16a:	cd bf       	out	0x3d, r28	; 61
    a16c:	9a 87       	std	Y+10, r25	; 0x0a
    a16e:	89 87       	std	Y+9, r24	; 0x09
    a170:	7c 87       	std	Y+12, r23	; 0x0c
    a172:	6b 87       	std	Y+11, r22	; 0x0b
	int i;

	ASSERT_CHECK(seq);
    a174:	e9 85       	ldd	r30, Y+9	; 0x09
    a176:	fa 85       	ldd	r31, Y+10	; 0x0a
    a178:	80 81       	ld	r24, Z
    a17a:	91 81       	ldd	r25, Z+1	; 0x01
    a17c:	88 30       	cpi	r24, 0x08	; 8
    a17e:	91 05       	cpc	r25, r1
    a180:	11 f0       	breq	.+4      	; 0xa186 <vdmSeqTlGC+0x32>
    a182:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a186:	e9 85       	ldd	r30, Y+9	; 0x09
    a188:	fa 85       	ldd	r31, Y+10	; 0x0a
    a18a:	84 81       	ldd	r24, Z+4	; 0x04
    a18c:	95 81       	ldd	r25, Z+5	; 0x05
    a18e:	9e 83       	std	Y+6, r25	; 0x06
    a190:	8d 83       	std	Y+5, r24	; 0x05

	/* malloc  */
	TVP tailVal = newSeqGC(col->size - 1, from);
    a192:	ed 81       	ldd	r30, Y+5	; 0x05
    a194:	fe 81       	ldd	r31, Y+6	; 0x06
    a196:	82 81       	ldd	r24, Z+2	; 0x02
    a198:	93 81       	ldd	r25, Z+3	; 0x03
    a19a:	01 97       	sbiw	r24, 0x01	; 1
    a19c:	2b 85       	ldd	r18, Y+11	; 0x0b
    a19e:	3c 85       	ldd	r19, Y+12	; 0x0c
    a1a0:	b9 01       	movw	r22, r18
    a1a2:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <newSeqGC>
    a1a6:	9c 83       	std	Y+4, r25	; 0x04
    a1a8:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(tail,tailVal);
    a1aa:	eb 81       	ldd	r30, Y+3	; 0x03
    a1ac:	fc 81       	ldd	r31, Y+4	; 0x04
    a1ae:	84 81       	ldd	r24, Z+4	; 0x04
    a1b0:	95 81       	ldd	r25, Z+5	; 0x05
    a1b2:	9a 83       	std	Y+2, r25	; 0x02
    a1b4:	89 83       	std	Y+1, r24	; 0x01

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a1b6:	81 e0       	ldi	r24, 0x01	; 1
    a1b8:	90 e0       	ldi	r25, 0x00	; 0
    a1ba:	98 87       	std	Y+8, r25	; 0x08
    a1bc:	8f 83       	std	Y+7, r24	; 0x07
    a1be:	29 c0       	rjmp	.+82     	; 0xa212 <vdmSeqTlGC+0xbe>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
    a1c0:	e9 81       	ldd	r30, Y+1	; 0x01
    a1c2:	fa 81       	ldd	r31, Y+2	; 0x02
    a1c4:	40 81       	ld	r20, Z
    a1c6:	51 81       	ldd	r21, Z+1	; 0x01
    a1c8:	2f 81       	ldd	r18, Y+7	; 0x07
    a1ca:	38 85       	ldd	r19, Y+8	; 0x08
    a1cc:	81 e0       	ldi	r24, 0x01	; 1
    a1ce:	90 e0       	ldi	r25, 0x00	; 0
    a1d0:	82 1b       	sub	r24, r18
    a1d2:	93 0b       	sbc	r25, r19
    a1d4:	88 0f       	add	r24, r24
    a1d6:	99 1f       	adc	r25, r25
    a1d8:	90 95       	com	r25
    a1da:	81 95       	neg	r24
    a1dc:	9f 4f       	sbci	r25, 0xFF	; 255
    a1de:	8a 01       	movw	r16, r20
    a1e0:	08 0f       	add	r16, r24
    a1e2:	19 1f       	adc	r17, r25
    a1e4:	ed 81       	ldd	r30, Y+5	; 0x05
    a1e6:	fe 81       	ldd	r31, Y+6	; 0x06
    a1e8:	20 81       	ld	r18, Z
    a1ea:	31 81       	ldd	r19, Z+1	; 0x01
    a1ec:	8f 81       	ldd	r24, Y+7	; 0x07
    a1ee:	98 85       	ldd	r25, Y+8	; 0x08
    a1f0:	88 0f       	add	r24, r24
    a1f2:	99 1f       	adc	r25, r25
    a1f4:	f9 01       	movw	r30, r18
    a1f6:	e8 0f       	add	r30, r24
    a1f8:	f9 1f       	adc	r31, r25
    a1fa:	80 81       	ld	r24, Z
    a1fc:	91 81       	ldd	r25, Z+1	; 0x01
    a1fe:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a202:	f8 01       	movw	r30, r16
    a204:	91 83       	std	Z+1, r25	; 0x01
    a206:	80 83       	st	Z, r24
	/* malloc  */
	TVP tailVal = newSeqGC(col->size - 1, from);
	UNWRAP_COLLECTION(tail,tailVal);

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a208:	8f 81       	ldd	r24, Y+7	; 0x07
    a20a:	98 85       	ldd	r25, Y+8	; 0x08
    a20c:	01 96       	adiw	r24, 0x01	; 1
    a20e:	98 87       	std	Y+8, r25	; 0x08
    a210:	8f 83       	std	Y+7, r24	; 0x07
    a212:	ed 81       	ldd	r30, Y+5	; 0x05
    a214:	fe 81       	ldd	r31, Y+6	; 0x06
    a216:	22 81       	ldd	r18, Z+2	; 0x02
    a218:	33 81       	ldd	r19, Z+3	; 0x03
    a21a:	8f 81       	ldd	r24, Y+7	; 0x07
    a21c:	98 85       	ldd	r25, Y+8	; 0x08
    a21e:	82 17       	cp	r24, r18
    a220:	93 07       	cpc	r25, r19
    a222:	74 f2       	brlt	.-100    	; 0xa1c0 <vdmSeqTlGC+0x6c>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
	}

	return tailVal;
    a224:	8b 81       	ldd	r24, Y+3	; 0x03
    a226:	9c 81       	ldd	r25, Y+4	; 0x04
}
    a228:	2c 96       	adiw	r28, 0x0c	; 12
    a22a:	0f b6       	in	r0, 0x3f	; 63
    a22c:	f8 94       	cli
    a22e:	de bf       	out	0x3e, r29	; 62
    a230:	0f be       	out	0x3f, r0	; 63
    a232:	cd bf       	out	0x3d, r28	; 61
    a234:	cf 91       	pop	r28
    a236:	df 91       	pop	r29
    a238:	1f 91       	pop	r17
    a23a:	0f 91       	pop	r16
    a23c:	08 95       	ret

0000a23e <vdmSeqLen>:

TVP vdmSeqLen(TVP seq)
{
    a23e:	df 93       	push	r29
    a240:	cf 93       	push	r28
    a242:	00 d0       	rcall	.+0      	; 0xa244 <vdmSeqLen+0x6>
    a244:	00 d0       	rcall	.+0      	; 0xa246 <vdmSeqLen+0x8>
    a246:	cd b7       	in	r28, 0x3d	; 61
    a248:	de b7       	in	r29, 0x3e	; 62
    a24a:	9c 83       	std	Y+4, r25	; 0x04
    a24c:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK(seq);
    a24e:	eb 81       	ldd	r30, Y+3	; 0x03
    a250:	fc 81       	ldd	r31, Y+4	; 0x04
    a252:	80 81       	ld	r24, Z
    a254:	91 81       	ldd	r25, Z+1	; 0x01
    a256:	88 30       	cpi	r24, 0x08	; 8
    a258:	91 05       	cpc	r25, r1
    a25a:	11 f0       	breq	.+4      	; 0xa260 <vdmSeqLen+0x22>
    a25c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a260:	eb 81       	ldd	r30, Y+3	; 0x03
    a262:	fc 81       	ldd	r31, Y+4	; 0x04
    a264:	84 81       	ldd	r24, Z+4	; 0x04
    a266:	95 81       	ldd	r25, Z+5	; 0x05
    a268:	9a 83       	std	Y+2, r25	; 0x02
    a26a:	89 83       	std	Y+1, r24	; 0x01
	return newInt(col->size);
    a26c:	e9 81       	ldd	r30, Y+1	; 0x01
    a26e:	fa 81       	ldd	r31, Y+2	; 0x02
    a270:	82 81       	ldd	r24, Z+2	; 0x02
    a272:	93 81       	ldd	r25, Z+3	; 0x03
    a274:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
}
    a278:	0f 90       	pop	r0
    a27a:	0f 90       	pop	r0
    a27c:	0f 90       	pop	r0
    a27e:	0f 90       	pop	r0
    a280:	cf 91       	pop	r28
    a282:	df 91       	pop	r29
    a284:	08 95       	ret

0000a286 <vdmSeqLenGC>:

TVP vdmSeqLenGC(TVP seq, TVP *from)
{
    a286:	df 93       	push	r29
    a288:	cf 93       	push	r28
    a28a:	00 d0       	rcall	.+0      	; 0xa28c <vdmSeqLenGC+0x6>
    a28c:	00 d0       	rcall	.+0      	; 0xa28e <vdmSeqLenGC+0x8>
    a28e:	00 d0       	rcall	.+0      	; 0xa290 <vdmSeqLenGC+0xa>
    a290:	cd b7       	in	r28, 0x3d	; 61
    a292:	de b7       	in	r29, 0x3e	; 62
    a294:	9c 83       	std	Y+4, r25	; 0x04
    a296:	8b 83       	std	Y+3, r24	; 0x03
    a298:	7e 83       	std	Y+6, r23	; 0x06
    a29a:	6d 83       	std	Y+5, r22	; 0x05
	ASSERT_CHECK(seq);
    a29c:	eb 81       	ldd	r30, Y+3	; 0x03
    a29e:	fc 81       	ldd	r31, Y+4	; 0x04
    a2a0:	80 81       	ld	r24, Z
    a2a2:	91 81       	ldd	r25, Z+1	; 0x01
    a2a4:	88 30       	cpi	r24, 0x08	; 8
    a2a6:	91 05       	cpc	r25, r1
    a2a8:	11 f0       	breq	.+4      	; 0xa2ae <vdmSeqLenGC+0x28>
    a2aa:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a2ae:	eb 81       	ldd	r30, Y+3	; 0x03
    a2b0:	fc 81       	ldd	r31, Y+4	; 0x04
    a2b2:	84 81       	ldd	r24, Z+4	; 0x04
    a2b4:	95 81       	ldd	r25, Z+5	; 0x05
    a2b6:	9a 83       	std	Y+2, r25	; 0x02
    a2b8:	89 83       	std	Y+1, r24	; 0x01
	return newIntGC(col->size, from);
    a2ba:	e9 81       	ldd	r30, Y+1	; 0x01
    a2bc:	fa 81       	ldd	r31, Y+2	; 0x02
    a2be:	82 81       	ldd	r24, Z+2	; 0x02
    a2c0:	93 81       	ldd	r25, Z+3	; 0x03
    a2c2:	2d 81       	ldd	r18, Y+5	; 0x05
    a2c4:	3e 81       	ldd	r19, Y+6	; 0x06
    a2c6:	b9 01       	movw	r22, r18
    a2c8:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
}
    a2cc:	26 96       	adiw	r28, 0x06	; 6
    a2ce:	0f b6       	in	r0, 0x3f	; 63
    a2d0:	f8 94       	cli
    a2d2:	de bf       	out	0x3e, r29	; 62
    a2d4:	0f be       	out	0x3f, r0	; 63
    a2d6:	cd bf       	out	0x3d, r28	; 61
    a2d8:	cf 91       	pop	r28
    a2da:	df 91       	pop	r29
    a2dc:	08 95       	ret

0000a2de <vdmSeqElems>:

#ifndef NO_SETS
TVP vdmSeqElems(TVP seq)
{
    a2de:	df 93       	push	r29
    a2e0:	cf 93       	push	r28
    a2e2:	00 d0       	rcall	.+0      	; 0xa2e4 <vdmSeqElems+0x6>
    a2e4:	00 d0       	rcall	.+0      	; 0xa2e6 <vdmSeqElems+0x8>
    a2e6:	00 d0       	rcall	.+0      	; 0xa2e8 <vdmSeqElems+0xa>
    a2e8:	cd b7       	in	r28, 0x3d	; 61
    a2ea:	de b7       	in	r29, 0x3e	; 62
    a2ec:	9e 83       	std	Y+6, r25	; 0x06
    a2ee:	8d 83       	std	Y+5, r24	; 0x05
	ASSERT_CHECK(seq);
    a2f0:	ed 81       	ldd	r30, Y+5	; 0x05
    a2f2:	fe 81       	ldd	r31, Y+6	; 0x06
    a2f4:	80 81       	ld	r24, Z
    a2f6:	91 81       	ldd	r25, Z+1	; 0x01
    a2f8:	88 30       	cpi	r24, 0x08	; 8
    a2fa:	91 05       	cpc	r25, r1
    a2fc:	11 f0       	breq	.+4      	; 0xa302 <vdmSeqElems+0x24>
    a2fe:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a302:	ed 81       	ldd	r30, Y+5	; 0x05
    a304:	fe 81       	ldd	r31, Y+6	; 0x06
    a306:	84 81       	ldd	r24, Z+4	; 0x04
    a308:	95 81       	ldd	r25, Z+5	; 0x05
    a30a:	9c 83       	std	Y+4, r25	; 0x04
    a30c:	8b 83       	std	Y+3, r24	; 0x03

	TVP elemsVal = newSetWithValues(col->size, col->value);
    a30e:	eb 81       	ldd	r30, Y+3	; 0x03
    a310:	fc 81       	ldd	r31, Y+4	; 0x04
    a312:	82 81       	ldd	r24, Z+2	; 0x02
    a314:	93 81       	ldd	r25, Z+3	; 0x03
    a316:	eb 81       	ldd	r30, Y+3	; 0x03
    a318:	fc 81       	ldd	r31, Y+4	; 0x04
    a31a:	20 81       	ld	r18, Z
    a31c:	31 81       	ldd	r19, Z+1	; 0x01
    a31e:	b9 01       	movw	r22, r18
    a320:	0e 94 c2 56 	call	0xad84	; 0xad84 <newSetWithValues>
    a324:	9a 83       	std	Y+2, r25	; 0x02
    a326:	89 83       	std	Y+1, r24	; 0x01

	return elemsVal;
    a328:	89 81       	ldd	r24, Y+1	; 0x01
    a32a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a32c:	26 96       	adiw	r28, 0x06	; 6
    a32e:	0f b6       	in	r0, 0x3f	; 63
    a330:	f8 94       	cli
    a332:	de bf       	out	0x3e, r29	; 62
    a334:	0f be       	out	0x3f, r0	; 63
    a336:	cd bf       	out	0x3d, r28	; 61
    a338:	cf 91       	pop	r28
    a33a:	df 91       	pop	r29
    a33c:	08 95       	ret

0000a33e <vdmSeqElemsGC>:


TVP vdmSeqElemsGC(TVP seq, TVP *from)
{
    a33e:	df 93       	push	r29
    a340:	cf 93       	push	r28
    a342:	cd b7       	in	r28, 0x3d	; 61
    a344:	de b7       	in	r29, 0x3e	; 62
    a346:	28 97       	sbiw	r28, 0x08	; 8
    a348:	0f b6       	in	r0, 0x3f	; 63
    a34a:	f8 94       	cli
    a34c:	de bf       	out	0x3e, r29	; 62
    a34e:	0f be       	out	0x3f, r0	; 63
    a350:	cd bf       	out	0x3d, r28	; 61
    a352:	9e 83       	std	Y+6, r25	; 0x06
    a354:	8d 83       	std	Y+5, r24	; 0x05
    a356:	78 87       	std	Y+8, r23	; 0x08
    a358:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK(seq);
    a35a:	ed 81       	ldd	r30, Y+5	; 0x05
    a35c:	fe 81       	ldd	r31, Y+6	; 0x06
    a35e:	80 81       	ld	r24, Z
    a360:	91 81       	ldd	r25, Z+1	; 0x01
    a362:	88 30       	cpi	r24, 0x08	; 8
    a364:	91 05       	cpc	r25, r1
    a366:	11 f0       	breq	.+4      	; 0xa36c <vdmSeqElemsGC+0x2e>
    a368:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a36c:	ed 81       	ldd	r30, Y+5	; 0x05
    a36e:	fe 81       	ldd	r31, Y+6	; 0x06
    a370:	84 81       	ldd	r24, Z+4	; 0x04
    a372:	95 81       	ldd	r25, Z+5	; 0x05
    a374:	9c 83       	std	Y+4, r25	; 0x04
    a376:	8b 83       	std	Y+3, r24	; 0x03

	TVP elemsVal = newSetWithValuesGC(col->size, col->value, from);
    a378:	eb 81       	ldd	r30, Y+3	; 0x03
    a37a:	fc 81       	ldd	r31, Y+4	; 0x04
    a37c:	82 81       	ldd	r24, Z+2	; 0x02
    a37e:	93 81       	ldd	r25, Z+3	; 0x03
    a380:	eb 81       	ldd	r30, Y+3	; 0x03
    a382:	fc 81       	ldd	r31, Y+4	; 0x04
    a384:	20 81       	ld	r18, Z
    a386:	31 81       	ldd	r19, Z+1	; 0x01
    a388:	4f 81       	ldd	r20, Y+7	; 0x07
    a38a:	58 85       	ldd	r21, Y+8	; 0x08
    a38c:	b9 01       	movw	r22, r18
    a38e:	0e 94 63 57 	call	0xaec6	; 0xaec6 <newSetWithValuesGC>
    a392:	9a 83       	std	Y+2, r25	; 0x02
    a394:	89 83       	std	Y+1, r24	; 0x01

	return elemsVal;
    a396:	89 81       	ldd	r24, Y+1	; 0x01
    a398:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a39a:	28 96       	adiw	r28, 0x08	; 8
    a39c:	0f b6       	in	r0, 0x3f	; 63
    a39e:	f8 94       	cli
    a3a0:	de bf       	out	0x3e, r29	; 62
    a3a2:	0f be       	out	0x3f, r0	; 63
    a3a4:	cd bf       	out	0x3d, r28	; 61
    a3a6:	cf 91       	pop	r28
    a3a8:	df 91       	pop	r29
    a3aa:	08 95       	ret

0000a3ac <vdmSeqInds>:


TVP vdmSeqInds(TVP seq)
{
    a3ac:	0f 93       	push	r16
    a3ae:	1f 93       	push	r17
    a3b0:	df 93       	push	r29
    a3b2:	cf 93       	push	r28
    a3b4:	cd b7       	in	r28, 0x3d	; 61
    a3b6:	de b7       	in	r29, 0x3e	; 62
    a3b8:	2a 97       	sbiw	r28, 0x0a	; 10
    a3ba:	0f b6       	in	r0, 0x3f	; 63
    a3bc:	f8 94       	cli
    a3be:	de bf       	out	0x3e, r29	; 62
    a3c0:	0f be       	out	0x3f, r0	; 63
    a3c2:	cd bf       	out	0x3d, r28	; 61
    a3c4:	9a 87       	std	Y+10, r25	; 0x0a
    a3c6:	89 87       	std	Y+9, r24	; 0x09
	int i;

	ASSERT_CHECK(seq);
    a3c8:	e9 85       	ldd	r30, Y+9	; 0x09
    a3ca:	fa 85       	ldd	r31, Y+10	; 0x0a
    a3cc:	80 81       	ld	r24, Z
    a3ce:	91 81       	ldd	r25, Z+1	; 0x01
    a3d0:	88 30       	cpi	r24, 0x08	; 8
    a3d2:	91 05       	cpc	r25, r1
    a3d4:	11 f0       	breq	.+4      	; 0xa3da <vdmSeqInds+0x2e>
    a3d6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a3da:	e9 85       	ldd	r30, Y+9	; 0x09
    a3dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    a3de:	84 81       	ldd	r24, Z+4	; 0x04
    a3e0:	95 81       	ldd	r25, Z+5	; 0x05
    a3e2:	9e 83       	std	Y+6, r25	; 0x06
    a3e4:	8d 83       	std	Y+5, r24	; 0x05

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
    a3e6:	ed 81       	ldd	r30, Y+5	; 0x05
    a3e8:	fe 81       	ldd	r31, Y+6	; 0x06
    a3ea:	82 81       	ldd	r24, Z+2	; 0x02
    a3ec:	93 81       	ldd	r25, Z+3	; 0x03
    a3ee:	62 e0       	ldi	r22, 0x02	; 2
    a3f0:	70 e0       	ldi	r23, 0x00	; 0
    a3f2:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    a3f6:	9c 83       	std	Y+4, r25	; 0x04
    a3f8:	8b 83       	std	Y+3, r24	; 0x03
	assert(value != NULL);
    a3fa:	8b 81       	ldd	r24, Y+3	; 0x03
    a3fc:	9c 81       	ldd	r25, Y+4	; 0x04
    a3fe:	00 97       	sbiw	r24, 0x00	; 0
    a400:	11 f4       	brne	.+4      	; 0xa406 <vdmSeqInds+0x5a>
    a402:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a406:	18 86       	std	Y+8, r1	; 0x08
    a408:	1f 82       	std	Y+7, r1	; 0x07
    a40a:	17 c0       	rjmp	.+46     	; 0xa43a <vdmSeqInds+0x8e>
	{
		value[i] = newInt(i+1);
    a40c:	8f 81       	ldd	r24, Y+7	; 0x07
    a40e:	98 85       	ldd	r25, Y+8	; 0x08
    a410:	9c 01       	movw	r18, r24
    a412:	22 0f       	add	r18, r18
    a414:	33 1f       	adc	r19, r19
    a416:	8b 81       	ldd	r24, Y+3	; 0x03
    a418:	9c 81       	ldd	r25, Y+4	; 0x04
    a41a:	8c 01       	movw	r16, r24
    a41c:	02 0f       	add	r16, r18
    a41e:	13 1f       	adc	r17, r19
    a420:	8f 81       	ldd	r24, Y+7	; 0x07
    a422:	98 85       	ldd	r25, Y+8	; 0x08
    a424:	01 96       	adiw	r24, 0x01	; 1
    a426:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    a42a:	f8 01       	movw	r30, r16
    a42c:	91 83       	std	Z+1, r25	; 0x01
    a42e:	80 83       	st	Z, r24

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
	assert(value != NULL);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a430:	8f 81       	ldd	r24, Y+7	; 0x07
    a432:	98 85       	ldd	r25, Y+8	; 0x08
    a434:	01 96       	adiw	r24, 0x01	; 1
    a436:	98 87       	std	Y+8, r25	; 0x08
    a438:	8f 83       	std	Y+7, r24	; 0x07
    a43a:	ed 81       	ldd	r30, Y+5	; 0x05
    a43c:	fe 81       	ldd	r31, Y+6	; 0x06
    a43e:	22 81       	ldd	r18, Z+2	; 0x02
    a440:	33 81       	ldd	r19, Z+3	; 0x03
    a442:	8f 81       	ldd	r24, Y+7	; 0x07
    a444:	98 85       	ldd	r25, Y+8	; 0x08
    a446:	82 17       	cp	r24, r18
    a448:	93 07       	cpc	r25, r19
    a44a:	04 f3       	brlt	.-64     	; 0xa40c <vdmSeqInds+0x60>
	{
		value[i] = newInt(i+1);
	}

	TVP indsVal = newSetWithValues(col->size, value);
    a44c:	ed 81       	ldd	r30, Y+5	; 0x05
    a44e:	fe 81       	ldd	r31, Y+6	; 0x06
    a450:	82 81       	ldd	r24, Z+2	; 0x02
    a452:	93 81       	ldd	r25, Z+3	; 0x03
    a454:	2b 81       	ldd	r18, Y+3	; 0x03
    a456:	3c 81       	ldd	r19, Y+4	; 0x04
    a458:	b9 01       	movw	r22, r18
    a45a:	0e 94 c2 56 	call	0xad84	; 0xad84 <newSetWithValues>
    a45e:	9a 83       	std	Y+2, r25	; 0x02
    a460:	89 83       	std	Y+1, r24	; 0x01

	return indsVal;
    a462:	89 81       	ldd	r24, Y+1	; 0x01
    a464:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a466:	2a 96       	adiw	r28, 0x0a	; 10
    a468:	0f b6       	in	r0, 0x3f	; 63
    a46a:	f8 94       	cli
    a46c:	de bf       	out	0x3e, r29	; 62
    a46e:	0f be       	out	0x3f, r0	; 63
    a470:	cd bf       	out	0x3d, r28	; 61
    a472:	cf 91       	pop	r28
    a474:	df 91       	pop	r29
    a476:	1f 91       	pop	r17
    a478:	0f 91       	pop	r16
    a47a:	08 95       	ret

0000a47c <vdmSeqIndsGC>:


TVP vdmSeqIndsGC(TVP seq, TVP *from)
{
    a47c:	0f 93       	push	r16
    a47e:	1f 93       	push	r17
    a480:	df 93       	push	r29
    a482:	cf 93       	push	r28
    a484:	cd b7       	in	r28, 0x3d	; 61
    a486:	de b7       	in	r29, 0x3e	; 62
    a488:	2c 97       	sbiw	r28, 0x0c	; 12
    a48a:	0f b6       	in	r0, 0x3f	; 63
    a48c:	f8 94       	cli
    a48e:	de bf       	out	0x3e, r29	; 62
    a490:	0f be       	out	0x3f, r0	; 63
    a492:	cd bf       	out	0x3d, r28	; 61
    a494:	9a 87       	std	Y+10, r25	; 0x0a
    a496:	89 87       	std	Y+9, r24	; 0x09
    a498:	7c 87       	std	Y+12, r23	; 0x0c
    a49a:	6b 87       	std	Y+11, r22	; 0x0b
	int i;

	ASSERT_CHECK(seq);
    a49c:	e9 85       	ldd	r30, Y+9	; 0x09
    a49e:	fa 85       	ldd	r31, Y+10	; 0x0a
    a4a0:	80 81       	ld	r24, Z
    a4a2:	91 81       	ldd	r25, Z+1	; 0x01
    a4a4:	88 30       	cpi	r24, 0x08	; 8
    a4a6:	91 05       	cpc	r25, r1
    a4a8:	11 f0       	breq	.+4      	; 0xa4ae <vdmSeqIndsGC+0x32>
    a4aa:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a4ae:	e9 85       	ldd	r30, Y+9	; 0x09
    a4b0:	fa 85       	ldd	r31, Y+10	; 0x0a
    a4b2:	84 81       	ldd	r24, Z+4	; 0x04
    a4b4:	95 81       	ldd	r25, Z+5	; 0x05
    a4b6:	9e 83       	std	Y+6, r25	; 0x06
    a4b8:	8d 83       	std	Y+5, r24	; 0x05

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
    a4ba:	ed 81       	ldd	r30, Y+5	; 0x05
    a4bc:	fe 81       	ldd	r31, Y+6	; 0x06
    a4be:	82 81       	ldd	r24, Z+2	; 0x02
    a4c0:	93 81       	ldd	r25, Z+3	; 0x03
    a4c2:	62 e0       	ldi	r22, 0x02	; 2
    a4c4:	70 e0       	ldi	r23, 0x00	; 0
    a4c6:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    a4ca:	9c 83       	std	Y+4, r25	; 0x04
    a4cc:	8b 83       	std	Y+3, r24	; 0x03
	assert(value != NULL);
    a4ce:	8b 81       	ldd	r24, Y+3	; 0x03
    a4d0:	9c 81       	ldd	r25, Y+4	; 0x04
    a4d2:	00 97       	sbiw	r24, 0x00	; 0
    a4d4:	11 f4       	brne	.+4      	; 0xa4da <vdmSeqIndsGC+0x5e>
    a4d6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a4da:	18 86       	std	Y+8, r1	; 0x08
    a4dc:	1f 82       	std	Y+7, r1	; 0x07
    a4de:	17 c0       	rjmp	.+46     	; 0xa50e <vdmSeqIndsGC+0x92>
	{
		value[i] = newInt(i+1);
    a4e0:	8f 81       	ldd	r24, Y+7	; 0x07
    a4e2:	98 85       	ldd	r25, Y+8	; 0x08
    a4e4:	9c 01       	movw	r18, r24
    a4e6:	22 0f       	add	r18, r18
    a4e8:	33 1f       	adc	r19, r19
    a4ea:	8b 81       	ldd	r24, Y+3	; 0x03
    a4ec:	9c 81       	ldd	r25, Y+4	; 0x04
    a4ee:	8c 01       	movw	r16, r24
    a4f0:	02 0f       	add	r16, r18
    a4f2:	13 1f       	adc	r17, r19
    a4f4:	8f 81       	ldd	r24, Y+7	; 0x07
    a4f6:	98 85       	ldd	r25, Y+8	; 0x08
    a4f8:	01 96       	adiw	r24, 0x01	; 1
    a4fa:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    a4fe:	f8 01       	movw	r30, r16
    a500:	91 83       	std	Z+1, r25	; 0x01
    a502:	80 83       	st	Z, r24

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
	assert(value != NULL);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a504:	8f 81       	ldd	r24, Y+7	; 0x07
    a506:	98 85       	ldd	r25, Y+8	; 0x08
    a508:	01 96       	adiw	r24, 0x01	; 1
    a50a:	98 87       	std	Y+8, r25	; 0x08
    a50c:	8f 83       	std	Y+7, r24	; 0x07
    a50e:	ed 81       	ldd	r30, Y+5	; 0x05
    a510:	fe 81       	ldd	r31, Y+6	; 0x06
    a512:	22 81       	ldd	r18, Z+2	; 0x02
    a514:	33 81       	ldd	r19, Z+3	; 0x03
    a516:	8f 81       	ldd	r24, Y+7	; 0x07
    a518:	98 85       	ldd	r25, Y+8	; 0x08
    a51a:	82 17       	cp	r24, r18
    a51c:	93 07       	cpc	r25, r19
    a51e:	04 f3       	brlt	.-64     	; 0xa4e0 <vdmSeqIndsGC+0x64>
	{
		value[i] = newInt(i+1);
	}

	TVP indsVal = newSetWithValuesGC(col->size, value, from);
    a520:	ed 81       	ldd	r30, Y+5	; 0x05
    a522:	fe 81       	ldd	r31, Y+6	; 0x06
    a524:	82 81       	ldd	r24, Z+2	; 0x02
    a526:	93 81       	ldd	r25, Z+3	; 0x03
    a528:	2b 81       	ldd	r18, Y+3	; 0x03
    a52a:	3c 81       	ldd	r19, Y+4	; 0x04
    a52c:	4b 85       	ldd	r20, Y+11	; 0x0b
    a52e:	5c 85       	ldd	r21, Y+12	; 0x0c
    a530:	b9 01       	movw	r22, r18
    a532:	0e 94 63 57 	call	0xaec6	; 0xaec6 <newSetWithValuesGC>
    a536:	9a 83       	std	Y+2, r25	; 0x02
    a538:	89 83       	std	Y+1, r24	; 0x01

	return indsVal;
    a53a:	89 81       	ldd	r24, Y+1	; 0x01
    a53c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a53e:	2c 96       	adiw	r28, 0x0c	; 12
    a540:	0f b6       	in	r0, 0x3f	; 63
    a542:	f8 94       	cli
    a544:	de bf       	out	0x3e, r29	; 62
    a546:	0f be       	out	0x3f, r0	; 63
    a548:	cd bf       	out	0x3d, r28	; 61
    a54a:	cf 91       	pop	r28
    a54c:	df 91       	pop	r29
    a54e:	1f 91       	pop	r17
    a550:	0f 91       	pop	r16
    a552:	08 95       	ret

0000a554 <vdmSeqConc>:
#endif

TVP vdmSeqConc(TVP seq,TVP seq2)
{
    a554:	0f 93       	push	r16
    a556:	1f 93       	push	r17
    a558:	df 93       	push	r29
    a55a:	cf 93       	push	r28
    a55c:	cd b7       	in	r28, 0x3d	; 61
    a55e:	de b7       	in	r29, 0x3e	; 62
    a560:	60 97       	sbiw	r28, 0x10	; 16
    a562:	0f b6       	in	r0, 0x3f	; 63
    a564:	f8 94       	cli
    a566:	de bf       	out	0x3e, r29	; 62
    a568:	0f be       	out	0x3f, r0	; 63
    a56a:	cd bf       	out	0x3d, r28	; 61
    a56c:	9e 87       	std	Y+14, r25	; 0x0e
    a56e:	8d 87       	std	Y+13, r24	; 0x0d
    a570:	78 8b       	std	Y+16, r23	; 0x10
    a572:	6f 87       	std	Y+15, r22	; 0x0f
	int i;

	ASSERT_CHECK(seq);
    a574:	ed 85       	ldd	r30, Y+13	; 0x0d
    a576:	fe 85       	ldd	r31, Y+14	; 0x0e
    a578:	80 81       	ld	r24, Z
    a57a:	91 81       	ldd	r25, Z+1	; 0x01
    a57c:	88 30       	cpi	r24, 0x08	; 8
    a57e:	91 05       	cpc	r25, r1
    a580:	11 f0       	breq	.+4      	; 0xa586 <vdmSeqConc+0x32>
    a582:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(seq2);
    a586:	ef 85       	ldd	r30, Y+15	; 0x0f
    a588:	f8 89       	ldd	r31, Y+16	; 0x10
    a58a:	80 81       	ld	r24, Z
    a58c:	91 81       	ldd	r25, Z+1	; 0x01
    a58e:	88 30       	cpi	r24, 0x08	; 8
    a590:	91 05       	cpc	r25, r1
    a592:	11 f0       	breq	.+4      	; 0xa598 <vdmSeqConc+0x44>
    a594:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a598:	ed 85       	ldd	r30, Y+13	; 0x0d
    a59a:	fe 85       	ldd	r31, Y+14	; 0x0e
    a59c:	84 81       	ldd	r24, Z+4	; 0x04
    a59e:	95 81       	ldd	r25, Z+5	; 0x05
    a5a0:	9a 87       	std	Y+10, r25	; 0x0a
    a5a2:	89 87       	std	Y+9, r24	; 0x09
	UNWRAP_COLLECTION(col2,seq2);
    a5a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    a5a6:	f8 89       	ldd	r31, Y+16	; 0x10
    a5a8:	84 81       	ldd	r24, Z+4	; 0x04
    a5aa:	95 81       	ldd	r25, Z+5	; 0x05
    a5ac:	98 87       	std	Y+8, r25	; 0x08
    a5ae:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP concVal = newSeq(col->size+col2->size);
    a5b0:	e9 85       	ldd	r30, Y+9	; 0x09
    a5b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    a5b4:	22 81       	ldd	r18, Z+2	; 0x02
    a5b6:	33 81       	ldd	r19, Z+3	; 0x03
    a5b8:	ef 81       	ldd	r30, Y+7	; 0x07
    a5ba:	f8 85       	ldd	r31, Y+8	; 0x08
    a5bc:	82 81       	ldd	r24, Z+2	; 0x02
    a5be:	93 81       	ldd	r25, Z+3	; 0x03
    a5c0:	82 0f       	add	r24, r18
    a5c2:	93 1f       	adc	r25, r19
    a5c4:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <newSeq>
    a5c8:	9e 83       	std	Y+6, r25	; 0x06
    a5ca:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(concSeq,concVal);
    a5cc:	ed 81       	ldd	r30, Y+5	; 0x05
    a5ce:	fe 81       	ldd	r31, Y+6	; 0x06
    a5d0:	84 81       	ldd	r24, Z+4	; 0x04
    a5d2:	95 81       	ldd	r25, Z+5	; 0x05
    a5d4:	9c 83       	std	Y+4, r25	; 0x04
    a5d6:	8b 83       	std	Y+3, r24	; 0x03

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a5d8:	1c 86       	std	Y+12, r1	; 0x0c
    a5da:	1b 86       	std	Y+11, r1	; 0x0b
    a5dc:	22 c0       	rjmp	.+68     	; 0xa622 <vdmSeqConc+0xce>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
    a5de:	eb 81       	ldd	r30, Y+3	; 0x03
    a5e0:	fc 81       	ldd	r31, Y+4	; 0x04
    a5e2:	20 81       	ld	r18, Z
    a5e4:	31 81       	ldd	r19, Z+1	; 0x01
    a5e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    a5e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    a5ea:	88 0f       	add	r24, r24
    a5ec:	99 1f       	adc	r25, r25
    a5ee:	89 01       	movw	r16, r18
    a5f0:	08 0f       	add	r16, r24
    a5f2:	19 1f       	adc	r17, r25
    a5f4:	e9 85       	ldd	r30, Y+9	; 0x09
    a5f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    a5f8:	20 81       	ld	r18, Z
    a5fa:	31 81       	ldd	r19, Z+1	; 0x01
    a5fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    a5fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    a600:	88 0f       	add	r24, r24
    a602:	99 1f       	adc	r25, r25
    a604:	f9 01       	movw	r30, r18
    a606:	e8 0f       	add	r30, r24
    a608:	f9 1f       	adc	r31, r25
    a60a:	80 81       	ld	r24, Z
    a60c:	91 81       	ldd	r25, Z+1	; 0x01
    a60e:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a612:	f8 01       	movw	r30, r16
    a614:	91 83       	std	Z+1, r25	; 0x01
    a616:	80 83       	st	Z, r24
	/* malloc  */
	TVP concVal = newSeq(col->size+col2->size);
	UNWRAP_COLLECTION(concSeq,concVal);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a618:	8b 85       	ldd	r24, Y+11	; 0x0b
    a61a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a61c:	01 96       	adiw	r24, 0x01	; 1
    a61e:	9c 87       	std	Y+12, r25	; 0x0c
    a620:	8b 87       	std	Y+11, r24	; 0x0b
    a622:	e9 85       	ldd	r30, Y+9	; 0x09
    a624:	fa 85       	ldd	r31, Y+10	; 0x0a
    a626:	22 81       	ldd	r18, Z+2	; 0x02
    a628:	33 81       	ldd	r19, Z+3	; 0x03
    a62a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a62c:	9c 85       	ldd	r25, Y+12	; 0x0c
    a62e:	82 17       	cp	r24, r18
    a630:	93 07       	cpc	r25, r19
    a632:	ac f2       	brlt	.-86     	; 0xa5de <vdmSeqConc+0x8a>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
    a634:	e9 85       	ldd	r30, Y+9	; 0x09
    a636:	fa 85       	ldd	r31, Y+10	; 0x0a
    a638:	82 81       	ldd	r24, Z+2	; 0x02
    a63a:	93 81       	ldd	r25, Z+3	; 0x03
    a63c:	9a 83       	std	Y+2, r25	; 0x02
    a63e:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0; i < col2->size; i++)
    a640:	1c 86       	std	Y+12, r1	; 0x0c
    a642:	1b 86       	std	Y+11, r1	; 0x0b
    a644:	26 c0       	rjmp	.+76     	; 0xa692 <vdmSeqConc+0x13e>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
    a646:	eb 81       	ldd	r30, Y+3	; 0x03
    a648:	fc 81       	ldd	r31, Y+4	; 0x04
    a64a:	40 81       	ld	r20, Z
    a64c:	51 81       	ldd	r21, Z+1	; 0x01
    a64e:	2b 85       	ldd	r18, Y+11	; 0x0b
    a650:	3c 85       	ldd	r19, Y+12	; 0x0c
    a652:	89 81       	ldd	r24, Y+1	; 0x01
    a654:	9a 81       	ldd	r25, Y+2	; 0x02
    a656:	82 0f       	add	r24, r18
    a658:	93 1f       	adc	r25, r19
    a65a:	88 0f       	add	r24, r24
    a65c:	99 1f       	adc	r25, r25
    a65e:	8a 01       	movw	r16, r20
    a660:	08 0f       	add	r16, r24
    a662:	19 1f       	adc	r17, r25
    a664:	ef 81       	ldd	r30, Y+7	; 0x07
    a666:	f8 85       	ldd	r31, Y+8	; 0x08
    a668:	20 81       	ld	r18, Z
    a66a:	31 81       	ldd	r19, Z+1	; 0x01
    a66c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a66e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a670:	88 0f       	add	r24, r24
    a672:	99 1f       	adc	r25, r25
    a674:	f9 01       	movw	r30, r18
    a676:	e8 0f       	add	r30, r24
    a678:	f9 1f       	adc	r31, r25
    a67a:	80 81       	ld	r24, Z
    a67c:	91 81       	ldd	r25, Z+1	; 0x01
    a67e:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a682:	f8 01       	movw	r30, r16
    a684:	91 83       	std	Z+1, r25	; 0x01
    a686:	80 83       	st	Z, r24
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
    a688:	8b 85       	ldd	r24, Y+11	; 0x0b
    a68a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a68c:	01 96       	adiw	r24, 0x01	; 1
    a68e:	9c 87       	std	Y+12, r25	; 0x0c
    a690:	8b 87       	std	Y+11, r24	; 0x0b
    a692:	ef 81       	ldd	r30, Y+7	; 0x07
    a694:	f8 85       	ldd	r31, Y+8	; 0x08
    a696:	22 81       	ldd	r18, Z+2	; 0x02
    a698:	33 81       	ldd	r19, Z+3	; 0x03
    a69a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a69c:	9c 85       	ldd	r25, Y+12	; 0x0c
    a69e:	82 17       	cp	r24, r18
    a6a0:	93 07       	cpc	r25, r19
    a6a2:	8c f2       	brlt	.-94     	; 0xa646 <vdmSeqConc+0xf2>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
	}

	return concVal;
    a6a4:	8d 81       	ldd	r24, Y+5	; 0x05
    a6a6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a6a8:	60 96       	adiw	r28, 0x10	; 16
    a6aa:	0f b6       	in	r0, 0x3f	; 63
    a6ac:	f8 94       	cli
    a6ae:	de bf       	out	0x3e, r29	; 62
    a6b0:	0f be       	out	0x3f, r0	; 63
    a6b2:	cd bf       	out	0x3d, r28	; 61
    a6b4:	cf 91       	pop	r28
    a6b6:	df 91       	pop	r29
    a6b8:	1f 91       	pop	r17
    a6ba:	0f 91       	pop	r16
    a6bc:	08 95       	ret

0000a6be <vdmSeqConcGC>:

TVP vdmSeqConcGC(TVP seq, TVP seq2, TVP *from)
{
    a6be:	0f 93       	push	r16
    a6c0:	1f 93       	push	r17
    a6c2:	df 93       	push	r29
    a6c4:	cf 93       	push	r28
    a6c6:	cd b7       	in	r28, 0x3d	; 61
    a6c8:	de b7       	in	r29, 0x3e	; 62
    a6ca:	62 97       	sbiw	r28, 0x12	; 18
    a6cc:	0f b6       	in	r0, 0x3f	; 63
    a6ce:	f8 94       	cli
    a6d0:	de bf       	out	0x3e, r29	; 62
    a6d2:	0f be       	out	0x3f, r0	; 63
    a6d4:	cd bf       	out	0x3d, r28	; 61
    a6d6:	9e 87       	std	Y+14, r25	; 0x0e
    a6d8:	8d 87       	std	Y+13, r24	; 0x0d
    a6da:	78 8b       	std	Y+16, r23	; 0x10
    a6dc:	6f 87       	std	Y+15, r22	; 0x0f
    a6de:	5a 8b       	std	Y+18, r21	; 0x12
    a6e0:	49 8b       	std	Y+17, r20	; 0x11
	int i;

	ASSERT_CHECK(seq);
    a6e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    a6e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    a6e6:	80 81       	ld	r24, Z
    a6e8:	91 81       	ldd	r25, Z+1	; 0x01
    a6ea:	88 30       	cpi	r24, 0x08	; 8
    a6ec:	91 05       	cpc	r25, r1
    a6ee:	11 f0       	breq	.+4      	; 0xa6f4 <vdmSeqConcGC+0x36>
    a6f0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(seq2);
    a6f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    a6f6:	f8 89       	ldd	r31, Y+16	; 0x10
    a6f8:	80 81       	ld	r24, Z
    a6fa:	91 81       	ldd	r25, Z+1	; 0x01
    a6fc:	88 30       	cpi	r24, 0x08	; 8
    a6fe:	91 05       	cpc	r25, r1
    a700:	11 f0       	breq	.+4      	; 0xa706 <vdmSeqConcGC+0x48>
    a702:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a706:	ed 85       	ldd	r30, Y+13	; 0x0d
    a708:	fe 85       	ldd	r31, Y+14	; 0x0e
    a70a:	84 81       	ldd	r24, Z+4	; 0x04
    a70c:	95 81       	ldd	r25, Z+5	; 0x05
    a70e:	9a 87       	std	Y+10, r25	; 0x0a
    a710:	89 87       	std	Y+9, r24	; 0x09
	UNWRAP_COLLECTION(col2,seq2);
    a712:	ef 85       	ldd	r30, Y+15	; 0x0f
    a714:	f8 89       	ldd	r31, Y+16	; 0x10
    a716:	84 81       	ldd	r24, Z+4	; 0x04
    a718:	95 81       	ldd	r25, Z+5	; 0x05
    a71a:	98 87       	std	Y+8, r25	; 0x08
    a71c:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP concVal = newSeqGC(col->size+col2->size, from);
    a71e:	e9 85       	ldd	r30, Y+9	; 0x09
    a720:	fa 85       	ldd	r31, Y+10	; 0x0a
    a722:	22 81       	ldd	r18, Z+2	; 0x02
    a724:	33 81       	ldd	r19, Z+3	; 0x03
    a726:	ef 81       	ldd	r30, Y+7	; 0x07
    a728:	f8 85       	ldd	r31, Y+8	; 0x08
    a72a:	82 81       	ldd	r24, Z+2	; 0x02
    a72c:	93 81       	ldd	r25, Z+3	; 0x03
    a72e:	82 0f       	add	r24, r18
    a730:	93 1f       	adc	r25, r19
    a732:	29 89       	ldd	r18, Y+17	; 0x11
    a734:	3a 89       	ldd	r19, Y+18	; 0x12
    a736:	b9 01       	movw	r22, r18
    a738:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <newSeqGC>
    a73c:	9e 83       	std	Y+6, r25	; 0x06
    a73e:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(concSeq,concVal);
    a740:	ed 81       	ldd	r30, Y+5	; 0x05
    a742:	fe 81       	ldd	r31, Y+6	; 0x06
    a744:	84 81       	ldd	r24, Z+4	; 0x04
    a746:	95 81       	ldd	r25, Z+5	; 0x05
    a748:	9c 83       	std	Y+4, r25	; 0x04
    a74a:	8b 83       	std	Y+3, r24	; 0x03

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a74c:	1c 86       	std	Y+12, r1	; 0x0c
    a74e:	1b 86       	std	Y+11, r1	; 0x0b
    a750:	22 c0       	rjmp	.+68     	; 0xa796 <vdmSeqConcGC+0xd8>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
    a752:	eb 81       	ldd	r30, Y+3	; 0x03
    a754:	fc 81       	ldd	r31, Y+4	; 0x04
    a756:	20 81       	ld	r18, Z
    a758:	31 81       	ldd	r19, Z+1	; 0x01
    a75a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a75c:	9c 85       	ldd	r25, Y+12	; 0x0c
    a75e:	88 0f       	add	r24, r24
    a760:	99 1f       	adc	r25, r25
    a762:	89 01       	movw	r16, r18
    a764:	08 0f       	add	r16, r24
    a766:	19 1f       	adc	r17, r25
    a768:	e9 85       	ldd	r30, Y+9	; 0x09
    a76a:	fa 85       	ldd	r31, Y+10	; 0x0a
    a76c:	20 81       	ld	r18, Z
    a76e:	31 81       	ldd	r19, Z+1	; 0x01
    a770:	8b 85       	ldd	r24, Y+11	; 0x0b
    a772:	9c 85       	ldd	r25, Y+12	; 0x0c
    a774:	88 0f       	add	r24, r24
    a776:	99 1f       	adc	r25, r25
    a778:	f9 01       	movw	r30, r18
    a77a:	e8 0f       	add	r30, r24
    a77c:	f9 1f       	adc	r31, r25
    a77e:	80 81       	ld	r24, Z
    a780:	91 81       	ldd	r25, Z+1	; 0x01
    a782:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a786:	f8 01       	movw	r30, r16
    a788:	91 83       	std	Z+1, r25	; 0x01
    a78a:	80 83       	st	Z, r24
	/* malloc  */
	TVP concVal = newSeqGC(col->size+col2->size, from);
	UNWRAP_COLLECTION(concSeq,concVal);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a78c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a78e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a790:	01 96       	adiw	r24, 0x01	; 1
    a792:	9c 87       	std	Y+12, r25	; 0x0c
    a794:	8b 87       	std	Y+11, r24	; 0x0b
    a796:	e9 85       	ldd	r30, Y+9	; 0x09
    a798:	fa 85       	ldd	r31, Y+10	; 0x0a
    a79a:	22 81       	ldd	r18, Z+2	; 0x02
    a79c:	33 81       	ldd	r19, Z+3	; 0x03
    a79e:	8b 85       	ldd	r24, Y+11	; 0x0b
    a7a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    a7a2:	82 17       	cp	r24, r18
    a7a4:	93 07       	cpc	r25, r19
    a7a6:	ac f2       	brlt	.-86     	; 0xa752 <vdmSeqConcGC+0x94>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
    a7a8:	e9 85       	ldd	r30, Y+9	; 0x09
    a7aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    a7ac:	82 81       	ldd	r24, Z+2	; 0x02
    a7ae:	93 81       	ldd	r25, Z+3	; 0x03
    a7b0:	9a 83       	std	Y+2, r25	; 0x02
    a7b2:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0; i < col2->size; i++)
    a7b4:	1c 86       	std	Y+12, r1	; 0x0c
    a7b6:	1b 86       	std	Y+11, r1	; 0x0b
    a7b8:	26 c0       	rjmp	.+76     	; 0xa806 <vdmSeqConcGC+0x148>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
    a7ba:	eb 81       	ldd	r30, Y+3	; 0x03
    a7bc:	fc 81       	ldd	r31, Y+4	; 0x04
    a7be:	40 81       	ld	r20, Z
    a7c0:	51 81       	ldd	r21, Z+1	; 0x01
    a7c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    a7c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    a7c6:	89 81       	ldd	r24, Y+1	; 0x01
    a7c8:	9a 81       	ldd	r25, Y+2	; 0x02
    a7ca:	82 0f       	add	r24, r18
    a7cc:	93 1f       	adc	r25, r19
    a7ce:	88 0f       	add	r24, r24
    a7d0:	99 1f       	adc	r25, r25
    a7d2:	8a 01       	movw	r16, r20
    a7d4:	08 0f       	add	r16, r24
    a7d6:	19 1f       	adc	r17, r25
    a7d8:	ef 81       	ldd	r30, Y+7	; 0x07
    a7da:	f8 85       	ldd	r31, Y+8	; 0x08
    a7dc:	20 81       	ld	r18, Z
    a7de:	31 81       	ldd	r19, Z+1	; 0x01
    a7e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    a7e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    a7e4:	88 0f       	add	r24, r24
    a7e6:	99 1f       	adc	r25, r25
    a7e8:	f9 01       	movw	r30, r18
    a7ea:	e8 0f       	add	r30, r24
    a7ec:	f9 1f       	adc	r31, r25
    a7ee:	80 81       	ld	r24, Z
    a7f0:	91 81       	ldd	r25, Z+1	; 0x01
    a7f2:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a7f6:	f8 01       	movw	r30, r16
    a7f8:	91 83       	std	Z+1, r25	; 0x01
    a7fa:	80 83       	st	Z, r24
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
    a7fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    a7fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    a800:	01 96       	adiw	r24, 0x01	; 1
    a802:	9c 87       	std	Y+12, r25	; 0x0c
    a804:	8b 87       	std	Y+11, r24	; 0x0b
    a806:	ef 81       	ldd	r30, Y+7	; 0x07
    a808:	f8 85       	ldd	r31, Y+8	; 0x08
    a80a:	22 81       	ldd	r18, Z+2	; 0x02
    a80c:	33 81       	ldd	r19, Z+3	; 0x03
    a80e:	8b 85       	ldd	r24, Y+11	; 0x0b
    a810:	9c 85       	ldd	r25, Y+12	; 0x0c
    a812:	82 17       	cp	r24, r18
    a814:	93 07       	cpc	r25, r19
    a816:	8c f2       	brlt	.-94     	; 0xa7ba <vdmSeqConcGC+0xfc>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
	}

	return concVal;
    a818:	8d 81       	ldd	r24, Y+5	; 0x05
    a81a:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a81c:	62 96       	adiw	r28, 0x12	; 18
    a81e:	0f b6       	in	r0, 0x3f	; 63
    a820:	f8 94       	cli
    a822:	de bf       	out	0x3e, r29	; 62
    a824:	0f be       	out	0x3f, r0	; 63
    a826:	cd bf       	out	0x3d, r28	; 61
    a828:	cf 91       	pop	r28
    a82a:	df 91       	pop	r29
    a82c:	1f 91       	pop	r17
    a82e:	0f 91       	pop	r16
    a830:	08 95       	ret

0000a832 <vdmSeqReverse>:

TVP vdmSeqReverse(TVP seq)
{
    a832:	0f 93       	push	r16
    a834:	1f 93       	push	r17
    a836:	df 93       	push	r29
    a838:	cf 93       	push	r28
    a83a:	cd b7       	in	r28, 0x3d	; 61
    a83c:	de b7       	in	r29, 0x3e	; 62
    a83e:	2c 97       	sbiw	r28, 0x0c	; 12
    a840:	0f b6       	in	r0, 0x3f	; 63
    a842:	f8 94       	cli
    a844:	de bf       	out	0x3e, r29	; 62
    a846:	0f be       	out	0x3f, r0	; 63
    a848:	cd bf       	out	0x3d, r28	; 61
    a84a:	9c 87       	std	Y+12, r25	; 0x0c
    a84c:	8b 87       	std	Y+11, r24	; 0x0b
	int i;

	ASSERT_CHECK(seq);
    a84e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a850:	fc 85       	ldd	r31, Y+12	; 0x0c
    a852:	80 81       	ld	r24, Z
    a854:	91 81       	ldd	r25, Z+1	; 0x01
    a856:	88 30       	cpi	r24, 0x08	; 8
    a858:	91 05       	cpc	r25, r1
    a85a:	11 f0       	breq	.+4      	; 0xa860 <vdmSeqReverse+0x2e>
    a85c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a860:	eb 85       	ldd	r30, Y+11	; 0x0b
    a862:	fc 85       	ldd	r31, Y+12	; 0x0c
    a864:	84 81       	ldd	r24, Z+4	; 0x04
    a866:	95 81       	ldd	r25, Z+5	; 0x05
    a868:	98 87       	std	Y+8, r25	; 0x08
    a86a:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP elemsVal = newSeq(col->size);
    a86c:	ef 81       	ldd	r30, Y+7	; 0x07
    a86e:	f8 85       	ldd	r31, Y+8	; 0x08
    a870:	82 81       	ldd	r24, Z+2	; 0x02
    a872:	93 81       	ldd	r25, Z+3	; 0x03
    a874:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <newSeq>
    a878:	9e 83       	std	Y+6, r25	; 0x06
    a87a:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(elems,elemsVal);
    a87c:	ed 81       	ldd	r30, Y+5	; 0x05
    a87e:	fe 81       	ldd	r31, Y+6	; 0x06
    a880:	84 81       	ldd	r24, Z+4	; 0x04
    a882:	95 81       	ldd	r25, Z+5	; 0x05
    a884:	9c 83       	std	Y+4, r25	; 0x04
    a886:	8b 83       	std	Y+3, r24	; 0x03

	int offset = col->size-1;
    a888:	ef 81       	ldd	r30, Y+7	; 0x07
    a88a:	f8 85       	ldd	r31, Y+8	; 0x08
    a88c:	82 81       	ldd	r24, Z+2	; 0x02
    a88e:	93 81       	ldd	r25, Z+3	; 0x03
    a890:	01 97       	sbiw	r24, 0x01	; 1
    a892:	9a 83       	std	Y+2, r25	; 0x02
    a894:	89 83       	std	Y+1, r24	; 0x01
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a896:	1a 86       	std	Y+10, r1	; 0x0a
    a898:	19 86       	std	Y+9, r1	; 0x09
    a89a:	28 c0       	rjmp	.+80     	; 0xa8ec <vdmSeqReverse+0xba>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
    a89c:	eb 81       	ldd	r30, Y+3	; 0x03
    a89e:	fc 81       	ldd	r31, Y+4	; 0x04
    a8a0:	20 81       	ld	r18, Z
    a8a2:	31 81       	ldd	r19, Z+1	; 0x01
    a8a4:	89 85       	ldd	r24, Y+9	; 0x09
    a8a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a8a8:	88 0f       	add	r24, r24
    a8aa:	99 1f       	adc	r25, r25
    a8ac:	89 01       	movw	r16, r18
    a8ae:	08 0f       	add	r16, r24
    a8b0:	19 1f       	adc	r17, r25
    a8b2:	ef 81       	ldd	r30, Y+7	; 0x07
    a8b4:	f8 85       	ldd	r31, Y+8	; 0x08
    a8b6:	40 81       	ld	r20, Z
    a8b8:	51 81       	ldd	r21, Z+1	; 0x01
    a8ba:	29 81       	ldd	r18, Y+1	; 0x01
    a8bc:	3a 81       	ldd	r19, Y+2	; 0x02
    a8be:	89 85       	ldd	r24, Y+9	; 0x09
    a8c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    a8c2:	b9 01       	movw	r22, r18
    a8c4:	68 1b       	sub	r22, r24
    a8c6:	79 0b       	sbc	r23, r25
    a8c8:	cb 01       	movw	r24, r22
    a8ca:	88 0f       	add	r24, r24
    a8cc:	99 1f       	adc	r25, r25
    a8ce:	fa 01       	movw	r30, r20
    a8d0:	e8 0f       	add	r30, r24
    a8d2:	f9 1f       	adc	r31, r25
    a8d4:	80 81       	ld	r24, Z
    a8d6:	91 81       	ldd	r25, Z+1	; 0x01
    a8d8:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a8dc:	f8 01       	movw	r30, r16
    a8de:	91 83       	std	Z+1, r25	; 0x01
    a8e0:	80 83       	st	Z, r24
	TVP elemsVal = newSeq(col->size);
	UNWRAP_COLLECTION(elems,elemsVal);

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a8e2:	89 85       	ldd	r24, Y+9	; 0x09
    a8e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    a8e6:	01 96       	adiw	r24, 0x01	; 1
    a8e8:	9a 87       	std	Y+10, r25	; 0x0a
    a8ea:	89 87       	std	Y+9, r24	; 0x09
    a8ec:	ef 81       	ldd	r30, Y+7	; 0x07
    a8ee:	f8 85       	ldd	r31, Y+8	; 0x08
    a8f0:	22 81       	ldd	r18, Z+2	; 0x02
    a8f2:	33 81       	ldd	r19, Z+3	; 0x03
    a8f4:	89 85       	ldd	r24, Y+9	; 0x09
    a8f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a8f8:	82 17       	cp	r24, r18
    a8fa:	93 07       	cpc	r25, r19
    a8fc:	7c f2       	brlt	.-98     	; 0xa89c <vdmSeqReverse+0x6a>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
	}

	return elemsVal;
    a8fe:	8d 81       	ldd	r24, Y+5	; 0x05
    a900:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a902:	2c 96       	adiw	r28, 0x0c	; 12
    a904:	0f b6       	in	r0, 0x3f	; 63
    a906:	f8 94       	cli
    a908:	de bf       	out	0x3e, r29	; 62
    a90a:	0f be       	out	0x3f, r0	; 63
    a90c:	cd bf       	out	0x3d, r28	; 61
    a90e:	cf 91       	pop	r28
    a910:	df 91       	pop	r29
    a912:	1f 91       	pop	r17
    a914:	0f 91       	pop	r16
    a916:	08 95       	ret

0000a918 <vdmSeqReverseGC>:

TVP vdmSeqReverseGC(TVP seq, TVP *from)
{
    a918:	0f 93       	push	r16
    a91a:	1f 93       	push	r17
    a91c:	df 93       	push	r29
    a91e:	cf 93       	push	r28
    a920:	cd b7       	in	r28, 0x3d	; 61
    a922:	de b7       	in	r29, 0x3e	; 62
    a924:	2e 97       	sbiw	r28, 0x0e	; 14
    a926:	0f b6       	in	r0, 0x3f	; 63
    a928:	f8 94       	cli
    a92a:	de bf       	out	0x3e, r29	; 62
    a92c:	0f be       	out	0x3f, r0	; 63
    a92e:	cd bf       	out	0x3d, r28	; 61
    a930:	9c 87       	std	Y+12, r25	; 0x0c
    a932:	8b 87       	std	Y+11, r24	; 0x0b
    a934:	7e 87       	std	Y+14, r23	; 0x0e
    a936:	6d 87       	std	Y+13, r22	; 0x0d
	int i;

	ASSERT_CHECK(seq);
    a938:	eb 85       	ldd	r30, Y+11	; 0x0b
    a93a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a93c:	80 81       	ld	r24, Z
    a93e:	91 81       	ldd	r25, Z+1	; 0x01
    a940:	88 30       	cpi	r24, 0x08	; 8
    a942:	91 05       	cpc	r25, r1
    a944:	11 f0       	breq	.+4      	; 0xa94a <vdmSeqReverseGC+0x32>
    a946:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col,seq);
    a94a:	eb 85       	ldd	r30, Y+11	; 0x0b
    a94c:	fc 85       	ldd	r31, Y+12	; 0x0c
    a94e:	84 81       	ldd	r24, Z+4	; 0x04
    a950:	95 81       	ldd	r25, Z+5	; 0x05
    a952:	98 87       	std	Y+8, r25	; 0x08
    a954:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP elemsVal = newSeqGC(col->size, from);
    a956:	ef 81       	ldd	r30, Y+7	; 0x07
    a958:	f8 85       	ldd	r31, Y+8	; 0x08
    a95a:	82 81       	ldd	r24, Z+2	; 0x02
    a95c:	93 81       	ldd	r25, Z+3	; 0x03
    a95e:	2d 85       	ldd	r18, Y+13	; 0x0d
    a960:	3e 85       	ldd	r19, Y+14	; 0x0e
    a962:	b9 01       	movw	r22, r18
    a964:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <newSeqGC>
    a968:	9e 83       	std	Y+6, r25	; 0x06
    a96a:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(elems,elemsVal);
    a96c:	ed 81       	ldd	r30, Y+5	; 0x05
    a96e:	fe 81       	ldd	r31, Y+6	; 0x06
    a970:	84 81       	ldd	r24, Z+4	; 0x04
    a972:	95 81       	ldd	r25, Z+5	; 0x05
    a974:	9c 83       	std	Y+4, r25	; 0x04
    a976:	8b 83       	std	Y+3, r24	; 0x03

	int offset = col->size-1;
    a978:	ef 81       	ldd	r30, Y+7	; 0x07
    a97a:	f8 85       	ldd	r31, Y+8	; 0x08
    a97c:	82 81       	ldd	r24, Z+2	; 0x02
    a97e:	93 81       	ldd	r25, Z+3	; 0x03
    a980:	01 97       	sbiw	r24, 0x01	; 1
    a982:	9a 83       	std	Y+2, r25	; 0x02
    a984:	89 83       	std	Y+1, r24	; 0x01
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a986:	1a 86       	std	Y+10, r1	; 0x0a
    a988:	19 86       	std	Y+9, r1	; 0x09
    a98a:	28 c0       	rjmp	.+80     	; 0xa9dc <vdmSeqReverseGC+0xc4>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
    a98c:	eb 81       	ldd	r30, Y+3	; 0x03
    a98e:	fc 81       	ldd	r31, Y+4	; 0x04
    a990:	20 81       	ld	r18, Z
    a992:	31 81       	ldd	r19, Z+1	; 0x01
    a994:	89 85       	ldd	r24, Y+9	; 0x09
    a996:	9a 85       	ldd	r25, Y+10	; 0x0a
    a998:	88 0f       	add	r24, r24
    a99a:	99 1f       	adc	r25, r25
    a99c:	89 01       	movw	r16, r18
    a99e:	08 0f       	add	r16, r24
    a9a0:	19 1f       	adc	r17, r25
    a9a2:	ef 81       	ldd	r30, Y+7	; 0x07
    a9a4:	f8 85       	ldd	r31, Y+8	; 0x08
    a9a6:	40 81       	ld	r20, Z
    a9a8:	51 81       	ldd	r21, Z+1	; 0x01
    a9aa:	29 81       	ldd	r18, Y+1	; 0x01
    a9ac:	3a 81       	ldd	r19, Y+2	; 0x02
    a9ae:	89 85       	ldd	r24, Y+9	; 0x09
    a9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    a9b2:	b9 01       	movw	r22, r18
    a9b4:	68 1b       	sub	r22, r24
    a9b6:	79 0b       	sbc	r23, r25
    a9b8:	cb 01       	movw	r24, r22
    a9ba:	88 0f       	add	r24, r24
    a9bc:	99 1f       	adc	r25, r25
    a9be:	fa 01       	movw	r30, r20
    a9c0:	e8 0f       	add	r30, r24
    a9c2:	f9 1f       	adc	r31, r25
    a9c4:	80 81       	ld	r24, Z
    a9c6:	91 81       	ldd	r25, Z+1	; 0x01
    a9c8:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    a9cc:	f8 01       	movw	r30, r16
    a9ce:	91 83       	std	Z+1, r25	; 0x01
    a9d0:	80 83       	st	Z, r24
	TVP elemsVal = newSeqGC(col->size, from);
	UNWRAP_COLLECTION(elems,elemsVal);

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a9d2:	89 85       	ldd	r24, Y+9	; 0x09
    a9d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    a9d6:	01 96       	adiw	r24, 0x01	; 1
    a9d8:	9a 87       	std	Y+10, r25	; 0x0a
    a9da:	89 87       	std	Y+9, r24	; 0x09
    a9dc:	ef 81       	ldd	r30, Y+7	; 0x07
    a9de:	f8 85       	ldd	r31, Y+8	; 0x08
    a9e0:	22 81       	ldd	r18, Z+2	; 0x02
    a9e2:	33 81       	ldd	r19, Z+3	; 0x03
    a9e4:	89 85       	ldd	r24, Y+9	; 0x09
    a9e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a9e8:	82 17       	cp	r24, r18
    a9ea:	93 07       	cpc	r25, r19
    a9ec:	7c f2       	brlt	.-98     	; 0xa98c <vdmSeqReverseGC+0x74>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
	}

	return elemsVal;
    a9ee:	8d 81       	ldd	r24, Y+5	; 0x05
    a9f0:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a9f2:	2e 96       	adiw	r28, 0x0e	; 14
    a9f4:	0f b6       	in	r0, 0x3f	; 63
    a9f6:	f8 94       	cli
    a9f8:	de bf       	out	0x3e, r29	; 62
    a9fa:	0f be       	out	0x3f, r0	; 63
    a9fc:	cd bf       	out	0x3d, r28	; 61
    a9fe:	cf 91       	pop	r28
    aa00:	df 91       	pop	r29
    aa02:	1f 91       	pop	r17
    aa04:	0f 91       	pop	r16
    aa06:	08 95       	ret

0000aa08 <vdmSeqIndex>:

/* TVP seqMod(TVP seq,TVP seq);  */

TVP vdmSeqIndex(TVP seq, TVP indexVal) /* VDM uses 1 based index  */
{
    aa08:	df 93       	push	r29
    aa0a:	cf 93       	push	r28
    aa0c:	cd b7       	in	r28, 0x3d	; 61
    aa0e:	de b7       	in	r29, 0x3e	; 62
    aa10:	28 97       	sbiw	r28, 0x08	; 8
    aa12:	0f b6       	in	r0, 0x3f	; 63
    aa14:	f8 94       	cli
    aa16:	de bf       	out	0x3e, r29	; 62
    aa18:	0f be       	out	0x3f, r0	; 63
    aa1a:	cd bf       	out	0x3d, r28	; 61
    aa1c:	9e 83       	std	Y+6, r25	; 0x06
    aa1e:	8d 83       	std	Y+5, r24	; 0x05
    aa20:	78 87       	std	Y+8, r23	; 0x08
    aa22:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK(seq);
    aa24:	ed 81       	ldd	r30, Y+5	; 0x05
    aa26:	fe 81       	ldd	r31, Y+6	; 0x06
    aa28:	80 81       	ld	r24, Z
    aa2a:	91 81       	ldd	r25, Z+1	; 0x01
    aa2c:	88 30       	cpi	r24, 0x08	; 8
    aa2e:	91 05       	cpc	r25, r1
    aa30:	11 f0       	breq	.+4      	; 0xaa36 <vdmSeqIndex+0x2e>
    aa32:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    aa36:	ef 81       	ldd	r30, Y+7	; 0x07
    aa38:	f8 85       	ldd	r31, Y+8	; 0x08
    aa3a:	80 81       	ld	r24, Z
    aa3c:	91 81       	ldd	r25, Z+1	; 0x01
    aa3e:	00 97       	sbiw	r24, 0x00	; 0
    aa40:	81 f0       	breq	.+32     	; 0xaa62 <vdmSeqIndex+0x5a>
    aa42:	ef 81       	ldd	r30, Y+7	; 0x07
    aa44:	f8 85       	ldd	r31, Y+8	; 0x08
    aa46:	80 81       	ld	r24, Z
    aa48:	91 81       	ldd	r25, Z+1	; 0x01
    aa4a:	81 30       	cpi	r24, 0x01	; 1
    aa4c:	91 05       	cpc	r25, r1
    aa4e:	49 f0       	breq	.+18     	; 0xaa62 <vdmSeqIndex+0x5a>
    aa50:	ef 81       	ldd	r30, Y+7	; 0x07
    aa52:	f8 85       	ldd	r31, Y+8	; 0x08
    aa54:	80 81       	ld	r24, Z
    aa56:	91 81       	ldd	r25, Z+1	; 0x01
    aa58:	82 30       	cpi	r24, 0x02	; 2
    aa5a:	91 05       	cpc	r25, r1
    aa5c:	11 f0       	breq	.+4      	; 0xaa62 <vdmSeqIndex+0x5a>
    aa5e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	int index = indexVal->value.intVal;
    aa62:	ef 81       	ldd	r30, Y+7	; 0x07
    aa64:	f8 85       	ldd	r31, Y+8	; 0x08
    aa66:	84 81       	ldd	r24, Z+4	; 0x04
    aa68:	95 81       	ldd	r25, Z+5	; 0x05
    aa6a:	9c 83       	std	Y+4, r25	; 0x04
    aa6c:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,seq);
    aa6e:	ed 81       	ldd	r30, Y+5	; 0x05
    aa70:	fe 81       	ldd	r31, Y+6	; 0x06
    aa72:	84 81       	ldd	r24, Z+4	; 0x04
    aa74:	95 81       	ldd	r25, Z+5	; 0x05
    aa76:	9a 83       	std	Y+2, r25	; 0x02
    aa78:	89 83       	std	Y+1, r24	; 0x01

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    aa7a:	8b 81       	ldd	r24, Y+3	; 0x03
    aa7c:	9c 81       	ldd	r25, Y+4	; 0x04
    aa7e:	01 97       	sbiw	r24, 0x01	; 1
    aa80:	99 23       	and	r25, r25
    aa82:	64 f0       	brlt	.+24     	; 0xaa9c <vdmSeqIndex+0x94>
    aa84:	8b 81       	ldd	r24, Y+3	; 0x03
    aa86:	9c 81       	ldd	r25, Y+4	; 0x04
    aa88:	9c 01       	movw	r18, r24
    aa8a:	21 50       	subi	r18, 0x01	; 1
    aa8c:	30 40       	sbci	r19, 0x00	; 0
    aa8e:	e9 81       	ldd	r30, Y+1	; 0x01
    aa90:	fa 81       	ldd	r31, Y+2	; 0x02
    aa92:	82 81       	ldd	r24, Z+2	; 0x02
    aa94:	93 81       	ldd	r25, Z+3	; 0x03
    aa96:	28 17       	cp	r18, r24
    aa98:	39 07       	cpc	r19, r25
    aa9a:	14 f0       	brlt	.+4      	; 0xaaa0 <vdmSeqIndex+0x98>
    aa9c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return vdmClone(col->value[index-1]);
    aaa0:	e9 81       	ldd	r30, Y+1	; 0x01
    aaa2:	fa 81       	ldd	r31, Y+2	; 0x02
    aaa4:	40 81       	ld	r20, Z
    aaa6:	51 81       	ldd	r21, Z+1	; 0x01
    aaa8:	2b 81       	ldd	r18, Y+3	; 0x03
    aaaa:	3c 81       	ldd	r19, Y+4	; 0x04
    aaac:	81 e0       	ldi	r24, 0x01	; 1
    aaae:	90 e0       	ldi	r25, 0x00	; 0
    aab0:	82 1b       	sub	r24, r18
    aab2:	93 0b       	sbc	r25, r19
    aab4:	88 0f       	add	r24, r24
    aab6:	99 1f       	adc	r25, r25
    aab8:	90 95       	com	r25
    aaba:	81 95       	neg	r24
    aabc:	9f 4f       	sbci	r25, 0xFF	; 255
    aabe:	fa 01       	movw	r30, r20
    aac0:	e8 0f       	add	r30, r24
    aac2:	f9 1f       	adc	r31, r25
    aac4:	80 81       	ld	r24, Z
    aac6:	91 81       	ldd	r25, Z+1	; 0x01
    aac8:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
}
    aacc:	28 96       	adiw	r28, 0x08	; 8
    aace:	0f b6       	in	r0, 0x3f	; 63
    aad0:	f8 94       	cli
    aad2:	de bf       	out	0x3e, r29	; 62
    aad4:	0f be       	out	0x3f, r0	; 63
    aad6:	cd bf       	out	0x3d, r28	; 61
    aad8:	cf 91       	pop	r28
    aada:	df 91       	pop	r29
    aadc:	08 95       	ret

0000aade <vdmSeqIndexGC>:

TVP vdmSeqIndexGC(TVP seq, TVP indexVal, TVP *from) /* VDM uses 1 based index  */
{
    aade:	df 93       	push	r29
    aae0:	cf 93       	push	r28
    aae2:	cd b7       	in	r28, 0x3d	; 61
    aae4:	de b7       	in	r29, 0x3e	; 62
    aae6:	2a 97       	sbiw	r28, 0x0a	; 10
    aae8:	0f b6       	in	r0, 0x3f	; 63
    aaea:	f8 94       	cli
    aaec:	de bf       	out	0x3e, r29	; 62
    aaee:	0f be       	out	0x3f, r0	; 63
    aaf0:	cd bf       	out	0x3d, r28	; 61
    aaf2:	9e 83       	std	Y+6, r25	; 0x06
    aaf4:	8d 83       	std	Y+5, r24	; 0x05
    aaf6:	78 87       	std	Y+8, r23	; 0x08
    aaf8:	6f 83       	std	Y+7, r22	; 0x07
    aafa:	5a 87       	std	Y+10, r21	; 0x0a
    aafc:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK(seq);
    aafe:	ed 81       	ldd	r30, Y+5	; 0x05
    ab00:	fe 81       	ldd	r31, Y+6	; 0x06
    ab02:	80 81       	ld	r24, Z
    ab04:	91 81       	ldd	r25, Z+1	; 0x01
    ab06:	88 30       	cpi	r24, 0x08	; 8
    ab08:	91 05       	cpc	r25, r1
    ab0a:	11 f0       	breq	.+4      	; 0xab10 <vdmSeqIndexGC+0x32>
    ab0c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    ab10:	ef 81       	ldd	r30, Y+7	; 0x07
    ab12:	f8 85       	ldd	r31, Y+8	; 0x08
    ab14:	80 81       	ld	r24, Z
    ab16:	91 81       	ldd	r25, Z+1	; 0x01
    ab18:	00 97       	sbiw	r24, 0x00	; 0
    ab1a:	81 f0       	breq	.+32     	; 0xab3c <vdmSeqIndexGC+0x5e>
    ab1c:	ef 81       	ldd	r30, Y+7	; 0x07
    ab1e:	f8 85       	ldd	r31, Y+8	; 0x08
    ab20:	80 81       	ld	r24, Z
    ab22:	91 81       	ldd	r25, Z+1	; 0x01
    ab24:	81 30       	cpi	r24, 0x01	; 1
    ab26:	91 05       	cpc	r25, r1
    ab28:	49 f0       	breq	.+18     	; 0xab3c <vdmSeqIndexGC+0x5e>
    ab2a:	ef 81       	ldd	r30, Y+7	; 0x07
    ab2c:	f8 85       	ldd	r31, Y+8	; 0x08
    ab2e:	80 81       	ld	r24, Z
    ab30:	91 81       	ldd	r25, Z+1	; 0x01
    ab32:	82 30       	cpi	r24, 0x02	; 2
    ab34:	91 05       	cpc	r25, r1
    ab36:	11 f0       	breq	.+4      	; 0xab3c <vdmSeqIndexGC+0x5e>
    ab38:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	int index = indexVal->value.intVal;
    ab3c:	ef 81       	ldd	r30, Y+7	; 0x07
    ab3e:	f8 85       	ldd	r31, Y+8	; 0x08
    ab40:	84 81       	ldd	r24, Z+4	; 0x04
    ab42:	95 81       	ldd	r25, Z+5	; 0x05
    ab44:	9c 83       	std	Y+4, r25	; 0x04
    ab46:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,seq);
    ab48:	ed 81       	ldd	r30, Y+5	; 0x05
    ab4a:	fe 81       	ldd	r31, Y+6	; 0x06
    ab4c:	84 81       	ldd	r24, Z+4	; 0x04
    ab4e:	95 81       	ldd	r25, Z+5	; 0x05
    ab50:	9a 83       	std	Y+2, r25	; 0x02
    ab52:	89 83       	std	Y+1, r24	; 0x01

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    ab54:	8b 81       	ldd	r24, Y+3	; 0x03
    ab56:	9c 81       	ldd	r25, Y+4	; 0x04
    ab58:	01 97       	sbiw	r24, 0x01	; 1
    ab5a:	99 23       	and	r25, r25
    ab5c:	64 f0       	brlt	.+24     	; 0xab76 <vdmSeqIndexGC+0x98>
    ab5e:	8b 81       	ldd	r24, Y+3	; 0x03
    ab60:	9c 81       	ldd	r25, Y+4	; 0x04
    ab62:	9c 01       	movw	r18, r24
    ab64:	21 50       	subi	r18, 0x01	; 1
    ab66:	30 40       	sbci	r19, 0x00	; 0
    ab68:	e9 81       	ldd	r30, Y+1	; 0x01
    ab6a:	fa 81       	ldd	r31, Y+2	; 0x02
    ab6c:	82 81       	ldd	r24, Z+2	; 0x02
    ab6e:	93 81       	ldd	r25, Z+3	; 0x03
    ab70:	28 17       	cp	r18, r24
    ab72:	39 07       	cpc	r19, r25
    ab74:	14 f0       	brlt	.+4      	; 0xab7a <vdmSeqIndexGC+0x9c>
    ab76:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	return vdmCloneGC(col->value[index-1], from);
    ab7a:	e9 81       	ldd	r30, Y+1	; 0x01
    ab7c:	fa 81       	ldd	r31, Y+2	; 0x02
    ab7e:	40 81       	ld	r20, Z
    ab80:	51 81       	ldd	r21, Z+1	; 0x01
    ab82:	2b 81       	ldd	r18, Y+3	; 0x03
    ab84:	3c 81       	ldd	r19, Y+4	; 0x04
    ab86:	81 e0       	ldi	r24, 0x01	; 1
    ab88:	90 e0       	ldi	r25, 0x00	; 0
    ab8a:	82 1b       	sub	r24, r18
    ab8c:	93 0b       	sbc	r25, r19
    ab8e:	88 0f       	add	r24, r24
    ab90:	99 1f       	adc	r25, r25
    ab92:	90 95       	com	r25
    ab94:	81 95       	neg	r24
    ab96:	9f 4f       	sbci	r25, 0xFF	; 255
    ab98:	fa 01       	movw	r30, r20
    ab9a:	e8 0f       	add	r30, r24
    ab9c:	f9 1f       	adc	r31, r25
    ab9e:	80 81       	ld	r24, Z
    aba0:	91 81       	ldd	r25, Z+1	; 0x01
    aba2:	29 85       	ldd	r18, Y+9	; 0x09
    aba4:	3a 85       	ldd	r19, Y+10	; 0x0a
    aba6:	b9 01       	movw	r22, r18
    aba8:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
}
    abac:	2a 96       	adiw	r28, 0x0a	; 10
    abae:	0f b6       	in	r0, 0x3f	; 63
    abb0:	f8 94       	cli
    abb2:	de bf       	out	0x3e, r29	; 62
    abb4:	0f be       	out	0x3f, r0	; 63
    abb6:	cd bf       	out	0x3d, r28	; 61
    abb8:	cf 91       	pop	r28
    abba:	df 91       	pop	r29
    abbc:	08 95       	ret

0000abbe <vdmSeqUpdate>:

void vdmSeqUpdate(TVP seq, TVP indexVal, TVP newValue)
{
    abbe:	0f 93       	push	r16
    abc0:	1f 93       	push	r17
    abc2:	df 93       	push	r29
    abc4:	cf 93       	push	r28
    abc6:	cd b7       	in	r28, 0x3d	; 61
    abc8:	de b7       	in	r29, 0x3e	; 62
    abca:	2a 97       	sbiw	r28, 0x0a	; 10
    abcc:	0f b6       	in	r0, 0x3f	; 63
    abce:	f8 94       	cli
    abd0:	de bf       	out	0x3e, r29	; 62
    abd2:	0f be       	out	0x3f, r0	; 63
    abd4:	cd bf       	out	0x3d, r28	; 61
    abd6:	9e 83       	std	Y+6, r25	; 0x06
    abd8:	8d 83       	std	Y+5, r24	; 0x05
    abda:	78 87       	std	Y+8, r23	; 0x08
    abdc:	6f 83       	std	Y+7, r22	; 0x07
    abde:	5a 87       	std	Y+10, r21	; 0x0a
    abe0:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK(seq);
    abe2:	ed 81       	ldd	r30, Y+5	; 0x05
    abe4:	fe 81       	ldd	r31, Y+6	; 0x06
    abe6:	80 81       	ld	r24, Z
    abe8:	91 81       	ldd	r25, Z+1	; 0x01
    abea:	88 30       	cpi	r24, 0x08	; 8
    abec:	91 05       	cpc	r25, r1
    abee:	11 f0       	breq	.+4      	; 0xabf4 <vdmSeqUpdate+0x36>
    abf0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    abf4:	ef 81       	ldd	r30, Y+7	; 0x07
    abf6:	f8 85       	ldd	r31, Y+8	; 0x08
    abf8:	80 81       	ld	r24, Z
    abfa:	91 81       	ldd	r25, Z+1	; 0x01
    abfc:	00 97       	sbiw	r24, 0x00	; 0
    abfe:	81 f0       	breq	.+32     	; 0xac20 <vdmSeqUpdate+0x62>
    ac00:	ef 81       	ldd	r30, Y+7	; 0x07
    ac02:	f8 85       	ldd	r31, Y+8	; 0x08
    ac04:	80 81       	ld	r24, Z
    ac06:	91 81       	ldd	r25, Z+1	; 0x01
    ac08:	81 30       	cpi	r24, 0x01	; 1
    ac0a:	91 05       	cpc	r25, r1
    ac0c:	49 f0       	breq	.+18     	; 0xac20 <vdmSeqUpdate+0x62>
    ac0e:	ef 81       	ldd	r30, Y+7	; 0x07
    ac10:	f8 85       	ldd	r31, Y+8	; 0x08
    ac12:	80 81       	ld	r24, Z
    ac14:	91 81       	ldd	r25, Z+1	; 0x01
    ac16:	82 30       	cpi	r24, 0x02	; 2
    ac18:	91 05       	cpc	r25, r1
    ac1a:	11 f0       	breq	.+4      	; 0xac20 <vdmSeqUpdate+0x62>
    ac1c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	int index = indexVal->value.intVal;
    ac20:	ef 81       	ldd	r30, Y+7	; 0x07
    ac22:	f8 85       	ldd	r31, Y+8	; 0x08
    ac24:	84 81       	ldd	r24, Z+4	; 0x04
    ac26:	95 81       	ldd	r25, Z+5	; 0x05
    ac28:	9c 83       	std	Y+4, r25	; 0x04
    ac2a:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, seq);
    ac2c:	ed 81       	ldd	r30, Y+5	; 0x05
    ac2e:	fe 81       	ldd	r31, Y+6	; 0x06
    ac30:	84 81       	ldd	r24, Z+4	; 0x04
    ac32:	95 81       	ldd	r25, Z+5	; 0x05
    ac34:	9a 83       	std	Y+2, r25	; 0x02
    ac36:	89 83       	std	Y+1, r24	; 0x01

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    ac38:	8b 81       	ldd	r24, Y+3	; 0x03
    ac3a:	9c 81       	ldd	r25, Y+4	; 0x04
    ac3c:	01 97       	sbiw	r24, 0x01	; 1
    ac3e:	99 23       	and	r25, r25
    ac40:	64 f0       	brlt	.+24     	; 0xac5a <vdmSeqUpdate+0x9c>
    ac42:	8b 81       	ldd	r24, Y+3	; 0x03
    ac44:	9c 81       	ldd	r25, Y+4	; 0x04
    ac46:	9c 01       	movw	r18, r24
    ac48:	21 50       	subi	r18, 0x01	; 1
    ac4a:	30 40       	sbci	r19, 0x00	; 0
    ac4c:	e9 81       	ldd	r30, Y+1	; 0x01
    ac4e:	fa 81       	ldd	r31, Y+2	; 0x02
    ac50:	82 81       	ldd	r24, Z+2	; 0x02
    ac52:	93 81       	ldd	r25, Z+3	; 0x03
    ac54:	28 17       	cp	r18, r24
    ac56:	39 07       	cpc	r19, r25
    ac58:	14 f0       	brlt	.+4      	; 0xac5e <vdmSeqUpdate+0xa0>
    ac5a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	col->value[index - 1] = vdmClone(newValue);
    ac5e:	e9 81       	ldd	r30, Y+1	; 0x01
    ac60:	fa 81       	ldd	r31, Y+2	; 0x02
    ac62:	40 81       	ld	r20, Z
    ac64:	51 81       	ldd	r21, Z+1	; 0x01
    ac66:	2b 81       	ldd	r18, Y+3	; 0x03
    ac68:	3c 81       	ldd	r19, Y+4	; 0x04
    ac6a:	81 e0       	ldi	r24, 0x01	; 1
    ac6c:	90 e0       	ldi	r25, 0x00	; 0
    ac6e:	82 1b       	sub	r24, r18
    ac70:	93 0b       	sbc	r25, r19
    ac72:	88 0f       	add	r24, r24
    ac74:	99 1f       	adc	r25, r25
    ac76:	90 95       	com	r25
    ac78:	81 95       	neg	r24
    ac7a:	9f 4f       	sbci	r25, 0xFF	; 255
    ac7c:	8a 01       	movw	r16, r20
    ac7e:	08 0f       	add	r16, r24
    ac80:	19 1f       	adc	r17, r25
    ac82:	89 85       	ldd	r24, Y+9	; 0x09
    ac84:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac86:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    ac8a:	f8 01       	movw	r30, r16
    ac8c:	91 83       	std	Z+1, r25	; 0x01
    ac8e:	80 83       	st	Z, r24
}
    ac90:	2a 96       	adiw	r28, 0x0a	; 10
    ac92:	0f b6       	in	r0, 0x3f	; 63
    ac94:	f8 94       	cli
    ac96:	de bf       	out	0x3e, r29	; 62
    ac98:	0f be       	out	0x3f, r0	; 63
    ac9a:	cd bf       	out	0x3d, r28	; 61
    ac9c:	cf 91       	pop	r28
    ac9e:	df 91       	pop	r29
    aca0:	1f 91       	pop	r17
    aca2:	0f 91       	pop	r16
    aca4:	08 95       	ret

0000aca6 <vdmSetAdd>:


/* Utility functions.  */
/* ------------------------------------------------  */
static void vdmSetAdd(TVP* value, int* index, TVP newValue)
{
    aca6:	0f 93       	push	r16
    aca8:	1f 93       	push	r17
    acaa:	df 93       	push	r29
    acac:	cf 93       	push	r28
    acae:	cd b7       	in	r28, 0x3d	; 61
    acb0:	de b7       	in	r29, 0x3e	; 62
    acb2:	29 97       	sbiw	r28, 0x09	; 9
    acb4:	0f b6       	in	r0, 0x3f	; 63
    acb6:	f8 94       	cli
    acb8:	de bf       	out	0x3e, r29	; 62
    acba:	0f be       	out	0x3f, r0	; 63
    acbc:	cd bf       	out	0x3d, r28	; 61
    acbe:	9d 83       	std	Y+5, r25	; 0x05
    acc0:	8c 83       	std	Y+4, r24	; 0x04
    acc2:	7f 83       	std	Y+7, r23	; 0x07
    acc4:	6e 83       	std	Y+6, r22	; 0x06
    acc6:	59 87       	std	Y+9, r21	; 0x09
    acc8:	48 87       	std	Y+8, r20	; 0x08
	int i;
	bool found = false;
    acca:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < *index; i++)
    accc:	1b 82       	std	Y+3, r1	; 0x03
    acce:	1a 82       	std	Y+2, r1	; 0x02
    acd0:	22 c0       	rjmp	.+68     	; 0xad16 <vdmSetAdd+0x70>
	{
		found |= equals(value[i],newValue);
    acd2:	89 81       	ldd	r24, Y+1	; 0x01
    acd4:	08 2f       	mov	r16, r24
    acd6:	10 e0       	ldi	r17, 0x00	; 0
    acd8:	8a 81       	ldd	r24, Y+2	; 0x02
    acda:	9b 81       	ldd	r25, Y+3	; 0x03
    acdc:	9c 01       	movw	r18, r24
    acde:	22 0f       	add	r18, r18
    ace0:	33 1f       	adc	r19, r19
    ace2:	8c 81       	ldd	r24, Y+4	; 0x04
    ace4:	9d 81       	ldd	r25, Y+5	; 0x05
    ace6:	fc 01       	movw	r30, r24
    ace8:	e2 0f       	add	r30, r18
    acea:	f3 1f       	adc	r31, r19
    acec:	80 81       	ld	r24, Z
    acee:	91 81       	ldd	r25, Z+1	; 0x01
    acf0:	28 85       	ldd	r18, Y+8	; 0x08
    acf2:	39 85       	ldd	r19, Y+9	; 0x09
    acf4:	b9 01       	movw	r22, r18
    acf6:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    acfa:	88 2f       	mov	r24, r24
    acfc:	90 e0       	ldi	r25, 0x00	; 0
    acfe:	80 2b       	or	r24, r16
    ad00:	91 2b       	or	r25, r17
    ad02:	19 82       	std	Y+1, r1	; 0x01
    ad04:	00 97       	sbiw	r24, 0x00	; 0
    ad06:	11 f0       	breq	.+4      	; 0xad0c <vdmSetAdd+0x66>
    ad08:	81 e0       	ldi	r24, 0x01	; 1
    ad0a:	89 83       	std	Y+1, r24	; 0x01
static void vdmSetAdd(TVP* value, int* index, TVP newValue)
{
	int i;
	bool found = false;

	for (i = 0; i < *index; i++)
    ad0c:	8a 81       	ldd	r24, Y+2	; 0x02
    ad0e:	9b 81       	ldd	r25, Y+3	; 0x03
    ad10:	01 96       	adiw	r24, 0x01	; 1
    ad12:	9b 83       	std	Y+3, r25	; 0x03
    ad14:	8a 83       	std	Y+2, r24	; 0x02
    ad16:	ee 81       	ldd	r30, Y+6	; 0x06
    ad18:	ff 81       	ldd	r31, Y+7	; 0x07
    ad1a:	20 81       	ld	r18, Z
    ad1c:	31 81       	ldd	r19, Z+1	; 0x01
    ad1e:	8a 81       	ldd	r24, Y+2	; 0x02
    ad20:	9b 81       	ldd	r25, Y+3	; 0x03
    ad22:	82 17       	cp	r24, r18
    ad24:	93 07       	cpc	r25, r19
    ad26:	ac f2       	brlt	.-86     	; 0xacd2 <vdmSetAdd+0x2c>
	{
		found |= equals(value[i],newValue);
	}

	if(!found)
    ad28:	89 81       	ldd	r24, Y+1	; 0x01
    ad2a:	91 e0       	ldi	r25, 0x01	; 1
    ad2c:	89 27       	eor	r24, r25
    ad2e:	88 23       	and	r24, r24
    ad30:	d1 f0       	breq	.+52     	; 0xad66 <vdmSetAdd+0xc0>
	{
		value[*index] = newValue;
    ad32:	ee 81       	ldd	r30, Y+6	; 0x06
    ad34:	ff 81       	ldd	r31, Y+7	; 0x07
    ad36:	80 81       	ld	r24, Z
    ad38:	91 81       	ldd	r25, Z+1	; 0x01
    ad3a:	9c 01       	movw	r18, r24
    ad3c:	22 0f       	add	r18, r18
    ad3e:	33 1f       	adc	r19, r19
    ad40:	8c 81       	ldd	r24, Y+4	; 0x04
    ad42:	9d 81       	ldd	r25, Y+5	; 0x05
    ad44:	fc 01       	movw	r30, r24
    ad46:	e2 0f       	add	r30, r18
    ad48:	f3 1f       	adc	r31, r19
    ad4a:	88 85       	ldd	r24, Y+8	; 0x08
    ad4c:	99 85       	ldd	r25, Y+9	; 0x09
    ad4e:	91 83       	std	Z+1, r25	; 0x01
    ad50:	80 83       	st	Z, r24
		*index = (*index) + 1;
    ad52:	ee 81       	ldd	r30, Y+6	; 0x06
    ad54:	ff 81       	ldd	r31, Y+7	; 0x07
    ad56:	80 81       	ld	r24, Z
    ad58:	91 81       	ldd	r25, Z+1	; 0x01
    ad5a:	01 96       	adiw	r24, 0x01	; 1
    ad5c:	ee 81       	ldd	r30, Y+6	; 0x06
    ad5e:	ff 81       	ldd	r31, Y+7	; 0x07
    ad60:	91 83       	std	Z+1, r25	; 0x01
    ad62:	80 83       	st	Z, r24
    ad64:	04 c0       	rjmp	.+8      	; 0xad6e <vdmSetAdd+0xc8>
	}
	/* This value is a duplicate, so must not leave it lying around.  */
	else
		vdmFree(newValue);
    ad66:	88 85       	ldd	r24, Y+8	; 0x08
    ad68:	99 85       	ldd	r25, Y+9	; 0x09
    ad6a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
}
    ad6e:	29 96       	adiw	r28, 0x09	; 9
    ad70:	0f b6       	in	r0, 0x3f	; 63
    ad72:	f8 94       	cli
    ad74:	de bf       	out	0x3e, r29	; 62
    ad76:	0f be       	out	0x3f, r0	; 63
    ad78:	cd bf       	out	0x3d, r28	; 61
    ad7a:	cf 91       	pop	r28
    ad7c:	df 91       	pop	r29
    ad7e:	1f 91       	pop	r17
    ad80:	0f 91       	pop	r16
    ad82:	08 95       	ret

0000ad84 <newSetWithValues>:
/* ------------------------------------------------  */



TVP newSetWithValues(size_t size, TVP* elements)
{
    ad84:	df 93       	push	r29
    ad86:	cf 93       	push	r28
    ad88:	cd b7       	in	r28, 0x3d	; 61
    ad8a:	de b7       	in	r29, 0x3e	; 62
    ad8c:	60 97       	sbiw	r28, 0x10	; 16
    ad8e:	0f b6       	in	r0, 0x3f	; 63
    ad90:	f8 94       	cli
    ad92:	de bf       	out	0x3e, r29	; 62
    ad94:	0f be       	out	0x3f, r0	; 63
    ad96:	cd bf       	out	0x3d, r28	; 61
    ad98:	9e 87       	std	Y+14, r25	; 0x0e
    ad9a:	8d 87       	std	Y+13, r24	; 0x0d
    ad9c:	78 8b       	std	Y+16, r23	; 0x10
    ad9e:	6f 87       	std	Y+15, r22	; 0x0f
	int i;
	int count = 0;
    ada0:	1c 86       	std	Y+12, r1	; 0x0c
    ada2:	1b 86       	std	Y+11, r1	; 0x0b
	int bufsize = DEFAULT_SET_COMP_BUFFER;
    ada4:	82 e0       	ldi	r24, 0x02	; 2
    ada6:	90 e0       	ldi	r25, 0x00	; 0
    ada8:	98 87       	std	Y+8, r25	; 0x08
    adaa:	8f 83       	std	Y+7, r24	; 0x07
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
    adac:	8f 81       	ldd	r24, Y+7	; 0x07
    adae:	98 85       	ldd	r25, Y+8	; 0x08
    adb0:	62 e0       	ldi	r22, 0x02	; 2
    adb2:	70 e0       	ldi	r23, 0x00	; 0
    adb4:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    adb8:	9e 83       	std	Y+6, r25	; 0x06
    adba:	8d 83       	std	Y+5, r24	; 0x05
	assert(value != NULL);
    adbc:	8d 81       	ldd	r24, Y+5	; 0x05
    adbe:	9e 81       	ldd	r25, Y+6	; 0x06
    adc0:	00 97       	sbiw	r24, 0x00	; 0
    adc2:	11 f4       	brne	.+4      	; 0xadc8 <newSetWithValues+0x44>
    adc4:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	for (i = 0; i < size; i++)
    adc8:	1a 86       	std	Y+10, r1	; 0x0a
    adca:	19 86       	std	Y+9, r1	; 0x09
    adcc:	3d c0       	rjmp	.+122    	; 0xae48 <newSetWithValues+0xc4>
	{
		TVP v = vdmClone(elements[i]); /*  set binding  */
    adce:	89 85       	ldd	r24, Y+9	; 0x09
    add0:	9a 85       	ldd	r25, Y+10	; 0x0a
    add2:	9c 01       	movw	r18, r24
    add4:	22 0f       	add	r18, r18
    add6:	33 1f       	adc	r19, r19
    add8:	8f 85       	ldd	r24, Y+15	; 0x0f
    adda:	98 89       	ldd	r25, Y+16	; 0x10
    addc:	fc 01       	movw	r30, r24
    adde:	e2 0f       	add	r30, r18
    ade0:	f3 1f       	adc	r31, r19
    ade2:	80 81       	ld	r24, Z
    ade4:	91 81       	ldd	r25, Z+1	; 0x01
    ade6:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    adea:	9a 83       	std	Y+2, r25	; 0x02
    adec:	89 83       	std	Y+1, r24	; 0x01

		if(count >= bufsize)
    adee:	2b 85       	ldd	r18, Y+11	; 0x0b
    adf0:	3c 85       	ldd	r19, Y+12	; 0x0c
    adf2:	8f 81       	ldd	r24, Y+7	; 0x07
    adf4:	98 85       	ldd	r25, Y+8	; 0x08
    adf6:	28 17       	cp	r18, r24
    adf8:	39 07       	cpc	r19, r25
    adfa:	bc f0       	brlt	.+46     	; 0xae2a <newSetWithValues+0xa6>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    adfc:	8f 81       	ldd	r24, Y+7	; 0x07
    adfe:	98 85       	ldd	r25, Y+8	; 0x08
    ae00:	0a 96       	adiw	r24, 0x0a	; 10
    ae02:	98 87       	std	Y+8, r25	; 0x08
    ae04:	8f 83       	std	Y+7, r24	; 0x07
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    ae06:	8f 81       	ldd	r24, Y+7	; 0x07
    ae08:	98 85       	ldd	r25, Y+8	; 0x08
    ae0a:	9c 01       	movw	r18, r24
    ae0c:	22 0f       	add	r18, r18
    ae0e:	33 1f       	adc	r19, r19
    ae10:	8d 81       	ldd	r24, Y+5	; 0x05
    ae12:	9e 81       	ldd	r25, Y+6	; 0x06
    ae14:	b9 01       	movw	r22, r18
    ae16:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    ae1a:	9e 83       	std	Y+6, r25	; 0x06
    ae1c:	8d 83       	std	Y+5, r24	; 0x05
			assert(value != NULL);
    ae1e:	8d 81       	ldd	r24, Y+5	; 0x05
    ae20:	9e 81       	ldd	r25, Y+6	; 0x06
    ae22:	00 97       	sbiw	r24, 0x00	; 0
    ae24:	11 f4       	brne	.+4      	; 0xae2a <newSetWithValues+0xa6>
    ae26:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		}
		vdmSetAdd(value, &count,v);
    ae2a:	8d 81       	ldd	r24, Y+5	; 0x05
    ae2c:	9e 81       	ldd	r25, Y+6	; 0x06
    ae2e:	9e 01       	movw	r18, r28
    ae30:	25 5f       	subi	r18, 0xF5	; 245
    ae32:	3f 4f       	sbci	r19, 0xFF	; 255
    ae34:	49 81       	ldd	r20, Y+1	; 0x01
    ae36:	5a 81       	ldd	r21, Y+2	; 0x02
    ae38:	b9 01       	movw	r22, r18
    ae3a:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>
	int count = 0;
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    ae3e:	89 85       	ldd	r24, Y+9	; 0x09
    ae40:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae42:	01 96       	adiw	r24, 0x01	; 1
    ae44:	9a 87       	std	Y+10, r25	; 0x0a
    ae46:	89 87       	std	Y+9, r24	; 0x09
    ae48:	29 85       	ldd	r18, Y+9	; 0x09
    ae4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    ae4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    ae4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    ae50:	28 17       	cp	r18, r24
    ae52:	39 07       	cpc	r19, r25
    ae54:	08 f4       	brcc	.+2      	; 0xae58 <newSetWithValues+0xd4>
    ae56:	bb cf       	rjmp	.-138    	; 0xadce <newSetWithValues+0x4a>
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    ae58:	8b 85       	ldd	r24, Y+11	; 0x0b
    ae5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    ae5c:	2d 81       	ldd	r18, Y+5	; 0x05
    ae5e:	3e 81       	ldd	r19, Y+6	; 0x06
    ae60:	67 e0       	ldi	r22, 0x07	; 7
    ae62:	70 e0       	ldi	r23, 0x00	; 0
    ae64:	a9 01       	movw	r20, r18
    ae66:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <newCollectionWithValues>
    ae6a:	9c 83       	std	Y+4, r25	; 0x04
    ae6c:	8b 83       	std	Y+3, r24	; 0x03

	for(i = 0; i < count; i++)
    ae6e:	1a 86       	std	Y+10, r1	; 0x0a
    ae70:	19 86       	std	Y+9, r1	; 0x09
    ae72:	13 c0       	rjmp	.+38     	; 0xae9a <newSetWithValues+0x116>
	{
		vdmFree(value[i]);
    ae74:	89 85       	ldd	r24, Y+9	; 0x09
    ae76:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae78:	9c 01       	movw	r18, r24
    ae7a:	22 0f       	add	r18, r18
    ae7c:	33 1f       	adc	r19, r19
    ae7e:	8d 81       	ldd	r24, Y+5	; 0x05
    ae80:	9e 81       	ldd	r25, Y+6	; 0x06
    ae82:	fc 01       	movw	r30, r24
    ae84:	e2 0f       	add	r30, r18
    ae86:	f3 1f       	adc	r31, r19
    ae88:	80 81       	ld	r24, Z
    ae8a:	91 81       	ldd	r25, Z+1	; 0x01
    ae8c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValues(count, VDM_SET, value);

	for(i = 0; i < count; i++)
    ae90:	89 85       	ldd	r24, Y+9	; 0x09
    ae92:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae94:	01 96       	adiw	r24, 0x01	; 1
    ae96:	9a 87       	std	Y+10, r25	; 0x0a
    ae98:	89 87       	std	Y+9, r24	; 0x09
    ae9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    ae9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    ae9e:	89 85       	ldd	r24, Y+9	; 0x09
    aea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    aea2:	82 17       	cp	r24, r18
    aea4:	93 07       	cpc	r25, r19
    aea6:	34 f3       	brlt	.-52     	; 0xae74 <newSetWithValues+0xf0>
	{
		vdmFree(value[i]);
	}
	free(value);
    aea8:	8d 81       	ldd	r24, Y+5	; 0x05
    aeaa:	9e 81       	ldd	r25, Y+6	; 0x06
    aeac:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    aeb0:	8b 81       	ldd	r24, Y+3	; 0x03
    aeb2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    aeb4:	60 96       	adiw	r28, 0x10	; 16
    aeb6:	0f b6       	in	r0, 0x3f	; 63
    aeb8:	f8 94       	cli
    aeba:	de bf       	out	0x3e, r29	; 62
    aebc:	0f be       	out	0x3f, r0	; 63
    aebe:	cd bf       	out	0x3d, r28	; 61
    aec0:	cf 91       	pop	r28
    aec2:	df 91       	pop	r29
    aec4:	08 95       	ret

0000aec6 <newSetWithValuesGC>:


TVP newSetWithValuesGC(size_t size, TVP* elements, TVP *from)
{
    aec6:	df 93       	push	r29
    aec8:	cf 93       	push	r28
    aeca:	cd b7       	in	r28, 0x3d	; 61
    aecc:	de b7       	in	r29, 0x3e	; 62
    aece:	62 97       	sbiw	r28, 0x12	; 18
    aed0:	0f b6       	in	r0, 0x3f	; 63
    aed2:	f8 94       	cli
    aed4:	de bf       	out	0x3e, r29	; 62
    aed6:	0f be       	out	0x3f, r0	; 63
    aed8:	cd bf       	out	0x3d, r28	; 61
    aeda:	9e 87       	std	Y+14, r25	; 0x0e
    aedc:	8d 87       	std	Y+13, r24	; 0x0d
    aede:	78 8b       	std	Y+16, r23	; 0x10
    aee0:	6f 87       	std	Y+15, r22	; 0x0f
    aee2:	5a 8b       	std	Y+18, r21	; 0x12
    aee4:	49 8b       	std	Y+17, r20	; 0x11
	int i;
	int count = 0;
    aee6:	1c 86       	std	Y+12, r1	; 0x0c
    aee8:	1b 86       	std	Y+11, r1	; 0x0b
	int bufsize = DEFAULT_SET_COMP_BUFFER;
    aeea:	82 e0       	ldi	r24, 0x02	; 2
    aeec:	90 e0       	ldi	r25, 0x00	; 0
    aeee:	98 87       	std	Y+8, r25	; 0x08
    aef0:	8f 83       	std	Y+7, r24	; 0x07
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
    aef2:	8f 81       	ldd	r24, Y+7	; 0x07
    aef4:	98 85       	ldd	r25, Y+8	; 0x08
    aef6:	62 e0       	ldi	r22, 0x02	; 2
    aef8:	70 e0       	ldi	r23, 0x00	; 0
    aefa:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    aefe:	9e 83       	std	Y+6, r25	; 0x06
    af00:	8d 83       	std	Y+5, r24	; 0x05
	assert(value != NULL);
    af02:	8d 81       	ldd	r24, Y+5	; 0x05
    af04:	9e 81       	ldd	r25, Y+6	; 0x06
    af06:	00 97       	sbiw	r24, 0x00	; 0
    af08:	11 f4       	brne	.+4      	; 0xaf0e <newSetWithValuesGC+0x48>
    af0a:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	for (i = 0; i < size; i++)
    af0e:	1a 86       	std	Y+10, r1	; 0x0a
    af10:	19 86       	std	Y+9, r1	; 0x09
    af12:	3d c0       	rjmp	.+122    	; 0xaf8e <newSetWithValuesGC+0xc8>
	{
		TVP v = vdmClone(elements[i]); /*  set binding  */
    af14:	89 85       	ldd	r24, Y+9	; 0x09
    af16:	9a 85       	ldd	r25, Y+10	; 0x0a
    af18:	9c 01       	movw	r18, r24
    af1a:	22 0f       	add	r18, r18
    af1c:	33 1f       	adc	r19, r19
    af1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    af20:	98 89       	ldd	r25, Y+16	; 0x10
    af22:	fc 01       	movw	r30, r24
    af24:	e2 0f       	add	r30, r18
    af26:	f3 1f       	adc	r31, r19
    af28:	80 81       	ld	r24, Z
    af2a:	91 81       	ldd	r25, Z+1	; 0x01
    af2c:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    af30:	9a 83       	std	Y+2, r25	; 0x02
    af32:	89 83       	std	Y+1, r24	; 0x01

		if(count >= bufsize)
    af34:	2b 85       	ldd	r18, Y+11	; 0x0b
    af36:	3c 85       	ldd	r19, Y+12	; 0x0c
    af38:	8f 81       	ldd	r24, Y+7	; 0x07
    af3a:	98 85       	ldd	r25, Y+8	; 0x08
    af3c:	28 17       	cp	r18, r24
    af3e:	39 07       	cpc	r19, r25
    af40:	bc f0       	brlt	.+46     	; 0xaf70 <newSetWithValuesGC+0xaa>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    af42:	8f 81       	ldd	r24, Y+7	; 0x07
    af44:	98 85       	ldd	r25, Y+8	; 0x08
    af46:	0a 96       	adiw	r24, 0x0a	; 10
    af48:	98 87       	std	Y+8, r25	; 0x08
    af4a:	8f 83       	std	Y+7, r24	; 0x07
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    af4c:	8f 81       	ldd	r24, Y+7	; 0x07
    af4e:	98 85       	ldd	r25, Y+8	; 0x08
    af50:	9c 01       	movw	r18, r24
    af52:	22 0f       	add	r18, r18
    af54:	33 1f       	adc	r19, r19
    af56:	8d 81       	ldd	r24, Y+5	; 0x05
    af58:	9e 81       	ldd	r25, Y+6	; 0x06
    af5a:	b9 01       	movw	r22, r18
    af5c:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    af60:	9e 83       	std	Y+6, r25	; 0x06
    af62:	8d 83       	std	Y+5, r24	; 0x05
			assert(value != NULL);
    af64:	8d 81       	ldd	r24, Y+5	; 0x05
    af66:	9e 81       	ldd	r25, Y+6	; 0x06
    af68:	00 97       	sbiw	r24, 0x00	; 0
    af6a:	11 f4       	brne	.+4      	; 0xaf70 <newSetWithValuesGC+0xaa>
    af6c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		}
		vdmSetAdd(value, &count,v);
    af70:	8d 81       	ldd	r24, Y+5	; 0x05
    af72:	9e 81       	ldd	r25, Y+6	; 0x06
    af74:	9e 01       	movw	r18, r28
    af76:	25 5f       	subi	r18, 0xF5	; 245
    af78:	3f 4f       	sbci	r19, 0xFF	; 255
    af7a:	49 81       	ldd	r20, Y+1	; 0x01
    af7c:	5a 81       	ldd	r21, Y+2	; 0x02
    af7e:	b9 01       	movw	r22, r18
    af80:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>
	int count = 0;
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    af84:	89 85       	ldd	r24, Y+9	; 0x09
    af86:	9a 85       	ldd	r25, Y+10	; 0x0a
    af88:	01 96       	adiw	r24, 0x01	; 1
    af8a:	9a 87       	std	Y+10, r25	; 0x0a
    af8c:	89 87       	std	Y+9, r24	; 0x09
    af8e:	29 85       	ldd	r18, Y+9	; 0x09
    af90:	3a 85       	ldd	r19, Y+10	; 0x0a
    af92:	8d 85       	ldd	r24, Y+13	; 0x0d
    af94:	9e 85       	ldd	r25, Y+14	; 0x0e
    af96:	28 17       	cp	r18, r24
    af98:	39 07       	cpc	r19, r25
    af9a:	08 f4       	brcc	.+2      	; 0xaf9e <newSetWithValuesGC+0xd8>
    af9c:	bb cf       	rjmp	.-138    	; 0xaf14 <newSetWithValuesGC+0x4e>
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    af9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    afa0:	9c 85       	ldd	r25, Y+12	; 0x0c
    afa2:	2d 81       	ldd	r18, Y+5	; 0x05
    afa4:	3e 81       	ldd	r19, Y+6	; 0x06
    afa6:	e9 89       	ldd	r30, Y+17	; 0x11
    afa8:	fa 89       	ldd	r31, Y+18	; 0x12
    afaa:	67 e0       	ldi	r22, 0x07	; 7
    afac:	70 e0       	ldi	r23, 0x00	; 0
    afae:	a9 01       	movw	r20, r18
    afb0:	9f 01       	movw	r18, r30
    afb2:	0e 94 2f 28 	call	0x505e	; 0x505e <newCollectionWithValuesGC>
    afb6:	9c 83       	std	Y+4, r25	; 0x04
    afb8:	8b 83       	std	Y+3, r24	; 0x03

	for(i = 0; i < count; i++)
    afba:	1a 86       	std	Y+10, r1	; 0x0a
    afbc:	19 86       	std	Y+9, r1	; 0x09
    afbe:	13 c0       	rjmp	.+38     	; 0xafe6 <newSetWithValuesGC+0x120>
	{
		vdmFree(value[i]);
    afc0:	89 85       	ldd	r24, Y+9	; 0x09
    afc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    afc4:	9c 01       	movw	r18, r24
    afc6:	22 0f       	add	r18, r18
    afc8:	33 1f       	adc	r19, r19
    afca:	8d 81       	ldd	r24, Y+5	; 0x05
    afcc:	9e 81       	ldd	r25, Y+6	; 0x06
    afce:	fc 01       	movw	r30, r24
    afd0:	e2 0f       	add	r30, r18
    afd2:	f3 1f       	adc	r31, r19
    afd4:	80 81       	ld	r24, Z
    afd6:	91 81       	ldd	r25, Z+1	; 0x01
    afd8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);

	for(i = 0; i < count; i++)
    afdc:	89 85       	ldd	r24, Y+9	; 0x09
    afde:	9a 85       	ldd	r25, Y+10	; 0x0a
    afe0:	01 96       	adiw	r24, 0x01	; 1
    afe2:	9a 87       	std	Y+10, r25	; 0x0a
    afe4:	89 87       	std	Y+9, r24	; 0x09
    afe6:	2b 85       	ldd	r18, Y+11	; 0x0b
    afe8:	3c 85       	ldd	r19, Y+12	; 0x0c
    afea:	89 85       	ldd	r24, Y+9	; 0x09
    afec:	9a 85       	ldd	r25, Y+10	; 0x0a
    afee:	82 17       	cp	r24, r18
    aff0:	93 07       	cpc	r25, r19
    aff2:	34 f3       	brlt	.-52     	; 0xafc0 <newSetWithValuesGC+0xfa>
	{
		vdmFree(value[i]);
	}
	free(value);
    aff4:	8d 81       	ldd	r24, Y+5	; 0x05
    aff6:	9e 81       	ldd	r25, Y+6	; 0x06
    aff8:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    affc:	8b 81       	ldd	r24, Y+3	; 0x03
    affe:	9c 81       	ldd	r25, Y+4	; 0x04
}
    b000:	62 96       	adiw	r28, 0x12	; 18
    b002:	0f b6       	in	r0, 0x3f	; 63
    b004:	f8 94       	cli
    b006:	de bf       	out	0x3e, r29	; 62
    b008:	0f be       	out	0x3f, r0	; 63
    b00a:	cd bf       	out	0x3d, r28	; 61
    b00c:	cf 91       	pop	r28
    b00e:	df 91       	pop	r29
    b010:	08 95       	ret

0000b012 <newSetVar>:



TVP newSetVar(size_t size, ...)
{
    b012:	df 93       	push	r29
    b014:	cf 93       	push	r28
    b016:	cd b7       	in	r28, 0x3d	; 61
    b018:	de b7       	in	r29, 0x3e	; 62
    b01a:	60 97       	sbiw	r28, 0x10	; 16
    b01c:	0f b6       	in	r0, 0x3f	; 63
    b01e:	f8 94       	cli
    b020:	de bf       	out	0x3e, r29	; 62
    b022:	0f be       	out	0x3f, r0	; 63
    b024:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, size);
    b026:	ce 01       	movw	r24, r28
    b028:	47 96       	adiw	r24, 0x17	; 23
    b02a:	9e 87       	std	Y+14, r25	; 0x0e
    b02c:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    b02e:	18 8a       	std	Y+16, r1	; 0x10
    b030:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = DEFAULT_SET_COMP_BUFFER;
    b032:	82 e0       	ldi	r24, 0x02	; 2
    b034:	90 e0       	ldi	r25, 0x00	; 0
    b036:	9a 87       	std	Y+10, r25	; 0x0a
    b038:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    b03a:	89 85       	ldd	r24, Y+9	; 0x09
    b03c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b03e:	62 e0       	ldi	r22, 0x02	; 2
    b040:	70 e0       	ldi	r23, 0x00	; 0
    b042:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    b046:	98 87       	std	Y+8, r25	; 0x08
    b048:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    b04a:	8f 81       	ldd	r24, Y+7	; 0x07
    b04c:	98 85       	ldd	r25, Y+8	; 0x08
    b04e:	00 97       	sbiw	r24, 0x00	; 0
    b050:	11 f4       	brne	.+4      	; 0xb056 <newSetVar+0x44>
    b052:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	for (i = 0; i < size; i++)
    b056:	1c 86       	std	Y+12, r1	; 0x0c
    b058:	1b 86       	std	Y+11, r1	; 0x0b
    b05a:	3e c0       	rjmp	.+124    	; 0xb0d8 <newSetVar+0xc6>
	{
		TVP arg = va_arg(ap, TVP);
    b05c:	2d 85       	ldd	r18, Y+13	; 0x0d
    b05e:	3e 85       	ldd	r19, Y+14	; 0x0e
    b060:	c9 01       	movw	r24, r18
    b062:	02 96       	adiw	r24, 0x02	; 2
    b064:	9e 87       	std	Y+14, r25	; 0x0e
    b066:	8d 87       	std	Y+13, r24	; 0x0d
    b068:	f9 01       	movw	r30, r18
    b06a:	80 81       	ld	r24, Z
    b06c:	91 81       	ldd	r25, Z+1	; 0x01
    b06e:	9c 83       	std	Y+4, r25	; 0x04
    b070:	8b 83       	std	Y+3, r24	; 0x03

		TVP v= vdmClone(arg);
    b072:	8b 81       	ldd	r24, Y+3	; 0x03
    b074:	9c 81       	ldd	r25, Y+4	; 0x04
    b076:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    b07a:	9a 83       	std	Y+2, r25	; 0x02
    b07c:	89 83       	std	Y+1, r24	; 0x01

		/* TODO:  Check whether element exists.  */


		if(count>=bufsize)
    b07e:	2f 85       	ldd	r18, Y+15	; 0x0f
    b080:	38 89       	ldd	r19, Y+16	; 0x10
    b082:	89 85       	ldd	r24, Y+9	; 0x09
    b084:	9a 85       	ldd	r25, Y+10	; 0x0a
    b086:	28 17       	cp	r18, r24
    b088:	39 07       	cpc	r19, r25
    b08a:	bc f0       	brlt	.+46     	; 0xb0ba <newSetVar+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b08c:	89 85       	ldd	r24, Y+9	; 0x09
    b08e:	9a 85       	ldd	r25, Y+10	; 0x0a
    b090:	0a 96       	adiw	r24, 0x0a	; 10
    b092:	9a 87       	std	Y+10, r25	; 0x0a
    b094:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b096:	89 85       	ldd	r24, Y+9	; 0x09
    b098:	9a 85       	ldd	r25, Y+10	; 0x0a
    b09a:	9c 01       	movw	r18, r24
    b09c:	22 0f       	add	r18, r18
    b09e:	33 1f       	adc	r19, r19
    b0a0:	8f 81       	ldd	r24, Y+7	; 0x07
    b0a2:	98 85       	ldd	r25, Y+8	; 0x08
    b0a4:	b9 01       	movw	r22, r18
    b0a6:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    b0aa:	98 87       	std	Y+8, r25	; 0x08
    b0ac:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b0ae:	8f 81       	ldd	r24, Y+7	; 0x07
    b0b0:	98 85       	ldd	r25, Y+8	; 0x08
    b0b2:	00 97       	sbiw	r24, 0x00	; 0
    b0b4:	11 f4       	brne	.+4      	; 0xb0ba <newSetVar+0xa8>
    b0b6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		}
		vdmSetAdd(value, &count, v);
    b0ba:	8f 81       	ldd	r24, Y+7	; 0x07
    b0bc:	98 85       	ldd	r25, Y+8	; 0x08
    b0be:	9e 01       	movw	r18, r28
    b0c0:	21 5f       	subi	r18, 0xF1	; 241
    b0c2:	3f 4f       	sbci	r19, 0xFF	; 255
    b0c4:	49 81       	ldd	r20, Y+1	; 0x01
    b0c6:	5a 81       	ldd	r21, Y+2	; 0x02
    b0c8:	b9 01       	movw	r22, r18
    b0ca:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    b0ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    b0d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    b0d2:	01 96       	adiw	r24, 0x01	; 1
    b0d4:	9c 87       	std	Y+12, r25	; 0x0c
    b0d6:	8b 87       	std	Y+11, r24	; 0x0b
    b0d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    b0da:	3c 85       	ldd	r19, Y+12	; 0x0c
    b0dc:	8d 89       	ldd	r24, Y+21	; 0x15
    b0de:	9e 89       	ldd	r25, Y+22	; 0x16
    b0e0:	28 17       	cp	r18, r24
    b0e2:	39 07       	cpc	r19, r25
    b0e4:	08 f4       	brcc	.+2      	; 0xb0e8 <newSetVar+0xd6>
    b0e6:	ba cf       	rjmp	.-140    	; 0xb05c <newSetVar+0x4a>
		vdmSetAdd(value, &count, v);
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    b0e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    b0ea:	98 89       	ldd	r25, Y+16	; 0x10
    b0ec:	2f 81       	ldd	r18, Y+7	; 0x07
    b0ee:	38 85       	ldd	r19, Y+8	; 0x08
    b0f0:	67 e0       	ldi	r22, 0x07	; 7
    b0f2:	70 e0       	ldi	r23, 0x00	; 0
    b0f4:	a9 01       	movw	r20, r18
    b0f6:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <newCollectionWithValues>
    b0fa:	9e 83       	std	Y+6, r25	; 0x06
    b0fc:	8d 83       	std	Y+5, r24	; 0x05
	for(i = 0; i < count; i++)
    b0fe:	1c 86       	std	Y+12, r1	; 0x0c
    b100:	1b 86       	std	Y+11, r1	; 0x0b
    b102:	13 c0       	rjmp	.+38     	; 0xb12a <newSetVar+0x118>
		vdmFree(value[i]);
    b104:	8b 85       	ldd	r24, Y+11	; 0x0b
    b106:	9c 85       	ldd	r25, Y+12	; 0x0c
    b108:	9c 01       	movw	r18, r24
    b10a:	22 0f       	add	r18, r18
    b10c:	33 1f       	adc	r19, r19
    b10e:	8f 81       	ldd	r24, Y+7	; 0x07
    b110:	98 85       	ldd	r25, Y+8	; 0x08
    b112:	fc 01       	movw	r30, r24
    b114:	e2 0f       	add	r30, r18
    b116:	f3 1f       	adc	r31, r19
    b118:	80 81       	ld	r24, Z
    b11a:	91 81       	ldd	r25, Z+1	; 0x01
    b11c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
	for(i = 0; i < count; i++)
    b120:	8b 85       	ldd	r24, Y+11	; 0x0b
    b122:	9c 85       	ldd	r25, Y+12	; 0x0c
    b124:	01 96       	adiw	r24, 0x01	; 1
    b126:	9c 87       	std	Y+12, r25	; 0x0c
    b128:	8b 87       	std	Y+11, r24	; 0x0b
    b12a:	2f 85       	ldd	r18, Y+15	; 0x0f
    b12c:	38 89       	ldd	r19, Y+16	; 0x10
    b12e:	8b 85       	ldd	r24, Y+11	; 0x0b
    b130:	9c 85       	ldd	r25, Y+12	; 0x0c
    b132:	82 17       	cp	r24, r18
    b134:	93 07       	cpc	r25, r19
    b136:	34 f3       	brlt	.-52     	; 0xb104 <newSetVar+0xf2>
		vdmFree(value[i]);
	free(value);
    b138:	8f 81       	ldd	r24, Y+7	; 0x07
    b13a:	98 85       	ldd	r25, Y+8	; 0x08
    b13c:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    b140:	8d 81       	ldd	r24, Y+5	; 0x05
    b142:	9e 81       	ldd	r25, Y+6	; 0x06
}
    b144:	60 96       	adiw	r28, 0x10	; 16
    b146:	0f b6       	in	r0, 0x3f	; 63
    b148:	f8 94       	cli
    b14a:	de bf       	out	0x3e, r29	; 62
    b14c:	0f be       	out	0x3f, r0	; 63
    b14e:	cd bf       	out	0x3d, r28	; 61
    b150:	cf 91       	pop	r28
    b152:	df 91       	pop	r29
    b154:	08 95       	ret

0000b156 <newSetVarGC>:


TVP newSetVarGC(size_t size, TVP *from, ...)
{
    b156:	df 93       	push	r29
    b158:	cf 93       	push	r28
    b15a:	cd b7       	in	r28, 0x3d	; 61
    b15c:	de b7       	in	r29, 0x3e	; 62
    b15e:	60 97       	sbiw	r28, 0x10	; 16
    b160:	0f b6       	in	r0, 0x3f	; 63
    b162:	f8 94       	cli
    b164:	de bf       	out	0x3e, r29	; 62
    b166:	0f be       	out	0x3f, r0	; 63
    b168:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, from);
    b16a:	ce 01       	movw	r24, r28
    b16c:	49 96       	adiw	r24, 0x19	; 25
    b16e:	9e 87       	std	Y+14, r25	; 0x0e
    b170:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    b172:	18 8a       	std	Y+16, r1	; 0x10
    b174:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = DEFAULT_SET_COMP_BUFFER;
    b176:	82 e0       	ldi	r24, 0x02	; 2
    b178:	90 e0       	ldi	r25, 0x00	; 0
    b17a:	9a 87       	std	Y+10, r25	; 0x0a
    b17c:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    b17e:	89 85       	ldd	r24, Y+9	; 0x09
    b180:	9a 85       	ldd	r25, Y+10	; 0x0a
    b182:	62 e0       	ldi	r22, 0x02	; 2
    b184:	70 e0       	ldi	r23, 0x00	; 0
    b186:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    b18a:	98 87       	std	Y+8, r25	; 0x08
    b18c:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    b18e:	8f 81       	ldd	r24, Y+7	; 0x07
    b190:	98 85       	ldd	r25, Y+8	; 0x08
    b192:	00 97       	sbiw	r24, 0x00	; 0
    b194:	11 f4       	brne	.+4      	; 0xb19a <newSetVarGC+0x44>
    b196:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	for (i = 0; i < size; i++)
    b19a:	1c 86       	std	Y+12, r1	; 0x0c
    b19c:	1b 86       	std	Y+11, r1	; 0x0b
    b19e:	3e c0       	rjmp	.+124    	; 0xb21c <newSetVarGC+0xc6>
	{
		TVP arg = va_arg(ap, TVP);
    b1a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    b1a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    b1a4:	c9 01       	movw	r24, r18
    b1a6:	02 96       	adiw	r24, 0x02	; 2
    b1a8:	9e 87       	std	Y+14, r25	; 0x0e
    b1aa:	8d 87       	std	Y+13, r24	; 0x0d
    b1ac:	f9 01       	movw	r30, r18
    b1ae:	80 81       	ld	r24, Z
    b1b0:	91 81       	ldd	r25, Z+1	; 0x01
    b1b2:	9c 83       	std	Y+4, r25	; 0x04
    b1b4:	8b 83       	std	Y+3, r24	; 0x03
		TVP v = vdmClone(arg);
    b1b6:	8b 81       	ldd	r24, Y+3	; 0x03
    b1b8:	9c 81       	ldd	r25, Y+4	; 0x04
    b1ba:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    b1be:	9a 83       	std	Y+2, r25	; 0x02
    b1c0:	89 83       	std	Y+1, r24	; 0x01

		if(count>=bufsize)
    b1c2:	2f 85       	ldd	r18, Y+15	; 0x0f
    b1c4:	38 89       	ldd	r19, Y+16	; 0x10
    b1c6:	89 85       	ldd	r24, Y+9	; 0x09
    b1c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b1ca:	28 17       	cp	r18, r24
    b1cc:	39 07       	cpc	r19, r25
    b1ce:	bc f0       	brlt	.+46     	; 0xb1fe <newSetVarGC+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b1d0:	89 85       	ldd	r24, Y+9	; 0x09
    b1d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b1d4:	0a 96       	adiw	r24, 0x0a	; 10
    b1d6:	9a 87       	std	Y+10, r25	; 0x0a
    b1d8:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b1da:	89 85       	ldd	r24, Y+9	; 0x09
    b1dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    b1de:	9c 01       	movw	r18, r24
    b1e0:	22 0f       	add	r18, r18
    b1e2:	33 1f       	adc	r19, r19
    b1e4:	8f 81       	ldd	r24, Y+7	; 0x07
    b1e6:	98 85       	ldd	r25, Y+8	; 0x08
    b1e8:	b9 01       	movw	r22, r18
    b1ea:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    b1ee:	98 87       	std	Y+8, r25	; 0x08
    b1f0:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b1f2:	8f 81       	ldd	r24, Y+7	; 0x07
    b1f4:	98 85       	ldd	r25, Y+8	; 0x08
    b1f6:	00 97       	sbiw	r24, 0x00	; 0
    b1f8:	11 f4       	brne	.+4      	; 0xb1fe <newSetVarGC+0xa8>
    b1fa:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		}
		vdmSetAdd(value,&count,v);
    b1fe:	8f 81       	ldd	r24, Y+7	; 0x07
    b200:	98 85       	ldd	r25, Y+8	; 0x08
    b202:	9e 01       	movw	r18, r28
    b204:	21 5f       	subi	r18, 0xF1	; 241
    b206:	3f 4f       	sbci	r19, 0xFF	; 255
    b208:	49 81       	ldd	r20, Y+1	; 0x01
    b20a:	5a 81       	ldd	r21, Y+2	; 0x02
    b20c:	b9 01       	movw	r22, r18
    b20e:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    b212:	8b 85       	ldd	r24, Y+11	; 0x0b
    b214:	9c 85       	ldd	r25, Y+12	; 0x0c
    b216:	01 96       	adiw	r24, 0x01	; 1
    b218:	9c 87       	std	Y+12, r25	; 0x0c
    b21a:	8b 87       	std	Y+11, r24	; 0x0b
    b21c:	2b 85       	ldd	r18, Y+11	; 0x0b
    b21e:	3c 85       	ldd	r19, Y+12	; 0x0c
    b220:	8d 89       	ldd	r24, Y+21	; 0x15
    b222:	9e 89       	ldd	r25, Y+22	; 0x16
    b224:	28 17       	cp	r18, r24
    b226:	39 07       	cpc	r19, r25
    b228:	08 f4       	brcc	.+2      	; 0xb22c <newSetVarGC+0xd6>
    b22a:	ba cf       	rjmp	.-140    	; 0xb1a0 <newSetVarGC+0x4a>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    b22c:	8f 85       	ldd	r24, Y+15	; 0x0f
    b22e:	98 89       	ldd	r25, Y+16	; 0x10
    b230:	2f 81       	ldd	r18, Y+7	; 0x07
    b232:	38 85       	ldd	r19, Y+8	; 0x08
    b234:	ef 89       	ldd	r30, Y+23	; 0x17
    b236:	f8 8d       	ldd	r31, Y+24	; 0x18
    b238:	67 e0       	ldi	r22, 0x07	; 7
    b23a:	70 e0       	ldi	r23, 0x00	; 0
    b23c:	a9 01       	movw	r20, r18
    b23e:	9f 01       	movw	r18, r30
    b240:	0e 94 2f 28 	call	0x505e	; 0x505e <newCollectionWithValuesGC>
    b244:	9e 83       	std	Y+6, r25	; 0x06
    b246:	8d 83       	std	Y+5, r24	; 0x05
	for(i = 0; i < count; i++)
    b248:	1c 86       	std	Y+12, r1	; 0x0c
    b24a:	1b 86       	std	Y+11, r1	; 0x0b
    b24c:	13 c0       	rjmp	.+38     	; 0xb274 <newSetVarGC+0x11e>
	{
		vdmFree(value[i]);
    b24e:	8b 85       	ldd	r24, Y+11	; 0x0b
    b250:	9c 85       	ldd	r25, Y+12	; 0x0c
    b252:	9c 01       	movw	r18, r24
    b254:	22 0f       	add	r18, r18
    b256:	33 1f       	adc	r19, r19
    b258:	8f 81       	ldd	r24, Y+7	; 0x07
    b25a:	98 85       	ldd	r25, Y+8	; 0x08
    b25c:	fc 01       	movw	r30, r24
    b25e:	e2 0f       	add	r30, r18
    b260:	f3 1f       	adc	r31, r19
    b262:	80 81       	ld	r24, Z
    b264:	91 81       	ldd	r25, Z+1	; 0x01
    b266:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
	for(i = 0; i < count; i++)
    b26a:	8b 85       	ldd	r24, Y+11	; 0x0b
    b26c:	9c 85       	ldd	r25, Y+12	; 0x0c
    b26e:	01 96       	adiw	r24, 0x01	; 1
    b270:	9c 87       	std	Y+12, r25	; 0x0c
    b272:	8b 87       	std	Y+11, r24	; 0x0b
    b274:	2f 85       	ldd	r18, Y+15	; 0x0f
    b276:	38 89       	ldd	r19, Y+16	; 0x10
    b278:	8b 85       	ldd	r24, Y+11	; 0x0b
    b27a:	9c 85       	ldd	r25, Y+12	; 0x0c
    b27c:	82 17       	cp	r24, r18
    b27e:	93 07       	cpc	r25, r19
    b280:	34 f3       	brlt	.-52     	; 0xb24e <newSetVarGC+0xf8>
	{
		vdmFree(value[i]);
	}
	free(value);
    b282:	8f 81       	ldd	r24, Y+7	; 0x07
    b284:	98 85       	ldd	r25, Y+8	; 0x08
    b286:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    b28a:	8d 81       	ldd	r24, Y+5	; 0x05
    b28c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    b28e:	60 96       	adiw	r28, 0x10	; 16
    b290:	0f b6       	in	r0, 0x3f	; 63
    b292:	f8 94       	cli
    b294:	de bf       	out	0x3e, r29	; 62
    b296:	0f be       	out	0x3f, r0	; 63
    b298:	cd bf       	out	0x3d, r28	; 61
    b29a:	cf 91       	pop	r28
    b29c:	df 91       	pop	r29
    b29e:	08 95       	ret

0000b2a0 <newSetVarToGrow>:


/* Just like newSetVar, but with memory preallocated to an expected  */
/* result set size.  */
TVP newSetVarToGrow(size_t size, size_t expected_size, ...)
{
    b2a0:	df 93       	push	r29
    b2a2:	cf 93       	push	r28
    b2a4:	cd b7       	in	r28, 0x3d	; 61
    b2a6:	de b7       	in	r29, 0x3e	; 62
    b2a8:	60 97       	sbiw	r28, 0x10	; 16
    b2aa:	0f b6       	in	r0, 0x3f	; 63
    b2ac:	f8 94       	cli
    b2ae:	de bf       	out	0x3e, r29	; 62
    b2b0:	0f be       	out	0x3f, r0	; 63
    b2b2:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, expected_size);
    b2b4:	ce 01       	movw	r24, r28
    b2b6:	49 96       	adiw	r24, 0x19	; 25
    b2b8:	9e 87       	std	Y+14, r25	; 0x0e
    b2ba:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    b2bc:	18 8a       	std	Y+16, r1	; 0x10
    b2be:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
    b2c0:	8f 89       	ldd	r24, Y+23	; 0x17
    b2c2:	98 8d       	ldd	r25, Y+24	; 0x18
    b2c4:	9a 87       	std	Y+10, r25	; 0x0a
    b2c6:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    b2c8:	89 85       	ldd	r24, Y+9	; 0x09
    b2ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    b2cc:	62 e0       	ldi	r22, 0x02	; 2
    b2ce:	70 e0       	ldi	r23, 0x00	; 0
    b2d0:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    b2d4:	98 87       	std	Y+8, r25	; 0x08
    b2d6:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    b2d8:	8f 81       	ldd	r24, Y+7	; 0x07
    b2da:	98 85       	ldd	r25, Y+8	; 0x08
    b2dc:	00 97       	sbiw	r24, 0x00	; 0
    b2de:	11 f4       	brne	.+4      	; 0xb2e4 <newSetVarToGrow+0x44>
    b2e0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b2e4:	1c 86       	std	Y+12, r1	; 0x0c
    b2e6:	1b 86       	std	Y+11, r1	; 0x0b
    b2e8:	3e c0       	rjmp	.+124    	; 0xb366 <newSetVarToGrow+0xc6>
	{
		arg = va_arg(ap, TVP);
    b2ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    b2ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    b2ee:	c9 01       	movw	r24, r18
    b2f0:	02 96       	adiw	r24, 0x02	; 2
    b2f2:	9e 87       	std	Y+14, r25	; 0x0e
    b2f4:	8d 87       	std	Y+13, r24	; 0x0d
    b2f6:	f9 01       	movw	r30, r18
    b2f8:	80 81       	ld	r24, Z
    b2fa:	91 81       	ldd	r25, Z+1	; 0x01
    b2fc:	9e 83       	std	Y+6, r25	; 0x06
    b2fe:	8d 83       	std	Y+5, r24	; 0x05
		v = vdmClone(arg); /*  set binding  */
    b300:	8d 81       	ldd	r24, Y+5	; 0x05
    b302:	9e 81       	ldd	r25, Y+6	; 0x06
    b304:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    b308:	9c 83       	std	Y+4, r25	; 0x04
    b30a:	8b 83       	std	Y+3, r24	; 0x03


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    b30c:	2f 85       	ldd	r18, Y+15	; 0x0f
    b30e:	38 89       	ldd	r19, Y+16	; 0x10
    b310:	89 85       	ldd	r24, Y+9	; 0x09
    b312:	9a 85       	ldd	r25, Y+10	; 0x0a
    b314:	28 17       	cp	r18, r24
    b316:	39 07       	cpc	r19, r25
    b318:	bc f0       	brlt	.+46     	; 0xb348 <newSetVarToGrow+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b31a:	89 85       	ldd	r24, Y+9	; 0x09
    b31c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b31e:	0a 96       	adiw	r24, 0x0a	; 10
    b320:	9a 87       	std	Y+10, r25	; 0x0a
    b322:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b324:	89 85       	ldd	r24, Y+9	; 0x09
    b326:	9a 85       	ldd	r25, Y+10	; 0x0a
    b328:	9c 01       	movw	r18, r24
    b32a:	22 0f       	add	r18, r18
    b32c:	33 1f       	adc	r19, r19
    b32e:	8f 81       	ldd	r24, Y+7	; 0x07
    b330:	98 85       	ldd	r25, Y+8	; 0x08
    b332:	b9 01       	movw	r22, r18
    b334:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    b338:	98 87       	std	Y+8, r25	; 0x08
    b33a:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b33c:	8f 81       	ldd	r24, Y+7	; 0x07
    b33e:	98 85       	ldd	r25, Y+8	; 0x08
    b340:	00 97       	sbiw	r24, 0x00	; 0
    b342:	11 f4       	brne	.+4      	; 0xb348 <newSetVarToGrow+0xa8>
    b344:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		}
		vdmSetAdd(value,&count,v);
    b348:	8f 81       	ldd	r24, Y+7	; 0x07
    b34a:	98 85       	ldd	r25, Y+8	; 0x08
    b34c:	9e 01       	movw	r18, r28
    b34e:	21 5f       	subi	r18, 0xF1	; 241
    b350:	3f 4f       	sbci	r19, 0xFF	; 255
    b352:	4b 81       	ldd	r20, Y+3	; 0x03
    b354:	5c 81       	ldd	r21, Y+4	; 0x04
    b356:	b9 01       	movw	r22, r18
    b358:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>
	assert(value != NULL);

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b35c:	8b 85       	ldd	r24, Y+11	; 0x0b
    b35e:	9c 85       	ldd	r25, Y+12	; 0x0c
    b360:	01 96       	adiw	r24, 0x01	; 1
    b362:	9c 87       	std	Y+12, r25	; 0x0c
    b364:	8b 87       	std	Y+11, r24	; 0x0b
    b366:	2b 85       	ldd	r18, Y+11	; 0x0b
    b368:	3c 85       	ldd	r19, Y+12	; 0x0c
    b36a:	8d 89       	ldd	r24, Y+21	; 0x15
    b36c:	9e 89       	ldd	r25, Y+22	; 0x16
    b36e:	28 17       	cp	r18, r24
    b370:	39 07       	cpc	r19, r25
    b372:	08 f4       	brcc	.+2      	; 0xb376 <newSetVarToGrow+0xd6>
    b374:	ba cf       	rjmp	.-140    	; 0xb2ea <newSetVarToGrow+0x4a>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    b376:	8f 85       	ldd	r24, Y+15	; 0x0f
    b378:	98 89       	ldd	r25, Y+16	; 0x10
    b37a:	2f 81       	ldd	r18, Y+7	; 0x07
    b37c:	38 85       	ldd	r19, Y+8	; 0x08
    b37e:	67 e0       	ldi	r22, 0x07	; 7
    b380:	70 e0       	ldi	r23, 0x00	; 0
    b382:	a9 01       	movw	r20, r18
    b384:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <newCollectionWithValues>
    b388:	9a 83       	std	Y+2, r25	; 0x02
    b38a:	89 83       	std	Y+1, r24	; 0x01
	free(value);
    b38c:	8f 81       	ldd	r24, Y+7	; 0x07
    b38e:	98 85       	ldd	r25, Y+8	; 0x08
    b390:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    b394:	89 81       	ldd	r24, Y+1	; 0x01
    b396:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b398:	60 96       	adiw	r28, 0x10	; 16
    b39a:	0f b6       	in	r0, 0x3f	; 63
    b39c:	f8 94       	cli
    b39e:	de bf       	out	0x3e, r29	; 62
    b3a0:	0f be       	out	0x3f, r0	; 63
    b3a2:	cd bf       	out	0x3d, r28	; 61
    b3a4:	cf 91       	pop	r28
    b3a6:	df 91       	pop	r29
    b3a8:	08 95       	ret

0000b3aa <newSetVarToGrowGC>:

TVP newSetVarToGrowGC(size_t size, size_t expected_size, TVP *from, ...)
{
    b3aa:	df 93       	push	r29
    b3ac:	cf 93       	push	r28
    b3ae:	cd b7       	in	r28, 0x3d	; 61
    b3b0:	de b7       	in	r29, 0x3e	; 62
    b3b2:	60 97       	sbiw	r28, 0x10	; 16
    b3b4:	0f b6       	in	r0, 0x3f	; 63
    b3b6:	f8 94       	cli
    b3b8:	de bf       	out	0x3e, r29	; 62
    b3ba:	0f be       	out	0x3f, r0	; 63
    b3bc:	cd bf       	out	0x3d, r28	; 61
	va_list ap;
	va_start(ap, from);
    b3be:	ce 01       	movw	r24, r28
    b3c0:	4b 96       	adiw	r24, 0x1b	; 27
    b3c2:	9e 87       	std	Y+14, r25	; 0x0e
    b3c4:	8d 87       	std	Y+13, r24	; 0x0d

	int i;
	int count = 0;
    b3c6:	18 8a       	std	Y+16, r1	; 0x10
    b3c8:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
    b3ca:	8f 89       	ldd	r24, Y+23	; 0x17
    b3cc:	98 8d       	ldd	r25, Y+24	; 0x18
    b3ce:	9a 87       	std	Y+10, r25	; 0x0a
    b3d0:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    b3d2:	89 85       	ldd	r24, Y+9	; 0x09
    b3d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3d6:	62 e0       	ldi	r22, 0x02	; 2
    b3d8:	70 e0       	ldi	r23, 0x00	; 0
    b3da:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    b3de:	98 87       	std	Y+8, r25	; 0x08
    b3e0:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    b3e2:	8f 81       	ldd	r24, Y+7	; 0x07
    b3e4:	98 85       	ldd	r25, Y+8	; 0x08
    b3e6:	00 97       	sbiw	r24, 0x00	; 0
    b3e8:	11 f4       	brne	.+4      	; 0xb3ee <newSetVarToGrowGC+0x44>
    b3ea:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b3ee:	1c 86       	std	Y+12, r1	; 0x0c
    b3f0:	1b 86       	std	Y+11, r1	; 0x0b
    b3f2:	3e c0       	rjmp	.+124    	; 0xb470 <newSetVarToGrowGC+0xc6>
	{
		arg = va_arg(ap, TVP);
    b3f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    b3f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    b3f8:	c9 01       	movw	r24, r18
    b3fa:	02 96       	adiw	r24, 0x02	; 2
    b3fc:	9e 87       	std	Y+14, r25	; 0x0e
    b3fe:	8d 87       	std	Y+13, r24	; 0x0d
    b400:	f9 01       	movw	r30, r18
    b402:	80 81       	ld	r24, Z
    b404:	91 81       	ldd	r25, Z+1	; 0x01
    b406:	9e 83       	std	Y+6, r25	; 0x06
    b408:	8d 83       	std	Y+5, r24	; 0x05
		v = vdmClone(arg); /*  set binding  */
    b40a:	8d 81       	ldd	r24, Y+5	; 0x05
    b40c:	9e 81       	ldd	r25, Y+6	; 0x06
    b40e:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    b412:	9c 83       	std	Y+4, r25	; 0x04
    b414:	8b 83       	std	Y+3, r24	; 0x03


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    b416:	2f 85       	ldd	r18, Y+15	; 0x0f
    b418:	38 89       	ldd	r19, Y+16	; 0x10
    b41a:	89 85       	ldd	r24, Y+9	; 0x09
    b41c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b41e:	28 17       	cp	r18, r24
    b420:	39 07       	cpc	r19, r25
    b422:	bc f0       	brlt	.+46     	; 0xb452 <newSetVarToGrowGC+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b424:	89 85       	ldd	r24, Y+9	; 0x09
    b426:	9a 85       	ldd	r25, Y+10	; 0x0a
    b428:	0a 96       	adiw	r24, 0x0a	; 10
    b42a:	9a 87       	std	Y+10, r25	; 0x0a
    b42c:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b42e:	89 85       	ldd	r24, Y+9	; 0x09
    b430:	9a 85       	ldd	r25, Y+10	; 0x0a
    b432:	9c 01       	movw	r18, r24
    b434:	22 0f       	add	r18, r18
    b436:	33 1f       	adc	r19, r19
    b438:	8f 81       	ldd	r24, Y+7	; 0x07
    b43a:	98 85       	ldd	r25, Y+8	; 0x08
    b43c:	b9 01       	movw	r22, r18
    b43e:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    b442:	98 87       	std	Y+8, r25	; 0x08
    b444:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b446:	8f 81       	ldd	r24, Y+7	; 0x07
    b448:	98 85       	ldd	r25, Y+8	; 0x08
    b44a:	00 97       	sbiw	r24, 0x00	; 0
    b44c:	11 f4       	brne	.+4      	; 0xb452 <newSetVarToGrowGC+0xa8>
    b44e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		}
		vdmSetAdd(value,&count,v);
    b452:	8f 81       	ldd	r24, Y+7	; 0x07
    b454:	98 85       	ldd	r25, Y+8	; 0x08
    b456:	9e 01       	movw	r18, r28
    b458:	21 5f       	subi	r18, 0xF1	; 241
    b45a:	3f 4f       	sbci	r19, 0xFF	; 255
    b45c:	4b 81       	ldd	r20, Y+3	; 0x03
    b45e:	5c 81       	ldd	r21, Y+4	; 0x04
    b460:	b9 01       	movw	r22, r18
    b462:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>
	assert(value != NULL);

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b466:	8b 85       	ldd	r24, Y+11	; 0x0b
    b468:	9c 85       	ldd	r25, Y+12	; 0x0c
    b46a:	01 96       	adiw	r24, 0x01	; 1
    b46c:	9c 87       	std	Y+12, r25	; 0x0c
    b46e:	8b 87       	std	Y+11, r24	; 0x0b
    b470:	2b 85       	ldd	r18, Y+11	; 0x0b
    b472:	3c 85       	ldd	r19, Y+12	; 0x0c
    b474:	8d 89       	ldd	r24, Y+21	; 0x15
    b476:	9e 89       	ldd	r25, Y+22	; 0x16
    b478:	28 17       	cp	r18, r24
    b47a:	39 07       	cpc	r19, r25
    b47c:	08 f4       	brcc	.+2      	; 0xb480 <newSetVarToGrowGC+0xd6>
    b47e:	ba cf       	rjmp	.-140    	; 0xb3f4 <newSetVarToGrowGC+0x4a>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    b480:	8f 85       	ldd	r24, Y+15	; 0x0f
    b482:	98 89       	ldd	r25, Y+16	; 0x10
    b484:	2f 81       	ldd	r18, Y+7	; 0x07
    b486:	38 85       	ldd	r19, Y+8	; 0x08
    b488:	e9 8d       	ldd	r30, Y+25	; 0x19
    b48a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b48c:	67 e0       	ldi	r22, 0x07	; 7
    b48e:	70 e0       	ldi	r23, 0x00	; 0
    b490:	a9 01       	movw	r20, r18
    b492:	9f 01       	movw	r18, r30
    b494:	0e 94 2f 28 	call	0x505e	; 0x505e <newCollectionWithValuesGC>
    b498:	9a 83       	std	Y+2, r25	; 0x02
    b49a:	89 83       	std	Y+1, r24	; 0x01
	free(value);
    b49c:	8f 81       	ldd	r24, Y+7	; 0x07
    b49e:	98 85       	ldd	r25, Y+8	; 0x08
    b4a0:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    b4a4:	89 81       	ldd	r24, Y+1	; 0x01
    b4a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b4a8:	60 96       	adiw	r28, 0x10	; 16
    b4aa:	0f b6       	in	r0, 0x3f	; 63
    b4ac:	f8 94       	cli
    b4ae:	de bf       	out	0x3e, r29	; 62
    b4b0:	0f be       	out	0x3f, r0	; 63
    b4b2:	cd bf       	out	0x3d, r28	; 61
    b4b4:	cf 91       	pop	r28
    b4b6:	df 91       	pop	r29
    b4b8:	08 95       	ret

0000b4ba <vdmSetGrow>:



/* What to return?  */
void vdmSetGrow(TVP set, TVP element)
{
    b4ba:	ef 92       	push	r14
    b4bc:	ff 92       	push	r15
    b4be:	0f 93       	push	r16
    b4c0:	1f 93       	push	r17
    b4c2:	df 93       	push	r29
    b4c4:	cf 93       	push	r28
    b4c6:	cd b7       	in	r28, 0x3d	; 61
    b4c8:	de b7       	in	r29, 0x3e	; 62
    b4ca:	28 97       	sbiw	r28, 0x08	; 8
    b4cc:	0f b6       	in	r0, 0x3f	; 63
    b4ce:	f8 94       	cli
    b4d0:	de bf       	out	0x3e, r29	; 62
    b4d2:	0f be       	out	0x3f, r0	; 63
    b4d4:	cd bf       	out	0x3d, r28	; 61
    b4d6:	9e 83       	std	Y+6, r25	; 0x06
    b4d8:	8d 83       	std	Y+5, r24	; 0x05
    b4da:	78 87       	std	Y+8, r23	; 0x08
    b4dc:	6f 83       	std	Y+7, r22	; 0x07
/* 	int bufsize = DEFAULT_SET_COMP_BUFFER;  */

	UNWRAP_COLLECTION(col, set);
    b4de:	ed 81       	ldd	r30, Y+5	; 0x05
    b4e0:	fe 81       	ldd	r31, Y+6	; 0x06
    b4e2:	84 81       	ldd	r24, Z+4	; 0x04
    b4e4:	95 81       	ldd	r25, Z+5	; 0x05
    b4e6:	9c 83       	std	Y+4, r25	; 0x04
    b4e8:	8b 83       	std	Y+3, r24	; 0x03
	int size = col->size;
    b4ea:	eb 81       	ldd	r30, Y+3	; 0x03
    b4ec:	fc 81       	ldd	r31, Y+4	; 0x04
    b4ee:	82 81       	ldd	r24, Z+2	; 0x02
    b4f0:	93 81       	ldd	r25, Z+3	; 0x03
    b4f2:	9a 83       	std	Y+2, r25	; 0x02
    b4f4:	89 83       	std	Y+1, r24	; 0x01
/* 		buffer too small add memory chunk  */
/* 		bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;  */
/* 		col->value = (TVP*)realloc(col->value, bufsize * sizeof(TVP));  */
/* 	}  */

	col->value = (TVP *)realloc(col->value, (size + 1) * sizeof(TVP));
    b4f6:	eb 81       	ldd	r30, Y+3	; 0x03
    b4f8:	fc 81       	ldd	r31, Y+4	; 0x04
    b4fa:	40 81       	ld	r20, Z
    b4fc:	51 81       	ldd	r21, Z+1	; 0x01
    b4fe:	89 81       	ldd	r24, Y+1	; 0x01
    b500:	9a 81       	ldd	r25, Y+2	; 0x02
    b502:	01 96       	adiw	r24, 0x01	; 1
    b504:	88 0f       	add	r24, r24
    b506:	99 1f       	adc	r25, r25
    b508:	9c 01       	movw	r18, r24
    b50a:	ca 01       	movw	r24, r20
    b50c:	b9 01       	movw	r22, r18
    b50e:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    b512:	eb 81       	ldd	r30, Y+3	; 0x03
    b514:	fc 81       	ldd	r31, Y+4	; 0x04
    b516:	91 83       	std	Z+1, r25	; 0x01
    b518:	80 83       	st	Z, r24
	assert(col->value != NULL);
    b51a:	eb 81       	ldd	r30, Y+3	; 0x03
    b51c:	fc 81       	ldd	r31, Y+4	; 0x04
    b51e:	80 81       	ld	r24, Z
    b520:	91 81       	ldd	r25, Z+1	; 0x01
    b522:	00 97       	sbiw	r24, 0x00	; 0
    b524:	11 f4       	brne	.+4      	; 0xb52a <vdmSetGrow+0x70>
    b526:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	vdmSetAdd(col->value, &(col->size), vdmClone(element));
    b52a:	eb 81       	ldd	r30, Y+3	; 0x03
    b52c:	fc 81       	ldd	r31, Y+4	; 0x04
    b52e:	e0 80       	ld	r14, Z
    b530:	f1 80       	ldd	r15, Z+1	; 0x01
    b532:	8b 81       	ldd	r24, Y+3	; 0x03
    b534:	9c 81       	ldd	r25, Y+4	; 0x04
    b536:	8c 01       	movw	r16, r24
    b538:	0e 5f       	subi	r16, 0xFE	; 254
    b53a:	1f 4f       	sbci	r17, 0xFF	; 255
    b53c:	8f 81       	ldd	r24, Y+7	; 0x07
    b53e:	98 85       	ldd	r25, Y+8	; 0x08
    b540:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    b544:	9c 01       	movw	r18, r24
    b546:	c7 01       	movw	r24, r14
    b548:	b8 01       	movw	r22, r16
    b54a:	a9 01       	movw	r20, r18
    b54c:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>
}
    b550:	28 96       	adiw	r28, 0x08	; 8
    b552:	0f b6       	in	r0, 0x3f	; 63
    b554:	f8 94       	cli
    b556:	de bf       	out	0x3e, r29	; 62
    b558:	0f be       	out	0x3f, r0	; 63
    b55a:	cd bf       	out	0x3d, r28	; 61
    b55c:	cf 91       	pop	r28
    b55e:	df 91       	pop	r29
    b560:	1f 91       	pop	r17
    b562:	0f 91       	pop	r16
    b564:	ff 90       	pop	r15
    b566:	ef 90       	pop	r14
    b568:	08 95       	ret

0000b56a <vdmSetFit>:



void vdmSetFit(TVP set)
{
    b56a:	df 93       	push	r29
    b56c:	cf 93       	push	r28
    b56e:	00 d0       	rcall	.+0      	; 0xb570 <vdmSetFit+0x6>
    b570:	00 d0       	rcall	.+0      	; 0xb572 <vdmSetFit+0x8>
    b572:	cd b7       	in	r28, 0x3d	; 61
    b574:	de b7       	in	r29, 0x3e	; 62
    b576:	9c 83       	std	Y+4, r25	; 0x04
    b578:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, set);
    b57a:	eb 81       	ldd	r30, Y+3	; 0x03
    b57c:	fc 81       	ldd	r31, Y+4	; 0x04
    b57e:	84 81       	ldd	r24, Z+4	; 0x04
    b580:	95 81       	ldd	r25, Z+5	; 0x05
    b582:	9a 83       	std	Y+2, r25	; 0x02
    b584:	89 83       	std	Y+1, r24	; 0x01

	/* Assumes that more memory is allocated in the col->value array than there are elements.  */
	col->value = (TVP*)realloc(col->value, col->size * sizeof(TVP));
    b586:	e9 81       	ldd	r30, Y+1	; 0x01
    b588:	fa 81       	ldd	r31, Y+2	; 0x02
    b58a:	40 81       	ld	r20, Z
    b58c:	51 81       	ldd	r21, Z+1	; 0x01
    b58e:	e9 81       	ldd	r30, Y+1	; 0x01
    b590:	fa 81       	ldd	r31, Y+2	; 0x02
    b592:	82 81       	ldd	r24, Z+2	; 0x02
    b594:	93 81       	ldd	r25, Z+3	; 0x03
    b596:	9c 01       	movw	r18, r24
    b598:	22 0f       	add	r18, r18
    b59a:	33 1f       	adc	r19, r19
    b59c:	ca 01       	movw	r24, r20
    b59e:	b9 01       	movw	r22, r18
    b5a0:	0e 94 bf 6d 	call	0xdb7e	; 0xdb7e <realloc>
    b5a4:	e9 81       	ldd	r30, Y+1	; 0x01
    b5a6:	fa 81       	ldd	r31, Y+2	; 0x02
    b5a8:	91 83       	std	Z+1, r25	; 0x01
    b5aa:	80 83       	st	Z, r24
	assert(col->value != NULL);
    b5ac:	e9 81       	ldd	r30, Y+1	; 0x01
    b5ae:	fa 81       	ldd	r31, Y+2	; 0x02
    b5b0:	80 81       	ld	r24, Z
    b5b2:	91 81       	ldd	r25, Z+1	; 0x01
    b5b4:	00 97       	sbiw	r24, 0x00	; 0
    b5b6:	11 f4       	brne	.+4      	; 0xb5bc <vdmSetFit+0x52>
    b5b8:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
}
    b5bc:	0f 90       	pop	r0
    b5be:	0f 90       	pop	r0
    b5c0:	0f 90       	pop	r0
    b5c2:	0f 90       	pop	r0
    b5c4:	cf 91       	pop	r28
    b5c6:	df 91       	pop	r29
    b5c8:	08 95       	ret

0000b5ca <vdmSetEnumerateSetOfInts>:



TVP vdmSetEnumerateSetOfInts(int lower, int upper)
{
    b5ca:	df 93       	push	r29
    b5cc:	cf 93       	push	r28
    b5ce:	cd b7       	in	r28, 0x3d	; 61
    b5d0:	de b7       	in	r29, 0x3e	; 62
    b5d2:	2e 97       	sbiw	r28, 0x0e	; 14
    b5d4:	0f b6       	in	r0, 0x3f	; 63
    b5d6:	f8 94       	cli
    b5d8:	de bf       	out	0x3e, r29	; 62
    b5da:	0f be       	out	0x3f, r0	; 63
    b5dc:	cd bf       	out	0x3d, r28	; 61
    b5de:	9a 87       	std	Y+10, r25	; 0x0a
    b5e0:	89 87       	std	Y+9, r24	; 0x09
    b5e2:	7c 87       	std	Y+12, r23	; 0x0c
    b5e4:	6b 87       	std	Y+11, r22	; 0x0b
	/* For faster access.  */
	/* 	l = lower->value.intVal;  */
	/* 	u = upper->value.intVal;  */

	/* Some special cases.  */
	if (upper < lower)
    b5e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    b5e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    b5ea:	89 85       	ldd	r24, Y+9	; 0x09
    b5ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    b5ee:	28 17       	cp	r18, r24
    b5f0:	39 07       	cpc	r19, r25
    b5f2:	1c f4       	brge	.+6      	; 0xb5fa <vdmSetEnumerateSetOfInts+0x30>
	{
		return NULL;
    b5f4:	1e 86       	std	Y+14, r1	; 0x0e
    b5f6:	1d 86       	std	Y+13, r1	; 0x0d
    b5f8:	85 c0       	rjmp	.+266    	; 0xb704 <vdmSetEnumerateSetOfInts+0x13a>
	}

	if(lower == upper)
    b5fa:	29 85       	ldd	r18, Y+9	; 0x09
    b5fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    b5fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    b600:	9c 85       	ldd	r25, Y+12	; 0x0c
    b602:	28 17       	cp	r18, r24
    b604:	39 07       	cpc	r19, r25
    b606:	c9 f4       	brne	.+50     	; 0xb63a <vdmSetEnumerateSetOfInts+0x70>
	{
		return newSetVar(1, newInt(upper));
    b608:	8b 85       	ldd	r24, Y+11	; 0x0b
    b60a:	9c 85       	ldd	r25, Y+12	; 0x0c
    b60c:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    b610:	9c 01       	movw	r18, r24
    b612:	00 d0       	rcall	.+0      	; 0xb614 <vdmSetEnumerateSetOfInts+0x4a>
    b614:	00 d0       	rcall	.+0      	; 0xb616 <vdmSetEnumerateSetOfInts+0x4c>
    b616:	ed b7       	in	r30, 0x3d	; 61
    b618:	fe b7       	in	r31, 0x3e	; 62
    b61a:	31 96       	adiw	r30, 0x01	; 1
    b61c:	81 e0       	ldi	r24, 0x01	; 1
    b61e:	90 e0       	ldi	r25, 0x00	; 0
    b620:	91 83       	std	Z+1, r25	; 0x01
    b622:	80 83       	st	Z, r24
    b624:	33 83       	std	Z+3, r19	; 0x03
    b626:	22 83       	std	Z+2, r18	; 0x02
    b628:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    b62c:	0f 90       	pop	r0
    b62e:	0f 90       	pop	r0
    b630:	0f 90       	pop	r0
    b632:	0f 90       	pop	r0
    b634:	9e 87       	std	Y+14, r25	; 0x0e
    b636:	8d 87       	std	Y+13, r24	; 0x0d
    b638:	65 c0       	rjmp	.+202    	; 0xb704 <vdmSetEnumerateSetOfInts+0x13a>
	}

	/* The common case.  */
	theset = (TVP*)calloc(upper - lower + 1, sizeof(TVP));
    b63a:	2b 85       	ldd	r18, Y+11	; 0x0b
    b63c:	3c 85       	ldd	r19, Y+12	; 0x0c
    b63e:	89 85       	ldd	r24, Y+9	; 0x09
    b640:	9a 85       	ldd	r25, Y+10	; 0x0a
    b642:	a9 01       	movw	r20, r18
    b644:	48 1b       	sub	r20, r24
    b646:	59 0b       	sbc	r21, r25
    b648:	ca 01       	movw	r24, r20
    b64a:	01 96       	adiw	r24, 0x01	; 1
    b64c:	62 e0       	ldi	r22, 0x02	; 2
    b64e:	70 e0       	ldi	r23, 0x00	; 0
    b650:	0e 94 9e 6c 	call	0xd93c	; 0xd93c <calloc>
    b654:	9e 83       	std	Y+6, r25	; 0x06
    b656:	8d 83       	std	Y+5, r24	; 0x05
	assert(theset != NULL);
    b658:	8d 81       	ldd	r24, Y+5	; 0x05
    b65a:	9e 81       	ldd	r25, Y+6	; 0x06
    b65c:	00 97       	sbiw	r24, 0x00	; 0
    b65e:	11 f4       	brne	.+4      	; 0xb664 <vdmSetEnumerateSetOfInts+0x9a>
    b660:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	count = 0;
    b664:	18 86       	std	Y+8, r1	; 0x08
    b666:	1f 82       	std	Y+7, r1	; 0x07

	for (i = lower; i <= upper; i++)
    b668:	89 85       	ldd	r24, Y+9	; 0x09
    b66a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b66c:	9c 83       	std	Y+4, r25	; 0x04
    b66e:	8b 83       	std	Y+3, r24	; 0x03
    b670:	12 c0       	rjmp	.+36     	; 0xb696 <vdmSetEnumerateSetOfInts+0xcc>
	{
		vdmSetAdd(theset, &count, newInt(i));
    b672:	8b 81       	ldd	r24, Y+3	; 0x03
    b674:	9c 81       	ldd	r25, Y+4	; 0x04
    b676:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
    b67a:	ac 01       	movw	r20, r24
    b67c:	8d 81       	ldd	r24, Y+5	; 0x05
    b67e:	9e 81       	ldd	r25, Y+6	; 0x06
    b680:	9e 01       	movw	r18, r28
    b682:	29 5f       	subi	r18, 0xF9	; 249
    b684:	3f 4f       	sbci	r19, 0xFF	; 255
    b686:	b9 01       	movw	r22, r18
    b688:	0e 94 53 56 	call	0xaca6	; 0xaca6 <vdmSetAdd>
	/* The common case.  */
	theset = (TVP*)calloc(upper - lower + 1, sizeof(TVP));
	assert(theset != NULL);
	count = 0;

	for (i = lower; i <= upper; i++)
    b68c:	8b 81       	ldd	r24, Y+3	; 0x03
    b68e:	9c 81       	ldd	r25, Y+4	; 0x04
    b690:	01 96       	adiw	r24, 0x01	; 1
    b692:	9c 83       	std	Y+4, r25	; 0x04
    b694:	8b 83       	std	Y+3, r24	; 0x03
    b696:	2b 81       	ldd	r18, Y+3	; 0x03
    b698:	3c 81       	ldd	r19, Y+4	; 0x04
    b69a:	8b 85       	ldd	r24, Y+11	; 0x0b
    b69c:	9c 85       	ldd	r25, Y+12	; 0x0c
    b69e:	82 17       	cp	r24, r18
    b6a0:	93 07       	cpc	r25, r19
    b6a2:	3c f7       	brge	.-50     	; 0xb672 <vdmSetEnumerateSetOfInts+0xa8>
	{
		vdmSetAdd(theset, &count, newInt(i));
	}

	TVP res = newCollectionWithValues(count, VDM_SET, theset);
    b6a4:	8f 81       	ldd	r24, Y+7	; 0x07
    b6a6:	98 85       	ldd	r25, Y+8	; 0x08
    b6a8:	2d 81       	ldd	r18, Y+5	; 0x05
    b6aa:	3e 81       	ldd	r19, Y+6	; 0x06
    b6ac:	67 e0       	ldi	r22, 0x07	; 7
    b6ae:	70 e0       	ldi	r23, 0x00	; 0
    b6b0:	a9 01       	movw	r20, r18
    b6b2:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <newCollectionWithValues>
    b6b6:	9a 83       	std	Y+2, r25	; 0x02
    b6b8:	89 83       	std	Y+1, r24	; 0x01

	for(i = 0; i < count; i++)
    b6ba:	1c 82       	std	Y+4, r1	; 0x04
    b6bc:	1b 82       	std	Y+3, r1	; 0x03
    b6be:	13 c0       	rjmp	.+38     	; 0xb6e6 <vdmSetEnumerateSetOfInts+0x11c>
	{
		vdmFree(theset[i]);
    b6c0:	8b 81       	ldd	r24, Y+3	; 0x03
    b6c2:	9c 81       	ldd	r25, Y+4	; 0x04
    b6c4:	9c 01       	movw	r18, r24
    b6c6:	22 0f       	add	r18, r18
    b6c8:	33 1f       	adc	r19, r19
    b6ca:	8d 81       	ldd	r24, Y+5	; 0x05
    b6cc:	9e 81       	ldd	r25, Y+6	; 0x06
    b6ce:	fc 01       	movw	r30, r24
    b6d0:	e2 0f       	add	r30, r18
    b6d2:	f3 1f       	adc	r31, r19
    b6d4:	80 81       	ld	r24, Z
    b6d6:	91 81       	ldd	r25, Z+1	; 0x01
    b6d8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		vdmSetAdd(theset, &count, newInt(i));
	}

	TVP res = newCollectionWithValues(count, VDM_SET, theset);

	for(i = 0; i < count; i++)
    b6dc:	8b 81       	ldd	r24, Y+3	; 0x03
    b6de:	9c 81       	ldd	r25, Y+4	; 0x04
    b6e0:	01 96       	adiw	r24, 0x01	; 1
    b6e2:	9c 83       	std	Y+4, r25	; 0x04
    b6e4:	8b 83       	std	Y+3, r24	; 0x03
    b6e6:	2f 81       	ldd	r18, Y+7	; 0x07
    b6e8:	38 85       	ldd	r19, Y+8	; 0x08
    b6ea:	8b 81       	ldd	r24, Y+3	; 0x03
    b6ec:	9c 81       	ldd	r25, Y+4	; 0x04
    b6ee:	82 17       	cp	r24, r18
    b6f0:	93 07       	cpc	r25, r19
    b6f2:	34 f3       	brlt	.-52     	; 0xb6c0 <vdmSetEnumerateSetOfInts+0xf6>
	{
		vdmFree(theset[i]);
	}
	free(theset);
    b6f4:	8d 81       	ldd	r24, Y+5	; 0x05
    b6f6:	9e 81       	ldd	r25, Y+6	; 0x06
    b6f8:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	return res;
    b6fc:	89 81       	ldd	r24, Y+1	; 0x01
    b6fe:	9a 81       	ldd	r25, Y+2	; 0x02
    b700:	9e 87       	std	Y+14, r25	; 0x0e
    b702:	8d 87       	std	Y+13, r24	; 0x0d
    b704:	8d 85       	ldd	r24, Y+13	; 0x0d
    b706:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    b708:	2e 96       	adiw	r28, 0x0e	; 14
    b70a:	0f b6       	in	r0, 0x3f	; 63
    b70c:	f8 94       	cli
    b70e:	de bf       	out	0x3e, r29	; 62
    b710:	0f be       	out	0x3f, r0	; 63
    b712:	cd bf       	out	0x3d, r28	; 61
    b714:	cf 91       	pop	r28
    b716:	df 91       	pop	r29
    b718:	08 95       	ret

0000b71a <vdmSetElementAt>:


TVP vdmSetElementAt(TVP set, int loc)
{
    b71a:	df 93       	push	r29
    b71c:	cf 93       	push	r28
    b71e:	cd b7       	in	r28, 0x3d	; 61
    b720:	de b7       	in	r29, 0x3e	; 62
    b722:	28 97       	sbiw	r28, 0x08	; 8
    b724:	0f b6       	in	r0, 0x3f	; 63
    b726:	f8 94       	cli
    b728:	de bf       	out	0x3e, r29	; 62
    b72a:	0f be       	out	0x3f, r0	; 63
    b72c:	cd bf       	out	0x3d, r28	; 61
    b72e:	9c 83       	std	Y+4, r25	; 0x04
    b730:	8b 83       	std	Y+3, r24	; 0x03
    b732:	7e 83       	std	Y+6, r23	; 0x06
    b734:	6d 83       	std	Y+5, r22	; 0x05
	UNWRAP_COLLECTION(col, set);
    b736:	eb 81       	ldd	r30, Y+3	; 0x03
    b738:	fc 81       	ldd	r31, Y+4	; 0x04
    b73a:	84 81       	ldd	r24, Z+4	; 0x04
    b73c:	95 81       	ldd	r25, Z+5	; 0x05
    b73e:	9a 83       	std	Y+2, r25	; 0x02
    b740:	89 83       	std	Y+1, r24	; 0x01

	if(loc >= col->size)
    b742:	e9 81       	ldd	r30, Y+1	; 0x01
    b744:	fa 81       	ldd	r31, Y+2	; 0x02
    b746:	22 81       	ldd	r18, Z+2	; 0x02
    b748:	33 81       	ldd	r19, Z+3	; 0x03
    b74a:	8d 81       	ldd	r24, Y+5	; 0x05
    b74c:	9e 81       	ldd	r25, Y+6	; 0x06
    b74e:	82 17       	cp	r24, r18
    b750:	93 07       	cpc	r25, r19
    b752:	1c f0       	brlt	.+6      	; 0xb75a <vdmSetElementAt+0x40>
	{
		return NULL;
    b754:	18 86       	std	Y+8, r1	; 0x08
    b756:	1f 82       	std	Y+7, r1	; 0x07
    b758:	11 c0       	rjmp	.+34     	; 0xb77c <vdmSetElementAt+0x62>
	}

	return vdmClone(col->value[loc]);
    b75a:	e9 81       	ldd	r30, Y+1	; 0x01
    b75c:	fa 81       	ldd	r31, Y+2	; 0x02
    b75e:	20 81       	ld	r18, Z
    b760:	31 81       	ldd	r19, Z+1	; 0x01
    b762:	8d 81       	ldd	r24, Y+5	; 0x05
    b764:	9e 81       	ldd	r25, Y+6	; 0x06
    b766:	88 0f       	add	r24, r24
    b768:	99 1f       	adc	r25, r25
    b76a:	f9 01       	movw	r30, r18
    b76c:	e8 0f       	add	r30, r24
    b76e:	f9 1f       	adc	r31, r25
    b770:	80 81       	ld	r24, Z
    b772:	91 81       	ldd	r25, Z+1	; 0x01
    b774:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    b778:	98 87       	std	Y+8, r25	; 0x08
    b77a:	8f 83       	std	Y+7, r24	; 0x07
    b77c:	8f 81       	ldd	r24, Y+7	; 0x07
    b77e:	98 85       	ldd	r25, Y+8	; 0x08
}
    b780:	28 96       	adiw	r28, 0x08	; 8
    b782:	0f b6       	in	r0, 0x3f	; 63
    b784:	f8 94       	cli
    b786:	de bf       	out	0x3e, r29	; 62
    b788:	0f be       	out	0x3f, r0	; 63
    b78a:	cd bf       	out	0x3d, r28	; 61
    b78c:	cf 91       	pop	r28
    b78e:	df 91       	pop	r29
    b790:	08 95       	ret

0000b792 <vdmSetElementAtGC>:

TVP vdmSetElementAtGC(TVP set, int loc, TVP *from)
{
    b792:	df 93       	push	r29
    b794:	cf 93       	push	r28
    b796:	cd b7       	in	r28, 0x3d	; 61
    b798:	de b7       	in	r29, 0x3e	; 62
    b79a:	2a 97       	sbiw	r28, 0x0a	; 10
    b79c:	0f b6       	in	r0, 0x3f	; 63
    b79e:	f8 94       	cli
    b7a0:	de bf       	out	0x3e, r29	; 62
    b7a2:	0f be       	out	0x3f, r0	; 63
    b7a4:	cd bf       	out	0x3d, r28	; 61
    b7a6:	9c 83       	std	Y+4, r25	; 0x04
    b7a8:	8b 83       	std	Y+3, r24	; 0x03
    b7aa:	7e 83       	std	Y+6, r23	; 0x06
    b7ac:	6d 83       	std	Y+5, r22	; 0x05
    b7ae:	58 87       	std	Y+8, r21	; 0x08
    b7b0:	4f 83       	std	Y+7, r20	; 0x07
	UNWRAP_COLLECTION(col, set);
    b7b2:	eb 81       	ldd	r30, Y+3	; 0x03
    b7b4:	fc 81       	ldd	r31, Y+4	; 0x04
    b7b6:	84 81       	ldd	r24, Z+4	; 0x04
    b7b8:	95 81       	ldd	r25, Z+5	; 0x05
    b7ba:	9a 83       	std	Y+2, r25	; 0x02
    b7bc:	89 83       	std	Y+1, r24	; 0x01

	if(loc >= col->size)
    b7be:	e9 81       	ldd	r30, Y+1	; 0x01
    b7c0:	fa 81       	ldd	r31, Y+2	; 0x02
    b7c2:	22 81       	ldd	r18, Z+2	; 0x02
    b7c4:	33 81       	ldd	r19, Z+3	; 0x03
    b7c6:	8d 81       	ldd	r24, Y+5	; 0x05
    b7c8:	9e 81       	ldd	r25, Y+6	; 0x06
    b7ca:	82 17       	cp	r24, r18
    b7cc:	93 07       	cpc	r25, r19
    b7ce:	1c f0       	brlt	.+6      	; 0xb7d6 <vdmSetElementAtGC+0x44>
	{
		return NULL;
    b7d0:	1a 86       	std	Y+10, r1	; 0x0a
    b7d2:	19 86       	std	Y+9, r1	; 0x09
    b7d4:	14 c0       	rjmp	.+40     	; 0xb7fe <vdmSetElementAtGC+0x6c>
	}

	return vdmCloneGC(col->value[loc], from);
    b7d6:	e9 81       	ldd	r30, Y+1	; 0x01
    b7d8:	fa 81       	ldd	r31, Y+2	; 0x02
    b7da:	20 81       	ld	r18, Z
    b7dc:	31 81       	ldd	r19, Z+1	; 0x01
    b7de:	8d 81       	ldd	r24, Y+5	; 0x05
    b7e0:	9e 81       	ldd	r25, Y+6	; 0x06
    b7e2:	88 0f       	add	r24, r24
    b7e4:	99 1f       	adc	r25, r25
    b7e6:	f9 01       	movw	r30, r18
    b7e8:	e8 0f       	add	r30, r24
    b7ea:	f9 1f       	adc	r31, r25
    b7ec:	80 81       	ld	r24, Z
    b7ee:	91 81       	ldd	r25, Z+1	; 0x01
    b7f0:	2f 81       	ldd	r18, Y+7	; 0x07
    b7f2:	38 85       	ldd	r19, Y+8	; 0x08
    b7f4:	b9 01       	movw	r22, r18
    b7f6:	0e 94 26 4c 	call	0x984c	; 0x984c <vdmCloneGC>
    b7fa:	9a 87       	std	Y+10, r25	; 0x0a
    b7fc:	89 87       	std	Y+9, r24	; 0x09
    b7fe:	89 85       	ldd	r24, Y+9	; 0x09
    b800:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    b802:	2a 96       	adiw	r28, 0x0a	; 10
    b804:	0f b6       	in	r0, 0x3f	; 63
    b806:	f8 94       	cli
    b808:	de bf       	out	0x3e, r29	; 62
    b80a:	0f be       	out	0x3f, r0	; 63
    b80c:	cd bf       	out	0x3d, r28	; 61
    b80e:	cf 91       	pop	r28
    b810:	df 91       	pop	r29
    b812:	08 95       	ret

0000b814 <vdmSetMemberOf>:



TVP vdmSetMemberOf(TVP set, TVP element)
{
    b814:	0f 93       	push	r16
    b816:	1f 93       	push	r17
    b818:	df 93       	push	r29
    b81a:	cf 93       	push	r28
    b81c:	cd b7       	in	r28, 0x3d	; 61
    b81e:	de b7       	in	r29, 0x3e	; 62
    b820:	29 97       	sbiw	r28, 0x09	; 9
    b822:	0f b6       	in	r0, 0x3f	; 63
    b824:	f8 94       	cli
    b826:	de bf       	out	0x3e, r29	; 62
    b828:	0f be       	out	0x3f, r0	; 63
    b82a:	cd bf       	out	0x3d, r28	; 61
    b82c:	9f 83       	std	Y+7, r25	; 0x07
    b82e:	8e 83       	std	Y+6, r24	; 0x06
    b830:	79 87       	std	Y+9, r23	; 0x09
    b832:	68 87       	std	Y+8, r22	; 0x08
	int i;

	ASSERT_CHECK(set);
    b834:	ee 81       	ldd	r30, Y+6	; 0x06
    b836:	ff 81       	ldd	r31, Y+7	; 0x07
    b838:	80 81       	ld	r24, Z
    b83a:	91 81       	ldd	r25, Z+1	; 0x01
    b83c:	87 30       	cpi	r24, 0x07	; 7
    b83e:	91 05       	cpc	r25, r1
    b840:	11 f0       	breq	.+4      	; 0xb846 <vdmSetMemberOf+0x32>
    b842:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col,set);
    b846:	ee 81       	ldd	r30, Y+6	; 0x06
    b848:	ff 81       	ldd	r31, Y+7	; 0x07
    b84a:	84 81       	ldd	r24, Z+4	; 0x04
    b84c:	95 81       	ldd	r25, Z+5	; 0x05
    b84e:	9b 83       	std	Y+3, r25	; 0x03
    b850:	8a 83       	std	Y+2, r24	; 0x02

	bool found = false;
    b852:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < col->size; i++)
    b854:	1d 82       	std	Y+5, r1	; 0x05
    b856:	1c 82       	std	Y+4, r1	; 0x04
    b858:	23 c0       	rjmp	.+70     	; 0xb8a0 <vdmSetMemberOf+0x8c>
	{
		found|= equals(col->value[i],element);
    b85a:	89 81       	ldd	r24, Y+1	; 0x01
    b85c:	08 2f       	mov	r16, r24
    b85e:	10 e0       	ldi	r17, 0x00	; 0
    b860:	ea 81       	ldd	r30, Y+2	; 0x02
    b862:	fb 81       	ldd	r31, Y+3	; 0x03
    b864:	20 81       	ld	r18, Z
    b866:	31 81       	ldd	r19, Z+1	; 0x01
    b868:	8c 81       	ldd	r24, Y+4	; 0x04
    b86a:	9d 81       	ldd	r25, Y+5	; 0x05
    b86c:	88 0f       	add	r24, r24
    b86e:	99 1f       	adc	r25, r25
    b870:	f9 01       	movw	r30, r18
    b872:	e8 0f       	add	r30, r24
    b874:	f9 1f       	adc	r31, r25
    b876:	80 81       	ld	r24, Z
    b878:	91 81       	ldd	r25, Z+1	; 0x01
    b87a:	28 85       	ldd	r18, Y+8	; 0x08
    b87c:	39 85       	ldd	r19, Y+9	; 0x09
    b87e:	b9 01       	movw	r22, r18
    b880:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    b884:	88 2f       	mov	r24, r24
    b886:	90 e0       	ldi	r25, 0x00	; 0
    b888:	80 2b       	or	r24, r16
    b88a:	91 2b       	or	r25, r17
    b88c:	19 82       	std	Y+1, r1	; 0x01
    b88e:	00 97       	sbiw	r24, 0x00	; 0
    b890:	11 f0       	breq	.+4      	; 0xb896 <vdmSetMemberOf+0x82>
    b892:	81 e0       	ldi	r24, 0x01	; 1
    b894:	89 83       	std	Y+1, r24	; 0x01

	UNWRAP_COLLECTION(col,set);

	bool found = false;

	for (i = 0; i < col->size; i++)
    b896:	8c 81       	ldd	r24, Y+4	; 0x04
    b898:	9d 81       	ldd	r25, Y+5	; 0x05
    b89a:	01 96       	adiw	r24, 0x01	; 1
    b89c:	9d 83       	std	Y+5, r25	; 0x05
    b89e:	8c 83       	std	Y+4, r24	; 0x04
    b8a0:	ea 81       	ldd	r30, Y+2	; 0x02
    b8a2:	fb 81       	ldd	r31, Y+3	; 0x03
    b8a4:	22 81       	ldd	r18, Z+2	; 0x02
    b8a6:	33 81       	ldd	r19, Z+3	; 0x03
    b8a8:	8c 81       	ldd	r24, Y+4	; 0x04
    b8aa:	9d 81       	ldd	r25, Y+5	; 0x05
    b8ac:	82 17       	cp	r24, r18
    b8ae:	93 07       	cpc	r25, r19
    b8b0:	a4 f2       	brlt	.-88     	; 0xb85a <vdmSetMemberOf+0x46>
	{
		found|= equals(col->value[i],element);
	}

	return newBool(found);
    b8b2:	89 81       	ldd	r24, Y+1	; 0x01
    b8b4:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    b8b8:	29 96       	adiw	r28, 0x09	; 9
    b8ba:	0f b6       	in	r0, 0x3f	; 63
    b8bc:	f8 94       	cli
    b8be:	de bf       	out	0x3e, r29	; 62
    b8c0:	0f be       	out	0x3f, r0	; 63
    b8c2:	cd bf       	out	0x3d, r28	; 61
    b8c4:	cf 91       	pop	r28
    b8c6:	df 91       	pop	r29
    b8c8:	1f 91       	pop	r17
    b8ca:	0f 91       	pop	r16
    b8cc:	08 95       	ret

0000b8ce <vdmSetMemberOfGC>:


TVP vdmSetMemberOfGC(TVP set, TVP element, TVP *from)
{
    b8ce:	0f 93       	push	r16
    b8d0:	1f 93       	push	r17
    b8d2:	df 93       	push	r29
    b8d4:	cf 93       	push	r28
    b8d6:	cd b7       	in	r28, 0x3d	; 61
    b8d8:	de b7       	in	r29, 0x3e	; 62
    b8da:	2b 97       	sbiw	r28, 0x0b	; 11
    b8dc:	0f b6       	in	r0, 0x3f	; 63
    b8de:	f8 94       	cli
    b8e0:	de bf       	out	0x3e, r29	; 62
    b8e2:	0f be       	out	0x3f, r0	; 63
    b8e4:	cd bf       	out	0x3d, r28	; 61
    b8e6:	9f 83       	std	Y+7, r25	; 0x07
    b8e8:	8e 83       	std	Y+6, r24	; 0x06
    b8ea:	79 87       	std	Y+9, r23	; 0x09
    b8ec:	68 87       	std	Y+8, r22	; 0x08
    b8ee:	5b 87       	std	Y+11, r21	; 0x0b
    b8f0:	4a 87       	std	Y+10, r20	; 0x0a
	int i;

	ASSERT_CHECK(set);
    b8f2:	ee 81       	ldd	r30, Y+6	; 0x06
    b8f4:	ff 81       	ldd	r31, Y+7	; 0x07
    b8f6:	80 81       	ld	r24, Z
    b8f8:	91 81       	ldd	r25, Z+1	; 0x01
    b8fa:	87 30       	cpi	r24, 0x07	; 7
    b8fc:	91 05       	cpc	r25, r1
    b8fe:	11 f0       	breq	.+4      	; 0xb904 <vdmSetMemberOfGC+0x36>
    b900:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col,set);
    b904:	ee 81       	ldd	r30, Y+6	; 0x06
    b906:	ff 81       	ldd	r31, Y+7	; 0x07
    b908:	84 81       	ldd	r24, Z+4	; 0x04
    b90a:	95 81       	ldd	r25, Z+5	; 0x05
    b90c:	9b 83       	std	Y+3, r25	; 0x03
    b90e:	8a 83       	std	Y+2, r24	; 0x02

	bool found = false;
    b910:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < col->size; i++)
    b912:	1d 82       	std	Y+5, r1	; 0x05
    b914:	1c 82       	std	Y+4, r1	; 0x04
    b916:	23 c0       	rjmp	.+70     	; 0xb95e <vdmSetMemberOfGC+0x90>
	{
		found|= equals(col->value[i],element);
    b918:	89 81       	ldd	r24, Y+1	; 0x01
    b91a:	08 2f       	mov	r16, r24
    b91c:	10 e0       	ldi	r17, 0x00	; 0
    b91e:	ea 81       	ldd	r30, Y+2	; 0x02
    b920:	fb 81       	ldd	r31, Y+3	; 0x03
    b922:	20 81       	ld	r18, Z
    b924:	31 81       	ldd	r19, Z+1	; 0x01
    b926:	8c 81       	ldd	r24, Y+4	; 0x04
    b928:	9d 81       	ldd	r25, Y+5	; 0x05
    b92a:	88 0f       	add	r24, r24
    b92c:	99 1f       	adc	r25, r25
    b92e:	f9 01       	movw	r30, r18
    b930:	e8 0f       	add	r30, r24
    b932:	f9 1f       	adc	r31, r25
    b934:	80 81       	ld	r24, Z
    b936:	91 81       	ldd	r25, Z+1	; 0x01
    b938:	28 85       	ldd	r18, Y+8	; 0x08
    b93a:	39 85       	ldd	r19, Y+9	; 0x09
    b93c:	b9 01       	movw	r22, r18
    b93e:	0e 94 41 2a 	call	0x5482	; 0x5482 <equals>
    b942:	88 2f       	mov	r24, r24
    b944:	90 e0       	ldi	r25, 0x00	; 0
    b946:	80 2b       	or	r24, r16
    b948:	91 2b       	or	r25, r17
    b94a:	19 82       	std	Y+1, r1	; 0x01
    b94c:	00 97       	sbiw	r24, 0x00	; 0
    b94e:	11 f0       	breq	.+4      	; 0xb954 <vdmSetMemberOfGC+0x86>
    b950:	81 e0       	ldi	r24, 0x01	; 1
    b952:	89 83       	std	Y+1, r24	; 0x01

	UNWRAP_COLLECTION(col,set);

	bool found = false;

	for (i = 0; i < col->size; i++)
    b954:	8c 81       	ldd	r24, Y+4	; 0x04
    b956:	9d 81       	ldd	r25, Y+5	; 0x05
    b958:	01 96       	adiw	r24, 0x01	; 1
    b95a:	9d 83       	std	Y+5, r25	; 0x05
    b95c:	8c 83       	std	Y+4, r24	; 0x04
    b95e:	ea 81       	ldd	r30, Y+2	; 0x02
    b960:	fb 81       	ldd	r31, Y+3	; 0x03
    b962:	22 81       	ldd	r18, Z+2	; 0x02
    b964:	33 81       	ldd	r19, Z+3	; 0x03
    b966:	8c 81       	ldd	r24, Y+4	; 0x04
    b968:	9d 81       	ldd	r25, Y+5	; 0x05
    b96a:	82 17       	cp	r24, r18
    b96c:	93 07       	cpc	r25, r19
    b96e:	a4 f2       	brlt	.-88     	; 0xb918 <vdmSetMemberOfGC+0x4a>
	{
		found|= equals(col->value[i],element);
	}

	return newBoolGC(found, from);
    b970:	2a 85       	ldd	r18, Y+10	; 0x0a
    b972:	3b 85       	ldd	r19, Y+11	; 0x0b
    b974:	89 81       	ldd	r24, Y+1	; 0x01
    b976:	b9 01       	movw	r22, r18
    b978:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
}
    b97c:	2b 96       	adiw	r28, 0x0b	; 11
    b97e:	0f b6       	in	r0, 0x3f	; 63
    b980:	f8 94       	cli
    b982:	de bf       	out	0x3e, r29	; 62
    b984:	0f be       	out	0x3f, r0	; 63
    b986:	cd bf       	out	0x3d, r28	; 61
    b988:	cf 91       	pop	r28
    b98a:	df 91       	pop	r29
    b98c:	1f 91       	pop	r17
    b98e:	0f 91       	pop	r16
    b990:	08 95       	ret

0000b992 <vdmSetNotMemberOf>:



TVP vdmSetNotMemberOf(TVP set, TVP element)
{
    b992:	df 93       	push	r29
    b994:	cf 93       	push	r28
    b996:	cd b7       	in	r28, 0x3d	; 61
    b998:	de b7       	in	r29, 0x3e	; 62
    b99a:	27 97       	sbiw	r28, 0x07	; 7
    b99c:	0f b6       	in	r0, 0x3f	; 63
    b99e:	f8 94       	cli
    b9a0:	de bf       	out	0x3e, r29	; 62
    b9a2:	0f be       	out	0x3f, r0	; 63
    b9a4:	cd bf       	out	0x3d, r28	; 61
    b9a6:	9d 83       	std	Y+5, r25	; 0x05
    b9a8:	8c 83       	std	Y+4, r24	; 0x04
    b9aa:	7f 83       	std	Y+7, r23	; 0x07
    b9ac:	6e 83       	std	Y+6, r22	; 0x06
	TVP res;
	bool resval;

	ASSERT_CHECK(set);
    b9ae:	ec 81       	ldd	r30, Y+4	; 0x04
    b9b0:	fd 81       	ldd	r31, Y+5	; 0x05
    b9b2:	80 81       	ld	r24, Z
    b9b4:	91 81       	ldd	r25, Z+1	; 0x01
    b9b6:	87 30       	cpi	r24, 0x07	; 7
    b9b8:	91 05       	cpc	r25, r1
    b9ba:	11 f0       	breq	.+4      	; 0xb9c0 <vdmSetNotMemberOf+0x2e>
    b9bc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	res = vdmSetMemberOf(set, element);
    b9c0:	8c 81       	ldd	r24, Y+4	; 0x04
    b9c2:	9d 81       	ldd	r25, Y+5	; 0x05
    b9c4:	2e 81       	ldd	r18, Y+6	; 0x06
    b9c6:	3f 81       	ldd	r19, Y+7	; 0x07
    b9c8:	b9 01       	movw	r22, r18
    b9ca:	0e 94 0a 5c 	call	0xb814	; 0xb814 <vdmSetMemberOf>
    b9ce:	9b 83       	std	Y+3, r25	; 0x03
    b9d0:	8a 83       	std	Y+2, r24	; 0x02
	resval = res->value.boolVal;
    b9d2:	ea 81       	ldd	r30, Y+2	; 0x02
    b9d4:	fb 81       	ldd	r31, Y+3	; 0x03
    b9d6:	84 81       	ldd	r24, Z+4	; 0x04
    b9d8:	89 83       	std	Y+1, r24	; 0x01

	vdmFree(res);
    b9da:	8a 81       	ldd	r24, Y+2	; 0x02
    b9dc:	9b 81       	ldd	r25, Y+3	; 0x03
    b9de:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

	return newBool(!resval);
    b9e2:	99 81       	ldd	r25, Y+1	; 0x01
    b9e4:	81 e0       	ldi	r24, 0x01	; 1
    b9e6:	89 27       	eor	r24, r25
    b9e8:	88 2f       	mov	r24, r24
    b9ea:	90 e0       	ldi	r25, 0x00	; 0
    b9ec:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    b9f0:	27 96       	adiw	r28, 0x07	; 7
    b9f2:	0f b6       	in	r0, 0x3f	; 63
    b9f4:	f8 94       	cli
    b9f6:	de bf       	out	0x3e, r29	; 62
    b9f8:	0f be       	out	0x3f, r0	; 63
    b9fa:	cd bf       	out	0x3d, r28	; 61
    b9fc:	cf 91       	pop	r28
    b9fe:	df 91       	pop	r29
    ba00:	08 95       	ret

0000ba02 <vdmSetNotMemberOfGC>:

TVP vdmSetNotMemberOfGC(TVP set, TVP element, TVP *from)
{
    ba02:	df 93       	push	r29
    ba04:	cf 93       	push	r28
    ba06:	cd b7       	in	r28, 0x3d	; 61
    ba08:	de b7       	in	r29, 0x3e	; 62
    ba0a:	29 97       	sbiw	r28, 0x09	; 9
    ba0c:	0f b6       	in	r0, 0x3f	; 63
    ba0e:	f8 94       	cli
    ba10:	de bf       	out	0x3e, r29	; 62
    ba12:	0f be       	out	0x3f, r0	; 63
    ba14:	cd bf       	out	0x3d, r28	; 61
    ba16:	9d 83       	std	Y+5, r25	; 0x05
    ba18:	8c 83       	std	Y+4, r24	; 0x04
    ba1a:	7f 83       	std	Y+7, r23	; 0x07
    ba1c:	6e 83       	std	Y+6, r22	; 0x06
    ba1e:	59 87       	std	Y+9, r21	; 0x09
    ba20:	48 87       	std	Y+8, r20	; 0x08
	TVP res;
	bool resval;

	ASSERT_CHECK(set);
    ba22:	ec 81       	ldd	r30, Y+4	; 0x04
    ba24:	fd 81       	ldd	r31, Y+5	; 0x05
    ba26:	80 81       	ld	r24, Z
    ba28:	91 81       	ldd	r25, Z+1	; 0x01
    ba2a:	87 30       	cpi	r24, 0x07	; 7
    ba2c:	91 05       	cpc	r25, r1
    ba2e:	11 f0       	breq	.+4      	; 0xba34 <vdmSetNotMemberOfGC+0x32>
    ba30:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	res = vdmSetMemberOf(set, element);
    ba34:	8c 81       	ldd	r24, Y+4	; 0x04
    ba36:	9d 81       	ldd	r25, Y+5	; 0x05
    ba38:	2e 81       	ldd	r18, Y+6	; 0x06
    ba3a:	3f 81       	ldd	r19, Y+7	; 0x07
    ba3c:	b9 01       	movw	r22, r18
    ba3e:	0e 94 0a 5c 	call	0xb814	; 0xb814 <vdmSetMemberOf>
    ba42:	9b 83       	std	Y+3, r25	; 0x03
    ba44:	8a 83       	std	Y+2, r24	; 0x02
	resval = res->value.boolVal;
    ba46:	ea 81       	ldd	r30, Y+2	; 0x02
    ba48:	fb 81       	ldd	r31, Y+3	; 0x03
    ba4a:	84 81       	ldd	r24, Z+4	; 0x04
    ba4c:	89 83       	std	Y+1, r24	; 0x01

	vdmFree(res);
    ba4e:	8a 81       	ldd	r24, Y+2	; 0x02
    ba50:	9b 81       	ldd	r25, Y+3	; 0x03
    ba52:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

	return newBoolGC(!resval, from);
    ba56:	99 81       	ldd	r25, Y+1	; 0x01
    ba58:	81 e0       	ldi	r24, 0x01	; 1
    ba5a:	89 27       	eor	r24, r25
    ba5c:	88 2f       	mov	r24, r24
    ba5e:	90 e0       	ldi	r25, 0x00	; 0
    ba60:	28 85       	ldd	r18, Y+8	; 0x08
    ba62:	39 85       	ldd	r19, Y+9	; 0x09
    ba64:	b9 01       	movw	r22, r18
    ba66:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
}
    ba6a:	29 96       	adiw	r28, 0x09	; 9
    ba6c:	0f b6       	in	r0, 0x3f	; 63
    ba6e:	f8 94       	cli
    ba70:	de bf       	out	0x3e, r29	; 62
    ba72:	0f be       	out	0x3f, r0	; 63
    ba74:	cd bf       	out	0x3d, r28	; 61
    ba76:	cf 91       	pop	r28
    ba78:	df 91       	pop	r29
    ba7a:	08 95       	ret

0000ba7c <vdmSetUnion>:



TVP vdmSetUnion(TVP set1, TVP set2)
{
    ba7c:	0f 93       	push	r16
    ba7e:	1f 93       	push	r17
    ba80:	df 93       	push	r29
    ba82:	cf 93       	push	r28
    ba84:	cd b7       	in	r28, 0x3d	; 61
    ba86:	de b7       	in	r29, 0x3e	; 62
    ba88:	2e 97       	sbiw	r28, 0x0e	; 14
    ba8a:	0f b6       	in	r0, 0x3f	; 63
    ba8c:	f8 94       	cli
    ba8e:	de bf       	out	0x3e, r29	; 62
    ba90:	0f be       	out	0x3f, r0	; 63
    ba92:	cd bf       	out	0x3d, r28	; 61
    ba94:	9c 87       	std	Y+12, r25	; 0x0c
    ba96:	8b 87       	std	Y+11, r24	; 0x0b
    ba98:	7e 87       	std	Y+14, r23	; 0x0e
    ba9a:	6d 87       	std	Y+13, r22	; 0x0d
	TVP *newvalues;
	TVP resset;
	int i;

	ASSERT_CHECK(set1);
    ba9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ba9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    baa0:	80 81       	ld	r24, Z
    baa2:	91 81       	ldd	r25, Z+1	; 0x01
    baa4:	87 30       	cpi	r24, 0x07	; 7
    baa6:	91 05       	cpc	r25, r1
    baa8:	11 f0       	breq	.+4      	; 0xbaae <vdmSetUnion+0x32>
    baaa:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    baae:	ed 85       	ldd	r30, Y+13	; 0x0d
    bab0:	fe 85       	ldd	r31, Y+14	; 0x0e
    bab2:	80 81       	ld	r24, Z
    bab4:	91 81       	ldd	r25, Z+1	; 0x01
    bab6:	87 30       	cpi	r24, 0x07	; 7
    bab8:	91 05       	cpc	r25, r1
    baba:	11 f0       	breq	.+4      	; 0xbac0 <vdmSetUnion+0x44>
    babc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    bac0:	eb 85       	ldd	r30, Y+11	; 0x0b
    bac2:	fc 85       	ldd	r31, Y+12	; 0x0c
    bac4:	84 81       	ldd	r24, Z+4	; 0x04
    bac6:	95 81       	ldd	r25, Z+5	; 0x05
    bac8:	9c 83       	std	Y+4, r25	; 0x04
    baca:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    bacc:	ed 85       	ldd	r30, Y+13	; 0x0d
    bace:	fe 85       	ldd	r31, Y+14	; 0x0e
    bad0:	84 81       	ldd	r24, Z+4	; 0x04
    bad2:	95 81       	ldd	r25, Z+5	; 0x05
    bad4:	9a 83       	std	Y+2, r25	; 0x02
    bad6:	89 83       	std	Y+1, r24	; 0x01
	/* int a = col1->size;  */

	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
    bad8:	eb 81       	ldd	r30, Y+3	; 0x03
    bada:	fc 81       	ldd	r31, Y+4	; 0x04
    badc:	22 81       	ldd	r18, Z+2	; 0x02
    bade:	33 81       	ldd	r19, Z+3	; 0x03
    bae0:	e9 81       	ldd	r30, Y+1	; 0x01
    bae2:	fa 81       	ldd	r31, Y+2	; 0x02
    bae4:	82 81       	ldd	r24, Z+2	; 0x02
    bae6:	93 81       	ldd	r25, Z+3	; 0x03
    bae8:	82 0f       	add	r24, r18
    baea:	93 1f       	adc	r25, r19
    baec:	88 0f       	add	r24, r24
    baee:	99 1f       	adc	r25, r25
    baf0:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    baf4:	9a 87       	std	Y+10, r25	; 0x0a
    baf6:	89 87       	std	Y+9, r24	; 0x09
	assert(newvalues != NULL);
    baf8:	89 85       	ldd	r24, Y+9	; 0x09
    bafa:	9a 85       	ldd	r25, Y+10	; 0x0a
    bafc:	00 97       	sbiw	r24, 0x00	; 0
    bafe:	11 f4       	brne	.+4      	; 0xbb04 <vdmSetUnion+0x88>
    bb00:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	for(i = 0; i < col1->size; i++)
    bb04:	1e 82       	std	Y+6, r1	; 0x06
    bb06:	1d 82       	std	Y+5, r1	; 0x05
    bb08:	21 c0       	rjmp	.+66     	; 0xbb4c <vdmSetUnion+0xd0>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
    bb0a:	8d 81       	ldd	r24, Y+5	; 0x05
    bb0c:	9e 81       	ldd	r25, Y+6	; 0x06
    bb0e:	9c 01       	movw	r18, r24
    bb10:	22 0f       	add	r18, r18
    bb12:	33 1f       	adc	r19, r19
    bb14:	89 85       	ldd	r24, Y+9	; 0x09
    bb16:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb18:	8c 01       	movw	r16, r24
    bb1a:	02 0f       	add	r16, r18
    bb1c:	13 1f       	adc	r17, r19
    bb1e:	eb 81       	ldd	r30, Y+3	; 0x03
    bb20:	fc 81       	ldd	r31, Y+4	; 0x04
    bb22:	20 81       	ld	r18, Z
    bb24:	31 81       	ldd	r19, Z+1	; 0x01
    bb26:	8d 81       	ldd	r24, Y+5	; 0x05
    bb28:	9e 81       	ldd	r25, Y+6	; 0x06
    bb2a:	88 0f       	add	r24, r24
    bb2c:	99 1f       	adc	r25, r25
    bb2e:	f9 01       	movw	r30, r18
    bb30:	e8 0f       	add	r30, r24
    bb32:	f9 1f       	adc	r31, r25
    bb34:	80 81       	ld	r24, Z
    bb36:	91 81       	ldd	r25, Z+1	; 0x01
    bb38:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    bb3c:	f8 01       	movw	r30, r16
    bb3e:	91 83       	std	Z+1, r25	; 0x01
    bb40:	80 83       	st	Z, r24
	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
	assert(newvalues != NULL);
	for(i = 0; i < col1->size; i++)
    bb42:	8d 81       	ldd	r24, Y+5	; 0x05
    bb44:	9e 81       	ldd	r25, Y+6	; 0x06
    bb46:	01 96       	adiw	r24, 0x01	; 1
    bb48:	9e 83       	std	Y+6, r25	; 0x06
    bb4a:	8d 83       	std	Y+5, r24	; 0x05
    bb4c:	eb 81       	ldd	r30, Y+3	; 0x03
    bb4e:	fc 81       	ldd	r31, Y+4	; 0x04
    bb50:	22 81       	ldd	r18, Z+2	; 0x02
    bb52:	33 81       	ldd	r19, Z+3	; 0x03
    bb54:	8d 81       	ldd	r24, Y+5	; 0x05
    bb56:	9e 81       	ldd	r25, Y+6	; 0x06
    bb58:	82 17       	cp	r24, r18
    bb5a:	93 07       	cpc	r25, r19
    bb5c:	b4 f2       	brlt	.-84     	; 0xbb0a <vdmSetUnion+0x8e>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bb5e:	eb 81       	ldd	r30, Y+3	; 0x03
    bb60:	fc 81       	ldd	r31, Y+4	; 0x04
    bb62:	82 81       	ldd	r24, Z+2	; 0x02
    bb64:	93 81       	ldd	r25, Z+3	; 0x03
    bb66:	9e 83       	std	Y+6, r25	; 0x06
    bb68:	8d 83       	std	Y+5, r24	; 0x05
    bb6a:	27 c0       	rjmp	.+78     	; 0xbbba <vdmSetUnion+0x13e>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
    bb6c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb6e:	9e 81       	ldd	r25, Y+6	; 0x06
    bb70:	9c 01       	movw	r18, r24
    bb72:	22 0f       	add	r18, r18
    bb74:	33 1f       	adc	r19, r19
    bb76:	89 85       	ldd	r24, Y+9	; 0x09
    bb78:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb7a:	8c 01       	movw	r16, r24
    bb7c:	02 0f       	add	r16, r18
    bb7e:	13 1f       	adc	r17, r19
    bb80:	e9 81       	ldd	r30, Y+1	; 0x01
    bb82:	fa 81       	ldd	r31, Y+2	; 0x02
    bb84:	40 81       	ld	r20, Z
    bb86:	51 81       	ldd	r21, Z+1	; 0x01
    bb88:	eb 81       	ldd	r30, Y+3	; 0x03
    bb8a:	fc 81       	ldd	r31, Y+4	; 0x04
    bb8c:	22 81       	ldd	r18, Z+2	; 0x02
    bb8e:	33 81       	ldd	r19, Z+3	; 0x03
    bb90:	8d 81       	ldd	r24, Y+5	; 0x05
    bb92:	9e 81       	ldd	r25, Y+6	; 0x06
    bb94:	82 1b       	sub	r24, r18
    bb96:	93 0b       	sbc	r25, r19
    bb98:	88 0f       	add	r24, r24
    bb9a:	99 1f       	adc	r25, r25
    bb9c:	fa 01       	movw	r30, r20
    bb9e:	e8 0f       	add	r30, r24
    bba0:	f9 1f       	adc	r31, r25
    bba2:	80 81       	ld	r24, Z
    bba4:	91 81       	ldd	r25, Z+1	; 0x01
    bba6:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    bbaa:	f8 01       	movw	r30, r16
    bbac:	91 83       	std	Z+1, r25	; 0x01
    bbae:	80 83       	st	Z, r24
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bbb0:	8d 81       	ldd	r24, Y+5	; 0x05
    bbb2:	9e 81       	ldd	r25, Y+6	; 0x06
    bbb4:	01 96       	adiw	r24, 0x01	; 1
    bbb6:	9e 83       	std	Y+6, r25	; 0x06
    bbb8:	8d 83       	std	Y+5, r24	; 0x05
    bbba:	eb 81       	ldd	r30, Y+3	; 0x03
    bbbc:	fc 81       	ldd	r31, Y+4	; 0x04
    bbbe:	22 81       	ldd	r18, Z+2	; 0x02
    bbc0:	33 81       	ldd	r19, Z+3	; 0x03
    bbc2:	e9 81       	ldd	r30, Y+1	; 0x01
    bbc4:	fa 81       	ldd	r31, Y+2	; 0x02
    bbc6:	82 81       	ldd	r24, Z+2	; 0x02
    bbc8:	93 81       	ldd	r25, Z+3	; 0x03
    bbca:	28 0f       	add	r18, r24
    bbcc:	39 1f       	adc	r19, r25
    bbce:	8d 81       	ldd	r24, Y+5	; 0x05
    bbd0:	9e 81       	ldd	r25, Y+6	; 0x06
    bbd2:	82 17       	cp	r24, r18
    bbd4:	93 07       	cpc	r25, r19
    bbd6:	54 f2       	brlt	.-108    	; 0xbb6c <vdmSetUnion+0xf0>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValues(col1->size + col2->size, newvalues);
    bbd8:	eb 81       	ldd	r30, Y+3	; 0x03
    bbda:	fc 81       	ldd	r31, Y+4	; 0x04
    bbdc:	22 81       	ldd	r18, Z+2	; 0x02
    bbde:	33 81       	ldd	r19, Z+3	; 0x03
    bbe0:	e9 81       	ldd	r30, Y+1	; 0x01
    bbe2:	fa 81       	ldd	r31, Y+2	; 0x02
    bbe4:	82 81       	ldd	r24, Z+2	; 0x02
    bbe6:	93 81       	ldd	r25, Z+3	; 0x03
    bbe8:	82 0f       	add	r24, r18
    bbea:	93 1f       	adc	r25, r19
    bbec:	29 85       	ldd	r18, Y+9	; 0x09
    bbee:	3a 85       	ldd	r19, Y+10	; 0x0a
    bbf0:	b9 01       	movw	r22, r18
    bbf2:	0e 94 c2 56 	call	0xad84	; 0xad84 <newSetWithValues>
    bbf6:	98 87       	std	Y+8, r25	; 0x08
    bbf8:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col1->size + col2->size; i++)
    bbfa:	1e 82       	std	Y+6, r1	; 0x06
    bbfc:	1d 82       	std	Y+5, r1	; 0x05
    bbfe:	13 c0       	rjmp	.+38     	; 0xbc26 <vdmSetUnion+0x1aa>
		vdmFree(newvalues[i]);
    bc00:	8d 81       	ldd	r24, Y+5	; 0x05
    bc02:	9e 81       	ldd	r25, Y+6	; 0x06
    bc04:	9c 01       	movw	r18, r24
    bc06:	22 0f       	add	r18, r18
    bc08:	33 1f       	adc	r19, r19
    bc0a:	89 85       	ldd	r24, Y+9	; 0x09
    bc0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bc0e:	fc 01       	movw	r30, r24
    bc10:	e2 0f       	add	r30, r18
    bc12:	f3 1f       	adc	r31, r19
    bc14:	80 81       	ld	r24, Z
    bc16:	91 81       	ldd	r25, Z+1	; 0x01
    bc18:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValues(col1->size + col2->size, newvalues);

	for(i = 0; i < col1->size + col2->size; i++)
    bc1c:	8d 81       	ldd	r24, Y+5	; 0x05
    bc1e:	9e 81       	ldd	r25, Y+6	; 0x06
    bc20:	01 96       	adiw	r24, 0x01	; 1
    bc22:	9e 83       	std	Y+6, r25	; 0x06
    bc24:	8d 83       	std	Y+5, r24	; 0x05
    bc26:	eb 81       	ldd	r30, Y+3	; 0x03
    bc28:	fc 81       	ldd	r31, Y+4	; 0x04
    bc2a:	22 81       	ldd	r18, Z+2	; 0x02
    bc2c:	33 81       	ldd	r19, Z+3	; 0x03
    bc2e:	e9 81       	ldd	r30, Y+1	; 0x01
    bc30:	fa 81       	ldd	r31, Y+2	; 0x02
    bc32:	82 81       	ldd	r24, Z+2	; 0x02
    bc34:	93 81       	ldd	r25, Z+3	; 0x03
    bc36:	28 0f       	add	r18, r24
    bc38:	39 1f       	adc	r19, r25
    bc3a:	8d 81       	ldd	r24, Y+5	; 0x05
    bc3c:	9e 81       	ldd	r25, Y+6	; 0x06
    bc3e:	82 17       	cp	r24, r18
    bc40:	93 07       	cpc	r25, r19
    bc42:	f4 f2       	brlt	.-68     	; 0xbc00 <vdmSetUnion+0x184>
		vdmFree(newvalues[i]);
	free(newvalues);
    bc44:	89 85       	ldd	r24, Y+9	; 0x09
    bc46:	9a 85       	ldd	r25, Y+10	; 0x0a
    bc48:	0e 94 67 6d 	call	0xdace	; 0xdace <free>

	return resset;
    bc4c:	8f 81       	ldd	r24, Y+7	; 0x07
    bc4e:	98 85       	ldd	r25, Y+8	; 0x08
}
    bc50:	2e 96       	adiw	r28, 0x0e	; 14
    bc52:	0f b6       	in	r0, 0x3f	; 63
    bc54:	f8 94       	cli
    bc56:	de bf       	out	0x3e, r29	; 62
    bc58:	0f be       	out	0x3f, r0	; 63
    bc5a:	cd bf       	out	0x3d, r28	; 61
    bc5c:	cf 91       	pop	r28
    bc5e:	df 91       	pop	r29
    bc60:	1f 91       	pop	r17
    bc62:	0f 91       	pop	r16
    bc64:	08 95       	ret

0000bc66 <vdmSetUnionGC>:

TVP vdmSetUnionGC(TVP set1, TVP set2, TVP *from)
{
    bc66:	0f 93       	push	r16
    bc68:	1f 93       	push	r17
    bc6a:	df 93       	push	r29
    bc6c:	cf 93       	push	r28
    bc6e:	cd b7       	in	r28, 0x3d	; 61
    bc70:	de b7       	in	r29, 0x3e	; 62
    bc72:	60 97       	sbiw	r28, 0x10	; 16
    bc74:	0f b6       	in	r0, 0x3f	; 63
    bc76:	f8 94       	cli
    bc78:	de bf       	out	0x3e, r29	; 62
    bc7a:	0f be       	out	0x3f, r0	; 63
    bc7c:	cd bf       	out	0x3d, r28	; 61
    bc7e:	9c 87       	std	Y+12, r25	; 0x0c
    bc80:	8b 87       	std	Y+11, r24	; 0x0b
    bc82:	7e 87       	std	Y+14, r23	; 0x0e
    bc84:	6d 87       	std	Y+13, r22	; 0x0d
    bc86:	58 8b       	std	Y+16, r21	; 0x10
    bc88:	4f 87       	std	Y+15, r20	; 0x0f
	int i;

	TVP *newvalues;
	TVP resset;

	ASSERT_CHECK(set1);
    bc8a:	eb 85       	ldd	r30, Y+11	; 0x0b
    bc8c:	fc 85       	ldd	r31, Y+12	; 0x0c
    bc8e:	80 81       	ld	r24, Z
    bc90:	91 81       	ldd	r25, Z+1	; 0x01
    bc92:	87 30       	cpi	r24, 0x07	; 7
    bc94:	91 05       	cpc	r25, r1
    bc96:	11 f0       	breq	.+4      	; 0xbc9c <vdmSetUnionGC+0x36>
    bc98:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    bc9c:	ed 85       	ldd	r30, Y+13	; 0x0d
    bc9e:	fe 85       	ldd	r31, Y+14	; 0x0e
    bca0:	80 81       	ld	r24, Z
    bca2:	91 81       	ldd	r25, Z+1	; 0x01
    bca4:	87 30       	cpi	r24, 0x07	; 7
    bca6:	91 05       	cpc	r25, r1
    bca8:	11 f0       	breq	.+4      	; 0xbcae <vdmSetUnionGC+0x48>
    bcaa:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    bcae:	eb 85       	ldd	r30, Y+11	; 0x0b
    bcb0:	fc 85       	ldd	r31, Y+12	; 0x0c
    bcb2:	84 81       	ldd	r24, Z+4	; 0x04
    bcb4:	95 81       	ldd	r25, Z+5	; 0x05
    bcb6:	9c 83       	std	Y+4, r25	; 0x04
    bcb8:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    bcba:	ed 85       	ldd	r30, Y+13	; 0x0d
    bcbc:	fe 85       	ldd	r31, Y+14	; 0x0e
    bcbe:	84 81       	ldd	r24, Z+4	; 0x04
    bcc0:	95 81       	ldd	r25, Z+5	; 0x05
    bcc2:	9a 83       	std	Y+2, r25	; 0x02
    bcc4:	89 83       	std	Y+1, r24	; 0x01
	/* int a = col1->size;  */

	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
    bcc6:	eb 81       	ldd	r30, Y+3	; 0x03
    bcc8:	fc 81       	ldd	r31, Y+4	; 0x04
    bcca:	22 81       	ldd	r18, Z+2	; 0x02
    bccc:	33 81       	ldd	r19, Z+3	; 0x03
    bcce:	e9 81       	ldd	r30, Y+1	; 0x01
    bcd0:	fa 81       	ldd	r31, Y+2	; 0x02
    bcd2:	82 81       	ldd	r24, Z+2	; 0x02
    bcd4:	93 81       	ldd	r25, Z+3	; 0x03
    bcd6:	82 0f       	add	r24, r18
    bcd8:	93 1f       	adc	r25, r19
    bcda:	88 0f       	add	r24, r24
    bcdc:	99 1f       	adc	r25, r25
    bcde:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    bce2:	98 87       	std	Y+8, r25	; 0x08
    bce4:	8f 83       	std	Y+7, r24	; 0x07
	assert(newvalues != NULL);
    bce6:	8f 81       	ldd	r24, Y+7	; 0x07
    bce8:	98 85       	ldd	r25, Y+8	; 0x08
    bcea:	00 97       	sbiw	r24, 0x00	; 0
    bcec:	11 f4       	brne	.+4      	; 0xbcf2 <vdmSetUnionGC+0x8c>
    bcee:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	for(i = 0; i < col1->size; i++)
    bcf2:	1a 86       	std	Y+10, r1	; 0x0a
    bcf4:	19 86       	std	Y+9, r1	; 0x09
    bcf6:	21 c0       	rjmp	.+66     	; 0xbd3a <vdmSetUnionGC+0xd4>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
    bcf8:	89 85       	ldd	r24, Y+9	; 0x09
    bcfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    bcfc:	9c 01       	movw	r18, r24
    bcfe:	22 0f       	add	r18, r18
    bd00:	33 1f       	adc	r19, r19
    bd02:	8f 81       	ldd	r24, Y+7	; 0x07
    bd04:	98 85       	ldd	r25, Y+8	; 0x08
    bd06:	8c 01       	movw	r16, r24
    bd08:	02 0f       	add	r16, r18
    bd0a:	13 1f       	adc	r17, r19
    bd0c:	eb 81       	ldd	r30, Y+3	; 0x03
    bd0e:	fc 81       	ldd	r31, Y+4	; 0x04
    bd10:	20 81       	ld	r18, Z
    bd12:	31 81       	ldd	r19, Z+1	; 0x01
    bd14:	89 85       	ldd	r24, Y+9	; 0x09
    bd16:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd18:	88 0f       	add	r24, r24
    bd1a:	99 1f       	adc	r25, r25
    bd1c:	f9 01       	movw	r30, r18
    bd1e:	e8 0f       	add	r30, r24
    bd20:	f9 1f       	adc	r31, r25
    bd22:	80 81       	ld	r24, Z
    bd24:	91 81       	ldd	r25, Z+1	; 0x01
    bd26:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    bd2a:	f8 01       	movw	r30, r16
    bd2c:	91 83       	std	Z+1, r25	; 0x01
    bd2e:	80 83       	st	Z, r24
	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
	assert(newvalues != NULL);
	for(i = 0; i < col1->size; i++)
    bd30:	89 85       	ldd	r24, Y+9	; 0x09
    bd32:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd34:	01 96       	adiw	r24, 0x01	; 1
    bd36:	9a 87       	std	Y+10, r25	; 0x0a
    bd38:	89 87       	std	Y+9, r24	; 0x09
    bd3a:	eb 81       	ldd	r30, Y+3	; 0x03
    bd3c:	fc 81       	ldd	r31, Y+4	; 0x04
    bd3e:	22 81       	ldd	r18, Z+2	; 0x02
    bd40:	33 81       	ldd	r19, Z+3	; 0x03
    bd42:	89 85       	ldd	r24, Y+9	; 0x09
    bd44:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd46:	82 17       	cp	r24, r18
    bd48:	93 07       	cpc	r25, r19
    bd4a:	b4 f2       	brlt	.-84     	; 0xbcf8 <vdmSetUnionGC+0x92>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bd4c:	eb 81       	ldd	r30, Y+3	; 0x03
    bd4e:	fc 81       	ldd	r31, Y+4	; 0x04
    bd50:	82 81       	ldd	r24, Z+2	; 0x02
    bd52:	93 81       	ldd	r25, Z+3	; 0x03
    bd54:	9a 87       	std	Y+10, r25	; 0x0a
    bd56:	89 87       	std	Y+9, r24	; 0x09
    bd58:	27 c0       	rjmp	.+78     	; 0xbda8 <vdmSetUnionGC+0x142>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
    bd5a:	89 85       	ldd	r24, Y+9	; 0x09
    bd5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd5e:	9c 01       	movw	r18, r24
    bd60:	22 0f       	add	r18, r18
    bd62:	33 1f       	adc	r19, r19
    bd64:	8f 81       	ldd	r24, Y+7	; 0x07
    bd66:	98 85       	ldd	r25, Y+8	; 0x08
    bd68:	8c 01       	movw	r16, r24
    bd6a:	02 0f       	add	r16, r18
    bd6c:	13 1f       	adc	r17, r19
    bd6e:	e9 81       	ldd	r30, Y+1	; 0x01
    bd70:	fa 81       	ldd	r31, Y+2	; 0x02
    bd72:	40 81       	ld	r20, Z
    bd74:	51 81       	ldd	r21, Z+1	; 0x01
    bd76:	eb 81       	ldd	r30, Y+3	; 0x03
    bd78:	fc 81       	ldd	r31, Y+4	; 0x04
    bd7a:	22 81       	ldd	r18, Z+2	; 0x02
    bd7c:	33 81       	ldd	r19, Z+3	; 0x03
    bd7e:	89 85       	ldd	r24, Y+9	; 0x09
    bd80:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd82:	82 1b       	sub	r24, r18
    bd84:	93 0b       	sbc	r25, r19
    bd86:	88 0f       	add	r24, r24
    bd88:	99 1f       	adc	r25, r25
    bd8a:	fa 01       	movw	r30, r20
    bd8c:	e8 0f       	add	r30, r24
    bd8e:	f9 1f       	adc	r31, r25
    bd90:	80 81       	ld	r24, Z
    bd92:	91 81       	ldd	r25, Z+1	; 0x01
    bd94:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    bd98:	f8 01       	movw	r30, r16
    bd9a:	91 83       	std	Z+1, r25	; 0x01
    bd9c:	80 83       	st	Z, r24
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bd9e:	89 85       	ldd	r24, Y+9	; 0x09
    bda0:	9a 85       	ldd	r25, Y+10	; 0x0a
    bda2:	01 96       	adiw	r24, 0x01	; 1
    bda4:	9a 87       	std	Y+10, r25	; 0x0a
    bda6:	89 87       	std	Y+9, r24	; 0x09
    bda8:	eb 81       	ldd	r30, Y+3	; 0x03
    bdaa:	fc 81       	ldd	r31, Y+4	; 0x04
    bdac:	22 81       	ldd	r18, Z+2	; 0x02
    bdae:	33 81       	ldd	r19, Z+3	; 0x03
    bdb0:	e9 81       	ldd	r30, Y+1	; 0x01
    bdb2:	fa 81       	ldd	r31, Y+2	; 0x02
    bdb4:	82 81       	ldd	r24, Z+2	; 0x02
    bdb6:	93 81       	ldd	r25, Z+3	; 0x03
    bdb8:	28 0f       	add	r18, r24
    bdba:	39 1f       	adc	r19, r25
    bdbc:	89 85       	ldd	r24, Y+9	; 0x09
    bdbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    bdc0:	82 17       	cp	r24, r18
    bdc2:	93 07       	cpc	r25, r19
    bdc4:	54 f2       	brlt	.-108    	; 0xbd5a <vdmSetUnionGC+0xf4>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValuesGC(col1->size + col2->size, newvalues, from);
    bdc6:	eb 81       	ldd	r30, Y+3	; 0x03
    bdc8:	fc 81       	ldd	r31, Y+4	; 0x04
    bdca:	22 81       	ldd	r18, Z+2	; 0x02
    bdcc:	33 81       	ldd	r19, Z+3	; 0x03
    bdce:	e9 81       	ldd	r30, Y+1	; 0x01
    bdd0:	fa 81       	ldd	r31, Y+2	; 0x02
    bdd2:	82 81       	ldd	r24, Z+2	; 0x02
    bdd4:	93 81       	ldd	r25, Z+3	; 0x03
    bdd6:	82 0f       	add	r24, r18
    bdd8:	93 1f       	adc	r25, r19
    bdda:	2f 81       	ldd	r18, Y+7	; 0x07
    bddc:	38 85       	ldd	r19, Y+8	; 0x08
    bdde:	4f 85       	ldd	r20, Y+15	; 0x0f
    bde0:	58 89       	ldd	r21, Y+16	; 0x10
    bde2:	b9 01       	movw	r22, r18
    bde4:	0e 94 63 57 	call	0xaec6	; 0xaec6 <newSetWithValuesGC>
    bde8:	9e 83       	std	Y+6, r25	; 0x06
    bdea:	8d 83       	std	Y+5, r24	; 0x05

	for(i = 0; i < col1->size + col2->size; i++)
    bdec:	1a 86       	std	Y+10, r1	; 0x0a
    bdee:	19 86       	std	Y+9, r1	; 0x09
    bdf0:	13 c0       	rjmp	.+38     	; 0xbe18 <vdmSetUnionGC+0x1b2>
		vdmFree(newvalues[i]);
    bdf2:	89 85       	ldd	r24, Y+9	; 0x09
    bdf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    bdf6:	9c 01       	movw	r18, r24
    bdf8:	22 0f       	add	r18, r18
    bdfa:	33 1f       	adc	r19, r19
    bdfc:	8f 81       	ldd	r24, Y+7	; 0x07
    bdfe:	98 85       	ldd	r25, Y+8	; 0x08
    be00:	fc 01       	movw	r30, r24
    be02:	e2 0f       	add	r30, r18
    be04:	f3 1f       	adc	r31, r19
    be06:	80 81       	ld	r24, Z
    be08:	91 81       	ldd	r25, Z+1	; 0x01
    be0a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValuesGC(col1->size + col2->size, newvalues, from);

	for(i = 0; i < col1->size + col2->size; i++)
    be0e:	89 85       	ldd	r24, Y+9	; 0x09
    be10:	9a 85       	ldd	r25, Y+10	; 0x0a
    be12:	01 96       	adiw	r24, 0x01	; 1
    be14:	9a 87       	std	Y+10, r25	; 0x0a
    be16:	89 87       	std	Y+9, r24	; 0x09
    be18:	eb 81       	ldd	r30, Y+3	; 0x03
    be1a:	fc 81       	ldd	r31, Y+4	; 0x04
    be1c:	22 81       	ldd	r18, Z+2	; 0x02
    be1e:	33 81       	ldd	r19, Z+3	; 0x03
    be20:	e9 81       	ldd	r30, Y+1	; 0x01
    be22:	fa 81       	ldd	r31, Y+2	; 0x02
    be24:	82 81       	ldd	r24, Z+2	; 0x02
    be26:	93 81       	ldd	r25, Z+3	; 0x03
    be28:	28 0f       	add	r18, r24
    be2a:	39 1f       	adc	r19, r25
    be2c:	89 85       	ldd	r24, Y+9	; 0x09
    be2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    be30:	82 17       	cp	r24, r18
    be32:	93 07       	cpc	r25, r19
    be34:	f4 f2       	brlt	.-68     	; 0xbdf2 <vdmSetUnionGC+0x18c>
		vdmFree(newvalues[i]);
	free(newvalues);
    be36:	8f 81       	ldd	r24, Y+7	; 0x07
    be38:	98 85       	ldd	r25, Y+8	; 0x08
    be3a:	0e 94 67 6d 	call	0xdace	; 0xdace <free>

	return resset;
    be3e:	8d 81       	ldd	r24, Y+5	; 0x05
    be40:	9e 81       	ldd	r25, Y+6	; 0x06
}
    be42:	60 96       	adiw	r28, 0x10	; 16
    be44:	0f b6       	in	r0, 0x3f	; 63
    be46:	f8 94       	cli
    be48:	de bf       	out	0x3e, r29	; 62
    be4a:	0f be       	out	0x3f, r0	; 63
    be4c:	cd bf       	out	0x3d, r28	; 61
    be4e:	cf 91       	pop	r28
    be50:	df 91       	pop	r29
    be52:	1f 91       	pop	r17
    be54:	0f 91       	pop	r16
    be56:	08 95       	ret

0000be58 <vdmSetInter>:



TVP vdmSetInter(TVP set1, TVP set2)
{
    be58:	df 93       	push	r29
    be5a:	cf 93       	push	r28
    be5c:	cd b7       	in	r28, 0x3d	; 61
    be5e:	de b7       	in	r29, 0x3e	; 62
    be60:	64 97       	sbiw	r28, 0x14	; 20
    be62:	0f b6       	in	r0, 0x3f	; 63
    be64:	f8 94       	cli
    be66:	de bf       	out	0x3e, r29	; 62
    be68:	0f be       	out	0x3f, r0	; 63
    be6a:	cd bf       	out	0x3d, r28	; 61
    be6c:	98 8b       	std	Y+16, r25	; 0x10
    be6e:	8f 87       	std	Y+15, r24	; 0x0f
    be70:	7a 8b       	std	Y+18, r23	; 0x12
    be72:	69 8b       	std	Y+17, r22	; 0x11
	TVP inter;
	TVP tmpset1;
	TVP tmpset2;
	TVP res;

	ASSERT_CHECK(set1);
    be74:	ef 85       	ldd	r30, Y+15	; 0x0f
    be76:	f8 89       	ldd	r31, Y+16	; 0x10
    be78:	80 81       	ld	r24, Z
    be7a:	91 81       	ldd	r25, Z+1	; 0x01
    be7c:	87 30       	cpi	r24, 0x07	; 7
    be7e:	91 05       	cpc	r25, r1
    be80:	11 f0       	breq	.+4      	; 0xbe86 <vdmSetInter+0x2e>
    be82:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    be86:	e9 89       	ldd	r30, Y+17	; 0x11
    be88:	fa 89       	ldd	r31, Y+18	; 0x12
    be8a:	80 81       	ld	r24, Z
    be8c:	91 81       	ldd	r25, Z+1	; 0x01
    be8e:	87 30       	cpi	r24, 0x07	; 7
    be90:	91 05       	cpc	r25, r1
    be92:	11 f0       	breq	.+4      	; 0xbe98 <vdmSetInter+0x40>
    be94:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    be98:	ef 85       	ldd	r30, Y+15	; 0x0f
    be9a:	f8 89       	ldd	r31, Y+16	; 0x10
    be9c:	84 81       	ldd	r24, Z+4	; 0x04
    be9e:	95 81       	ldd	r25, Z+5	; 0x05
    bea0:	9c 83       	std	Y+4, r25	; 0x04
    bea2:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    bea4:	e9 89       	ldd	r30, Y+17	; 0x11
    bea6:	fa 89       	ldd	r31, Y+18	; 0x12
    bea8:	84 81       	ldd	r24, Z+4	; 0x04
    beaa:	95 81       	ldd	r25, Z+5	; 0x05
    beac:	9a 83       	std	Y+2, r25	; 0x02
    beae:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size ==0)
    beb0:	eb 81       	ldd	r30, Y+3	; 0x03
    beb2:	fc 81       	ldd	r31, Y+4	; 0x04
    beb4:	82 81       	ldd	r24, Z+2	; 0x02
    beb6:	93 81       	ldd	r25, Z+3	; 0x03
    beb8:	00 97       	sbiw	r24, 0x00	; 0
    beba:	31 f0       	breq	.+12     	; 0xbec8 <vdmSetInter+0x70>
    bebc:	e9 81       	ldd	r30, Y+1	; 0x01
    bebe:	fa 81       	ldd	r31, Y+2	; 0x02
    bec0:	82 81       	ldd	r24, Z+2	; 0x02
    bec2:	93 81       	ldd	r25, Z+3	; 0x03
    bec4:	00 97       	sbiw	r24, 0x00	; 0
    bec6:	49 f4       	brne	.+18     	; 0xbeda <vdmSetInter+0x82>
	{
		return newSetWithValues(0, NULL);
    bec8:	80 e0       	ldi	r24, 0x00	; 0
    beca:	90 e0       	ldi	r25, 0x00	; 0
    becc:	60 e0       	ldi	r22, 0x00	; 0
    bece:	70 e0       	ldi	r23, 0x00	; 0
    bed0:	0e 94 c2 56 	call	0xad84	; 0xad84 <newSetWithValues>
    bed4:	9c 8b       	std	Y+20, r25	; 0x14
    bed6:	8b 8b       	std	Y+19, r24	; 0x13
    bed8:	70 c0       	rjmp	.+224    	; 0xbfba <vdmSetInter+0x162>
	}

	inter = newSetWithValues(0, NULL);
    beda:	80 e0       	ldi	r24, 0x00	; 0
    bedc:	90 e0       	ldi	r25, 0x00	; 0
    bede:	60 e0       	ldi	r22, 0x00	; 0
    bee0:	70 e0       	ldi	r23, 0x00	; 0
    bee2:	0e 94 c2 56 	call	0xad84	; 0xad84 <newSetWithValues>
    bee6:	9c 87       	std	Y+12, r25	; 0x0c
    bee8:	8b 87       	std	Y+11, r24	; 0x0b

	for(i = 0; i < col1->size; i++)
    beea:	1e 86       	std	Y+14, r1	; 0x0e
    beec:	1d 86       	std	Y+13, r1	; 0x0d
    beee:	57 c0       	rjmp	.+174    	; 0xbf9e <vdmSetInter+0x146>
	{
		res = vdmSetMemberOf(set2, (col1->value)[i]);
    bef0:	eb 81       	ldd	r30, Y+3	; 0x03
    bef2:	fc 81       	ldd	r31, Y+4	; 0x04
    bef4:	20 81       	ld	r18, Z
    bef6:	31 81       	ldd	r19, Z+1	; 0x01
    bef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    befa:	9e 85       	ldd	r25, Y+14	; 0x0e
    befc:	88 0f       	add	r24, r24
    befe:	99 1f       	adc	r25, r25
    bf00:	f9 01       	movw	r30, r18
    bf02:	e8 0f       	add	r30, r24
    bf04:	f9 1f       	adc	r31, r25
    bf06:	20 81       	ld	r18, Z
    bf08:	31 81       	ldd	r19, Z+1	; 0x01
    bf0a:	89 89       	ldd	r24, Y+17	; 0x11
    bf0c:	9a 89       	ldd	r25, Y+18	; 0x12
    bf0e:	b9 01       	movw	r22, r18
    bf10:	0e 94 0a 5c 	call	0xb814	; 0xb814 <vdmSetMemberOf>
    bf14:	9e 83       	std	Y+6, r25	; 0x06
    bf16:	8d 83       	std	Y+5, r24	; 0x05

		if(res->value.boolVal)
    bf18:	ed 81       	ldd	r30, Y+5	; 0x05
    bf1a:	fe 81       	ldd	r31, Y+6	; 0x06
    bf1c:	84 81       	ldd	r24, Z+4	; 0x04
    bf1e:	88 23       	and	r24, r24
    bf20:	a9 f1       	breq	.+106    	; 0xbf8c <vdmSetInter+0x134>
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    bf22:	eb 81       	ldd	r30, Y+3	; 0x03
    bf24:	fc 81       	ldd	r31, Y+4	; 0x04
    bf26:	20 81       	ld	r18, Z
    bf28:	31 81       	ldd	r19, Z+1	; 0x01
    bf2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    bf2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    bf2e:	88 0f       	add	r24, r24
    bf30:	99 1f       	adc	r25, r25
    bf32:	f9 01       	movw	r30, r18
    bf34:	e8 0f       	add	r30, r24
    bf36:	f9 1f       	adc	r31, r25
    bf38:	20 81       	ld	r18, Z
    bf3a:	31 81       	ldd	r19, Z+1	; 0x01
    bf3c:	00 d0       	rcall	.+0      	; 0xbf3e <vdmSetInter+0xe6>
    bf3e:	00 d0       	rcall	.+0      	; 0xbf40 <vdmSetInter+0xe8>
    bf40:	ed b7       	in	r30, 0x3d	; 61
    bf42:	fe b7       	in	r31, 0x3e	; 62
    bf44:	31 96       	adiw	r30, 0x01	; 1
    bf46:	81 e0       	ldi	r24, 0x01	; 1
    bf48:	90 e0       	ldi	r25, 0x00	; 0
    bf4a:	91 83       	std	Z+1, r25	; 0x01
    bf4c:	80 83       	st	Z, r24
    bf4e:	33 83       	std	Z+3, r19	; 0x03
    bf50:	22 83       	std	Z+2, r18	; 0x02
    bf52:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    bf56:	0f 90       	pop	r0
    bf58:	0f 90       	pop	r0
    bf5a:	0f 90       	pop	r0
    bf5c:	0f 90       	pop	r0
    bf5e:	9a 87       	std	Y+10, r25	; 0x0a
    bf60:	89 87       	std	Y+9, r24	; 0x09
			tmpset2 = vdmSetUnion(inter, tmpset1);
    bf62:	8b 85       	ldd	r24, Y+11	; 0x0b
    bf64:	9c 85       	ldd	r25, Y+12	; 0x0c
    bf66:	29 85       	ldd	r18, Y+9	; 0x09
    bf68:	3a 85       	ldd	r19, Y+10	; 0x0a
    bf6a:	b9 01       	movw	r22, r18
    bf6c:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    bf70:	98 87       	std	Y+8, r25	; 0x08
    bf72:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(inter);
    bf74:	8b 85       	ldd	r24, Y+11	; 0x0b
    bf76:	9c 85       	ldd	r25, Y+12	; 0x0c
    bf78:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			inter = tmpset2;
    bf7c:	8f 81       	ldd	r24, Y+7	; 0x07
    bf7e:	98 85       	ldd	r25, Y+8	; 0x08
    bf80:	9c 87       	std	Y+12, r25	; 0x0c
    bf82:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(tmpset1);
    bf84:	89 85       	ldd	r24, Y+9	; 0x09
    bf86:	9a 85       	ldd	r25, Y+10	; 0x0a
    bf88:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		}
		vdmFree(res);
    bf8c:	8d 81       	ldd	r24, Y+5	; 0x05
    bf8e:	9e 81       	ldd	r25, Y+6	; 0x06
    bf90:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		return newSetWithValues(0, NULL);
	}

	inter = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    bf94:	8d 85       	ldd	r24, Y+13	; 0x0d
    bf96:	9e 85       	ldd	r25, Y+14	; 0x0e
    bf98:	01 96       	adiw	r24, 0x01	; 1
    bf9a:	9e 87       	std	Y+14, r25	; 0x0e
    bf9c:	8d 87       	std	Y+13, r24	; 0x0d
    bf9e:	eb 81       	ldd	r30, Y+3	; 0x03
    bfa0:	fc 81       	ldd	r31, Y+4	; 0x04
    bfa2:	22 81       	ldd	r18, Z+2	; 0x02
    bfa4:	33 81       	ldd	r19, Z+3	; 0x03
    bfa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    bfa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    bfaa:	82 17       	cp	r24, r18
    bfac:	93 07       	cpc	r25, r19
    bfae:	0c f4       	brge	.+2      	; 0xbfb2 <vdmSetInter+0x15a>
    bfb0:	9f cf       	rjmp	.-194    	; 0xbef0 <vdmSetInter+0x98>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return inter;
    bfb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    bfb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    bfb6:	9c 8b       	std	Y+20, r25	; 0x14
    bfb8:	8b 8b       	std	Y+19, r24	; 0x13
    bfba:	8b 89       	ldd	r24, Y+19	; 0x13
    bfbc:	9c 89       	ldd	r25, Y+20	; 0x14
}
    bfbe:	64 96       	adiw	r28, 0x14	; 20
    bfc0:	0f b6       	in	r0, 0x3f	; 63
    bfc2:	f8 94       	cli
    bfc4:	de bf       	out	0x3e, r29	; 62
    bfc6:	0f be       	out	0x3f, r0	; 63
    bfc8:	cd bf       	out	0x3d, r28	; 61
    bfca:	cf 91       	pop	r28
    bfcc:	df 91       	pop	r29
    bfce:	08 95       	ret

0000bfd0 <vdmSetInterGC>:


TVP vdmSetInterGC(TVP set1, TVP set2, TVP *from)
{
    bfd0:	df 93       	push	r29
    bfd2:	cf 93       	push	r28
    bfd4:	cd b7       	in	r28, 0x3d	; 61
    bfd6:	de b7       	in	r29, 0x3e	; 62
    bfd8:	66 97       	sbiw	r28, 0x16	; 22
    bfda:	0f b6       	in	r0, 0x3f	; 63
    bfdc:	f8 94       	cli
    bfde:	de bf       	out	0x3e, r29	; 62
    bfe0:	0f be       	out	0x3f, r0	; 63
    bfe2:	cd bf       	out	0x3d, r28	; 61
    bfe4:	98 8b       	std	Y+16, r25	; 0x10
    bfe6:	8f 87       	std	Y+15, r24	; 0x0f
    bfe8:	7a 8b       	std	Y+18, r23	; 0x12
    bfea:	69 8b       	std	Y+17, r22	; 0x11
    bfec:	5c 8b       	std	Y+20, r21	; 0x14
    bfee:	4b 8b       	std	Y+19, r20	; 0x13
	TVP inter;
	TVP tmpset1;
	TVP tmpset2;
	TVP res;

	ASSERT_CHECK(set1);
    bff0:	ef 85       	ldd	r30, Y+15	; 0x0f
    bff2:	f8 89       	ldd	r31, Y+16	; 0x10
    bff4:	80 81       	ld	r24, Z
    bff6:	91 81       	ldd	r25, Z+1	; 0x01
    bff8:	87 30       	cpi	r24, 0x07	; 7
    bffa:	91 05       	cpc	r25, r1
    bffc:	11 f0       	breq	.+4      	; 0xc002 <vdmSetInterGC+0x32>
    bffe:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c002:	e9 89       	ldd	r30, Y+17	; 0x11
    c004:	fa 89       	ldd	r31, Y+18	; 0x12
    c006:	80 81       	ld	r24, Z
    c008:	91 81       	ldd	r25, Z+1	; 0x01
    c00a:	87 30       	cpi	r24, 0x07	; 7
    c00c:	91 05       	cpc	r25, r1
    c00e:	11 f0       	breq	.+4      	; 0xc014 <vdmSetInterGC+0x44>
    c010:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c014:	ef 85       	ldd	r30, Y+15	; 0x0f
    c016:	f8 89       	ldd	r31, Y+16	; 0x10
    c018:	84 81       	ldd	r24, Z+4	; 0x04
    c01a:	95 81       	ldd	r25, Z+5	; 0x05
    c01c:	9c 83       	std	Y+4, r25	; 0x04
    c01e:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c020:	e9 89       	ldd	r30, Y+17	; 0x11
    c022:	fa 89       	ldd	r31, Y+18	; 0x12
    c024:	84 81       	ldd	r24, Z+4	; 0x04
    c026:	95 81       	ldd	r25, Z+5	; 0x05
    c028:	9a 83       	std	Y+2, r25	; 0x02
    c02a:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size ==0)
    c02c:	eb 81       	ldd	r30, Y+3	; 0x03
    c02e:	fc 81       	ldd	r31, Y+4	; 0x04
    c030:	82 81       	ldd	r24, Z+2	; 0x02
    c032:	93 81       	ldd	r25, Z+3	; 0x03
    c034:	00 97       	sbiw	r24, 0x00	; 0
    c036:	31 f0       	breq	.+12     	; 0xc044 <vdmSetInterGC+0x74>
    c038:	e9 81       	ldd	r30, Y+1	; 0x01
    c03a:	fa 81       	ldd	r31, Y+2	; 0x02
    c03c:	82 81       	ldd	r24, Z+2	; 0x02
    c03e:	93 81       	ldd	r25, Z+3	; 0x03
    c040:	00 97       	sbiw	r24, 0x00	; 0
    c042:	61 f4       	brne	.+24     	; 0xc05c <vdmSetInterGC+0x8c>
	{
		return newSetWithValuesGC(0, NULL, from);
    c044:	2b 89       	ldd	r18, Y+19	; 0x13
    c046:	3c 89       	ldd	r19, Y+20	; 0x14
    c048:	80 e0       	ldi	r24, 0x00	; 0
    c04a:	90 e0       	ldi	r25, 0x00	; 0
    c04c:	60 e0       	ldi	r22, 0x00	; 0
    c04e:	70 e0       	ldi	r23, 0x00	; 0
    c050:	a9 01       	movw	r20, r18
    c052:	0e 94 63 57 	call	0xaec6	; 0xaec6 <newSetWithValuesGC>
    c056:	9e 8b       	std	Y+22, r25	; 0x16
    c058:	8d 8b       	std	Y+21, r24	; 0x15
    c05a:	73 c0       	rjmp	.+230    	; 0xc142 <vdmSetInterGC+0x172>
	}

	inter = newSetWithValuesGC(0, NULL, from);
    c05c:	2b 89       	ldd	r18, Y+19	; 0x13
    c05e:	3c 89       	ldd	r19, Y+20	; 0x14
    c060:	80 e0       	ldi	r24, 0x00	; 0
    c062:	90 e0       	ldi	r25, 0x00	; 0
    c064:	60 e0       	ldi	r22, 0x00	; 0
    c066:	70 e0       	ldi	r23, 0x00	; 0
    c068:	a9 01       	movw	r20, r18
    c06a:	0e 94 63 57 	call	0xaec6	; 0xaec6 <newSetWithValuesGC>
    c06e:	9c 87       	std	Y+12, r25	; 0x0c
    c070:	8b 87       	std	Y+11, r24	; 0x0b

	for(i = 0; i < col1->size; i++)
    c072:	1e 86       	std	Y+14, r1	; 0x0e
    c074:	1d 86       	std	Y+13, r1	; 0x0d
    c076:	57 c0       	rjmp	.+174    	; 0xc126 <vdmSetInterGC+0x156>
	{
		res = vdmSetMemberOf(set2, (col1->value)[i]);
    c078:	eb 81       	ldd	r30, Y+3	; 0x03
    c07a:	fc 81       	ldd	r31, Y+4	; 0x04
    c07c:	20 81       	ld	r18, Z
    c07e:	31 81       	ldd	r19, Z+1	; 0x01
    c080:	8d 85       	ldd	r24, Y+13	; 0x0d
    c082:	9e 85       	ldd	r25, Y+14	; 0x0e
    c084:	88 0f       	add	r24, r24
    c086:	99 1f       	adc	r25, r25
    c088:	f9 01       	movw	r30, r18
    c08a:	e8 0f       	add	r30, r24
    c08c:	f9 1f       	adc	r31, r25
    c08e:	20 81       	ld	r18, Z
    c090:	31 81       	ldd	r19, Z+1	; 0x01
    c092:	89 89       	ldd	r24, Y+17	; 0x11
    c094:	9a 89       	ldd	r25, Y+18	; 0x12
    c096:	b9 01       	movw	r22, r18
    c098:	0e 94 0a 5c 	call	0xb814	; 0xb814 <vdmSetMemberOf>
    c09c:	9e 83       	std	Y+6, r25	; 0x06
    c09e:	8d 83       	std	Y+5, r24	; 0x05

		if(res->value.boolVal)
    c0a0:	ed 81       	ldd	r30, Y+5	; 0x05
    c0a2:	fe 81       	ldd	r31, Y+6	; 0x06
    c0a4:	84 81       	ldd	r24, Z+4	; 0x04
    c0a6:	88 23       	and	r24, r24
    c0a8:	a9 f1       	breq	.+106    	; 0xc114 <vdmSetInterGC+0x144>
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    c0aa:	eb 81       	ldd	r30, Y+3	; 0x03
    c0ac:	fc 81       	ldd	r31, Y+4	; 0x04
    c0ae:	20 81       	ld	r18, Z
    c0b0:	31 81       	ldd	r19, Z+1	; 0x01
    c0b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    c0b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    c0b6:	88 0f       	add	r24, r24
    c0b8:	99 1f       	adc	r25, r25
    c0ba:	f9 01       	movw	r30, r18
    c0bc:	e8 0f       	add	r30, r24
    c0be:	f9 1f       	adc	r31, r25
    c0c0:	20 81       	ld	r18, Z
    c0c2:	31 81       	ldd	r19, Z+1	; 0x01
    c0c4:	00 d0       	rcall	.+0      	; 0xc0c6 <vdmSetInterGC+0xf6>
    c0c6:	00 d0       	rcall	.+0      	; 0xc0c8 <vdmSetInterGC+0xf8>
    c0c8:	ed b7       	in	r30, 0x3d	; 61
    c0ca:	fe b7       	in	r31, 0x3e	; 62
    c0cc:	31 96       	adiw	r30, 0x01	; 1
    c0ce:	81 e0       	ldi	r24, 0x01	; 1
    c0d0:	90 e0       	ldi	r25, 0x00	; 0
    c0d2:	91 83       	std	Z+1, r25	; 0x01
    c0d4:	80 83       	st	Z, r24
    c0d6:	33 83       	std	Z+3, r19	; 0x03
    c0d8:	22 83       	std	Z+2, r18	; 0x02
    c0da:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    c0de:	0f 90       	pop	r0
    c0e0:	0f 90       	pop	r0
    c0e2:	0f 90       	pop	r0
    c0e4:	0f 90       	pop	r0
    c0e6:	9a 87       	std	Y+10, r25	; 0x0a
    c0e8:	89 87       	std	Y+9, r24	; 0x09
			tmpset2 = vdmSetUnion(inter, tmpset1);
    c0ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    c0ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    c0ee:	29 85       	ldd	r18, Y+9	; 0x09
    c0f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    c0f2:	b9 01       	movw	r22, r18
    c0f4:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    c0f8:	98 87       	std	Y+8, r25	; 0x08
    c0fa:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(inter);
    c0fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    c0fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    c100:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			inter = tmpset2;
    c104:	8f 81       	ldd	r24, Y+7	; 0x07
    c106:	98 85       	ldd	r25, Y+8	; 0x08
    c108:	9c 87       	std	Y+12, r25	; 0x0c
    c10a:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(tmpset1);
    c10c:	89 85       	ldd	r24, Y+9	; 0x09
    c10e:	9a 85       	ldd	r25, Y+10	; 0x0a
    c110:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		}
		vdmFree(res);
    c114:	8d 81       	ldd	r24, Y+5	; 0x05
    c116:	9e 81       	ldd	r25, Y+6	; 0x06
    c118:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		return newSetWithValuesGC(0, NULL, from);
	}

	inter = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    c11c:	8d 85       	ldd	r24, Y+13	; 0x0d
    c11e:	9e 85       	ldd	r25, Y+14	; 0x0e
    c120:	01 96       	adiw	r24, 0x01	; 1
    c122:	9e 87       	std	Y+14, r25	; 0x0e
    c124:	8d 87       	std	Y+13, r24	; 0x0d
    c126:	eb 81       	ldd	r30, Y+3	; 0x03
    c128:	fc 81       	ldd	r31, Y+4	; 0x04
    c12a:	22 81       	ldd	r18, Z+2	; 0x02
    c12c:	33 81       	ldd	r19, Z+3	; 0x03
    c12e:	8d 85       	ldd	r24, Y+13	; 0x0d
    c130:	9e 85       	ldd	r25, Y+14	; 0x0e
    c132:	82 17       	cp	r24, r18
    c134:	93 07       	cpc	r25, r19
    c136:	0c f4       	brge	.+2      	; 0xc13a <vdmSetInterGC+0x16a>
    c138:	9f cf       	rjmp	.-194    	; 0xc078 <vdmSetInterGC+0xa8>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return inter;
    c13a:	8b 85       	ldd	r24, Y+11	; 0x0b
    c13c:	9c 85       	ldd	r25, Y+12	; 0x0c
    c13e:	9e 8b       	std	Y+22, r25	; 0x16
    c140:	8d 8b       	std	Y+21, r24	; 0x15
    c142:	8d 89       	ldd	r24, Y+21	; 0x15
    c144:	9e 89       	ldd	r25, Y+22	; 0x16
}
    c146:	66 96       	adiw	r28, 0x16	; 22
    c148:	0f b6       	in	r0, 0x3f	; 63
    c14a:	f8 94       	cli
    c14c:	de bf       	out	0x3e, r29	; 62
    c14e:	0f be       	out	0x3f, r0	; 63
    c150:	cd bf       	out	0x3d, r28	; 61
    c152:	cf 91       	pop	r28
    c154:	df 91       	pop	r29
    c156:	08 95       	ret

0000c158 <vdmSetDifference>:




TVP vdmSetDifference(TVP set1, TVP set2)
{
    c158:	df 93       	push	r29
    c15a:	cf 93       	push	r28
    c15c:	cd b7       	in	r28, 0x3d	; 61
    c15e:	de b7       	in	r29, 0x3e	; 62
    c160:	64 97       	sbiw	r28, 0x14	; 20
    c162:	0f b6       	in	r0, 0x3f	; 63
    c164:	f8 94       	cli
    c166:	de bf       	out	0x3e, r29	; 62
    c168:	0f be       	out	0x3f, r0	; 63
    c16a:	cd bf       	out	0x3d, r28	; 61
    c16c:	98 8b       	std	Y+16, r25	; 0x10
    c16e:	8f 87       	std	Y+15, r24	; 0x0f
    c170:	7a 8b       	std	Y+18, r23	; 0x12
    c172:	69 8b       	std	Y+17, r22	; 0x11
	TVP tmpset1;
	TVP tmpset2;
	TVP resultset;
	TVP res;

	ASSERT_CHECK(set1);
    c174:	ef 85       	ldd	r30, Y+15	; 0x0f
    c176:	f8 89       	ldd	r31, Y+16	; 0x10
    c178:	80 81       	ld	r24, Z
    c17a:	91 81       	ldd	r25, Z+1	; 0x01
    c17c:	87 30       	cpi	r24, 0x07	; 7
    c17e:	91 05       	cpc	r25, r1
    c180:	11 f0       	breq	.+4      	; 0xc186 <vdmSetDifference+0x2e>
    c182:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c186:	e9 89       	ldd	r30, Y+17	; 0x11
    c188:	fa 89       	ldd	r31, Y+18	; 0x12
    c18a:	80 81       	ld	r24, Z
    c18c:	91 81       	ldd	r25, Z+1	; 0x01
    c18e:	87 30       	cpi	r24, 0x07	; 7
    c190:	91 05       	cpc	r25, r1
    c192:	11 f0       	breq	.+4      	; 0xc198 <vdmSetDifference+0x40>
    c194:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c198:	ef 85       	ldd	r30, Y+15	; 0x0f
    c19a:	f8 89       	ldd	r31, Y+16	; 0x10
    c19c:	84 81       	ldd	r24, Z+4	; 0x04
    c19e:	95 81       	ldd	r25, Z+5	; 0x05
    c1a0:	9c 83       	std	Y+4, r25	; 0x04
    c1a2:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c1a4:	e9 89       	ldd	r30, Y+17	; 0x11
    c1a6:	fa 89       	ldd	r31, Y+18	; 0x12
    c1a8:	84 81       	ldd	r24, Z+4	; 0x04
    c1aa:	95 81       	ldd	r25, Z+5	; 0x05
    c1ac:	9a 83       	std	Y+2, r25	; 0x02
    c1ae:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size == 0)
    c1b0:	eb 81       	ldd	r30, Y+3	; 0x03
    c1b2:	fc 81       	ldd	r31, Y+4	; 0x04
    c1b4:	82 81       	ldd	r24, Z+2	; 0x02
    c1b6:	93 81       	ldd	r25, Z+3	; 0x03
    c1b8:	00 97       	sbiw	r24, 0x00	; 0
    c1ba:	31 f0       	breq	.+12     	; 0xc1c8 <vdmSetDifference+0x70>
    c1bc:	e9 81       	ldd	r30, Y+1	; 0x01
    c1be:	fa 81       	ldd	r31, Y+2	; 0x02
    c1c0:	82 81       	ldd	r24, Z+2	; 0x02
    c1c2:	93 81       	ldd	r25, Z+3	; 0x03
    c1c4:	00 97       	sbiw	r24, 0x00	; 0
    c1c6:	29 f4       	brne	.+10     	; 0xc1d2 <vdmSetDifference+0x7a>
	{
		return set1;
    c1c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    c1ca:	98 89       	ldd	r25, Y+16	; 0x10
    c1cc:	9c 8b       	std	Y+20, r25	; 0x14
    c1ce:	8b 8b       	std	Y+19, r24	; 0x13
    c1d0:	70 c0       	rjmp	.+224    	; 0xc2b2 <vdmSetDifference+0x15a>
	}

	resultset = newSetWithValues(0, NULL);
    c1d2:	80 e0       	ldi	r24, 0x00	; 0
    c1d4:	90 e0       	ldi	r25, 0x00	; 0
    c1d6:	60 e0       	ldi	r22, 0x00	; 0
    c1d8:	70 e0       	ldi	r23, 0x00	; 0
    c1da:	0e 94 c2 56 	call	0xad84	; 0xad84 <newSetWithValues>
    c1de:	98 87       	std	Y+8, r25	; 0x08
    c1e0:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col1->size; i++)
    c1e2:	1e 86       	std	Y+14, r1	; 0x0e
    c1e4:	1d 86       	std	Y+13, r1	; 0x0d
    c1e6:	57 c0       	rjmp	.+174    	; 0xc296 <vdmSetDifference+0x13e>
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
    c1e8:	eb 81       	ldd	r30, Y+3	; 0x03
    c1ea:	fc 81       	ldd	r31, Y+4	; 0x04
    c1ec:	20 81       	ld	r18, Z
    c1ee:	31 81       	ldd	r19, Z+1	; 0x01
    c1f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    c1f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    c1f4:	88 0f       	add	r24, r24
    c1f6:	99 1f       	adc	r25, r25
    c1f8:	f9 01       	movw	r30, r18
    c1fa:	e8 0f       	add	r30, r24
    c1fc:	f9 1f       	adc	r31, r25
    c1fe:	20 81       	ld	r18, Z
    c200:	31 81       	ldd	r19, Z+1	; 0x01
    c202:	89 89       	ldd	r24, Y+17	; 0x11
    c204:	9a 89       	ldd	r25, Y+18	; 0x12
    c206:	b9 01       	movw	r22, r18
    c208:	0e 94 c9 5c 	call	0xb992	; 0xb992 <vdmSetNotMemberOf>
    c20c:	9e 83       	std	Y+6, r25	; 0x06
    c20e:	8d 83       	std	Y+5, r24	; 0x05
		if(res->value.boolVal)
    c210:	ed 81       	ldd	r30, Y+5	; 0x05
    c212:	fe 81       	ldd	r31, Y+6	; 0x06
    c214:	84 81       	ldd	r24, Z+4	; 0x04
    c216:	88 23       	and	r24, r24
    c218:	a9 f1       	breq	.+106    	; 0xc284 <vdmSetDifference+0x12c>
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    c21a:	eb 81       	ldd	r30, Y+3	; 0x03
    c21c:	fc 81       	ldd	r31, Y+4	; 0x04
    c21e:	20 81       	ld	r18, Z
    c220:	31 81       	ldd	r19, Z+1	; 0x01
    c222:	8d 85       	ldd	r24, Y+13	; 0x0d
    c224:	9e 85       	ldd	r25, Y+14	; 0x0e
    c226:	88 0f       	add	r24, r24
    c228:	99 1f       	adc	r25, r25
    c22a:	f9 01       	movw	r30, r18
    c22c:	e8 0f       	add	r30, r24
    c22e:	f9 1f       	adc	r31, r25
    c230:	20 81       	ld	r18, Z
    c232:	31 81       	ldd	r19, Z+1	; 0x01
    c234:	00 d0       	rcall	.+0      	; 0xc236 <vdmSetDifference+0xde>
    c236:	00 d0       	rcall	.+0      	; 0xc238 <vdmSetDifference+0xe0>
    c238:	ed b7       	in	r30, 0x3d	; 61
    c23a:	fe b7       	in	r31, 0x3e	; 62
    c23c:	31 96       	adiw	r30, 0x01	; 1
    c23e:	81 e0       	ldi	r24, 0x01	; 1
    c240:	90 e0       	ldi	r25, 0x00	; 0
    c242:	91 83       	std	Z+1, r25	; 0x01
    c244:	80 83       	st	Z, r24
    c246:	33 83       	std	Z+3, r19	; 0x03
    c248:	22 83       	std	Z+2, r18	; 0x02
    c24a:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    c24e:	0f 90       	pop	r0
    c250:	0f 90       	pop	r0
    c252:	0f 90       	pop	r0
    c254:	0f 90       	pop	r0
    c256:	9c 87       	std	Y+12, r25	; 0x0c
    c258:	8b 87       	std	Y+11, r24	; 0x0b
			tmpset2 = vdmSetUnion(resultset, tmpset1);
    c25a:	8f 81       	ldd	r24, Y+7	; 0x07
    c25c:	98 85       	ldd	r25, Y+8	; 0x08
    c25e:	2b 85       	ldd	r18, Y+11	; 0x0b
    c260:	3c 85       	ldd	r19, Y+12	; 0x0c
    c262:	b9 01       	movw	r22, r18
    c264:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    c268:	9a 87       	std	Y+10, r25	; 0x0a
    c26a:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(resultset);
    c26c:	8f 81       	ldd	r24, Y+7	; 0x07
    c26e:	98 85       	ldd	r25, Y+8	; 0x08
    c270:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			resultset = tmpset2;
    c274:	89 85       	ldd	r24, Y+9	; 0x09
    c276:	9a 85       	ldd	r25, Y+10	; 0x0a
    c278:	98 87       	std	Y+8, r25	; 0x08
    c27a:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(tmpset1);
    c27c:	8b 85       	ldd	r24, Y+11	; 0x0b
    c27e:	9c 85       	ldd	r25, Y+12	; 0x0c
    c280:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		}
		vdmFree(res);
    c284:	8d 81       	ldd	r24, Y+5	; 0x05
    c286:	9e 81       	ldd	r25, Y+6	; 0x06
    c288:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		return set1;
	}

	resultset = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    c28c:	8d 85       	ldd	r24, Y+13	; 0x0d
    c28e:	9e 85       	ldd	r25, Y+14	; 0x0e
    c290:	01 96       	adiw	r24, 0x01	; 1
    c292:	9e 87       	std	Y+14, r25	; 0x0e
    c294:	8d 87       	std	Y+13, r24	; 0x0d
    c296:	eb 81       	ldd	r30, Y+3	; 0x03
    c298:	fc 81       	ldd	r31, Y+4	; 0x04
    c29a:	22 81       	ldd	r18, Z+2	; 0x02
    c29c:	33 81       	ldd	r19, Z+3	; 0x03
    c29e:	8d 85       	ldd	r24, Y+13	; 0x0d
    c2a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    c2a2:	82 17       	cp	r24, r18
    c2a4:	93 07       	cpc	r25, r19
    c2a6:	0c f4       	brge	.+2      	; 0xc2aa <vdmSetDifference+0x152>
    c2a8:	9f cf       	rjmp	.-194    	; 0xc1e8 <vdmSetDifference+0x90>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return resultset;
    c2aa:	8f 81       	ldd	r24, Y+7	; 0x07
    c2ac:	98 85       	ldd	r25, Y+8	; 0x08
    c2ae:	9c 8b       	std	Y+20, r25	; 0x14
    c2b0:	8b 8b       	std	Y+19, r24	; 0x13
    c2b2:	8b 89       	ldd	r24, Y+19	; 0x13
    c2b4:	9c 89       	ldd	r25, Y+20	; 0x14
}
    c2b6:	64 96       	adiw	r28, 0x14	; 20
    c2b8:	0f b6       	in	r0, 0x3f	; 63
    c2ba:	f8 94       	cli
    c2bc:	de bf       	out	0x3e, r29	; 62
    c2be:	0f be       	out	0x3f, r0	; 63
    c2c0:	cd bf       	out	0x3d, r28	; 61
    c2c2:	cf 91       	pop	r28
    c2c4:	df 91       	pop	r29
    c2c6:	08 95       	ret

0000c2c8 <vdmSetDifferenceGC>:



TVP vdmSetDifferenceGC(TVP set1, TVP set2, TVP *from)
{
    c2c8:	df 93       	push	r29
    c2ca:	cf 93       	push	r28
    c2cc:	cd b7       	in	r28, 0x3d	; 61
    c2ce:	de b7       	in	r29, 0x3e	; 62
    c2d0:	66 97       	sbiw	r28, 0x16	; 22
    c2d2:	0f b6       	in	r0, 0x3f	; 63
    c2d4:	f8 94       	cli
    c2d6:	de bf       	out	0x3e, r29	; 62
    c2d8:	0f be       	out	0x3f, r0	; 63
    c2da:	cd bf       	out	0x3d, r28	; 61
    c2dc:	98 8b       	std	Y+16, r25	; 0x10
    c2de:	8f 87       	std	Y+15, r24	; 0x0f
    c2e0:	7a 8b       	std	Y+18, r23	; 0x12
    c2e2:	69 8b       	std	Y+17, r22	; 0x11
    c2e4:	5c 8b       	std	Y+20, r21	; 0x14
    c2e6:	4b 8b       	std	Y+19, r20	; 0x13
	TVP tmpset1;
	TVP tmpset2;
	TVP resultset;
	TVP res;

	ASSERT_CHECK(set1);
    c2e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    c2ea:	f8 89       	ldd	r31, Y+16	; 0x10
    c2ec:	80 81       	ld	r24, Z
    c2ee:	91 81       	ldd	r25, Z+1	; 0x01
    c2f0:	87 30       	cpi	r24, 0x07	; 7
    c2f2:	91 05       	cpc	r25, r1
    c2f4:	11 f0       	breq	.+4      	; 0xc2fa <vdmSetDifferenceGC+0x32>
    c2f6:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c2fa:	e9 89       	ldd	r30, Y+17	; 0x11
    c2fc:	fa 89       	ldd	r31, Y+18	; 0x12
    c2fe:	80 81       	ld	r24, Z
    c300:	91 81       	ldd	r25, Z+1	; 0x01
    c302:	87 30       	cpi	r24, 0x07	; 7
    c304:	91 05       	cpc	r25, r1
    c306:	11 f0       	breq	.+4      	; 0xc30c <vdmSetDifferenceGC+0x44>
    c308:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c30c:	ef 85       	ldd	r30, Y+15	; 0x0f
    c30e:	f8 89       	ldd	r31, Y+16	; 0x10
    c310:	84 81       	ldd	r24, Z+4	; 0x04
    c312:	95 81       	ldd	r25, Z+5	; 0x05
    c314:	9c 83       	std	Y+4, r25	; 0x04
    c316:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c318:	e9 89       	ldd	r30, Y+17	; 0x11
    c31a:	fa 89       	ldd	r31, Y+18	; 0x12
    c31c:	84 81       	ldd	r24, Z+4	; 0x04
    c31e:	95 81       	ldd	r25, Z+5	; 0x05
    c320:	9a 83       	std	Y+2, r25	; 0x02
    c322:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size == 0)
    c324:	eb 81       	ldd	r30, Y+3	; 0x03
    c326:	fc 81       	ldd	r31, Y+4	; 0x04
    c328:	82 81       	ldd	r24, Z+2	; 0x02
    c32a:	93 81       	ldd	r25, Z+3	; 0x03
    c32c:	00 97       	sbiw	r24, 0x00	; 0
    c32e:	31 f0       	breq	.+12     	; 0xc33c <vdmSetDifferenceGC+0x74>
    c330:	e9 81       	ldd	r30, Y+1	; 0x01
    c332:	fa 81       	ldd	r31, Y+2	; 0x02
    c334:	82 81       	ldd	r24, Z+2	; 0x02
    c336:	93 81       	ldd	r25, Z+3	; 0x03
    c338:	00 97       	sbiw	r24, 0x00	; 0
    c33a:	29 f4       	brne	.+10     	; 0xc346 <vdmSetDifferenceGC+0x7e>
	{
		return set1;
    c33c:	8f 85       	ldd	r24, Y+15	; 0x0f
    c33e:	98 89       	ldd	r25, Y+16	; 0x10
    c340:	9e 8b       	std	Y+22, r25	; 0x16
    c342:	8d 8b       	std	Y+21, r24	; 0x15
    c344:	73 c0       	rjmp	.+230    	; 0xc42c <vdmSetDifferenceGC+0x164>
	}

	resultset = newSetWithValuesGC(0, NULL, from);
    c346:	2b 89       	ldd	r18, Y+19	; 0x13
    c348:	3c 89       	ldd	r19, Y+20	; 0x14
    c34a:	80 e0       	ldi	r24, 0x00	; 0
    c34c:	90 e0       	ldi	r25, 0x00	; 0
    c34e:	60 e0       	ldi	r22, 0x00	; 0
    c350:	70 e0       	ldi	r23, 0x00	; 0
    c352:	a9 01       	movw	r20, r18
    c354:	0e 94 63 57 	call	0xaec6	; 0xaec6 <newSetWithValuesGC>
    c358:	98 87       	std	Y+8, r25	; 0x08
    c35a:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col1->size; i++)
    c35c:	1e 86       	std	Y+14, r1	; 0x0e
    c35e:	1d 86       	std	Y+13, r1	; 0x0d
    c360:	57 c0       	rjmp	.+174    	; 0xc410 <vdmSetDifferenceGC+0x148>
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
    c362:	eb 81       	ldd	r30, Y+3	; 0x03
    c364:	fc 81       	ldd	r31, Y+4	; 0x04
    c366:	20 81       	ld	r18, Z
    c368:	31 81       	ldd	r19, Z+1	; 0x01
    c36a:	8d 85       	ldd	r24, Y+13	; 0x0d
    c36c:	9e 85       	ldd	r25, Y+14	; 0x0e
    c36e:	88 0f       	add	r24, r24
    c370:	99 1f       	adc	r25, r25
    c372:	f9 01       	movw	r30, r18
    c374:	e8 0f       	add	r30, r24
    c376:	f9 1f       	adc	r31, r25
    c378:	20 81       	ld	r18, Z
    c37a:	31 81       	ldd	r19, Z+1	; 0x01
    c37c:	89 89       	ldd	r24, Y+17	; 0x11
    c37e:	9a 89       	ldd	r25, Y+18	; 0x12
    c380:	b9 01       	movw	r22, r18
    c382:	0e 94 c9 5c 	call	0xb992	; 0xb992 <vdmSetNotMemberOf>
    c386:	9e 83       	std	Y+6, r25	; 0x06
    c388:	8d 83       	std	Y+5, r24	; 0x05
		if(res->value.boolVal)
    c38a:	ed 81       	ldd	r30, Y+5	; 0x05
    c38c:	fe 81       	ldd	r31, Y+6	; 0x06
    c38e:	84 81       	ldd	r24, Z+4	; 0x04
    c390:	88 23       	and	r24, r24
    c392:	a9 f1       	breq	.+106    	; 0xc3fe <vdmSetDifferenceGC+0x136>
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    c394:	eb 81       	ldd	r30, Y+3	; 0x03
    c396:	fc 81       	ldd	r31, Y+4	; 0x04
    c398:	20 81       	ld	r18, Z
    c39a:	31 81       	ldd	r19, Z+1	; 0x01
    c39c:	8d 85       	ldd	r24, Y+13	; 0x0d
    c39e:	9e 85       	ldd	r25, Y+14	; 0x0e
    c3a0:	88 0f       	add	r24, r24
    c3a2:	99 1f       	adc	r25, r25
    c3a4:	f9 01       	movw	r30, r18
    c3a6:	e8 0f       	add	r30, r24
    c3a8:	f9 1f       	adc	r31, r25
    c3aa:	20 81       	ld	r18, Z
    c3ac:	31 81       	ldd	r19, Z+1	; 0x01
    c3ae:	00 d0       	rcall	.+0      	; 0xc3b0 <vdmSetDifferenceGC+0xe8>
    c3b0:	00 d0       	rcall	.+0      	; 0xc3b2 <vdmSetDifferenceGC+0xea>
    c3b2:	ed b7       	in	r30, 0x3d	; 61
    c3b4:	fe b7       	in	r31, 0x3e	; 62
    c3b6:	31 96       	adiw	r30, 0x01	; 1
    c3b8:	81 e0       	ldi	r24, 0x01	; 1
    c3ba:	90 e0       	ldi	r25, 0x00	; 0
    c3bc:	91 83       	std	Z+1, r25	; 0x01
    c3be:	80 83       	st	Z, r24
    c3c0:	33 83       	std	Z+3, r19	; 0x03
    c3c2:	22 83       	std	Z+2, r18	; 0x02
    c3c4:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    c3c8:	0f 90       	pop	r0
    c3ca:	0f 90       	pop	r0
    c3cc:	0f 90       	pop	r0
    c3ce:	0f 90       	pop	r0
    c3d0:	9c 87       	std	Y+12, r25	; 0x0c
    c3d2:	8b 87       	std	Y+11, r24	; 0x0b
			tmpset2 = vdmSetUnion(resultset, tmpset1);
    c3d4:	8f 81       	ldd	r24, Y+7	; 0x07
    c3d6:	98 85       	ldd	r25, Y+8	; 0x08
    c3d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    c3da:	3c 85       	ldd	r19, Y+12	; 0x0c
    c3dc:	b9 01       	movw	r22, r18
    c3de:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    c3e2:	9a 87       	std	Y+10, r25	; 0x0a
    c3e4:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(resultset);
    c3e6:	8f 81       	ldd	r24, Y+7	; 0x07
    c3e8:	98 85       	ldd	r25, Y+8	; 0x08
    c3ea:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			resultset = tmpset2;
    c3ee:	89 85       	ldd	r24, Y+9	; 0x09
    c3f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    c3f2:	98 87       	std	Y+8, r25	; 0x08
    c3f4:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(tmpset1);
    c3f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    c3f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    c3fa:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		}
		vdmFree(res);
    c3fe:	8d 81       	ldd	r24, Y+5	; 0x05
    c400:	9e 81       	ldd	r25, Y+6	; 0x06
    c402:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		return set1;
	}

	resultset = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    c406:	8d 85       	ldd	r24, Y+13	; 0x0d
    c408:	9e 85       	ldd	r25, Y+14	; 0x0e
    c40a:	01 96       	adiw	r24, 0x01	; 1
    c40c:	9e 87       	std	Y+14, r25	; 0x0e
    c40e:	8d 87       	std	Y+13, r24	; 0x0d
    c410:	eb 81       	ldd	r30, Y+3	; 0x03
    c412:	fc 81       	ldd	r31, Y+4	; 0x04
    c414:	22 81       	ldd	r18, Z+2	; 0x02
    c416:	33 81       	ldd	r19, Z+3	; 0x03
    c418:	8d 85       	ldd	r24, Y+13	; 0x0d
    c41a:	9e 85       	ldd	r25, Y+14	; 0x0e
    c41c:	82 17       	cp	r24, r18
    c41e:	93 07       	cpc	r25, r19
    c420:	0c f4       	brge	.+2      	; 0xc424 <vdmSetDifferenceGC+0x15c>
    c422:	9f cf       	rjmp	.-194    	; 0xc362 <vdmSetDifferenceGC+0x9a>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return resultset;
    c424:	8f 81       	ldd	r24, Y+7	; 0x07
    c426:	98 85       	ldd	r25, Y+8	; 0x08
    c428:	9e 8b       	std	Y+22, r25	; 0x16
    c42a:	8d 8b       	std	Y+21, r24	; 0x15
    c42c:	8d 89       	ldd	r24, Y+21	; 0x15
    c42e:	9e 89       	ldd	r25, Y+22	; 0x16
}
    c430:	66 96       	adiw	r28, 0x16	; 22
    c432:	0f b6       	in	r0, 0x3f	; 63
    c434:	f8 94       	cli
    c436:	de bf       	out	0x3e, r29	; 62
    c438:	0f be       	out	0x3f, r0	; 63
    c43a:	cd bf       	out	0x3d, r28	; 61
    c43c:	cf 91       	pop	r28
    c43e:	df 91       	pop	r29
    c440:	08 95       	ret

0000c442 <vdmSetSubset>:


TVP vdmSetSubset(TVP set1, TVP set2)
{
    c442:	df 93       	push	r29
    c444:	cf 93       	push	r28
    c446:	cd b7       	in	r28, 0x3d	; 61
    c448:	de b7       	in	r29, 0x3e	; 62
    c44a:	2e 97       	sbiw	r28, 0x0e	; 14
    c44c:	0f b6       	in	r0, 0x3f	; 63
    c44e:	f8 94       	cli
    c450:	de bf       	out	0x3e, r29	; 62
    c452:	0f be       	out	0x3f, r0	; 63
    c454:	cd bf       	out	0x3d, r28	; 61
    c456:	9a 87       	std	Y+10, r25	; 0x0a
    c458:	89 87       	std	Y+9, r24	; 0x09
    c45a:	7c 87       	std	Y+12, r23	; 0x0c
    c45c:	6b 87       	std	Y+11, r22	; 0x0b
	int i;
	TVP res;

	ASSERT_CHECK(set1);
    c45e:	e9 85       	ldd	r30, Y+9	; 0x09
    c460:	fa 85       	ldd	r31, Y+10	; 0x0a
    c462:	80 81       	ld	r24, Z
    c464:	91 81       	ldd	r25, Z+1	; 0x01
    c466:	87 30       	cpi	r24, 0x07	; 7
    c468:	91 05       	cpc	r25, r1
    c46a:	11 f0       	breq	.+4      	; 0xc470 <vdmSetSubset+0x2e>
    c46c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c470:	eb 85       	ldd	r30, Y+11	; 0x0b
    c472:	fc 85       	ldd	r31, Y+12	; 0x0c
    c474:	80 81       	ld	r24, Z
    c476:	91 81       	ldd	r25, Z+1	; 0x01
    c478:	87 30       	cpi	r24, 0x07	; 7
    c47a:	91 05       	cpc	r25, r1
    c47c:	11 f0       	breq	.+4      	; 0xc482 <vdmSetSubset+0x40>
    c47e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c482:	e9 85       	ldd	r30, Y+9	; 0x09
    c484:	fa 85       	ldd	r31, Y+10	; 0x0a
    c486:	84 81       	ldd	r24, Z+4	; 0x04
    c488:	95 81       	ldd	r25, Z+5	; 0x05
    c48a:	9c 83       	std	Y+4, r25	; 0x04
    c48c:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c48e:	eb 85       	ldd	r30, Y+11	; 0x0b
    c490:	fc 85       	ldd	r31, Y+12	; 0x0c
    c492:	84 81       	ldd	r24, Z+4	; 0x04
    c494:	95 81       	ldd	r25, Z+5	; 0x05
    c496:	9a 83       	std	Y+2, r25	; 0x02
    c498:	89 83       	std	Y+1, r24	; 0x01

	if(col1-> size > col2->size)
    c49a:	eb 81       	ldd	r30, Y+3	; 0x03
    c49c:	fc 81       	ldd	r31, Y+4	; 0x04
    c49e:	22 81       	ldd	r18, Z+2	; 0x02
    c4a0:	33 81       	ldd	r19, Z+3	; 0x03
    c4a2:	e9 81       	ldd	r30, Y+1	; 0x01
    c4a4:	fa 81       	ldd	r31, Y+2	; 0x02
    c4a6:	82 81       	ldd	r24, Z+2	; 0x02
    c4a8:	93 81       	ldd	r25, Z+3	; 0x03
    c4aa:	82 17       	cp	r24, r18
    c4ac:	93 07       	cpc	r25, r19
    c4ae:	34 f4       	brge	.+12     	; 0xc4bc <vdmSetSubset+0x7a>
	{
		return newBool(false);
    c4b0:	80 e0       	ldi	r24, 0x00	; 0
    c4b2:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    c4b6:	9e 87       	std	Y+14, r25	; 0x0e
    c4b8:	8d 87       	std	Y+13, r24	; 0x0d
    c4ba:	3f c0       	rjmp	.+126    	; 0xc53a <vdmSetSubset+0xf8>
	}

	for(i = 0; i < col1->size; i++)
    c4bc:	18 86       	std	Y+8, r1	; 0x08
    c4be:	1f 82       	std	Y+7, r1	; 0x07
    c4c0:	2e c0       	rjmp	.+92     	; 0xc51e <vdmSetSubset+0xdc>
	{

		res = vdmSetMemberOf(set2, (col1->value)[i]);
    c4c2:	eb 81       	ldd	r30, Y+3	; 0x03
    c4c4:	fc 81       	ldd	r31, Y+4	; 0x04
    c4c6:	20 81       	ld	r18, Z
    c4c8:	31 81       	ldd	r19, Z+1	; 0x01
    c4ca:	8f 81       	ldd	r24, Y+7	; 0x07
    c4cc:	98 85       	ldd	r25, Y+8	; 0x08
    c4ce:	88 0f       	add	r24, r24
    c4d0:	99 1f       	adc	r25, r25
    c4d2:	f9 01       	movw	r30, r18
    c4d4:	e8 0f       	add	r30, r24
    c4d6:	f9 1f       	adc	r31, r25
    c4d8:	20 81       	ld	r18, Z
    c4da:	31 81       	ldd	r19, Z+1	; 0x01
    c4dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    c4de:	9c 85       	ldd	r25, Y+12	; 0x0c
    c4e0:	b9 01       	movw	r22, r18
    c4e2:	0e 94 0a 5c 	call	0xb814	; 0xb814 <vdmSetMemberOf>
    c4e6:	9e 83       	std	Y+6, r25	; 0x06
    c4e8:	8d 83       	std	Y+5, r24	; 0x05
		if(!res->value.boolVal)
    c4ea:	ed 81       	ldd	r30, Y+5	; 0x05
    c4ec:	fe 81       	ldd	r31, Y+6	; 0x06
    c4ee:	94 81       	ldd	r25, Z+4	; 0x04
    c4f0:	81 e0       	ldi	r24, 0x01	; 1
    c4f2:	89 27       	eor	r24, r25
    c4f4:	88 23       	and	r24, r24
    c4f6:	51 f0       	breq	.+20     	; 0xc50c <vdmSetSubset+0xca>
		{
			free(res);
    c4f8:	8d 81       	ldd	r24, Y+5	; 0x05
    c4fa:	9e 81       	ldd	r25, Y+6	; 0x06
    c4fc:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
			return newBool(false);
    c500:	80 e0       	ldi	r24, 0x00	; 0
    c502:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    c506:	9e 87       	std	Y+14, r25	; 0x0e
    c508:	8d 87       	std	Y+13, r24	; 0x0d
    c50a:	17 c0       	rjmp	.+46     	; 0xc53a <vdmSetSubset+0xf8>
		}
		free(res);
    c50c:	8d 81       	ldd	r24, Y+5	; 0x05
    c50e:	9e 81       	ldd	r25, Y+6	; 0x06
    c510:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	if(col1-> size > col2->size)
	{
		return newBool(false);
	}

	for(i = 0; i < col1->size; i++)
    c514:	8f 81       	ldd	r24, Y+7	; 0x07
    c516:	98 85       	ldd	r25, Y+8	; 0x08
    c518:	01 96       	adiw	r24, 0x01	; 1
    c51a:	98 87       	std	Y+8, r25	; 0x08
    c51c:	8f 83       	std	Y+7, r24	; 0x07
    c51e:	eb 81       	ldd	r30, Y+3	; 0x03
    c520:	fc 81       	ldd	r31, Y+4	; 0x04
    c522:	22 81       	ldd	r18, Z+2	; 0x02
    c524:	33 81       	ldd	r19, Z+3	; 0x03
    c526:	8f 81       	ldd	r24, Y+7	; 0x07
    c528:	98 85       	ldd	r25, Y+8	; 0x08
    c52a:	82 17       	cp	r24, r18
    c52c:	93 07       	cpc	r25, r19
    c52e:	4c f2       	brlt	.-110    	; 0xc4c2 <vdmSetSubset+0x80>
			return newBool(false);
		}
		free(res);
	}

	return newBool(true);
    c530:	81 e0       	ldi	r24, 0x01	; 1
    c532:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    c536:	9e 87       	std	Y+14, r25	; 0x0e
    c538:	8d 87       	std	Y+13, r24	; 0x0d
    c53a:	8d 85       	ldd	r24, Y+13	; 0x0d
    c53c:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    c53e:	2e 96       	adiw	r28, 0x0e	; 14
    c540:	0f b6       	in	r0, 0x3f	; 63
    c542:	f8 94       	cli
    c544:	de bf       	out	0x3e, r29	; 62
    c546:	0f be       	out	0x3f, r0	; 63
    c548:	cd bf       	out	0x3d, r28	; 61
    c54a:	cf 91       	pop	r28
    c54c:	df 91       	pop	r29
    c54e:	08 95       	ret

0000c550 <vdmSetSubsetGC>:



TVP vdmSetSubsetGC(TVP set1, TVP set2, TVP *from)
{
    c550:	df 93       	push	r29
    c552:	cf 93       	push	r28
    c554:	cd b7       	in	r28, 0x3d	; 61
    c556:	de b7       	in	r29, 0x3e	; 62
    c558:	60 97       	sbiw	r28, 0x10	; 16
    c55a:	0f b6       	in	r0, 0x3f	; 63
    c55c:	f8 94       	cli
    c55e:	de bf       	out	0x3e, r29	; 62
    c560:	0f be       	out	0x3f, r0	; 63
    c562:	cd bf       	out	0x3d, r28	; 61
    c564:	9a 87       	std	Y+10, r25	; 0x0a
    c566:	89 87       	std	Y+9, r24	; 0x09
    c568:	7c 87       	std	Y+12, r23	; 0x0c
    c56a:	6b 87       	std	Y+11, r22	; 0x0b
    c56c:	5e 87       	std	Y+14, r21	; 0x0e
    c56e:	4d 87       	std	Y+13, r20	; 0x0d
	int i;
	TVP res;

	ASSERT_CHECK(set1);
    c570:	e9 85       	ldd	r30, Y+9	; 0x09
    c572:	fa 85       	ldd	r31, Y+10	; 0x0a
    c574:	80 81       	ld	r24, Z
    c576:	91 81       	ldd	r25, Z+1	; 0x01
    c578:	87 30       	cpi	r24, 0x07	; 7
    c57a:	91 05       	cpc	r25, r1
    c57c:	11 f0       	breq	.+4      	; 0xc582 <vdmSetSubsetGC+0x32>
    c57e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c582:	eb 85       	ldd	r30, Y+11	; 0x0b
    c584:	fc 85       	ldd	r31, Y+12	; 0x0c
    c586:	80 81       	ld	r24, Z
    c588:	91 81       	ldd	r25, Z+1	; 0x01
    c58a:	87 30       	cpi	r24, 0x07	; 7
    c58c:	91 05       	cpc	r25, r1
    c58e:	11 f0       	breq	.+4      	; 0xc594 <vdmSetSubsetGC+0x44>
    c590:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c594:	e9 85       	ldd	r30, Y+9	; 0x09
    c596:	fa 85       	ldd	r31, Y+10	; 0x0a
    c598:	84 81       	ldd	r24, Z+4	; 0x04
    c59a:	95 81       	ldd	r25, Z+5	; 0x05
    c59c:	9c 83       	std	Y+4, r25	; 0x04
    c59e:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c5a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    c5a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    c5a4:	84 81       	ldd	r24, Z+4	; 0x04
    c5a6:	95 81       	ldd	r25, Z+5	; 0x05
    c5a8:	9a 83       	std	Y+2, r25	; 0x02
    c5aa:	89 83       	std	Y+1, r24	; 0x01

	if(col1-> size > col2->size)
    c5ac:	eb 81       	ldd	r30, Y+3	; 0x03
    c5ae:	fc 81       	ldd	r31, Y+4	; 0x04
    c5b0:	22 81       	ldd	r18, Z+2	; 0x02
    c5b2:	33 81       	ldd	r19, Z+3	; 0x03
    c5b4:	e9 81       	ldd	r30, Y+1	; 0x01
    c5b6:	fa 81       	ldd	r31, Y+2	; 0x02
    c5b8:	82 81       	ldd	r24, Z+2	; 0x02
    c5ba:	93 81       	ldd	r25, Z+3	; 0x03
    c5bc:	82 17       	cp	r24, r18
    c5be:	93 07       	cpc	r25, r19
    c5c0:	4c f4       	brge	.+18     	; 0xc5d4 <vdmSetSubsetGC+0x84>
	{
		return newBoolGC(false, from);
    c5c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    c5c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    c5c6:	80 e0       	ldi	r24, 0x00	; 0
    c5c8:	b9 01       	movw	r22, r18
    c5ca:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    c5ce:	98 8b       	std	Y+16, r25	; 0x10
    c5d0:	8f 87       	std	Y+15, r24	; 0x0f
    c5d2:	45 c0       	rjmp	.+138    	; 0xc65e <vdmSetSubsetGC+0x10e>
	}

	for(i = 0; i < col1->size; i++)
    c5d4:	18 86       	std	Y+8, r1	; 0x08
    c5d6:	1f 82       	std	Y+7, r1	; 0x07
    c5d8:	31 c0       	rjmp	.+98     	; 0xc63c <vdmSetSubsetGC+0xec>
	{

		res = vdmSetMemberOf(set2, (col1->value)[i]);
    c5da:	eb 81       	ldd	r30, Y+3	; 0x03
    c5dc:	fc 81       	ldd	r31, Y+4	; 0x04
    c5de:	20 81       	ld	r18, Z
    c5e0:	31 81       	ldd	r19, Z+1	; 0x01
    c5e2:	8f 81       	ldd	r24, Y+7	; 0x07
    c5e4:	98 85       	ldd	r25, Y+8	; 0x08
    c5e6:	88 0f       	add	r24, r24
    c5e8:	99 1f       	adc	r25, r25
    c5ea:	f9 01       	movw	r30, r18
    c5ec:	e8 0f       	add	r30, r24
    c5ee:	f9 1f       	adc	r31, r25
    c5f0:	20 81       	ld	r18, Z
    c5f2:	31 81       	ldd	r19, Z+1	; 0x01
    c5f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    c5f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    c5f8:	b9 01       	movw	r22, r18
    c5fa:	0e 94 0a 5c 	call	0xb814	; 0xb814 <vdmSetMemberOf>
    c5fe:	9e 83       	std	Y+6, r25	; 0x06
    c600:	8d 83       	std	Y+5, r24	; 0x05
		if(!res->value.boolVal)
    c602:	ed 81       	ldd	r30, Y+5	; 0x05
    c604:	fe 81       	ldd	r31, Y+6	; 0x06
    c606:	94 81       	ldd	r25, Z+4	; 0x04
    c608:	81 e0       	ldi	r24, 0x01	; 1
    c60a:	89 27       	eor	r24, r25
    c60c:	88 23       	and	r24, r24
    c60e:	69 f0       	breq	.+26     	; 0xc62a <vdmSetSubsetGC+0xda>
		{
			free(res);
    c610:	8d 81       	ldd	r24, Y+5	; 0x05
    c612:	9e 81       	ldd	r25, Y+6	; 0x06
    c614:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
			return newBoolGC(false, from);
    c618:	2d 85       	ldd	r18, Y+13	; 0x0d
    c61a:	3e 85       	ldd	r19, Y+14	; 0x0e
    c61c:	80 e0       	ldi	r24, 0x00	; 0
    c61e:	b9 01       	movw	r22, r18
    c620:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    c624:	98 8b       	std	Y+16, r25	; 0x10
    c626:	8f 87       	std	Y+15, r24	; 0x0f
    c628:	1a c0       	rjmp	.+52     	; 0xc65e <vdmSetSubsetGC+0x10e>
		}
		free(res);
    c62a:	8d 81       	ldd	r24, Y+5	; 0x05
    c62c:	9e 81       	ldd	r25, Y+6	; 0x06
    c62e:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
	if(col1-> size > col2->size)
	{
		return newBoolGC(false, from);
	}

	for(i = 0; i < col1->size; i++)
    c632:	8f 81       	ldd	r24, Y+7	; 0x07
    c634:	98 85       	ldd	r25, Y+8	; 0x08
    c636:	01 96       	adiw	r24, 0x01	; 1
    c638:	98 87       	std	Y+8, r25	; 0x08
    c63a:	8f 83       	std	Y+7, r24	; 0x07
    c63c:	eb 81       	ldd	r30, Y+3	; 0x03
    c63e:	fc 81       	ldd	r31, Y+4	; 0x04
    c640:	22 81       	ldd	r18, Z+2	; 0x02
    c642:	33 81       	ldd	r19, Z+3	; 0x03
    c644:	8f 81       	ldd	r24, Y+7	; 0x07
    c646:	98 85       	ldd	r25, Y+8	; 0x08
    c648:	82 17       	cp	r24, r18
    c64a:	93 07       	cpc	r25, r19
    c64c:	34 f2       	brlt	.-116    	; 0xc5da <vdmSetSubsetGC+0x8a>
			return newBoolGC(false, from);
		}
		free(res);
	}

	return newBoolGC(true, from);
    c64e:	2d 85       	ldd	r18, Y+13	; 0x0d
    c650:	3e 85       	ldd	r19, Y+14	; 0x0e
    c652:	81 e0       	ldi	r24, 0x01	; 1
    c654:	b9 01       	movw	r22, r18
    c656:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    c65a:	98 8b       	std	Y+16, r25	; 0x10
    c65c:	8f 87       	std	Y+15, r24	; 0x0f
    c65e:	8f 85       	ldd	r24, Y+15	; 0x0f
    c660:	98 89       	ldd	r25, Y+16	; 0x10
}
    c662:	60 96       	adiw	r28, 0x10	; 16
    c664:	0f b6       	in	r0, 0x3f	; 63
    c666:	f8 94       	cli
    c668:	de bf       	out	0x3e, r29	; 62
    c66a:	0f be       	out	0x3f, r0	; 63
    c66c:	cd bf       	out	0x3d, r28	; 61
    c66e:	cf 91       	pop	r28
    c670:	df 91       	pop	r29
    c672:	08 95       	ret

0000c674 <vdmSetProperSubset>:



TVP vdmSetProperSubset(TVP set1, TVP set2)
{
    c674:	df 93       	push	r29
    c676:	cf 93       	push	r28
    c678:	cd b7       	in	r28, 0x3d	; 61
    c67a:	de b7       	in	r29, 0x3e	; 62
    c67c:	2a 97       	sbiw	r28, 0x0a	; 10
    c67e:	0f b6       	in	r0, 0x3f	; 63
    c680:	f8 94       	cli
    c682:	de bf       	out	0x3e, r29	; 62
    c684:	0f be       	out	0x3f, r0	; 63
    c686:	cd bf       	out	0x3d, r28	; 61
    c688:	9e 83       	std	Y+6, r25	; 0x06
    c68a:	8d 83       	std	Y+5, r24	; 0x05
    c68c:	78 87       	std	Y+8, r23	; 0x08
    c68e:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK(set1);
    c690:	ed 81       	ldd	r30, Y+5	; 0x05
    c692:	fe 81       	ldd	r31, Y+6	; 0x06
    c694:	80 81       	ld	r24, Z
    c696:	91 81       	ldd	r25, Z+1	; 0x01
    c698:	87 30       	cpi	r24, 0x07	; 7
    c69a:	91 05       	cpc	r25, r1
    c69c:	11 f0       	breq	.+4      	; 0xc6a2 <vdmSetProperSubset+0x2e>
    c69e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c6a2:	ef 81       	ldd	r30, Y+7	; 0x07
    c6a4:	f8 85       	ldd	r31, Y+8	; 0x08
    c6a6:	80 81       	ld	r24, Z
    c6a8:	91 81       	ldd	r25, Z+1	; 0x01
    c6aa:	87 30       	cpi	r24, 0x07	; 7
    c6ac:	91 05       	cpc	r25, r1
    c6ae:	11 f0       	breq	.+4      	; 0xc6b4 <vdmSetProperSubset+0x40>
    c6b0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c6b4:	ed 81       	ldd	r30, Y+5	; 0x05
    c6b6:	fe 81       	ldd	r31, Y+6	; 0x06
    c6b8:	84 81       	ldd	r24, Z+4	; 0x04
    c6ba:	95 81       	ldd	r25, Z+5	; 0x05
    c6bc:	9c 83       	std	Y+4, r25	; 0x04
    c6be:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c6c0:	ef 81       	ldd	r30, Y+7	; 0x07
    c6c2:	f8 85       	ldd	r31, Y+8	; 0x08
    c6c4:	84 81       	ldd	r24, Z+4	; 0x04
    c6c6:	95 81       	ldd	r25, Z+5	; 0x05
    c6c8:	9a 83       	std	Y+2, r25	; 0x02
    c6ca:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size >= col2->size)
    c6cc:	eb 81       	ldd	r30, Y+3	; 0x03
    c6ce:	fc 81       	ldd	r31, Y+4	; 0x04
    c6d0:	22 81       	ldd	r18, Z+2	; 0x02
    c6d2:	33 81       	ldd	r19, Z+3	; 0x03
    c6d4:	e9 81       	ldd	r30, Y+1	; 0x01
    c6d6:	fa 81       	ldd	r31, Y+2	; 0x02
    c6d8:	82 81       	ldd	r24, Z+2	; 0x02
    c6da:	93 81       	ldd	r25, Z+3	; 0x03
    c6dc:	28 17       	cp	r18, r24
    c6de:	39 07       	cpc	r19, r25
    c6e0:	34 f0       	brlt	.+12     	; 0xc6ee <vdmSetProperSubset+0x7a>
	{
		return newBool(false);
    c6e2:	80 e0       	ldi	r24, 0x00	; 0
    c6e4:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
    c6e8:	9a 87       	std	Y+10, r25	; 0x0a
    c6ea:	89 87       	std	Y+9, r24	; 0x09
    c6ec:	09 c0       	rjmp	.+18     	; 0xc700 <vdmSetProperSubset+0x8c>
	}

	return vdmSetSubset(set1, set2);
    c6ee:	8d 81       	ldd	r24, Y+5	; 0x05
    c6f0:	9e 81       	ldd	r25, Y+6	; 0x06
    c6f2:	2f 81       	ldd	r18, Y+7	; 0x07
    c6f4:	38 85       	ldd	r19, Y+8	; 0x08
    c6f6:	b9 01       	movw	r22, r18
    c6f8:	0e 94 21 62 	call	0xc442	; 0xc442 <vdmSetSubset>
    c6fc:	9a 87       	std	Y+10, r25	; 0x0a
    c6fe:	89 87       	std	Y+9, r24	; 0x09
    c700:	89 85       	ldd	r24, Y+9	; 0x09
    c702:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    c704:	2a 96       	adiw	r28, 0x0a	; 10
    c706:	0f b6       	in	r0, 0x3f	; 63
    c708:	f8 94       	cli
    c70a:	de bf       	out	0x3e, r29	; 62
    c70c:	0f be       	out	0x3f, r0	; 63
    c70e:	cd bf       	out	0x3d, r28	; 61
    c710:	cf 91       	pop	r28
    c712:	df 91       	pop	r29
    c714:	08 95       	ret

0000c716 <vdmSetProperSubsetGC>:


TVP vdmSetProperSubsetGC(TVP set1, TVP set2, TVP *from)
{
    c716:	df 93       	push	r29
    c718:	cf 93       	push	r28
    c71a:	cd b7       	in	r28, 0x3d	; 61
    c71c:	de b7       	in	r29, 0x3e	; 62
    c71e:	2c 97       	sbiw	r28, 0x0c	; 12
    c720:	0f b6       	in	r0, 0x3f	; 63
    c722:	f8 94       	cli
    c724:	de bf       	out	0x3e, r29	; 62
    c726:	0f be       	out	0x3f, r0	; 63
    c728:	cd bf       	out	0x3d, r28	; 61
    c72a:	9e 83       	std	Y+6, r25	; 0x06
    c72c:	8d 83       	std	Y+5, r24	; 0x05
    c72e:	78 87       	std	Y+8, r23	; 0x08
    c730:	6f 83       	std	Y+7, r22	; 0x07
    c732:	5a 87       	std	Y+10, r21	; 0x0a
    c734:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK(set1);
    c736:	ed 81       	ldd	r30, Y+5	; 0x05
    c738:	fe 81       	ldd	r31, Y+6	; 0x06
    c73a:	80 81       	ld	r24, Z
    c73c:	91 81       	ldd	r25, Z+1	; 0x01
    c73e:	87 30       	cpi	r24, 0x07	; 7
    c740:	91 05       	cpc	r25, r1
    c742:	11 f0       	breq	.+4      	; 0xc748 <vdmSetProperSubsetGC+0x32>
    c744:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c748:	ef 81       	ldd	r30, Y+7	; 0x07
    c74a:	f8 85       	ldd	r31, Y+8	; 0x08
    c74c:	80 81       	ld	r24, Z
    c74e:	91 81       	ldd	r25, Z+1	; 0x01
    c750:	87 30       	cpi	r24, 0x07	; 7
    c752:	91 05       	cpc	r25, r1
    c754:	11 f0       	breq	.+4      	; 0xc75a <vdmSetProperSubsetGC+0x44>
    c756:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c75a:	ed 81       	ldd	r30, Y+5	; 0x05
    c75c:	fe 81       	ldd	r31, Y+6	; 0x06
    c75e:	84 81       	ldd	r24, Z+4	; 0x04
    c760:	95 81       	ldd	r25, Z+5	; 0x05
    c762:	9c 83       	std	Y+4, r25	; 0x04
    c764:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c766:	ef 81       	ldd	r30, Y+7	; 0x07
    c768:	f8 85       	ldd	r31, Y+8	; 0x08
    c76a:	84 81       	ldd	r24, Z+4	; 0x04
    c76c:	95 81       	ldd	r25, Z+5	; 0x05
    c76e:	9a 83       	std	Y+2, r25	; 0x02
    c770:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size >= col2->size)
    c772:	eb 81       	ldd	r30, Y+3	; 0x03
    c774:	fc 81       	ldd	r31, Y+4	; 0x04
    c776:	22 81       	ldd	r18, Z+2	; 0x02
    c778:	33 81       	ldd	r19, Z+3	; 0x03
    c77a:	e9 81       	ldd	r30, Y+1	; 0x01
    c77c:	fa 81       	ldd	r31, Y+2	; 0x02
    c77e:	82 81       	ldd	r24, Z+2	; 0x02
    c780:	93 81       	ldd	r25, Z+3	; 0x03
    c782:	28 17       	cp	r18, r24
    c784:	39 07       	cpc	r19, r25
    c786:	4c f0       	brlt	.+18     	; 0xc79a <vdmSetProperSubsetGC+0x84>
	{
		return newBoolGC(false, from);
    c788:	29 85       	ldd	r18, Y+9	; 0x09
    c78a:	3a 85       	ldd	r19, Y+10	; 0x0a
    c78c:	80 e0       	ldi	r24, 0x00	; 0
    c78e:	b9 01       	movw	r22, r18
    c790:	0e 94 0f 4b 	call	0x961e	; 0x961e <newBoolGC>
    c794:	9c 87       	std	Y+12, r25	; 0x0c
    c796:	8b 87       	std	Y+11, r24	; 0x0b
    c798:	0b c0       	rjmp	.+22     	; 0xc7b0 <vdmSetProperSubsetGC+0x9a>
	}

	return vdmSetSubsetGC(set1, set2, from);
    c79a:	8d 81       	ldd	r24, Y+5	; 0x05
    c79c:	9e 81       	ldd	r25, Y+6	; 0x06
    c79e:	2f 81       	ldd	r18, Y+7	; 0x07
    c7a0:	38 85       	ldd	r19, Y+8	; 0x08
    c7a2:	49 85       	ldd	r20, Y+9	; 0x09
    c7a4:	5a 85       	ldd	r21, Y+10	; 0x0a
    c7a6:	b9 01       	movw	r22, r18
    c7a8:	0e 94 a8 62 	call	0xc550	; 0xc550 <vdmSetSubsetGC>
    c7ac:	9c 87       	std	Y+12, r25	; 0x0c
    c7ae:	8b 87       	std	Y+11, r24	; 0x0b
    c7b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    c7b2:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    c7b4:	2c 96       	adiw	r28, 0x0c	; 12
    c7b6:	0f b6       	in	r0, 0x3f	; 63
    c7b8:	f8 94       	cli
    c7ba:	de bf       	out	0x3e, r29	; 62
    c7bc:	0f be       	out	0x3f, r0	; 63
    c7be:	cd bf       	out	0x3d, r28	; 61
    c7c0:	cf 91       	pop	r28
    c7c2:	df 91       	pop	r29
    c7c4:	08 95       	ret

0000c7c6 <vdmSetEquals>:



TVP vdmSetEquals(TVP set1, TVP set2)
{
    c7c6:	df 93       	push	r29
    c7c8:	cf 93       	push	r28
    c7ca:	cd b7       	in	r28, 0x3d	; 61
    c7cc:	de b7       	in	r29, 0x3e	; 62
    c7ce:	2b 97       	sbiw	r28, 0x0b	; 11
    c7d0:	0f b6       	in	r0, 0x3f	; 63
    c7d2:	f8 94       	cli
    c7d4:	de bf       	out	0x3e, r29	; 62
    c7d6:	0f be       	out	0x3f, r0	; 63
    c7d8:	cd bf       	out	0x3d, r28	; 61
    c7da:	9f 83       	std	Y+7, r25	; 0x07
    c7dc:	8e 83       	std	Y+6, r24	; 0x06
    c7de:	79 87       	std	Y+9, r23	; 0x09
    c7e0:	68 87       	std	Y+8, r22	; 0x08
	ASSERT_CHECK(set1);
    c7e2:	ee 81       	ldd	r30, Y+6	; 0x06
    c7e4:	ff 81       	ldd	r31, Y+7	; 0x07
    c7e6:	80 81       	ld	r24, Z
    c7e8:	91 81       	ldd	r25, Z+1	; 0x01
    c7ea:	87 30       	cpi	r24, 0x07	; 7
    c7ec:	91 05       	cpc	r25, r1
    c7ee:	11 f0       	breq	.+4      	; 0xc7f4 <vdmSetEquals+0x2e>
    c7f0:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c7f4:	e8 85       	ldd	r30, Y+8	; 0x08
    c7f6:	f9 85       	ldd	r31, Y+9	; 0x09
    c7f8:	80 81       	ld	r24, Z
    c7fa:	91 81       	ldd	r25, Z+1	; 0x01
    c7fc:	87 30       	cpi	r24, 0x07	; 7
    c7fe:	91 05       	cpc	r25, r1
    c800:	11 f0       	breq	.+4      	; 0xc806 <vdmSetEquals+0x40>
    c802:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	TVP subset12Res;
	TVP subset21Res;
	bool subsetRes;

	/* Check mutual inclusion.  */
	subset12Res = vdmSetSubset(set1, set2);
    c806:	8e 81       	ldd	r24, Y+6	; 0x06
    c808:	9f 81       	ldd	r25, Y+7	; 0x07
    c80a:	28 85       	ldd	r18, Y+8	; 0x08
    c80c:	39 85       	ldd	r19, Y+9	; 0x09
    c80e:	b9 01       	movw	r22, r18
    c810:	0e 94 21 62 	call	0xc442	; 0xc442 <vdmSetSubset>
    c814:	9d 83       	std	Y+5, r25	; 0x05
    c816:	8c 83       	std	Y+4, r24	; 0x04
	subset21Res = vdmSetSubset(set2, set1);
    c818:	88 85       	ldd	r24, Y+8	; 0x08
    c81a:	99 85       	ldd	r25, Y+9	; 0x09
    c81c:	2e 81       	ldd	r18, Y+6	; 0x06
    c81e:	3f 81       	ldd	r19, Y+7	; 0x07
    c820:	b9 01       	movw	r22, r18
    c822:	0e 94 21 62 	call	0xc442	; 0xc442 <vdmSetSubset>
    c826:	9b 83       	std	Y+3, r25	; 0x03
    c828:	8a 83       	std	Y+2, r24	; 0x02

	subsetRes = subset12Res->value.boolVal && subset21Res->value.boolVal;
    c82a:	ec 81       	ldd	r30, Y+4	; 0x04
    c82c:	fd 81       	ldd	r31, Y+5	; 0x05
    c82e:	94 81       	ldd	r25, Z+4	; 0x04
    c830:	81 e0       	ldi	r24, 0x01	; 1
    c832:	89 27       	eor	r24, r25
    c834:	88 23       	and	r24, r24
    c836:	61 f4       	brne	.+24     	; 0xc850 <vdmSetEquals+0x8a>
    c838:	ea 81       	ldd	r30, Y+2	; 0x02
    c83a:	fb 81       	ldd	r31, Y+3	; 0x03
    c83c:	94 81       	ldd	r25, Z+4	; 0x04
    c83e:	81 e0       	ldi	r24, 0x01	; 1
    c840:	89 27       	eor	r24, r25
    c842:	88 23       	and	r24, r24
    c844:	29 f4       	brne	.+10     	; 0xc850 <vdmSetEquals+0x8a>
    c846:	81 e0       	ldi	r24, 0x01	; 1
    c848:	90 e0       	ldi	r25, 0x00	; 0
    c84a:	9b 87       	std	Y+11, r25	; 0x0b
    c84c:	8a 87       	std	Y+10, r24	; 0x0a
    c84e:	02 c0       	rjmp	.+4      	; 0xc854 <vdmSetEquals+0x8e>
    c850:	1b 86       	std	Y+11, r1	; 0x0b
    c852:	1a 86       	std	Y+10, r1	; 0x0a
    c854:	9a 85       	ldd	r25, Y+10	; 0x0a
    c856:	99 83       	std	Y+1, r25	; 0x01
	vdmFree(subset12Res);
    c858:	8c 81       	ldd	r24, Y+4	; 0x04
    c85a:	9d 81       	ldd	r25, Y+5	; 0x05
    c85c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	vdmFree(subset21Res);
    c860:	8a 81       	ldd	r24, Y+2	; 0x02
    c862:	9b 81       	ldd	r25, Y+3	; 0x03
    c864:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>

	return newBool(subsetRes);
    c868:	89 81       	ldd	r24, Y+1	; 0x01
    c86a:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <newBool>
}
    c86e:	2b 96       	adiw	r28, 0x0b	; 11
    c870:	0f b6       	in	r0, 0x3f	; 63
    c872:	f8 94       	cli
    c874:	de bf       	out	0x3e, r29	; 62
    c876:	0f be       	out	0x3f, r0	; 63
    c878:	cd bf       	out	0x3d, r28	; 61
    c87a:	cf 91       	pop	r28
    c87c:	df 91       	pop	r29
    c87e:	08 95       	ret

0000c880 <vdmSetNotEquals>:


TVP vdmSetNotEquals(TVP set1, TVP set2)
{
    c880:	df 93       	push	r29
    c882:	cf 93       	push	r28
    c884:	00 d0       	rcall	.+0      	; 0xc886 <vdmSetNotEquals+0x6>
    c886:	00 d0       	rcall	.+0      	; 0xc888 <vdmSetNotEquals+0x8>
    c888:	cd b7       	in	r28, 0x3d	; 61
    c88a:	de b7       	in	r29, 0x3e	; 62
    c88c:	9a 83       	std	Y+2, r25	; 0x02
    c88e:	89 83       	std	Y+1, r24	; 0x01
    c890:	7c 83       	std	Y+4, r23	; 0x04
    c892:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK(set1);
    c894:	e9 81       	ldd	r30, Y+1	; 0x01
    c896:	fa 81       	ldd	r31, Y+2	; 0x02
    c898:	80 81       	ld	r24, Z
    c89a:	91 81       	ldd	r25, Z+1	; 0x01
    c89c:	87 30       	cpi	r24, 0x07	; 7
    c89e:	91 05       	cpc	r25, r1
    c8a0:	11 f0       	breq	.+4      	; 0xc8a6 <vdmSetNotEquals+0x26>
    c8a2:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c8a6:	eb 81       	ldd	r30, Y+3	; 0x03
    c8a8:	fc 81       	ldd	r31, Y+4	; 0x04
    c8aa:	80 81       	ld	r24, Z
    c8ac:	91 81       	ldd	r25, Z+1	; 0x01
    c8ae:	87 30       	cpi	r24, 0x07	; 7
    c8b0:	91 05       	cpc	r25, r1
    c8b2:	11 f0       	breq	.+4      	; 0xc8b8 <vdmSetNotEquals+0x38>
    c8b4:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	return vdmInEquals(set1, set2);
    c8b8:	89 81       	ldd	r24, Y+1	; 0x01
    c8ba:	9a 81       	ldd	r25, Y+2	; 0x02
    c8bc:	2b 81       	ldd	r18, Y+3	; 0x03
    c8be:	3c 81       	ldd	r19, Y+4	; 0x04
    c8c0:	b9 01       	movw	r22, r18
    c8c2:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <vdmInEquals>
}
    c8c6:	0f 90       	pop	r0
    c8c8:	0f 90       	pop	r0
    c8ca:	0f 90       	pop	r0
    c8cc:	0f 90       	pop	r0
    c8ce:	cf 91       	pop	r28
    c8d0:	df 91       	pop	r29
    c8d2:	08 95       	ret

0000c8d4 <vdmSetNotEqualsGC>:


TVP vdmSetNotEqualsGC(TVP set1, TVP set2, TVP *from)
{
    c8d4:	df 93       	push	r29
    c8d6:	cf 93       	push	r28
    c8d8:	00 d0       	rcall	.+0      	; 0xc8da <vdmSetNotEqualsGC+0x6>
    c8da:	00 d0       	rcall	.+0      	; 0xc8dc <vdmSetNotEqualsGC+0x8>
    c8dc:	00 d0       	rcall	.+0      	; 0xc8de <vdmSetNotEqualsGC+0xa>
    c8de:	cd b7       	in	r28, 0x3d	; 61
    c8e0:	de b7       	in	r29, 0x3e	; 62
    c8e2:	9a 83       	std	Y+2, r25	; 0x02
    c8e4:	89 83       	std	Y+1, r24	; 0x01
    c8e6:	7c 83       	std	Y+4, r23	; 0x04
    c8e8:	6b 83       	std	Y+3, r22	; 0x03
    c8ea:	5e 83       	std	Y+6, r21	; 0x06
    c8ec:	4d 83       	std	Y+5, r20	; 0x05
	ASSERT_CHECK(set1);
    c8ee:	e9 81       	ldd	r30, Y+1	; 0x01
    c8f0:	fa 81       	ldd	r31, Y+2	; 0x02
    c8f2:	80 81       	ld	r24, Z
    c8f4:	91 81       	ldd	r25, Z+1	; 0x01
    c8f6:	87 30       	cpi	r24, 0x07	; 7
    c8f8:	91 05       	cpc	r25, r1
    c8fa:	11 f0       	breq	.+4      	; 0xc900 <vdmSetNotEqualsGC+0x2c>
    c8fc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	ASSERT_CHECK(set2);
    c900:	eb 81       	ldd	r30, Y+3	; 0x03
    c902:	fc 81       	ldd	r31, Y+4	; 0x04
    c904:	80 81       	ld	r24, Z
    c906:	91 81       	ldd	r25, Z+1	; 0x01
    c908:	87 30       	cpi	r24, 0x07	; 7
    c90a:	91 05       	cpc	r25, r1
    c90c:	11 f0       	breq	.+4      	; 0xc912 <vdmSetNotEqualsGC+0x3e>
    c90e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	return vdmInEqualsGC(set1, set2, from);
    c912:	89 81       	ldd	r24, Y+1	; 0x01
    c914:	9a 81       	ldd	r25, Y+2	; 0x02
    c916:	2b 81       	ldd	r18, Y+3	; 0x03
    c918:	3c 81       	ldd	r19, Y+4	; 0x04
    c91a:	4d 81       	ldd	r20, Y+5	; 0x05
    c91c:	5e 81       	ldd	r21, Y+6	; 0x06
    c91e:	b9 01       	movw	r22, r18
    c920:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <vdmInEqualsGC>
}
    c924:	26 96       	adiw	r28, 0x06	; 6
    c926:	0f b6       	in	r0, 0x3f	; 63
    c928:	f8 94       	cli
    c92a:	de bf       	out	0x3e, r29	; 62
    c92c:	0f be       	out	0x3f, r0	; 63
    c92e:	cd bf       	out	0x3d, r28	; 61
    c930:	cf 91       	pop	r28
    c932:	df 91       	pop	r29
    c934:	08 95       	ret

0000c936 <vdmSetCard>:



TVP vdmSetCard(TVP set)
{
    c936:	df 93       	push	r29
    c938:	cf 93       	push	r28
    c93a:	00 d0       	rcall	.+0      	; 0xc93c <vdmSetCard+0x6>
    c93c:	00 d0       	rcall	.+0      	; 0xc93e <vdmSetCard+0x8>
    c93e:	cd b7       	in	r28, 0x3d	; 61
    c940:	de b7       	in	r29, 0x3e	; 62
    c942:	9c 83       	std	Y+4, r25	; 0x04
    c944:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK(set);
    c946:	eb 81       	ldd	r30, Y+3	; 0x03
    c948:	fc 81       	ldd	r31, Y+4	; 0x04
    c94a:	80 81       	ld	r24, Z
    c94c:	91 81       	ldd	r25, Z+1	; 0x01
    c94e:	87 30       	cpi	r24, 0x07	; 7
    c950:	91 05       	cpc	r25, r1
    c952:	11 f0       	breq	.+4      	; 0xc958 <vdmSetCard+0x22>
    c954:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col, set);
    c958:	eb 81       	ldd	r30, Y+3	; 0x03
    c95a:	fc 81       	ldd	r31, Y+4	; 0x04
    c95c:	84 81       	ldd	r24, Z+4	; 0x04
    c95e:	95 81       	ldd	r25, Z+5	; 0x05
    c960:	9a 83       	std	Y+2, r25	; 0x02
    c962:	89 83       	std	Y+1, r24	; 0x01

	return newInt(col->size);
    c964:	e9 81       	ldd	r30, Y+1	; 0x01
    c966:	fa 81       	ldd	r31, Y+2	; 0x02
    c968:	82 81       	ldd	r24, Z+2	; 0x02
    c96a:	93 81       	ldd	r25, Z+3	; 0x03
    c96c:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <newInt>
}
    c970:	0f 90       	pop	r0
    c972:	0f 90       	pop	r0
    c974:	0f 90       	pop	r0
    c976:	0f 90       	pop	r0
    c978:	cf 91       	pop	r28
    c97a:	df 91       	pop	r29
    c97c:	08 95       	ret

0000c97e <vdmSetCardGC>:


TVP vdmSetCardGC(TVP set, TVP *from)
{
    c97e:	df 93       	push	r29
    c980:	cf 93       	push	r28
    c982:	00 d0       	rcall	.+0      	; 0xc984 <vdmSetCardGC+0x6>
    c984:	00 d0       	rcall	.+0      	; 0xc986 <vdmSetCardGC+0x8>
    c986:	00 d0       	rcall	.+0      	; 0xc988 <vdmSetCardGC+0xa>
    c988:	cd b7       	in	r28, 0x3d	; 61
    c98a:	de b7       	in	r29, 0x3e	; 62
    c98c:	9c 83       	std	Y+4, r25	; 0x04
    c98e:	8b 83       	std	Y+3, r24	; 0x03
    c990:	7e 83       	std	Y+6, r23	; 0x06
    c992:	6d 83       	std	Y+5, r22	; 0x05
	ASSERT_CHECK(set);
    c994:	eb 81       	ldd	r30, Y+3	; 0x03
    c996:	fc 81       	ldd	r31, Y+4	; 0x04
    c998:	80 81       	ld	r24, Z
    c99a:	91 81       	ldd	r25, Z+1	; 0x01
    c99c:	87 30       	cpi	r24, 0x07	; 7
    c99e:	91 05       	cpc	r25, r1
    c9a0:	11 f0       	breq	.+4      	; 0xc9a6 <vdmSetCardGC+0x28>
    c9a2:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	UNWRAP_COLLECTION(col, set);
    c9a6:	eb 81       	ldd	r30, Y+3	; 0x03
    c9a8:	fc 81       	ldd	r31, Y+4	; 0x04
    c9aa:	84 81       	ldd	r24, Z+4	; 0x04
    c9ac:	95 81       	ldd	r25, Z+5	; 0x05
    c9ae:	9a 83       	std	Y+2, r25	; 0x02
    c9b0:	89 83       	std	Y+1, r24	; 0x01

	return newIntGC(col->size, from);
    c9b2:	e9 81       	ldd	r30, Y+1	; 0x01
    c9b4:	fa 81       	ldd	r31, Y+2	; 0x02
    c9b6:	82 81       	ldd	r24, Z+2	; 0x02
    c9b8:	93 81       	ldd	r25, Z+3	; 0x03
    c9ba:	2d 81       	ldd	r18, Y+5	; 0x05
    c9bc:	3e 81       	ldd	r19, Y+6	; 0x06
    c9be:	b9 01       	movw	r22, r18
    c9c0:	0e 94 e3 4a 	call	0x95c6	; 0x95c6 <newIntGC>
}
    c9c4:	26 96       	adiw	r28, 0x06	; 6
    c9c6:	0f b6       	in	r0, 0x3f	; 63
    c9c8:	f8 94       	cli
    c9ca:	de bf       	out	0x3e, r29	; 62
    c9cc:	0f be       	out	0x3f, r0	; 63
    c9ce:	cd bf       	out	0x3d, r28	; 61
    c9d0:	cf 91       	pop	r28
    c9d2:	df 91       	pop	r29
    c9d4:	08 95       	ret

0000c9d6 <vdmSetDunion>:



TVP vdmSetDunion(TVP set)
{
    c9d6:	df 93       	push	r29
    c9d8:	cf 93       	push	r28
    c9da:	cd b7       	in	r28, 0x3d	; 61
    c9dc:	de b7       	in	r29, 0x3e	; 62
    c9de:	2a 97       	sbiw	r28, 0x0a	; 10
    c9e0:	0f b6       	in	r0, 0x3f	; 63
    c9e2:	f8 94       	cli
    c9e4:	de bf       	out	0x3e, r29	; 62
    c9e6:	0f be       	out	0x3f, r0	; 63
    c9e8:	cd bf       	out	0x3d, r28	; 61
    c9ea:	9a 87       	std	Y+10, r25	; 0x0a
    c9ec:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP unionset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    c9ee:	e9 85       	ldd	r30, Y+9	; 0x09
    c9f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    c9f2:	80 81       	ld	r24, Z
    c9f4:	91 81       	ldd	r25, Z+1	; 0x01
    c9f6:	87 30       	cpi	r24, 0x07	; 7
    c9f8:	91 05       	cpc	r25, r1
    c9fa:	11 f0       	breq	.+4      	; 0xca00 <vdmSetDunion+0x2a>
    c9fc:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col, set);
    ca00:	e9 85       	ldd	r30, Y+9	; 0x09
    ca02:	fa 85       	ldd	r31, Y+10	; 0x0a
    ca04:	84 81       	ldd	r24, Z+4	; 0x04
    ca06:	95 81       	ldd	r25, Z+5	; 0x05
    ca08:	9a 83       	std	Y+2, r25	; 0x02
    ca0a:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    ca0c:	18 86       	std	Y+8, r1	; 0x08
    ca0e:	1f 82       	std	Y+7, r1	; 0x07
    ca10:	1a c0       	rjmp	.+52     	; 0xca46 <vdmSetDunion+0x70>
	{
		ASSERT_CHECK((col->value)[i]);
    ca12:	e9 81       	ldd	r30, Y+1	; 0x01
    ca14:	fa 81       	ldd	r31, Y+2	; 0x02
    ca16:	20 81       	ld	r18, Z
    ca18:	31 81       	ldd	r19, Z+1	; 0x01
    ca1a:	8f 81       	ldd	r24, Y+7	; 0x07
    ca1c:	98 85       	ldd	r25, Y+8	; 0x08
    ca1e:	88 0f       	add	r24, r24
    ca20:	99 1f       	adc	r25, r25
    ca22:	f9 01       	movw	r30, r18
    ca24:	e8 0f       	add	r30, r24
    ca26:	f9 1f       	adc	r31, r25
    ca28:	01 90       	ld	r0, Z+
    ca2a:	f0 81       	ld	r31, Z
    ca2c:	e0 2d       	mov	r30, r0
    ca2e:	80 81       	ld	r24, Z
    ca30:	91 81       	ldd	r25, Z+1	; 0x01
    ca32:	87 30       	cpi	r24, 0x07	; 7
    ca34:	91 05       	cpc	r25, r1
    ca36:	11 f0       	breq	.+4      	; 0xca3c <vdmSetDunion+0x66>
    ca38:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    ca3c:	8f 81       	ldd	r24, Y+7	; 0x07
    ca3e:	98 85       	ldd	r25, Y+8	; 0x08
    ca40:	01 96       	adiw	r24, 0x01	; 1
    ca42:	98 87       	std	Y+8, r25	; 0x08
    ca44:	8f 83       	std	Y+7, r24	; 0x07
    ca46:	e9 81       	ldd	r30, Y+1	; 0x01
    ca48:	fa 81       	ldd	r31, Y+2	; 0x02
    ca4a:	22 81       	ldd	r18, Z+2	; 0x02
    ca4c:	33 81       	ldd	r19, Z+3	; 0x03
    ca4e:	8f 81       	ldd	r24, Y+7	; 0x07
    ca50:	98 85       	ldd	r25, Y+8	; 0x08
    ca52:	82 17       	cp	r24, r18
    ca54:	93 07       	cpc	r25, r19
    ca56:	ec f2       	brlt	.-70     	; 0xca12 <vdmSetDunion+0x3c>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	unionset = newSetVar(0, NULL);
    ca58:	00 d0       	rcall	.+0      	; 0xca5a <vdmSetDunion+0x84>
    ca5a:	00 d0       	rcall	.+0      	; 0xca5c <vdmSetDunion+0x86>
    ca5c:	ed b7       	in	r30, 0x3d	; 61
    ca5e:	fe b7       	in	r31, 0x3e	; 62
    ca60:	31 96       	adiw	r30, 0x01	; 1
    ca62:	11 82       	std	Z+1, r1	; 0x01
    ca64:	10 82       	st	Z, r1
    ca66:	13 82       	std	Z+3, r1	; 0x03
    ca68:	12 82       	std	Z+2, r1	; 0x02
    ca6a:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    ca6e:	0f 90       	pop	r0
    ca70:	0f 90       	pop	r0
    ca72:	0f 90       	pop	r0
    ca74:	0f 90       	pop	r0
    ca76:	9e 83       	std	Y+6, r25	; 0x06
    ca78:	8d 83       	std	Y+5, r24	; 0x05

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    ca7a:	18 86       	std	Y+8, r1	; 0x08
    ca7c:	1f 82       	std	Y+7, r1	; 0x07
    ca7e:	21 c0       	rjmp	.+66     	; 0xcac2 <vdmSetDunion+0xec>
	{
		set1 = vdmSetUnion(unionset, (col->value)[i]);
    ca80:	e9 81       	ldd	r30, Y+1	; 0x01
    ca82:	fa 81       	ldd	r31, Y+2	; 0x02
    ca84:	20 81       	ld	r18, Z
    ca86:	31 81       	ldd	r19, Z+1	; 0x01
    ca88:	8f 81       	ldd	r24, Y+7	; 0x07
    ca8a:	98 85       	ldd	r25, Y+8	; 0x08
    ca8c:	88 0f       	add	r24, r24
    ca8e:	99 1f       	adc	r25, r25
    ca90:	f9 01       	movw	r30, r18
    ca92:	e8 0f       	add	r30, r24
    ca94:	f9 1f       	adc	r31, r25
    ca96:	20 81       	ld	r18, Z
    ca98:	31 81       	ldd	r19, Z+1	; 0x01
    ca9a:	8d 81       	ldd	r24, Y+5	; 0x05
    ca9c:	9e 81       	ldd	r25, Y+6	; 0x06
    ca9e:	b9 01       	movw	r22, r18
    caa0:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    caa4:	9c 83       	std	Y+4, r25	; 0x04
    caa6:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(unionset);
    caa8:	8d 81       	ldd	r24, Y+5	; 0x05
    caaa:	9e 81       	ldd	r25, Y+6	; 0x06
    caac:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		unionset = set1;
    cab0:	8b 81       	ldd	r24, Y+3	; 0x03
    cab2:	9c 81       	ldd	r25, Y+4	; 0x04
    cab4:	9e 83       	std	Y+6, r25	; 0x06
    cab6:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	unionset = newSetVar(0, NULL);

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    cab8:	8f 81       	ldd	r24, Y+7	; 0x07
    caba:	98 85       	ldd	r25, Y+8	; 0x08
    cabc:	01 96       	adiw	r24, 0x01	; 1
    cabe:	98 87       	std	Y+8, r25	; 0x08
    cac0:	8f 83       	std	Y+7, r24	; 0x07
    cac2:	e9 81       	ldd	r30, Y+1	; 0x01
    cac4:	fa 81       	ldd	r31, Y+2	; 0x02
    cac6:	22 81       	ldd	r18, Z+2	; 0x02
    cac8:	33 81       	ldd	r19, Z+3	; 0x03
    caca:	8f 81       	ldd	r24, Y+7	; 0x07
    cacc:	98 85       	ldd	r25, Y+8	; 0x08
    cace:	82 17       	cp	r24, r18
    cad0:	93 07       	cpc	r25, r19
    cad2:	b4 f2       	brlt	.-84     	; 0xca80 <vdmSetDunion+0xaa>
		set1 = vdmSetUnion(unionset, (col->value)[i]);
		vdmFree(unionset);
		unionset = set1;
	}

	return unionset;
    cad4:	8d 81       	ldd	r24, Y+5	; 0x05
    cad6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    cad8:	2a 96       	adiw	r28, 0x0a	; 10
    cada:	0f b6       	in	r0, 0x3f	; 63
    cadc:	f8 94       	cli
    cade:	de bf       	out	0x3e, r29	; 62
    cae0:	0f be       	out	0x3f, r0	; 63
    cae2:	cd bf       	out	0x3d, r28	; 61
    cae4:	cf 91       	pop	r28
    cae6:	df 91       	pop	r29
    cae8:	08 95       	ret

0000caea <vdmSetDunionGC>:


TVP vdmSetDunionGC(TVP set, TVP *from)
{
    caea:	df 93       	push	r29
    caec:	cf 93       	push	r28
    caee:	cd b7       	in	r28, 0x3d	; 61
    caf0:	de b7       	in	r29, 0x3e	; 62
    caf2:	2c 97       	sbiw	r28, 0x0c	; 12
    caf4:	0f b6       	in	r0, 0x3f	; 63
    caf6:	f8 94       	cli
    caf8:	de bf       	out	0x3e, r29	; 62
    cafa:	0f be       	out	0x3f, r0	; 63
    cafc:	cd bf       	out	0x3d, r28	; 61
    cafe:	9a 87       	std	Y+10, r25	; 0x0a
    cb00:	89 87       	std	Y+9, r24	; 0x09
    cb02:	7c 87       	std	Y+12, r23	; 0x0c
    cb04:	6b 87       	std	Y+11, r22	; 0x0b
	int i;
	TVP unionset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    cb06:	e9 85       	ldd	r30, Y+9	; 0x09
    cb08:	fa 85       	ldd	r31, Y+10	; 0x0a
    cb0a:	80 81       	ld	r24, Z
    cb0c:	91 81       	ldd	r25, Z+1	; 0x01
    cb0e:	87 30       	cpi	r24, 0x07	; 7
    cb10:	91 05       	cpc	r25, r1
    cb12:	11 f0       	breq	.+4      	; 0xcb18 <vdmSetDunionGC+0x2e>
    cb14:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col, set);
    cb18:	e9 85       	ldd	r30, Y+9	; 0x09
    cb1a:	fa 85       	ldd	r31, Y+10	; 0x0a
    cb1c:	84 81       	ldd	r24, Z+4	; 0x04
    cb1e:	95 81       	ldd	r25, Z+5	; 0x05
    cb20:	9a 83       	std	Y+2, r25	; 0x02
    cb22:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    cb24:	18 86       	std	Y+8, r1	; 0x08
    cb26:	1f 82       	std	Y+7, r1	; 0x07
    cb28:	1a c0       	rjmp	.+52     	; 0xcb5e <vdmSetDunionGC+0x74>
	{
		ASSERT_CHECK((col->value)[i]);
    cb2a:	e9 81       	ldd	r30, Y+1	; 0x01
    cb2c:	fa 81       	ldd	r31, Y+2	; 0x02
    cb2e:	20 81       	ld	r18, Z
    cb30:	31 81       	ldd	r19, Z+1	; 0x01
    cb32:	8f 81       	ldd	r24, Y+7	; 0x07
    cb34:	98 85       	ldd	r25, Y+8	; 0x08
    cb36:	88 0f       	add	r24, r24
    cb38:	99 1f       	adc	r25, r25
    cb3a:	f9 01       	movw	r30, r18
    cb3c:	e8 0f       	add	r30, r24
    cb3e:	f9 1f       	adc	r31, r25
    cb40:	01 90       	ld	r0, Z+
    cb42:	f0 81       	ld	r31, Z
    cb44:	e0 2d       	mov	r30, r0
    cb46:	80 81       	ld	r24, Z
    cb48:	91 81       	ldd	r25, Z+1	; 0x01
    cb4a:	87 30       	cpi	r24, 0x07	; 7
    cb4c:	91 05       	cpc	r25, r1
    cb4e:	11 f0       	breq	.+4      	; 0xcb54 <vdmSetDunionGC+0x6a>
    cb50:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    cb54:	8f 81       	ldd	r24, Y+7	; 0x07
    cb56:	98 85       	ldd	r25, Y+8	; 0x08
    cb58:	01 96       	adiw	r24, 0x01	; 1
    cb5a:	98 87       	std	Y+8, r25	; 0x08
    cb5c:	8f 83       	std	Y+7, r24	; 0x07
    cb5e:	e9 81       	ldd	r30, Y+1	; 0x01
    cb60:	fa 81       	ldd	r31, Y+2	; 0x02
    cb62:	22 81       	ldd	r18, Z+2	; 0x02
    cb64:	33 81       	ldd	r19, Z+3	; 0x03
    cb66:	8f 81       	ldd	r24, Y+7	; 0x07
    cb68:	98 85       	ldd	r25, Y+8	; 0x08
    cb6a:	82 17       	cp	r24, r18
    cb6c:	93 07       	cpc	r25, r19
    cb6e:	ec f2       	brlt	.-70     	; 0xcb2a <vdmSetDunionGC+0x40>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	unionset = newSetVarGC(0, NULL, from);
    cb70:	00 d0       	rcall	.+0      	; 0xcb72 <vdmSetDunionGC+0x88>
    cb72:	00 d0       	rcall	.+0      	; 0xcb74 <vdmSetDunionGC+0x8a>
    cb74:	00 d0       	rcall	.+0      	; 0xcb76 <vdmSetDunionGC+0x8c>
    cb76:	ed b7       	in	r30, 0x3d	; 61
    cb78:	fe b7       	in	r31, 0x3e	; 62
    cb7a:	31 96       	adiw	r30, 0x01	; 1
    cb7c:	11 82       	std	Z+1, r1	; 0x01
    cb7e:	10 82       	st	Z, r1
    cb80:	13 82       	std	Z+3, r1	; 0x03
    cb82:	12 82       	std	Z+2, r1	; 0x02
    cb84:	8b 85       	ldd	r24, Y+11	; 0x0b
    cb86:	9c 85       	ldd	r25, Y+12	; 0x0c
    cb88:	95 83       	std	Z+5, r25	; 0x05
    cb8a:	84 83       	std	Z+4, r24	; 0x04
    cb8c:	0e 94 ab 58 	call	0xb156	; 0xb156 <newSetVarGC>
    cb90:	2d b7       	in	r18, 0x3d	; 61
    cb92:	3e b7       	in	r19, 0x3e	; 62
    cb94:	2a 5f       	subi	r18, 0xFA	; 250
    cb96:	3f 4f       	sbci	r19, 0xFF	; 255
    cb98:	0f b6       	in	r0, 0x3f	; 63
    cb9a:	f8 94       	cli
    cb9c:	3e bf       	out	0x3e, r19	; 62
    cb9e:	0f be       	out	0x3f, r0	; 63
    cba0:	2d bf       	out	0x3d, r18	; 61
    cba2:	9e 83       	std	Y+6, r25	; 0x06
    cba4:	8d 83       	std	Y+5, r24	; 0x05

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    cba6:	18 86       	std	Y+8, r1	; 0x08
    cba8:	1f 82       	std	Y+7, r1	; 0x07
    cbaa:	21 c0       	rjmp	.+66     	; 0xcbee <vdmSetDunionGC+0x104>
	{
		set1 = vdmSetUnion(unionset, (col->value)[i]);
    cbac:	e9 81       	ldd	r30, Y+1	; 0x01
    cbae:	fa 81       	ldd	r31, Y+2	; 0x02
    cbb0:	20 81       	ld	r18, Z
    cbb2:	31 81       	ldd	r19, Z+1	; 0x01
    cbb4:	8f 81       	ldd	r24, Y+7	; 0x07
    cbb6:	98 85       	ldd	r25, Y+8	; 0x08
    cbb8:	88 0f       	add	r24, r24
    cbba:	99 1f       	adc	r25, r25
    cbbc:	f9 01       	movw	r30, r18
    cbbe:	e8 0f       	add	r30, r24
    cbc0:	f9 1f       	adc	r31, r25
    cbc2:	20 81       	ld	r18, Z
    cbc4:	31 81       	ldd	r19, Z+1	; 0x01
    cbc6:	8d 81       	ldd	r24, Y+5	; 0x05
    cbc8:	9e 81       	ldd	r25, Y+6	; 0x06
    cbca:	b9 01       	movw	r22, r18
    cbcc:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    cbd0:	9c 83       	std	Y+4, r25	; 0x04
    cbd2:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(unionset);
    cbd4:	8d 81       	ldd	r24, Y+5	; 0x05
    cbd6:	9e 81       	ldd	r25, Y+6	; 0x06
    cbd8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		unionset = set1;
    cbdc:	8b 81       	ldd	r24, Y+3	; 0x03
    cbde:	9c 81       	ldd	r25, Y+4	; 0x04
    cbe0:	9e 83       	std	Y+6, r25	; 0x06
    cbe2:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	unionset = newSetVarGC(0, NULL, from);

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    cbe4:	8f 81       	ldd	r24, Y+7	; 0x07
    cbe6:	98 85       	ldd	r25, Y+8	; 0x08
    cbe8:	01 96       	adiw	r24, 0x01	; 1
    cbea:	98 87       	std	Y+8, r25	; 0x08
    cbec:	8f 83       	std	Y+7, r24	; 0x07
    cbee:	e9 81       	ldd	r30, Y+1	; 0x01
    cbf0:	fa 81       	ldd	r31, Y+2	; 0x02
    cbf2:	22 81       	ldd	r18, Z+2	; 0x02
    cbf4:	33 81       	ldd	r19, Z+3	; 0x03
    cbf6:	8f 81       	ldd	r24, Y+7	; 0x07
    cbf8:	98 85       	ldd	r25, Y+8	; 0x08
    cbfa:	82 17       	cp	r24, r18
    cbfc:	93 07       	cpc	r25, r19
    cbfe:	b4 f2       	brlt	.-84     	; 0xcbac <vdmSetDunionGC+0xc2>
		set1 = vdmSetUnion(unionset, (col->value)[i]);
		vdmFree(unionset);
		unionset = set1;
	}

	return unionset;
    cc00:	8d 81       	ldd	r24, Y+5	; 0x05
    cc02:	9e 81       	ldd	r25, Y+6	; 0x06
}
    cc04:	2c 96       	adiw	r28, 0x0c	; 12
    cc06:	0f b6       	in	r0, 0x3f	; 63
    cc08:	f8 94       	cli
    cc0a:	de bf       	out	0x3e, r29	; 62
    cc0c:	0f be       	out	0x3f, r0	; 63
    cc0e:	cd bf       	out	0x3d, r28	; 61
    cc10:	cf 91       	pop	r28
    cc12:	df 91       	pop	r29
    cc14:	08 95       	ret

0000cc16 <vdmSetDinter>:



TVP vdmSetDinter(TVP set)
{
    cc16:	df 93       	push	r29
    cc18:	cf 93       	push	r28
    cc1a:	cd b7       	in	r28, 0x3d	; 61
    cc1c:	de b7       	in	r29, 0x3e	; 62
    cc1e:	2a 97       	sbiw	r28, 0x0a	; 10
    cc20:	0f b6       	in	r0, 0x3f	; 63
    cc22:	f8 94       	cli
    cc24:	de bf       	out	0x3e, r29	; 62
    cc26:	0f be       	out	0x3f, r0	; 63
    cc28:	cd bf       	out	0x3d, r28	; 61
    cc2a:	9a 87       	std	Y+10, r25	; 0x0a
    cc2c:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP interset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    cc2e:	e9 85       	ldd	r30, Y+9	; 0x09
    cc30:	fa 85       	ldd	r31, Y+10	; 0x0a
    cc32:	80 81       	ld	r24, Z
    cc34:	91 81       	ldd	r25, Z+1	; 0x01
    cc36:	87 30       	cpi	r24, 0x07	; 7
    cc38:	91 05       	cpc	r25, r1
    cc3a:	11 f0       	breq	.+4      	; 0xcc40 <vdmSetDinter+0x2a>
    cc3c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col, set);
    cc40:	e9 85       	ldd	r30, Y+9	; 0x09
    cc42:	fa 85       	ldd	r31, Y+10	; 0x0a
    cc44:	84 81       	ldd	r24, Z+4	; 0x04
    cc46:	95 81       	ldd	r25, Z+5	; 0x05
    cc48:	9a 83       	std	Y+2, r25	; 0x02
    cc4a:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    cc4c:	18 86       	std	Y+8, r1	; 0x08
    cc4e:	1f 82       	std	Y+7, r1	; 0x07
    cc50:	1a c0       	rjmp	.+52     	; 0xcc86 <vdmSetDinter+0x70>
	{
		ASSERT_CHECK((col->value)[i]);
    cc52:	e9 81       	ldd	r30, Y+1	; 0x01
    cc54:	fa 81       	ldd	r31, Y+2	; 0x02
    cc56:	20 81       	ld	r18, Z
    cc58:	31 81       	ldd	r19, Z+1	; 0x01
    cc5a:	8f 81       	ldd	r24, Y+7	; 0x07
    cc5c:	98 85       	ldd	r25, Y+8	; 0x08
    cc5e:	88 0f       	add	r24, r24
    cc60:	99 1f       	adc	r25, r25
    cc62:	f9 01       	movw	r30, r18
    cc64:	e8 0f       	add	r30, r24
    cc66:	f9 1f       	adc	r31, r25
    cc68:	01 90       	ld	r0, Z+
    cc6a:	f0 81       	ld	r31, Z
    cc6c:	e0 2d       	mov	r30, r0
    cc6e:	80 81       	ld	r24, Z
    cc70:	91 81       	ldd	r25, Z+1	; 0x01
    cc72:	87 30       	cpi	r24, 0x07	; 7
    cc74:	91 05       	cpc	r25, r1
    cc76:	11 f0       	breq	.+4      	; 0xcc7c <vdmSetDinter+0x66>
    cc78:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    cc7c:	8f 81       	ldd	r24, Y+7	; 0x07
    cc7e:	98 85       	ldd	r25, Y+8	; 0x08
    cc80:	01 96       	adiw	r24, 0x01	; 1
    cc82:	98 87       	std	Y+8, r25	; 0x08
    cc84:	8f 83       	std	Y+7, r24	; 0x07
    cc86:	e9 81       	ldd	r30, Y+1	; 0x01
    cc88:	fa 81       	ldd	r31, Y+2	; 0x02
    cc8a:	22 81       	ldd	r18, Z+2	; 0x02
    cc8c:	33 81       	ldd	r19, Z+3	; 0x03
    cc8e:	8f 81       	ldd	r24, Y+7	; 0x07
    cc90:	98 85       	ldd	r25, Y+8	; 0x08
    cc92:	82 17       	cp	r24, r18
    cc94:	93 07       	cpc	r25, r19
    cc96:	ec f2       	brlt	.-70     	; 0xcc52 <vdmSetDinter+0x3c>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);
    cc98:	e9 81       	ldd	r30, Y+1	; 0x01
    cc9a:	fa 81       	ldd	r31, Y+2	; 0x02
    cc9c:	01 90       	ld	r0, Z+
    cc9e:	f0 81       	ld	r31, Z
    cca0:	e0 2d       	mov	r30, r0
    cca2:	80 81       	ld	r24, Z
    cca4:	91 81       	ldd	r25, Z+1	; 0x01
    cca6:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    ccaa:	9e 83       	std	Y+6, r25	; 0x06
    ccac:	8d 83       	std	Y+5, r24	; 0x05

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    ccae:	81 e0       	ldi	r24, 0x01	; 1
    ccb0:	90 e0       	ldi	r25, 0x00	; 0
    ccb2:	98 87       	std	Y+8, r25	; 0x08
    ccb4:	8f 83       	std	Y+7, r24	; 0x07
    ccb6:	21 c0       	rjmp	.+66     	; 0xccfa <vdmSetDinter+0xe4>
	{
		set1 = vdmSetInter(interset, (col->value)[i]);
    ccb8:	e9 81       	ldd	r30, Y+1	; 0x01
    ccba:	fa 81       	ldd	r31, Y+2	; 0x02
    ccbc:	20 81       	ld	r18, Z
    ccbe:	31 81       	ldd	r19, Z+1	; 0x01
    ccc0:	8f 81       	ldd	r24, Y+7	; 0x07
    ccc2:	98 85       	ldd	r25, Y+8	; 0x08
    ccc4:	88 0f       	add	r24, r24
    ccc6:	99 1f       	adc	r25, r25
    ccc8:	f9 01       	movw	r30, r18
    ccca:	e8 0f       	add	r30, r24
    cccc:	f9 1f       	adc	r31, r25
    ccce:	20 81       	ld	r18, Z
    ccd0:	31 81       	ldd	r19, Z+1	; 0x01
    ccd2:	8d 81       	ldd	r24, Y+5	; 0x05
    ccd4:	9e 81       	ldd	r25, Y+6	; 0x06
    ccd6:	b9 01       	movw	r22, r18
    ccd8:	0e 94 2c 5f 	call	0xbe58	; 0xbe58 <vdmSetInter>
    ccdc:	9c 83       	std	Y+4, r25	; 0x04
    ccde:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(interset);
    cce0:	8d 81       	ldd	r24, Y+5	; 0x05
    cce2:	9e 81       	ldd	r25, Y+6	; 0x06
    cce4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		interset = set1;
    cce8:	8b 81       	ldd	r24, Y+3	; 0x03
    ccea:	9c 81       	ldd	r25, Y+4	; 0x04
    ccec:	9e 83       	std	Y+6, r25	; 0x06
    ccee:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    ccf0:	8f 81       	ldd	r24, Y+7	; 0x07
    ccf2:	98 85       	ldd	r25, Y+8	; 0x08
    ccf4:	01 96       	adiw	r24, 0x01	; 1
    ccf6:	98 87       	std	Y+8, r25	; 0x08
    ccf8:	8f 83       	std	Y+7, r24	; 0x07
    ccfa:	e9 81       	ldd	r30, Y+1	; 0x01
    ccfc:	fa 81       	ldd	r31, Y+2	; 0x02
    ccfe:	22 81       	ldd	r18, Z+2	; 0x02
    cd00:	33 81       	ldd	r19, Z+3	; 0x03
    cd02:	8f 81       	ldd	r24, Y+7	; 0x07
    cd04:	98 85       	ldd	r25, Y+8	; 0x08
    cd06:	82 17       	cp	r24, r18
    cd08:	93 07       	cpc	r25, r19
    cd0a:	b4 f2       	brlt	.-84     	; 0xccb8 <vdmSetDinter+0xa2>
		set1 = vdmSetInter(interset, (col->value)[i]);
		vdmFree(interset);
		interset = set1;
	}

	return interset;
    cd0c:	8d 81       	ldd	r24, Y+5	; 0x05
    cd0e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    cd10:	2a 96       	adiw	r28, 0x0a	; 10
    cd12:	0f b6       	in	r0, 0x3f	; 63
    cd14:	f8 94       	cli
    cd16:	de bf       	out	0x3e, r29	; 62
    cd18:	0f be       	out	0x3f, r0	; 63
    cd1a:	cd bf       	out	0x3d, r28	; 61
    cd1c:	cf 91       	pop	r28
    cd1e:	df 91       	pop	r29
    cd20:	08 95       	ret

0000cd22 <vdmSetDinterGC>:


TVP vdmSetDinterGC(TVP set, TVP *from)
{
    cd22:	df 93       	push	r29
    cd24:	cf 93       	push	r28
    cd26:	cd b7       	in	r28, 0x3d	; 61
    cd28:	de b7       	in	r29, 0x3e	; 62
    cd2a:	2c 97       	sbiw	r28, 0x0c	; 12
    cd2c:	0f b6       	in	r0, 0x3f	; 63
    cd2e:	f8 94       	cli
    cd30:	de bf       	out	0x3e, r29	; 62
    cd32:	0f be       	out	0x3f, r0	; 63
    cd34:	cd bf       	out	0x3d, r28	; 61
    cd36:	9a 87       	std	Y+10, r25	; 0x0a
    cd38:	89 87       	std	Y+9, r24	; 0x09
    cd3a:	7c 87       	std	Y+12, r23	; 0x0c
    cd3c:	6b 87       	std	Y+11, r22	; 0x0b
	int i;
	TVP interset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    cd3e:	e9 85       	ldd	r30, Y+9	; 0x09
    cd40:	fa 85       	ldd	r31, Y+10	; 0x0a
    cd42:	80 81       	ld	r24, Z
    cd44:	91 81       	ldd	r25, Z+1	; 0x01
    cd46:	87 30       	cpi	r24, 0x07	; 7
    cd48:	91 05       	cpc	r25, r1
    cd4a:	11 f0       	breq	.+4      	; 0xcd50 <vdmSetDinterGC+0x2e>
    cd4c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col, set);
    cd50:	e9 85       	ldd	r30, Y+9	; 0x09
    cd52:	fa 85       	ldd	r31, Y+10	; 0x0a
    cd54:	84 81       	ldd	r24, Z+4	; 0x04
    cd56:	95 81       	ldd	r25, Z+5	; 0x05
    cd58:	9a 83       	std	Y+2, r25	; 0x02
    cd5a:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    cd5c:	18 86       	std	Y+8, r1	; 0x08
    cd5e:	1f 82       	std	Y+7, r1	; 0x07
    cd60:	1a c0       	rjmp	.+52     	; 0xcd96 <vdmSetDinterGC+0x74>
	{
		ASSERT_CHECK((col->value)[i]);
    cd62:	e9 81       	ldd	r30, Y+1	; 0x01
    cd64:	fa 81       	ldd	r31, Y+2	; 0x02
    cd66:	20 81       	ld	r18, Z
    cd68:	31 81       	ldd	r19, Z+1	; 0x01
    cd6a:	8f 81       	ldd	r24, Y+7	; 0x07
    cd6c:	98 85       	ldd	r25, Y+8	; 0x08
    cd6e:	88 0f       	add	r24, r24
    cd70:	99 1f       	adc	r25, r25
    cd72:	f9 01       	movw	r30, r18
    cd74:	e8 0f       	add	r30, r24
    cd76:	f9 1f       	adc	r31, r25
    cd78:	01 90       	ld	r0, Z+
    cd7a:	f0 81       	ld	r31, Z
    cd7c:	e0 2d       	mov	r30, r0
    cd7e:	80 81       	ld	r24, Z
    cd80:	91 81       	ldd	r25, Z+1	; 0x01
    cd82:	87 30       	cpi	r24, 0x07	; 7
    cd84:	91 05       	cpc	r25, r1
    cd86:	11 f0       	breq	.+4      	; 0xcd8c <vdmSetDinterGC+0x6a>
    cd88:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    cd8c:	8f 81       	ldd	r24, Y+7	; 0x07
    cd8e:	98 85       	ldd	r25, Y+8	; 0x08
    cd90:	01 96       	adiw	r24, 0x01	; 1
    cd92:	98 87       	std	Y+8, r25	; 0x08
    cd94:	8f 83       	std	Y+7, r24	; 0x07
    cd96:	e9 81       	ldd	r30, Y+1	; 0x01
    cd98:	fa 81       	ldd	r31, Y+2	; 0x02
    cd9a:	22 81       	ldd	r18, Z+2	; 0x02
    cd9c:	33 81       	ldd	r19, Z+3	; 0x03
    cd9e:	8f 81       	ldd	r24, Y+7	; 0x07
    cda0:	98 85       	ldd	r25, Y+8	; 0x08
    cda2:	82 17       	cp	r24, r18
    cda4:	93 07       	cpc	r25, r19
    cda6:	ec f2       	brlt	.-70     	; 0xcd62 <vdmSetDinterGC+0x40>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);
    cda8:	e9 81       	ldd	r30, Y+1	; 0x01
    cdaa:	fa 81       	ldd	r31, Y+2	; 0x02
    cdac:	01 90       	ld	r0, Z+
    cdae:	f0 81       	ld	r31, Z
    cdb0:	e0 2d       	mov	r30, r0
    cdb2:	80 81       	ld	r24, Z
    cdb4:	91 81       	ldd	r25, Z+1	; 0x01
    cdb6:	0e 94 fd 28 	call	0x51fa	; 0x51fa <vdmClone>
    cdba:	9e 83       	std	Y+6, r25	; 0x06
    cdbc:	8d 83       	std	Y+5, r24	; 0x05

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    cdbe:	81 e0       	ldi	r24, 0x01	; 1
    cdc0:	90 e0       	ldi	r25, 0x00	; 0
    cdc2:	98 87       	std	Y+8, r25	; 0x08
    cdc4:	8f 83       	std	Y+7, r24	; 0x07
    cdc6:	24 c0       	rjmp	.+72     	; 0xce10 <vdmSetDinterGC+0xee>
	{
		set1 = vdmSetInterGC(interset, (col->value)[i], from);
    cdc8:	e9 81       	ldd	r30, Y+1	; 0x01
    cdca:	fa 81       	ldd	r31, Y+2	; 0x02
    cdcc:	20 81       	ld	r18, Z
    cdce:	31 81       	ldd	r19, Z+1	; 0x01
    cdd0:	8f 81       	ldd	r24, Y+7	; 0x07
    cdd2:	98 85       	ldd	r25, Y+8	; 0x08
    cdd4:	88 0f       	add	r24, r24
    cdd6:	99 1f       	adc	r25, r25
    cdd8:	f9 01       	movw	r30, r18
    cdda:	e8 0f       	add	r30, r24
    cddc:	f9 1f       	adc	r31, r25
    cdde:	40 81       	ld	r20, Z
    cde0:	51 81       	ldd	r21, Z+1	; 0x01
    cde2:	8d 81       	ldd	r24, Y+5	; 0x05
    cde4:	9e 81       	ldd	r25, Y+6	; 0x06
    cde6:	2b 85       	ldd	r18, Y+11	; 0x0b
    cde8:	3c 85       	ldd	r19, Y+12	; 0x0c
    cdea:	ba 01       	movw	r22, r20
    cdec:	a9 01       	movw	r20, r18
    cdee:	0e 94 e8 5f 	call	0xbfd0	; 0xbfd0 <vdmSetInterGC>
    cdf2:	9c 83       	std	Y+4, r25	; 0x04
    cdf4:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(interset);
    cdf6:	8d 81       	ldd	r24, Y+5	; 0x05
    cdf8:	9e 81       	ldd	r25, Y+6	; 0x06
    cdfa:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
		interset = set1;
    cdfe:	8b 81       	ldd	r24, Y+3	; 0x03
    ce00:	9c 81       	ldd	r25, Y+4	; 0x04
    ce02:	9e 83       	std	Y+6, r25	; 0x06
    ce04:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    ce06:	8f 81       	ldd	r24, Y+7	; 0x07
    ce08:	98 85       	ldd	r25, Y+8	; 0x08
    ce0a:	01 96       	adiw	r24, 0x01	; 1
    ce0c:	98 87       	std	Y+8, r25	; 0x08
    ce0e:	8f 83       	std	Y+7, r24	; 0x07
    ce10:	e9 81       	ldd	r30, Y+1	; 0x01
    ce12:	fa 81       	ldd	r31, Y+2	; 0x02
    ce14:	22 81       	ldd	r18, Z+2	; 0x02
    ce16:	33 81       	ldd	r19, Z+3	; 0x03
    ce18:	8f 81       	ldd	r24, Y+7	; 0x07
    ce1a:	98 85       	ldd	r25, Y+8	; 0x08
    ce1c:	82 17       	cp	r24, r18
    ce1e:	93 07       	cpc	r25, r19
    ce20:	9c f2       	brlt	.-90     	; 0xcdc8 <vdmSetDinterGC+0xa6>
		set1 = vdmSetInterGC(interset, (col->value)[i], from);
		vdmFree(interset);
		interset = set1;
	}

	return interset;
    ce22:	8d 81       	ldd	r24, Y+5	; 0x05
    ce24:	9e 81       	ldd	r25, Y+6	; 0x06
}
    ce26:	2c 96       	adiw	r28, 0x0c	; 12
    ce28:	0f b6       	in	r0, 0x3f	; 63
    ce2a:	f8 94       	cli
    ce2c:	de bf       	out	0x3e, r29	; 62
    ce2e:	0f be       	out	0x3f, r0	; 63
    ce30:	cd bf       	out	0x3d, r28	; 61
    ce32:	cf 91       	pop	r28
    ce34:	df 91       	pop	r29
    ce36:	08 95       	ret

0000ce38 <vdmSetPower>:



TVP vdmSetPower(TVP set)
{
    ce38:	df 93       	push	r29
    ce3a:	cf 93       	push	r28
    ce3c:	cd b7       	in	r28, 0x3d	; 61
    ce3e:	de b7       	in	r29, 0x3e	; 62
    ce40:	64 97       	sbiw	r28, 0x14	; 20
    ce42:	0f b6       	in	r0, 0x3f	; 63
    ce44:	f8 94       	cli
    ce46:	de bf       	out	0x3e, r29	; 62
    ce48:	0f be       	out	0x3f, r0	; 63
    ce4a:	cd bf       	out	0x3d, r28	; 61
    ce4c:	9c 8b       	std	Y+20, r25	; 0x14
    ce4e:	8b 8b       	std	Y+19, r24	; 0x13
	TVP set3;
	TVP powerset;
	struct Collection *powercol;
	int powercolsize;

	ASSERT_CHECK(set);
    ce50:	eb 89       	ldd	r30, Y+19	; 0x13
    ce52:	fc 89       	ldd	r31, Y+20	; 0x14
    ce54:	80 81       	ld	r24, Z
    ce56:	91 81       	ldd	r25, Z+1	; 0x01
    ce58:	87 30       	cpi	r24, 0x07	; 7
    ce5a:	91 05       	cpc	r25, r1
    ce5c:	11 f0       	breq	.+4      	; 0xce62 <vdmSetPower+0x2a>
    ce5e:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col, set);
    ce62:	eb 89       	ldd	r30, Y+19	; 0x13
    ce64:	fc 89       	ldd	r31, Y+20	; 0x14
    ce66:	84 81       	ldd	r24, Z+4	; 0x04
    ce68:	95 81       	ldd	r25, Z+5	; 0x05
    ce6a:	9a 83       	std	Y+2, r25	; 0x02
    ce6c:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize powerset to contain the empty set.  */
	powerset = newSetVar(0, NULL);
    ce6e:	00 d0       	rcall	.+0      	; 0xce70 <vdmSetPower+0x38>
    ce70:	00 d0       	rcall	.+0      	; 0xce72 <vdmSetPower+0x3a>
    ce72:	ed b7       	in	r30, 0x3d	; 61
    ce74:	fe b7       	in	r31, 0x3e	; 62
    ce76:	31 96       	adiw	r30, 0x01	; 1
    ce78:	11 82       	std	Z+1, r1	; 0x01
    ce7a:	10 82       	st	Z, r1
    ce7c:	13 82       	std	Z+3, r1	; 0x03
    ce7e:	12 82       	std	Z+2, r1	; 0x02
    ce80:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    ce84:	0f 90       	pop	r0
    ce86:	0f 90       	pop	r0
    ce88:	0f 90       	pop	r0
    ce8a:	0f 90       	pop	r0
    ce8c:	98 87       	std	Y+8, r25	; 0x08
    ce8e:	8f 83       	std	Y+7, r24	; 0x07

	set1 = newSetVar(0, NULL);
    ce90:	00 d0       	rcall	.+0      	; 0xce92 <vdmSetPower+0x5a>
    ce92:	00 d0       	rcall	.+0      	; 0xce94 <vdmSetPower+0x5c>
    ce94:	ed b7       	in	r30, 0x3d	; 61
    ce96:	fe b7       	in	r31, 0x3e	; 62
    ce98:	31 96       	adiw	r30, 0x01	; 1
    ce9a:	11 82       	std	Z+1, r1	; 0x01
    ce9c:	10 82       	st	Z, r1
    ce9e:	13 82       	std	Z+3, r1	; 0x03
    cea0:	12 82       	std	Z+2, r1	; 0x02
    cea2:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    cea6:	0f 90       	pop	r0
    cea8:	0f 90       	pop	r0
    ceaa:	0f 90       	pop	r0
    ceac:	0f 90       	pop	r0
    ceae:	9e 87       	std	Y+14, r25	; 0x0e
    ceb0:	8d 87       	std	Y+13, r24	; 0x0d
	set2 = newSetVar(1, set1);
    ceb2:	00 d0       	rcall	.+0      	; 0xceb4 <vdmSetPower+0x7c>
    ceb4:	00 d0       	rcall	.+0      	; 0xceb6 <vdmSetPower+0x7e>
    ceb6:	ed b7       	in	r30, 0x3d	; 61
    ceb8:	fe b7       	in	r31, 0x3e	; 62
    ceba:	31 96       	adiw	r30, 0x01	; 1
    cebc:	81 e0       	ldi	r24, 0x01	; 1
    cebe:	90 e0       	ldi	r25, 0x00	; 0
    cec0:	91 83       	std	Z+1, r25	; 0x01
    cec2:	80 83       	st	Z, r24
    cec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    cec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    cec8:	93 83       	std	Z+3, r25	; 0x03
    ceca:	82 83       	std	Z+2, r24	; 0x02
    cecc:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    ced0:	0f 90       	pop	r0
    ced2:	0f 90       	pop	r0
    ced4:	0f 90       	pop	r0
    ced6:	0f 90       	pop	r0
    ced8:	9c 87       	std	Y+12, r25	; 0x0c
    ceda:	8b 87       	std	Y+11, r24	; 0x0b
	vdmFree(set1);
    cedc:	8d 85       	ldd	r24, Y+13	; 0x0d
    cede:	9e 85       	ldd	r25, Y+14	; 0x0e
    cee0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	set1 = vdmSetUnion(powerset, set2);
    cee4:	8f 81       	ldd	r24, Y+7	; 0x07
    cee6:	98 85       	ldd	r25, Y+8	; 0x08
    cee8:	2b 85       	ldd	r18, Y+11	; 0x0b
    ceea:	3c 85       	ldd	r19, Y+12	; 0x0c
    ceec:	b9 01       	movw	r22, r18
    ceee:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    cef2:	9e 87       	std	Y+14, r25	; 0x0e
    cef4:	8d 87       	std	Y+13, r24	; 0x0d
	vdmFree(set2);
    cef6:	8b 85       	ldd	r24, Y+11	; 0x0b
    cef8:	9c 85       	ldd	r25, Y+12	; 0x0c
    cefa:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	vdmFree(powerset);
    cefe:	8f 81       	ldd	r24, Y+7	; 0x07
    cf00:	98 85       	ldd	r25, Y+8	; 0x08
    cf02:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	powerset = set1;
    cf06:	8d 85       	ldd	r24, Y+13	; 0x0d
    cf08:	9e 85       	ldd	r25, Y+14	; 0x0e
    cf0a:	98 87       	std	Y+8, r25	; 0x08
    cf0c:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col->size; i++)
    cf0e:	1a 8a       	std	Y+18, r1	; 0x12
    cf10:	19 8a       	std	Y+17, r1	; 0x11
    cf12:	8a c0       	rjmp	.+276    	; 0xd028 <vdmSetPower+0x1f0>
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
    cf14:	ef 81       	ldd	r30, Y+7	; 0x07
    cf16:	f8 85       	ldd	r31, Y+8	; 0x08
    cf18:	84 81       	ldd	r24, Z+4	; 0x04
    cf1a:	95 81       	ldd	r25, Z+5	; 0x05
    cf1c:	fc 01       	movw	r30, r24
    cf1e:	82 81       	ldd	r24, Z+2	; 0x02
    cf20:	93 81       	ldd	r25, Z+3	; 0x03
    cf22:	9c 83       	std	Y+4, r25	; 0x04
    cf24:	8b 83       	std	Y+3, r24	; 0x03
		for(j = 0; j < powercolsize; j++)
    cf26:	18 8a       	std	Y+16, r1	; 0x10
    cf28:	1f 86       	std	Y+15, r1	; 0x0f
    cf2a:	71 c0       	rjmp	.+226    	; 0xd00e <vdmSetPower+0x1d6>
		{
			powercol = (struct Collection*)powerset->value.ptr;
    cf2c:	ef 81       	ldd	r30, Y+7	; 0x07
    cf2e:	f8 85       	ldd	r31, Y+8	; 0x08
    cf30:	84 81       	ldd	r24, Z+4	; 0x04
    cf32:	95 81       	ldd	r25, Z+5	; 0x05
    cf34:	9e 83       	std	Y+6, r25	; 0x06
    cf36:	8d 83       	std	Y+5, r24	; 0x05

			set1 = newSetVar(1, (col->value)[i]);
    cf38:	e9 81       	ldd	r30, Y+1	; 0x01
    cf3a:	fa 81       	ldd	r31, Y+2	; 0x02
    cf3c:	20 81       	ld	r18, Z
    cf3e:	31 81       	ldd	r19, Z+1	; 0x01
    cf40:	89 89       	ldd	r24, Y+17	; 0x11
    cf42:	9a 89       	ldd	r25, Y+18	; 0x12
    cf44:	88 0f       	add	r24, r24
    cf46:	99 1f       	adc	r25, r25
    cf48:	f9 01       	movw	r30, r18
    cf4a:	e8 0f       	add	r30, r24
    cf4c:	f9 1f       	adc	r31, r25
    cf4e:	20 81       	ld	r18, Z
    cf50:	31 81       	ldd	r19, Z+1	; 0x01
    cf52:	00 d0       	rcall	.+0      	; 0xcf54 <vdmSetPower+0x11c>
    cf54:	00 d0       	rcall	.+0      	; 0xcf56 <vdmSetPower+0x11e>
    cf56:	ed b7       	in	r30, 0x3d	; 61
    cf58:	fe b7       	in	r31, 0x3e	; 62
    cf5a:	31 96       	adiw	r30, 0x01	; 1
    cf5c:	81 e0       	ldi	r24, 0x01	; 1
    cf5e:	90 e0       	ldi	r25, 0x00	; 0
    cf60:	91 83       	std	Z+1, r25	; 0x01
    cf62:	80 83       	st	Z, r24
    cf64:	33 83       	std	Z+3, r19	; 0x03
    cf66:	22 83       	std	Z+2, r18	; 0x02
    cf68:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    cf6c:	0f 90       	pop	r0
    cf6e:	0f 90       	pop	r0
    cf70:	0f 90       	pop	r0
    cf72:	0f 90       	pop	r0
    cf74:	9e 87       	std	Y+14, r25	; 0x0e
    cf76:	8d 87       	std	Y+13, r24	; 0x0d
			set2 = vdmSetUnion((powercol->value)[j], set1);
    cf78:	ed 81       	ldd	r30, Y+5	; 0x05
    cf7a:	fe 81       	ldd	r31, Y+6	; 0x06
    cf7c:	20 81       	ld	r18, Z
    cf7e:	31 81       	ldd	r19, Z+1	; 0x01
    cf80:	8f 85       	ldd	r24, Y+15	; 0x0f
    cf82:	98 89       	ldd	r25, Y+16	; 0x10
    cf84:	88 0f       	add	r24, r24
    cf86:	99 1f       	adc	r25, r25
    cf88:	f9 01       	movw	r30, r18
    cf8a:	e8 0f       	add	r30, r24
    cf8c:	f9 1f       	adc	r31, r25
    cf8e:	80 81       	ld	r24, Z
    cf90:	91 81       	ldd	r25, Z+1	; 0x01
    cf92:	2d 85       	ldd	r18, Y+13	; 0x0d
    cf94:	3e 85       	ldd	r19, Y+14	; 0x0e
    cf96:	b9 01       	movw	r22, r18
    cf98:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    cf9c:	9c 87       	std	Y+12, r25	; 0x0c
    cf9e:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(set1);
    cfa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    cfa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    cfa4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			set1 = newSetVar(1, set2);
    cfa8:	00 d0       	rcall	.+0      	; 0xcfaa <vdmSetPower+0x172>
    cfaa:	00 d0       	rcall	.+0      	; 0xcfac <vdmSetPower+0x174>
    cfac:	ed b7       	in	r30, 0x3d	; 61
    cfae:	fe b7       	in	r31, 0x3e	; 62
    cfb0:	31 96       	adiw	r30, 0x01	; 1
    cfb2:	81 e0       	ldi	r24, 0x01	; 1
    cfb4:	90 e0       	ldi	r25, 0x00	; 0
    cfb6:	91 83       	std	Z+1, r25	; 0x01
    cfb8:	80 83       	st	Z, r24
    cfba:	8b 85       	ldd	r24, Y+11	; 0x0b
    cfbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    cfbe:	93 83       	std	Z+3, r25	; 0x03
    cfc0:	82 83       	std	Z+2, r24	; 0x02
    cfc2:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    cfc6:	0f 90       	pop	r0
    cfc8:	0f 90       	pop	r0
    cfca:	0f 90       	pop	r0
    cfcc:	0f 90       	pop	r0
    cfce:	9e 87       	std	Y+14, r25	; 0x0e
    cfd0:	8d 87       	std	Y+13, r24	; 0x0d
			vdmFree(set2);
    cfd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    cfd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    cfd6:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			set3 = vdmSetUnion(powerset, set1);
    cfda:	8f 81       	ldd	r24, Y+7	; 0x07
    cfdc:	98 85       	ldd	r25, Y+8	; 0x08
    cfde:	2d 85       	ldd	r18, Y+13	; 0x0d
    cfe0:	3e 85       	ldd	r19, Y+14	; 0x0e
    cfe2:	b9 01       	movw	r22, r18
    cfe4:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    cfe8:	9a 87       	std	Y+10, r25	; 0x0a
    cfea:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(set1);
    cfec:	8d 85       	ldd	r24, Y+13	; 0x0d
    cfee:	9e 85       	ldd	r25, Y+14	; 0x0e
    cff0:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(powerset);
    cff4:	8f 81       	ldd	r24, Y+7	; 0x07
    cff6:	98 85       	ldd	r25, Y+8	; 0x08
    cff8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			powerset = set3;
    cffc:	89 85       	ldd	r24, Y+9	; 0x09
    cffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    d000:	98 87       	std	Y+8, r25	; 0x08
    d002:	8f 83       	std	Y+7, r24	; 0x07
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
    d004:	8f 85       	ldd	r24, Y+15	; 0x0f
    d006:	98 89       	ldd	r25, Y+16	; 0x10
    d008:	01 96       	adiw	r24, 0x01	; 1
    d00a:	98 8b       	std	Y+16, r25	; 0x10
    d00c:	8f 87       	std	Y+15, r24	; 0x0f
    d00e:	2f 85       	ldd	r18, Y+15	; 0x0f
    d010:	38 89       	ldd	r19, Y+16	; 0x10
    d012:	8b 81       	ldd	r24, Y+3	; 0x03
    d014:	9c 81       	ldd	r25, Y+4	; 0x04
    d016:	28 17       	cp	r18, r24
    d018:	39 07       	cpc	r19, r25
    d01a:	0c f4       	brge	.+2      	; 0xd01e <vdmSetPower+0x1e6>
    d01c:	87 cf       	rjmp	.-242    	; 0xcf2c <vdmSetPower+0xf4>
	set1 = vdmSetUnion(powerset, set2);
	vdmFree(set2);
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
    d01e:	89 89       	ldd	r24, Y+17	; 0x11
    d020:	9a 89       	ldd	r25, Y+18	; 0x12
    d022:	01 96       	adiw	r24, 0x01	; 1
    d024:	9a 8b       	std	Y+18, r25	; 0x12
    d026:	89 8b       	std	Y+17, r24	; 0x11
    d028:	e9 81       	ldd	r30, Y+1	; 0x01
    d02a:	fa 81       	ldd	r31, Y+2	; 0x02
    d02c:	22 81       	ldd	r18, Z+2	; 0x02
    d02e:	33 81       	ldd	r19, Z+3	; 0x03
    d030:	89 89       	ldd	r24, Y+17	; 0x11
    d032:	9a 89       	ldd	r25, Y+18	; 0x12
    d034:	82 17       	cp	r24, r18
    d036:	93 07       	cpc	r25, r19
    d038:	0c f4       	brge	.+2      	; 0xd03c <vdmSetPower+0x204>
    d03a:	6c cf       	rjmp	.-296    	; 0xcf14 <vdmSetPower+0xdc>
			vdmFree(powerset);
			powerset = set3;
		}
	}

	return powerset;
    d03c:	8f 81       	ldd	r24, Y+7	; 0x07
    d03e:	98 85       	ldd	r25, Y+8	; 0x08
}
    d040:	64 96       	adiw	r28, 0x14	; 20
    d042:	0f b6       	in	r0, 0x3f	; 63
    d044:	f8 94       	cli
    d046:	de bf       	out	0x3e, r29	; 62
    d048:	0f be       	out	0x3f, r0	; 63
    d04a:	cd bf       	out	0x3d, r28	; 61
    d04c:	cf 91       	pop	r28
    d04e:	df 91       	pop	r29
    d050:	08 95       	ret

0000d052 <vdmSetPowerGC>:


TVP vdmSetPowerGC(TVP set, TVP *from)
{
    d052:	df 93       	push	r29
    d054:	cf 93       	push	r28
    d056:	cd b7       	in	r28, 0x3d	; 61
    d058:	de b7       	in	r29, 0x3e	; 62
    d05a:	66 97       	sbiw	r28, 0x16	; 22
    d05c:	0f b6       	in	r0, 0x3f	; 63
    d05e:	f8 94       	cli
    d060:	de bf       	out	0x3e, r29	; 62
    d062:	0f be       	out	0x3f, r0	; 63
    d064:	cd bf       	out	0x3d, r28	; 61
    d066:	9c 8b       	std	Y+20, r25	; 0x14
    d068:	8b 8b       	std	Y+19, r24	; 0x13
    d06a:	7e 8b       	std	Y+22, r23	; 0x16
    d06c:	6d 8b       	std	Y+21, r22	; 0x15
	TVP set3;
	TVP powerset;
	struct Collection *powercol;
	int powercolsize;

	ASSERT_CHECK(set);
    d06e:	eb 89       	ldd	r30, Y+19	; 0x13
    d070:	fc 89       	ldd	r31, Y+20	; 0x14
    d072:	80 81       	ld	r24, Z
    d074:	91 81       	ldd	r25, Z+1	; 0x01
    d076:	87 30       	cpi	r24, 0x07	; 7
    d078:	91 05       	cpc	r25, r1
    d07a:	11 f0       	breq	.+4      	; 0xd080 <vdmSetPowerGC+0x2e>
    d07c:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>

	UNWRAP_COLLECTION(col, set);
    d080:	eb 89       	ldd	r30, Y+19	; 0x13
    d082:	fc 89       	ldd	r31, Y+20	; 0x14
    d084:	84 81       	ldd	r24, Z+4	; 0x04
    d086:	95 81       	ldd	r25, Z+5	; 0x05
    d088:	9a 83       	std	Y+2, r25	; 0x02
    d08a:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize powerset to contain the empty set.  */
	powerset = newSetVar(0, NULL);
    d08c:	00 d0       	rcall	.+0      	; 0xd08e <vdmSetPowerGC+0x3c>
    d08e:	00 d0       	rcall	.+0      	; 0xd090 <vdmSetPowerGC+0x3e>
    d090:	ed b7       	in	r30, 0x3d	; 61
    d092:	fe b7       	in	r31, 0x3e	; 62
    d094:	31 96       	adiw	r30, 0x01	; 1
    d096:	11 82       	std	Z+1, r1	; 0x01
    d098:	10 82       	st	Z, r1
    d09a:	13 82       	std	Z+3, r1	; 0x03
    d09c:	12 82       	std	Z+2, r1	; 0x02
    d09e:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    d0a2:	0f 90       	pop	r0
    d0a4:	0f 90       	pop	r0
    d0a6:	0f 90       	pop	r0
    d0a8:	0f 90       	pop	r0
    d0aa:	98 87       	std	Y+8, r25	; 0x08
    d0ac:	8f 83       	std	Y+7, r24	; 0x07

	set1 = newSetVar(0, NULL);
    d0ae:	00 d0       	rcall	.+0      	; 0xd0b0 <vdmSetPowerGC+0x5e>
    d0b0:	00 d0       	rcall	.+0      	; 0xd0b2 <vdmSetPowerGC+0x60>
    d0b2:	ed b7       	in	r30, 0x3d	; 61
    d0b4:	fe b7       	in	r31, 0x3e	; 62
    d0b6:	31 96       	adiw	r30, 0x01	; 1
    d0b8:	11 82       	std	Z+1, r1	; 0x01
    d0ba:	10 82       	st	Z, r1
    d0bc:	13 82       	std	Z+3, r1	; 0x03
    d0be:	12 82       	std	Z+2, r1	; 0x02
    d0c0:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    d0c4:	0f 90       	pop	r0
    d0c6:	0f 90       	pop	r0
    d0c8:	0f 90       	pop	r0
    d0ca:	0f 90       	pop	r0
    d0cc:	9e 87       	std	Y+14, r25	; 0x0e
    d0ce:	8d 87       	std	Y+13, r24	; 0x0d
	set2 = newSetVar(1, set1);
    d0d0:	00 d0       	rcall	.+0      	; 0xd0d2 <vdmSetPowerGC+0x80>
    d0d2:	00 d0       	rcall	.+0      	; 0xd0d4 <vdmSetPowerGC+0x82>
    d0d4:	ed b7       	in	r30, 0x3d	; 61
    d0d6:	fe b7       	in	r31, 0x3e	; 62
    d0d8:	31 96       	adiw	r30, 0x01	; 1
    d0da:	81 e0       	ldi	r24, 0x01	; 1
    d0dc:	90 e0       	ldi	r25, 0x00	; 0
    d0de:	91 83       	std	Z+1, r25	; 0x01
    d0e0:	80 83       	st	Z, r24
    d0e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    d0e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    d0e6:	93 83       	std	Z+3, r25	; 0x03
    d0e8:	82 83       	std	Z+2, r24	; 0x02
    d0ea:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    d0ee:	0f 90       	pop	r0
    d0f0:	0f 90       	pop	r0
    d0f2:	0f 90       	pop	r0
    d0f4:	0f 90       	pop	r0
    d0f6:	9c 87       	std	Y+12, r25	; 0x0c
    d0f8:	8b 87       	std	Y+11, r24	; 0x0b
	vdmFree(set1);
    d0fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    d0fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    d0fe:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	set1 = vdmSetUnion(powerset, set2);
    d102:	8f 81       	ldd	r24, Y+7	; 0x07
    d104:	98 85       	ldd	r25, Y+8	; 0x08
    d106:	2b 85       	ldd	r18, Y+11	; 0x0b
    d108:	3c 85       	ldd	r19, Y+12	; 0x0c
    d10a:	b9 01       	movw	r22, r18
    d10c:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    d110:	9e 87       	std	Y+14, r25	; 0x0e
    d112:	8d 87       	std	Y+13, r24	; 0x0d
	vdmFree(set2);
    d114:	8b 85       	ldd	r24, Y+11	; 0x0b
    d116:	9c 85       	ldd	r25, Y+12	; 0x0c
    d118:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	vdmFree(powerset);
    d11c:	8f 81       	ldd	r24, Y+7	; 0x07
    d11e:	98 85       	ldd	r25, Y+8	; 0x08
    d120:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
	powerset = set1;
    d124:	8d 85       	ldd	r24, Y+13	; 0x0d
    d126:	9e 85       	ldd	r25, Y+14	; 0x0e
    d128:	98 87       	std	Y+8, r25	; 0x08
    d12a:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col->size; i++)
    d12c:	1a 8a       	std	Y+18, r1	; 0x12
    d12e:	19 8a       	std	Y+17, r1	; 0x11
    d130:	8c c0       	rjmp	.+280    	; 0xd24a <vdmSetPowerGC+0x1f8>
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
    d132:	ef 81       	ldd	r30, Y+7	; 0x07
    d134:	f8 85       	ldd	r31, Y+8	; 0x08
    d136:	84 81       	ldd	r24, Z+4	; 0x04
    d138:	95 81       	ldd	r25, Z+5	; 0x05
    d13a:	fc 01       	movw	r30, r24
    d13c:	82 81       	ldd	r24, Z+2	; 0x02
    d13e:	93 81       	ldd	r25, Z+3	; 0x03
    d140:	9c 83       	std	Y+4, r25	; 0x04
    d142:	8b 83       	std	Y+3, r24	; 0x03
		for(j = 0; j < powercolsize; j++)
    d144:	18 8a       	std	Y+16, r1	; 0x10
    d146:	1f 86       	std	Y+15, r1	; 0x0f
    d148:	73 c0       	rjmp	.+230    	; 0xd230 <vdmSetPowerGC+0x1de>
		{
			powercol = (struct Collection*)powerset->value.ptr;
    d14a:	ef 81       	ldd	r30, Y+7	; 0x07
    d14c:	f8 85       	ldd	r31, Y+8	; 0x08
    d14e:	84 81       	ldd	r24, Z+4	; 0x04
    d150:	95 81       	ldd	r25, Z+5	; 0x05
    d152:	9e 83       	std	Y+6, r25	; 0x06
    d154:	8d 83       	std	Y+5, r24	; 0x05

			set1 = newSetVar(1, (col->value)[i]);
    d156:	e9 81       	ldd	r30, Y+1	; 0x01
    d158:	fa 81       	ldd	r31, Y+2	; 0x02
    d15a:	20 81       	ld	r18, Z
    d15c:	31 81       	ldd	r19, Z+1	; 0x01
    d15e:	89 89       	ldd	r24, Y+17	; 0x11
    d160:	9a 89       	ldd	r25, Y+18	; 0x12
    d162:	88 0f       	add	r24, r24
    d164:	99 1f       	adc	r25, r25
    d166:	f9 01       	movw	r30, r18
    d168:	e8 0f       	add	r30, r24
    d16a:	f9 1f       	adc	r31, r25
    d16c:	20 81       	ld	r18, Z
    d16e:	31 81       	ldd	r19, Z+1	; 0x01
    d170:	00 d0       	rcall	.+0      	; 0xd172 <vdmSetPowerGC+0x120>
    d172:	00 d0       	rcall	.+0      	; 0xd174 <vdmSetPowerGC+0x122>
    d174:	ed b7       	in	r30, 0x3d	; 61
    d176:	fe b7       	in	r31, 0x3e	; 62
    d178:	31 96       	adiw	r30, 0x01	; 1
    d17a:	81 e0       	ldi	r24, 0x01	; 1
    d17c:	90 e0       	ldi	r25, 0x00	; 0
    d17e:	91 83       	std	Z+1, r25	; 0x01
    d180:	80 83       	st	Z, r24
    d182:	33 83       	std	Z+3, r19	; 0x03
    d184:	22 83       	std	Z+2, r18	; 0x02
    d186:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    d18a:	0f 90       	pop	r0
    d18c:	0f 90       	pop	r0
    d18e:	0f 90       	pop	r0
    d190:	0f 90       	pop	r0
    d192:	9e 87       	std	Y+14, r25	; 0x0e
    d194:	8d 87       	std	Y+13, r24	; 0x0d
			set2 = vdmSetUnion((powercol->value)[j], set1);
    d196:	ed 81       	ldd	r30, Y+5	; 0x05
    d198:	fe 81       	ldd	r31, Y+6	; 0x06
    d19a:	20 81       	ld	r18, Z
    d19c:	31 81       	ldd	r19, Z+1	; 0x01
    d19e:	8f 85       	ldd	r24, Y+15	; 0x0f
    d1a0:	98 89       	ldd	r25, Y+16	; 0x10
    d1a2:	88 0f       	add	r24, r24
    d1a4:	99 1f       	adc	r25, r25
    d1a6:	f9 01       	movw	r30, r18
    d1a8:	e8 0f       	add	r30, r24
    d1aa:	f9 1f       	adc	r31, r25
    d1ac:	80 81       	ld	r24, Z
    d1ae:	91 81       	ldd	r25, Z+1	; 0x01
    d1b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    d1b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    d1b4:	b9 01       	movw	r22, r18
    d1b6:	0e 94 3e 5d 	call	0xba7c	; 0xba7c <vdmSetUnion>
    d1ba:	9c 87       	std	Y+12, r25	; 0x0c
    d1bc:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(set1);
    d1be:	8d 85       	ldd	r24, Y+13	; 0x0d
    d1c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    d1c2:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			set1 = newSetVar(1, set2);
    d1c6:	00 d0       	rcall	.+0      	; 0xd1c8 <vdmSetPowerGC+0x176>
    d1c8:	00 d0       	rcall	.+0      	; 0xd1ca <vdmSetPowerGC+0x178>
    d1ca:	ed b7       	in	r30, 0x3d	; 61
    d1cc:	fe b7       	in	r31, 0x3e	; 62
    d1ce:	31 96       	adiw	r30, 0x01	; 1
    d1d0:	81 e0       	ldi	r24, 0x01	; 1
    d1d2:	90 e0       	ldi	r25, 0x00	; 0
    d1d4:	91 83       	std	Z+1, r25	; 0x01
    d1d6:	80 83       	st	Z, r24
    d1d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    d1da:	9c 85       	ldd	r25, Y+12	; 0x0c
    d1dc:	93 83       	std	Z+3, r25	; 0x03
    d1de:	82 83       	std	Z+2, r24	; 0x02
    d1e0:	0e 94 09 58 	call	0xb012	; 0xb012 <newSetVar>
    d1e4:	0f 90       	pop	r0
    d1e6:	0f 90       	pop	r0
    d1e8:	0f 90       	pop	r0
    d1ea:	0f 90       	pop	r0
    d1ec:	9e 87       	std	Y+14, r25	; 0x0e
    d1ee:	8d 87       	std	Y+13, r24	; 0x0d
			vdmFree(set2);
    d1f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    d1f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    d1f4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			set3 = vdmSetUnionGC(powerset, set1, from);
    d1f8:	8f 81       	ldd	r24, Y+7	; 0x07
    d1fa:	98 85       	ldd	r25, Y+8	; 0x08
    d1fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    d1fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    d200:	4d 89       	ldd	r20, Y+21	; 0x15
    d202:	5e 89       	ldd	r21, Y+22	; 0x16
    d204:	b9 01       	movw	r22, r18
    d206:	0e 94 33 5e 	call	0xbc66	; 0xbc66 <vdmSetUnionGC>
    d20a:	9a 87       	std	Y+10, r25	; 0x0a
    d20c:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(set1);
    d20e:	8d 85       	ldd	r24, Y+13	; 0x0d
    d210:	9e 85       	ldd	r25, Y+14	; 0x0e
    d212:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			vdmFree(powerset);
    d216:	8f 81       	ldd	r24, Y+7	; 0x07
    d218:	98 85       	ldd	r25, Y+8	; 0x08
    d21a:	0e 94 ba 2c 	call	0x5974	; 0x5974 <vdmFree>
			powerset = set3;
    d21e:	89 85       	ldd	r24, Y+9	; 0x09
    d220:	9a 85       	ldd	r25, Y+10	; 0x0a
    d222:	98 87       	std	Y+8, r25	; 0x08
    d224:	8f 83       	std	Y+7, r24	; 0x07
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
    d226:	8f 85       	ldd	r24, Y+15	; 0x0f
    d228:	98 89       	ldd	r25, Y+16	; 0x10
    d22a:	01 96       	adiw	r24, 0x01	; 1
    d22c:	98 8b       	std	Y+16, r25	; 0x10
    d22e:	8f 87       	std	Y+15, r24	; 0x0f
    d230:	2f 85       	ldd	r18, Y+15	; 0x0f
    d232:	38 89       	ldd	r19, Y+16	; 0x10
    d234:	8b 81       	ldd	r24, Y+3	; 0x03
    d236:	9c 81       	ldd	r25, Y+4	; 0x04
    d238:	28 17       	cp	r18, r24
    d23a:	39 07       	cpc	r19, r25
    d23c:	0c f4       	brge	.+2      	; 0xd240 <vdmSetPowerGC+0x1ee>
    d23e:	85 cf       	rjmp	.-246    	; 0xd14a <vdmSetPowerGC+0xf8>
	set1 = vdmSetUnion(powerset, set2);
	vdmFree(set2);
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
    d240:	89 89       	ldd	r24, Y+17	; 0x11
    d242:	9a 89       	ldd	r25, Y+18	; 0x12
    d244:	01 96       	adiw	r24, 0x01	; 1
    d246:	9a 8b       	std	Y+18, r25	; 0x12
    d248:	89 8b       	std	Y+17, r24	; 0x11
    d24a:	e9 81       	ldd	r30, Y+1	; 0x01
    d24c:	fa 81       	ldd	r31, Y+2	; 0x02
    d24e:	22 81       	ldd	r18, Z+2	; 0x02
    d250:	33 81       	ldd	r19, Z+3	; 0x03
    d252:	89 89       	ldd	r24, Y+17	; 0x11
    d254:	9a 89       	ldd	r25, Y+18	; 0x12
    d256:	82 17       	cp	r24, r18
    d258:	93 07       	cpc	r25, r19
    d25a:	0c f4       	brge	.+2      	; 0xd25e <vdmSetPowerGC+0x20c>
    d25c:	6a cf       	rjmp	.-300    	; 0xd132 <vdmSetPowerGC+0xe0>
			vdmFree(powerset);
			powerset = set3;
		}
	}

	return powerset;
    d25e:	8f 81       	ldd	r24, Y+7	; 0x07
    d260:	98 85       	ldd	r25, Y+8	; 0x08
}
    d262:	66 96       	adiw	r28, 0x16	; 22
    d264:	0f b6       	in	r0, 0x3f	; 63
    d266:	f8 94       	cli
    d268:	de bf       	out	0x3e, r29	; 62
    d26a:	0f be       	out	0x3f, r0	; 63
    d26c:	cd bf       	out	0x3d, r28	; 61
    d26e:	cf 91       	pop	r28
    d270:	df 91       	pop	r29
    d272:	08 95       	ret

0000d274 <unpackString>:
#include "Vdm.h"
#include "VdmUnpackString.h"

char* unpackString(TVP charseq)
{
    d274:	df 93       	push	r29
    d276:	cf 93       	push	r28
    d278:	cd b7       	in	r28, 0x3d	; 61
    d27a:	de b7       	in	r29, 0x3e	; 62
    d27c:	28 97       	sbiw	r28, 0x08	; 8
    d27e:	0f b6       	in	r0, 0x3f	; 63
    d280:	f8 94       	cli
    d282:	de bf       	out	0x3e, r29	; 62
    d284:	0f be       	out	0x3f, r0	; 63
    d286:	cd bf       	out	0x3d, r28	; 61
    d288:	98 87       	std	Y+8, r25	; 0x08
    d28a:	8f 83       	std	Y+7, r24	; 0x07
	int i;
	char* str;



	UNWRAP_COLLECTION(col, charseq);
    d28c:	ef 81       	ldd	r30, Y+7	; 0x07
    d28e:	f8 85       	ldd	r31, Y+8	; 0x08
    d290:	84 81       	ldd	r24, Z+4	; 0x04
    d292:	95 81       	ldd	r25, Z+5	; 0x05
    d294:	9a 83       	std	Y+2, r25	; 0x02
    d296:	89 83       	std	Y+1, r24	; 0x01

	str = (char*)malloc(col->size * sizeof(char) + 1);
    d298:	e9 81       	ldd	r30, Y+1	; 0x01
    d29a:	fa 81       	ldd	r31, Y+2	; 0x02
    d29c:	82 81       	ldd	r24, Z+2	; 0x02
    d29e:	93 81       	ldd	r25, Z+3	; 0x03
    d2a0:	01 96       	adiw	r24, 0x01	; 1
    d2a2:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    d2a6:	9c 83       	std	Y+4, r25	; 0x04
    d2a8:	8b 83       	std	Y+3, r24	; 0x03
	assert(str != NULL);
    d2aa:	8b 81       	ldd	r24, Y+3	; 0x03
    d2ac:	9c 81       	ldd	r25, Y+4	; 0x04
    d2ae:	00 97       	sbiw	r24, 0x00	; 0
    d2b0:	11 f4       	brne	.+4      	; 0xd2b6 <unpackString+0x42>
    d2b2:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
	str[col->size] = 0;
    d2b6:	e9 81       	ldd	r30, Y+1	; 0x01
    d2b8:	fa 81       	ldd	r31, Y+2	; 0x02
    d2ba:	82 81       	ldd	r24, Z+2	; 0x02
    d2bc:	93 81       	ldd	r25, Z+3	; 0x03
    d2be:	9c 01       	movw	r18, r24
    d2c0:	8b 81       	ldd	r24, Y+3	; 0x03
    d2c2:	9c 81       	ldd	r25, Y+4	; 0x04
    d2c4:	fc 01       	movw	r30, r24
    d2c6:	e2 0f       	add	r30, r18
    d2c8:	f3 1f       	adc	r31, r19
    d2ca:	10 82       	st	Z, r1

	for(i = 0; i < col->size; i++)
    d2cc:	1e 82       	std	Y+6, r1	; 0x06
    d2ce:	1d 82       	std	Y+5, r1	; 0x05
    d2d0:	31 c0       	rjmp	.+98     	; 0xd334 <unpackString+0xc0>
	{
		ASSERT_CHECK_CHAR((col->value[i]));
    d2d2:	e9 81       	ldd	r30, Y+1	; 0x01
    d2d4:	fa 81       	ldd	r31, Y+2	; 0x02
    d2d6:	20 81       	ld	r18, Z
    d2d8:	31 81       	ldd	r19, Z+1	; 0x01
    d2da:	8d 81       	ldd	r24, Y+5	; 0x05
    d2dc:	9e 81       	ldd	r25, Y+6	; 0x06
    d2de:	88 0f       	add	r24, r24
    d2e0:	99 1f       	adc	r25, r25
    d2e2:	f9 01       	movw	r30, r18
    d2e4:	e8 0f       	add	r30, r24
    d2e6:	f9 1f       	adc	r31, r25
    d2e8:	01 90       	ld	r0, Z+
    d2ea:	f0 81       	ld	r31, Z
    d2ec:	e0 2d       	mov	r30, r0
    d2ee:	80 81       	ld	r24, Z
    d2f0:	91 81       	ldd	r25, Z+1	; 0x01
    d2f2:	86 30       	cpi	r24, 0x06	; 6
    d2f4:	91 05       	cpc	r25, r1
    d2f6:	11 f0       	breq	.+4      	; 0xd2fc <unpackString+0x88>
    d2f8:	0e 94 9b 6e 	call	0xdd36	; 0xdd36 <abort>
		str[i] = ((col->value[i])->value).charVal;
    d2fc:	2d 81       	ldd	r18, Y+5	; 0x05
    d2fe:	3e 81       	ldd	r19, Y+6	; 0x06
    d300:	8b 81       	ldd	r24, Y+3	; 0x03
    d302:	9c 81       	ldd	r25, Y+4	; 0x04
    d304:	dc 01       	movw	r26, r24
    d306:	a2 0f       	add	r26, r18
    d308:	b3 1f       	adc	r27, r19
    d30a:	e9 81       	ldd	r30, Y+1	; 0x01
    d30c:	fa 81       	ldd	r31, Y+2	; 0x02
    d30e:	20 81       	ld	r18, Z
    d310:	31 81       	ldd	r19, Z+1	; 0x01
    d312:	8d 81       	ldd	r24, Y+5	; 0x05
    d314:	9e 81       	ldd	r25, Y+6	; 0x06
    d316:	88 0f       	add	r24, r24
    d318:	99 1f       	adc	r25, r25
    d31a:	f9 01       	movw	r30, r18
    d31c:	e8 0f       	add	r30, r24
    d31e:	f9 1f       	adc	r31, r25
    d320:	01 90       	ld	r0, Z+
    d322:	f0 81       	ld	r31, Z
    d324:	e0 2d       	mov	r30, r0
    d326:	84 81       	ldd	r24, Z+4	; 0x04
    d328:	8c 93       	st	X, r24

	str = (char*)malloc(col->size * sizeof(char) + 1);
	assert(str != NULL);
	str[col->size] = 0;

	for(i = 0; i < col->size; i++)
    d32a:	8d 81       	ldd	r24, Y+5	; 0x05
    d32c:	9e 81       	ldd	r25, Y+6	; 0x06
    d32e:	01 96       	adiw	r24, 0x01	; 1
    d330:	9e 83       	std	Y+6, r25	; 0x06
    d332:	8d 83       	std	Y+5, r24	; 0x05
    d334:	e9 81       	ldd	r30, Y+1	; 0x01
    d336:	fa 81       	ldd	r31, Y+2	; 0x02
    d338:	22 81       	ldd	r18, Z+2	; 0x02
    d33a:	33 81       	ldd	r19, Z+3	; 0x03
    d33c:	8d 81       	ldd	r24, Y+5	; 0x05
    d33e:	9e 81       	ldd	r25, Y+6	; 0x06
    d340:	82 17       	cp	r24, r18
    d342:	93 07       	cpc	r25, r19
    d344:	34 f2       	brlt	.-116    	; 0xd2d2 <unpackString+0x5e>
	{
		ASSERT_CHECK_CHAR((col->value[i]));
		str[i] = ((col->value[i])->value).charVal;
	}

	return str;
    d346:	8b 81       	ldd	r24, Y+3	; 0x03
    d348:	9c 81       	ldd	r25, Y+4	; 0x04
}
    d34a:	28 96       	adiw	r28, 0x08	; 8
    d34c:	0f b6       	in	r0, 0x3f	; 63
    d34e:	f8 94       	cli
    d350:	de bf       	out	0x3e, r29	; 62
    d352:	0f be       	out	0x3f, r0	; 63
    d354:	cd bf       	out	0x3d, r28	; 61
    d356:	cf 91       	pop	r28
    d358:	df 91       	pop	r29
    d35a:	08 95       	ret

0000d35c <__vector_20>:
    d35c:	1f 92       	push	r1
    d35e:	0f 92       	push	r0
    d360:	00 90 5f 00 	lds	r0, 0x005F
    d364:	0f 92       	push	r0
    d366:	11 24       	eor	r1, r1
    d368:	00 90 5b 00 	lds	r0, 0x005B
    d36c:	0f 92       	push	r0
    d36e:	2f 93       	push	r18
    d370:	8f 93       	push	r24
    d372:	9f 93       	push	r25
    d374:	ef 93       	push	r30
    d376:	ff 93       	push	r31
    d378:	cf 93       	push	r28
    d37a:	df 93       	push	r29
    d37c:	00 d0       	rcall	.+0      	; 0xd37e <__vector_20+0x22>
    d37e:	00 d0       	rcall	.+0      	; 0xd380 <__vector_20+0x24>
    d380:	cd b7       	in	r28, 0x3d	; 61
    d382:	de b7       	in	r29, 0x3e	; 62
    d384:	80 ec       	ldi	r24, 0xC0	; 192
    d386:	90 e0       	ldi	r25, 0x00	; 0
    d388:	fc 01       	movw	r30, r24
    d38a:	80 81       	ld	r24, Z
    d38c:	8a 83       	std	Y+2, r24	; 0x02
    d38e:	86 ec       	ldi	r24, 0xC6	; 198
    d390:	90 e0       	ldi	r25, 0x00	; 0
    d392:	fc 01       	movw	r30, r24
    d394:	80 81       	ld	r24, Z
    d396:	8b 83       	std	Y+3, r24	; 0x03
    d398:	8a 81       	ldd	r24, Y+2	; 0x02
    d39a:	8c 71       	andi	r24, 0x1C	; 28
    d39c:	89 83       	std	Y+1, r24	; 0x01
    d39e:	80 91 70 03 	lds	r24, 0x0370
    d3a2:	8f 5f       	subi	r24, 0xFF	; 255
    d3a4:	8f 71       	andi	r24, 0x1F	; 31
    d3a6:	8c 83       	std	Y+4, r24	; 0x04
    d3a8:	80 91 71 03 	lds	r24, 0x0371
    d3ac:	9c 81       	ldd	r25, Y+4	; 0x04
    d3ae:	98 17       	cp	r25, r24
    d3b0:	19 f4       	brne	.+6      	; 0xd3b8 <__vector_20+0x5c>
    d3b2:	82 e0       	ldi	r24, 0x02	; 2
    d3b4:	89 83       	std	Y+1, r24	; 0x01
    d3b6:	0b c0       	rjmp	.+22     	; 0xd3ce <__vector_20+0x72>
    d3b8:	8c 81       	ldd	r24, Y+4	; 0x04
    d3ba:	80 93 70 03 	sts	0x0370, r24
    d3be:	8c 81       	ldd	r24, Y+4	; 0x04
    d3c0:	88 2f       	mov	r24, r24
    d3c2:	90 e0       	ldi	r25, 0x00	; 0
    d3c4:	82 5b       	subi	r24, 0xB2	; 178
    d3c6:	9c 4f       	sbci	r25, 0xFC	; 252
    d3c8:	2b 81       	ldd	r18, Y+3	; 0x03
    d3ca:	fc 01       	movw	r30, r24
    d3cc:	20 83       	st	Z, r18
    d3ce:	90 91 72 03 	lds	r25, 0x0372
    d3d2:	89 81       	ldd	r24, Y+1	; 0x01
    d3d4:	89 2b       	or	r24, r25
    d3d6:	80 93 72 03 	sts	0x0372, r24
    d3da:	0f 90       	pop	r0
    d3dc:	0f 90       	pop	r0
    d3de:	0f 90       	pop	r0
    d3e0:	0f 90       	pop	r0
    d3e2:	df 91       	pop	r29
    d3e4:	cf 91       	pop	r28
    d3e6:	ff 91       	pop	r31
    d3e8:	ef 91       	pop	r30
    d3ea:	9f 91       	pop	r25
    d3ec:	8f 91       	pop	r24
    d3ee:	2f 91       	pop	r18
    d3f0:	0f 90       	pop	r0
    d3f2:	00 92 5b 00 	sts	0x005B, r0
    d3f6:	0f 90       	pop	r0
    d3f8:	00 92 5f 00 	sts	0x005F, r0
    d3fc:	0f 90       	pop	r0
    d3fe:	1f 90       	pop	r1
    d400:	18 95       	reti

0000d402 <__vector_21>:
    d402:	1f 92       	push	r1
    d404:	0f 92       	push	r0
    d406:	00 90 5f 00 	lds	r0, 0x005F
    d40a:	0f 92       	push	r0
    d40c:	11 24       	eor	r1, r1
    d40e:	00 90 5b 00 	lds	r0, 0x005B
    d412:	0f 92       	push	r0
    d414:	2f 93       	push	r18
    d416:	3f 93       	push	r19
    d418:	8f 93       	push	r24
    d41a:	9f 93       	push	r25
    d41c:	ef 93       	push	r30
    d41e:	ff 93       	push	r31
    d420:	cf 93       	push	r28
    d422:	df 93       	push	r29
    d424:	1f 92       	push	r1
    d426:	cd b7       	in	r28, 0x3d	; 61
    d428:	de b7       	in	r29, 0x3e	; 62
    d42a:	90 91 6e 03 	lds	r25, 0x036E
    d42e:	80 91 6f 03 	lds	r24, 0x036F
    d432:	98 17       	cp	r25, r24
    d434:	a1 f0       	breq	.+40     	; 0xd45e <__vector_21+0x5c>
    d436:	80 91 6f 03 	lds	r24, 0x036F
    d43a:	8f 5f       	subi	r24, 0xFF	; 255
    d43c:	8f 71       	andi	r24, 0x1F	; 31
    d43e:	89 83       	std	Y+1, r24	; 0x01
    d440:	89 81       	ldd	r24, Y+1	; 0x01
    d442:	80 93 6f 03 	sts	0x036F, r24
    d446:	86 ec       	ldi	r24, 0xC6	; 198
    d448:	90 e0       	ldi	r25, 0x00	; 0
    d44a:	29 81       	ldd	r18, Y+1	; 0x01
    d44c:	22 2f       	mov	r18, r18
    d44e:	30 e0       	ldi	r19, 0x00	; 0
    d450:	22 5d       	subi	r18, 0xD2	; 210
    d452:	3c 4f       	sbci	r19, 0xFC	; 252
    d454:	f9 01       	movw	r30, r18
    d456:	20 81       	ld	r18, Z
    d458:	fc 01       	movw	r30, r24
    d45a:	20 83       	st	Z, r18
    d45c:	09 c0       	rjmp	.+18     	; 0xd470 <__vector_21+0x6e>
    d45e:	81 ec       	ldi	r24, 0xC1	; 193
    d460:	90 e0       	ldi	r25, 0x00	; 0
    d462:	21 ec       	ldi	r18, 0xC1	; 193
    d464:	30 e0       	ldi	r19, 0x00	; 0
    d466:	f9 01       	movw	r30, r18
    d468:	20 81       	ld	r18, Z
    d46a:	2f 7d       	andi	r18, 0xDF	; 223
    d46c:	fc 01       	movw	r30, r24
    d46e:	20 83       	st	Z, r18
    d470:	0f 90       	pop	r0
    d472:	df 91       	pop	r29
    d474:	cf 91       	pop	r28
    d476:	ff 91       	pop	r31
    d478:	ef 91       	pop	r30
    d47a:	9f 91       	pop	r25
    d47c:	8f 91       	pop	r24
    d47e:	3f 91       	pop	r19
    d480:	2f 91       	pop	r18
    d482:	0f 90       	pop	r0
    d484:	00 92 5b 00 	sts	0x005B, r0
    d488:	0f 90       	pop	r0
    d48a:	00 92 5f 00 	sts	0x005F, r0
    d48e:	0f 90       	pop	r0
    d490:	1f 90       	pop	r1
    d492:	18 95       	reti

0000d494 <uart_init>:
    d494:	cf 93       	push	r28
    d496:	df 93       	push	r29
    d498:	00 d0       	rcall	.+0      	; 0xd49a <uart_init+0x6>
    d49a:	cd b7       	in	r28, 0x3d	; 61
    d49c:	de b7       	in	r29, 0x3e	; 62
    d49e:	9a 83       	std	Y+2, r25	; 0x02
    d4a0:	89 83       	std	Y+1, r24	; 0x01
    d4a2:	10 92 6e 03 	sts	0x036E, r1
    d4a6:	10 92 6f 03 	sts	0x036F, r1
    d4aa:	10 92 70 03 	sts	0x0370, r1
    d4ae:	10 92 71 03 	sts	0x0371, r1
    d4b2:	89 81       	ldd	r24, Y+1	; 0x01
    d4b4:	9a 81       	ldd	r25, Y+2	; 0x02
    d4b6:	99 23       	and	r25, r25
    d4b8:	2c f4       	brge	.+10     	; 0xd4c4 <uart_init+0x30>
    d4ba:	80 ec       	ldi	r24, 0xC0	; 192
    d4bc:	90 e0       	ldi	r25, 0x00	; 0
    d4be:	22 e0       	ldi	r18, 0x02	; 2
    d4c0:	fc 01       	movw	r30, r24
    d4c2:	20 83       	st	Z, r18
    d4c4:	85 ec       	ldi	r24, 0xC5	; 197
    d4c6:	90 e0       	ldi	r25, 0x00	; 0
    d4c8:	29 81       	ldd	r18, Y+1	; 0x01
    d4ca:	3a 81       	ldd	r19, Y+2	; 0x02
    d4cc:	23 2f       	mov	r18, r19
    d4ce:	33 27       	eor	r19, r19
    d4d0:	20 78       	andi	r18, 0x80	; 128
    d4d2:	fc 01       	movw	r30, r24
    d4d4:	20 83       	st	Z, r18
    d4d6:	84 ec       	ldi	r24, 0xC4	; 196
    d4d8:	90 e0       	ldi	r25, 0x00	; 0
    d4da:	29 81       	ldd	r18, Y+1	; 0x01
    d4dc:	fc 01       	movw	r30, r24
    d4de:	20 83       	st	Z, r18
    d4e0:	81 ec       	ldi	r24, 0xC1	; 193
    d4e2:	90 e0       	ldi	r25, 0x00	; 0
    d4e4:	28 e9       	ldi	r18, 0x98	; 152
    d4e6:	fc 01       	movw	r30, r24
    d4e8:	20 83       	st	Z, r18
    d4ea:	82 ec       	ldi	r24, 0xC2	; 194
    d4ec:	90 e0       	ldi	r25, 0x00	; 0
    d4ee:	26 e0       	ldi	r18, 0x06	; 6
    d4f0:	fc 01       	movw	r30, r24
    d4f2:	20 83       	st	Z, r18
    d4f4:	0f 90       	pop	r0
    d4f6:	0f 90       	pop	r0
    d4f8:	df 91       	pop	r29
    d4fa:	cf 91       	pop	r28
    d4fc:	08 95       	ret

0000d4fe <uart_getc>:
    d4fe:	cf 93       	push	r28
    d500:	df 93       	push	r29
    d502:	00 d0       	rcall	.+0      	; 0xd504 <uart_getc+0x6>
    d504:	1f 92       	push	r1
    d506:	cd b7       	in	r28, 0x3d	; 61
    d508:	de b7       	in	r29, 0x3e	; 62
    d50a:	90 91 70 03 	lds	r25, 0x0370
    d50e:	80 91 71 03 	lds	r24, 0x0371
    d512:	98 17       	cp	r25, r24
    d514:	19 f4       	brne	.+6      	; 0xd51c <uart_getc+0x1e>
    d516:	80 e0       	ldi	r24, 0x00	; 0
    d518:	91 e0       	ldi	r25, 0x01	; 1
    d51a:	1f c0       	rjmp	.+62     	; 0xd55a <uart_getc+0x5c>
    d51c:	80 91 71 03 	lds	r24, 0x0371
    d520:	8f 5f       	subi	r24, 0xFF	; 255
    d522:	8f 71       	andi	r24, 0x1F	; 31
    d524:	89 83       	std	Y+1, r24	; 0x01
    d526:	89 81       	ldd	r24, Y+1	; 0x01
    d528:	88 2f       	mov	r24, r24
    d52a:	90 e0       	ldi	r25, 0x00	; 0
    d52c:	82 5b       	subi	r24, 0xB2	; 178
    d52e:	9c 4f       	sbci	r25, 0xFC	; 252
    d530:	fc 01       	movw	r30, r24
    d532:	80 81       	ld	r24, Z
    d534:	8a 83       	std	Y+2, r24	; 0x02
    d536:	80 91 72 03 	lds	r24, 0x0372
    d53a:	8b 83       	std	Y+3, r24	; 0x03
    d53c:	89 81       	ldd	r24, Y+1	; 0x01
    d53e:	80 93 71 03 	sts	0x0371, r24
    d542:	10 92 72 03 	sts	0x0372, r1
    d546:	8b 81       	ldd	r24, Y+3	; 0x03
    d548:	88 2f       	mov	r24, r24
    d54a:	90 e0       	ldi	r25, 0x00	; 0
    d54c:	38 2f       	mov	r19, r24
    d54e:	22 27       	eor	r18, r18
    d550:	8a 81       	ldd	r24, Y+2	; 0x02
    d552:	88 2f       	mov	r24, r24
    d554:	90 e0       	ldi	r25, 0x00	; 0
    d556:	82 0f       	add	r24, r18
    d558:	93 1f       	adc	r25, r19
    d55a:	0f 90       	pop	r0
    d55c:	0f 90       	pop	r0
    d55e:	0f 90       	pop	r0
    d560:	df 91       	pop	r29
    d562:	cf 91       	pop	r28
    d564:	08 95       	ret

0000d566 <uart_putc>:
    d566:	cf 93       	push	r28
    d568:	df 93       	push	r29
    d56a:	00 d0       	rcall	.+0      	; 0xd56c <uart_putc+0x6>
    d56c:	cd b7       	in	r28, 0x3d	; 61
    d56e:	de b7       	in	r29, 0x3e	; 62
    d570:	8a 83       	std	Y+2, r24	; 0x02
    d572:	80 91 6e 03 	lds	r24, 0x036E
    d576:	8f 5f       	subi	r24, 0xFF	; 255
    d578:	8f 71       	andi	r24, 0x1F	; 31
    d57a:	89 83       	std	Y+1, r24	; 0x01
    d57c:	00 00       	nop
    d57e:	80 91 6f 03 	lds	r24, 0x036F
    d582:	99 81       	ldd	r25, Y+1	; 0x01
    d584:	98 17       	cp	r25, r24
    d586:	d9 f3       	breq	.-10     	; 0xd57e <uart_putc+0x18>
    d588:	89 81       	ldd	r24, Y+1	; 0x01
    d58a:	88 2f       	mov	r24, r24
    d58c:	90 e0       	ldi	r25, 0x00	; 0
    d58e:	82 5d       	subi	r24, 0xD2	; 210
    d590:	9c 4f       	sbci	r25, 0xFC	; 252
    d592:	2a 81       	ldd	r18, Y+2	; 0x02
    d594:	fc 01       	movw	r30, r24
    d596:	20 83       	st	Z, r18
    d598:	89 81       	ldd	r24, Y+1	; 0x01
    d59a:	80 93 6e 03 	sts	0x036E, r24
    d59e:	81 ec       	ldi	r24, 0xC1	; 193
    d5a0:	90 e0       	ldi	r25, 0x00	; 0
    d5a2:	21 ec       	ldi	r18, 0xC1	; 193
    d5a4:	30 e0       	ldi	r19, 0x00	; 0
    d5a6:	f9 01       	movw	r30, r18
    d5a8:	20 81       	ld	r18, Z
    d5aa:	20 62       	ori	r18, 0x20	; 32
    d5ac:	fc 01       	movw	r30, r24
    d5ae:	20 83       	st	Z, r18
    d5b0:	0f 90       	pop	r0
    d5b2:	0f 90       	pop	r0
    d5b4:	df 91       	pop	r29
    d5b6:	cf 91       	pop	r28
    d5b8:	08 95       	ret

0000d5ba <uart_puts>:
    d5ba:	cf 93       	push	r28
    d5bc:	df 93       	push	r29
    d5be:	00 d0       	rcall	.+0      	; 0xd5c0 <uart_puts+0x6>
    d5c0:	cd b7       	in	r28, 0x3d	; 61
    d5c2:	de b7       	in	r29, 0x3e	; 62
    d5c4:	9a 83       	std	Y+2, r25	; 0x02
    d5c6:	89 83       	std	Y+1, r24	; 0x01
    d5c8:	0b c0       	rjmp	.+22     	; 0xd5e0 <uart_puts+0x26>
    d5ca:	89 81       	ldd	r24, Y+1	; 0x01
    d5cc:	9a 81       	ldd	r25, Y+2	; 0x02
    d5ce:	9c 01       	movw	r18, r24
    d5d0:	2f 5f       	subi	r18, 0xFF	; 255
    d5d2:	3f 4f       	sbci	r19, 0xFF	; 255
    d5d4:	3a 83       	std	Y+2, r19	; 0x02
    d5d6:	29 83       	std	Y+1, r18	; 0x01
    d5d8:	fc 01       	movw	r30, r24
    d5da:	80 81       	ld	r24, Z
    d5dc:	0e 94 b3 6a 	call	0xd566	; 0xd566 <uart_putc>
    d5e0:	89 81       	ldd	r24, Y+1	; 0x01
    d5e2:	9a 81       	ldd	r25, Y+2	; 0x02
    d5e4:	fc 01       	movw	r30, r24
    d5e6:	80 81       	ld	r24, Z
    d5e8:	88 23       	and	r24, r24
    d5ea:	79 f7       	brne	.-34     	; 0xd5ca <uart_puts+0x10>
    d5ec:	0f 90       	pop	r0
    d5ee:	0f 90       	pop	r0
    d5f0:	df 91       	pop	r29
    d5f2:	cf 91       	pop	r28
    d5f4:	08 95       	ret

0000d5f6 <uart_puts_p>:
    d5f6:	1f 93       	push	r17
    d5f8:	cf 93       	push	r28
    d5fa:	df 93       	push	r29
    d5fc:	00 d0       	rcall	.+0      	; 0xd5fe <uart_puts_p+0x8>
    d5fe:	00 d0       	rcall	.+0      	; 0xd600 <uart_puts_p+0xa>
    d600:	1f 92       	push	r1
    d602:	cd b7       	in	r28, 0x3d	; 61
    d604:	de b7       	in	r29, 0x3e	; 62
    d606:	9d 83       	std	Y+5, r25	; 0x05
    d608:	8c 83       	std	Y+4, r24	; 0x04
    d60a:	03 c0       	rjmp	.+6      	; 0xd612 <uart_puts_p+0x1c>
    d60c:	81 2f       	mov	r24, r17
    d60e:	0e 94 b3 6a 	call	0xd566	; 0xd566 <uart_putc>
    d612:	8c 81       	ldd	r24, Y+4	; 0x04
    d614:	9d 81       	ldd	r25, Y+5	; 0x05
    d616:	9c 01       	movw	r18, r24
    d618:	2f 5f       	subi	r18, 0xFF	; 255
    d61a:	3f 4f       	sbci	r19, 0xFF	; 255
    d61c:	3d 83       	std	Y+5, r19	; 0x05
    d61e:	2c 83       	std	Y+4, r18	; 0x04
    d620:	9a 83       	std	Y+2, r25	; 0x02
    d622:	89 83       	std	Y+1, r24	; 0x01
    d624:	89 81       	ldd	r24, Y+1	; 0x01
    d626:	9a 81       	ldd	r25, Y+2	; 0x02
    d628:	fc 01       	movw	r30, r24
    d62a:	84 91       	lpm	r24, Z+
    d62c:	8b 83       	std	Y+3, r24	; 0x03
    d62e:	8b 81       	ldd	r24, Y+3	; 0x03
    d630:	18 2f       	mov	r17, r24
    d632:	11 23       	and	r17, r17
    d634:	59 f7       	brne	.-42     	; 0xd60c <uart_puts_p+0x16>
    d636:	0f 90       	pop	r0
    d638:	0f 90       	pop	r0
    d63a:	0f 90       	pop	r0
    d63c:	0f 90       	pop	r0
    d63e:	0f 90       	pop	r0
    d640:	df 91       	pop	r29
    d642:	cf 91       	pop	r28
    d644:	1f 91       	pop	r17
    d646:	08 95       	ret

0000d648 <__vector_28>:
    d648:	1f 92       	push	r1
    d64a:	0f 92       	push	r0
    d64c:	00 90 5f 00 	lds	r0, 0x005F
    d650:	0f 92       	push	r0
    d652:	11 24       	eor	r1, r1
    d654:	00 90 5b 00 	lds	r0, 0x005B
    d658:	0f 92       	push	r0
    d65a:	2f 93       	push	r18
    d65c:	8f 93       	push	r24
    d65e:	9f 93       	push	r25
    d660:	ef 93       	push	r30
    d662:	ff 93       	push	r31
    d664:	cf 93       	push	r28
    d666:	df 93       	push	r29
    d668:	00 d0       	rcall	.+0      	; 0xd66a <__vector_28+0x22>
    d66a:	00 d0       	rcall	.+0      	; 0xd66c <__vector_28+0x24>
    d66c:	cd b7       	in	r28, 0x3d	; 61
    d66e:	de b7       	in	r29, 0x3e	; 62
    d670:	88 ec       	ldi	r24, 0xC8	; 200
    d672:	90 e0       	ldi	r25, 0x00	; 0
    d674:	fc 01       	movw	r30, r24
    d676:	80 81       	ld	r24, Z
    d678:	8a 83       	std	Y+2, r24	; 0x02
    d67a:	8e ec       	ldi	r24, 0xCE	; 206
    d67c:	90 e0       	ldi	r25, 0x00	; 0
    d67e:	fc 01       	movw	r30, r24
    d680:	80 81       	ld	r24, Z
    d682:	8b 83       	std	Y+3, r24	; 0x03
    d684:	8a 81       	ldd	r24, Y+2	; 0x02
    d686:	8c 71       	andi	r24, 0x1C	; 28
    d688:	89 83       	std	Y+1, r24	; 0x01
    d68a:	80 91 b5 03 	lds	r24, 0x03B5
    d68e:	8f 5f       	subi	r24, 0xFF	; 255
    d690:	8f 71       	andi	r24, 0x1F	; 31
    d692:	8c 83       	std	Y+4, r24	; 0x04
    d694:	80 91 b6 03 	lds	r24, 0x03B6
    d698:	9c 81       	ldd	r25, Y+4	; 0x04
    d69a:	98 17       	cp	r25, r24
    d69c:	19 f4       	brne	.+6      	; 0xd6a4 <__vector_28+0x5c>
    d69e:	82 e0       	ldi	r24, 0x02	; 2
    d6a0:	89 83       	std	Y+1, r24	; 0x01
    d6a2:	0b c0       	rjmp	.+22     	; 0xd6ba <__vector_28+0x72>
    d6a4:	8c 81       	ldd	r24, Y+4	; 0x04
    d6a6:	80 93 b5 03 	sts	0x03B5, r24
    d6aa:	8c 81       	ldd	r24, Y+4	; 0x04
    d6ac:	88 2f       	mov	r24, r24
    d6ae:	90 e0       	ldi	r25, 0x00	; 0
    d6b0:	8d 56       	subi	r24, 0x6D	; 109
    d6b2:	9c 4f       	sbci	r25, 0xFC	; 252
    d6b4:	2b 81       	ldd	r18, Y+3	; 0x03
    d6b6:	fc 01       	movw	r30, r24
    d6b8:	20 83       	st	Z, r18
    d6ba:	90 91 b7 03 	lds	r25, 0x03B7
    d6be:	89 81       	ldd	r24, Y+1	; 0x01
    d6c0:	89 2b       	or	r24, r25
    d6c2:	80 93 b7 03 	sts	0x03B7, r24
    d6c6:	0f 90       	pop	r0
    d6c8:	0f 90       	pop	r0
    d6ca:	0f 90       	pop	r0
    d6cc:	0f 90       	pop	r0
    d6ce:	df 91       	pop	r29
    d6d0:	cf 91       	pop	r28
    d6d2:	ff 91       	pop	r31
    d6d4:	ef 91       	pop	r30
    d6d6:	9f 91       	pop	r25
    d6d8:	8f 91       	pop	r24
    d6da:	2f 91       	pop	r18
    d6dc:	0f 90       	pop	r0
    d6de:	00 92 5b 00 	sts	0x005B, r0
    d6e2:	0f 90       	pop	r0
    d6e4:	00 92 5f 00 	sts	0x005F, r0
    d6e8:	0f 90       	pop	r0
    d6ea:	1f 90       	pop	r1
    d6ec:	18 95       	reti

0000d6ee <__vector_29>:
    d6ee:	1f 92       	push	r1
    d6f0:	0f 92       	push	r0
    d6f2:	00 90 5f 00 	lds	r0, 0x005F
    d6f6:	0f 92       	push	r0
    d6f8:	11 24       	eor	r1, r1
    d6fa:	00 90 5b 00 	lds	r0, 0x005B
    d6fe:	0f 92       	push	r0
    d700:	2f 93       	push	r18
    d702:	3f 93       	push	r19
    d704:	8f 93       	push	r24
    d706:	9f 93       	push	r25
    d708:	ef 93       	push	r30
    d70a:	ff 93       	push	r31
    d70c:	cf 93       	push	r28
    d70e:	df 93       	push	r29
    d710:	1f 92       	push	r1
    d712:	cd b7       	in	r28, 0x3d	; 61
    d714:	de b7       	in	r29, 0x3e	; 62
    d716:	90 91 b3 03 	lds	r25, 0x03B3
    d71a:	80 91 b4 03 	lds	r24, 0x03B4
    d71e:	98 17       	cp	r25, r24
    d720:	a1 f0       	breq	.+40     	; 0xd74a <__vector_29+0x5c>
    d722:	80 91 b4 03 	lds	r24, 0x03B4
    d726:	8f 5f       	subi	r24, 0xFF	; 255
    d728:	8f 71       	andi	r24, 0x1F	; 31
    d72a:	89 83       	std	Y+1, r24	; 0x01
    d72c:	89 81       	ldd	r24, Y+1	; 0x01
    d72e:	80 93 b4 03 	sts	0x03B4, r24
    d732:	8e ec       	ldi	r24, 0xCE	; 206
    d734:	90 e0       	ldi	r25, 0x00	; 0
    d736:	29 81       	ldd	r18, Y+1	; 0x01
    d738:	22 2f       	mov	r18, r18
    d73a:	30 e0       	ldi	r19, 0x00	; 0
    d73c:	2d 58       	subi	r18, 0x8D	; 141
    d73e:	3c 4f       	sbci	r19, 0xFC	; 252
    d740:	f9 01       	movw	r30, r18
    d742:	20 81       	ld	r18, Z
    d744:	fc 01       	movw	r30, r24
    d746:	20 83       	st	Z, r18
    d748:	09 c0       	rjmp	.+18     	; 0xd75c <__vector_29+0x6e>
    d74a:	89 ec       	ldi	r24, 0xC9	; 201
    d74c:	90 e0       	ldi	r25, 0x00	; 0
    d74e:	29 ec       	ldi	r18, 0xC9	; 201
    d750:	30 e0       	ldi	r19, 0x00	; 0
    d752:	f9 01       	movw	r30, r18
    d754:	20 81       	ld	r18, Z
    d756:	2f 7d       	andi	r18, 0xDF	; 223
    d758:	fc 01       	movw	r30, r24
    d75a:	20 83       	st	Z, r18
    d75c:	0f 90       	pop	r0
    d75e:	df 91       	pop	r29
    d760:	cf 91       	pop	r28
    d762:	ff 91       	pop	r31
    d764:	ef 91       	pop	r30
    d766:	9f 91       	pop	r25
    d768:	8f 91       	pop	r24
    d76a:	3f 91       	pop	r19
    d76c:	2f 91       	pop	r18
    d76e:	0f 90       	pop	r0
    d770:	00 92 5b 00 	sts	0x005B, r0
    d774:	0f 90       	pop	r0
    d776:	00 92 5f 00 	sts	0x005F, r0
    d77a:	0f 90       	pop	r0
    d77c:	1f 90       	pop	r1
    d77e:	18 95       	reti

0000d780 <uart1_init>:
    d780:	cf 93       	push	r28
    d782:	df 93       	push	r29
    d784:	00 d0       	rcall	.+0      	; 0xd786 <uart1_init+0x6>
    d786:	cd b7       	in	r28, 0x3d	; 61
    d788:	de b7       	in	r29, 0x3e	; 62
    d78a:	9a 83       	std	Y+2, r25	; 0x02
    d78c:	89 83       	std	Y+1, r24	; 0x01
    d78e:	10 92 b3 03 	sts	0x03B3, r1
    d792:	10 92 b4 03 	sts	0x03B4, r1
    d796:	10 92 b5 03 	sts	0x03B5, r1
    d79a:	10 92 b6 03 	sts	0x03B6, r1
    d79e:	89 81       	ldd	r24, Y+1	; 0x01
    d7a0:	9a 81       	ldd	r25, Y+2	; 0x02
    d7a2:	99 23       	and	r25, r25
    d7a4:	2c f4       	brge	.+10     	; 0xd7b0 <uart1_init+0x30>
    d7a6:	88 ec       	ldi	r24, 0xC8	; 200
    d7a8:	90 e0       	ldi	r25, 0x00	; 0
    d7aa:	22 e0       	ldi	r18, 0x02	; 2
    d7ac:	fc 01       	movw	r30, r24
    d7ae:	20 83       	st	Z, r18
    d7b0:	8d ec       	ldi	r24, 0xCD	; 205
    d7b2:	90 e0       	ldi	r25, 0x00	; 0
    d7b4:	29 81       	ldd	r18, Y+1	; 0x01
    d7b6:	3a 81       	ldd	r19, Y+2	; 0x02
    d7b8:	23 2f       	mov	r18, r19
    d7ba:	33 27       	eor	r19, r19
    d7bc:	20 78       	andi	r18, 0x80	; 128
    d7be:	fc 01       	movw	r30, r24
    d7c0:	20 83       	st	Z, r18
    d7c2:	8c ec       	ldi	r24, 0xCC	; 204
    d7c4:	90 e0       	ldi	r25, 0x00	; 0
    d7c6:	29 81       	ldd	r18, Y+1	; 0x01
    d7c8:	fc 01       	movw	r30, r24
    d7ca:	20 83       	st	Z, r18
    d7cc:	89 ec       	ldi	r24, 0xC9	; 201
    d7ce:	90 e0       	ldi	r25, 0x00	; 0
    d7d0:	28 e9       	ldi	r18, 0x98	; 152
    d7d2:	fc 01       	movw	r30, r24
    d7d4:	20 83       	st	Z, r18
    d7d6:	8a ec       	ldi	r24, 0xCA	; 202
    d7d8:	90 e0       	ldi	r25, 0x00	; 0
    d7da:	26 e0       	ldi	r18, 0x06	; 6
    d7dc:	fc 01       	movw	r30, r24
    d7de:	20 83       	st	Z, r18
    d7e0:	0f 90       	pop	r0
    d7e2:	0f 90       	pop	r0
    d7e4:	df 91       	pop	r29
    d7e6:	cf 91       	pop	r28
    d7e8:	08 95       	ret

0000d7ea <uart1_getc>:
    d7ea:	cf 93       	push	r28
    d7ec:	df 93       	push	r29
    d7ee:	00 d0       	rcall	.+0      	; 0xd7f0 <uart1_getc+0x6>
    d7f0:	00 d0       	rcall	.+0      	; 0xd7f2 <uart1_getc+0x8>
    d7f2:	cd b7       	in	r28, 0x3d	; 61
    d7f4:	de b7       	in	r29, 0x3e	; 62
    d7f6:	90 91 b5 03 	lds	r25, 0x03B5
    d7fa:	80 91 b6 03 	lds	r24, 0x03B6
    d7fe:	98 17       	cp	r25, r24
    d800:	19 f4       	brne	.+6      	; 0xd808 <uart1_getc+0x1e>
    d802:	80 e0       	ldi	r24, 0x00	; 0
    d804:	91 e0       	ldi	r25, 0x01	; 1
    d806:	22 c0       	rjmp	.+68     	; 0xd84c <uart1_getc+0x62>
    d808:	80 91 b6 03 	lds	r24, 0x03B6
    d80c:	8f 5f       	subi	r24, 0xFF	; 255
    d80e:	8f 71       	andi	r24, 0x1F	; 31
    d810:	89 83       	std	Y+1, r24	; 0x01
    d812:	89 81       	ldd	r24, Y+1	; 0x01
    d814:	88 2f       	mov	r24, r24
    d816:	90 e0       	ldi	r25, 0x00	; 0
    d818:	8d 56       	subi	r24, 0x6D	; 109
    d81a:	9c 4f       	sbci	r25, 0xFC	; 252
    d81c:	fc 01       	movw	r30, r24
    d81e:	80 81       	ld	r24, Z
    d820:	88 2f       	mov	r24, r24
    d822:	90 e0       	ldi	r25, 0x00	; 0
    d824:	9b 83       	std	Y+3, r25	; 0x03
    d826:	8a 83       	std	Y+2, r24	; 0x02
    d828:	80 91 b7 03 	lds	r24, 0x03B7
    d82c:	8c 83       	std	Y+4, r24	; 0x04
    d82e:	89 81       	ldd	r24, Y+1	; 0x01
    d830:	80 93 b6 03 	sts	0x03B6, r24
    d834:	10 92 b7 03 	sts	0x03B7, r1
    d838:	8c 81       	ldd	r24, Y+4	; 0x04
    d83a:	88 2f       	mov	r24, r24
    d83c:	90 e0       	ldi	r25, 0x00	; 0
    d83e:	98 2f       	mov	r25, r24
    d840:	88 27       	eor	r24, r24
    d842:	9c 01       	movw	r18, r24
    d844:	8a 81       	ldd	r24, Y+2	; 0x02
    d846:	9b 81       	ldd	r25, Y+3	; 0x03
    d848:	82 0f       	add	r24, r18
    d84a:	93 1f       	adc	r25, r19
    d84c:	0f 90       	pop	r0
    d84e:	0f 90       	pop	r0
    d850:	0f 90       	pop	r0
    d852:	0f 90       	pop	r0
    d854:	df 91       	pop	r29
    d856:	cf 91       	pop	r28
    d858:	08 95       	ret

0000d85a <uart1_putc>:
    d85a:	cf 93       	push	r28
    d85c:	df 93       	push	r29
    d85e:	00 d0       	rcall	.+0      	; 0xd860 <uart1_putc+0x6>
    d860:	cd b7       	in	r28, 0x3d	; 61
    d862:	de b7       	in	r29, 0x3e	; 62
    d864:	8a 83       	std	Y+2, r24	; 0x02
    d866:	80 91 b3 03 	lds	r24, 0x03B3
    d86a:	8f 5f       	subi	r24, 0xFF	; 255
    d86c:	8f 71       	andi	r24, 0x1F	; 31
    d86e:	89 83       	std	Y+1, r24	; 0x01
    d870:	00 00       	nop
    d872:	80 91 b4 03 	lds	r24, 0x03B4
    d876:	99 81       	ldd	r25, Y+1	; 0x01
    d878:	98 17       	cp	r25, r24
    d87a:	d9 f3       	breq	.-10     	; 0xd872 <uart1_putc+0x18>
    d87c:	89 81       	ldd	r24, Y+1	; 0x01
    d87e:	88 2f       	mov	r24, r24
    d880:	90 e0       	ldi	r25, 0x00	; 0
    d882:	8d 58       	subi	r24, 0x8D	; 141
    d884:	9c 4f       	sbci	r25, 0xFC	; 252
    d886:	2a 81       	ldd	r18, Y+2	; 0x02
    d888:	fc 01       	movw	r30, r24
    d88a:	20 83       	st	Z, r18
    d88c:	89 81       	ldd	r24, Y+1	; 0x01
    d88e:	80 93 b3 03 	sts	0x03B3, r24
    d892:	89 ec       	ldi	r24, 0xC9	; 201
    d894:	90 e0       	ldi	r25, 0x00	; 0
    d896:	29 ec       	ldi	r18, 0xC9	; 201
    d898:	30 e0       	ldi	r19, 0x00	; 0
    d89a:	f9 01       	movw	r30, r18
    d89c:	20 81       	ld	r18, Z
    d89e:	20 62       	ori	r18, 0x20	; 32
    d8a0:	fc 01       	movw	r30, r24
    d8a2:	20 83       	st	Z, r18
    d8a4:	0f 90       	pop	r0
    d8a6:	0f 90       	pop	r0
    d8a8:	df 91       	pop	r29
    d8aa:	cf 91       	pop	r28
    d8ac:	08 95       	ret

0000d8ae <uart1_puts>:
    d8ae:	cf 93       	push	r28
    d8b0:	df 93       	push	r29
    d8b2:	00 d0       	rcall	.+0      	; 0xd8b4 <uart1_puts+0x6>
    d8b4:	cd b7       	in	r28, 0x3d	; 61
    d8b6:	de b7       	in	r29, 0x3e	; 62
    d8b8:	9a 83       	std	Y+2, r25	; 0x02
    d8ba:	89 83       	std	Y+1, r24	; 0x01
    d8bc:	0b c0       	rjmp	.+22     	; 0xd8d4 <uart1_puts+0x26>
    d8be:	89 81       	ldd	r24, Y+1	; 0x01
    d8c0:	9a 81       	ldd	r25, Y+2	; 0x02
    d8c2:	9c 01       	movw	r18, r24
    d8c4:	2f 5f       	subi	r18, 0xFF	; 255
    d8c6:	3f 4f       	sbci	r19, 0xFF	; 255
    d8c8:	3a 83       	std	Y+2, r19	; 0x02
    d8ca:	29 83       	std	Y+1, r18	; 0x01
    d8cc:	fc 01       	movw	r30, r24
    d8ce:	80 81       	ld	r24, Z
    d8d0:	0e 94 2d 6c 	call	0xd85a	; 0xd85a <uart1_putc>
    d8d4:	89 81       	ldd	r24, Y+1	; 0x01
    d8d6:	9a 81       	ldd	r25, Y+2	; 0x02
    d8d8:	fc 01       	movw	r30, r24
    d8da:	80 81       	ld	r24, Z
    d8dc:	88 23       	and	r24, r24
    d8de:	79 f7       	brne	.-34     	; 0xd8be <uart1_puts+0x10>
    d8e0:	0f 90       	pop	r0
    d8e2:	0f 90       	pop	r0
    d8e4:	df 91       	pop	r29
    d8e6:	cf 91       	pop	r28
    d8e8:	08 95       	ret

0000d8ea <uart1_puts_p>:
    d8ea:	1f 93       	push	r17
    d8ec:	cf 93       	push	r28
    d8ee:	df 93       	push	r29
    d8f0:	00 d0       	rcall	.+0      	; 0xd8f2 <uart1_puts_p+0x8>
    d8f2:	00 d0       	rcall	.+0      	; 0xd8f4 <uart1_puts_p+0xa>
    d8f4:	1f 92       	push	r1
    d8f6:	cd b7       	in	r28, 0x3d	; 61
    d8f8:	de b7       	in	r29, 0x3e	; 62
    d8fa:	9d 83       	std	Y+5, r25	; 0x05
    d8fc:	8c 83       	std	Y+4, r24	; 0x04
    d8fe:	03 c0       	rjmp	.+6      	; 0xd906 <uart1_puts_p+0x1c>
    d900:	81 2f       	mov	r24, r17
    d902:	0e 94 2d 6c 	call	0xd85a	; 0xd85a <uart1_putc>
    d906:	8c 81       	ldd	r24, Y+4	; 0x04
    d908:	9d 81       	ldd	r25, Y+5	; 0x05
    d90a:	9c 01       	movw	r18, r24
    d90c:	2f 5f       	subi	r18, 0xFF	; 255
    d90e:	3f 4f       	sbci	r19, 0xFF	; 255
    d910:	3d 83       	std	Y+5, r19	; 0x05
    d912:	2c 83       	std	Y+4, r18	; 0x04
    d914:	9a 83       	std	Y+2, r25	; 0x02
    d916:	89 83       	std	Y+1, r24	; 0x01
    d918:	89 81       	ldd	r24, Y+1	; 0x01
    d91a:	9a 81       	ldd	r25, Y+2	; 0x02
    d91c:	fc 01       	movw	r30, r24
    d91e:	84 91       	lpm	r24, Z+
    d920:	8b 83       	std	Y+3, r24	; 0x03
    d922:	8b 81       	ldd	r24, Y+3	; 0x03
    d924:	18 2f       	mov	r17, r24
    d926:	11 23       	and	r17, r17
    d928:	59 f7       	brne	.-42     	; 0xd900 <uart1_puts_p+0x16>
    d92a:	0f 90       	pop	r0
    d92c:	0f 90       	pop	r0
    d92e:	0f 90       	pop	r0
    d930:	0f 90       	pop	r0
    d932:	0f 90       	pop	r0
    d934:	df 91       	pop	r29
    d936:	cf 91       	pop	r28
    d938:	1f 91       	pop	r17
    d93a:	08 95       	ret

0000d93c <calloc>:
    d93c:	0f 93       	push	r16
    d93e:	1f 93       	push	r17
    d940:	cf 93       	push	r28
    d942:	df 93       	push	r29
    d944:	68 9f       	mul	r22, r24
    d946:	80 01       	movw	r16, r0
    d948:	69 9f       	mul	r22, r25
    d94a:	10 0d       	add	r17, r0
    d94c:	78 9f       	mul	r23, r24
    d94e:	10 0d       	add	r17, r0
    d950:	11 24       	eor	r1, r1
    d952:	c8 01       	movw	r24, r16
    d954:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    d958:	ec 01       	movw	r28, r24
    d95a:	00 97       	sbiw	r24, 0x00	; 0
    d95c:	29 f0       	breq	.+10     	; 0xd968 <calloc+0x2c>
    d95e:	60 e0       	ldi	r22, 0x00	; 0
    d960:	70 e0       	ldi	r23, 0x00	; 0
    d962:	a8 01       	movw	r20, r16
    d964:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <memset>
    d968:	ce 01       	movw	r24, r28
    d96a:	df 91       	pop	r29
    d96c:	cf 91       	pop	r28
    d96e:	1f 91       	pop	r17
    d970:	0f 91       	pop	r16
    d972:	08 95       	ret

0000d974 <malloc>:
    d974:	cf 93       	push	r28
    d976:	df 93       	push	r29
    d978:	bc 01       	movw	r22, r24
    d97a:	82 30       	cpi	r24, 0x02	; 2
    d97c:	91 05       	cpc	r25, r1
    d97e:	10 f4       	brcc	.+4      	; 0xd984 <malloc+0x10>
    d980:	62 e0       	ldi	r22, 0x02	; 2
    d982:	70 e0       	ldi	r23, 0x00	; 0
    d984:	a0 91 fe 03 	lds	r26, 0x03FE
    d988:	b0 91 ff 03 	lds	r27, 0x03FF
    d98c:	ed 01       	movw	r28, r26
    d98e:	e0 e0       	ldi	r30, 0x00	; 0
    d990:	f0 e0       	ldi	r31, 0x00	; 0
    d992:	40 e0       	ldi	r20, 0x00	; 0
    d994:	50 e0       	ldi	r21, 0x00	; 0
    d996:	21 c0       	rjmp	.+66     	; 0xd9da <malloc+0x66>
    d998:	88 81       	ld	r24, Y
    d99a:	99 81       	ldd	r25, Y+1	; 0x01
    d99c:	86 17       	cp	r24, r22
    d99e:	97 07       	cpc	r25, r23
    d9a0:	69 f4       	brne	.+26     	; 0xd9bc <malloc+0x48>
    d9a2:	8a 81       	ldd	r24, Y+2	; 0x02
    d9a4:	9b 81       	ldd	r25, Y+3	; 0x03
    d9a6:	30 97       	sbiw	r30, 0x00	; 0
    d9a8:	19 f0       	breq	.+6      	; 0xd9b0 <malloc+0x3c>
    d9aa:	93 83       	std	Z+3, r25	; 0x03
    d9ac:	82 83       	std	Z+2, r24	; 0x02
    d9ae:	04 c0       	rjmp	.+8      	; 0xd9b8 <malloc+0x44>
    d9b0:	90 93 ff 03 	sts	0x03FF, r25
    d9b4:	80 93 fe 03 	sts	0x03FE, r24
    d9b8:	fe 01       	movw	r30, r28
    d9ba:	34 c0       	rjmp	.+104    	; 0xda24 <malloc+0xb0>
    d9bc:	68 17       	cp	r22, r24
    d9be:	79 07       	cpc	r23, r25
    d9c0:	38 f4       	brcc	.+14     	; 0xd9d0 <malloc+0x5c>
    d9c2:	41 15       	cp	r20, r1
    d9c4:	51 05       	cpc	r21, r1
    d9c6:	19 f0       	breq	.+6      	; 0xd9ce <malloc+0x5a>
    d9c8:	84 17       	cp	r24, r20
    d9ca:	95 07       	cpc	r25, r21
    d9cc:	08 f4       	brcc	.+2      	; 0xd9d0 <malloc+0x5c>
    d9ce:	ac 01       	movw	r20, r24
    d9d0:	fe 01       	movw	r30, r28
    d9d2:	8a 81       	ldd	r24, Y+2	; 0x02
    d9d4:	9b 81       	ldd	r25, Y+3	; 0x03
    d9d6:	9c 01       	movw	r18, r24
    d9d8:	e9 01       	movw	r28, r18
    d9da:	20 97       	sbiw	r28, 0x00	; 0
    d9dc:	e9 f6       	brne	.-70     	; 0xd998 <malloc+0x24>
    d9de:	41 15       	cp	r20, r1
    d9e0:	51 05       	cpc	r21, r1
    d9e2:	a9 f1       	breq	.+106    	; 0xda4e <malloc+0xda>
    d9e4:	ca 01       	movw	r24, r20
    d9e6:	86 1b       	sub	r24, r22
    d9e8:	97 0b       	sbc	r25, r23
    d9ea:	04 97       	sbiw	r24, 0x04	; 4
    d9ec:	08 f4       	brcc	.+2      	; 0xd9f0 <malloc+0x7c>
    d9ee:	ba 01       	movw	r22, r20
    d9f0:	e0 e0       	ldi	r30, 0x00	; 0
    d9f2:	f0 e0       	ldi	r31, 0x00	; 0
    d9f4:	2a c0       	rjmp	.+84     	; 0xda4a <malloc+0xd6>
    d9f6:	8d 91       	ld	r24, X+
    d9f8:	9c 91       	ld	r25, X
    d9fa:	11 97       	sbiw	r26, 0x01	; 1
    d9fc:	84 17       	cp	r24, r20
    d9fe:	95 07       	cpc	r25, r21
    da00:	f9 f4       	brne	.+62     	; 0xda40 <malloc+0xcc>
    da02:	64 17       	cp	r22, r20
    da04:	75 07       	cpc	r23, r21
    da06:	81 f4       	brne	.+32     	; 0xda28 <malloc+0xb4>
    da08:	12 96       	adiw	r26, 0x02	; 2
    da0a:	8d 91       	ld	r24, X+
    da0c:	9c 91       	ld	r25, X
    da0e:	13 97       	sbiw	r26, 0x03	; 3
    da10:	30 97       	sbiw	r30, 0x00	; 0
    da12:	19 f0       	breq	.+6      	; 0xda1a <malloc+0xa6>
    da14:	93 83       	std	Z+3, r25	; 0x03
    da16:	82 83       	std	Z+2, r24	; 0x02
    da18:	04 c0       	rjmp	.+8      	; 0xda22 <malloc+0xae>
    da1a:	90 93 ff 03 	sts	0x03FF, r25
    da1e:	80 93 fe 03 	sts	0x03FE, r24
    da22:	fd 01       	movw	r30, r26
    da24:	32 96       	adiw	r30, 0x02	; 2
    da26:	4f c0       	rjmp	.+158    	; 0xdac6 <malloc+0x152>
    da28:	ca 01       	movw	r24, r20
    da2a:	86 1b       	sub	r24, r22
    da2c:	97 0b       	sbc	r25, r23
    da2e:	fd 01       	movw	r30, r26
    da30:	e8 0f       	add	r30, r24
    da32:	f9 1f       	adc	r31, r25
    da34:	61 93       	st	Z+, r22
    da36:	71 93       	st	Z+, r23
    da38:	02 97       	sbiw	r24, 0x02	; 2
    da3a:	8d 93       	st	X+, r24
    da3c:	9c 93       	st	X, r25
    da3e:	43 c0       	rjmp	.+134    	; 0xdac6 <malloc+0x152>
    da40:	fd 01       	movw	r30, r26
    da42:	82 81       	ldd	r24, Z+2	; 0x02
    da44:	93 81       	ldd	r25, Z+3	; 0x03
    da46:	9c 01       	movw	r18, r24
    da48:	d9 01       	movw	r26, r18
    da4a:	10 97       	sbiw	r26, 0x00	; 0
    da4c:	a1 f6       	brne	.-88     	; 0xd9f6 <malloc+0x82>
    da4e:	80 91 fc 03 	lds	r24, 0x03FC
    da52:	90 91 fd 03 	lds	r25, 0x03FD
    da56:	89 2b       	or	r24, r25
    da58:	41 f4       	brne	.+16     	; 0xda6a <malloc+0xf6>
    da5a:	80 91 bc 02 	lds	r24, 0x02BC
    da5e:	90 91 bd 02 	lds	r25, 0x02BD
    da62:	90 93 fd 03 	sts	0x03FD, r25
    da66:	80 93 fc 03 	sts	0x03FC, r24
    da6a:	40 91 be 02 	lds	r20, 0x02BE
    da6e:	50 91 bf 02 	lds	r21, 0x02BF
    da72:	41 15       	cp	r20, r1
    da74:	51 05       	cpc	r21, r1
    da76:	41 f4       	brne	.+16     	; 0xda88 <malloc+0x114>
    da78:	4d b7       	in	r20, 0x3d	; 61
    da7a:	5e b7       	in	r21, 0x3e	; 62
    da7c:	80 91 ba 02 	lds	r24, 0x02BA
    da80:	90 91 bb 02 	lds	r25, 0x02BB
    da84:	48 1b       	sub	r20, r24
    da86:	59 0b       	sbc	r21, r25
    da88:	20 91 fc 03 	lds	r18, 0x03FC
    da8c:	30 91 fd 03 	lds	r19, 0x03FD
    da90:	24 17       	cp	r18, r20
    da92:	35 07       	cpc	r19, r21
    da94:	b0 f4       	brcc	.+44     	; 0xdac2 <malloc+0x14e>
    da96:	ca 01       	movw	r24, r20
    da98:	82 1b       	sub	r24, r18
    da9a:	93 0b       	sbc	r25, r19
    da9c:	86 17       	cp	r24, r22
    da9e:	97 07       	cpc	r25, r23
    daa0:	80 f0       	brcs	.+32     	; 0xdac2 <malloc+0x14e>
    daa2:	ab 01       	movw	r20, r22
    daa4:	4e 5f       	subi	r20, 0xFE	; 254
    daa6:	5f 4f       	sbci	r21, 0xFF	; 255
    daa8:	84 17       	cp	r24, r20
    daaa:	95 07       	cpc	r25, r21
    daac:	50 f0       	brcs	.+20     	; 0xdac2 <malloc+0x14e>
    daae:	42 0f       	add	r20, r18
    dab0:	53 1f       	adc	r21, r19
    dab2:	50 93 fd 03 	sts	0x03FD, r21
    dab6:	40 93 fc 03 	sts	0x03FC, r20
    daba:	f9 01       	movw	r30, r18
    dabc:	61 93       	st	Z+, r22
    dabe:	71 93       	st	Z+, r23
    dac0:	02 c0       	rjmp	.+4      	; 0xdac6 <malloc+0x152>
    dac2:	e0 e0       	ldi	r30, 0x00	; 0
    dac4:	f0 e0       	ldi	r31, 0x00	; 0
    dac6:	cf 01       	movw	r24, r30
    dac8:	df 91       	pop	r29
    daca:	cf 91       	pop	r28
    dacc:	08 95       	ret

0000dace <free>:
    dace:	cf 93       	push	r28
    dad0:	df 93       	push	r29
    dad2:	00 97       	sbiw	r24, 0x00	; 0
    dad4:	09 f4       	brne	.+2      	; 0xdad8 <free+0xa>
    dad6:	50 c0       	rjmp	.+160    	; 0xdb78 <free+0xaa>
    dad8:	ec 01       	movw	r28, r24
    dada:	22 97       	sbiw	r28, 0x02	; 2
    dadc:	1b 82       	std	Y+3, r1	; 0x03
    dade:	1a 82       	std	Y+2, r1	; 0x02
    dae0:	a0 91 fe 03 	lds	r26, 0x03FE
    dae4:	b0 91 ff 03 	lds	r27, 0x03FF
    dae8:	10 97       	sbiw	r26, 0x00	; 0
    daea:	09 f1       	breq	.+66     	; 0xdb2e <free+0x60>
    daec:	40 e0       	ldi	r20, 0x00	; 0
    daee:	50 e0       	ldi	r21, 0x00	; 0
    daf0:	ac 17       	cp	r26, r28
    daf2:	bd 07       	cpc	r27, r29
    daf4:	08 f1       	brcs	.+66     	; 0xdb38 <free+0x6a>
    daf6:	bb 83       	std	Y+3, r27	; 0x03
    daf8:	aa 83       	std	Y+2, r26	; 0x02
    dafa:	fe 01       	movw	r30, r28
    dafc:	21 91       	ld	r18, Z+
    dafe:	31 91       	ld	r19, Z+
    db00:	e2 0f       	add	r30, r18
    db02:	f3 1f       	adc	r31, r19
    db04:	ae 17       	cp	r26, r30
    db06:	bf 07       	cpc	r27, r31
    db08:	79 f4       	brne	.+30     	; 0xdb28 <free+0x5a>
    db0a:	8d 91       	ld	r24, X+
    db0c:	9c 91       	ld	r25, X
    db0e:	11 97       	sbiw	r26, 0x01	; 1
    db10:	28 0f       	add	r18, r24
    db12:	39 1f       	adc	r19, r25
    db14:	2e 5f       	subi	r18, 0xFE	; 254
    db16:	3f 4f       	sbci	r19, 0xFF	; 255
    db18:	39 83       	std	Y+1, r19	; 0x01
    db1a:	28 83       	st	Y, r18
    db1c:	12 96       	adiw	r26, 0x02	; 2
    db1e:	8d 91       	ld	r24, X+
    db20:	9c 91       	ld	r25, X
    db22:	13 97       	sbiw	r26, 0x03	; 3
    db24:	9b 83       	std	Y+3, r25	; 0x03
    db26:	8a 83       	std	Y+2, r24	; 0x02
    db28:	41 15       	cp	r20, r1
    db2a:	51 05       	cpc	r21, r1
    db2c:	71 f4       	brne	.+28     	; 0xdb4a <free+0x7c>
    db2e:	d0 93 ff 03 	sts	0x03FF, r29
    db32:	c0 93 fe 03 	sts	0x03FE, r28
    db36:	20 c0       	rjmp	.+64     	; 0xdb78 <free+0xaa>
    db38:	12 96       	adiw	r26, 0x02	; 2
    db3a:	8d 91       	ld	r24, X+
    db3c:	9c 91       	ld	r25, X
    db3e:	13 97       	sbiw	r26, 0x03	; 3
    db40:	ad 01       	movw	r20, r26
    db42:	00 97       	sbiw	r24, 0x00	; 0
    db44:	11 f0       	breq	.+4      	; 0xdb4a <free+0x7c>
    db46:	dc 01       	movw	r26, r24
    db48:	d3 cf       	rjmp	.-90     	; 0xdaf0 <free+0x22>
    db4a:	fa 01       	movw	r30, r20
    db4c:	d3 83       	std	Z+3, r29	; 0x03
    db4e:	c2 83       	std	Z+2, r28	; 0x02
    db50:	21 91       	ld	r18, Z+
    db52:	31 91       	ld	r19, Z+
    db54:	e2 0f       	add	r30, r18
    db56:	f3 1f       	adc	r31, r19
    db58:	ce 17       	cp	r28, r30
    db5a:	df 07       	cpc	r29, r31
    db5c:	69 f4       	brne	.+26     	; 0xdb78 <free+0xaa>
    db5e:	88 81       	ld	r24, Y
    db60:	99 81       	ldd	r25, Y+1	; 0x01
    db62:	28 0f       	add	r18, r24
    db64:	39 1f       	adc	r19, r25
    db66:	2e 5f       	subi	r18, 0xFE	; 254
    db68:	3f 4f       	sbci	r19, 0xFF	; 255
    db6a:	fa 01       	movw	r30, r20
    db6c:	31 83       	std	Z+1, r19	; 0x01
    db6e:	20 83       	st	Z, r18
    db70:	8a 81       	ldd	r24, Y+2	; 0x02
    db72:	9b 81       	ldd	r25, Y+3	; 0x03
    db74:	93 83       	std	Z+3, r25	; 0x03
    db76:	82 83       	std	Z+2, r24	; 0x02
    db78:	df 91       	pop	r29
    db7a:	cf 91       	pop	r28
    db7c:	08 95       	ret

0000db7e <realloc>:
    db7e:	8f 92       	push	r8
    db80:	9f 92       	push	r9
    db82:	af 92       	push	r10
    db84:	bf 92       	push	r11
    db86:	cf 92       	push	r12
    db88:	df 92       	push	r13
    db8a:	ef 92       	push	r14
    db8c:	ff 92       	push	r15
    db8e:	0f 93       	push	r16
    db90:	1f 93       	push	r17
    db92:	cf 93       	push	r28
    db94:	df 93       	push	r29
    db96:	8c 01       	movw	r16, r24
    db98:	00 97       	sbiw	r24, 0x00	; 0
    db9a:	29 f4       	brne	.+10     	; 0xdba6 <realloc+0x28>
    db9c:	cb 01       	movw	r24, r22
    db9e:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    dba2:	8c 01       	movw	r16, r24
    dba4:	ba c0       	rjmp	.+372    	; 0xdd1a <realloc+0x19c>
    dba6:	9e ef       	ldi	r25, 0xFE	; 254
    dba8:	e9 2e       	mov	r14, r25
    dbaa:	9f ef       	ldi	r25, 0xFF	; 255
    dbac:	f9 2e       	mov	r15, r25
    dbae:	e0 0e       	add	r14, r16
    dbb0:	f1 1e       	adc	r15, r17
    dbb2:	58 01       	movw	r10, r16
    dbb4:	a6 0e       	add	r10, r22
    dbb6:	b7 1e       	adc	r11, r23
    dbb8:	ae 14       	cp	r10, r14
    dbba:	bf 04       	cpc	r11, r15
    dbbc:	08 f4       	brcc	.+2      	; 0xdbc0 <realloc+0x42>
    dbbe:	ab c0       	rjmp	.+342    	; 0xdd16 <realloc+0x198>
    dbc0:	8e ef       	ldi	r24, 0xFE	; 254
    dbc2:	88 2e       	mov	r8, r24
    dbc4:	8f ef       	ldi	r24, 0xFF	; 255
    dbc6:	98 2e       	mov	r9, r24
    dbc8:	8a 0c       	add	r8, r10
    dbca:	9b 1c       	adc	r9, r11
    dbcc:	e7 01       	movw	r28, r14
    dbce:	48 81       	ld	r20, Y
    dbd0:	59 81       	ldd	r21, Y+1	; 0x01
    dbd2:	46 17       	cp	r20, r22
    dbd4:	57 07       	cpc	r21, r23
    dbd6:	b8 f0       	brcs	.+46     	; 0xdc06 <realloc+0x88>
    dbd8:	45 30       	cpi	r20, 0x05	; 5
    dbda:	51 05       	cpc	r21, r1
    dbdc:	08 f4       	brcc	.+2      	; 0xdbe0 <realloc+0x62>
    dbde:	9d c0       	rjmp	.+314    	; 0xdd1a <realloc+0x19c>
    dbe0:	ca 01       	movw	r24, r20
    dbe2:	04 97       	sbiw	r24, 0x04	; 4
    dbe4:	86 17       	cp	r24, r22
    dbe6:	97 07       	cpc	r25, r23
    dbe8:	08 f4       	brcc	.+2      	; 0xdbec <realloc+0x6e>
    dbea:	97 c0       	rjmp	.+302    	; 0xdd1a <realloc+0x19c>
    dbec:	42 50       	subi	r20, 0x02	; 2
    dbee:	50 40       	sbci	r21, 0x00	; 0
    dbf0:	46 1b       	sub	r20, r22
    dbf2:	57 0b       	sbc	r21, r23
    dbf4:	f4 01       	movw	r30, r8
    dbf6:	51 83       	std	Z+1, r21	; 0x01
    dbf8:	40 83       	st	Z, r20
    dbfa:	79 83       	std	Y+1, r23	; 0x01
    dbfc:	68 83       	st	Y, r22
    dbfe:	c5 01       	movw	r24, r10
    dc00:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
    dc04:	8a c0       	rjmp	.+276    	; 0xdd1a <realloc+0x19c>
    dc06:	6b 01       	movw	r12, r22
    dc08:	c4 1a       	sub	r12, r20
    dc0a:	d5 0a       	sbc	r13, r21
    dc0c:	e0 91 fe 03 	lds	r30, 0x03FE
    dc10:	f0 91 ff 03 	lds	r31, 0x03FF
    dc14:	a0 e0       	ldi	r26, 0x00	; 0
    dc16:	b0 e0       	ldi	r27, 0x00	; 0
    dc18:	c0 e0       	ldi	r28, 0x00	; 0
    dc1a:	d0 e0       	ldi	r29, 0x00	; 0
    dc1c:	42 c0       	rjmp	.+132    	; 0xdca2 <realloc+0x124>
    dc1e:	e8 15       	cp	r30, r8
    dc20:	f9 05       	cpc	r31, r9
    dc22:	a1 f5       	brne	.+104    	; 0xdc8c <realloc+0x10e>
    dc24:	20 81       	ld	r18, Z
    dc26:	31 81       	ldd	r19, Z+1	; 0x01
    dc28:	2c 15       	cp	r18, r12
    dc2a:	3d 05       	cpc	r19, r13
    dc2c:	78 f1       	brcs	.+94     	; 0xdc8c <realloc+0x10e>
    dc2e:	c9 01       	movw	r24, r18
    dc30:	02 96       	adiw	r24, 0x02	; 2
    dc32:	8c 15       	cp	r24, r12
    dc34:	9d 05       	cpc	r25, r13
    dc36:	a8 f0       	brcs	.+42     	; 0xdc62 <realloc+0xe4>
    dc38:	4e 5f       	subi	r20, 0xFE	; 254
    dc3a:	5f 4f       	sbci	r21, 0xFF	; 255
    dc3c:	42 0f       	add	r20, r18
    dc3e:	53 1f       	adc	r21, r19
    dc40:	e7 01       	movw	r28, r14
    dc42:	59 83       	std	Y+1, r21	; 0x01
    dc44:	48 83       	st	Y, r20
    dc46:	22 81       	ldd	r18, Z+2	; 0x02
    dc48:	33 81       	ldd	r19, Z+3	; 0x03
    dc4a:	10 97       	sbiw	r26, 0x00	; 0
    dc4c:	29 f0       	breq	.+10     	; 0xdc58 <realloc+0xda>
    dc4e:	13 96       	adiw	r26, 0x03	; 3
    dc50:	3c 93       	st	X, r19
    dc52:	2e 93       	st	-X, r18
    dc54:	12 97       	sbiw	r26, 0x02	; 2
    dc56:	61 c0       	rjmp	.+194    	; 0xdd1a <realloc+0x19c>
    dc58:	30 93 ff 03 	sts	0x03FF, r19
    dc5c:	20 93 fe 03 	sts	0x03FE, r18
    dc60:	5c c0       	rjmp	.+184    	; 0xdd1a <realloc+0x19c>
    dc62:	22 50       	subi	r18, 0x02	; 2
    dc64:	30 40       	sbci	r19, 0x00	; 0
    dc66:	2c 19       	sub	r18, r12
    dc68:	3d 09       	sbc	r19, r13
    dc6a:	31 83       	std	Z+1, r19	; 0x01
    dc6c:	20 83       	st	Z, r18
    dc6e:	10 97       	sbiw	r26, 0x00	; 0
    dc70:	29 f0       	breq	.+10     	; 0xdc7c <realloc+0xfe>
    dc72:	13 96       	adiw	r26, 0x03	; 3
    dc74:	fc 93       	st	X, r31
    dc76:	ee 93       	st	-X, r30
    dc78:	12 97       	sbiw	r26, 0x02	; 2
    dc7a:	04 c0       	rjmp	.+8      	; 0xdc84 <realloc+0x106>
    dc7c:	f0 93 ff 03 	sts	0x03FF, r31
    dc80:	e0 93 fe 03 	sts	0x03FE, r30
    dc84:	f7 01       	movw	r30, r14
    dc86:	71 83       	std	Z+1, r23	; 0x01
    dc88:	60 83       	st	Z, r22
    dc8a:	47 c0       	rjmp	.+142    	; 0xdd1a <realloc+0x19c>
    dc8c:	80 81       	ld	r24, Z
    dc8e:	91 81       	ldd	r25, Z+1	; 0x01
    dc90:	c8 17       	cp	r28, r24
    dc92:	d9 07       	cpc	r29, r25
    dc94:	08 f4       	brcc	.+2      	; 0xdc98 <realloc+0x11a>
    dc96:	ec 01       	movw	r28, r24
    dc98:	df 01       	movw	r26, r30
    dc9a:	82 81       	ldd	r24, Z+2	; 0x02
    dc9c:	93 81       	ldd	r25, Z+3	; 0x03
    dc9e:	9c 01       	movw	r18, r24
    dca0:	f9 01       	movw	r30, r18
    dca2:	30 97       	sbiw	r30, 0x00	; 0
    dca4:	09 f0       	breq	.+2      	; 0xdca8 <realloc+0x12a>
    dca6:	bb cf       	rjmp	.-138    	; 0xdc1e <realloc+0xa0>
    dca8:	40 0f       	add	r20, r16
    dcaa:	51 1f       	adc	r21, r17
    dcac:	80 91 fc 03 	lds	r24, 0x03FC
    dcb0:	90 91 fd 03 	lds	r25, 0x03FD
    dcb4:	84 17       	cp	r24, r20
    dcb6:	95 07       	cpc	r25, r21
    dcb8:	e9 f4       	brne	.+58     	; 0xdcf4 <realloc+0x176>
    dcba:	c6 17       	cp	r28, r22
    dcbc:	d7 07       	cpc	r29, r23
    dcbe:	d0 f4       	brcc	.+52     	; 0xdcf4 <realloc+0x176>
    dcc0:	20 91 be 02 	lds	r18, 0x02BE
    dcc4:	30 91 bf 02 	lds	r19, 0x02BF
    dcc8:	21 15       	cp	r18, r1
    dcca:	31 05       	cpc	r19, r1
    dccc:	41 f4       	brne	.+16     	; 0xdcde <realloc+0x160>
    dcce:	2d b7       	in	r18, 0x3d	; 61
    dcd0:	3e b7       	in	r19, 0x3e	; 62
    dcd2:	80 91 ba 02 	lds	r24, 0x02BA
    dcd6:	90 91 bb 02 	lds	r25, 0x02BB
    dcda:	28 1b       	sub	r18, r24
    dcdc:	39 0b       	sbc	r19, r25
    dcde:	a2 16       	cp	r10, r18
    dce0:	b3 06       	cpc	r11, r19
    dce2:	c8 f4       	brcc	.+50     	; 0xdd16 <realloc+0x198>
    dce4:	b0 92 fd 03 	sts	0x03FD, r11
    dce8:	a0 92 fc 03 	sts	0x03FC, r10
    dcec:	e7 01       	movw	r28, r14
    dcee:	79 83       	std	Y+1, r23	; 0x01
    dcf0:	68 83       	st	Y, r22
    dcf2:	13 c0       	rjmp	.+38     	; 0xdd1a <realloc+0x19c>
    dcf4:	cb 01       	movw	r24, r22
    dcf6:	0e 94 ba 6c 	call	0xd974	; 0xd974 <malloc>
    dcfa:	ec 01       	movw	r28, r24
    dcfc:	00 97       	sbiw	r24, 0x00	; 0
    dcfe:	59 f0       	breq	.+22     	; 0xdd16 <realloc+0x198>
    dd00:	f7 01       	movw	r30, r14
    dd02:	40 81       	ld	r20, Z
    dd04:	51 81       	ldd	r21, Z+1	; 0x01
    dd06:	b8 01       	movw	r22, r16
    dd08:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <memcpy>
    dd0c:	c8 01       	movw	r24, r16
    dd0e:	0e 94 67 6d 	call	0xdace	; 0xdace <free>
    dd12:	8e 01       	movw	r16, r28
    dd14:	02 c0       	rjmp	.+4      	; 0xdd1a <realloc+0x19c>
    dd16:	00 e0       	ldi	r16, 0x00	; 0
    dd18:	10 e0       	ldi	r17, 0x00	; 0
    dd1a:	c8 01       	movw	r24, r16
    dd1c:	df 91       	pop	r29
    dd1e:	cf 91       	pop	r28
    dd20:	1f 91       	pop	r17
    dd22:	0f 91       	pop	r16
    dd24:	ff 90       	pop	r15
    dd26:	ef 90       	pop	r14
    dd28:	df 90       	pop	r13
    dd2a:	cf 90       	pop	r12
    dd2c:	bf 90       	pop	r11
    dd2e:	af 90       	pop	r10
    dd30:	9f 90       	pop	r9
    dd32:	8f 90       	pop	r8
    dd34:	08 95       	ret

0000dd36 <abort>:
    dd36:	81 e0       	ldi	r24, 0x01	; 1
    dd38:	90 e0       	ldi	r25, 0x00	; 0
    dd3a:	f8 94       	cli
    dd3c:	0c 94 f5 72 	jmp	0xe5ea	; 0xe5ea <_exit>

0000dd40 <exit>:
    dd40:	f8 94       	cli
    dd42:	0c 94 f5 72 	jmp	0xe5ea	; 0xe5ea <_exit>

0000dd46 <memcpy>:
    dd46:	fb 01       	movw	r30, r22
    dd48:	dc 01       	movw	r26, r24
    dd4a:	02 c0       	rjmp	.+4      	; 0xdd50 <memcpy+0xa>
    dd4c:	01 90       	ld	r0, Z+
    dd4e:	0d 92       	st	X+, r0
    dd50:	41 50       	subi	r20, 0x01	; 1
    dd52:	50 40       	sbci	r21, 0x00	; 0
    dd54:	d8 f7       	brcc	.-10     	; 0xdd4c <memcpy+0x6>
    dd56:	08 95       	ret

0000dd58 <memset>:
    dd58:	dc 01       	movw	r26, r24
    dd5a:	01 c0       	rjmp	.+2      	; 0xdd5e <memset+0x6>
    dd5c:	6d 93       	st	X+, r22
    dd5e:	41 50       	subi	r20, 0x01	; 1
    dd60:	50 40       	sbci	r21, 0x00	; 0
    dd62:	e0 f7       	brcc	.-8      	; 0xdd5c <memset+0x4>
    dd64:	08 95       	ret

0000dd66 <strcmp>:
    dd66:	fb 01       	movw	r30, r22
    dd68:	dc 01       	movw	r26, r24
    dd6a:	8d 91       	ld	r24, X+
    dd6c:	01 90       	ld	r0, Z+
    dd6e:	80 19       	sub	r24, r0
    dd70:	01 10       	cpse	r0, r1
    dd72:	d9 f3       	breq	.-10     	; 0xdd6a <strcmp+0x4>
    dd74:	99 0b       	sbc	r25, r25
    dd76:	08 95       	ret

0000dd78 <strcpy>:
    dd78:	fb 01       	movw	r30, r22
    dd7a:	dc 01       	movw	r26, r24
    dd7c:	01 90       	ld	r0, Z+
    dd7e:	0d 92       	st	X+, r0
    dd80:	00 20       	and	r0, r0
    dd82:	e1 f7       	brne	.-8      	; 0xdd7c <strcpy+0x4>
    dd84:	08 95       	ret

0000dd86 <strlen>:
    dd86:	fc 01       	movw	r30, r24
    dd88:	01 90       	ld	r0, Z+
    dd8a:	00 20       	and	r0, r0
    dd8c:	e9 f7       	brne	.-6      	; 0xdd88 <strlen+0x2>
    dd8e:	80 95       	com	r24
    dd90:	90 95       	com	r25
    dd92:	8e 0f       	add	r24, r30
    dd94:	9f 1f       	adc	r25, r31
    dd96:	08 95       	ret

0000dd98 <itoa>:
    dd98:	fb 01       	movw	r30, r22
    dd9a:	9f 01       	movw	r18, r30
    dd9c:	e8 94       	clt
    dd9e:	42 30       	cpi	r20, 0x02	; 2
    dda0:	c4 f0       	brlt	.+48     	; 0xddd2 <itoa+0x3a>
    dda2:	45 32       	cpi	r20, 0x25	; 37
    dda4:	b4 f4       	brge	.+44     	; 0xddd2 <itoa+0x3a>
    dda6:	4a 30       	cpi	r20, 0x0A	; 10
    dda8:	29 f4       	brne	.+10     	; 0xddb4 <itoa+0x1c>
    ddaa:	97 fb       	bst	r25, 7
    ddac:	1e f4       	brtc	.+6      	; 0xddb4 <itoa+0x1c>
    ddae:	90 95       	com	r25
    ddb0:	81 95       	neg	r24
    ddb2:	9f 4f       	sbci	r25, 0xFF	; 255
    ddb4:	64 2f       	mov	r22, r20
    ddb6:	77 27       	eor	r23, r23
    ddb8:	0e 94 e1 72 	call	0xe5c2	; 0xe5c2 <__udivmodhi4>
    ddbc:	80 5d       	subi	r24, 0xD0	; 208
    ddbe:	8a 33       	cpi	r24, 0x3A	; 58
    ddc0:	0c f0       	brlt	.+2      	; 0xddc4 <itoa+0x2c>
    ddc2:	89 5d       	subi	r24, 0xD9	; 217
    ddc4:	81 93       	st	Z+, r24
    ddc6:	cb 01       	movw	r24, r22
    ddc8:	00 97       	sbiw	r24, 0x00	; 0
    ddca:	a1 f7       	brne	.-24     	; 0xddb4 <itoa+0x1c>
    ddcc:	16 f4       	brtc	.+4      	; 0xddd2 <itoa+0x3a>
    ddce:	5d e2       	ldi	r21, 0x2D	; 45
    ddd0:	51 93       	st	Z+, r21
    ddd2:	10 82       	st	Z, r1
    ddd4:	c9 01       	movw	r24, r18
    ddd6:	0c 94 a7 71 	jmp	0xe34e	; 0xe34e <strrev>

0000ddda <__subsf3>:
    ddda:	50 58       	subi	r21, 0x80	; 128

0000dddc <__addsf3>:
    dddc:	bb 27       	eor	r27, r27
    ddde:	aa 27       	eor	r26, r26
    dde0:	0e d0       	rcall	.+28     	; 0xddfe <__addsf3x>
    dde2:	b1 c1       	rjmp	.+866    	; 0xe146 <__fp_round>
    dde4:	a2 d1       	rcall	.+836    	; 0xe12a <__fp_pscA>
    dde6:	30 f0       	brcs	.+12     	; 0xddf4 <__addsf3+0x18>
    dde8:	a7 d1       	rcall	.+846    	; 0xe138 <__fp_pscB>
    ddea:	20 f0       	brcs	.+8      	; 0xddf4 <__addsf3+0x18>
    ddec:	31 f4       	brne	.+12     	; 0xddfa <__addsf3+0x1e>
    ddee:	9f 3f       	cpi	r25, 0xFF	; 255
    ddf0:	11 f4       	brne	.+4      	; 0xddf6 <__addsf3+0x1a>
    ddf2:	1e f4       	brtc	.+6      	; 0xddfa <__addsf3+0x1e>
    ddf4:	97 c1       	rjmp	.+814    	; 0xe124 <__fp_nan>
    ddf6:	0e f4       	brtc	.+2      	; 0xddfa <__addsf3+0x1e>
    ddf8:	e0 95       	com	r30
    ddfa:	e7 fb       	bst	r30, 7
    ddfc:	64 c1       	rjmp	.+712    	; 0xe0c6 <__fp_inf>

0000ddfe <__addsf3x>:
    ddfe:	e9 2f       	mov	r30, r25
    de00:	b3 d1       	rcall	.+870    	; 0xe168 <__fp_split3>
    de02:	80 f3       	brcs	.-32     	; 0xdde4 <__addsf3+0x8>
    de04:	ba 17       	cp	r27, r26
    de06:	62 07       	cpc	r22, r18
    de08:	73 07       	cpc	r23, r19
    de0a:	84 07       	cpc	r24, r20
    de0c:	95 07       	cpc	r25, r21
    de0e:	18 f0       	brcs	.+6      	; 0xde16 <__addsf3x+0x18>
    de10:	71 f4       	brne	.+28     	; 0xde2e <__addsf3x+0x30>
    de12:	9e f5       	brtc	.+102    	; 0xde7a <__addsf3x+0x7c>
    de14:	e2 c1       	rjmp	.+964    	; 0xe1da <__fp_zero>
    de16:	0e f4       	brtc	.+2      	; 0xde1a <__addsf3x+0x1c>
    de18:	e0 95       	com	r30
    de1a:	0b 2e       	mov	r0, r27
    de1c:	ba 2f       	mov	r27, r26
    de1e:	a0 2d       	mov	r26, r0
    de20:	0b 01       	movw	r0, r22
    de22:	b9 01       	movw	r22, r18
    de24:	90 01       	movw	r18, r0
    de26:	0c 01       	movw	r0, r24
    de28:	ca 01       	movw	r24, r20
    de2a:	a0 01       	movw	r20, r0
    de2c:	11 24       	eor	r1, r1
    de2e:	ff 27       	eor	r31, r31
    de30:	59 1b       	sub	r21, r25
    de32:	99 f0       	breq	.+38     	; 0xde5a <__addsf3x+0x5c>
    de34:	59 3f       	cpi	r21, 0xF9	; 249
    de36:	50 f4       	brcc	.+20     	; 0xde4c <__addsf3x+0x4e>
    de38:	50 3e       	cpi	r21, 0xE0	; 224
    de3a:	68 f1       	brcs	.+90     	; 0xde96 <__addsf3x+0x98>
    de3c:	1a 16       	cp	r1, r26
    de3e:	f0 40       	sbci	r31, 0x00	; 0
    de40:	a2 2f       	mov	r26, r18
    de42:	23 2f       	mov	r18, r19
    de44:	34 2f       	mov	r19, r20
    de46:	44 27       	eor	r20, r20
    de48:	58 5f       	subi	r21, 0xF8	; 248
    de4a:	f3 cf       	rjmp	.-26     	; 0xde32 <__addsf3x+0x34>
    de4c:	46 95       	lsr	r20
    de4e:	37 95       	ror	r19
    de50:	27 95       	ror	r18
    de52:	a7 95       	ror	r26
    de54:	f0 40       	sbci	r31, 0x00	; 0
    de56:	53 95       	inc	r21
    de58:	c9 f7       	brne	.-14     	; 0xde4c <__addsf3x+0x4e>
    de5a:	7e f4       	brtc	.+30     	; 0xde7a <__addsf3x+0x7c>
    de5c:	1f 16       	cp	r1, r31
    de5e:	ba 0b       	sbc	r27, r26
    de60:	62 0b       	sbc	r22, r18
    de62:	73 0b       	sbc	r23, r19
    de64:	84 0b       	sbc	r24, r20
    de66:	ba f0       	brmi	.+46     	; 0xde96 <__addsf3x+0x98>
    de68:	91 50       	subi	r25, 0x01	; 1
    de6a:	a1 f0       	breq	.+40     	; 0xde94 <__addsf3x+0x96>
    de6c:	ff 0f       	add	r31, r31
    de6e:	bb 1f       	adc	r27, r27
    de70:	66 1f       	adc	r22, r22
    de72:	77 1f       	adc	r23, r23
    de74:	88 1f       	adc	r24, r24
    de76:	c2 f7       	brpl	.-16     	; 0xde68 <__addsf3x+0x6a>
    de78:	0e c0       	rjmp	.+28     	; 0xde96 <__addsf3x+0x98>
    de7a:	ba 0f       	add	r27, r26
    de7c:	62 1f       	adc	r22, r18
    de7e:	73 1f       	adc	r23, r19
    de80:	84 1f       	adc	r24, r20
    de82:	48 f4       	brcc	.+18     	; 0xde96 <__addsf3x+0x98>
    de84:	87 95       	ror	r24
    de86:	77 95       	ror	r23
    de88:	67 95       	ror	r22
    de8a:	b7 95       	ror	r27
    de8c:	f7 95       	ror	r31
    de8e:	9e 3f       	cpi	r25, 0xFE	; 254
    de90:	08 f0       	brcs	.+2      	; 0xde94 <__addsf3x+0x96>
    de92:	b3 cf       	rjmp	.-154    	; 0xddfa <__addsf3+0x1e>
    de94:	93 95       	inc	r25
    de96:	88 0f       	add	r24, r24
    de98:	08 f0       	brcs	.+2      	; 0xde9c <__addsf3x+0x9e>
    de9a:	99 27       	eor	r25, r25
    de9c:	ee 0f       	add	r30, r30
    de9e:	97 95       	ror	r25
    dea0:	87 95       	ror	r24
    dea2:	08 95       	ret

0000dea4 <__cmpsf2>:
    dea4:	ec d0       	rcall	.+472    	; 0xe07e <__fp_cmp>
    dea6:	08 f4       	brcc	.+2      	; 0xdeaa <__cmpsf2+0x6>
    dea8:	81 e0       	ldi	r24, 0x01	; 1
    deaa:	08 95       	ret

0000deac <__divsf3>:
    deac:	0c d0       	rcall	.+24     	; 0xdec6 <__divsf3x>
    deae:	4b c1       	rjmp	.+662    	; 0xe146 <__fp_round>
    deb0:	43 d1       	rcall	.+646    	; 0xe138 <__fp_pscB>
    deb2:	40 f0       	brcs	.+16     	; 0xdec4 <__divsf3+0x18>
    deb4:	3a d1       	rcall	.+628    	; 0xe12a <__fp_pscA>
    deb6:	30 f0       	brcs	.+12     	; 0xdec4 <__divsf3+0x18>
    deb8:	21 f4       	brne	.+8      	; 0xdec2 <__divsf3+0x16>
    deba:	5f 3f       	cpi	r21, 0xFF	; 255
    debc:	19 f0       	breq	.+6      	; 0xdec4 <__divsf3+0x18>
    debe:	03 c1       	rjmp	.+518    	; 0xe0c6 <__fp_inf>
    dec0:	51 11       	cpse	r21, r1
    dec2:	8c c1       	rjmp	.+792    	; 0xe1dc <__fp_szero>
    dec4:	2f c1       	rjmp	.+606    	; 0xe124 <__fp_nan>

0000dec6 <__divsf3x>:
    dec6:	50 d1       	rcall	.+672    	; 0xe168 <__fp_split3>
    dec8:	98 f3       	brcs	.-26     	; 0xdeb0 <__divsf3+0x4>

0000deca <__divsf3_pse>:
    deca:	99 23       	and	r25, r25
    decc:	c9 f3       	breq	.-14     	; 0xdec0 <__divsf3+0x14>
    dece:	55 23       	and	r21, r21
    ded0:	b1 f3       	breq	.-20     	; 0xdebe <__divsf3+0x12>
    ded2:	95 1b       	sub	r25, r21
    ded4:	55 0b       	sbc	r21, r21
    ded6:	bb 27       	eor	r27, r27
    ded8:	aa 27       	eor	r26, r26
    deda:	62 17       	cp	r22, r18
    dedc:	73 07       	cpc	r23, r19
    dede:	84 07       	cpc	r24, r20
    dee0:	38 f0       	brcs	.+14     	; 0xdef0 <__divsf3_pse+0x26>
    dee2:	9f 5f       	subi	r25, 0xFF	; 255
    dee4:	5f 4f       	sbci	r21, 0xFF	; 255
    dee6:	22 0f       	add	r18, r18
    dee8:	33 1f       	adc	r19, r19
    deea:	44 1f       	adc	r20, r20
    deec:	aa 1f       	adc	r26, r26
    deee:	a9 f3       	breq	.-22     	; 0xdeda <__divsf3_pse+0x10>
    def0:	33 d0       	rcall	.+102    	; 0xdf58 <__divsf3_pse+0x8e>
    def2:	0e 2e       	mov	r0, r30
    def4:	3a f0       	brmi	.+14     	; 0xdf04 <__divsf3_pse+0x3a>
    def6:	e0 e8       	ldi	r30, 0x80	; 128
    def8:	30 d0       	rcall	.+96     	; 0xdf5a <__divsf3_pse+0x90>
    defa:	91 50       	subi	r25, 0x01	; 1
    defc:	50 40       	sbci	r21, 0x00	; 0
    defe:	e6 95       	lsr	r30
    df00:	00 1c       	adc	r0, r0
    df02:	ca f7       	brpl	.-14     	; 0xdef6 <__divsf3_pse+0x2c>
    df04:	29 d0       	rcall	.+82     	; 0xdf58 <__divsf3_pse+0x8e>
    df06:	fe 2f       	mov	r31, r30
    df08:	27 d0       	rcall	.+78     	; 0xdf58 <__divsf3_pse+0x8e>
    df0a:	66 0f       	add	r22, r22
    df0c:	77 1f       	adc	r23, r23
    df0e:	88 1f       	adc	r24, r24
    df10:	bb 1f       	adc	r27, r27
    df12:	26 17       	cp	r18, r22
    df14:	37 07       	cpc	r19, r23
    df16:	48 07       	cpc	r20, r24
    df18:	ab 07       	cpc	r26, r27
    df1a:	b0 e8       	ldi	r27, 0x80	; 128
    df1c:	09 f0       	breq	.+2      	; 0xdf20 <__divsf3_pse+0x56>
    df1e:	bb 0b       	sbc	r27, r27
    df20:	80 2d       	mov	r24, r0
    df22:	bf 01       	movw	r22, r30
    df24:	ff 27       	eor	r31, r31
    df26:	93 58       	subi	r25, 0x83	; 131
    df28:	5f 4f       	sbci	r21, 0xFF	; 255
    df2a:	2a f0       	brmi	.+10     	; 0xdf36 <__divsf3_pse+0x6c>
    df2c:	9e 3f       	cpi	r25, 0xFE	; 254
    df2e:	51 05       	cpc	r21, r1
    df30:	68 f0       	brcs	.+26     	; 0xdf4c <__divsf3_pse+0x82>
    df32:	c9 c0       	rjmp	.+402    	; 0xe0c6 <__fp_inf>
    df34:	53 c1       	rjmp	.+678    	; 0xe1dc <__fp_szero>
    df36:	5f 3f       	cpi	r21, 0xFF	; 255
    df38:	ec f3       	brlt	.-6      	; 0xdf34 <__divsf3_pse+0x6a>
    df3a:	98 3e       	cpi	r25, 0xE8	; 232
    df3c:	dc f3       	brlt	.-10     	; 0xdf34 <__divsf3_pse+0x6a>
    df3e:	86 95       	lsr	r24
    df40:	77 95       	ror	r23
    df42:	67 95       	ror	r22
    df44:	b7 95       	ror	r27
    df46:	f7 95       	ror	r31
    df48:	9f 5f       	subi	r25, 0xFF	; 255
    df4a:	c9 f7       	brne	.-14     	; 0xdf3e <__divsf3_pse+0x74>
    df4c:	88 0f       	add	r24, r24
    df4e:	91 1d       	adc	r25, r1
    df50:	96 95       	lsr	r25
    df52:	87 95       	ror	r24
    df54:	97 f9       	bld	r25, 7
    df56:	08 95       	ret
    df58:	e1 e0       	ldi	r30, 0x01	; 1
    df5a:	66 0f       	add	r22, r22
    df5c:	77 1f       	adc	r23, r23
    df5e:	88 1f       	adc	r24, r24
    df60:	bb 1f       	adc	r27, r27
    df62:	62 17       	cp	r22, r18
    df64:	73 07       	cpc	r23, r19
    df66:	84 07       	cpc	r24, r20
    df68:	ba 07       	cpc	r27, r26
    df6a:	20 f0       	brcs	.+8      	; 0xdf74 <__divsf3_pse+0xaa>
    df6c:	62 1b       	sub	r22, r18
    df6e:	73 0b       	sbc	r23, r19
    df70:	84 0b       	sbc	r24, r20
    df72:	ba 0b       	sbc	r27, r26
    df74:	ee 1f       	adc	r30, r30
    df76:	88 f7       	brcc	.-30     	; 0xdf5a <__divsf3_pse+0x90>
    df78:	e0 95       	com	r30
    df7a:	08 95       	ret

0000df7c <__fixsfsi>:
    df7c:	04 d0       	rcall	.+8      	; 0xdf86 <__fixunssfsi>
    df7e:	68 94       	set
    df80:	b1 11       	cpse	r27, r1
    df82:	2c c1       	rjmp	.+600    	; 0xe1dc <__fp_szero>
    df84:	08 95       	ret

0000df86 <__fixunssfsi>:
    df86:	f8 d0       	rcall	.+496    	; 0xe178 <__fp_splitA>
    df88:	88 f0       	brcs	.+34     	; 0xdfac <__fixunssfsi+0x26>
    df8a:	9f 57       	subi	r25, 0x7F	; 127
    df8c:	90 f0       	brcs	.+36     	; 0xdfb2 <__fixunssfsi+0x2c>
    df8e:	b9 2f       	mov	r27, r25
    df90:	99 27       	eor	r25, r25
    df92:	b7 51       	subi	r27, 0x17	; 23
    df94:	a0 f0       	brcs	.+40     	; 0xdfbe <__fixunssfsi+0x38>
    df96:	d1 f0       	breq	.+52     	; 0xdfcc <__fixunssfsi+0x46>
    df98:	66 0f       	add	r22, r22
    df9a:	77 1f       	adc	r23, r23
    df9c:	88 1f       	adc	r24, r24
    df9e:	99 1f       	adc	r25, r25
    dfa0:	1a f0       	brmi	.+6      	; 0xdfa8 <__fixunssfsi+0x22>
    dfa2:	ba 95       	dec	r27
    dfa4:	c9 f7       	brne	.-14     	; 0xdf98 <__fixunssfsi+0x12>
    dfa6:	12 c0       	rjmp	.+36     	; 0xdfcc <__fixunssfsi+0x46>
    dfa8:	b1 30       	cpi	r27, 0x01	; 1
    dfaa:	81 f0       	breq	.+32     	; 0xdfcc <__fixunssfsi+0x46>
    dfac:	16 d1       	rcall	.+556    	; 0xe1da <__fp_zero>
    dfae:	b1 e0       	ldi	r27, 0x01	; 1
    dfb0:	08 95       	ret
    dfb2:	13 c1       	rjmp	.+550    	; 0xe1da <__fp_zero>
    dfb4:	67 2f       	mov	r22, r23
    dfb6:	78 2f       	mov	r23, r24
    dfb8:	88 27       	eor	r24, r24
    dfba:	b8 5f       	subi	r27, 0xF8	; 248
    dfbc:	39 f0       	breq	.+14     	; 0xdfcc <__fixunssfsi+0x46>
    dfbe:	b9 3f       	cpi	r27, 0xF9	; 249
    dfc0:	cc f3       	brlt	.-14     	; 0xdfb4 <__fixunssfsi+0x2e>
    dfc2:	86 95       	lsr	r24
    dfc4:	77 95       	ror	r23
    dfc6:	67 95       	ror	r22
    dfc8:	b3 95       	inc	r27
    dfca:	d9 f7       	brne	.-10     	; 0xdfc2 <__fixunssfsi+0x3c>
    dfcc:	3e f4       	brtc	.+14     	; 0xdfdc <__fixunssfsi+0x56>
    dfce:	90 95       	com	r25
    dfd0:	80 95       	com	r24
    dfd2:	70 95       	com	r23
    dfd4:	61 95       	neg	r22
    dfd6:	7f 4f       	sbci	r23, 0xFF	; 255
    dfd8:	8f 4f       	sbci	r24, 0xFF	; 255
    dfda:	9f 4f       	sbci	r25, 0xFF	; 255
    dfdc:	08 95       	ret

0000dfde <__floatunsisf>:
    dfde:	e8 94       	clt
    dfe0:	09 c0       	rjmp	.+18     	; 0xdff4 <__floatsisf+0x12>

0000dfe2 <__floatsisf>:
    dfe2:	97 fb       	bst	r25, 7
    dfe4:	3e f4       	brtc	.+14     	; 0xdff4 <__floatsisf+0x12>
    dfe6:	90 95       	com	r25
    dfe8:	80 95       	com	r24
    dfea:	70 95       	com	r23
    dfec:	61 95       	neg	r22
    dfee:	7f 4f       	sbci	r23, 0xFF	; 255
    dff0:	8f 4f       	sbci	r24, 0xFF	; 255
    dff2:	9f 4f       	sbci	r25, 0xFF	; 255
    dff4:	99 23       	and	r25, r25
    dff6:	a9 f0       	breq	.+42     	; 0xe022 <__floatsisf+0x40>
    dff8:	f9 2f       	mov	r31, r25
    dffa:	96 e9       	ldi	r25, 0x96	; 150
    dffc:	bb 27       	eor	r27, r27
    dffe:	93 95       	inc	r25
    e000:	f6 95       	lsr	r31
    e002:	87 95       	ror	r24
    e004:	77 95       	ror	r23
    e006:	67 95       	ror	r22
    e008:	b7 95       	ror	r27
    e00a:	f1 11       	cpse	r31, r1
    e00c:	f8 cf       	rjmp	.-16     	; 0xdffe <__floatsisf+0x1c>
    e00e:	fa f4       	brpl	.+62     	; 0xe04e <__floatsisf+0x6c>
    e010:	bb 0f       	add	r27, r27
    e012:	11 f4       	brne	.+4      	; 0xe018 <__floatsisf+0x36>
    e014:	60 ff       	sbrs	r22, 0
    e016:	1b c0       	rjmp	.+54     	; 0xe04e <__floatsisf+0x6c>
    e018:	6f 5f       	subi	r22, 0xFF	; 255
    e01a:	7f 4f       	sbci	r23, 0xFF	; 255
    e01c:	8f 4f       	sbci	r24, 0xFF	; 255
    e01e:	9f 4f       	sbci	r25, 0xFF	; 255
    e020:	16 c0       	rjmp	.+44     	; 0xe04e <__floatsisf+0x6c>
    e022:	88 23       	and	r24, r24
    e024:	11 f0       	breq	.+4      	; 0xe02a <__floatsisf+0x48>
    e026:	96 e9       	ldi	r25, 0x96	; 150
    e028:	11 c0       	rjmp	.+34     	; 0xe04c <__floatsisf+0x6a>
    e02a:	77 23       	and	r23, r23
    e02c:	21 f0       	breq	.+8      	; 0xe036 <__floatsisf+0x54>
    e02e:	9e e8       	ldi	r25, 0x8E	; 142
    e030:	87 2f       	mov	r24, r23
    e032:	76 2f       	mov	r23, r22
    e034:	05 c0       	rjmp	.+10     	; 0xe040 <__floatsisf+0x5e>
    e036:	66 23       	and	r22, r22
    e038:	71 f0       	breq	.+28     	; 0xe056 <__floatsisf+0x74>
    e03a:	96 e8       	ldi	r25, 0x86	; 134
    e03c:	86 2f       	mov	r24, r22
    e03e:	70 e0       	ldi	r23, 0x00	; 0
    e040:	60 e0       	ldi	r22, 0x00	; 0
    e042:	2a f0       	brmi	.+10     	; 0xe04e <__floatsisf+0x6c>
    e044:	9a 95       	dec	r25
    e046:	66 0f       	add	r22, r22
    e048:	77 1f       	adc	r23, r23
    e04a:	88 1f       	adc	r24, r24
    e04c:	da f7       	brpl	.-10     	; 0xe044 <__floatsisf+0x62>
    e04e:	88 0f       	add	r24, r24
    e050:	96 95       	lsr	r25
    e052:	87 95       	ror	r24
    e054:	97 f9       	bld	r25, 7
    e056:	08 95       	ret

0000e058 <floor>:
    e058:	a9 d0       	rcall	.+338    	; 0xe1ac <__fp_trunc>
    e05a:	80 f0       	brcs	.+32     	; 0xe07c <floor+0x24>
    e05c:	9f 37       	cpi	r25, 0x7F	; 127
    e05e:	40 f4       	brcc	.+16     	; 0xe070 <floor+0x18>
    e060:	91 11       	cpse	r25, r1
    e062:	0e f0       	brts	.+2      	; 0xe066 <floor+0xe>
    e064:	bb c0       	rjmp	.+374    	; 0xe1dc <__fp_szero>
    e066:	60 e0       	ldi	r22, 0x00	; 0
    e068:	70 e0       	ldi	r23, 0x00	; 0
    e06a:	80 e8       	ldi	r24, 0x80	; 128
    e06c:	9f eb       	ldi	r25, 0xBF	; 191
    e06e:	08 95       	ret
    e070:	26 f4       	brtc	.+8      	; 0xe07a <floor+0x22>
    e072:	1b 16       	cp	r1, r27
    e074:	61 1d       	adc	r22, r1
    e076:	71 1d       	adc	r23, r1
    e078:	81 1d       	adc	r24, r1
    e07a:	2b c0       	rjmp	.+86     	; 0xe0d2 <__fp_mintl>
    e07c:	45 c0       	rjmp	.+138    	; 0xe108 <__fp_mpack>

0000e07e <__fp_cmp>:
    e07e:	99 0f       	add	r25, r25
    e080:	00 08       	sbc	r0, r0
    e082:	55 0f       	add	r21, r21
    e084:	aa 0b       	sbc	r26, r26
    e086:	e0 e8       	ldi	r30, 0x80	; 128
    e088:	fe ef       	ldi	r31, 0xFE	; 254
    e08a:	16 16       	cp	r1, r22
    e08c:	17 06       	cpc	r1, r23
    e08e:	e8 07       	cpc	r30, r24
    e090:	f9 07       	cpc	r31, r25
    e092:	c0 f0       	brcs	.+48     	; 0xe0c4 <__fp_cmp+0x46>
    e094:	12 16       	cp	r1, r18
    e096:	13 06       	cpc	r1, r19
    e098:	e4 07       	cpc	r30, r20
    e09a:	f5 07       	cpc	r31, r21
    e09c:	98 f0       	brcs	.+38     	; 0xe0c4 <__fp_cmp+0x46>
    e09e:	62 1b       	sub	r22, r18
    e0a0:	73 0b       	sbc	r23, r19
    e0a2:	84 0b       	sbc	r24, r20
    e0a4:	95 0b       	sbc	r25, r21
    e0a6:	39 f4       	brne	.+14     	; 0xe0b6 <__fp_cmp+0x38>
    e0a8:	0a 26       	eor	r0, r26
    e0aa:	61 f0       	breq	.+24     	; 0xe0c4 <__fp_cmp+0x46>
    e0ac:	23 2b       	or	r18, r19
    e0ae:	24 2b       	or	r18, r20
    e0b0:	25 2b       	or	r18, r21
    e0b2:	21 f4       	brne	.+8      	; 0xe0bc <__fp_cmp+0x3e>
    e0b4:	08 95       	ret
    e0b6:	0a 26       	eor	r0, r26
    e0b8:	09 f4       	brne	.+2      	; 0xe0bc <__fp_cmp+0x3e>
    e0ba:	a1 40       	sbci	r26, 0x01	; 1
    e0bc:	a6 95       	lsr	r26
    e0be:	8f ef       	ldi	r24, 0xFF	; 255
    e0c0:	81 1d       	adc	r24, r1
    e0c2:	81 1d       	adc	r24, r1
    e0c4:	08 95       	ret

0000e0c6 <__fp_inf>:
    e0c6:	97 f9       	bld	r25, 7
    e0c8:	9f 67       	ori	r25, 0x7F	; 127
    e0ca:	80 e8       	ldi	r24, 0x80	; 128
    e0cc:	70 e0       	ldi	r23, 0x00	; 0
    e0ce:	60 e0       	ldi	r22, 0x00	; 0
    e0d0:	08 95       	ret

0000e0d2 <__fp_mintl>:
    e0d2:	88 23       	and	r24, r24
    e0d4:	71 f4       	brne	.+28     	; 0xe0f2 <__fp_mintl+0x20>
    e0d6:	77 23       	and	r23, r23
    e0d8:	21 f0       	breq	.+8      	; 0xe0e2 <__fp_mintl+0x10>
    e0da:	98 50       	subi	r25, 0x08	; 8
    e0dc:	87 2b       	or	r24, r23
    e0de:	76 2f       	mov	r23, r22
    e0e0:	07 c0       	rjmp	.+14     	; 0xe0f0 <__fp_mintl+0x1e>
    e0e2:	66 23       	and	r22, r22
    e0e4:	11 f4       	brne	.+4      	; 0xe0ea <__fp_mintl+0x18>
    e0e6:	99 27       	eor	r25, r25
    e0e8:	0d c0       	rjmp	.+26     	; 0xe104 <__fp_mintl+0x32>
    e0ea:	90 51       	subi	r25, 0x10	; 16
    e0ec:	86 2b       	or	r24, r22
    e0ee:	70 e0       	ldi	r23, 0x00	; 0
    e0f0:	60 e0       	ldi	r22, 0x00	; 0
    e0f2:	2a f0       	brmi	.+10     	; 0xe0fe <__fp_mintl+0x2c>
    e0f4:	9a 95       	dec	r25
    e0f6:	66 0f       	add	r22, r22
    e0f8:	77 1f       	adc	r23, r23
    e0fa:	88 1f       	adc	r24, r24
    e0fc:	da f7       	brpl	.-10     	; 0xe0f4 <__fp_mintl+0x22>
    e0fe:	88 0f       	add	r24, r24
    e100:	96 95       	lsr	r25
    e102:	87 95       	ror	r24
    e104:	97 f9       	bld	r25, 7
    e106:	08 95       	ret

0000e108 <__fp_mpack>:
    e108:	9f 3f       	cpi	r25, 0xFF	; 255
    e10a:	31 f0       	breq	.+12     	; 0xe118 <__fp_mpack_finite+0xc>

0000e10c <__fp_mpack_finite>:
    e10c:	91 50       	subi	r25, 0x01	; 1
    e10e:	20 f4       	brcc	.+8      	; 0xe118 <__fp_mpack_finite+0xc>
    e110:	87 95       	ror	r24
    e112:	77 95       	ror	r23
    e114:	67 95       	ror	r22
    e116:	b7 95       	ror	r27
    e118:	88 0f       	add	r24, r24
    e11a:	91 1d       	adc	r25, r1
    e11c:	96 95       	lsr	r25
    e11e:	87 95       	ror	r24
    e120:	97 f9       	bld	r25, 7
    e122:	08 95       	ret

0000e124 <__fp_nan>:
    e124:	9f ef       	ldi	r25, 0xFF	; 255
    e126:	80 ec       	ldi	r24, 0xC0	; 192
    e128:	08 95       	ret

0000e12a <__fp_pscA>:
    e12a:	00 24       	eor	r0, r0
    e12c:	0a 94       	dec	r0
    e12e:	16 16       	cp	r1, r22
    e130:	17 06       	cpc	r1, r23
    e132:	18 06       	cpc	r1, r24
    e134:	09 06       	cpc	r0, r25
    e136:	08 95       	ret

0000e138 <__fp_pscB>:
    e138:	00 24       	eor	r0, r0
    e13a:	0a 94       	dec	r0
    e13c:	12 16       	cp	r1, r18
    e13e:	13 06       	cpc	r1, r19
    e140:	14 06       	cpc	r1, r20
    e142:	05 06       	cpc	r0, r21
    e144:	08 95       	ret

0000e146 <__fp_round>:
    e146:	09 2e       	mov	r0, r25
    e148:	03 94       	inc	r0
    e14a:	00 0c       	add	r0, r0
    e14c:	11 f4       	brne	.+4      	; 0xe152 <__fp_round+0xc>
    e14e:	88 23       	and	r24, r24
    e150:	52 f0       	brmi	.+20     	; 0xe166 <__fp_round+0x20>
    e152:	bb 0f       	add	r27, r27
    e154:	40 f4       	brcc	.+16     	; 0xe166 <__fp_round+0x20>
    e156:	bf 2b       	or	r27, r31
    e158:	11 f4       	brne	.+4      	; 0xe15e <__fp_round+0x18>
    e15a:	60 ff       	sbrs	r22, 0
    e15c:	04 c0       	rjmp	.+8      	; 0xe166 <__fp_round+0x20>
    e15e:	6f 5f       	subi	r22, 0xFF	; 255
    e160:	7f 4f       	sbci	r23, 0xFF	; 255
    e162:	8f 4f       	sbci	r24, 0xFF	; 255
    e164:	9f 4f       	sbci	r25, 0xFF	; 255
    e166:	08 95       	ret

0000e168 <__fp_split3>:
    e168:	57 fd       	sbrc	r21, 7
    e16a:	90 58       	subi	r25, 0x80	; 128
    e16c:	44 0f       	add	r20, r20
    e16e:	55 1f       	adc	r21, r21
    e170:	59 f0       	breq	.+22     	; 0xe188 <__fp_splitA+0x10>
    e172:	5f 3f       	cpi	r21, 0xFF	; 255
    e174:	71 f0       	breq	.+28     	; 0xe192 <__fp_splitA+0x1a>
    e176:	47 95       	ror	r20

0000e178 <__fp_splitA>:
    e178:	88 0f       	add	r24, r24
    e17a:	97 fb       	bst	r25, 7
    e17c:	99 1f       	adc	r25, r25
    e17e:	61 f0       	breq	.+24     	; 0xe198 <__fp_splitA+0x20>
    e180:	9f 3f       	cpi	r25, 0xFF	; 255
    e182:	79 f0       	breq	.+30     	; 0xe1a2 <__fp_splitA+0x2a>
    e184:	87 95       	ror	r24
    e186:	08 95       	ret
    e188:	12 16       	cp	r1, r18
    e18a:	13 06       	cpc	r1, r19
    e18c:	14 06       	cpc	r1, r20
    e18e:	55 1f       	adc	r21, r21
    e190:	f2 cf       	rjmp	.-28     	; 0xe176 <__fp_split3+0xe>
    e192:	46 95       	lsr	r20
    e194:	f1 df       	rcall	.-30     	; 0xe178 <__fp_splitA>
    e196:	08 c0       	rjmp	.+16     	; 0xe1a8 <__fp_splitA+0x30>
    e198:	16 16       	cp	r1, r22
    e19a:	17 06       	cpc	r1, r23
    e19c:	18 06       	cpc	r1, r24
    e19e:	99 1f       	adc	r25, r25
    e1a0:	f1 cf       	rjmp	.-30     	; 0xe184 <__fp_splitA+0xc>
    e1a2:	86 95       	lsr	r24
    e1a4:	71 05       	cpc	r23, r1
    e1a6:	61 05       	cpc	r22, r1
    e1a8:	08 94       	sec
    e1aa:	08 95       	ret

0000e1ac <__fp_trunc>:
    e1ac:	e5 df       	rcall	.-54     	; 0xe178 <__fp_splitA>
    e1ae:	a0 f0       	brcs	.+40     	; 0xe1d8 <__fp_trunc+0x2c>
    e1b0:	be e7       	ldi	r27, 0x7E	; 126
    e1b2:	b9 17       	cp	r27, r25
    e1b4:	88 f4       	brcc	.+34     	; 0xe1d8 <__fp_trunc+0x2c>
    e1b6:	bb 27       	eor	r27, r27
    e1b8:	9f 38       	cpi	r25, 0x8F	; 143
    e1ba:	60 f4       	brcc	.+24     	; 0xe1d4 <__fp_trunc+0x28>
    e1bc:	16 16       	cp	r1, r22
    e1be:	b1 1d       	adc	r27, r1
    e1c0:	67 2f       	mov	r22, r23
    e1c2:	78 2f       	mov	r23, r24
    e1c4:	88 27       	eor	r24, r24
    e1c6:	98 5f       	subi	r25, 0xF8	; 248
    e1c8:	f7 cf       	rjmp	.-18     	; 0xe1b8 <__fp_trunc+0xc>
    e1ca:	86 95       	lsr	r24
    e1cc:	77 95       	ror	r23
    e1ce:	67 95       	ror	r22
    e1d0:	b1 1d       	adc	r27, r1
    e1d2:	93 95       	inc	r25
    e1d4:	96 39       	cpi	r25, 0x96	; 150
    e1d6:	c8 f3       	brcs	.-14     	; 0xe1ca <__fp_trunc+0x1e>
    e1d8:	08 95       	ret

0000e1da <__fp_zero>:
    e1da:	e8 94       	clt

0000e1dc <__fp_szero>:
    e1dc:	bb 27       	eor	r27, r27
    e1de:	66 27       	eor	r22, r22
    e1e0:	77 27       	eor	r23, r23
    e1e2:	cb 01       	movw	r24, r22
    e1e4:	97 f9       	bld	r25, 7
    e1e6:	08 95       	ret

0000e1e8 <__gesf2>:
    e1e8:	4a df       	rcall	.-364    	; 0xe07e <__fp_cmp>
    e1ea:	08 f4       	brcc	.+2      	; 0xe1ee <__gesf2+0x6>
    e1ec:	8f ef       	ldi	r24, 0xFF	; 255
    e1ee:	08 95       	ret

0000e1f0 <__mulsf3>:
    e1f0:	0b d0       	rcall	.+22     	; 0xe208 <__mulsf3x>
    e1f2:	a9 cf       	rjmp	.-174    	; 0xe146 <__fp_round>
    e1f4:	9a df       	rcall	.-204    	; 0xe12a <__fp_pscA>
    e1f6:	28 f0       	brcs	.+10     	; 0xe202 <__mulsf3+0x12>
    e1f8:	9f df       	rcall	.-194    	; 0xe138 <__fp_pscB>
    e1fa:	18 f0       	brcs	.+6      	; 0xe202 <__mulsf3+0x12>
    e1fc:	95 23       	and	r25, r21
    e1fe:	09 f0       	breq	.+2      	; 0xe202 <__mulsf3+0x12>
    e200:	62 cf       	rjmp	.-316    	; 0xe0c6 <__fp_inf>
    e202:	90 cf       	rjmp	.-224    	; 0xe124 <__fp_nan>
    e204:	11 24       	eor	r1, r1
    e206:	ea cf       	rjmp	.-44     	; 0xe1dc <__fp_szero>

0000e208 <__mulsf3x>:
    e208:	af df       	rcall	.-162    	; 0xe168 <__fp_split3>
    e20a:	a0 f3       	brcs	.-24     	; 0xe1f4 <__mulsf3+0x4>

0000e20c <__mulsf3_pse>:
    e20c:	95 9f       	mul	r25, r21
    e20e:	d1 f3       	breq	.-12     	; 0xe204 <__mulsf3+0x14>
    e210:	95 0f       	add	r25, r21
    e212:	50 e0       	ldi	r21, 0x00	; 0
    e214:	55 1f       	adc	r21, r21
    e216:	62 9f       	mul	r22, r18
    e218:	f0 01       	movw	r30, r0
    e21a:	72 9f       	mul	r23, r18
    e21c:	bb 27       	eor	r27, r27
    e21e:	f0 0d       	add	r31, r0
    e220:	b1 1d       	adc	r27, r1
    e222:	63 9f       	mul	r22, r19
    e224:	aa 27       	eor	r26, r26
    e226:	f0 0d       	add	r31, r0
    e228:	b1 1d       	adc	r27, r1
    e22a:	aa 1f       	adc	r26, r26
    e22c:	64 9f       	mul	r22, r20
    e22e:	66 27       	eor	r22, r22
    e230:	b0 0d       	add	r27, r0
    e232:	a1 1d       	adc	r26, r1
    e234:	66 1f       	adc	r22, r22
    e236:	82 9f       	mul	r24, r18
    e238:	22 27       	eor	r18, r18
    e23a:	b0 0d       	add	r27, r0
    e23c:	a1 1d       	adc	r26, r1
    e23e:	62 1f       	adc	r22, r18
    e240:	73 9f       	mul	r23, r19
    e242:	b0 0d       	add	r27, r0
    e244:	a1 1d       	adc	r26, r1
    e246:	62 1f       	adc	r22, r18
    e248:	83 9f       	mul	r24, r19
    e24a:	a0 0d       	add	r26, r0
    e24c:	61 1d       	adc	r22, r1
    e24e:	22 1f       	adc	r18, r18
    e250:	74 9f       	mul	r23, r20
    e252:	33 27       	eor	r19, r19
    e254:	a0 0d       	add	r26, r0
    e256:	61 1d       	adc	r22, r1
    e258:	23 1f       	adc	r18, r19
    e25a:	84 9f       	mul	r24, r20
    e25c:	60 0d       	add	r22, r0
    e25e:	21 1d       	adc	r18, r1
    e260:	82 2f       	mov	r24, r18
    e262:	76 2f       	mov	r23, r22
    e264:	6a 2f       	mov	r22, r26
    e266:	11 24       	eor	r1, r1
    e268:	9f 57       	subi	r25, 0x7F	; 127
    e26a:	50 40       	sbci	r21, 0x00	; 0
    e26c:	8a f0       	brmi	.+34     	; 0xe290 <__mulsf3_pse+0x84>
    e26e:	e1 f0       	breq	.+56     	; 0xe2a8 <__mulsf3_pse+0x9c>
    e270:	88 23       	and	r24, r24
    e272:	4a f0       	brmi	.+18     	; 0xe286 <__mulsf3_pse+0x7a>
    e274:	ee 0f       	add	r30, r30
    e276:	ff 1f       	adc	r31, r31
    e278:	bb 1f       	adc	r27, r27
    e27a:	66 1f       	adc	r22, r22
    e27c:	77 1f       	adc	r23, r23
    e27e:	88 1f       	adc	r24, r24
    e280:	91 50       	subi	r25, 0x01	; 1
    e282:	50 40       	sbci	r21, 0x00	; 0
    e284:	a9 f7       	brne	.-22     	; 0xe270 <__mulsf3_pse+0x64>
    e286:	9e 3f       	cpi	r25, 0xFE	; 254
    e288:	51 05       	cpc	r21, r1
    e28a:	70 f0       	brcs	.+28     	; 0xe2a8 <__mulsf3_pse+0x9c>
    e28c:	1c cf       	rjmp	.-456    	; 0xe0c6 <__fp_inf>
    e28e:	a6 cf       	rjmp	.-180    	; 0xe1dc <__fp_szero>
    e290:	5f 3f       	cpi	r21, 0xFF	; 255
    e292:	ec f3       	brlt	.-6      	; 0xe28e <__mulsf3_pse+0x82>
    e294:	98 3e       	cpi	r25, 0xE8	; 232
    e296:	dc f3       	brlt	.-10     	; 0xe28e <__mulsf3_pse+0x82>
    e298:	86 95       	lsr	r24
    e29a:	77 95       	ror	r23
    e29c:	67 95       	ror	r22
    e29e:	b7 95       	ror	r27
    e2a0:	f7 95       	ror	r31
    e2a2:	e7 95       	ror	r30
    e2a4:	9f 5f       	subi	r25, 0xFF	; 255
    e2a6:	c1 f7       	brne	.-16     	; 0xe298 <__mulsf3_pse+0x8c>
    e2a8:	fe 2b       	or	r31, r30
    e2aa:	88 0f       	add	r24, r24
    e2ac:	91 1d       	adc	r25, r1
    e2ae:	96 95       	lsr	r25
    e2b0:	87 95       	ror	r24
    e2b2:	97 f9       	bld	r25, 7
    e2b4:	08 95       	ret

0000e2b6 <pow>:
    e2b6:	fa 01       	movw	r30, r20
    e2b8:	ee 0f       	add	r30, r30
    e2ba:	ff 1f       	adc	r31, r31
    e2bc:	30 96       	adiw	r30, 0x00	; 0
    e2be:	21 05       	cpc	r18, r1
    e2c0:	31 05       	cpc	r19, r1
    e2c2:	99 f1       	breq	.+102    	; 0xe32a <pow+0x74>
    e2c4:	61 15       	cp	r22, r1
    e2c6:	71 05       	cpc	r23, r1
    e2c8:	61 f4       	brne	.+24     	; 0xe2e2 <pow+0x2c>
    e2ca:	80 38       	cpi	r24, 0x80	; 128
    e2cc:	bf e3       	ldi	r27, 0x3F	; 63
    e2ce:	9b 07       	cpc	r25, r27
    e2d0:	49 f1       	breq	.+82     	; 0xe324 <pow+0x6e>
    e2d2:	68 94       	set
    e2d4:	90 38       	cpi	r25, 0x80	; 128
    e2d6:	81 05       	cpc	r24, r1
    e2d8:	61 f0       	breq	.+24     	; 0xe2f2 <pow+0x3c>
    e2da:	80 38       	cpi	r24, 0x80	; 128
    e2dc:	bf ef       	ldi	r27, 0xFF	; 255
    e2de:	9b 07       	cpc	r25, r27
    e2e0:	41 f0       	breq	.+16     	; 0xe2f2 <pow+0x3c>
    e2e2:	99 23       	and	r25, r25
    e2e4:	42 f5       	brpl	.+80     	; 0xe336 <pow+0x80>
    e2e6:	ff 3f       	cpi	r31, 0xFF	; 255
    e2e8:	e1 05       	cpc	r30, r1
    e2ea:	31 05       	cpc	r19, r1
    e2ec:	21 05       	cpc	r18, r1
    e2ee:	11 f1       	breq	.+68     	; 0xe334 <pow+0x7e>
    e2f0:	e8 94       	clt
    e2f2:	08 94       	sec
    e2f4:	e7 95       	ror	r30
    e2f6:	d9 01       	movw	r26, r18
    e2f8:	aa 23       	and	r26, r26
    e2fa:	29 f4       	brne	.+10     	; 0xe306 <pow+0x50>
    e2fc:	ab 2f       	mov	r26, r27
    e2fe:	be 2f       	mov	r27, r30
    e300:	f8 5f       	subi	r31, 0xF8	; 248
    e302:	d0 f3       	brcs	.-12     	; 0xe2f8 <pow+0x42>
    e304:	10 c0       	rjmp	.+32     	; 0xe326 <pow+0x70>
    e306:	ff 5f       	subi	r31, 0xFF	; 255
    e308:	70 f4       	brcc	.+28     	; 0xe326 <pow+0x70>
    e30a:	a6 95       	lsr	r26
    e30c:	e0 f7       	brcc	.-8      	; 0xe306 <pow+0x50>
    e30e:	f7 39       	cpi	r31, 0x97	; 151
    e310:	50 f0       	brcs	.+20     	; 0xe326 <pow+0x70>
    e312:	19 f0       	breq	.+6      	; 0xe31a <pow+0x64>
    e314:	ff 3a       	cpi	r31, 0xAF	; 175
    e316:	38 f4       	brcc	.+14     	; 0xe326 <pow+0x70>
    e318:	9f 77       	andi	r25, 0x7F	; 127
    e31a:	9f 93       	push	r25
    e31c:	0c d0       	rcall	.+24     	; 0xe336 <pow+0x80>
    e31e:	0f 90       	pop	r0
    e320:	07 fc       	sbrc	r0, 7
    e322:	90 58       	subi	r25, 0x80	; 128
    e324:	08 95       	ret
    e326:	3e f0       	brts	.+14     	; 0xe336 <pow+0x80>
    e328:	fd ce       	rjmp	.-518    	; 0xe124 <__fp_nan>
    e32a:	60 e0       	ldi	r22, 0x00	; 0
    e32c:	70 e0       	ldi	r23, 0x00	; 0
    e32e:	80 e8       	ldi	r24, 0x80	; 128
    e330:	9f e3       	ldi	r25, 0x3F	; 63
    e332:	08 95       	ret
    e334:	4f e7       	ldi	r20, 0x7F	; 127
    e336:	9f 77       	andi	r25, 0x7F	; 127
    e338:	5f 93       	push	r21
    e33a:	4f 93       	push	r20
    e33c:	3f 93       	push	r19
    e33e:	2f 93       	push	r18
    e340:	ae d0       	rcall	.+348    	; 0xe49e <log>
    e342:	2f 91       	pop	r18
    e344:	3f 91       	pop	r19
    e346:	4f 91       	pop	r20
    e348:	5f 91       	pop	r21
    e34a:	52 df       	rcall	.-348    	; 0xe1f0 <__mulsf3>
    e34c:	15 c0       	rjmp	.+42     	; 0xe378 <exp>

0000e34e <strrev>:
    e34e:	dc 01       	movw	r26, r24
    e350:	fc 01       	movw	r30, r24
    e352:	67 2f       	mov	r22, r23
    e354:	71 91       	ld	r23, Z+
    e356:	77 23       	and	r23, r23
    e358:	e1 f7       	brne	.-8      	; 0xe352 <strrev+0x4>
    e35a:	32 97       	sbiw	r30, 0x02	; 2
    e35c:	04 c0       	rjmp	.+8      	; 0xe366 <strrev+0x18>
    e35e:	7c 91       	ld	r23, X
    e360:	6d 93       	st	X+, r22
    e362:	70 83       	st	Z, r23
    e364:	62 91       	ld	r22, -Z
    e366:	ae 17       	cp	r26, r30
    e368:	bf 07       	cpc	r27, r31
    e36a:	c8 f3       	brcs	.-14     	; 0xe35e <strrev+0x10>
    e36c:	08 95       	ret
    e36e:	19 f4       	brne	.+6      	; 0xe376 <strrev+0x28>
    e370:	0e f0       	brts	.+2      	; 0xe374 <strrev+0x26>
    e372:	a9 ce       	rjmp	.-686    	; 0xe0c6 <__fp_inf>
    e374:	32 cf       	rjmp	.-412    	; 0xe1da <__fp_zero>
    e376:	d6 ce       	rjmp	.-596    	; 0xe124 <__fp_nan>

0000e378 <exp>:
    e378:	ff de       	rcall	.-514    	; 0xe178 <__fp_splitA>
    e37a:	c8 f3       	brcs	.-14     	; 0xe36e <strrev+0x20>
    e37c:	96 38       	cpi	r25, 0x86	; 134
    e37e:	c0 f7       	brcc	.-16     	; 0xe370 <strrev+0x22>
    e380:	07 f8       	bld	r0, 7
    e382:	0f 92       	push	r0
    e384:	e8 94       	clt
    e386:	2b e3       	ldi	r18, 0x3B	; 59
    e388:	3a ea       	ldi	r19, 0xAA	; 170
    e38a:	48 eb       	ldi	r20, 0xB8	; 184
    e38c:	5f e7       	ldi	r21, 0x7F	; 127
    e38e:	3e df       	rcall	.-388    	; 0xe20c <__mulsf3_pse>
    e390:	0f 92       	push	r0
    e392:	0f 92       	push	r0
    e394:	0f 92       	push	r0
    e396:	4d b7       	in	r20, 0x3d	; 61
    e398:	5e b7       	in	r21, 0x3e	; 62
    e39a:	0f 92       	push	r0
    e39c:	c0 d0       	rcall	.+384    	; 0xe51e <modf>
    e39e:	ec e8       	ldi	r30, 0x8C	; 140
    e3a0:	f0 e0       	ldi	r31, 0x00	; 0
    e3a2:	16 d0       	rcall	.+44     	; 0xe3d0 <__fp_powser>
    e3a4:	4f 91       	pop	r20
    e3a6:	5f 91       	pop	r21
    e3a8:	ef 91       	pop	r30
    e3aa:	ff 91       	pop	r31
    e3ac:	e5 95       	asr	r30
    e3ae:	ee 1f       	adc	r30, r30
    e3b0:	ff 1f       	adc	r31, r31
    e3b2:	49 f0       	breq	.+18     	; 0xe3c6 <exp+0x4e>
    e3b4:	fe 57       	subi	r31, 0x7E	; 126
    e3b6:	e0 68       	ori	r30, 0x80	; 128
    e3b8:	44 27       	eor	r20, r20
    e3ba:	ee 0f       	add	r30, r30
    e3bc:	44 1f       	adc	r20, r20
    e3be:	fa 95       	dec	r31
    e3c0:	e1 f7       	brne	.-8      	; 0xe3ba <exp+0x42>
    e3c2:	41 95       	neg	r20
    e3c4:	55 0b       	sbc	r21, r21
    e3c6:	32 d0       	rcall	.+100    	; 0xe42c <ldexp>
    e3c8:	0f 90       	pop	r0
    e3ca:	07 fe       	sbrs	r0, 7
    e3cc:	26 c0       	rjmp	.+76     	; 0xe41a <inverse>
    e3ce:	08 95       	ret

0000e3d0 <__fp_powser>:
    e3d0:	df 93       	push	r29
    e3d2:	cf 93       	push	r28
    e3d4:	1f 93       	push	r17
    e3d6:	0f 93       	push	r16
    e3d8:	ff 92       	push	r15
    e3da:	ef 92       	push	r14
    e3dc:	df 92       	push	r13
    e3de:	7b 01       	movw	r14, r22
    e3e0:	8c 01       	movw	r16, r24
    e3e2:	68 94       	set
    e3e4:	05 c0       	rjmp	.+10     	; 0xe3f0 <__fp_powser+0x20>
    e3e6:	da 2e       	mov	r13, r26
    e3e8:	ef 01       	movw	r28, r30
    e3ea:	0e df       	rcall	.-484    	; 0xe208 <__mulsf3x>
    e3ec:	fe 01       	movw	r30, r28
    e3ee:	e8 94       	clt
    e3f0:	a5 91       	lpm	r26, Z+
    e3f2:	25 91       	lpm	r18, Z+
    e3f4:	35 91       	lpm	r19, Z+
    e3f6:	45 91       	lpm	r20, Z+
    e3f8:	55 91       	lpm	r21, Z+
    e3fa:	ae f3       	brts	.-22     	; 0xe3e6 <__fp_powser+0x16>
    e3fc:	ef 01       	movw	r28, r30
    e3fe:	ff dc       	rcall	.-1538   	; 0xddfe <__addsf3x>
    e400:	fe 01       	movw	r30, r28
    e402:	97 01       	movw	r18, r14
    e404:	a8 01       	movw	r20, r16
    e406:	da 94       	dec	r13
    e408:	79 f7       	brne	.-34     	; 0xe3e8 <__fp_powser+0x18>
    e40a:	df 90       	pop	r13
    e40c:	ef 90       	pop	r14
    e40e:	ff 90       	pop	r15
    e410:	0f 91       	pop	r16
    e412:	1f 91       	pop	r17
    e414:	cf 91       	pop	r28
    e416:	df 91       	pop	r29
    e418:	08 95       	ret

0000e41a <inverse>:
    e41a:	9b 01       	movw	r18, r22
    e41c:	ac 01       	movw	r20, r24
    e41e:	60 e0       	ldi	r22, 0x00	; 0
    e420:	70 e0       	ldi	r23, 0x00	; 0
    e422:	80 e8       	ldi	r24, 0x80	; 128
    e424:	9f e3       	ldi	r25, 0x3F	; 63
    e426:	42 cd       	rjmp	.-1404   	; 0xdeac <__divsf3>
    e428:	4e ce       	rjmp	.-868    	; 0xe0c6 <__fp_inf>
    e42a:	6e ce       	rjmp	.-804    	; 0xe108 <__fp_mpack>

0000e42c <ldexp>:
    e42c:	a5 de       	rcall	.-694    	; 0xe178 <__fp_splitA>
    e42e:	e8 f3       	brcs	.-6      	; 0xe42a <inverse+0x10>
    e430:	99 23       	and	r25, r25
    e432:	d9 f3       	breq	.-10     	; 0xe42a <inverse+0x10>
    e434:	94 0f       	add	r25, r20
    e436:	51 1d       	adc	r21, r1
    e438:	bb f3       	brvs	.-18     	; 0xe428 <inverse+0xe>
    e43a:	91 50       	subi	r25, 0x01	; 1
    e43c:	50 40       	sbci	r21, 0x00	; 0
    e43e:	94 f0       	brlt	.+36     	; 0xe464 <ldexp+0x38>
    e440:	59 f0       	breq	.+22     	; 0xe458 <ldexp+0x2c>
    e442:	88 23       	and	r24, r24
    e444:	32 f0       	brmi	.+12     	; 0xe452 <ldexp+0x26>
    e446:	66 0f       	add	r22, r22
    e448:	77 1f       	adc	r23, r23
    e44a:	88 1f       	adc	r24, r24
    e44c:	91 50       	subi	r25, 0x01	; 1
    e44e:	50 40       	sbci	r21, 0x00	; 0
    e450:	c1 f7       	brne	.-16     	; 0xe442 <ldexp+0x16>
    e452:	9e 3f       	cpi	r25, 0xFE	; 254
    e454:	51 05       	cpc	r21, r1
    e456:	44 f7       	brge	.-48     	; 0xe428 <inverse+0xe>
    e458:	88 0f       	add	r24, r24
    e45a:	91 1d       	adc	r25, r1
    e45c:	96 95       	lsr	r25
    e45e:	87 95       	ror	r24
    e460:	97 f9       	bld	r25, 7
    e462:	08 95       	ret
    e464:	5f 3f       	cpi	r21, 0xFF	; 255
    e466:	ac f0       	brlt	.+42     	; 0xe492 <ldexp+0x66>
    e468:	98 3e       	cpi	r25, 0xE8	; 232
    e46a:	9c f0       	brlt	.+38     	; 0xe492 <ldexp+0x66>
    e46c:	bb 27       	eor	r27, r27
    e46e:	86 95       	lsr	r24
    e470:	77 95       	ror	r23
    e472:	67 95       	ror	r22
    e474:	b7 95       	ror	r27
    e476:	08 f4       	brcc	.+2      	; 0xe47a <ldexp+0x4e>
    e478:	b1 60       	ori	r27, 0x01	; 1
    e47a:	93 95       	inc	r25
    e47c:	c1 f7       	brne	.-16     	; 0xe46e <ldexp+0x42>
    e47e:	bb 0f       	add	r27, r27
    e480:	58 f7       	brcc	.-42     	; 0xe458 <ldexp+0x2c>
    e482:	11 f4       	brne	.+4      	; 0xe488 <ldexp+0x5c>
    e484:	60 ff       	sbrs	r22, 0
    e486:	e8 cf       	rjmp	.-48     	; 0xe458 <ldexp+0x2c>
    e488:	6f 5f       	subi	r22, 0xFF	; 255
    e48a:	7f 4f       	sbci	r23, 0xFF	; 255
    e48c:	8f 4f       	sbci	r24, 0xFF	; 255
    e48e:	9f 4f       	sbci	r25, 0xFF	; 255
    e490:	e3 cf       	rjmp	.-58     	; 0xe458 <ldexp+0x2c>
    e492:	a4 ce       	rjmp	.-696    	; 0xe1dc <__fp_szero>
    e494:	0e f0       	brts	.+2      	; 0xe498 <ldexp+0x6c>
    e496:	38 ce       	rjmp	.-912    	; 0xe108 <__fp_mpack>
    e498:	45 ce       	rjmp	.-886    	; 0xe124 <__fp_nan>
    e49a:	68 94       	set
    e49c:	14 ce       	rjmp	.-984    	; 0xe0c6 <__fp_inf>

0000e49e <log>:
    e49e:	6c de       	rcall	.-808    	; 0xe178 <__fp_splitA>
    e4a0:	c8 f3       	brcs	.-14     	; 0xe494 <ldexp+0x68>
    e4a2:	99 23       	and	r25, r25
    e4a4:	d1 f3       	breq	.-12     	; 0xe49a <ldexp+0x6e>
    e4a6:	c6 f3       	brts	.-16     	; 0xe498 <ldexp+0x6c>
    e4a8:	df 93       	push	r29
    e4aa:	cf 93       	push	r28
    e4ac:	1f 93       	push	r17
    e4ae:	0f 93       	push	r16
    e4b0:	ff 92       	push	r15
    e4b2:	c9 2f       	mov	r28, r25
    e4b4:	dd 27       	eor	r29, r29
    e4b6:	88 23       	and	r24, r24
    e4b8:	2a f0       	brmi	.+10     	; 0xe4c4 <log+0x26>
    e4ba:	21 97       	sbiw	r28, 0x01	; 1
    e4bc:	66 0f       	add	r22, r22
    e4be:	77 1f       	adc	r23, r23
    e4c0:	88 1f       	adc	r24, r24
    e4c2:	da f7       	brpl	.-10     	; 0xe4ba <log+0x1c>
    e4c4:	20 e0       	ldi	r18, 0x00	; 0
    e4c6:	30 e0       	ldi	r19, 0x00	; 0
    e4c8:	40 e8       	ldi	r20, 0x80	; 128
    e4ca:	5f eb       	ldi	r21, 0xBF	; 191
    e4cc:	9f e3       	ldi	r25, 0x3F	; 63
    e4ce:	88 39       	cpi	r24, 0x98	; 152
    e4d0:	20 f0       	brcs	.+8      	; 0xe4da <log+0x3c>
    e4d2:	80 3e       	cpi	r24, 0xE0	; 224
    e4d4:	30 f0       	brcs	.+12     	; 0xe4e2 <log+0x44>
    e4d6:	21 96       	adiw	r28, 0x01	; 1
    e4d8:	8f 77       	andi	r24, 0x7F	; 127
    e4da:	80 dc       	rcall	.-1792   	; 0xdddc <__addsf3>
    e4dc:	e4 eb       	ldi	r30, 0xB4	; 180
    e4de:	f0 e0       	ldi	r31, 0x00	; 0
    e4e0:	03 c0       	rjmp	.+6      	; 0xe4e8 <log+0x4a>
    e4e2:	7c dc       	rcall	.-1800   	; 0xdddc <__addsf3>
    e4e4:	e1 ee       	ldi	r30, 0xE1	; 225
    e4e6:	f0 e0       	ldi	r31, 0x00	; 0
    e4e8:	73 df       	rcall	.-282    	; 0xe3d0 <__fp_powser>
    e4ea:	8b 01       	movw	r16, r22
    e4ec:	be 01       	movw	r22, r28
    e4ee:	ec 01       	movw	r28, r24
    e4f0:	fb 2e       	mov	r15, r27
    e4f2:	6f 57       	subi	r22, 0x7F	; 127
    e4f4:	71 09       	sbc	r23, r1
    e4f6:	75 95       	asr	r23
    e4f8:	77 1f       	adc	r23, r23
    e4fa:	88 0b       	sbc	r24, r24
    e4fc:	99 0b       	sbc	r25, r25
    e4fe:	71 dd       	rcall	.-1310   	; 0xdfe2 <__floatsisf>
    e500:	28 e1       	ldi	r18, 0x18	; 24
    e502:	32 e7       	ldi	r19, 0x72	; 114
    e504:	41 e3       	ldi	r20, 0x31	; 49
    e506:	5f e3       	ldi	r21, 0x3F	; 63
    e508:	7f de       	rcall	.-770    	; 0xe208 <__mulsf3x>
    e50a:	af 2d       	mov	r26, r15
    e50c:	98 01       	movw	r18, r16
    e50e:	ae 01       	movw	r20, r28
    e510:	ff 90       	pop	r15
    e512:	0f 91       	pop	r16
    e514:	1f 91       	pop	r17
    e516:	cf 91       	pop	r28
    e518:	df 91       	pop	r29
    e51a:	71 dc       	rcall	.-1822   	; 0xddfe <__addsf3x>
    e51c:	14 ce       	rjmp	.-984    	; 0xe146 <__fp_round>

0000e51e <modf>:
    e51e:	fa 01       	movw	r30, r20
    e520:	dc 01       	movw	r26, r24
    e522:	aa 0f       	add	r26, r26
    e524:	bb 1f       	adc	r27, r27
    e526:	9b 01       	movw	r18, r22
    e528:	ac 01       	movw	r20, r24
    e52a:	bf 57       	subi	r27, 0x7F	; 127
    e52c:	28 f4       	brcc	.+10     	; 0xe538 <modf+0x1a>
    e52e:	22 27       	eor	r18, r18
    e530:	33 27       	eor	r19, r19
    e532:	44 27       	eor	r20, r20
    e534:	50 78       	andi	r21, 0x80	; 128
    e536:	1f c0       	rjmp	.+62     	; 0xe576 <modf+0x58>
    e538:	b7 51       	subi	r27, 0x17	; 23
    e53a:	88 f4       	brcc	.+34     	; 0xe55e <modf+0x40>
    e53c:	ab 2f       	mov	r26, r27
    e53e:	00 24       	eor	r0, r0
    e540:	46 95       	lsr	r20
    e542:	37 95       	ror	r19
    e544:	27 95       	ror	r18
    e546:	01 1c       	adc	r0, r1
    e548:	a3 95       	inc	r26
    e54a:	d2 f3       	brmi	.-12     	; 0xe540 <modf+0x22>
    e54c:	00 20       	and	r0, r0
    e54e:	69 f0       	breq	.+26     	; 0xe56a <modf+0x4c>
    e550:	22 0f       	add	r18, r18
    e552:	33 1f       	adc	r19, r19
    e554:	44 1f       	adc	r20, r20
    e556:	b3 95       	inc	r27
    e558:	da f3       	brmi	.-10     	; 0xe550 <modf+0x32>
    e55a:	0d d0       	rcall	.+26     	; 0xe576 <modf+0x58>
    e55c:	3e cc       	rjmp	.-1924   	; 0xddda <__subsf3>
    e55e:	61 30       	cpi	r22, 0x01	; 1
    e560:	71 05       	cpc	r23, r1
    e562:	a0 e8       	ldi	r26, 0x80	; 128
    e564:	8a 07       	cpc	r24, r26
    e566:	b9 46       	sbci	r27, 0x69	; 105
    e568:	30 f4       	brcc	.+12     	; 0xe576 <modf+0x58>
    e56a:	9b 01       	movw	r18, r22
    e56c:	ac 01       	movw	r20, r24
    e56e:	66 27       	eor	r22, r22
    e570:	77 27       	eor	r23, r23
    e572:	88 27       	eor	r24, r24
    e574:	90 78       	andi	r25, 0x80	; 128
    e576:	30 96       	adiw	r30, 0x00	; 0
    e578:	21 f0       	breq	.+8      	; 0xe582 <modf+0x64>
    e57a:	20 83       	st	Z, r18
    e57c:	31 83       	std	Z+1, r19	; 0x01
    e57e:	42 83       	std	Z+2, r20	; 0x02
    e580:	53 83       	std	Z+3, r21	; 0x03
    e582:	08 95       	ret

0000e584 <__mulsi3>:
    e584:	62 9f       	mul	r22, r18
    e586:	d0 01       	movw	r26, r0
    e588:	73 9f       	mul	r23, r19
    e58a:	f0 01       	movw	r30, r0
    e58c:	82 9f       	mul	r24, r18
    e58e:	e0 0d       	add	r30, r0
    e590:	f1 1d       	adc	r31, r1
    e592:	64 9f       	mul	r22, r20
    e594:	e0 0d       	add	r30, r0
    e596:	f1 1d       	adc	r31, r1
    e598:	92 9f       	mul	r25, r18
    e59a:	f0 0d       	add	r31, r0
    e59c:	83 9f       	mul	r24, r19
    e59e:	f0 0d       	add	r31, r0
    e5a0:	74 9f       	mul	r23, r20
    e5a2:	f0 0d       	add	r31, r0
    e5a4:	65 9f       	mul	r22, r21
    e5a6:	f0 0d       	add	r31, r0
    e5a8:	99 27       	eor	r25, r25
    e5aa:	72 9f       	mul	r23, r18
    e5ac:	b0 0d       	add	r27, r0
    e5ae:	e1 1d       	adc	r30, r1
    e5b0:	f9 1f       	adc	r31, r25
    e5b2:	63 9f       	mul	r22, r19
    e5b4:	b0 0d       	add	r27, r0
    e5b6:	e1 1d       	adc	r30, r1
    e5b8:	f9 1f       	adc	r31, r25
    e5ba:	bd 01       	movw	r22, r26
    e5bc:	cf 01       	movw	r24, r30
    e5be:	11 24       	eor	r1, r1
    e5c0:	08 95       	ret

0000e5c2 <__udivmodhi4>:
    e5c2:	aa 1b       	sub	r26, r26
    e5c4:	bb 1b       	sub	r27, r27
    e5c6:	51 e1       	ldi	r21, 0x11	; 17
    e5c8:	07 c0       	rjmp	.+14     	; 0xe5d8 <__udivmodhi4_ep>

0000e5ca <__udivmodhi4_loop>:
    e5ca:	aa 1f       	adc	r26, r26
    e5cc:	bb 1f       	adc	r27, r27
    e5ce:	a6 17       	cp	r26, r22
    e5d0:	b7 07       	cpc	r27, r23
    e5d2:	10 f0       	brcs	.+4      	; 0xe5d8 <__udivmodhi4_ep>
    e5d4:	a6 1b       	sub	r26, r22
    e5d6:	b7 0b       	sbc	r27, r23

0000e5d8 <__udivmodhi4_ep>:
    e5d8:	88 1f       	adc	r24, r24
    e5da:	99 1f       	adc	r25, r25
    e5dc:	5a 95       	dec	r21
    e5de:	a9 f7       	brne	.-22     	; 0xe5ca <__udivmodhi4_loop>
    e5e0:	80 95       	com	r24
    e5e2:	90 95       	com	r25
    e5e4:	bc 01       	movw	r22, r24
    e5e6:	cd 01       	movw	r24, r26
    e5e8:	08 95       	ret

0000e5ea <_exit>:
    e5ea:	f8 94       	cli

0000e5ec <__stop_program>:
    e5ec:	ff cf       	rjmp	.-2      	; 0xe5ec <__stop_program>
