
AURobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001aa  00800100  00007b22  00007bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  008002aa  008002aa  00007d60  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  00007d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001a46  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a5a3  00000000  00000000  00009a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a2a  00000000  00000000  00014009  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005cd2  00000000  00000000  00016a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000015a0  00000000  00000000  0001c708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000298a  00000000  00000000  0001dca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000086ff  00000000  00000000  00020632  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00028d31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <_Z12control_loopEV+0x1e8>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e2 e2       	ldi	r30, 0x22	; 34
     122:	fb e7       	ldi	r31, 0x7B	; 123
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	aa 3a       	cpi	r26, 0xAA	; 170
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	13 e0       	ldi	r17, 0x03	; 3
     136:	aa ea       	ldi	r26, 0xAA	; 170
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a0 36       	cpi	r26, 0x60	; 96
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 c0 00 	call	0x180	; 0x180 <main>
     148:	0c 94 88 39 	jmp	0x7310	; 0x7310 <exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <InitADC>:
 */
#include "adcutil.h"

void InitADC()
{
    ADMUX = (1 << REFS0); // For Aref=AVcc;
     150:	80 e4       	ldi	r24, 0x40	; 64
     152:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); //| (1 << ADPS0); //Rrescalar div factor =128
     154:	86 e8       	ldi	r24, 0x86	; 134
     156:	86 b9       	out	0x06, r24	; 6
    //ADCSRB=0;
}
     158:	08 95       	ret

0000015a <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
    //Select ADC Channel ch must be 0-7
    ch = ch & 0b00000111;
    ADMUX |= ch;
     15a:	97 b1       	in	r25, 0x07	; 7
     15c:	87 70       	andi	r24, 0x07	; 7
     15e:	89 2b       	or	r24, r25
     160:	87 b9       	out	0x07, r24	; 7

    //Start Single conversion
    ADCSRA |= (1 << ADSC);
     162:	36 9a       	sbi	0x06, 6	; 6

    //Wait for conversion to complete
    while (!(ADCSRA & (1 << ADIF)))
     164:	34 9b       	sbis	0x06, 4	; 6
     166:	fe cf       	rjmp	.-4      	; 0x164 <ReadADC+0xa>
    //Clear ADIF by writing one to it
    //Note you may be wondering why we have write one to clear it
    //This is standard way of clearing bits in io as said in datasheets.
    //The code writes '1' but it result in setting bit to '0' !!!

    ADCSRA |= (1 << ADIF);
     168:	34 9a       	sbi	0x06, 4	; 6

    return (ADC);
     16a:	24 b1       	in	r18, 0x04	; 4
     16c:	35 b1       	in	r19, 0x05	; 5
}
     16e:	c9 01       	movw	r24, r18
     170:	08 95       	ret

00000172 <fmuLoggerCache>:
#define FMI_FORWARDSPEED 7


void fmuLoggerCache(void *componentEnvironment, fmi2String instanceName,
                    fmi2Status status, fmi2String category, fmi2String message,
                    ...) {}
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	cf 91       	pop	r28
     17c:	df 91       	pop	r29
     17e:	08 95       	ret

00000180 <main>:

int main() {
     180:	8f 92       	push	r8
     182:	9f 92       	push	r9
     184:	af 92       	push	r10
     186:	bf 92       	push	r11
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	df 93       	push	r29
     196:	cf 93       	push	r28
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	2a 97       	sbiw	r28, 0x0a	; 10
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
  DDRB = 0xff;
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	87 bb       	out	0x17, r24	; 23
  DDRD = 0x00;
     1ac:	11 ba       	out	0x11, r1	; 17
  PORTD = 0xff;
     1ae:	82 bb       	out	0x12, r24	; 18
  PORTB = 0xff;
     1b0:	88 bb       	out	0x18, r24	; 24

  InitADC();
     1b2:	0e 94 a8 00 	call	0x150	; 0x150 <InitADC>

  fmi2CallbackFunctions callback = {&fmuLoggerCache, NULL, NULL, NULL, NULL};
     1b6:	de 01       	movw	r26, r28
     1b8:	11 96       	adiw	r26, 0x01	; 1
     1ba:	e4 e3       	ldi	r30, 0x34	; 52
     1bc:	f1 e0       	ldi	r31, 0x01	; 1
     1be:	8a e0       	ldi	r24, 0x0A	; 10
     1c0:	01 90       	ld	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	81 50       	subi	r24, 0x01	; 1
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x40>
 
  //systemInit();

  //Initialize rest of the buffer.

	fmiBuffer.realBuffer[FMI_LEFTVAL] = 0.0;
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	20 93 2e 03 	sts	0x032E, r18
     1d4:	30 93 2f 03 	sts	0x032F, r19
     1d8:	40 93 30 03 	sts	0x0330, r20
     1dc:	50 93 31 03 	sts	0x0331, r21
	fmiBuffer.realBuffer[FMI_RIGHTVAL] = 0.0;
     1e0:	20 93 32 03 	sts	0x0332, r18
     1e4:	30 93 33 03 	sts	0x0333, r19
     1e8:	40 93 34 03 	sts	0x0334, r20
     1ec:	50 93 35 03 	sts	0x0335, r21
  fmiBuffer.realBuffer[FMI_FORWARDROTATE] = 5.0;
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	a0 ea       	ldi	r26, 0xA0	; 160
     1f6:	b0 e4       	ldi	r27, 0x40	; 64
     1f8:	80 93 2a 03 	sts	0x032A, r24
     1fc:	90 93 2b 03 	sts	0x032B, r25
     200:	a0 93 2c 03 	sts	0x032C, r26
     204:	b0 93 2d 03 	sts	0x032D, r27
  fmiBuffer.realBuffer[FMI_SERVOLEFTOUT] = 0.0;
     208:	20 93 36 03 	sts	0x0336, r18
     20c:	30 93 37 03 	sts	0x0337, r19
     210:	40 93 38 03 	sts	0x0338, r20
     214:	50 93 39 03 	sts	0x0339, r21
  fmiBuffer.realBuffer[FMI_SERVORIGHTOUT] = 0.0;
     218:	20 93 3e 03 	sts	0x033E, r18
     21c:	30 93 3f 03 	sts	0x033F, r19
     220:	40 93 40 03 	sts	0x0340, r20
     224:	50 93 41 03 	sts	0x0341, r21
  fmiBuffer.realBuffer[FMI_BACKWARDROTATE] = 1.0;
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	a0 e8       	ldi	r26, 0x80	; 128
     22e:	bf e3       	ldi	r27, 0x3F	; 63
     230:	80 93 42 03 	sts	0x0342, r24
     234:	90 93 43 03 	sts	0x0343, r25
     238:	a0 93 44 03 	sts	0x0344, r26
     23c:	b0 93 45 03 	sts	0x0345, r27
  fmiBuffer.realBuffer[FMI_FORWARDSPEED] = 4.0;
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	a0 e8       	ldi	r26, 0x80	; 128
     246:	b0 e4       	ldi	r27, 0x40	; 64
     248:	80 93 46 03 	sts	0x0346, r24
     24c:	90 93 47 03 	sts	0x0347, r25
     250:	a0 93 48 03 	sts	0x0348, r26
     254:	b0 93 49 03 	sts	0x0349, r27
  
  fmi2Component instReturn = fmi2Instantiate("this system", fmi2CoSimulation, _FMU_GUID, "", &callback, fmi2True, fmi2True);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	4c e0       	ldi	r20, 0x0C	; 12
     260:	51 e0       	ldi	r21, 0x01	; 1
     262:	23 e3       	ldi	r18, 0x33	; 51
     264:	31 e0       	ldi	r19, 0x01	; 1
     266:	8e 01       	movw	r16, r28
     268:	0f 5f       	subi	r16, 0xFF	; 255
     26a:	1f 4f       	sbci	r17, 0xFF	; 255
     26c:	e1 e0       	ldi	r30, 0x01	; 1
     26e:	ee 2e       	mov	r14, r30
     270:	f1 2c       	mov	r15, r1
     272:	71 e0       	ldi	r23, 0x01	; 1
     274:	c7 2e       	mov	r12, r23
     276:	d1 2c       	mov	r13, r1
     278:	0e 94 0d 08 	call	0x101a	; 0x101a <fmi2Instantiate>

  if(instReturn == NULL)
     27c:	89 2b       	or	r24, r25
     27e:	a9 f4       	brne	.+42     	; 0x2aa <main+0x12a>
    PORTB &= ~(1 << PINB0);
    _delay_ms(200);
  }

  return 0;
}
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	2a 96       	adiw	r28, 0x0a	; 10
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
     290:	cf 91       	pop	r28
     292:	df 91       	pop	r29
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	ff 90       	pop	r15
     29a:	ef 90       	pop	r14
     29c:	df 90       	pop	r13
     29e:	cf 90       	pop	r12
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	08 95       	ret
  fmiBuffer.realBuffer[FMI_BACKWARDROTATE] = 1.0;
  fmiBuffer.realBuffer[FMI_FORWARDSPEED] = 4.0;
  
  fmi2Component instReturn = fmi2Instantiate("this system", fmi2CoSimulation, _FMU_GUID, "", &callback, fmi2True, fmi2True);

  if(instReturn == NULL)
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	af 2e       	mov	r10, r31
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	bf 2e       	mov	r11, r31
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	cf 2e       	mov	r12, r31
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	df 2e       	mov	r13, r31
     2bc:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2be:	80 e5       	ldi	r24, 0x50	; 80
     2c0:	88 2e       	mov	r8, r24
     2c2:	83 ec       	ldi	r24, 0xC3	; 195
     2c4:	98 2e       	mov	r9, r24
  double now = 0;
  double step = 0.01;

  while (true) {
    // hardware sync inputs to buffer
   fmiBuffer.realBuffer[FMI_LEFTVAL] = ReadADC(0);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0e 94 ad 00 	call	0x15a	; 0x15a <ReadADC>
     2cc:	a0 e0       	ldi	r26, 0x00	; 0
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	bc 01       	movw	r22, r24
     2d2:	cd 01       	movw	r24, r26
     2d4:	0e 94 ad 3a 	call	0x755a	; 0x755a <__floatunsisf>
     2d8:	60 93 2e 03 	sts	0x032E, r22
     2dc:	70 93 2f 03 	sts	0x032F, r23
     2e0:	80 93 30 03 	sts	0x0330, r24
     2e4:	90 93 31 03 	sts	0x0331, r25
fmiBuffer.realBuffer[FMI_RIGHTVAL] = ReadADC(1);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 ad 00 	call	0x15a	; 0x15a <ReadADC>
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	bc 01       	movw	r22, r24
     2f4:	cd 01       	movw	r24, r26
     2f6:	0e 94 ad 3a 	call	0x755a	; 0x755a <__floatunsisf>
     2fa:	60 93 32 03 	sts	0x0332, r22
     2fe:	70 93 33 03 	sts	0x0333, r23
     302:	80 93 34 03 	sts	0x0334, r24
     306:	90 93 35 03 	sts	0x0335, r25

	//Read switch values that indicate sensor threshold crossings.
	//fmiBuffer.realBuffer[FMI_LEFTVAL] = bit_is_set(PIND, PD0) ? 200.0 : 0.0; //ReadADC(0);
    //fmiBuffer.realBuffer[FMI_RIGHTVAL] = bit_is_set(PIND, PD1) ? 200.0 : 0.0;

    fmi2DoStep(NULL, now, step, false);
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	b6 01       	movw	r22, r12
     310:	a5 01       	movw	r20, r10
     312:	0a e0       	ldi	r16, 0x0A	; 10
     314:	17 ed       	ldi	r17, 0xD7	; 215
     316:	23 e2       	ldi	r18, 0x23	; 35
     318:	3c e3       	ldi	r19, 0x3C	; 60
     31a:	ee 24       	eor	r14, r14
     31c:	ff 24       	eor	r15, r15
     31e:	0e 94 e5 07 	call	0xfca	; 0xfca <fmi2DoStep>
	
    now = now + step;
     322:	c6 01       	movw	r24, r12
     324:	b5 01       	movw	r22, r10
     326:	2a e0       	ldi	r18, 0x0A	; 10
     328:	37 ed       	ldi	r19, 0xD7	; 215
     32a:	43 e2       	ldi	r20, 0x23	; 35
     32c:	5c e3       	ldi	r21, 0x3C	; 60
     32e:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
     332:	5b 01       	movw	r10, r22
     334:	6c 01       	movw	r12, r24

    // sync buffer with hardware
    if (fmiBuffer.realBuffer[FMI_SERVOLEFTOUT] >= 4) {
     336:	60 91 36 03 	lds	r22, 0x0336
     33a:	70 91 37 03 	lds	r23, 0x0337
     33e:	80 91 38 03 	lds	r24, 0x0338
     342:	90 91 39 03 	lds	r25, 0x0339
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e8       	ldi	r20, 0x80	; 128
     34c:	50 e4       	ldi	r21, 0x40	; 64
     34e:	0e 94 b2 3b 	call	0x7764	; 0x7764 <__gesf2>
     352:	88 23       	and	r24, r24
     354:	14 f0       	brlt	.+4      	; 0x35a <main+0x1da>
		PORTB &= ~(1 << PINB3);
     356:	c3 98       	cbi	0x18, 3	; 24
     358:	01 c0       	rjmp	.+2      	; 0x35c <main+0x1dc>
    } else {
      PORTB |= 1 << PINB3;
     35a:	c3 9a       	sbi	0x18, 3	; 24
    }

	if (fmiBuffer.realBuffer[FMI_SERVORIGHTOUT] <= -4) {
     35c:	60 91 3e 03 	lds	r22, 0x033E
     360:	70 91 3f 03 	lds	r23, 0x033F
     364:	80 91 40 03 	lds	r24, 0x0340
     368:	90 91 41 03 	lds	r25, 0x0341
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e8       	ldi	r20, 0x80	; 128
     372:	50 ec       	ldi	r21, 0xC0	; 192
     374:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
     378:	18 16       	cp	r1, r24
     37a:	14 f0       	brlt	.+4      	; 0x380 <main+0x200>
		PORTB &= ~(1 << PINB4);
     37c:	c4 98       	cbi	0x18, 4	; 24
     37e:	01 c0       	rjmp	.+2      	; 0x382 <main+0x202>
    } else {
      PORTB |= 1 << PINB4;
     380:	c4 9a       	sbi	0x18, 4	; 24
    }

	if (bit_is_set(PIND, PD0)) {
     382:	80 9b       	sbis	0x10, 0	; 16
     384:	02 c0       	rjmp	.+4      	; 0x38a <main+0x20a>
		PORTB &= ~(1 << PINB5);
     386:	c5 98       	cbi	0x18, 5	; 24
     388:	01 c0       	rjmp	.+2      	; 0x38c <main+0x20c>
    } else {
      PORTB |= 1 << PINB5;
     38a:	c5 9a       	sbi	0x18, 5	; 24
    }

	if (bit_is_set(PIND, PD1)) {
     38c:	81 9b       	sbis	0x10, 1	; 16
     38e:	02 c0       	rjmp	.+4      	; 0x394 <main+0x214>
		PORTB &= ~(1 << PINB6);
     390:	c6 98       	cbi	0x18, 6	; 24
     392:	01 c0       	rjmp	.+2      	; 0x396 <main+0x216>
    } else {
      PORTB |= 1 << PINB6;
     394:	c6 9a       	sbi	0x18, 6	; 24
    }

    // alive indicator
    PORTB |= (1 << PINB0);
     396:	c0 9a       	sbi	0x18, 0	; 24
     398:	c4 01       	movw	r24, r8
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x21a>
    _delay_ms(200);
    PORTB &= ~(1 << PINB0);
     39e:	c0 98       	cbi	0x18, 0	; 24
     3a0:	c4 01       	movw	r24, r8
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x222>
     3a6:	8f cf       	rjmp	.-226    	; 0x2c6 <main+0x146>

000003a8 <BoolPort_const_init>:


 void BoolPort_const_init()	{

return ;
}
     3a8:	08 95       	ret

000003aa <BoolPort_const_shutdown>:


 void BoolPort_const_shutdown()	{

return ;
}
     3aa:	08 95       	ret

000003ac <BoolPort_static_init>:


 void BoolPort_static_init()	{

return ;
}
     3ac:	08 95       	ret

000003ae <BoolPort_static_shutdown>:


 void BoolPort_static_shutdown()	{

return ;
}
     3ae:	08 95       	ret

000003b0 <_Z8getValueEV>:

/* Fmi.vdmrt 63:12 */
 static  TVP _Z8getValueEV(BoolPortCLASS this)	{
/* Fmi.vdmrt 64:26 */
TVP ret_7 = vdmCloneGC(GET_FIELD_PTR_GC(BoolPort, BoolPort, this, value), NULL)
;
     3b0:	fc 01       	movw	r30, r24
     3b2:	86 85       	ldd	r24, Z+14	; 0x0e
     3b4:	97 85       	ldd	r25, Z+15	; 0x0f
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
/* Fmi.vdmrt 64:19 */
return ret_7;
}
     3c6:	08 95       	ret

000003c8 <Port__Z8getValueEV>:
 static  TVP Port__Z8getValueEV(PortCLASS base)	{

BoolPortCLASS this = CLASS_DOWNCAST(Port, BoolPort, base)
;

return _Z8getValueEV(this);
     3c8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_Z8getValueEV>
}
     3cc:	08 95       	ret

000003ce <BoolPort_free_fields>:
 *
 --------------------------------- */

void BoolPort_free_fields(struct BoolPort *this)
{
		vdmFree(this->m_BoolPort_value);
     3ce:	fc 01       	movw	r30, r24
     3d0:	86 85       	ldd	r24, Z+14	; 0x0e
     3d2:	97 85       	ldd	r25, Z+15	; 0x0f
     3d4:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
     3d8:	08 95       	ret

000003da <BoolPort_free>:

static void BoolPort_free(struct BoolPort *this)
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	ec 01       	movw	r28, r24
	--this->_BoolPort_refs;
     3e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     3e2:	9d 85       	ldd	r25, Y+13	; 0x0d
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	9d 87       	std	Y+13, r25	; 0x0d
     3e8:	8c 87       	std	Y+12, r24	; 0x0c
	if (this->_BoolPort_refs < 1)
     3ea:	89 2b       	or	r24, r25
     3ec:	39 f4       	brne	.+14     	; 0x3fc <BoolPort_free+0x22>
 *
 --------------------------------- */

void BoolPort_free_fields(struct BoolPort *this)
{
		vdmFree(this->m_BoolPort_value);
     3ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     3f0:	9f 85       	ldd	r25, Y+15	; 0x0f
     3f2:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
{
	--this->_BoolPort_refs;
	if (this->_BoolPort_refs < 1)
	{
		BoolPort_free_fields(this);
		free(this);
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <_Z8setValueEB>:
return ret_6;
}


/* Fmi.vdmrt 60:12 */
 static  void _Z8setValueEB(BoolPortCLASS this, TVP v)	{
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	8c 01       	movw	r16, r24
     40c:	cb 01       	movw	r24, r22
/* Fmi.vdmrt 61:27 */
TVP field_tmp_3 = vdmCloneGC(v, NULL)
;
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     416:	7c 01       	movw	r14, r24

SET_FIELD_PTR(BoolPort, BoolPort, this, value, field_tmp_3);
     418:	f8 01       	movw	r30, r16
     41a:	86 85       	ldd	r24, Z+14	; 0x0e
     41c:	97 85       	ldd	r25, Z+15	; 0x0f
     41e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
     422:	c7 01       	movw	r24, r14
     424:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
     428:	f8 01       	movw	r30, r16
     42a:	97 87       	std	Z+15, r25	; 0x0f
     42c:	86 87       	std	Z+14, r24	; 0x0e

vdmFree(field_tmp_3);
     42e:	c7 01       	movw	r24, r14
     430:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
}
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	08 95       	ret

0000043e <BoolPort_Constructor>:
 *
 --------------------------------- */
 
 
BoolPortCLASS BoolPort_Constructor(BoolPortCLASS this_ptr)
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24

	if(this_ptr==NULL)
     444:	00 97       	sbiw	r24, 0x00	; 0
     446:	39 f4       	brne	.+14     	; 0x456 <BoolPort_Constructor+0x18>
	{
		this_ptr = (BoolPortCLASS) malloc(sizeof(struct BoolPort));
     448:	82 e1       	ldi	r24, 0x12	; 18
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
     450:	ec 01       	movw	r28, r24
	}

	if(this_ptr!=NULL)
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	69 f1       	breq	.+90     	; 0x4b0 <BoolPort_Constructor+0x72>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,BoolPort,Port));
     456:	ce 01       	movw	r24, r28
     458:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Port_Constructor>

					if(! g_VTableArrayForBoolPort_Override_Port[0].pFunc)
     45c:	80 91 ae 02 	lds	r24, 0x02AE
     460:	90 91 af 02 	lds	r25, 0x02AF
     464:	89 2b       	or	r24, r25
     466:	89 f4       	brne	.+34     	; 0x48a <BoolPort_Constructor+0x4c>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForBoolPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
     468:	aa ea       	ldi	r26, 0xAA	; 170
     46a:	b2 e0       	ldi	r27, 0x02	; 2
     46c:	88 81       	ld	r24, Y
     46e:	99 81       	ldd	r25, Y+1	; 0x01
     470:	9c 01       	movw	r18, r24
     472:	f9 01       	movw	r30, r18
     474:	82 e1       	ldi	r24, 0x12	; 18
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	81 50       	subi	r24, 0x01	; 1
     47c:	e1 f7       	brne	.-8      	; 0x476 <BoolPort_Constructor+0x38>
				
				/*  install overrides  */
									g_VTableArrayForBoolPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
     47e:	84 ee       	ldi	r24, 0xE4	; 228
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	90 93 b5 02 	sts	0x02B5, r25
     486:	80 93 b4 02 	sts	0x02B4, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForBoolPort_Override_Port;
     48a:	8a ea       	ldi	r24, 0xAA	; 170
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	99 83       	std	Y+1, r25	; 0x01
     490:	88 83       	st	Y, r24
				
		
		/*  BoolPort init  */
		this_ptr->_BoolPort_id = CLASS_ID_BoolPort_ID;
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9b 87       	std	Y+11, r25	; 0x0b
     498:	8a 87       	std	Y+10, r24	; 0x0a
		this_ptr->_BoolPort_refs = 0;
     49a:	1d 86       	std	Y+13, r1	; 0x0d
     49c:	1c 86       	std	Y+12, r1	; 0x0c
		this_ptr->_BoolPort_pVTable=VTableArrayForBoolPort;
     49e:	8e e3       	ldi	r24, 0x3E	; 62
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	99 87       	std	Y+9, r25	; 0x09
     4a4:	88 87       	std	Y+8, r24	; 0x08
 

 static  TVP _Z17fieldInitializer4EV(BoolPortCLASS this)	{
/* Fmi.vdmrt 54:18 */
TVP ret_6 = newBool(false)
;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
		/*  BoolPort init  */
		this_ptr->_BoolPort_id = CLASS_ID_BoolPort_ID;
		this_ptr->_BoolPort_refs = 0;
		this_ptr->_BoolPort_pVTable=VTableArrayForBoolPort;

				this_ptr->m_BoolPort_value= _Z17fieldInitializer4EV(this_ptr);
     4ac:	9f 87       	std	Y+15, r25	; 0x0f
     4ae:	8e 87       	std	Y+14, r24	; 0x0e
			}

	return this_ptr;
}
     4b0:	ce 01       	movw	r24, r28
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
	BoolPortCLASS ptr=BoolPort_Constructor(NULL);
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 1f 02 	call	0x43e	; 0x43e <BoolPort_Constructor>
     4c0:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_BoolPort_id, &ptr->_BoolPort_refs, (freeVdmClassFunction)&BoolPort_free, ptr)});
     4c2:	bc 01       	movw	r22, r24
     4c4:	64 5f       	subi	r22, 0xF4	; 244
     4c6:	7f 4f       	sbci	r23, 0xFF	; 255
     4c8:	82 85       	ldd	r24, Z+10	; 0x0a
     4ca:	93 85       	ldd	r25, Z+11	; 0x0b
     4cc:	4d ee       	ldi	r20, 0xED	; 237
     4ce:	51 e0       	ldi	r21, 0x01	; 1
     4d0:	9f 01       	movw	r18, r30
     4d2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	BoolPortCLASS ptr=BoolPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
     4e0:	8b e0       	ldi	r24, 0x0B	; 11
     4e2:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
			{	.ptr=newClassValue(ptr->_BoolPort_id, &ptr->_BoolPort_refs, (freeVdmClassFunction)&BoolPort_free, ptr)});
}
     4e6:	08 95       	ret

000004e8 <_Z8BoolPortEV>:
 TVP _Z8BoolPortEV(BoolPortCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
     4e8:	89 2b       	or	r24, r25
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <_Z8BoolPortEV+0xa>
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <_Z8BoolPortEV+0x10>
	
	{

__buf = new();
     4f2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <new>
     4f6:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, BoolPort);
}
;

return __buf;
}
     4f8:	c9 01       	movw	r24, r18
     4fa:	08 95       	ret

000004fc <_Z8BoolPortEB>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 57:12 */
 TVP _Z8BoolPortEB(BoolPortCLASS this, TVP v)	{
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	dc 01       	movw	r26, r24
     506:	8b 01       	movw	r16, r22

TVP __buf = NULL
;

if ( this == NULL )
     508:	00 97       	sbiw	r24, 0x00	; 0
     50a:	19 f0       	breq	.+6      	; 0x512 <_Z8BoolPortEB+0x16>
     50c:	c0 e0       	ldi	r28, 0x00	; 0
     50e:	d0 e0       	ldi	r29, 0x00	; 0
     510:	07 c0       	rjmp	.+14     	; 0x520 <_Z8BoolPortEB+0x24>
	
	{

__buf = new();
     512:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <new>
     516:	ec 01       	movw	r28, r24

this = TO_CLASS_PTR(__buf, BoolPort);
     518:	eb 81       	ldd	r30, Y+3	; 0x03
     51a:	fc 81       	ldd	r31, Y+4	; 0x04
     51c:	a0 81       	ld	r26, Z
     51e:	b1 81       	ldd	r27, Z+1	; 0x01
}
;
/* Fmi.vdmrt 58:18 */
CALL_FUNC_PTR(BoolPort, BoolPort, this, CLASS_BoolPort__Z8setValueEB, v);
     520:	18 96       	adiw	r26, 0x08	; 8
     522:	ed 91       	ld	r30, X+
     524:	fc 91       	ld	r31, X
     526:	19 97       	sbiw	r26, 0x09	; 9
     528:	02 84       	ldd	r0, Z+10	; 0x0a
     52a:	f3 85       	ldd	r31, Z+11	; 0x0b
     52c:	e0 2d       	mov	r30, r0
     52e:	cd 01       	movw	r24, r26
     530:	b8 01       	movw	r22, r16
     532:	09 95       	icall

return __buf;
}
     534:	ce 01       	movw	r24, r28
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <Controller_static_init>:


 void Controller_static_init()	{

return ;
}
     540:	08 95       	ret

00000542 <Controller_static_shutdown>:


 void Controller_static_shutdown()	{

return ;
}
     542:	08 95       	ret

00000544 <Controller_const_shutdown>:



 void Controller_const_shutdown()	{

vdmFree(numFields_3);
     544:	80 91 bc 02 	lds	r24, 0x02BC
     548:	90 91 bd 02 	lds	r25, 0x02BD
     54c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
     550:	08 95       	ret

00000552 <Controller_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void Controller_free_fields(struct Controller *this)
{
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	8c 01       	movw	r16, r24
			vdmFree(this->m_Controller_servoLeft);
     558:	fc 01       	movw	r30, r24
     55a:	86 81       	ldd	r24, Z+6	; 0x06
     55c:	97 81       	ldd	r25, Z+7	; 0x07
     55e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(this->m_Controller_servoRight);
     562:	f8 01       	movw	r30, r16
     564:	80 85       	ldd	r24, Z+8	; 0x08
     566:	91 85       	ldd	r25, Z+9	; 0x09
     568:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(this->m_Controller_sensorRightVal);
     56c:	f8 01       	movw	r30, r16
     56e:	82 85       	ldd	r24, Z+10	; 0x0a
     570:	93 85       	ldd	r25, Z+11	; 0x0b
     572:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(this->m_Controller_sensorLeftVal);
     576:	f8 01       	movw	r30, r16
     578:	84 85       	ldd	r24, Z+12	; 0x0c
     57a:	95 85       	ldd	r25, Z+13	; 0x0d
     57c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	08 95       	ret

00000586 <Controller_free>:

static void Controller_free(struct Controller *this)
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
	--this->_Controller_refs;
     58c:	8c 81       	ldd	r24, Y+4	; 0x04
     58e:	9d 81       	ldd	r25, Y+5	; 0x05
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	9d 83       	std	Y+5, r25	; 0x05
     594:	8c 83       	std	Y+4, r24	; 0x04
	if (this->_Controller_refs < 1)
     596:	89 2b       	or	r24, r25
     598:	31 f4       	brne	.+12     	; 0x5a6 <Controller_free+0x20>
	{
		Controller_free_fields(this);
     59a:	ce 01       	movw	r24, r28
     59c:	0e 94 a9 02 	call	0x552	; 0x552 <Controller_free_fields>
		free(this);
     5a0:	ce 01       	movw	r24, r28
     5a2:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <Controller_Constructor>:
 *
 --------------------------------- */
 
 
ControllerCLASS Controller_Constructor(ControllerCLASS this_ptr)
{
     5ac:	fc 01       	movw	r30, r24

	if(this_ptr==NULL)
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	39 f4       	brne	.+14     	; 0x5c0 <Controller_Constructor+0x14>
	{
		this_ptr = (ControllerCLASS) malloc(sizeof(struct Controller));
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
     5ba:	fc 01       	movw	r30, r24
	}

	if(this_ptr!=NULL)
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	91 f0       	breq	.+36     	; 0x5e4 <Controller_Constructor+0x38>
	{
	
			
		/*  Controller init  */
		this_ptr->_Controller_id = CLASS_ID_Controller_ID;
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	93 83       	std	Z+3, r25	; 0x03
     5c6:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_Controller_refs = 0;
     5c8:	15 82       	std	Z+5, r1	; 0x05
     5ca:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_Controller_pVTable=VTableArrayForController;
     5cc:	86 e5       	ldi	r24, 0x56	; 86
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	91 83       	std	Z+1, r25	; 0x01
     5d2:	80 83       	st	Z, r24

							this_ptr->m_Controller_servoLeft= NULL ;
     5d4:	17 82       	std	Z+7, r1	; 0x07
     5d6:	16 82       	std	Z+6, r1	; 0x06
						this_ptr->m_Controller_servoRight= NULL ;
     5d8:	11 86       	std	Z+9, r1	; 0x09
     5da:	10 86       	std	Z+8, r1	; 0x08
						this_ptr->m_Controller_sensorRightVal= NULL ;
     5dc:	13 86       	std	Z+11, r1	; 0x0b
     5de:	12 86       	std	Z+10, r1	; 0x0a
						this_ptr->m_Controller_sensorLeftVal= NULL ;
     5e0:	15 86       	std	Z+13, r1	; 0x0d
     5e2:	14 86       	std	Z+12, r1	; 0x0c
			}

	return this_ptr;
}
     5e4:	cf 01       	movw	r24, r30
     5e6:	08 95       	ret

000005e8 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
	ControllerCLASS ptr=Controller_Constructor(NULL);
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 d6 02 	call	0x5ac	; 0x5ac <Controller_Constructor>
     5f0:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_Controller_id, &ptr->_Controller_refs, (freeVdmClassFunction)&Controller_free, ptr)});
     5f2:	bc 01       	movw	r22, r24
     5f4:	6c 5f       	subi	r22, 0xFC	; 252
     5f6:	7f 4f       	sbci	r23, 0xFF	; 255
     5f8:	82 81       	ldd	r24, Z+2	; 0x02
     5fa:	93 81       	ldd	r25, Z+3	; 0x03
     5fc:	43 ec       	ldi	r20, 0xC3	; 195
     5fe:	52 e0       	ldi	r21, 0x02	; 2
     600:	9f 01       	movw	r18, r30
     602:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	ControllerCLASS ptr=Controller_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
     610:	8b e0       	ldi	r24, 0x0B	; 11
     612:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
			{	.ptr=newClassValue(ptr->_Controller_id, &ptr->_Controller_refs, (freeVdmClassFunction)&Controller_free, ptr)});
}
     616:	08 95       	ret

00000618 <_Z10ControllerEV>:
 TVP _Z10ControllerEV(ControllerCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
     618:	89 2b       	or	r24, r25
     61a:	19 f0       	breq	.+6      	; 0x622 <_Z10ControllerEV+0xa>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	03 c0       	rjmp	.+6      	; 0x628 <_Z10ControllerEV+0x10>
	
	{

__buf = new();
     622:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <new>
     626:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, Controller);
}
;

return __buf;
}
     628:	c9 01       	movw	r24, r18
     62a:	08 95       	ret

0000062c <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor>:
 *
 --------------------------------- */ 
 

    /* Controller.vdmrt 11:12 */
 TVP _Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor(ControllerCLASS this, TVP servL, TVP servR, TVP sensRightVal, TVP sensLeftVal)	{
     62c:	6f 92       	push	r6
     62e:	7f 92       	push	r7
     630:	8f 92       	push	r8
     632:	9f 92       	push	r9
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
     64a:	6b 01       	movw	r12, r22
     64c:	5a 01       	movw	r10, r20
     64e:	49 01       	movw	r8, r18
     650:	38 01       	movw	r6, r16

TVP __buf = NULL
;

if ( this == NULL )
     652:	00 97       	sbiw	r24, 0x00	; 0
     654:	19 f0       	breq	.+6      	; 0x65c <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor+0x30>
     656:	ee 24       	eor	r14, r14
     658:	ff 24       	eor	r15, r15
     65a:	0a c0       	rjmp	.+20     	; 0x670 <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor+0x44>
	
	{

__buf = new();
     65c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <new>
     660:	7c 01       	movw	r14, r24

this = TO_CLASS_PTR(__buf, Controller);
     662:	dc 01       	movw	r26, r24
     664:	13 96       	adiw	r26, 0x03	; 3
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	14 97       	sbiw	r26, 0x04	; 4
     66c:	c0 81       	ld	r28, Z
     66e:	d1 81       	ldd	r29, Z+1	; 0x01
;

{
/* Controller.vdmrt 14:19 */
TVP field_tmp_6 = vdmCloneGC(servL, NULL)
;
     670:	c6 01       	movw	r24, r12
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     67a:	8c 01       	movw	r16, r24

SET_FIELD_PTR(Controller, Controller, this, servoLeft, field_tmp_6);
     67c:	8e 81       	ldd	r24, Y+6	; 0x06
     67e:	9f 81       	ldd	r25, Y+7	; 0x07
     680:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
     684:	c8 01       	movw	r24, r16
     686:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
     68a:	9f 83       	std	Y+7, r25	; 0x07
     68c:	8e 83       	std	Y+6, r24	; 0x06

vdmFree(field_tmp_6);
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
;

{
/* Controller.vdmrt 15:18 */
TVP field_tmp_7 = vdmCloneGC(servR, NULL)
;
     694:	c5 01       	movw	r24, r10
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     69e:	8c 01       	movw	r16, r24

SET_FIELD_PTR(Controller, Controller, this, servoRight, field_tmp_7);
     6a0:	88 85       	ldd	r24, Y+8	; 0x08
     6a2:	99 85       	ldd	r25, Y+9	; 0x09
     6a4:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
     6a8:	c8 01       	movw	r24, r16
     6aa:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
     6ae:	99 87       	std	Y+9, r25	; 0x09
     6b0:	88 87       	std	Y+8, r24	; 0x08

vdmFree(field_tmp_7);
     6b2:	c8 01       	movw	r24, r16
     6b4:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
;

{
/* Controller.vdmrt 16:24 */
TVP field_tmp_8 = vdmCloneGC(sensRightVal, NULL)
;
     6b8:	c4 01       	movw	r24, r8
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     6c2:	8c 01       	movw	r16, r24

SET_FIELD_PTR(Controller, Controller, this, sensorRightVal, field_tmp_8);
     6c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c6:	9b 85       	ldd	r25, Y+11	; 0x0b
     6c8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
     6cc:	c8 01       	movw	r24, r16
     6ce:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
     6d2:	9b 87       	std	Y+11, r25	; 0x0b
     6d4:	8a 87       	std	Y+10, r24	; 0x0a

vdmFree(field_tmp_8);
     6d6:	c8 01       	movw	r24, r16
     6d8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
;

{
/* Controller.vdmrt 17:21 */
TVP field_tmp_9 = vdmCloneGC(sensLeftVal, NULL)
;
     6dc:	c3 01       	movw	r24, r6
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     6e6:	8c 01       	movw	r16, r24

SET_FIELD_PTR(Controller, Controller, this, sensorLeftVal, field_tmp_9);
     6e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     6ea:	9d 85       	ldd	r25, Y+13	; 0x0d
     6ec:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
     6f0:	c8 01       	movw	r24, r16
     6f2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
     6f6:	9d 87       	std	Y+13, r25	; 0x0d
     6f8:	8c 87       	std	Y+12, r24	; 0x0c

vdmFree(field_tmp_9);
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
}
;

return __buf;
}
     700:	c7 01       	movw	r24, r14
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	bf 90       	pop	r11
     714:	af 90       	pop	r10
     716:	9f 90       	pop	r9
     718:	8f 90       	pop	r8
     71a:	7f 90       	pop	r7
     71c:	6f 90       	pop	r6
     71e:	08 95       	ret

00000720 <_Z12control_loopEV>:
return ret_12;
}


/* Controller.vdmrt 20:12 */
 static  void _Z12control_loopEV(ControllerCLASS this)	{
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24

TVP andResult_1 = newBoolGC(false, NULL)
;
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     738:	7c 01       	movw	r14, r24

if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     73a:	8a 85       	ldd	r24, Y+10	; 0x0a
     73c:	9b 85       	ldd	r25, Y+11	; 0x0b
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     746:	dc 01       	movw	r26, r24
     748:	13 96       	adiw	r26, 0x03	; 3
     74a:	ed 91       	ld	r30, X+
     74c:	fc 91       	ld	r31, X
     74e:	14 97       	sbiw	r26, 0x04	; 4
     750:	01 90       	ld	r0, Z+
     752:	f0 81       	ld	r31, Z
     754:	e0 2d       	mov	r30, r0
     756:	01 90       	ld	r0, Z+
     758:	f0 81       	ld	r31, Z
     75a:	e0 2d       	mov	r30, r0
     75c:	02 85       	ldd	r16, Z+10	; 0x0a
     75e:	13 85       	ldd	r17, Z+11	; 0x0b
     760:	8a 85       	ldd	r24, Y+10	; 0x0a
     762:	9b 85       	ldd	r25, Y+11	; 0x0b
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     76c:	dc 01       	movw	r26, r24
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	14 97       	sbiw	r26, 0x04	; 4
     776:	80 81       	ld	r24, Z
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	f8 01       	movw	r30, r16
     77c:	09 95       	icall
     77e:	8c 01       	movw	r16, r24
     780:	82 e3       	ldi	r24, 0x32	; 50
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     78c:	bc 01       	movw	r22, r24
     78e:	c8 01       	movw	r24, r16
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	0e 94 28 18 	call	0x3050	; 0x3050 <vdmLessThanGC>
     798:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     79c:	88 23       	and	r24, r24
     79e:	c9 f1       	breq	.+114    	; 0x812 <_Z12control_loopEV+0xf2>
	
	if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     7a0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7a2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     7ac:	dc 01       	movw	r26, r24
     7ae:	13 96       	adiw	r26, 0x03	; 3
     7b0:	ed 91       	ld	r30, X+
     7b2:	fc 91       	ld	r31, X
     7b4:	14 97       	sbiw	r26, 0x04	; 4
     7b6:	01 90       	ld	r0, Z+
     7b8:	f0 81       	ld	r31, Z
     7ba:	e0 2d       	mov	r30, r0
     7bc:	01 90       	ld	r0, Z+
     7be:	f0 81       	ld	r31, Z
     7c0:	e0 2d       	mov	r30, r0
     7c2:	02 85       	ldd	r16, Z+10	; 0x0a
     7c4:	13 85       	ldd	r17, Z+11	; 0x0b
     7c6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     7d2:	dc 01       	movw	r26, r24
     7d4:	13 96       	adiw	r26, 0x03	; 3
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	14 97       	sbiw	r26, 0x04	; 4
     7dc:	80 81       	ld	r24, Z
     7de:	91 81       	ldd	r25, Z+1	; 0x01
     7e0:	f8 01       	movw	r30, r16
     7e2:	09 95       	icall
     7e4:	8c 01       	movw	r16, r24
     7e6:	82 e3       	ldi	r24, 0x32	; 50
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     7f2:	bc 01       	movw	r22, r24
     7f4:	c8 01       	movw	r24, r16
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	0e 94 28 18 	call	0x3050	; 0x3050 <vdmLessThanGC>
     7fe:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     802:	88 23       	and	r24, r24
     804:	31 f0       	breq	.+12     	; 0x812 <_Z12control_loopEV+0xf2>
	
	andResult_1 = newBoolGC(true, NULL);;;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     810:	7c 01       	movw	r14, r24
/* Controller.vdmrt 23:9 */
if ( toBool(andResult_1) )
     812:	c7 01       	movw	r24, r14
     814:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     818:	88 23       	and	r24, r24
     81a:	09 f4       	brne	.+2      	; 0x81e <_Z12control_loopEV+0xfe>
     81c:	70 c0       	rjmp	.+224    	; 0x8fe <_Z12control_loopEV+0x1de>
	/* Controller.vdmrt 24:14 */
	{
/* Controller.vdmrt 25:33 */
TVP embeding_1 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardSpeed, CLASS_RealPort__Z8getValueEV), NULL)
;
     81e:	e0 91 c8 02 	lds	r30, 0x02C8
     822:	f0 91 c9 02 	lds	r31, 0x02C9
     826:	03 80       	ldd	r0, Z+3	; 0x03
     828:	f4 81       	ldd	r31, Z+4	; 0x04
     82a:	e0 2d       	mov	r30, r0
     82c:	a0 81       	ld	r26, Z
     82e:	b1 81       	ldd	r27, Z+1	; 0x01
     830:	18 96       	adiw	r26, 0x08	; 8
     832:	ed 91       	ld	r30, X+
     834:	fc 91       	ld	r31, X
     836:	19 97       	sbiw	r26, 0x09	; 9
     838:	00 88       	ldd	r0, Z+16	; 0x10
     83a:	f1 89       	ldd	r31, Z+17	; 0x11
     83c:	e0 2d       	mov	r30, r0
     83e:	cd 01       	movw	r24, r26
     840:	09 95       	icall
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <vdmMinusGC>
     84a:	7c 01       	movw	r14, r24
/* Controller.vdmrt 25:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_1);
     84c:	88 85       	ldd	r24, Y+8	; 0x08
     84e:	99 85       	ldd	r25, Y+9	; 0x09
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     858:	dc 01       	movw	r26, r24
     85a:	13 96       	adiw	r26, 0x03	; 3
     85c:	ed 91       	ld	r30, X+
     85e:	fc 91       	ld	r31, X
     860:	14 97       	sbiw	r26, 0x04	; 4
     862:	01 90       	ld	r0, Z+
     864:	f0 81       	ld	r31, Z
     866:	e0 2d       	mov	r30, r0
     868:	01 90       	ld	r0, Z+
     86a:	f0 81       	ld	r31, Z
     86c:	e0 2d       	mov	r30, r0
     86e:	02 85       	ldd	r16, Z+10	; 0x0a
     870:	13 85       	ldd	r17, Z+11	; 0x0b
     872:	88 85       	ldd	r24, Y+8	; 0x08
     874:	99 85       	ldd	r25, Y+9	; 0x09
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     87e:	dc 01       	movw	r26, r24
     880:	13 96       	adiw	r26, 0x03	; 3
     882:	ed 91       	ld	r30, X+
     884:	fc 91       	ld	r31, X
     886:	14 97       	sbiw	r26, 0x04	; 4
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	b7 01       	movw	r22, r14
     88e:	f8 01       	movw	r30, r16
     890:	09 95       	icall
/* Controller.vdmrt 26:32 */
TVP embeding_2 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardSpeed, CLASS_RealPort__Z8getValueEV)
;
     892:	e0 91 c8 02 	lds	r30, 0x02C8
     896:	f0 91 c9 02 	lds	r31, 0x02C9
     89a:	03 80       	ldd	r0, Z+3	; 0x03
     89c:	f4 81       	ldd	r31, Z+4	; 0x04
     89e:	e0 2d       	mov	r30, r0
     8a0:	a0 81       	ld	r26, Z
     8a2:	b1 81       	ldd	r27, Z+1	; 0x01
     8a4:	18 96       	adiw	r26, 0x08	; 8
     8a6:	ed 91       	ld	r30, X+
     8a8:	fc 91       	ld	r31, X
     8aa:	19 97       	sbiw	r26, 0x09	; 9
     8ac:	00 88       	ldd	r0, Z+16	; 0x10
     8ae:	f1 89       	ldd	r31, Z+17	; 0x11
     8b0:	e0 2d       	mov	r30, r0
     8b2:	cd 01       	movw	r24, r26
     8b4:	09 95       	icall
     8b6:	7c 01       	movw	r14, r24
/* Controller.vdmrt 26:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_2);
     8b8:	8e 81       	ldd	r24, Y+6	; 0x06
     8ba:	9f 81       	ldd	r25, Y+7	; 0x07
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     8c4:	dc 01       	movw	r26, r24
     8c6:	13 96       	adiw	r26, 0x03	; 3
     8c8:	ed 91       	ld	r30, X+
     8ca:	fc 91       	ld	r31, X
     8cc:	14 97       	sbiw	r26, 0x04	; 4
     8ce:	01 90       	ld	r0, Z+
     8d0:	f0 81       	ld	r31, Z
     8d2:	e0 2d       	mov	r30, r0
     8d4:	01 90       	ld	r0, Z+
     8d6:	f0 81       	ld	r31, Z
     8d8:	e0 2d       	mov	r30, r0
     8da:	02 85       	ldd	r16, Z+10	; 0x0a
     8dc:	13 85       	ldd	r17, Z+11	; 0x0b
     8de:	8e 81       	ldd	r24, Y+6	; 0x06
     8e0:	9f 81       	ldd	r25, Y+7	; 0x07
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     8ea:	dc 01       	movw	r26, r24
     8ec:	13 96       	adiw	r26, 0x03	; 3
     8ee:	ed 91       	ld	r30, X+
     8f0:	fc 91       	ld	r31, X
     8f2:	14 97       	sbiw	r26, 0x04	; 4
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	b7 01       	movw	r22, r14
     8fa:	f8 01       	movw	r30, r16
     8fc:	09 95       	icall
}
;

TVP andResult_2 = newBoolGC(false, NULL)
;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     908:	7c 01       	movw	r14, r24

if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     90a:	8a 85       	ldd	r24, Y+10	; 0x0a
     90c:	9b 85       	ldd	r25, Y+11	; 0x0b
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     916:	dc 01       	movw	r26, r24
     918:	13 96       	adiw	r26, 0x03	; 3
     91a:	ed 91       	ld	r30, X+
     91c:	fc 91       	ld	r31, X
     91e:	14 97       	sbiw	r26, 0x04	; 4
     920:	01 90       	ld	r0, Z+
     922:	f0 81       	ld	r31, Z
     924:	e0 2d       	mov	r30, r0
     926:	01 90       	ld	r0, Z+
     928:	f0 81       	ld	r31, Z
     92a:	e0 2d       	mov	r30, r0
     92c:	02 85       	ldd	r16, Z+10	; 0x0a
     92e:	13 85       	ldd	r17, Z+11	; 0x0b
     930:	8a 85       	ldd	r24, Y+10	; 0x0a
     932:	9b 85       	ldd	r25, Y+11	; 0x0b
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     93c:	dc 01       	movw	r26, r24
     93e:	13 96       	adiw	r26, 0x03	; 3
     940:	ed 91       	ld	r30, X+
     942:	fc 91       	ld	r31, X
     944:	14 97       	sbiw	r26, 0x04	; 4
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	f8 01       	movw	r30, r16
     94c:	09 95       	icall
     94e:	8c 01       	movw	r16, r24
     950:	82 e3       	ldi	r24, 0x32	; 50
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     95c:	bc 01       	movw	r22, r24
     95e:	c8 01       	movw	r24, r16
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	0e 94 28 18 	call	0x3050	; 0x3050 <vdmLessThanGC>
     968:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     96c:	88 23       	and	r24, r24
     96e:	c9 f1       	breq	.+114    	; 0x9e2 <_Z12control_loopEV+0x2c2>
	
	if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     970:	8c 85       	ldd	r24, Y+12	; 0x0c
     972:	9d 85       	ldd	r25, Y+13	; 0x0d
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     97c:	dc 01       	movw	r26, r24
     97e:	13 96       	adiw	r26, 0x03	; 3
     980:	ed 91       	ld	r30, X+
     982:	fc 91       	ld	r31, X
     984:	14 97       	sbiw	r26, 0x04	; 4
     986:	01 90       	ld	r0, Z+
     988:	f0 81       	ld	r31, Z
     98a:	e0 2d       	mov	r30, r0
     98c:	01 90       	ld	r0, Z+
     98e:	f0 81       	ld	r31, Z
     990:	e0 2d       	mov	r30, r0
     992:	02 85       	ldd	r16, Z+10	; 0x0a
     994:	13 85       	ldd	r17, Z+11	; 0x0b
     996:	8c 85       	ldd	r24, Y+12	; 0x0c
     998:	9d 85       	ldd	r25, Y+13	; 0x0d
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     9a2:	dc 01       	movw	r26, r24
     9a4:	13 96       	adiw	r26, 0x03	; 3
     9a6:	ed 91       	ld	r30, X+
     9a8:	fc 91       	ld	r31, X
     9aa:	14 97       	sbiw	r26, 0x04	; 4
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	f8 01       	movw	r30, r16
     9b2:	09 95       	icall
     9b4:	8c 01       	movw	r16, r24
     9b6:	82 e3       	ldi	r24, 0x32	; 50
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     9c2:	bc 01       	movw	r22, r24
     9c4:	c8 01       	movw	r24, r16
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 b2 18 	call	0x3164	; 0x3164 <vdmGreaterThanGC>
     9ce:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     9d2:	88 23       	and	r24, r24
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <_Z12control_loopEV+0x2c2>
	
	andResult_2 = newBoolGC(true, NULL);;;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     9e0:	7c 01       	movw	r14, r24
/* Controller.vdmrt 29:9 */
if ( toBool(andResult_2) )
     9e2:	c7 01       	movw	r24, r14
     9e4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     9e8:	88 23       	and	r24, r24
     9ea:	09 f4       	brne	.+2      	; 0x9ee <_Z12control_loopEV+0x2ce>
     9ec:	70 c0       	rjmp	.+224    	; 0xace <_Z12control_loopEV+0x3ae>
	/* Controller.vdmrt 30:14 */
	{
/* Controller.vdmrt 31:33 */
TVP embeding_3 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardRotate, CLASS_RealPort__Z8getValueEV), NULL)
;
     9ee:	e0 91 ca 02 	lds	r30, 0x02CA
     9f2:	f0 91 cb 02 	lds	r31, 0x02CB
     9f6:	03 80       	ldd	r0, Z+3	; 0x03
     9f8:	f4 81       	ldd	r31, Z+4	; 0x04
     9fa:	e0 2d       	mov	r30, r0
     9fc:	a0 81       	ld	r26, Z
     9fe:	b1 81       	ldd	r27, Z+1	; 0x01
     a00:	18 96       	adiw	r26, 0x08	; 8
     a02:	ed 91       	ld	r30, X+
     a04:	fc 91       	ld	r31, X
     a06:	19 97       	sbiw	r26, 0x09	; 9
     a08:	00 88       	ldd	r0, Z+16	; 0x10
     a0a:	f1 89       	ldd	r31, Z+17	; 0x11
     a0c:	e0 2d       	mov	r30, r0
     a0e:	cd 01       	movw	r24, r26
     a10:	09 95       	icall
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <vdmMinusGC>
     a1a:	7c 01       	movw	r14, r24
/* Controller.vdmrt 31:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_3);
     a1c:	88 85       	ldd	r24, Y+8	; 0x08
     a1e:	99 85       	ldd	r25, Y+9	; 0x09
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     a28:	dc 01       	movw	r26, r24
     a2a:	13 96       	adiw	r26, 0x03	; 3
     a2c:	ed 91       	ld	r30, X+
     a2e:	fc 91       	ld	r31, X
     a30:	14 97       	sbiw	r26, 0x04	; 4
     a32:	01 90       	ld	r0, Z+
     a34:	f0 81       	ld	r31, Z
     a36:	e0 2d       	mov	r30, r0
     a38:	01 90       	ld	r0, Z+
     a3a:	f0 81       	ld	r31, Z
     a3c:	e0 2d       	mov	r30, r0
     a3e:	02 85       	ldd	r16, Z+10	; 0x0a
     a40:	13 85       	ldd	r17, Z+11	; 0x0b
     a42:	88 85       	ldd	r24, Y+8	; 0x08
     a44:	99 85       	ldd	r25, Y+9	; 0x09
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     a4e:	dc 01       	movw	r26, r24
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	ed 91       	ld	r30, X+
     a54:	fc 91       	ld	r31, X
     a56:	14 97       	sbiw	r26, 0x04	; 4
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	b7 01       	movw	r22, r14
     a5e:	f8 01       	movw	r30, r16
     a60:	09 95       	icall
/* Controller.vdmrt 32:32 */
TVP embeding_4 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_backwardRotate, CLASS_RealPort__Z8getValueEV)
;
     a62:	e0 91 cc 02 	lds	r30, 0x02CC
     a66:	f0 91 cd 02 	lds	r31, 0x02CD
     a6a:	03 80       	ldd	r0, Z+3	; 0x03
     a6c:	f4 81       	ldd	r31, Z+4	; 0x04
     a6e:	e0 2d       	mov	r30, r0
     a70:	a0 81       	ld	r26, Z
     a72:	b1 81       	ldd	r27, Z+1	; 0x01
     a74:	18 96       	adiw	r26, 0x08	; 8
     a76:	ed 91       	ld	r30, X+
     a78:	fc 91       	ld	r31, X
     a7a:	19 97       	sbiw	r26, 0x09	; 9
     a7c:	00 88       	ldd	r0, Z+16	; 0x10
     a7e:	f1 89       	ldd	r31, Z+17	; 0x11
     a80:	e0 2d       	mov	r30, r0
     a82:	cd 01       	movw	r24, r26
     a84:	09 95       	icall
     a86:	7c 01       	movw	r14, r24
/* Controller.vdmrt 32:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_4);
     a88:	8e 81       	ldd	r24, Y+6	; 0x06
     a8a:	9f 81       	ldd	r25, Y+7	; 0x07
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     a94:	dc 01       	movw	r26, r24
     a96:	13 96       	adiw	r26, 0x03	; 3
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	14 97       	sbiw	r26, 0x04	; 4
     a9e:	01 90       	ld	r0, Z+
     aa0:	f0 81       	ld	r31, Z
     aa2:	e0 2d       	mov	r30, r0
     aa4:	01 90       	ld	r0, Z+
     aa6:	f0 81       	ld	r31, Z
     aa8:	e0 2d       	mov	r30, r0
     aaa:	02 85       	ldd	r16, Z+10	; 0x0a
     aac:	13 85       	ldd	r17, Z+11	; 0x0b
     aae:	8e 81       	ldd	r24, Y+6	; 0x06
     ab0:	9f 81       	ldd	r25, Y+7	; 0x07
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     aba:	dc 01       	movw	r26, r24
     abc:	13 96       	adiw	r26, 0x03	; 3
     abe:	ed 91       	ld	r30, X+
     ac0:	fc 91       	ld	r31, X
     ac2:	14 97       	sbiw	r26, 0x04	; 4
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	b7 01       	movw	r22, r14
     aca:	f8 01       	movw	r30, r16
     acc:	09 95       	icall
}
;

TVP andResult_3 = newBoolGC(false, NULL)
;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     ad8:	7c 01       	movw	r14, r24

if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     ada:	8a 85       	ldd	r24, Y+10	; 0x0a
     adc:	9b 85       	ldd	r25, Y+11	; 0x0b
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     ae6:	dc 01       	movw	r26, r24
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	ed 91       	ld	r30, X+
     aec:	fc 91       	ld	r31, X
     aee:	14 97       	sbiw	r26, 0x04	; 4
     af0:	01 90       	ld	r0, Z+
     af2:	f0 81       	ld	r31, Z
     af4:	e0 2d       	mov	r30, r0
     af6:	01 90       	ld	r0, Z+
     af8:	f0 81       	ld	r31, Z
     afa:	e0 2d       	mov	r30, r0
     afc:	02 85       	ldd	r16, Z+10	; 0x0a
     afe:	13 85       	ldd	r17, Z+11	; 0x0b
     b00:	8a 85       	ldd	r24, Y+10	; 0x0a
     b02:	9b 85       	ldd	r25, Y+11	; 0x0b
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     b0c:	dc 01       	movw	r26, r24
     b0e:	13 96       	adiw	r26, 0x03	; 3
     b10:	ed 91       	ld	r30, X+
     b12:	fc 91       	ld	r31, X
     b14:	14 97       	sbiw	r26, 0x04	; 4
     b16:	80 81       	ld	r24, Z
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	f8 01       	movw	r30, r16
     b1c:	09 95       	icall
     b1e:	8c 01       	movw	r16, r24
     b20:	82 e3       	ldi	r24, 0x32	; 50
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     b2c:	bc 01       	movw	r22, r24
     b2e:	c8 01       	movw	r24, r16
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	0e 94 b2 18 	call	0x3164	; 0x3164 <vdmGreaterThanGC>
     b38:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     b3c:	88 23       	and	r24, r24
     b3e:	c9 f1       	breq	.+114    	; 0xbb2 <_Z12control_loopEV+0x492>
	
	if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     b40:	8c 85       	ldd	r24, Y+12	; 0x0c
     b42:	9d 85       	ldd	r25, Y+13	; 0x0d
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     b4c:	dc 01       	movw	r26, r24
     b4e:	13 96       	adiw	r26, 0x03	; 3
     b50:	ed 91       	ld	r30, X+
     b52:	fc 91       	ld	r31, X
     b54:	14 97       	sbiw	r26, 0x04	; 4
     b56:	01 90       	ld	r0, Z+
     b58:	f0 81       	ld	r31, Z
     b5a:	e0 2d       	mov	r30, r0
     b5c:	01 90       	ld	r0, Z+
     b5e:	f0 81       	ld	r31, Z
     b60:	e0 2d       	mov	r30, r0
     b62:	02 85       	ldd	r16, Z+10	; 0x0a
     b64:	13 85       	ldd	r17, Z+11	; 0x0b
     b66:	8c 85       	ldd	r24, Y+12	; 0x0c
     b68:	9d 85       	ldd	r25, Y+13	; 0x0d
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     b72:	dc 01       	movw	r26, r24
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	ed 91       	ld	r30, X+
     b78:	fc 91       	ld	r31, X
     b7a:	14 97       	sbiw	r26, 0x04	; 4
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	f8 01       	movw	r30, r16
     b82:	09 95       	icall
     b84:	8c 01       	movw	r16, r24
     b86:	82 e3       	ldi	r24, 0x32	; 50
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     b92:	bc 01       	movw	r22, r24
     b94:	c8 01       	movw	r24, r16
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	0e 94 28 18 	call	0x3050	; 0x3050 <vdmLessThanGC>
     b9e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     ba2:	88 23       	and	r24, r24
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <_Z12control_loopEV+0x492>
	
	andResult_3 = newBoolGC(true, NULL);;;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     bb0:	7c 01       	movw	r14, r24
/* Controller.vdmrt 35:9 */
if ( toBool(andResult_3) )
     bb2:	c7 01       	movw	r24, r14
     bb4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <_Z12control_loopEV+0x49e>
     bbc:	70 c0       	rjmp	.+224    	; 0xc9e <_Z12control_loopEV+0x57e>
	/* Controller.vdmrt 36:14 */
	{
/* Controller.vdmrt 37:33 */
TVP embeding_5 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_backwardRotate, CLASS_RealPort__Z8getValueEV), NULL)
;
     bbe:	e0 91 cc 02 	lds	r30, 0x02CC
     bc2:	f0 91 cd 02 	lds	r31, 0x02CD
     bc6:	03 80       	ldd	r0, Z+3	; 0x03
     bc8:	f4 81       	ldd	r31, Z+4	; 0x04
     bca:	e0 2d       	mov	r30, r0
     bcc:	a0 81       	ld	r26, Z
     bce:	b1 81       	ldd	r27, Z+1	; 0x01
     bd0:	18 96       	adiw	r26, 0x08	; 8
     bd2:	ed 91       	ld	r30, X+
     bd4:	fc 91       	ld	r31, X
     bd6:	19 97       	sbiw	r26, 0x09	; 9
     bd8:	00 88       	ldd	r0, Z+16	; 0x10
     bda:	f1 89       	ldd	r31, Z+17	; 0x11
     bdc:	e0 2d       	mov	r30, r0
     bde:	cd 01       	movw	r24, r26
     be0:	09 95       	icall
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <vdmMinusGC>
     bea:	7c 01       	movw	r14, r24
/* Controller.vdmrt 37:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_5);
     bec:	88 85       	ldd	r24, Y+8	; 0x08
     bee:	99 85       	ldd	r25, Y+9	; 0x09
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     bf8:	dc 01       	movw	r26, r24
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	14 97       	sbiw	r26, 0x04	; 4
     c02:	01 90       	ld	r0, Z+
     c04:	f0 81       	ld	r31, Z
     c06:	e0 2d       	mov	r30, r0
     c08:	01 90       	ld	r0, Z+
     c0a:	f0 81       	ld	r31, Z
     c0c:	e0 2d       	mov	r30, r0
     c0e:	02 85       	ldd	r16, Z+10	; 0x0a
     c10:	13 85       	ldd	r17, Z+11	; 0x0b
     c12:	88 85       	ldd	r24, Y+8	; 0x08
     c14:	99 85       	ldd	r25, Y+9	; 0x09
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     c1e:	dc 01       	movw	r26, r24
     c20:	13 96       	adiw	r26, 0x03	; 3
     c22:	ed 91       	ld	r30, X+
     c24:	fc 91       	ld	r31, X
     c26:	14 97       	sbiw	r26, 0x04	; 4
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	b7 01       	movw	r22, r14
     c2e:	f8 01       	movw	r30, r16
     c30:	09 95       	icall
/* Controller.vdmrt 38:32 */
TVP embeding_6 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardRotate, CLASS_RealPort__Z8getValueEV)
;
     c32:	e0 91 ca 02 	lds	r30, 0x02CA
     c36:	f0 91 cb 02 	lds	r31, 0x02CB
     c3a:	03 80       	ldd	r0, Z+3	; 0x03
     c3c:	f4 81       	ldd	r31, Z+4	; 0x04
     c3e:	e0 2d       	mov	r30, r0
     c40:	a0 81       	ld	r26, Z
     c42:	b1 81       	ldd	r27, Z+1	; 0x01
     c44:	18 96       	adiw	r26, 0x08	; 8
     c46:	ed 91       	ld	r30, X+
     c48:	fc 91       	ld	r31, X
     c4a:	19 97       	sbiw	r26, 0x09	; 9
     c4c:	00 88       	ldd	r0, Z+16	; 0x10
     c4e:	f1 89       	ldd	r31, Z+17	; 0x11
     c50:	e0 2d       	mov	r30, r0
     c52:	cd 01       	movw	r24, r26
     c54:	09 95       	icall
     c56:	7c 01       	movw	r14, r24
/* Controller.vdmrt 38:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_6);
     c58:	8e 81       	ldd	r24, Y+6	; 0x06
     c5a:	9f 81       	ldd	r25, Y+7	; 0x07
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     c64:	dc 01       	movw	r26, r24
     c66:	13 96       	adiw	r26, 0x03	; 3
     c68:	ed 91       	ld	r30, X+
     c6a:	fc 91       	ld	r31, X
     c6c:	14 97       	sbiw	r26, 0x04	; 4
     c6e:	01 90       	ld	r0, Z+
     c70:	f0 81       	ld	r31, Z
     c72:	e0 2d       	mov	r30, r0
     c74:	01 90       	ld	r0, Z+
     c76:	f0 81       	ld	r31, Z
     c78:	e0 2d       	mov	r30, r0
     c7a:	02 85       	ldd	r16, Z+10	; 0x0a
     c7c:	13 85       	ldd	r17, Z+11	; 0x0b
     c7e:	8e 81       	ldd	r24, Y+6	; 0x06
     c80:	9f 81       	ldd	r25, Y+7	; 0x07
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     c8a:	dc 01       	movw	r26, r24
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	ed 91       	ld	r30, X+
     c90:	fc 91       	ld	r31, X
     c92:	14 97       	sbiw	r26, 0x04	; 4
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	b7 01       	movw	r22, r14
     c9a:	f8 01       	movw	r30, r16
     c9c:	09 95       	icall
}
;

TVP andResult_4 = newBoolGC(false, NULL)
;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     ca8:	7c 01       	movw	r14, r24

if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     caa:	8a 85       	ldd	r24, Y+10	; 0x0a
     cac:	9b 85       	ldd	r25, Y+11	; 0x0b
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     cb6:	dc 01       	movw	r26, r24
     cb8:	13 96       	adiw	r26, 0x03	; 3
     cba:	ed 91       	ld	r30, X+
     cbc:	fc 91       	ld	r31, X
     cbe:	14 97       	sbiw	r26, 0x04	; 4
     cc0:	01 90       	ld	r0, Z+
     cc2:	f0 81       	ld	r31, Z
     cc4:	e0 2d       	mov	r30, r0
     cc6:	01 90       	ld	r0, Z+
     cc8:	f0 81       	ld	r31, Z
     cca:	e0 2d       	mov	r30, r0
     ccc:	02 85       	ldd	r16, Z+10	; 0x0a
     cce:	13 85       	ldd	r17, Z+11	; 0x0b
     cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     cdc:	dc 01       	movw	r26, r24
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	ed 91       	ld	r30, X+
     ce2:	fc 91       	ld	r31, X
     ce4:	14 97       	sbiw	r26, 0x04	; 4
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	f8 01       	movw	r30, r16
     cec:	09 95       	icall
     cee:	8c 01       	movw	r16, r24
     cf0:	82 e3       	ldi	r24, 0x32	; 50
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     cfc:	bc 01       	movw	r22, r24
     cfe:	c8 01       	movw	r24, r16
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	0e 94 b2 18 	call	0x3164	; 0x3164 <vdmGreaterThanGC>
     d08:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     d0c:	88 23       	and	r24, r24
     d0e:	c9 f1       	breq	.+114    	; 0xd82 <_Z12control_loopEV+0x662>
	
	if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(50, NULL), NULL)) )
     d10:	8c 85       	ldd	r24, Y+12	; 0x0c
     d12:	9d 85       	ldd	r25, Y+13	; 0x0d
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     d1c:	dc 01       	movw	r26, r24
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	ed 91       	ld	r30, X+
     d22:	fc 91       	ld	r31, X
     d24:	14 97       	sbiw	r26, 0x04	; 4
     d26:	01 90       	ld	r0, Z+
     d28:	f0 81       	ld	r31, Z
     d2a:	e0 2d       	mov	r30, r0
     d2c:	01 90       	ld	r0, Z+
     d2e:	f0 81       	ld	r31, Z
     d30:	e0 2d       	mov	r30, r0
     d32:	02 85       	ldd	r16, Z+10	; 0x0a
     d34:	13 85       	ldd	r17, Z+11	; 0x0b
     d36:	8c 85       	ldd	r24, Y+12	; 0x0c
     d38:	9d 85       	ldd	r25, Y+13	; 0x0d
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
     d42:	dc 01       	movw	r26, r24
     d44:	13 96       	adiw	r26, 0x03	; 3
     d46:	ed 91       	ld	r30, X+
     d48:	fc 91       	ld	r31, X
     d4a:	14 97       	sbiw	r26, 0x04	; 4
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	f8 01       	movw	r30, r16
     d52:	09 95       	icall
     d54:	8c 01       	movw	r16, r24
     d56:	82 e3       	ldi	r24, 0x32	; 50
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
     d62:	bc 01       	movw	r22, r24
     d64:	c8 01       	movw	r24, r16
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	0e 94 b2 18 	call	0x3164	; 0x3164 <vdmGreaterThanGC>
     d6e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
     d72:	88 23       	and	r24, r24
     d74:	31 f0       	breq	.+12     	; 0xd82 <_Z12control_loopEV+0x662>
	
	andResult_4 = newBoolGC(true, NULL);;;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
     d80:	7c 01       	movw	r14, r24
/* Controller.vdmrt 41:9 */
if ( toBool(andResult_4) )
     d82:	c7 01       	movw	r24, r14
     d84:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
	/* Controller.vdmrt 42:14 */
	{
/*  Skip  */
}
;;
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	08 95       	ret

00000d96 <Controller_const_init>:
 

 static  TVP _Z17fieldInitializer7EV()	{

TVP ret_12 = newInt(4)
;
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>



 void Controller_const_init()	{

numFields_3 = _Z17fieldInitializer7EV();
     d9e:	90 93 bd 02 	sts	0x02BD, r25
     da2:	80 93 bc 02 	sts	0x02BC, r24

return ;
}
     da6:	08 95       	ret

00000da8 <fmi2SetupExperiment>:
	return (void*) 1;
}

fmi2Status fmi2SetupExperiment(fmi2Component c, fmi2Boolean toleranceDefined, fmi2Real tolerance,
		fmi2Real startTime, fmi2Boolean stopTimeDefined, fmi2Real stopTime)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	return fmi2OK;
}
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <fmi2EnterInitializationMode>:

fmi2Status fmi2EnterInitializationMode(fmi2Component c)
{
	return fmi2OK;
}
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	08 95       	ret

00000dbc <fmi2ExitInitializationMode>:

fmi2Status fmi2ExitInitializationMode(fmi2Component c)
{	
	return fmi2OK;
}
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	08 95       	ret

00000dc0 <fmi2Terminate>:

fmi2Status fmi2Terminate(fmi2Component c)
{
	return fmi2OK;
}
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	08 95       	ret

00000dc4 <fmi2Reset>:

fmi2Status fmi2Reset(fmi2Component c)
{
	return fmi2OK;
}
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	08 95       	ret

00000dc8 <fmi2GetVersion>:
*/

const char* fmi2GetVersion()
{
	return fmi2Version;
}
     dc8:	88 e6       	ldi	r24, 0x68	; 104
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	08 95       	ret

00000dce <fmi2GetTypesPlatform>:

const char* fmi2GetTypesPlatform()
{
	return fmi2TypesPlatform;
}
     dce:	8c e6       	ldi	r24, 0x6C	; 108
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	08 95       	ret

00000dd4 <fmi2SetDebugLogging>:

fmi2Status fmi2SetDebugLogging(fmi2Component c, fmi2Boolean loggingOn, size_t nCategories,
		const fmi2String categories[])
{
	return fmi2OK;
}
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	08 95       	ret

00000dd8 <fmi2GetReal>:

fmi2Status fmi2GetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Real value[])
{
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	8a 01       	movw	r16, r20
     de2:	e9 01       	movw	r28, r18
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	14 c0       	rjmp	.+40     	; 0xe12 <fmi2GetReal+0x3a>
	int i;

	for (i = 0; i < nvr; i++)
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.realBuffer[vRef];
     dea:	db 01       	movw	r26, r22
     dec:	ed 91       	ld	r30, X+
     dee:	fd 91       	ld	r31, X+
     df0:	bd 01       	movw	r22, r26
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	e6 5d       	subi	r30, 0xD6	; 214
     dfc:	fc 4f       	sbci	r31, 0xFC	; 252
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	a2 81       	ldd	r26, Z+2	; 0x02
     e04:	b3 81       	ldd	r27, Z+3	; 0x03
     e06:	89 93       	st	Y+, r24
     e08:	99 93       	st	Y+, r25
     e0a:	a9 93       	st	Y+, r26
     e0c:	b9 93       	st	Y+, r27

fmi2Status fmi2GetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Real value[])
{
	int i;

	for (i = 0; i < nvr; i++)
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	20 17       	cp	r18, r16
     e14:	31 07       	cpc	r19, r17
     e16:	48 f3       	brcs	.-46     	; 0xdea <fmi2GetReal+0x12>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.realBuffer[vRef];
	}
	return fmi2OK;
}
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <fmi2GetInteger>:

fmi2Status fmi2GetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Integer value[])
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	8a 01       	movw	r16, r20
     e2e:	eb 01       	movw	r28, r22
     e30:	d9 01       	movw	r26, r18
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	0c c0       	rjmp	.+24     	; 0xe50 <fmi2GetInteger+0x2c>
	int i;

	for (i = 0; i < nvr; i++)
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.intBuffer[vRef];
     e38:	e9 91       	ld	r30, Y+
     e3a:	f9 91       	ld	r31, Y+
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e6 5b       	subi	r30, 0xB6	; 182
     e42:	fc 4f       	sbci	r31, 0xFC	; 252
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	8d 93       	st	X+, r24
     e4a:	9d 93       	st	X+, r25

fmi2Status fmi2GetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Integer value[])
{
	int i;

	for (i = 0; i < nvr; i++)
     e4c:	2f 5f       	subi	r18, 0xFF	; 255
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	20 17       	cp	r18, r16
     e52:	31 07       	cpc	r19, r17
     e54:	88 f3       	brcs	.-30     	; 0xe38 <fmi2GetInteger+0x14>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.intBuffer[vRef];
	}
	return fmi2OK;
}
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <fmi2GetBoolean>:

fmi2Status fmi2GetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Boolean value[])
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	8a 01       	movw	r16, r20
     e6c:	eb 01       	movw	r28, r22
     e6e:	d9 01       	movw	r26, r18
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	0c c0       	rjmp	.+24     	; 0xe8e <fmi2GetBoolean+0x2c>
	int i;

	for (i = 0; i < nvr; i++)
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.booleanBuffer[vRef];
     e76:	e9 91       	ld	r30, Y+
     e78:	f9 91       	ld	r31, Y+
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	e6 5e       	subi	r30, 0xE6	; 230
     e80:	fc 4f       	sbci	r31, 0xFC	; 252
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	8d 93       	st	X+, r24
     e88:	9d 93       	st	X+, r25

fmi2Status fmi2GetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Boolean value[])
{
	int i;

	for (i = 0; i < nvr; i++)
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	20 17       	cp	r18, r16
     e90:	31 07       	cpc	r19, r17
     e92:	88 f3       	brcs	.-30     	; 0xe76 <fmi2GetBoolean+0x14>
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.booleanBuffer[vRef];
	}

	return fmi2OK;
}
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	08 95       	ret

00000ea0 <fmi2GetString>:

fmi2Status fmi2GetString(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2String value[])
{
	return fmi2OK;
}
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	08 95       	ret

00000ea4 <fmi2SetReal>:

fmi2Status fmi2SetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Real value[])
{
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	8a 01       	movw	r16, r20
     eae:	e9 01       	movw	r28, r18
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	14 c0       	rjmp	.+40     	; 0xede <fmi2SetReal+0x3a>
	int i;

	for (i = 0; i < nvr; i++)
	{
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.realBuffer[vRef] = value[i];
     eb6:	db 01       	movw	r26, r22
     eb8:	ed 91       	ld	r30, X+
     eba:	fd 91       	ld	r31, X+
     ebc:	bd 01       	movw	r22, r26
     ebe:	ee 0f       	add	r30, r30
     ec0:	ff 1f       	adc	r31, r31
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	e6 5d       	subi	r30, 0xD6	; 214
     ec8:	fc 4f       	sbci	r31, 0xFC	; 252
     eca:	89 91       	ld	r24, Y+
     ecc:	99 91       	ld	r25, Y+
     ece:	a9 91       	ld	r26, Y+
     ed0:	b9 91       	ld	r27, Y+
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	a2 83       	std	Z+2, r26	; 0x02
     ed8:	b3 83       	std	Z+3, r27	; 0x03

fmi2Status fmi2SetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Real value[])
{
	int i;

	for (i = 0; i < nvr; i++)
     eda:	2f 5f       	subi	r18, 0xFF	; 255
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	20 17       	cp	r18, r16
     ee0:	31 07       	cpc	r19, r17
     ee2:	48 f3       	brcs	.-46     	; 0xeb6 <fmi2SetReal+0x12>
		fmiBuffer.realBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.realBuffer[vRef]);  */
	}

	return fmi2OK;
}
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <fmi2SetInteger>:

fmi2Status fmi2SetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer value[])
{
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	8a 01       	movw	r16, r20
     efa:	eb 01       	movw	r28, r22
     efc:	d9 01       	movw	r26, r18
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	0c c0       	rjmp	.+24     	; 0xf1c <fmi2SetInteger+0x2c>
	int i;

	for (i = 0; i < nvr; i++)
	{
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.intBuffer[vRef] = value[i];
     f04:	e9 91       	ld	r30, Y+
     f06:	f9 91       	ld	r31, Y+
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	e6 5b       	subi	r30, 0xB6	; 182
     f0e:	fc 4f       	sbci	r31, 0xFC	; 252
     f10:	8d 91       	ld	r24, X+
     f12:	9d 91       	ld	r25, X+
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	80 83       	st	Z, r24
fmi2Status fmi2SetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer value[])
{
	int i;

	for (i = 0; i < nvr; i++)
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	20 17       	cp	r18, r16
     f1e:	31 07       	cpc	r19, r17
     f20:	88 f3       	brcs	.-30     	; 0xf04 <fmi2SetInteger+0x14>
		fmiBuffer.intBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.intBuffer[vRef]);  */
	}

	return fmi2OK;
}
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <fmi2SetBoolean>:

fmi2Status fmi2SetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Boolean value[])
{
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	8a 01       	movw	r16, r20
     f38:	eb 01       	movw	r28, r22
     f3a:	d9 01       	movw	r26, r18
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	0c c0       	rjmp	.+24     	; 0xf5a <fmi2SetBoolean+0x2c>
	int i;

	for (i = 0; i < nvr; i++)
	{
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.booleanBuffer[vRef] = value[i];
     f42:	e9 91       	ld	r30, Y+
     f44:	f9 91       	ld	r31, Y+
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	e6 5e       	subi	r30, 0xE6	; 230
     f4c:	fc 4f       	sbci	r31, 0xFC	; 252
     f4e:	8d 91       	ld	r24, X+
     f50:	9d 91       	ld	r25, X+
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
fmi2Status fmi2SetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Boolean value[])
{
	int i;

	for (i = 0; i < nvr; i++)
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	20 17       	cp	r18, r16
     f5c:	31 07       	cpc	r19, r17
     f5e:	88 f3       	brcs	.-30     	; 0xf42 <fmi2SetBoolean+0x14>
		fmiBuffer.booleanBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.boolBuffer[vRef]);  */
	}

	return fmi2OK;
}
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	08 95       	ret

00000f6c <fmi2SetString>:

fmi2Status fmi2SetString(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2String value[])
{
	return fmi2OK;
}
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <fmi2GetFMUstate>:

fmi2Status fmi2GetFMUstate(fmi2Component c, fmi2FMUstate* FMUstate)
{
	return fmi2OK;
}
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	08 95       	ret

00000f74 <fmi2SetFMUstate>:
fmi2Status fmi2SetFMUstate(fmi2Component c, fmi2FMUstate FMUstate)
{
	return fmi2OK;
}
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	08 95       	ret

00000f78 <fmi2FreeFMUstate>:
fmi2Status fmi2FreeFMUstate(fmi2Component c, fmi2FMUstate* FMUstate)
{
	return fmi2OK;
}
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	08 95       	ret

00000f7c <fmi2SerializedFMUstateSize>:
fmi2Status fmi2SerializedFMUstateSize(fmi2Component c, fmi2FMUstate FMUstate, size_t *size)
{
	return fmi2OK;
}
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	08 95       	ret

00000f80 <fmi2SerializeFMUstate>:
fmi2Status fmi2SerializeFMUstate(fmi2Component c, fmi2FMUstate FMUstate, fmi2Byte serializedState[],
		size_t size)
{
	return fmi2OK;
}
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	08 95       	ret

00000f84 <fmi2DeSerializeFMUstate>:
fmi2Status fmi2DeSerializeFMUstate(fmi2Component c, const fmi2Byte serializedState[], size_t size,
		fmi2FMUstate* FMUstate)
{
	return fmi2OK;
}
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	08 95       	ret

00000f88 <fmi2GetDirectionalDerivative>:
fmi2Status fmi2GetDirectionalDerivative(fmi2Component c, const fmi2ValueReference vUnknown_ref[],
		size_t nUnknown, const fmi2ValueReference vKnown_ref[], size_t nKnown, const fmi2Real dvKnown[],
		fmi2Real dvUnknown[])
{
	return fmi2OK;
}
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	08 95       	ret

00000f8c <fmi2SetRealInputDerivatives>:
/* Simulating the slave */
fmi2Status fmi2SetRealInputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer order[], const fmi2Real value[])
{
	return fmi2OK;
}
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret

00000f90 <fmi2GetRealOutputDerivatives>:

fmi2Status fmi2GetRealOutputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer order[], fmi2Real value[])
{
	return fmi2OK;
}
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	08 95       	ret

00000f94 <fmi2CancelStep>:

fmi2Status fmi2CancelStep(fmi2Component c)
{
	return fmi2OK;
}
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	08 95       	ret

00000f98 <fmi2GetStatus>:
}

fmi2Status fmi2GetStatus(fmi2Component c, const fmi2StatusKind s, fmi2Status *value)
{
	return fmi2OK;
}
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	08 95       	ret

00000f9c <fmi2GetRealStatus>:

fmi2Status fmi2GetRealStatus(fmi2Component c, const fmi2StatusKind s, fmi2Real *value)
{
	return fmi2OK;
}
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <fmi2GetIntegerStatus>:

fmi2Status fmi2GetIntegerStatus(fmi2Component c, const fmi2StatusKind s, fmi2Integer *value)
{
	return fmi2OK;
}
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	08 95       	ret

00000fa4 <fmi2GetBooleanStatus>:

fmi2Status fmi2GetBooleanStatus(fmi2Component c, const fmi2StatusKind s, fmi2Boolean *value)
{
	return fmi2OK;
}
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	08 95       	ret

00000fa8 <fmi2GetStringStatus>:

fmi2Status fmi2GetStringStatus(fmi2Component c, const fmi2StatusKind s, fmi2String *value)
{
	return fmi2OK;
}
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	08 95       	ret

00000fac <fmi2GetMaxStepsize>:

/* INTO cps specific*/
fmi2Status fmi2GetMaxStepsize(fmi2Component c, fmi2Real* size)
{	
     fac:	fb 01       	movw	r30, r22
	*size = maxStepSize;
     fae:	80 91 c2 02 	lds	r24, 0x02C2
     fb2:	90 91 c3 02 	lds	r25, 0x02C3
     fb6:	a0 91 c4 02 	lds	r26, 0x02C4
     fba:	b0 91 c5 02 	lds	r27, 0x02C5
     fbe:	80 83       	st	Z, r24
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	a2 83       	std	Z+2, r26	; 0x02
     fc4:	b3 83       	std	Z+3, r27	; 0x03
	return fmi2OK;
}
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 95       	ret

00000fca <fmi2DoStep>:
	return fmi2OK;
}

fmi2Status fmi2DoStep(fmi2Component c, fmi2Real currentCommunicationPoint, fmi2Real communicationStepSize,
		fmi2Boolean noSetFMUStatePriorToCurrentPoint)
{
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	6a 01       	movw	r12, r20
     fe0:	7b 01       	movw	r14, r22
     fe2:	48 01       	movw	r8, r16
     fe4:	59 01       	movw	r10, r18
	fmi2Status stepStatus;

	syncInputsToModel();
     fe6:	0e 94 ae 0a 	call	0x155c	; 0x155c <syncInputsToModel>
	stepStatus = vdmStep(currentCommunicationPoint, communicationStepSize);
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	a5 01       	movw	r20, r10
     ff0:	94 01       	movw	r18, r8
     ff2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <vdmStep>
     ff6:	18 2f       	mov	r17, r24
	syncOutputsToBuffers();
     ff8:	0e 94 46 0a 	call	0x148c	; 0x148c <syncOutputsToBuffers>
	return stepStatus;
}
     ffc:	81 2f       	mov	r24, r17
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	9f 90       	pop	r9
    1010:	8f 90       	pop	r8
    1012:	08 95       	ret

00001014 <fmi2FreeInstance>:
	return fmi2OK;
}

void fmi2FreeInstance(fmi2Component c)
{
	systemDeInit();
    1014:	0e 94 c4 09 	call	0x1388	; 0x1388 <systemDeInit>
}
    1018:	08 95       	ret

0000101a <fmi2Instantiate>:
*  ---------------------------------------------------------------------------
*/
fmi2Component fmi2Instantiate(fmi2String instanceName, fmi2Type fmuType, fmi2String fmuGUID,
		fmi2String fmuResourceLocation, const fmi2CallbackFunctions *functions, fmi2Boolean visible,
		fmi2Boolean loggingOn)
{
    101a:	cf 92       	push	r12
    101c:	df 92       	push	r13
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	f8 2e       	mov	r15, r24
    102c:	e9 2e       	mov	r14, r25
    102e:	ca 01       	movw	r24, r20
    1030:	d2 2e       	mov	r13, r18
    1032:	c3 2e       	mov	r12, r19
    1034:	e8 01       	movw	r28, r16
	char *tmpInstanceName;
	
	g_fmiCallbackFunctions = functions;
    1036:	10 93 19 03 	sts	0x0319, r17
    103a:	00 93 18 03 	sts	0x0318, r16
	
	if(strcmp(fmuGUID, _FMU_GUID) != 0)
    103e:	64 e7       	ldi	r22, 0x74	; 116
    1040:	71 e0       	ldi	r23, 0x01	; 1
    1042:	0e 94 9b 39 	call	0x7336	; 0x7336 <strcmp>
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	a9 f1       	breq	.+106    	; 0x10b4 <fmi2Instantiate+0x9a>
	{
		g_fmiCallbackFunctions->logger((void*) 1,g_fmiInstanceName,fmi2Error,"logError","%s\n", "GUID mismatch.");
    104a:	8d b7       	in	r24, 0x3d	; 61
    104c:	9e b7       	in	r25, 0x3e	; 62
    104e:	0b 97       	sbiw	r24, 0x0b	; 11
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	9e bf       	out	0x3e, r25	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	8d bf       	out	0x3d, r24	; 61
    105a:	ed b7       	in	r30, 0x3d	; 61
    105c:	fe b7       	in	r31, 0x3e	; 62
    105e:	31 96       	adiw	r30, 0x01	; 1
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	ad b7       	in	r26, 0x3d	; 61
    1066:	be b7       	in	r27, 0x3e	; 62
    1068:	12 96       	adiw	r26, 0x02	; 2
    106a:	9c 93       	st	X, r25
    106c:	8e 93       	st	-X, r24
    106e:	11 97       	sbiw	r26, 0x01	; 1
    1070:	80 91 5a 03 	lds	r24, 0x035A
    1074:	90 91 5b 03 	lds	r25, 0x035B
    1078:	93 83       	std	Z+3, r25	; 0x03
    107a:	82 83       	std	Z+2, r24	; 0x02
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	84 83       	std	Z+4, r24	; 0x04
    1080:	8b e9       	ldi	r24, 0x9B	; 155
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	96 83       	std	Z+6, r25	; 0x06
    1086:	85 83       	std	Z+5, r24	; 0x05
    1088:	84 ea       	ldi	r24, 0xA4	; 164
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	90 87       	std	Z+8, r25	; 0x08
    108e:	87 83       	std	Z+7, r24	; 0x07
    1090:	88 ea       	ldi	r24, 0xA8	; 168
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	92 87       	std	Z+10, r25	; 0x0a
    1096:	81 87       	std	Z+9, r24	; 0x09
    1098:	e8 81       	ld	r30, Y
    109a:	f9 81       	ldd	r31, Y+1	; 0x01
    109c:	09 95       	icall
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	8d b7       	in	r24, 0x3d	; 61
    10a4:	9e b7       	in	r25, 0x3e	; 62
    10a6:	0b 96       	adiw	r24, 0x0b	; 11
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	9e bf       	out	0x3e, r25	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	8d bf       	out	0x3d, r24	; 61
    10b2:	2e c0       	rjmp	.+92     	; 0x1110 <__stack+0x11>
		return NULL;
	}

	tmpInstanceName = (char*)malloc(strlen(instanceName) + 1);
    10b4:	ef 2d       	mov	r30, r15
    10b6:	fe 2d       	mov	r31, r14
    10b8:	df 01       	movw	r26, r30
    10ba:	0d 90       	ld	r0, X+
    10bc:	00 20       	and	r0, r0
    10be:	e9 f7       	brne	.-6      	; 0x10ba <fmi2Instantiate+0xa0>
    10c0:	cd 01       	movw	r24, r26
    10c2:	8e 1b       	sub	r24, r30
    10c4:	9f 0b       	sbc	r25, r31
    10c6:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    10ca:	18 2f       	mov	r17, r24
    10cc:	09 2f       	mov	r16, r25
	strcpy(tmpInstanceName, instanceName);
    10ce:	6f 2d       	mov	r22, r15
    10d0:	7e 2d       	mov	r23, r14
    10d2:	0e 94 a4 39 	call	0x7348	; 0x7348 <strcpy>
	g_fmiInstanceName = tmpInstanceName;
    10d6:	10 93 5a 03 	sts	0x035A, r17
    10da:	00 93 5b 03 	sts	0x035B, r16

	resourcesLocation = (char*)calloc(strlen(fmuResourceLocation) + 1, sizeof(char));
    10de:	ed 2d       	mov	r30, r13
    10e0:	fc 2d       	mov	r31, r12
    10e2:	df 01       	movw	r26, r30
    10e4:	0d 90       	ld	r0, X+
    10e6:	00 20       	and	r0, r0
    10e8:	e9 f7       	brne	.-6      	; 0x10e4 <fmi2Instantiate+0xca>
    10ea:	cd 01       	movw	r24, r26
    10ec:	8e 1b       	sub	r24, r30
    10ee:	9f 0b       	sbc	r25, r31
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    10f8:	80 93 12 03 	sts	0x0312, r24
    10fc:	90 93 13 03 	sts	0x0313, r25
	strcpy(resourcesLocation, fmuResourceLocation);
    1100:	6d 2d       	mov	r22, r13
    1102:	7c 2d       	mov	r23, r12
    1104:	0e 94 a4 39 	call	0x7348	; 0x7348 <strcpy>
	
	systemInit();
    1108:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <systemInit>
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	30 e0       	ldi	r19, 0x00	; 0

	return (void*) 1;
}
    1110:	c9 01       	movw	r24, r18
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	08 95       	ret

00001124 <periodic_taskg_System_controller__Z12control_loopEV>:
		fmiBuffer.realBuffer[5]=v->value.doubleVal;
		vdmFree(v);vdmFree(p);
	}
}
void periodic_taskg_System_controller__Z12control_loopEV()
{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
	CALL_FUNC(Controller, Controller, g_System_controller, CLASS_Controller__Z12control_loopEV);
    1128:	e0 91 0e 03 	lds	r30, 0x030E
    112c:	f0 91 0f 03 	lds	r31, 0x030F
    1130:	03 80       	ldd	r0, Z+3	; 0x03
    1132:	f4 81       	ldd	r31, Z+4	; 0x04
    1134:	e0 2d       	mov	r30, r0
    1136:	a0 81       	ld	r26, Z
    1138:	b1 81       	ldd	r27, Z+1	; 0x01
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	11 97       	sbiw	r26, 0x01	; 1
    1140:	02 84       	ldd	r0, Z+10	; 0x0a
    1142:	f3 85       	ldd	r31, Z+11	; 0x0b
    1144:	e0 2d       	mov	r30, r0
    1146:	cd 01       	movw	r24, r26
    1148:	09 95       	icall
	g_fmiCallbackFunctions->logger((void*) 1, g_fmiInstanceName, fmi2OK, "logAll", "called &periodic_taskg_System_controller__Z12control_loopEV\n");
    114a:	8d b7       	in	r24, 0x3d	; 61
    114c:	9e b7       	in	r25, 0x3e	; 62
    114e:	09 97       	sbiw	r24, 0x09	; 9
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	9e bf       	out	0x3e, r25	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	8d bf       	out	0x3d, r24	; 61
    115a:	ed b7       	in	r30, 0x3d	; 61
    115c:	fe b7       	in	r31, 0x3e	; 62
    115e:	31 96       	adiw	r30, 0x01	; 1
    1160:	a0 91 18 03 	lds	r26, 0x0318
    1164:	b0 91 19 03 	lds	r27, 0x0319
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	80 91 5a 03 	lds	r24, 0x035A
    1178:	90 91 5b 03 	lds	r25, 0x035B
    117c:	93 83       	std	Z+3, r25	; 0x03
    117e:	82 83       	std	Z+2, r24	; 0x02
    1180:	14 82       	std	Z+4, r1	; 0x04
    1182:	87 eb       	ldi	r24, 0xB7	; 183
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	96 83       	std	Z+6, r25	; 0x06
    1188:	85 83       	std	Z+5, r24	; 0x05
    118a:	8e eb       	ldi	r24, 0xBE	; 190
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	90 87       	std	Z+8, r25	; 0x08
    1190:	87 83       	std	Z+7, r24	; 0x07
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	09 95       	icall
    1198:	8d b7       	in	r24, 0x3d	; 61
    119a:	9e b7       	in	r25, 0x3e	; 62
    119c:	09 96       	adiw	r24, 0x09	; 9
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	9e bf       	out	0x3e, r25	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	8d bf       	out	0x3d, r24	; 61
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <systemMain>:

	return fmi2OK;
}

void systemMain()
{
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
	TVP world = _Z5WorldEV(NULL);
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_Z5WorldEV>
    11ba:	8c 01       	movw	r16, r24
	CALL_FUNC(World, World, world, CLASS_World__Z3runEV);
    11bc:	dc 01       	movw	r26, r24
    11be:	13 96       	adiw	r26, 0x03	; 3
    11c0:	ed 91       	ld	r30, X+
    11c2:	fc 91       	ld	r31, X
    11c4:	14 97       	sbiw	r26, 0x04	; 4
    11c6:	a0 81       	ld	r26, Z
    11c8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ca:	ed 91       	ld	r30, X+
    11cc:	fc 91       	ld	r31, X
    11ce:	11 97       	sbiw	r26, 0x01	; 1
    11d0:	04 80       	ldd	r0, Z+4	; 0x04
    11d2:	f5 81       	ldd	r31, Z+5	; 0x05
    11d4:	e0 2d       	mov	r30, r0
    11d6:	cd 01       	movw	r24, r26
    11d8:	09 95       	icall
	vdmFree(world);
    11da:	c8 01       	movw	r24, r16
    11dc:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
}
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <vdmStep>:

/*
* Both time value are given in seconds
*/
fmi2Status vdmStep(fmi2Real currentCommunicationPoint, fmi2Real communicationStepSize)
{
    11e6:	6f 92       	push	r6
    11e8:	7f 92       	push	r7
    11ea:	8f 92       	push	r8
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	7b 01       	movw	r14, r22
    1204:	8c 01       	movw	r16, r24
    1206:	39 01       	movw	r6, r18
    1208:	4a 01       	movw	r8, r20

	/*  Call each thread the appropriate number of times.  */
	for(i = 0;  i < PERIODIC_GENERATED_COUNT; i++)
	{
		/*  Times align, sync took place last time.  */
		if(threads[i].lastExecuted >= currentCommunicationPoint)
    120a:	a0 90 03 02 	lds	r10, 0x0203
    120e:	b0 90 04 02 	lds	r11, 0x0204
    1212:	c0 90 05 02 	lds	r12, 0x0205
    1216:	d0 90 06 02 	lds	r13, 0x0206
    121a:	c6 01       	movw	r24, r12
    121c:	b5 01       	movw	r22, r10
    121e:	a8 01       	movw	r20, r16
    1220:	97 01       	movw	r18, r14
    1222:	0e 94 b2 3b 	call	0x7764	; 0x7764 <__gesf2>
    1226:	88 23       	and	r24, r24
    1228:	0c f4       	brge	.+2      	; 0x122c <vdmStep+0x46>
    122a:	46 c0       	rjmp	.+140    	; 0x12b8 <vdmStep+0xd2>
		{
			/*  Can not do anything, still waiting for the last step's turn to come.  */
			if(threads[i].lastExecuted >= currentCommunicationPoint + communicationStepSize)
    122c:	c8 01       	movw	r24, r16
    122e:	b7 01       	movw	r22, r14
    1230:	a4 01       	movw	r20, r8
    1232:	93 01       	movw	r18, r6
    1234:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    1238:	7b 01       	movw	r14, r22
    123a:	8c 01       	movw	r16, r24
    123c:	c6 01       	movw	r24, r12
    123e:	b5 01       	movw	r22, r10
    1240:	a8 01       	movw	r20, r16
    1242:	97 01       	movw	r18, r14
    1244:	0e 94 b2 3b 	call	0x7764	; 0x7764 <__gesf2>
    1248:	88 23       	and	r24, r24
    124a:	2c f0       	brlt	.+10     	; 0x1256 <vdmStep+0x70>
			{
				threadRunCount = 0;
				syncOutAllowed = fmi2False;
    124c:	10 92 fc 01 	sts	0x01FC, r1
    1250:	10 92 fb 01 	sts	0x01FB, r1
    1254:	2e c0       	rjmp	.+92     	; 0x12b2 <vdmStep+0xcc>
			}
			/*  Previous step will finish inside this step.
			*   At least one execution can be fit inside this step.
			*/
			else if(threads[i].lastExecuted + threads[i].period <= currentCommunicationPoint + communicationStepSize)
    1256:	60 90 fd 01 	lds	r6, 0x01FD
    125a:	70 90 fe 01 	lds	r7, 0x01FE
    125e:	80 90 ff 01 	lds	r8, 0x01FF
    1262:	90 90 00 02 	lds	r9, 0x0200
    1266:	c6 01       	movw	r24, r12
    1268:	b5 01       	movw	r22, r10
    126a:	a4 01       	movw	r20, r8
    126c:	93 01       	movw	r18, r6
    126e:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    1272:	a8 01       	movw	r20, r16
    1274:	97 01       	movw	r18, r14
    1276:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    127a:	18 16       	cp	r1, r24
    127c:	a4 f0       	brlt	.+40     	; 0x12a6 <vdmStep+0xc0>
			{
				/*  Find number of executions to fit inside of step, allow sync.  */
				threadRunCount = (currentCommunicationPoint + communicationStepSize - threads[i].lastExecuted) / threads[i].period;
    127e:	c8 01       	movw	r24, r16
    1280:	b7 01       	movw	r22, r14
    1282:	a6 01       	movw	r20, r12
    1284:	95 01       	movw	r18, r10
    1286:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    128a:	a4 01       	movw	r20, r8
    128c:	93 01       	movw	r18, r6
    128e:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    1292:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    1296:	eb 01       	movw	r28, r22
				syncOutAllowed = fmi2True;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	90 93 fc 01 	sts	0x01FC, r25
    12a0:	80 93 fb 01 	sts	0x01FB, r24
    12a4:	2c c0       	rjmp	.+88     	; 0x12fe <vdmStep+0x118>
			}
			/*  Can not execute, but can sync existing values at the end of this step.  */
			else 
			{
				threadRunCount = 0;
				syncOutAllowed = fmi2True;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	90 93 fc 01 	sts	0x01FC, r25
    12ae:	80 93 fb 01 	sts	0x01FB, r24
    12b2:	c0 e0       	ldi	r28, 0x00	; 0
    12b4:	d0 e0       	ldi	r29, 0x00	; 0
    12b6:	23 c0       	rjmp	.+70     	; 0x12fe <vdmStep+0x118>
			}
		}
		else
		{
			/*  Find number of executions to fit inside of step, allow sync because need to update regardless.  */
			threadRunCount = (currentCommunicationPoint + communicationStepSize - threads[i].lastExecuted) / threads[i].period;
    12b8:	c8 01       	movw	r24, r16
    12ba:	b7 01       	movw	r22, r14
    12bc:	a4 01       	movw	r20, r8
    12be:	93 01       	movw	r18, r6
    12c0:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    12c4:	a6 01       	movw	r20, r12
    12c6:	95 01       	movw	r18, r10
    12c8:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    12cc:	20 91 fd 01 	lds	r18, 0x01FD
    12d0:	30 91 fe 01 	lds	r19, 0x01FE
    12d4:	40 91 ff 01 	lds	r20, 0x01FF
    12d8:	50 91 00 02 	lds	r21, 0x0200
    12dc:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    12e0:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    12e4:	eb 01       	movw	r28, r22
			syncOutAllowed = fmi2True;
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	30 93 fc 01 	sts	0x01FC, r19
    12ee:	20 93 fb 01 	sts	0x01FB, r18

			/*  Period too long for this step so postpone until next step.  */
			if(threadRunCount == 0)
    12f2:	67 2b       	or	r22, r23
    12f4:	21 f4       	brne	.+8      	; 0x12fe <vdmStep+0x118>
			{
				syncOutAllowed = fmi2False;
    12f6:	10 92 fc 01 	sts	0x01FC, r1
    12fa:	10 92 fb 01 	sts	0x01FB, r1
    12fe:	00 e0       	ldi	r16, 0x00	; 0
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	21 c0       	rjmp	.+66     	; 0x1346 <vdmStep+0x160>
		}		

		/*  Execute each thread the number of times that its period fits in the step size.  */
		for(j = 0; j < threadRunCount; j++)
		{
			threads[i].call();
    1304:	e0 91 01 02 	lds	r30, 0x0201
    1308:	f0 91 02 02 	lds	r31, 0x0202
    130c:	09 95       	icall

			/*  Update the thread's last execution time.  */
			threads[i].lastExecuted += threads[i].period;
    130e:	60 91 03 02 	lds	r22, 0x0203
    1312:	70 91 04 02 	lds	r23, 0x0204
    1316:	80 91 05 02 	lds	r24, 0x0205
    131a:	90 91 06 02 	lds	r25, 0x0206
    131e:	20 91 fd 01 	lds	r18, 0x01FD
    1322:	30 91 fe 01 	lds	r19, 0x01FE
    1326:	40 91 ff 01 	lds	r20, 0x01FF
    132a:	50 91 00 02 	lds	r21, 0x0200
    132e:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    1332:	60 93 03 02 	sts	0x0203, r22
    1336:	70 93 04 02 	sts	0x0204, r23
    133a:	80 93 05 02 	sts	0x0205, r24
    133e:	90 93 06 02 	sts	0x0206, r25
				syncOutAllowed = fmi2False;
			}
		}		

		/*  Execute each thread the number of times that its period fits in the step size.  */
		for(j = 0; j < threadRunCount; j++)
    1342:	0f 5f       	subi	r16, 0xFF	; 255
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	0c 17       	cp	r16, r28
    1348:	1d 07       	cpc	r17, r29
    134a:	e4 f2       	brlt	.-72     	; 0x1304 <vdmStep+0x11e>

			/*  Update the thread's last execution time.  */
			threads[i].lastExecuted += threads[i].period;
		}

		vdm_gc();
    134c:	0e 94 27 24 	call	0x484e	; 0x484e <vdm_gc>

	/* Calculate maximum step size for next step.  Cyclic controllers with no feedback do not have
	a limit on how large a step they can take.  To be considered in the future for controllers
	with feedback.
	*/
	maxStepSize = INT_MAX * 1.0;
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	9e ef       	ldi	r25, 0xFE	; 254
    1354:	af ef       	ldi	r26, 0xFF	; 255
    1356:	b6 e4       	ldi	r27, 0x46	; 70
    1358:	80 93 c2 02 	sts	0x02C2, r24
    135c:	90 93 c3 02 	sts	0x02C3, r25
    1360:	a0 93 c4 02 	sts	0x02C4, r26
    1364:	b0 93 c5 02 	sts	0x02C5, r27

	/*  g_fmiCallbackFunctions->logger((void*) 1, g_fmiInstanceName, fmi2OK, "logDebug", "NOW:  %f, TP: %f, LE:  %f, STEP:  %f, SYNC:  %d, RUNS:  %d\n", currentCommunicationPoint, threads[0].period, threads[0].lastExecuted, communicationStepSize, syncOutAllowed, threadRunCount);  */

	return fmi2OK;
}
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	7f 90       	pop	r7
    1384:	6f 90       	pop	r6
    1386:	08 95       	ret

00001388 <systemDeInit>:
}


void systemDeInit()
{
	RobotSensor_static_shutdown();
    1388:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <RobotSensor_static_shutdown>
	Port_static_shutdown();
    138c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <Port_static_shutdown>
	IntPort_static_shutdown();
    1390:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <IntPort_static_shutdown>
	BoolPort_static_shutdown();
    1394:	0e 94 d7 01 	call	0x3ae	; 0x3ae <BoolPort_static_shutdown>
	RealPort_static_shutdown();
    1398:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <RealPort_static_shutdown>
	StringPort_static_shutdown();
    139c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <StringPort_static_shutdown>
	Controller_static_shutdown();
    13a0:	0e 94 a1 02 	call	0x542	; 0x542 <Controller_static_shutdown>
	System_static_shutdown();
    13a4:	0e 94 17 12 	call	0x242e	; 0x242e <System_static_shutdown>
	World_static_shutdown();
    13a8:	0e 94 4e 12 	call	0x249c	; 0x249c <World_static_shutdown>
	HardwareInterface_static_shutdown();
    13ac:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <HardwareInterface_static_shutdown>
	RobotServo_static_shutdown();
    13b0:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <RobotServo_static_shutdown>

	RobotSensor_const_shutdown();
    13b4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <RobotSensor_const_shutdown>
	Port_const_shutdown();
    13b8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <Port_const_shutdown>
	IntPort_const_shutdown();
    13bc:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <IntPort_const_shutdown>
	BoolPort_const_shutdown();
    13c0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <BoolPort_const_shutdown>
	RealPort_const_shutdown();
    13c4:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <RealPort_const_shutdown>
	StringPort_const_shutdown();
    13c8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <StringPort_const_shutdown>
	Controller_const_shutdown();
    13cc:	0e 94 a2 02 	call	0x544	; 0x544 <Controller_const_shutdown>
	System_const_shutdown();
    13d0:	0e 94 24 12 	call	0x2448	; 0x2448 <System_const_shutdown>
	World_const_shutdown();
    13d4:	0e 94 90 12 	call	0x2520	; 0x2520 <World_const_shutdown>
	HardwareInterface_const_shutdown();
    13d8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <HardwareInterface_const_shutdown>
	RobotServo_const_shutdown();
    13dc:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <RobotServo_const_shutdown>

	vdmFree(sys);
    13e0:	80 91 c0 02 	lds	r24, 0x02C0
    13e4:	90 91 c1 02 	lds	r25, 0x02C1
    13e8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	vdm_gc_shutdown();
    13ec:	0e 94 b1 24 	call	0x4962	; 0x4962 <vdm_gc_shutdown>
}
    13f0:	08 95       	ret

000013f2 <systemInit>:
};


void systemInit()
{
	vdm_gc_init();
    13f2:	0e 94 a5 22 	call	0x454a	; 0x454a <vdm_gc_init>

	int i;

	for(i = 0; i < PERIODIC_GENERATED_COUNT; i++) threads[i].period = threads[i].period / 1.0E9;
    13f6:	60 91 fd 01 	lds	r22, 0x01FD
    13fa:	70 91 fe 01 	lds	r23, 0x01FE
    13fe:	80 91 ff 01 	lds	r24, 0x01FF
    1402:	90 91 00 02 	lds	r25, 0x0200
    1406:	28 e2       	ldi	r18, 0x28	; 40
    1408:	3b e6       	ldi	r19, 0x6B	; 107
    140a:	4e e6       	ldi	r20, 0x6E	; 110
    140c:	5e e4       	ldi	r21, 0x4E	; 78
    140e:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    1412:	60 93 fd 01 	sts	0x01FD, r22
    1416:	70 93 fe 01 	sts	0x01FE, r23
    141a:	80 93 ff 01 	sts	0x01FF, r24
    141e:	90 93 00 02 	sts	0x0200, r25

	RobotSensor_const_init();
    1422:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <RobotSensor_const_init>
	Port_const_init();
    1426:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <Port_const_init>
	IntPort_const_init();
    142a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <IntPort_const_init>
	BoolPort_const_init();
    142e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <BoolPort_const_init>
	RealPort_const_init();
    1432:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <RealPort_const_init>
	StringPort_const_init();
    1436:	0e 94 6f 10 	call	0x20de	; 0x20de <StringPort_const_init>
	Controller_const_init();
    143a:	0e 94 cb 06 	call	0xd96	; 0xd96 <Controller_const_init>
	System_const_init();
    143e:	0e 94 38 12 	call	0x2470	; 0x2470 <System_const_init>
	World_const_init();
    1442:	0e 94 97 12 	call	0x252e	; 0x252e <World_const_init>
	HardwareInterface_const_init();
    1446:	0e 94 b3 0c 	call	0x1966	; 0x1966 <HardwareInterface_const_init>
	RobotServo_const_init();
    144a:	0e 94 66 10 	call	0x20cc	; 0x20cc <RobotServo_const_init>

	RobotSensor_static_init();
    144e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <RobotSensor_static_init>
	Port_static_init();
    1452:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Port_static_init>
	IntPort_static_init();
    1456:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <IntPort_static_init>
	BoolPort_static_init();
    145a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <BoolPort_static_init>
	RealPort_static_init();
    145e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <RealPort_static_init>
	StringPort_static_init();
    1462:	0e 94 71 10 	call	0x20e2	; 0x20e2 <StringPort_static_init>
	Controller_static_init();
    1466:	0e 94 a0 02 	call	0x540	; 0x540 <Controller_static_init>
	System_static_init();
    146a:	0e 94 2b 12 	call	0x2456	; 0x2456 <System_static_init>
	World_static_init();
    146e:	0e 94 4d 12 	call	0x249a	; 0x249a <World_static_init>
	HardwareInterface_static_init();
    1472:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HardwareInterface_static_init>
	RobotServo_static_init();
    1476:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <RobotServo_static_init>

	sys = _Z6SystemEV(NULL);
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_Z6SystemEV>
    1482:	90 93 c1 02 	sts	0x02C1, r25
    1486:	80 93 c0 02 	sts	0x02C0, r24

}
    148a:	08 95       	ret

0000148c <syncOutputsToBuffers>:
		TVP newValue = newReal(fmiBuffer.realBuffer[7]);
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_forwardSpeed,value,newValue);
		vdmFree(newValue);
	}
}
void syncOutputsToBuffers(){
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
	if(syncOutAllowed == fmi2False) return;
    1490:	80 91 fb 01 	lds	r24, 0x01FB
    1494:	90 91 fc 01 	lds	r25, 0x01FC
    1498:	89 2b       	or	r24, r25
    149a:	09 f4       	brne	.+2      	; 0x149e <syncOutputsToBuffers+0x12>
    149c:	5c c0       	rjmp	.+184    	; 0x1556 <syncOutputsToBuffers+0xca>

	{
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,servo_left_out);
    149e:	e0 91 0c 03 	lds	r30, 0x030C
    14a2:	f0 91 0d 03 	lds	r31, 0x030D
    14a6:	03 80       	ldd	r0, Z+3	; 0x03
    14a8:	f4 81       	ldd	r31, Z+4	; 0x04
    14aa:	e0 2d       	mov	r30, r0
    14ac:	01 90       	ld	r0, Z+
    14ae:	f0 81       	ld	r31, Z
    14b0:	e0 2d       	mov	r30, r0
    14b2:	86 85       	ldd	r24, Z+14	; 0x0e
    14b4:	97 85       	ldd	r25, Z+15	; 0x0f
    14b6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    14ba:	8c 01       	movw	r16, r24
		TVP v = GET_FIELD(RealPort,RealPort,p,value);
    14bc:	dc 01       	movw	r26, r24
    14be:	13 96       	adiw	r26, 0x03	; 3
    14c0:	ed 91       	ld	r30, X+
    14c2:	fc 91       	ld	r31, X
    14c4:	14 97       	sbiw	r26, 0x04	; 4
    14c6:	01 90       	ld	r0, Z+
    14c8:	f0 81       	ld	r31, Z
    14ca:	e0 2d       	mov	r30, r0
    14cc:	86 85       	ldd	r24, Z+14	; 0x0e
    14ce:	97 85       	ldd	r25, Z+15	; 0x0f
    14d0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    14d4:	fc 01       	movw	r30, r24
		fmiBuffer.realBuffer[3]=v->value.doubleVal;
    14d6:	83 81       	ldd	r24, Z+3	; 0x03
    14d8:	94 81       	ldd	r25, Z+4	; 0x04
    14da:	a5 81       	ldd	r26, Z+5	; 0x05
    14dc:	b6 81       	ldd	r27, Z+6	; 0x06
    14de:	80 93 36 03 	sts	0x0336, r24
    14e2:	90 93 37 03 	sts	0x0337, r25
    14e6:	a0 93 38 03 	sts	0x0338, r26
    14ea:	b0 93 39 03 	sts	0x0339, r27
		vdmFree(v);vdmFree(p);
    14ee:	cf 01       	movw	r24, r30
    14f0:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    14f4:	c8 01       	movw	r24, r16
    14f6:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
	{
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,servo_right_out);
    14fa:	e0 91 0c 03 	lds	r30, 0x030C
    14fe:	f0 91 0d 03 	lds	r31, 0x030D
    1502:	03 80       	ldd	r0, Z+3	; 0x03
    1504:	f4 81       	ldd	r31, Z+4	; 0x04
    1506:	e0 2d       	mov	r30, r0
    1508:	01 90       	ld	r0, Z+
    150a:	f0 81       	ld	r31, Z
    150c:	e0 2d       	mov	r30, r0
    150e:	84 85       	ldd	r24, Z+12	; 0x0c
    1510:	95 85       	ldd	r25, Z+13	; 0x0d
    1512:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1516:	8c 01       	movw	r16, r24
		TVP v = GET_FIELD(RealPort,RealPort,p,value);
    1518:	dc 01       	movw	r26, r24
    151a:	13 96       	adiw	r26, 0x03	; 3
    151c:	ed 91       	ld	r30, X+
    151e:	fc 91       	ld	r31, X
    1520:	14 97       	sbiw	r26, 0x04	; 4
    1522:	01 90       	ld	r0, Z+
    1524:	f0 81       	ld	r31, Z
    1526:	e0 2d       	mov	r30, r0
    1528:	86 85       	ldd	r24, Z+14	; 0x0e
    152a:	97 85       	ldd	r25, Z+15	; 0x0f
    152c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1530:	fc 01       	movw	r30, r24
		fmiBuffer.realBuffer[5]=v->value.doubleVal;
    1532:	83 81       	ldd	r24, Z+3	; 0x03
    1534:	94 81       	ldd	r25, Z+4	; 0x04
    1536:	a5 81       	ldd	r26, Z+5	; 0x05
    1538:	b6 81       	ldd	r27, Z+6	; 0x06
    153a:	80 93 3e 03 	sts	0x033E, r24
    153e:	90 93 3f 03 	sts	0x033F, r25
    1542:	a0 93 40 03 	sts	0x0340, r26
    1546:	b0 93 41 03 	sts	0x0341, r27
		vdmFree(v);vdmFree(p);
    154a:	cf 01       	movw	r24, r30
    154c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    1550:	c8 01       	movw	r24, r16
    1552:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
}
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <syncInputsToModel>:
TVP sys = NULL;
fmi2Boolean syncOutAllowed = fmi2True;
fmi2Real maxStepSize = 0.0;


void syncInputsToModel(){
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[0]);
    1568:	60 91 2a 03 	lds	r22, 0x032A
    156c:	70 91 2b 03 	lds	r23, 0x032B
    1570:	80 91 2c 03 	lds	r24, 0x032C
    1574:	90 91 2d 03 	lds	r25, 0x032D
    1578:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    157c:	7c 01       	movw	r14, r24
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_forwardRotate,value,newValue);
    157e:	e0 91 ca 02 	lds	r30, 0x02CA
    1582:	f0 91 cb 02 	lds	r31, 0x02CB
    1586:	03 80       	ldd	r0, Z+3	; 0x03
    1588:	f4 81       	ldd	r31, Z+4	; 0x04
    158a:	e0 2d       	mov	r30, r0
    158c:	01 90       	ld	r0, Z+
    158e:	f0 81       	ld	r31, Z
    1590:	e0 2d       	mov	r30, r0
    1592:	86 85       	ldd	r24, Z+14	; 0x0e
    1594:	97 85       	ldd	r25, Z+15	; 0x0f
    1596:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    159a:	e0 91 ca 02 	lds	r30, 0x02CA
    159e:	f0 91 cb 02 	lds	r31, 0x02CB
    15a2:	03 80       	ldd	r0, Z+3	; 0x03
    15a4:	f4 81       	ldd	r31, Z+4	; 0x04
    15a6:	e0 2d       	mov	r30, r0
    15a8:	00 81       	ld	r16, Z
    15aa:	11 81       	ldd	r17, Z+1	; 0x01
    15ac:	c7 01       	movw	r24, r14
    15ae:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    15b2:	d8 01       	movw	r26, r16
    15b4:	1f 96       	adiw	r26, 0x0f	; 15
    15b6:	9c 93       	st	X, r25
    15b8:	8e 93       	st	-X, r24
    15ba:	1e 97       	sbiw	r26, 0x0e	; 14
		vdmFree(newValue);
    15bc:	c7 01       	movw	r24, r14
    15be:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[1]);
    15c2:	60 91 2e 03 	lds	r22, 0x032E
    15c6:	70 91 2f 03 	lds	r23, 0x032F
    15ca:	80 91 30 03 	lds	r24, 0x0330
    15ce:	90 91 31 03 	lds	r25, 0x0331
    15d2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    15d6:	6c 01       	movw	r12, r24
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,leftVal);
    15d8:	e0 91 0c 03 	lds	r30, 0x030C
    15dc:	f0 91 0d 03 	lds	r31, 0x030D
    15e0:	03 80       	ldd	r0, Z+3	; 0x03
    15e2:	f4 81       	ldd	r31, Z+4	; 0x04
    15e4:	e0 2d       	mov	r30, r0
    15e6:	01 90       	ld	r0, Z+
    15e8:	f0 81       	ld	r31, Z
    15ea:	e0 2d       	mov	r30, r0
    15ec:	86 81       	ldd	r24, Z+6	; 0x06
    15ee:	97 81       	ldd	r25, Z+7	; 0x07
    15f0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    15f4:	8c 01       	movw	r16, r24
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    15f6:	dc 01       	movw	r26, r24
    15f8:	13 96       	adiw	r26, 0x03	; 3
    15fa:	ed 91       	ld	r30, X+
    15fc:	fc 91       	ld	r31, X
    15fe:	14 97       	sbiw	r26, 0x04	; 4
    1600:	01 90       	ld	r0, Z+
    1602:	f0 81       	ld	r31, Z
    1604:	e0 2d       	mov	r30, r0
    1606:	86 85       	ldd	r24, Z+14	; 0x0e
    1608:	97 85       	ldd	r25, Z+15	; 0x0f
    160a:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    160e:	d8 01       	movw	r26, r16
    1610:	13 96       	adiw	r26, 0x03	; 3
    1612:	ed 91       	ld	r30, X+
    1614:	fc 91       	ld	r31, X
    1616:	14 97       	sbiw	r26, 0x04	; 4
    1618:	e0 80       	ld	r14, Z
    161a:	f1 80       	ldd	r15, Z+1	; 0x01
    161c:	c6 01       	movw	r24, r12
    161e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1622:	f7 01       	movw	r30, r14
    1624:	97 87       	std	Z+15, r25	; 0x0f
    1626:	86 87       	std	Z+14, r24	; 0x0e
		vdmFree(newValue);vdmFree(p);
    1628:	c6 01       	movw	r24, r12
    162a:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    162e:	c8 01       	movw	r24, r16
    1630:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[2]);
    1634:	60 91 32 03 	lds	r22, 0x0332
    1638:	70 91 33 03 	lds	r23, 0x0333
    163c:	80 91 34 03 	lds	r24, 0x0334
    1640:	90 91 35 03 	lds	r25, 0x0335
    1644:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    1648:	6c 01       	movw	r12, r24
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,rightVal);
    164a:	e0 91 0c 03 	lds	r30, 0x030C
    164e:	f0 91 0d 03 	lds	r31, 0x030D
    1652:	03 80       	ldd	r0, Z+3	; 0x03
    1654:	f4 81       	ldd	r31, Z+4	; 0x04
    1656:	e0 2d       	mov	r30, r0
    1658:	01 90       	ld	r0, Z+
    165a:	f0 81       	ld	r31, Z
    165c:	e0 2d       	mov	r30, r0
    165e:	80 85       	ldd	r24, Z+8	; 0x08
    1660:	91 85       	ldd	r25, Z+9	; 0x09
    1662:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1666:	8c 01       	movw	r16, r24
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    1668:	dc 01       	movw	r26, r24
    166a:	13 96       	adiw	r26, 0x03	; 3
    166c:	ed 91       	ld	r30, X+
    166e:	fc 91       	ld	r31, X
    1670:	14 97       	sbiw	r26, 0x04	; 4
    1672:	01 90       	ld	r0, Z+
    1674:	f0 81       	ld	r31, Z
    1676:	e0 2d       	mov	r30, r0
    1678:	86 85       	ldd	r24, Z+14	; 0x0e
    167a:	97 85       	ldd	r25, Z+15	; 0x0f
    167c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    1680:	d8 01       	movw	r26, r16
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	ed 91       	ld	r30, X+
    1686:	fc 91       	ld	r31, X
    1688:	14 97       	sbiw	r26, 0x04	; 4
    168a:	e0 80       	ld	r14, Z
    168c:	f1 80       	ldd	r15, Z+1	; 0x01
    168e:	c6 01       	movw	r24, r12
    1690:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1694:	f7 01       	movw	r30, r14
    1696:	97 87       	std	Z+15, r25	; 0x0f
    1698:	86 87       	std	Z+14, r24	; 0x0e
		vdmFree(newValue);vdmFree(p);
    169a:	c6 01       	movw	r24, r12
    169c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    16a0:	c8 01       	movw	r24, r16
    16a2:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[4]);
    16a6:	60 91 3a 03 	lds	r22, 0x033A
    16aa:	70 91 3b 03 	lds	r23, 0x033B
    16ae:	80 91 3c 03 	lds	r24, 0x033C
    16b2:	90 91 3d 03 	lds	r25, 0x033D
    16b6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    16ba:	6c 01       	movw	r12, r24
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,total_energy_used);
    16bc:	e0 91 0c 03 	lds	r30, 0x030C
    16c0:	f0 91 0d 03 	lds	r31, 0x030D
    16c4:	03 80       	ldd	r0, Z+3	; 0x03
    16c6:	f4 81       	ldd	r31, Z+4	; 0x04
    16c8:	e0 2d       	mov	r30, r0
    16ca:	01 90       	ld	r0, Z+
    16cc:	f0 81       	ld	r31, Z
    16ce:	e0 2d       	mov	r30, r0
    16d0:	82 85       	ldd	r24, Z+10	; 0x0a
    16d2:	93 85       	ldd	r25, Z+11	; 0x0b
    16d4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    16d8:	8c 01       	movw	r16, r24
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    16da:	dc 01       	movw	r26, r24
    16dc:	13 96       	adiw	r26, 0x03	; 3
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	14 97       	sbiw	r26, 0x04	; 4
    16e4:	01 90       	ld	r0, Z+
    16e6:	f0 81       	ld	r31, Z
    16e8:	e0 2d       	mov	r30, r0
    16ea:	86 85       	ldd	r24, Z+14	; 0x0e
    16ec:	97 85       	ldd	r25, Z+15	; 0x0f
    16ee:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    16f2:	d8 01       	movw	r26, r16
    16f4:	13 96       	adiw	r26, 0x03	; 3
    16f6:	ed 91       	ld	r30, X+
    16f8:	fc 91       	ld	r31, X
    16fa:	14 97       	sbiw	r26, 0x04	; 4
    16fc:	e0 80       	ld	r14, Z
    16fe:	f1 80       	ldd	r15, Z+1	; 0x01
    1700:	c6 01       	movw	r24, r12
    1702:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1706:	f7 01       	movw	r30, r14
    1708:	97 87       	std	Z+15, r25	; 0x0f
    170a:	86 87       	std	Z+14, r24	; 0x0e
		vdmFree(newValue);vdmFree(p);
    170c:	c6 01       	movw	r24, r12
    170e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    1712:	c8 01       	movw	r24, r16
    1714:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[6]);
    1718:	60 91 42 03 	lds	r22, 0x0342
    171c:	70 91 43 03 	lds	r23, 0x0343
    1720:	80 91 44 03 	lds	r24, 0x0344
    1724:	90 91 45 03 	lds	r25, 0x0345
    1728:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    172c:	7c 01       	movw	r14, r24
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_backwardRotate,value,newValue);
    172e:	e0 91 cc 02 	lds	r30, 0x02CC
    1732:	f0 91 cd 02 	lds	r31, 0x02CD
    1736:	03 80       	ldd	r0, Z+3	; 0x03
    1738:	f4 81       	ldd	r31, Z+4	; 0x04
    173a:	e0 2d       	mov	r30, r0
    173c:	01 90       	ld	r0, Z+
    173e:	f0 81       	ld	r31, Z
    1740:	e0 2d       	mov	r30, r0
    1742:	86 85       	ldd	r24, Z+14	; 0x0e
    1744:	97 85       	ldd	r25, Z+15	; 0x0f
    1746:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    174a:	e0 91 cc 02 	lds	r30, 0x02CC
    174e:	f0 91 cd 02 	lds	r31, 0x02CD
    1752:	03 80       	ldd	r0, Z+3	; 0x03
    1754:	f4 81       	ldd	r31, Z+4	; 0x04
    1756:	e0 2d       	mov	r30, r0
    1758:	00 81       	ld	r16, Z
    175a:	11 81       	ldd	r17, Z+1	; 0x01
    175c:	c7 01       	movw	r24, r14
    175e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1762:	d8 01       	movw	r26, r16
    1764:	1f 96       	adiw	r26, 0x0f	; 15
    1766:	9c 93       	st	X, r25
    1768:	8e 93       	st	-X, r24
    176a:	1e 97       	sbiw	r26, 0x0e	; 14
		vdmFree(newValue);
    176c:	c7 01       	movw	r24, r14
    176e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[7]);
    1772:	60 91 46 03 	lds	r22, 0x0346
    1776:	70 91 47 03 	lds	r23, 0x0347
    177a:	80 91 48 03 	lds	r24, 0x0348
    177e:	90 91 49 03 	lds	r25, 0x0349
    1782:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    1786:	7c 01       	movw	r14, r24
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_forwardSpeed,value,newValue);
    1788:	e0 91 c8 02 	lds	r30, 0x02C8
    178c:	f0 91 c9 02 	lds	r31, 0x02C9
    1790:	03 80       	ldd	r0, Z+3	; 0x03
    1792:	f4 81       	ldd	r31, Z+4	; 0x04
    1794:	e0 2d       	mov	r30, r0
    1796:	01 90       	ld	r0, Z+
    1798:	f0 81       	ld	r31, Z
    179a:	e0 2d       	mov	r30, r0
    179c:	86 85       	ldd	r24, Z+14	; 0x0e
    179e:	97 85       	ldd	r25, Z+15	; 0x0f
    17a0:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    17a4:	e0 91 c8 02 	lds	r30, 0x02C8
    17a8:	f0 91 c9 02 	lds	r31, 0x02C9
    17ac:	03 80       	ldd	r0, Z+3	; 0x03
    17ae:	f4 81       	ldd	r31, Z+4	; 0x04
    17b0:	e0 2d       	mov	r30, r0
    17b2:	00 81       	ld	r16, Z
    17b4:	11 81       	ldd	r17, Z+1	; 0x01
    17b6:	c7 01       	movw	r24, r14
    17b8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    17bc:	f8 01       	movw	r30, r16
    17be:	97 87       	std	Z+15, r25	; 0x0f
    17c0:	86 87       	std	Z+14, r24	; 0x0e
		vdmFree(newValue);
    17c2:	c7 01       	movw	r24, r14
    17c4:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
}
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	08 95       	ret

000017d6 <HardwareInterface_static_init>:


 void HardwareInterface_static_init()	{

return ;
}
    17d6:	08 95       	ret

000017d8 <HardwareInterface_static_shutdown>:


 void HardwareInterface_static_shutdown()	{

return ;
}
    17d8:	08 95       	ret

000017da <HardwareInterface_Constructor>:
 *
 --------------------------------- */
 
 
HardwareInterfaceCLASS HardwareInterface_Constructor(HardwareInterfaceCLASS this_ptr)
{
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24

	if(this_ptr==NULL)
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <HardwareInterface_Constructor+0x1a>
	{
		this_ptr = (HardwareInterfaceCLASS) malloc(sizeof(struct HardwareInterface));
    17e4:	82 e1       	ldi	r24, 0x12	; 18
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    17ec:	ec 01       	movw	r28, r24
	}

	if(this_ptr!=NULL)
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <HardwareInterface_Constructor+0x1a>
    17f2:	4b c0       	rjmp	.+150    	; 0x188a <HardwareInterface_Constructor+0xb0>
	{
	
			
		/*  HardwareInterface init  */
		this_ptr->_HardwareInterface_id = CLASS_ID_HardwareInterface_ID;
    17f4:	89 e0       	ldi	r24, 0x09	; 9
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9b 83       	std	Y+3, r25	; 0x03
    17fa:	8a 83       	std	Y+2, r24	; 0x02
		this_ptr->_HardwareInterface_refs = 0;
    17fc:	1d 82       	std	Y+5, r1	; 0x05
    17fe:	1c 82       	std	Y+4, r1	; 0x04
		this_ptr->_HardwareInterface_pVTable=VTableArrayForHardwareInterface;
    1800:	87 e0       	ldi	r24, 0x07	; 7
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	99 83       	std	Y+1, r25	; 0x01
    1806:	88 83       	st	Y, r24


 static  TVP _Z18fieldInitializer16EV(HardwareInterfaceCLASS this)	{
/* HardwareInterface.vdmrt 15:32 */
TVP ret_21 = _Z8RealPortER(NULL, newReal(0.0))
;
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    1814:	bc 01       	movw	r22, r24
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>
		/*  HardwareInterface init  */
		this_ptr->_HardwareInterface_id = CLASS_ID_HardwareInterface_ID;
		this_ptr->_HardwareInterface_refs = 0;
		this_ptr->_HardwareInterface_pVTable=VTableArrayForHardwareInterface;

																this_ptr->m_HardwareInterface_leftVal= _Z18fieldInitializer16EV(this_ptr);
    181e:	9f 83       	std	Y+7, r25	; 0x07
    1820:	8e 83       	std	Y+6, r24	; 0x06


 static  TVP _Z18fieldInitializer17EV(HardwareInterfaceCLASS this)	{
/* HardwareInterface.vdmrt 17:33 */
TVP ret_20 = _Z8RealPortER(NULL, newReal(0.0))
;
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    182e:	bc 01       	movw	r22, r24
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>
		this_ptr->_HardwareInterface_id = CLASS_ID_HardwareInterface_ID;
		this_ptr->_HardwareInterface_refs = 0;
		this_ptr->_HardwareInterface_pVTable=VTableArrayForHardwareInterface;

																this_ptr->m_HardwareInterface_leftVal= _Z18fieldInitializer16EV(this_ptr);
						this_ptr->m_HardwareInterface_rightVal= _Z18fieldInitializer17EV(this_ptr);
    1838:	99 87       	std	Y+9, r25	; 0x09
    183a:	88 87       	std	Y+8, r24	; 0x08


 static  TVP _Z18fieldInitializer18EV(HardwareInterfaceCLASS this)	{
/* HardwareInterface.vdmrt 19:42 */
TVP ret_19 = _Z8RealPortER(NULL, newReal(0.0))
;
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    1848:	bc 01       	movw	r22, r24
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>
		this_ptr->_HardwareInterface_refs = 0;
		this_ptr->_HardwareInterface_pVTable=VTableArrayForHardwareInterface;

																this_ptr->m_HardwareInterface_leftVal= _Z18fieldInitializer16EV(this_ptr);
						this_ptr->m_HardwareInterface_rightVal= _Z18fieldInitializer17EV(this_ptr);
						this_ptr->m_HardwareInterface_total_energy_used= _Z18fieldInitializer18EV(this_ptr);
    1852:	9b 87       	std	Y+11, r25	; 0x0b
    1854:	8a 87       	std	Y+10, r24	; 0x0a


 static  TVP _Z18fieldInitializer19EV(HardwareInterfaceCLASS this)	{
/* HardwareInterface.vdmrt 24:40 */
TVP ret_18 = _Z8RealPortER(NULL, newReal(0.0))
;
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    1862:	bc 01       	movw	r22, r24
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>
		this_ptr->_HardwareInterface_pVTable=VTableArrayForHardwareInterface;

																this_ptr->m_HardwareInterface_leftVal= _Z18fieldInitializer16EV(this_ptr);
						this_ptr->m_HardwareInterface_rightVal= _Z18fieldInitializer17EV(this_ptr);
						this_ptr->m_HardwareInterface_total_energy_used= _Z18fieldInitializer18EV(this_ptr);
						this_ptr->m_HardwareInterface_servo_right_out= _Z18fieldInitializer19EV(this_ptr);
    186c:	9d 87       	std	Y+13, r25	; 0x0d
    186e:	8c 87       	std	Y+12, r24	; 0x0c
 

 static  TVP _Z18fieldInitializer20EV(HardwareInterfaceCLASS this)	{
/* HardwareInterface.vdmrt 26:39 */
TVP ret_17 = _Z8RealPortER(NULL, newReal(0.0))
;
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    187c:	bc 01       	movw	r22, r24
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>

																this_ptr->m_HardwareInterface_leftVal= _Z18fieldInitializer16EV(this_ptr);
						this_ptr->m_HardwareInterface_rightVal= _Z18fieldInitializer17EV(this_ptr);
						this_ptr->m_HardwareInterface_total_energy_used= _Z18fieldInitializer18EV(this_ptr);
						this_ptr->m_HardwareInterface_servo_right_out= _Z18fieldInitializer19EV(this_ptr);
						this_ptr->m_HardwareInterface_servo_left_out= _Z18fieldInitializer20EV(this_ptr);
    1886:	9f 87       	std	Y+15, r25	; 0x0f
    1888:	8e 87       	std	Y+14, r24	; 0x0e
			}

	return this_ptr;
}
    188a:	ce 01       	movw	r24, r28
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	08 95       	ret

00001892 <_Z17HardwareInterfaceEV>:
 TVP _Z17HardwareInterfaceEV(HardwareInterfaceCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    1892:	89 2b       	or	r24, r25
    1894:	19 f0       	breq	.+6      	; 0x189c <_Z17HardwareInterfaceEV+0xa>
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	18 c0       	rjmp	.+48     	; 0x18cc <_Z17HardwareInterfaceEV+0x3a>
}

/*  Method for creating new "class"  */
static TVP new()
{
	HardwareInterfaceCLASS ptr=HardwareInterface_Constructor(NULL);
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 ed 0b 	call	0x17da	; 0x17da <HardwareInterface_Constructor>
    18a4:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_HardwareInterface_id, &ptr->_HardwareInterface_refs, (freeVdmClassFunction)&HardwareInterface_free, ptr)});
    18a6:	bc 01       	movw	r22, r24
    18a8:	6c 5f       	subi	r22, 0xFC	; 252
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	40 ea       	ldi	r20, 0xA0	; 160
    18b2:	5c e0       	ldi	r21, 0x0C	; 12
    18b4:	9f 01       	movw	r18, r30
    18b6:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	HardwareInterfaceCLASS ptr=HardwareInterface_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    18c4:	8b e0       	ldi	r24, 0x0B	; 11
    18c6:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
    18ca:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, HardwareInterface);
}
;

return __buf;
}
    18cc:	c9 01       	movw	r24, r18
    18ce:	08 95       	ret

000018d0 <HardwareInterface_const_shutdown>:



 void HardwareInterface_const_shutdown()	{

vdmFree(numFields_6);
    18d0:	80 91 c6 02 	lds	r24, 0x02C6
    18d4:	90 91 c7 02 	lds	r25, 0x02C7
    18d8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

vdmFree(g_HardwareInterface_forwardSpeed);
    18dc:	80 91 c8 02 	lds	r24, 0x02C8
    18e0:	90 91 c9 02 	lds	r25, 0x02C9
    18e4:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

vdmFree(g_HardwareInterface_forwardRotate);
    18e8:	80 91 ca 02 	lds	r24, 0x02CA
    18ec:	90 91 cb 02 	lds	r25, 0x02CB
    18f0:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

vdmFree(g_HardwareInterface_backwardRotate);
    18f4:	80 91 cc 02 	lds	r24, 0x02CC
    18f8:	90 91 cd 02 	lds	r25, 0x02CD
    18fc:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
    1900:	08 95       	ret

00001902 <HardwareInterface_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void HardwareInterface_free_fields(struct HardwareInterface *this)
{
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	8c 01       	movw	r16, r24
						vdmFree(this->m_HardwareInterface_leftVal);
    1908:	fc 01       	movw	r30, r24
    190a:	86 81       	ldd	r24, Z+6	; 0x06
    190c:	97 81       	ldd	r25, Z+7	; 0x07
    190e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(this->m_HardwareInterface_rightVal);
    1912:	f8 01       	movw	r30, r16
    1914:	80 85       	ldd	r24, Z+8	; 0x08
    1916:	91 85       	ldd	r25, Z+9	; 0x09
    1918:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(this->m_HardwareInterface_total_energy_used);
    191c:	f8 01       	movw	r30, r16
    191e:	82 85       	ldd	r24, Z+10	; 0x0a
    1920:	93 85       	ldd	r25, Z+11	; 0x0b
    1922:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(this->m_HardwareInterface_servo_right_out);
    1926:	f8 01       	movw	r30, r16
    1928:	84 85       	ldd	r24, Z+12	; 0x0c
    192a:	95 85       	ldd	r25, Z+13	; 0x0d
    192c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(this->m_HardwareInterface_servo_left_out);
    1930:	f8 01       	movw	r30, r16
    1932:	86 85       	ldd	r24, Z+14	; 0x0e
    1934:	97 85       	ldd	r25, Z+15	; 0x0f
    1936:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <HardwareInterface_free>:

static void HardwareInterface_free(struct HardwareInterface *this)
{
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	ec 01       	movw	r28, r24
	--this->_HardwareInterface_refs;
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9d 83       	std	Y+5, r25	; 0x05
    194e:	8c 83       	std	Y+4, r24	; 0x04
	if (this->_HardwareInterface_refs < 1)
    1950:	89 2b       	or	r24, r25
    1952:	31 f4       	brne	.+12     	; 0x1960 <HardwareInterface_free+0x20>
	{
		HardwareInterface_free_fields(this);
    1954:	ce 01       	movw	r24, r28
    1956:	0e 94 81 0c 	call	0x1902	; 0x1902 <HardwareInterface_free_fields>
		free(this);
    195a:	ce 01       	movw	r24, r28
    195c:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <HardwareInterface_const_init>:


 static  TVP _Z18fieldInitializer12EV()	{

TVP ret_25 = newInt(8)
;
    1966:	88 e0       	ldi	r24, 0x08	; 8
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>



 void HardwareInterface_const_init()	{

numFields_6 = _Z18fieldInitializer12EV();
    196e:	90 93 c7 02 	sts	0x02C7, r25
    1972:	80 93 c6 02 	sts	0x02C6, r24


 static  TVP _Z18fieldInitializer13EV()	{
/* HardwareInterface.vdmrt 5:38 */
TVP ret_24 = _Z8RealPortER(NULL, newReal(4.0))
;
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	80 e8       	ldi	r24, 0x80	; 128
    197c:	90 e4       	ldi	r25, 0x40	; 64
    197e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    1982:	bc 01       	movw	r22, r24
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>

 void HardwareInterface_const_init()	{

numFields_6 = _Z18fieldInitializer12EV();

g_HardwareInterface_forwardSpeed = _Z18fieldInitializer13EV();
    198c:	90 93 c9 02 	sts	0x02C9, r25
    1990:	80 93 c8 02 	sts	0x02C8, r24


 static  TVP _Z18fieldInitializer14EV()	{
/* HardwareInterface.vdmrt 7:39 */
TVP ret_23 = _Z8RealPortER(NULL, newReal(5.0))
;
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	80 ea       	ldi	r24, 0xA0	; 160
    199a:	90 e4       	ldi	r25, 0x40	; 64
    199c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    19a0:	bc 01       	movw	r22, r24
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>

numFields_6 = _Z18fieldInitializer12EV();

g_HardwareInterface_forwardSpeed = _Z18fieldInitializer13EV();

g_HardwareInterface_forwardRotate = _Z18fieldInitializer14EV();
    19aa:	90 93 cb 02 	sts	0x02CB, r25
    19ae:	80 93 ca 02 	sts	0x02CA, r24


 static  TVP _Z18fieldInitializer15EV()	{
/* HardwareInterface.vdmrt 9:40 */
TVP ret_22 = _Z8RealPortER(NULL, newReal(1.0))
;
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	80 e8       	ldi	r24, 0x80	; 128
    19b8:	9f e3       	ldi	r25, 0x3F	; 63
    19ba:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    19be:	bc 01       	movw	r22, r24
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8RealPortER>

g_HardwareInterface_forwardSpeed = _Z18fieldInitializer13EV();

g_HardwareInterface_forwardRotate = _Z18fieldInitializer14EV();

g_HardwareInterface_backwardRotate = _Z18fieldInitializer15EV();
    19c8:	90 93 cd 02 	sts	0x02CD, r25
    19cc:	80 93 cc 02 	sts	0x02CC, r24

return ;
}
    19d0:	08 95       	ret

000019d2 <IntPort_const_init>:


 void IntPort_const_init()	{

return ;
}
    19d2:	08 95       	ret

000019d4 <IntPort_const_shutdown>:


 void IntPort_const_shutdown()	{

return ;
}
    19d4:	08 95       	ret

000019d6 <IntPort_static_init>:


 void IntPort_static_init()	{

return ;
}
    19d6:	08 95       	ret

000019d8 <IntPort_static_shutdown>:


 void IntPort_static_shutdown()	{

return ;
}
    19d8:	08 95       	ret

000019da <_Z8getValueEV>:

/* Fmi.vdmrt 46:12 */
 static  TVP _Z8getValueEV(IntPortCLASS this)	{
/* Fmi.vdmrt 47:26 */
TVP ret_5 = vdmCloneGC(GET_FIELD_PTR_GC(IntPort, IntPort, this, value), NULL)
;
    19da:	fc 01       	movw	r30, r24
    19dc:	86 85       	ldd	r24, Z+14	; 0x0e
    19de:	97 85       	ldd	r25, Z+15	; 0x0f
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
/* Fmi.vdmrt 47:19 */
return ret_5;
}
    19f0:	08 95       	ret

000019f2 <Port__Z8getValueEV>:
 static  TVP Port__Z8getValueEV(PortCLASS base)	{

IntPortCLASS this = CLASS_DOWNCAST(Port, IntPort, base)
;

return _Z8getValueEV(this);
    19f2:	0e 94 ed 0c 	call	0x19da	; 0x19da <_Z8getValueEV>
}
    19f6:	08 95       	ret

000019f8 <IntPort_free_fields>:
 *
 --------------------------------- */

void IntPort_free_fields(struct IntPort *this)
{
		vdmFree(this->m_IntPort_value);
    19f8:	fc 01       	movw	r30, r24
    19fa:	86 85       	ldd	r24, Z+14	; 0x0e
    19fc:	97 85       	ldd	r25, Z+15	; 0x0f
    19fe:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
    1a02:	08 95       	ret

00001a04 <IntPort_free>:

static void IntPort_free(struct IntPort *this)
{
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	ec 01       	movw	r28, r24
	--this->_IntPort_refs;
    1a0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9d 87       	std	Y+13, r25	; 0x0d
    1a12:	8c 87       	std	Y+12, r24	; 0x0c
	if (this->_IntPort_refs < 1)
    1a14:	89 2b       	or	r24, r25
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <IntPort_free+0x22>
 *
 --------------------------------- */

void IntPort_free_fields(struct IntPort *this)
{
		vdmFree(this->m_IntPort_value);
    1a18:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a1c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
{
	--this->_IntPort_refs;
	if (this->_IntPort_refs < 1)
	{
		IntPort_free_fields(this);
		free(this);
    1a20:	ce 01       	movw	r24, r28
    1a22:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <_Z8setValueEI>:
return ret_4;
}


/* Fmi.vdmrt 43:12 */
 static  void _Z8setValueEI(IntPortCLASS this, TVP v)	{
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	8c 01       	movw	r16, r24
    1a36:	cb 01       	movw	r24, r22
/* Fmi.vdmrt 44:27 */
TVP field_tmp_2 = vdmCloneGC(v, NULL)
;
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1a40:	7c 01       	movw	r14, r24

SET_FIELD_PTR(IntPort, IntPort, this, value, field_tmp_2);
    1a42:	f8 01       	movw	r30, r16
    1a44:	86 85       	ldd	r24, Z+14	; 0x0e
    1a46:	97 85       	ldd	r25, Z+15	; 0x0f
    1a48:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1a52:	f8 01       	movw	r30, r16
    1a54:	97 87       	std	Z+15, r25	; 0x0f
    1a56:	86 87       	std	Z+14, r24	; 0x0e

vdmFree(field_tmp_2);
    1a58:	c7 01       	movw	r24, r14
    1a5a:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
}
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	08 95       	ret

00001a68 <IntPort_Constructor>:
 *
 --------------------------------- */
 
 
IntPortCLASS IntPort_Constructor(IntPortCLASS this_ptr)
{
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	ec 01       	movw	r28, r24

	if(this_ptr==NULL)
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	39 f4       	brne	.+14     	; 0x1a80 <IntPort_Constructor+0x18>
	{
		this_ptr = (IntPortCLASS) malloc(sizeof(struct IntPort));
    1a72:	82 e1       	ldi	r24, 0x12	; 18
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    1a7a:	ec 01       	movw	r28, r24
	}

	if(this_ptr!=NULL)
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	71 f1       	breq	.+92     	; 0x1adc <IntPort_Constructor+0x74>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,IntPort,Port));
    1a80:	ce 01       	movw	r24, r28
    1a82:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Port_Constructor>

					if(! g_VTableArrayForIntPort_Override_Port[0].pFunc)
    1a86:	80 91 d2 02 	lds	r24, 0x02D2
    1a8a:	90 91 d3 02 	lds	r25, 0x02D3
    1a8e:	89 2b       	or	r24, r25
    1a90:	89 f4       	brne	.+34     	; 0x1ab4 <IntPort_Constructor+0x4c>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForIntPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    1a92:	ae ec       	ldi	r26, 0xCE	; 206
    1a94:	b2 e0       	ldi	r27, 0x02	; 2
    1a96:	88 81       	ld	r24, Y
    1a98:	99 81       	ldd	r25, Y+1	; 0x01
    1a9a:	9c 01       	movw	r18, r24
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	82 e1       	ldi	r24, 0x12	; 18
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	0d 92       	st	X+, r0
    1aa4:	81 50       	subi	r24, 0x01	; 1
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <IntPort_Constructor+0x38>
				
				/*  install overrides  */
									g_VTableArrayForIntPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    1aa8:	89 ef       	ldi	r24, 0xF9	; 249
    1aaa:	9c e0       	ldi	r25, 0x0C	; 12
    1aac:	90 93 d9 02 	sts	0x02D9, r25
    1ab0:	80 93 d8 02 	sts	0x02D8, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForIntPort_Override_Port;
    1ab4:	8e ec       	ldi	r24, 0xCE	; 206
    1ab6:	92 e0       	ldi	r25, 0x02	; 2
    1ab8:	99 83       	std	Y+1, r25	; 0x01
    1aba:	88 83       	st	Y, r24
				
		
		/*  IntPort init  */
		this_ptr->_IntPort_id = CLASS_ID_IntPort_ID;
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9b 87       	std	Y+11, r25	; 0x0b
    1ac2:	8a 87       	std	Y+10, r24	; 0x0a
		this_ptr->_IntPort_refs = 0;
    1ac4:	1d 86       	std	Y+13, r1	; 0x0d
    1ac6:	1c 86       	std	Y+12, r1	; 0x0c
		this_ptr->_IntPort_pVTable=VTableArrayForIntPort;
    1ac8:	8d e0       	ldi	r24, 0x0D	; 13
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	99 87       	std	Y+9, r25	; 0x09
    1ace:	88 87       	std	Y+8, r24	; 0x08
 

 static  TVP _Z17fieldInitializer3EV(IntPortCLASS this)	{
/* Fmi.vdmrt 37:17 */
TVP ret_4 = newInt(0)
;
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
		/*  IntPort init  */
		this_ptr->_IntPort_id = CLASS_ID_IntPort_ID;
		this_ptr->_IntPort_refs = 0;
		this_ptr->_IntPort_pVTable=VTableArrayForIntPort;

				this_ptr->m_IntPort_value= _Z17fieldInitializer3EV(this_ptr);
    1ad8:	9f 87       	std	Y+15, r25	; 0x0f
    1ada:	8e 87       	std	Y+14, r24	; 0x0e
			}

	return this_ptr;
}
    1adc:	ce 01       	movw	r24, r28
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
	IntPortCLASS ptr=IntPort_Constructor(NULL);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <IntPort_Constructor>
    1aec:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_IntPort_id, &ptr->_IntPort_refs, (freeVdmClassFunction)&IntPort_free, ptr)});
    1aee:	bc 01       	movw	r22, r24
    1af0:	64 5f       	subi	r22, 0xF4	; 244
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	82 85       	ldd	r24, Z+10	; 0x0a
    1af6:	93 85       	ldd	r25, Z+11	; 0x0b
    1af8:	42 e0       	ldi	r20, 0x02	; 2
    1afa:	5d e0       	ldi	r21, 0x0D	; 13
    1afc:	9f 01       	movw	r18, r30
    1afe:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	IntPortCLASS ptr=IntPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    1b0c:	8b e0       	ldi	r24, 0x0B	; 11
    1b0e:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
			{	.ptr=newClassValue(ptr->_IntPort_id, &ptr->_IntPort_refs, (freeVdmClassFunction)&IntPort_free, ptr)});
}
    1b12:	08 95       	ret

00001b14 <_Z7IntPortEV>:
 TVP _Z7IntPortEV(IntPortCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    1b14:	89 2b       	or	r24, r25
    1b16:	19 f0       	breq	.+6      	; 0x1b1e <_Z7IntPortEV+0xa>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <_Z7IntPortEV+0x10>
	
	{

__buf = new();
    1b1e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <new>
    1b22:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, IntPort);
}
;

return __buf;
}
    1b24:	c9 01       	movw	r24, r18
    1b26:	08 95       	ret

00001b28 <_Z7IntPortEI>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 40:12 */
 TVP _Z7IntPortEI(IntPortCLASS this, TVP v)	{
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	dc 01       	movw	r26, r24
    1b32:	8b 01       	movw	r16, r22

TVP __buf = NULL
;

if ( this == NULL )
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <_Z7IntPortEI+0x16>
    1b38:	c0 e0       	ldi	r28, 0x00	; 0
    1b3a:	d0 e0       	ldi	r29, 0x00	; 0
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <_Z7IntPortEI+0x24>
	
	{

__buf = new();
    1b3e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <new>
    1b42:	ec 01       	movw	r28, r24

this = TO_CLASS_PTR(__buf, IntPort);
    1b44:	eb 81       	ldd	r30, Y+3	; 0x03
    1b46:	fc 81       	ldd	r31, Y+4	; 0x04
    1b48:	a0 81       	ld	r26, Z
    1b4a:	b1 81       	ldd	r27, Z+1	; 0x01
}
;
/* Fmi.vdmrt 41:17 */
CALL_FUNC_PTR(IntPort, IntPort, this, CLASS_IntPort__Z8setValueEI, v);
    1b4c:	18 96       	adiw	r26, 0x08	; 8
    1b4e:	ed 91       	ld	r30, X+
    1b50:	fc 91       	ld	r31, X
    1b52:	19 97       	sbiw	r26, 0x09	; 9
    1b54:	02 84       	ldd	r0, Z+10	; 0x0a
    1b56:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b58:	e0 2d       	mov	r30, r0
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	b8 01       	movw	r22, r16
    1b5e:	09 95       	icall

return __buf;
}
    1b60:	ce 01       	movw	r24, r28
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	08 95       	ret

00001b6c <Port_free_fields>:
 *
 --------------------------------- */

void Port_free_fields(struct Port *this)
{
	}
    1b6c:	08 95       	ret

00001b6e <_Z8setValueE5X1QCBR>:

/* Fmi.vdmrt 26:12 */
 static  void _Z8setValueE5X1QCBR(PortCLASS this, TVP v)	{

return ;
}
    1b6e:	08 95       	ret

00001b70 <_Z8getValueEV>:

/* Fmi.vdmrt 29:12 */
 static  TVP _Z8getValueEV(PortCLASS this)	{

return NULL;
}
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	08 95       	ret

00001b76 <Port_static_init>:


 void Port_static_init()	{

return ;
}
    1b76:	08 95       	ret

00001b78 <Port_static_shutdown>:


 void Port_static_shutdown()	{

return ;
}
    1b78:	08 95       	ret

00001b7a <Port_free>:
void Port_free_fields(struct Port *this)
{
	}

static void Port_free(struct Port *this)
{
    1b7a:	fc 01       	movw	r30, r24
	--this->_Port_refs;
    1b7c:	84 81       	ldd	r24, Z+4	; 0x04
    1b7e:	95 81       	ldd	r25, Z+5	; 0x05
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	95 83       	std	Z+5, r25	; 0x05
    1b84:	84 83       	std	Z+4, r24	; 0x04
	if (this->_Port_refs < 1)
    1b86:	89 2b       	or	r24, r25
    1b88:	19 f4       	brne	.+6      	; 0x1b90 <Port_free+0x16>
	{
		Port_free_fields(this);
		free(this);
    1b8a:	cf 01       	movw	r24, r30
    1b8c:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    1b90:	08 95       	ret

00001b92 <Port_Constructor>:
 *
 --------------------------------- */
 
 
PortCLASS Port_Constructor(PortCLASS this_ptr)
{
    1b92:	fc 01       	movw	r30, r24

	if(this_ptr==NULL)
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	39 f4       	brne	.+14     	; 0x1ba6 <Port_Constructor+0x14>
	{
		this_ptr = (PortCLASS) malloc(sizeof(struct Port));
    1b98:	88 e0       	ldi	r24, 0x08	; 8
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    1ba0:	fc 01       	movw	r30, r24
	}

	if(this_ptr!=NULL)
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	51 f0       	breq	.+20     	; 0x1bba <Port_Constructor+0x28>
	{
	
			
		/*  Port init  */
		this_ptr->_Port_id = CLASS_ID_Port_ID;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	93 83       	std	Z+3, r25	; 0x03
    1bac:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_Port_refs = 0;
    1bae:	15 82       	std	Z+5, r1	; 0x05
    1bb0:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_Port_pVTable=VTableArrayForPort;
    1bb2:	85 e2       	ldi	r24, 0x25	; 37
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24

				}

	return this_ptr;
}
    1bba:	cf 01       	movw	r24, r30
    1bbc:	08 95       	ret

00001bbe <_Z4PortEV>:
 TVP _Z4PortEV(PortCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    1bbe:	89 2b       	or	r24, r25
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <_Z4PortEV+0xa>
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	18 c0       	rjmp	.+48     	; 0x1bf8 <_Z4PortEV+0x3a>
}

/*  Method for creating new "class"  */
static TVP new()
{
	PortCLASS ptr=Port_Constructor(NULL);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Port_Constructor>
    1bd0:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_Port_id, &ptr->_Port_refs, (freeVdmClassFunction)&Port_free, ptr)});
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	6c 5f       	subi	r22, 0xFC	; 252
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	4d eb       	ldi	r20, 0xBD	; 189
    1bde:	5d e0       	ldi	r21, 0x0D	; 13
    1be0:	9f 01       	movw	r18, r30
    1be2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	PortCLASS ptr=Port_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    1bf0:	8b e0       	ldi	r24, 0x0B	; 11
    1bf2:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
    1bf6:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, Port);
}
;

return __buf;
}
    1bf8:	c9 01       	movw	r24, r18
    1bfa:	08 95       	ret

00001bfc <Port_const_shutdown>:



 void Port_const_shutdown()	{

vdmFree(numFields_2);
    1bfc:	80 91 e0 02 	lds	r24, 0x02E0
    1c00:	90 91 e1 02 	lds	r25, 0x02E1
    1c04:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
    1c08:	08 95       	ret

00001c0a <Port_const_init>:
 

 static  TVP _Z17fieldInitializer2EV()	{

TVP ret_3 = newInt(0)
;
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>



 void Port_const_init()	{

numFields_2 = _Z17fieldInitializer2EV();
    1c12:	90 93 e1 02 	sts	0x02E1, r25
    1c16:	80 93 e0 02 	sts	0x02E0, r24

return ;
}
    1c1a:	08 95       	ret

00001c1c <RealPort_const_init>:


 void RealPort_const_init()	{

return ;
}
    1c1c:	08 95       	ret

00001c1e <RealPort_const_shutdown>:


 void RealPort_const_shutdown()	{

return ;
}
    1c1e:	08 95       	ret

00001c20 <RealPort_static_init>:


 void RealPort_static_init()	{

return ;
}
    1c20:	08 95       	ret

00001c22 <RealPort_static_shutdown>:


 void RealPort_static_shutdown()	{

return ;
}
    1c22:	08 95       	ret

00001c24 <_Z8getValueEV>:

/* Fmi.vdmrt 80:12 */
 static  TVP _Z8getValueEV(RealPortCLASS this)	{
/* Fmi.vdmrt 81:26 */
TVP ret_9 = vdmCloneGC(GET_FIELD_PTR_GC(RealPort, RealPort, this, value), NULL)
;
    1c24:	fc 01       	movw	r30, r24
    1c26:	86 85       	ldd	r24, Z+14	; 0x0e
    1c28:	97 85       	ldd	r25, Z+15	; 0x0f
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
/* Fmi.vdmrt 81:19 */
return ret_9;
}
    1c3a:	08 95       	ret

00001c3c <Port__Z8getValueEV>:
 static  TVP Port__Z8getValueEV(PortCLASS base)	{

RealPortCLASS this = CLASS_DOWNCAST(Port, RealPort, base)
;

return _Z8getValueEV(this);
    1c3c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_Z8getValueEV>
}
    1c40:	08 95       	ret

00001c42 <RealPort_free_fields>:
 *
 --------------------------------- */

void RealPort_free_fields(struct RealPort *this)
{
		vdmFree(this->m_RealPort_value);
    1c42:	fc 01       	movw	r30, r24
    1c44:	86 85       	ldd	r24, Z+14	; 0x0e
    1c46:	97 85       	ldd	r25, Z+15	; 0x0f
    1c48:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
    1c4c:	08 95       	ret

00001c4e <RealPort_free>:

static void RealPort_free(struct RealPort *this)
{
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	ec 01       	movw	r28, r24
	--this->_RealPort_refs;
    1c54:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c56:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9d 87       	std	Y+13, r25	; 0x0d
    1c5c:	8c 87       	std	Y+12, r24	; 0x0c
	if (this->_RealPort_refs < 1)
    1c5e:	89 2b       	or	r24, r25
    1c60:	39 f4       	brne	.+14     	; 0x1c70 <RealPort_free+0x22>
 *
 --------------------------------- */

void RealPort_free_fields(struct RealPort *this)
{
		vdmFree(this->m_RealPort_value);
    1c62:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c64:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c66:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
{
	--this->_RealPort_refs;
	if (this->_RealPort_refs < 1)
	{
		RealPort_free_fields(this);
		free(this);
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	08 95       	ret

00001c76 <_Z8setValueER>:
return ret_8;
}


/* Fmi.vdmrt 77:12 */
 static  void _Z8setValueER(RealPortCLASS this, TVP v)	{
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	8c 01       	movw	r16, r24
    1c80:	cb 01       	movw	r24, r22
/* Fmi.vdmrt 78:27 */
TVP field_tmp_4 = vdmCloneGC(v, NULL)
;
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1c8a:	7c 01       	movw	r14, r24

SET_FIELD_PTR(RealPort, RealPort, this, value, field_tmp_4);
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	86 85       	ldd	r24, Z+14	; 0x0e
    1c90:	97 85       	ldd	r25, Z+15	; 0x0f
    1c92:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    1c96:	c7 01       	movw	r24, r14
    1c98:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	97 87       	std	Z+15, r25	; 0x0f
    1ca0:	86 87       	std	Z+14, r24	; 0x0e

vdmFree(field_tmp_4);
    1ca2:	c7 01       	movw	r24, r14
    1ca4:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
}
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	08 95       	ret

00001cb2 <RealPort_Constructor>:
 *
 --------------------------------- */
 
 
RealPortCLASS RealPort_Constructor(RealPortCLASS this_ptr)
{
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	ec 01       	movw	r28, r24

	if(this_ptr==NULL)
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	39 f4       	brne	.+14     	; 0x1cca <RealPort_Constructor+0x18>
	{
		this_ptr = (RealPortCLASS) malloc(sizeof(struct RealPort));
    1cbc:	82 e1       	ldi	r24, 0x12	; 18
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    1cc4:	ec 01       	movw	r28, r24
	}

	if(this_ptr!=NULL)
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	81 f1       	breq	.+96     	; 0x1d2a <RealPort_Constructor+0x78>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,RealPort,Port));
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Port_Constructor>

					if(! g_VTableArrayForRealPort_Override_Port[0].pFunc)
    1cd0:	80 91 e6 02 	lds	r24, 0x02E6
    1cd4:	90 91 e7 02 	lds	r25, 0x02E7
    1cd8:	89 2b       	or	r24, r25
    1cda:	89 f4       	brne	.+34     	; 0x1cfe <RealPort_Constructor+0x4c>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForRealPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    1cdc:	a2 ee       	ldi	r26, 0xE2	; 226
    1cde:	b2 e0       	ldi	r27, 0x02	; 2
    1ce0:	88 81       	ld	r24, Y
    1ce2:	99 81       	ldd	r25, Y+1	; 0x01
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	82 e1       	ldi	r24, 0x12	; 18
    1cea:	01 90       	ld	r0, Z+
    1cec:	0d 92       	st	X+, r0
    1cee:	81 50       	subi	r24, 0x01	; 1
    1cf0:	e1 f7       	brne	.-8      	; 0x1cea <RealPort_Constructor+0x38>
				
				/*  install overrides  */
									g_VTableArrayForRealPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    1cf2:	8e e1       	ldi	r24, 0x1E	; 30
    1cf4:	9e e0       	ldi	r25, 0x0E	; 14
    1cf6:	90 93 ed 02 	sts	0x02ED, r25
    1cfa:	80 93 ec 02 	sts	0x02EC, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForRealPort_Override_Port;
    1cfe:	82 ee       	ldi	r24, 0xE2	; 226
    1d00:	92 e0       	ldi	r25, 0x02	; 2
    1d02:	99 83       	std	Y+1, r25	; 0x01
    1d04:	88 83       	st	Y, r24
				
		
		/*  RealPort init  */
		this_ptr->_RealPort_id = CLASS_ID_RealPort_ID;
    1d06:	84 e0       	ldi	r24, 0x04	; 4
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9b 87       	std	Y+11, r25	; 0x0b
    1d0c:	8a 87       	std	Y+10, r24	; 0x0a
		this_ptr->_RealPort_refs = 0;
    1d0e:	1d 86       	std	Y+13, r1	; 0x0d
    1d10:	1c 86       	std	Y+12, r1	; 0x0c
		this_ptr->_RealPort_pVTable=VTableArrayForRealPort;
    1d12:	87 e3       	ldi	r24, 0x37	; 55
    1d14:	92 e0       	ldi	r25, 0x02	; 2
    1d16:	99 87       	std	Y+9, r25	; 0x09
    1d18:	88 87       	std	Y+8, r24	; 0x08
 

 static  TVP _Z17fieldInitializer5EV(RealPortCLASS this)	{
/* Fmi.vdmrt 71:18 */
TVP ret_8 = newReal(0.0)
;
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
		/*  RealPort init  */
		this_ptr->_RealPort_id = CLASS_ID_RealPort_ID;
		this_ptr->_RealPort_refs = 0;
		this_ptr->_RealPort_pVTable=VTableArrayForRealPort;

				this_ptr->m_RealPort_value= _Z17fieldInitializer5EV(this_ptr);
    1d26:	9f 87       	std	Y+15, r25	; 0x0f
    1d28:	8e 87       	std	Y+14, r24	; 0x0e
			}

	return this_ptr;
}
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
	RealPortCLASS ptr=RealPort_Constructor(NULL);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <RealPort_Constructor>
    1d3a:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RealPort_id, &ptr->_RealPort_refs, (freeVdmClassFunction)&RealPort_free, ptr)});
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	64 5f       	subi	r22, 0xF4	; 244
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	82 85       	ldd	r24, Z+10	; 0x0a
    1d44:	93 85       	ldd	r25, Z+11	; 0x0b
    1d46:	47 e2       	ldi	r20, 0x27	; 39
    1d48:	5e e0       	ldi	r21, 0x0E	; 14
    1d4a:	9f 01       	movw	r18, r30
    1d4c:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	RealPortCLASS ptr=RealPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    1d5a:	8b e0       	ldi	r24, 0x0B	; 11
    1d5c:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RealPort_id, &ptr->_RealPort_refs, (freeVdmClassFunction)&RealPort_free, ptr)});
}
    1d60:	08 95       	ret

00001d62 <_Z8RealPortEV>:
 TVP _Z8RealPortEV(RealPortCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    1d62:	89 2b       	or	r24, r25
    1d64:	19 f0       	breq	.+6      	; 0x1d6c <_Z8RealPortEV+0xa>
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <_Z8RealPortEV+0x10>
	
	{

__buf = new();
    1d6c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <new>
    1d70:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, RealPort);
}
;

return __buf;
}
    1d72:	c9 01       	movw	r24, r18
    1d74:	08 95       	ret

00001d76 <_Z8RealPortER>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 74:12 */
 TVP _Z8RealPortER(RealPortCLASS this, TVP v)	{
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	dc 01       	movw	r26, r24
    1d80:	8b 01       	movw	r16, r22

TVP __buf = NULL
;

if ( this == NULL )
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	19 f0       	breq	.+6      	; 0x1d8c <_Z8RealPortER+0x16>
    1d86:	c0 e0       	ldi	r28, 0x00	; 0
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	07 c0       	rjmp	.+14     	; 0x1d9a <_Z8RealPortER+0x24>
	
	{

__buf = new();
    1d8c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <new>
    1d90:	ec 01       	movw	r28, r24

this = TO_CLASS_PTR(__buf, RealPort);
    1d92:	eb 81       	ldd	r30, Y+3	; 0x03
    1d94:	fc 81       	ldd	r31, Y+4	; 0x04
    1d96:	a0 81       	ld	r26, Z
    1d98:	b1 81       	ldd	r27, Z+1	; 0x01
}
;
/* Fmi.vdmrt 75:18 */
CALL_FUNC_PTR(RealPort, RealPort, this, CLASS_RealPort__Z8setValueER, v);
    1d9a:	18 96       	adiw	r26, 0x08	; 8
    1d9c:	ed 91       	ld	r30, X+
    1d9e:	fc 91       	ld	r31, X
    1da0:	19 97       	sbiw	r26, 0x09	; 9
    1da2:	02 84       	ldd	r0, Z+10	; 0x0a
    1da4:	f3 85       	ldd	r31, Z+11	; 0x0b
    1da6:	e0 2d       	mov	r30, r0
    1da8:	cd 01       	movw	r24, r26
    1daa:	b8 01       	movw	r22, r16
    1dac:	09 95       	icall

return __buf;
}
    1dae:	ce 01       	movw	r24, r28
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	08 95       	ret

00001dba <RobotSensor_static_init>:


 void RobotSensor_static_init()	{

return ;
}
    1dba:	08 95       	ret

00001dbc <RobotSensor_static_shutdown>:


 void RobotSensor_static_shutdown()	{

return ;
}
    1dbc:	08 95       	ret

00001dbe <_Z10getReadingEV>:
return ret_1;
}


/* RobotSensor.vdmrt 12:8 */
 static  TVP _Z10getReadingEV(RobotSensorCLASS this)	{
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	8c 01       	movw	r16, r24
/* RobotSensor.vdmrt 13:23 */
TVP ret_2 = CALL_FUNC(RealPort, RealPort, GET_FIELD_PTR_GC(RobotSensor, RobotSensor, this, port), CLASS_RealPort__Z8getValueEV)
;
    1dc8:	dc 01       	movw	r26, r24
    1dca:	16 96       	adiw	r26, 0x06	; 6
    1dcc:	8d 91       	ld	r24, X+
    1dce:	9c 91       	ld	r25, X
    1dd0:	17 97       	sbiw	r26, 0x07	; 7
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	13 96       	adiw	r26, 0x03	; 3
    1dde:	ed 91       	ld	r30, X+
    1de0:	fc 91       	ld	r31, X
    1de2:	14 97       	sbiw	r26, 0x04	; 4
    1de4:	01 90       	ld	r0, Z+
    1de6:	f0 81       	ld	r31, Z
    1de8:	e0 2d       	mov	r30, r0
    1dea:	00 84       	ldd	r0, Z+8	; 0x08
    1dec:	f1 85       	ldd	r31, Z+9	; 0x09
    1dee:	e0 2d       	mov	r30, r0
    1df0:	e0 88       	ldd	r14, Z+16	; 0x10
    1df2:	f1 88       	ldd	r15, Z+17	; 0x11
    1df4:	f8 01       	movw	r30, r16
    1df6:	86 81       	ldd	r24, Z+6	; 0x06
    1df8:	97 81       	ldd	r25, Z+7	; 0x07
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1e02:	dc 01       	movw	r26, r24
    1e04:	13 96       	adiw	r26, 0x03	; 3
    1e06:	ed 91       	ld	r30, X+
    1e08:	fc 91       	ld	r31, X
    1e0a:	14 97       	sbiw	r26, 0x04	; 4
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	f7 01       	movw	r30, r14
    1e12:	09 95       	icall
/* RobotSensor.vdmrt 13:16 */
return ret_2;
}
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	08 95       	ret

00001e1e <RobotSensor_const_shutdown>:



 void RobotSensor_const_shutdown()	{

vdmFree(numFields_1);
    1e1e:	80 91 f4 02 	lds	r24, 0x02F4
    1e22:	90 91 f5 02 	lds	r25, 0x02F5
    1e26:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
    1e2a:	08 95       	ret

00001e2c <RobotSensor_free_fields>:
 *
 --------------------------------- */

void RobotSensor_free_fields(struct RobotSensor *this)
{
			vdmFree(this->m_RobotSensor_port);
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	86 81       	ldd	r24, Z+6	; 0x06
    1e30:	97 81       	ldd	r25, Z+7	; 0x07
    1e32:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
    1e36:	08 95       	ret

00001e38 <RobotSensor_free>:

static void RobotSensor_free(struct RobotSensor *this)
{
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	ec 01       	movw	r28, r24
	--this->_RobotSensor_refs;
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	9d 83       	std	Y+5, r25	; 0x05
    1e46:	8c 83       	std	Y+4, r24	; 0x04
	if (this->_RobotSensor_refs < 1)
    1e48:	89 2b       	or	r24, r25
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <RobotSensor_free+0x22>
 *
 --------------------------------- */

void RobotSensor_free_fields(struct RobotSensor *this)
{
			vdmFree(this->m_RobotSensor_port);
    1e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e50:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
{
	--this->_RobotSensor_refs;
	if (this->_RobotSensor_refs < 1)
	{
		RobotSensor_free_fields(this);
		free(this);
    1e54:	ce 01       	movw	r24, r28
    1e56:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <RobotSensor_Constructor>:
 *
 --------------------------------- */
 
 
RobotSensorCLASS RobotSensor_Constructor(RobotSensorCLASS this_ptr)
{
    1e60:	fc 01       	movw	r30, r24

	if(this_ptr==NULL)
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	39 f4       	brne	.+14     	; 0x1e74 <RobotSensor_Constructor+0x14>
	{
		this_ptr = (RobotSensorCLASS) malloc(sizeof(struct RobotSensor));
    1e66:	8a e0       	ldi	r24, 0x0A	; 10
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    1e6e:	fc 01       	movw	r30, r24
	}

	if(this_ptr!=NULL)
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	51 f0       	breq	.+20     	; 0x1e88 <RobotSensor_Constructor+0x28>
	{
	
			
		/*  RobotSensor init  */
		this_ptr->_RobotSensor_id = CLASS_ID_RobotSensor_ID;
    1e74:	13 82       	std	Z+3, r1	; 0x03
    1e76:	12 82       	std	Z+2, r1	; 0x02
		this_ptr->_RobotSensor_refs = 0;
    1e78:	15 82       	std	Z+5, r1	; 0x05
    1e7a:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_RobotSensor_pVTable=VTableArrayForRobotSensor;
    1e7c:	8f e4       	ldi	r24, 0x4F	; 79
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24

							this_ptr->m_RobotSensor_port= NULL ;
    1e84:	17 82       	std	Z+7, r1	; 0x07
    1e86:	16 82       	std	Z+6, r1	; 0x06
			}

	return this_ptr;
}
    1e88:	cf 01       	movw	r24, r30
    1e8a:	08 95       	ret

00001e8c <new>:

/*  Method for creating new "class"  */
static TVP new()
{
	RobotSensorCLASS ptr=RobotSensor_Constructor(NULL);
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <RobotSensor_Constructor>
    1e94:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RobotSensor_id, &ptr->_RobotSensor_refs, (freeVdmClassFunction)&RobotSensor_free, ptr)});
    1e96:	bc 01       	movw	r22, r24
    1e98:	6c 5f       	subi	r22, 0xFC	; 252
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	4c e1       	ldi	r20, 0x1C	; 28
    1ea2:	5f e0       	ldi	r21, 0x0F	; 15
    1ea4:	9f 01       	movw	r18, r30
    1ea6:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	RobotSensorCLASS ptr=RobotSensor_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    1eb4:	8b e0       	ldi	r24, 0x0B	; 11
    1eb6:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RobotSensor_id, &ptr->_RobotSensor_refs, (freeVdmClassFunction)&RobotSensor_free, ptr)});
}
    1eba:	08 95       	ret

00001ebc <_Z11RobotSensorEV>:
 TVP _Z11RobotSensorEV(RobotSensorCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    1ebc:	89 2b       	or	r24, r25
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <_Z11RobotSensorEV+0xa>
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <_Z11RobotSensorEV+0x10>
	
	{

__buf = new();
    1ec6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <new>
    1eca:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, RobotSensor);
}
;

return __buf;
}
    1ecc:	c9 01       	movw	r24, r18
    1ece:	08 95       	ret

00001ed0 <_Z11RobotSensorE8CRealPort>:
 *
 --------------------------------- */ 
 

    /* RobotSensor.vdmrt 9:8 */
 TVP _Z11RobotSensorE8CRealPort(RobotSensorCLASS this, TVP p)	{
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	ec 01       	movw	r28, r24
    1ede:	8b 01       	movw	r16, r22

TVP __buf = NULL
;

if ( this == NULL )
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	19 f0       	breq	.+6      	; 0x1eea <_Z11RobotSensorE8CRealPort+0x1a>
    1ee4:	ee 24       	eor	r14, r14
    1ee6:	ff 24       	eor	r15, r15
    1ee8:	0a c0       	rjmp	.+20     	; 0x1efe <_Z11RobotSensorE8CRealPort+0x2e>
	
	{

__buf = new();
    1eea:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <new>
    1eee:	7c 01       	movw	r14, r24

this = TO_CLASS_PTR(__buf, RobotSensor);
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	13 96       	adiw	r26, 0x03	; 3
    1ef4:	ed 91       	ld	r30, X+
    1ef6:	fc 91       	ld	r31, X
    1ef8:	14 97       	sbiw	r26, 0x04	; 4
    1efa:	c0 81       	ld	r28, Z
    1efc:	d1 81       	ldd	r29, Z+1	; 0x01
}
;
/* RobotSensor.vdmrt 10:27 */
TVP field_tmp_1 = vdmCloneGC(p, NULL)
;
    1efe:	c8 01       	movw	r24, r16
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1f08:	8c 01       	movw	r16, r24

SET_FIELD_PTR(RobotSensor, RobotSensor, this, port, field_tmp_1);
    1f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    1f12:	c8 01       	movw	r24, r16
    1f14:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    1f18:	9f 83       	std	Y+7, r25	; 0x07
    1f1a:	8e 83       	std	Y+6, r24	; 0x06

vdmFree(field_tmp_1);
    1f1c:	c8 01       	movw	r24, r16
    1f1e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return __buf;
}
    1f22:	c7 01       	movw	r24, r14
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	08 95       	ret

00001f32 <RobotSensor_const_init>:
 

 static  TVP _Z17fieldInitializer1EV()	{

TVP ret_1 = newInt(1)
;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>



 void RobotSensor_const_init()	{

numFields_1 = _Z17fieldInitializer1EV();
    1f3a:	90 93 f5 02 	sts	0x02F5, r25
    1f3e:	80 93 f4 02 	sts	0x02F4, r24

return ;
}
    1f42:	08 95       	ret

00001f44 <RobotServo_static_init>:


 void RobotServo_static_init()	{

return ;
}
    1f44:	08 95       	ret

00001f46 <RobotServo_static_shutdown>:


 void RobotServo_static_shutdown()	{

return ;
}
    1f46:	08 95       	ret

00001f48 <_Z8setServoER>:
return ret_26;
}


/* RobotServo.vdmrt 12:8 */
 static  void _Z8setServoER(RobotServoCLASS this, TVP value)	{
    1f48:	cf 92       	push	r12
    1f4a:	df 92       	push	r13
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	8c 01       	movw	r16, r24
    1f56:	6b 01       	movw	r12, r22
/* RobotServo.vdmrt 13:19 */
CALL_FUNC(RealPort, RealPort, GET_FIELD_PTR_GC(RobotServo, RobotServo, this, port), CLASS_RealPort__Z8setValueER, value);
    1f58:	dc 01       	movw	r26, r24
    1f5a:	16 96       	adiw	r26, 0x06	; 6
    1f5c:	8d 91       	ld	r24, X+
    1f5e:	9c 91       	ld	r25, X
    1f60:	17 97       	sbiw	r26, 0x07	; 7
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	13 96       	adiw	r26, 0x03	; 3
    1f6e:	ed 91       	ld	r30, X+
    1f70:	fc 91       	ld	r31, X
    1f72:	14 97       	sbiw	r26, 0x04	; 4
    1f74:	01 90       	ld	r0, Z+
    1f76:	f0 81       	ld	r31, Z
    1f78:	e0 2d       	mov	r30, r0
    1f7a:	00 84       	ldd	r0, Z+8	; 0x08
    1f7c:	f1 85       	ldd	r31, Z+9	; 0x09
    1f7e:	e0 2d       	mov	r30, r0
    1f80:	e2 84       	ldd	r14, Z+10	; 0x0a
    1f82:	f3 84       	ldd	r15, Z+11	; 0x0b
    1f84:	f8 01       	movw	r30, r16
    1f86:	86 81       	ldd	r24, Z+6	; 0x06
    1f88:	97 81       	ldd	r25, Z+7	; 0x07
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    1f92:	dc 01       	movw	r26, r24
    1f94:	13 96       	adiw	r26, 0x03	; 3
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	14 97       	sbiw	r26, 0x04	; 4
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	f7 01       	movw	r30, r14
    1fa4:	09 95       	icall
}
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	ff 90       	pop	r15
    1fac:	ef 90       	pop	r14
    1fae:	df 90       	pop	r13
    1fb0:	cf 90       	pop	r12
    1fb2:	08 95       	ret

00001fb4 <RobotServo_const_shutdown>:



 void RobotServo_const_shutdown()	{

vdmFree(numFields_7);
    1fb4:	80 91 f6 02 	lds	r24, 0x02F6
    1fb8:	90 91 f7 02 	lds	r25, 0x02F7
    1fbc:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
    1fc0:	08 95       	ret

00001fc2 <RobotServo_free_fields>:
 *
 --------------------------------- */

void RobotServo_free_fields(struct RobotServo *this)
{
			vdmFree(this->m_RobotServo_port);
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	86 81       	ldd	r24, Z+6	; 0x06
    1fc6:	97 81       	ldd	r25, Z+7	; 0x07
    1fc8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
    1fcc:	08 95       	ret

00001fce <RobotServo_free>:

static void RobotServo_free(struct RobotServo *this)
{
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	ec 01       	movw	r28, r24
	--this->_RobotServo_refs;
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	9d 83       	std	Y+5, r25	; 0x05
    1fdc:	8c 83       	std	Y+4, r24	; 0x04
	if (this->_RobotServo_refs < 1)
    1fde:	89 2b       	or	r24, r25
    1fe0:	39 f4       	brne	.+14     	; 0x1ff0 <RobotServo_free+0x22>
 *
 --------------------------------- */

void RobotServo_free_fields(struct RobotServo *this)
{
			vdmFree(this->m_RobotServo_port);
    1fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe6:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
{
	--this->_RobotServo_refs;
	if (this->_RobotServo_refs < 1)
	{
		RobotServo_free_fields(this);
		free(this);
    1fea:	ce 01       	movw	r24, r28
    1fec:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	08 95       	ret

00001ff6 <RobotServo_Constructor>:
 *
 --------------------------------- */
 
 
RobotServoCLASS RobotServo_Constructor(RobotServoCLASS this_ptr)
{
    1ff6:	fc 01       	movw	r30, r24

	if(this_ptr==NULL)
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	39 f4       	brne	.+14     	; 0x200a <RobotServo_Constructor+0x14>
	{
		this_ptr = (RobotServoCLASS) malloc(sizeof(struct RobotServo));
    1ffc:	8a e0       	ldi	r24, 0x0A	; 10
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2004:	fc 01       	movw	r30, r24
	}

	if(this_ptr!=NULL)
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	61 f0       	breq	.+24     	; 0x2022 <RobotServo_Constructor+0x2c>
	{
	
			
		/*  RobotServo init  */
		this_ptr->_RobotServo_id = CLASS_ID_RobotServo_ID;
    200a:	8a e0       	ldi	r24, 0x0A	; 10
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	93 83       	std	Z+3, r25	; 0x03
    2010:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_RobotServo_refs = 0;
    2012:	15 82       	std	Z+5, r1	; 0x05
    2014:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_RobotServo_pVTable=VTableArrayForRobotServo;
    2016:	81 e6       	ldi	r24, 0x61	; 97
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24

							this_ptr->m_RobotServo_port= NULL ;
    201e:	17 82       	std	Z+7, r1	; 0x07
    2020:	16 82       	std	Z+6, r1	; 0x06
			}

	return this_ptr;
}
    2022:	cf 01       	movw	r24, r30
    2024:	08 95       	ret

00002026 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
	RobotServoCLASS ptr=RobotServo_Constructor(NULL);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <RobotServo_Constructor>
    202e:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RobotServo_id, &ptr->_RobotServo_refs, (freeVdmClassFunction)&RobotServo_free, ptr)});
    2030:	bc 01       	movw	r22, r24
    2032:	6c 5f       	subi	r22, 0xFC	; 252
    2034:	7f 4f       	sbci	r23, 0xFF	; 255
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	47 ee       	ldi	r20, 0xE7	; 231
    203c:	5f e0       	ldi	r21, 0x0F	; 15
    203e:	9f 01       	movw	r18, r30
    2040:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	RobotServoCLASS ptr=RobotServo_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    204e:	8b e0       	ldi	r24, 0x0B	; 11
    2050:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RobotServo_id, &ptr->_RobotServo_refs, (freeVdmClassFunction)&RobotServo_free, ptr)});
}
    2054:	08 95       	ret

00002056 <_Z10RobotServoEV>:
 TVP _Z10RobotServoEV(RobotServoCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    2056:	89 2b       	or	r24, r25
    2058:	19 f0       	breq	.+6      	; 0x2060 <_Z10RobotServoEV+0xa>
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	03 c0       	rjmp	.+6      	; 0x2066 <_Z10RobotServoEV+0x10>
	
	{

__buf = new();
    2060:	0e 94 13 10 	call	0x2026	; 0x2026 <new>
    2064:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, RobotServo);
}
;

return __buf;
}
    2066:	c9 01       	movw	r24, r18
    2068:	08 95       	ret

0000206a <_Z10RobotServoE8CRealPort>:
 *
 --------------------------------- */ 
 

    /* RobotServo.vdmrt 9:8 */
 TVP _Z10RobotServoE8CRealPort(RobotServoCLASS this, TVP p)	{
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	ec 01       	movw	r28, r24
    2078:	8b 01       	movw	r16, r22

TVP __buf = NULL
;

if ( this == NULL )
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	19 f0       	breq	.+6      	; 0x2084 <_Z10RobotServoE8CRealPort+0x1a>
    207e:	ee 24       	eor	r14, r14
    2080:	ff 24       	eor	r15, r15
    2082:	0a c0       	rjmp	.+20     	; 0x2098 <_Z10RobotServoE8CRealPort+0x2e>
	
	{

__buf = new();
    2084:	0e 94 13 10 	call	0x2026	; 0x2026 <new>
    2088:	7c 01       	movw	r14, r24

this = TO_CLASS_PTR(__buf, RobotServo);
    208a:	dc 01       	movw	r26, r24
    208c:	13 96       	adiw	r26, 0x03	; 3
    208e:	ed 91       	ld	r30, X+
    2090:	fc 91       	ld	r31, X
    2092:	14 97       	sbiw	r26, 0x04	; 4
    2094:	c0 81       	ld	r28, Z
    2096:	d1 81       	ldd	r29, Z+1	; 0x01
}
;
/* RobotServo.vdmrt 10:26 */
TVP field_tmp_10 = vdmCloneGC(p, NULL)
;
    2098:	c8 01       	movw	r24, r16
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    20a2:	8c 01       	movw	r16, r24

SET_FIELD_PTR(RobotServo, RobotServo, this, port, field_tmp_10);
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    20ac:	c8 01       	movw	r24, r16
    20ae:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    20b2:	9f 83       	std	Y+7, r25	; 0x07
    20b4:	8e 83       	std	Y+6, r24	; 0x06

vdmFree(field_tmp_10);
    20b6:	c8 01       	movw	r24, r16
    20b8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return __buf;
}
    20bc:	c7 01       	movw	r24, r14
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	ff 90       	pop	r15
    20c8:	ef 90       	pop	r14
    20ca:	08 95       	ret

000020cc <RobotServo_const_init>:
 

 static  TVP _Z18fieldInitializer21EV()	{

TVP ret_26 = newInt(1)
;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>



 void RobotServo_const_init()	{

numFields_7 = _Z18fieldInitializer21EV();
    20d4:	90 93 f7 02 	sts	0x02F7, r25
    20d8:	80 93 f6 02 	sts	0x02F6, r24

return ;
}
    20dc:	08 95       	ret

000020de <StringPort_const_init>:


 void StringPort_const_init()	{

return ;
}
    20de:	08 95       	ret

000020e0 <StringPort_const_shutdown>:


 void StringPort_const_shutdown()	{

return ;
}
    20e0:	08 95       	ret

000020e2 <StringPort_static_init>:


 void StringPort_static_init()	{

return ;
}
    20e2:	08 95       	ret

000020e4 <StringPort_static_shutdown>:


 void StringPort_static_shutdown()	{

return ;
}
    20e4:	08 95       	ret

000020e6 <_Z8getValueEV>:

/* Fmi.vdmrt 97:12 */
 static  TVP _Z8getValueEV(StringPortCLASS this)	{
/* Fmi.vdmrt 98:26 */
TVP ret_11 = vdmCloneGC(GET_FIELD_PTR_GC(StringPort, StringPort, this, value), NULL)
;
    20e6:	fc 01       	movw	r30, r24
    20e8:	86 85       	ldd	r24, Z+14	; 0x0e
    20ea:	97 85       	ldd	r25, Z+15	; 0x0f
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
/* Fmi.vdmrt 98:19 */
return ret_11;
}
    20fc:	08 95       	ret

000020fe <Port__Z8getValueEV>:
 static  TVP Port__Z8getValueEV(PortCLASS base)	{

StringPortCLASS this = CLASS_DOWNCAST(Port, StringPort, base)
;

return _Z8getValueEV(this);
    20fe:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_Z8getValueEV>
}
    2102:	08 95       	ret

00002104 <StringPort_free_fields>:
 *
 --------------------------------- */

void StringPort_free_fields(struct StringPort *this)
{
		vdmFree(this->m_StringPort_value);
    2104:	fc 01       	movw	r30, r24
    2106:	86 85       	ldd	r24, Z+14	; 0x0e
    2108:	97 85       	ldd	r25, Z+15	; 0x0f
    210a:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}
    210e:	08 95       	ret

00002110 <StringPort_free>:

static void StringPort_free(struct StringPort *this)
{
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	ec 01       	movw	r28, r24
	--this->_StringPort_refs;
    2116:	8c 85       	ldd	r24, Y+12	; 0x0c
    2118:	9d 85       	ldd	r25, Y+13	; 0x0d
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9d 87       	std	Y+13, r25	; 0x0d
    211e:	8c 87       	std	Y+12, r24	; 0x0c
	if (this->_StringPort_refs < 1)
    2120:	89 2b       	or	r24, r25
    2122:	39 f4       	brne	.+14     	; 0x2132 <StringPort_free+0x22>
 *
 --------------------------------- */

void StringPort_free_fields(struct StringPort *this)
{
		vdmFree(this->m_StringPort_value);
    2124:	8e 85       	ldd	r24, Y+14	; 0x0e
    2126:	9f 85       	ldd	r25, Y+15	; 0x0f
    2128:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
{
	--this->_StringPort_refs;
	if (this->_StringPort_refs < 1)
	{
		StringPort_free_fields(this);
		free(this);
    212c:	ce 01       	movw	r24, r28
    212e:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	}
}
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <_Z8setValueE1QC>:
return ret_10;
}


/* Fmi.vdmrt 94:12 */
 static  void _Z8setValueE1QC(StringPortCLASS this, TVP v)	{
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	8c 01       	movw	r16, r24
    2142:	cb 01       	movw	r24, r22
/* Fmi.vdmrt 95:27 */
TVP field_tmp_5 = vdmCloneGC(v, NULL)
;
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    214c:	7c 01       	movw	r14, r24

SET_FIELD_PTR(StringPort, StringPort, this, value, field_tmp_5);
    214e:	f8 01       	movw	r30, r16
    2150:	86 85       	ldd	r24, Z+14	; 0x0e
    2152:	97 85       	ldd	r25, Z+15	; 0x0f
    2154:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    2158:	c7 01       	movw	r24, r14
    215a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    215e:	f8 01       	movw	r30, r16
    2160:	97 87       	std	Z+15, r25	; 0x0f
    2162:	86 87       	std	Z+14, r24	; 0x0e

vdmFree(field_tmp_5);
    2164:	c7 01       	movw	r24, r14
    2166:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
}
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	08 95       	ret

00002174 <StringPort_Constructor>:
 *
 --------------------------------- */
 
 
StringPortCLASS StringPort_Constructor(StringPortCLASS this_ptr)
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	ec 01       	movw	r28, r24

	if(this_ptr==NULL)
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	39 f4       	brne	.+14     	; 0x218c <StringPort_Constructor+0x18>
	{
		this_ptr = (StringPortCLASS) malloc(sizeof(struct StringPort));
    217e:	82 e1       	ldi	r24, 0x12	; 18
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2186:	ec 01       	movw	r28, r24
	}

	if(this_ptr!=NULL)
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	c1 f1       	breq	.+112    	; 0x21fc <StringPort_Constructor+0x88>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,StringPort,Port));
    218c:	ce 01       	movw	r24, r28
    218e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Port_Constructor>

					if(! g_VTableArrayForStringPort_Override_Port[0].pFunc)
    2192:	80 91 fc 02 	lds	r24, 0x02FC
    2196:	90 91 fd 02 	lds	r25, 0x02FD
    219a:	89 2b       	or	r24, r25
    219c:	89 f4       	brne	.+34     	; 0x21c0 <StringPort_Constructor+0x4c>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForStringPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    219e:	a8 ef       	ldi	r26, 0xF8	; 248
    21a0:	b2 e0       	ldi	r27, 0x02	; 2
    21a2:	88 81       	ld	r24, Y
    21a4:	99 81       	ldd	r25, Y+1	; 0x01
    21a6:	9c 01       	movw	r18, r24
    21a8:	f9 01       	movw	r30, r18
    21aa:	82 e1       	ldi	r24, 0x12	; 18
    21ac:	01 90       	ld	r0, Z+
    21ae:	0d 92       	st	X+, r0
    21b0:	81 50       	subi	r24, 0x01	; 1
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <StringPort_Constructor+0x38>
				
				/*  install overrides  */
									g_VTableArrayForStringPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    21b4:	8f e7       	ldi	r24, 0x7F	; 127
    21b6:	90 e1       	ldi	r25, 0x10	; 16
    21b8:	90 93 03 03 	sts	0x0303, r25
    21bc:	80 93 02 03 	sts	0x0302, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForStringPort_Override_Port;
    21c0:	88 ef       	ldi	r24, 0xF8	; 248
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	99 83       	std	Y+1, r25	; 0x01
    21c6:	88 83       	st	Y, r24
				
		
		/*  StringPort init  */
		this_ptr->_StringPort_id = CLASS_ID_StringPort_ID;
    21c8:	85 e0       	ldi	r24, 0x05	; 5
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9b 87       	std	Y+11, r25	; 0x0b
    21ce:	8a 87       	std	Y+10, r24	; 0x0a
		this_ptr->_StringPort_refs = 0;
    21d0:	1d 86       	std	Y+13, r1	; 0x0d
    21d2:	1c 86       	std	Y+12, r1	; 0x0c
		this_ptr->_StringPort_pVTable=VTableArrayForStringPort;
    21d4:	83 e7       	ldi	r24, 0x73	; 115
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	99 87       	std	Y+9, r25	; 0x09
    21da:	88 87       	std	Y+8, r24	; 0x08
 

 static  TVP _Z17fieldInitializer6EV(StringPortCLASS this)	{
/* Fmi.vdmrt 88:20 */
TVP ret_10 = newSeqVar(0, NULL)
;
    21dc:	00 d0       	rcall	.+0      	; 0x21de <StringPort_Constructor+0x6a>
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <StringPort_Constructor+0x6c>
    21e0:	ed b7       	in	r30, 0x3d	; 61
    21e2:	fe b7       	in	r31, 0x3e	; 62
    21e4:	12 82       	std	Z+2, r1	; 0x02
    21e6:	11 82       	std	Z+1, r1	; 0x01
    21e8:	14 82       	std	Z+4, r1	; 0x04
    21ea:	13 82       	std	Z+3, r1	; 0x03
    21ec:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <newSeqVar>
		/*  StringPort init  */
		this_ptr->_StringPort_id = CLASS_ID_StringPort_ID;
		this_ptr->_StringPort_refs = 0;
		this_ptr->_StringPort_pVTable=VTableArrayForStringPort;

				this_ptr->m_StringPort_value= _Z17fieldInitializer6EV(this_ptr);
    21f0:	9f 87       	std	Y+15, r25	; 0x0f
    21f2:	8e 87       	std	Y+14, r24	; 0x0e
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
			}

	return this_ptr;
}
    21fc:	ce 01       	movw	r24, r28
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
	StringPortCLASS ptr=StringPort_Constructor(NULL);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 ba 10 	call	0x2174	; 0x2174 <StringPort_Constructor>
    220c:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_StringPort_id, &ptr->_StringPort_refs, (freeVdmClassFunction)&StringPort_free, ptr)});
    220e:	bc 01       	movw	r22, r24
    2210:	64 5f       	subi	r22, 0xF4	; 244
    2212:	7f 4f       	sbci	r23, 0xFF	; 255
    2214:	82 85       	ldd	r24, Z+10	; 0x0a
    2216:	93 85       	ldd	r25, Z+11	; 0x0b
    2218:	48 e8       	ldi	r20, 0x88	; 136
    221a:	50 e1       	ldi	r21, 0x10	; 16
    221c:	9f 01       	movw	r18, r30
    221e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	StringPortCLASS ptr=StringPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    222c:	8b e0       	ldi	r24, 0x0B	; 11
    222e:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
			{	.ptr=newClassValue(ptr->_StringPort_id, &ptr->_StringPort_refs, (freeVdmClassFunction)&StringPort_free, ptr)});
}
    2232:	08 95       	ret

00002234 <_Z10StringPortEV>:
 TVP _Z10StringPortEV(StringPortCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    2234:	89 2b       	or	r24, r25
    2236:	19 f0       	breq	.+6      	; 0x223e <_Z10StringPortEV+0xa>
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <_Z10StringPortEV+0x10>
	
	{

__buf = new();
    223e:	0e 94 02 11 	call	0x2204	; 0x2204 <new>
    2242:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, StringPort);
}
;

return __buf;
}
    2244:	c9 01       	movw	r24, r18
    2246:	08 95       	ret

00002248 <_Z10StringPortE1QC>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 91:12 */
 TVP _Z10StringPortE1QC(StringPortCLASS this, TVP v)	{
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	dc 01       	movw	r26, r24
    2252:	8b 01       	movw	r16, r22

TVP __buf = NULL
;

if ( this == NULL )
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	19 f0       	breq	.+6      	; 0x225e <_Z10StringPortE1QC+0x16>
    2258:	c0 e0       	ldi	r28, 0x00	; 0
    225a:	d0 e0       	ldi	r29, 0x00	; 0
    225c:	07 c0       	rjmp	.+14     	; 0x226c <_Z10StringPortE1QC+0x24>
	
	{

__buf = new();
    225e:	0e 94 02 11 	call	0x2204	; 0x2204 <new>
    2262:	ec 01       	movw	r28, r24

this = TO_CLASS_PTR(__buf, StringPort);
    2264:	eb 81       	ldd	r30, Y+3	; 0x03
    2266:	fc 81       	ldd	r31, Y+4	; 0x04
    2268:	a0 81       	ld	r26, Z
    226a:	b1 81       	ldd	r27, Z+1	; 0x01
}
;
/* Fmi.vdmrt 92:20 */
CALL_FUNC_PTR(StringPort, StringPort, this, CLASS_StringPort__Z8setValueE1QC, v);
    226c:	18 96       	adiw	r26, 0x08	; 8
    226e:	ed 91       	ld	r30, X+
    2270:	fc 91       	ld	r31, X
    2272:	19 97       	sbiw	r26, 0x09	; 9
    2274:	02 84       	ldd	r0, Z+10	; 0x0a
    2276:	f3 85       	ldd	r31, Z+11	; 0x0b
    2278:	e0 2d       	mov	r30, r0
    227a:	cd 01       	movw	r24, r26
    227c:	b8 01       	movw	r22, r16
    227e:	09 95       	icall

return __buf;
}
    2280:	ce 01       	movw	r24, r28
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	08 95       	ret

0000228c <System_free_fields>:
 *
 --------------------------------- */

void System_free_fields(struct System *this)
{
			}
    228c:	08 95       	ret

0000228e <System_free>:

static void System_free(struct System *this)
{
    228e:	fc 01       	movw	r30, r24
	--this->_System_refs;
    2290:	84 81       	ldd	r24, Z+4	; 0x04
    2292:	95 81       	ldd	r25, Z+5	; 0x05
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	95 83       	std	Z+5, r25	; 0x05
    2298:	84 83       	std	Z+4, r24	; 0x04
	if (this->_System_refs < 1)
    229a:	89 2b       	or	r24, r25
    229c:	19 f4       	brne	.+6      	; 0x22a4 <System_free+0x16>
	{
		System_free_fields(this);
		free(this);
    229e:	cf 01       	movw	r24, r30
    22a0:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    22a4:	08 95       	ret

000022a6 <System_Constructor>:
 *
 --------------------------------- */
 
 
SystemCLASS System_Constructor(SystemCLASS this_ptr)
{
    22a6:	fc 01       	movw	r30, r24

	if(this_ptr==NULL)
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	39 f4       	brne	.+14     	; 0x22ba <System_Constructor+0x14>
	{
		this_ptr = (SystemCLASS) malloc(sizeof(struct System));
    22ac:	88 e0       	ldi	r24, 0x08	; 8
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    22b4:	fc 01       	movw	r30, r24
	}

	if(this_ptr!=NULL)
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	51 f0       	breq	.+20     	; 0x22ce <System_Constructor+0x28>
	{
	
			
		/*  System init  */
		this_ptr->_System_id = CLASS_ID_System_ID;
    22ba:	87 e0       	ldi	r24, 0x07	; 7
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	93 83       	std	Z+3, r25	; 0x03
    22c0:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_System_refs = 0;
    22c2:	15 82       	std	Z+5, r1	; 0x05
    22c4:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_System_pVTable=VTableArrayForSystem;
    22c6:	8b e8       	ldi	r24, 0x8B	; 139
    22c8:	92 e0       	ldi	r25, 0x02	; 2
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	80 83       	st	Z, r24

										}

	return this_ptr;
}
    22ce:	cf 01       	movw	r24, r30
    22d0:	08 95       	ret

000022d2 <_Z6SystemEV>:
 *
 --------------------------------- */ 
 

    /* System.vdmrt 14:8 */
 TVP _Z6SystemEV(SystemCLASS this)	{
    22d2:	af 92       	push	r10
    22d4:	bf 92       	push	r11
    22d6:	cf 92       	push	r12
    22d8:	df 92       	push	r13
    22da:	ef 92       	push	r14
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29

TVP __buf = NULL
;

if ( this == NULL )
    22e6:	89 2b       	or	r24, r25
    22e8:	19 f0       	breq	.+6      	; 0x22f0 <_Z6SystemEV+0x1e>
    22ea:	c0 e0       	ldi	r28, 0x00	; 0
    22ec:	d0 e0       	ldi	r29, 0x00	; 0
    22ee:	18 c0       	rjmp	.+48     	; 0x2320 <_Z6SystemEV+0x4e>
}

/*  Method for creating new "class"  */
static TVP new()
{
	SystemCLASS ptr=System_Constructor(NULL);
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <System_Constructor>
    22f8:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_System_id, &ptr->_System_refs, (freeVdmClassFunction)&System_free, ptr)});
    22fa:	bc 01       	movw	r22, r24
    22fc:	6c 5f       	subi	r22, 0xFC	; 252
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	47 e4       	ldi	r20, 0x47	; 71
    2306:	51 e1       	ldi	r21, 0x11	; 17
    2308:	9f 01       	movw	r18, r30
    230a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	SystemCLASS ptr=System_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    2318:	8b e0       	ldi	r24, 0x0B	; 11
    231a:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
    231e:	ec 01       	movw	r28, r24
this = TO_CLASS_PTR(__buf, System);
}
;
/* System.vdmrt 16:9 */
TVP servoLeft = _Z10RobotServoE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), servo_left_out))
;
    2320:	80 91 0c 03 	lds	r24, 0x030C
    2324:	90 91 0d 03 	lds	r25, 0x030D
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    2330:	dc 01       	movw	r26, r24
    2332:	13 96       	adiw	r26, 0x03	; 3
    2334:	ed 91       	ld	r30, X+
    2336:	fc 91       	ld	r31, X
    2338:	14 97       	sbiw	r26, 0x04	; 4
    233a:	01 90       	ld	r0, Z+
    233c:	f0 81       	ld	r31, Z
    233e:	e0 2d       	mov	r30, r0
    2340:	86 85       	ldd	r24, Z+14	; 0x0e
    2342:	97 85       	ldd	r25, Z+15	; 0x0f
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    234c:	bc 01       	movw	r22, r24
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 35 10 	call	0x206a	; 0x206a <_Z10RobotServoE8CRealPort>
    2356:	5c 01       	movw	r10, r24
/* System.vdmrt 17:9 */
TVP servoRight = _Z10RobotServoE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), servo_right_out))
;
    2358:	80 91 0c 03 	lds	r24, 0x030C
    235c:	90 91 0d 03 	lds	r25, 0x030D
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    2368:	dc 01       	movw	r26, r24
    236a:	13 96       	adiw	r26, 0x03	; 3
    236c:	ed 91       	ld	r30, X+
    236e:	fc 91       	ld	r31, X
    2370:	14 97       	sbiw	r26, 0x04	; 4
    2372:	01 90       	ld	r0, Z+
    2374:	f0 81       	ld	r31, Z
    2376:	e0 2d       	mov	r30, r0
    2378:	84 85       	ldd	r24, Z+12	; 0x0c
    237a:	95 85       	ldd	r25, Z+13	; 0x0d
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    2384:	bc 01       	movw	r22, r24
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 35 10 	call	0x206a	; 0x206a <_Z10RobotServoE8CRealPort>
    238e:	6c 01       	movw	r12, r24
/* System.vdmrt 18:9 */
TVP sensorRightVal = _Z11RobotSensorE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), rightVal))
;
    2390:	80 91 0c 03 	lds	r24, 0x030C
    2394:	90 91 0d 03 	lds	r25, 0x030D
    2398:	60 e0       	ldi	r22, 0x00	; 0
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    23a0:	dc 01       	movw	r26, r24
    23a2:	13 96       	adiw	r26, 0x03	; 3
    23a4:	ed 91       	ld	r30, X+
    23a6:	fc 91       	ld	r31, X
    23a8:	14 97       	sbiw	r26, 0x04	; 4
    23aa:	01 90       	ld	r0, Z+
    23ac:	f0 81       	ld	r31, Z
    23ae:	e0 2d       	mov	r30, r0
    23b0:	80 85       	ldd	r24, Z+8	; 0x08
    23b2:	91 85       	ldd	r25, Z+9	; 0x09
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    23bc:	bc 01       	movw	r22, r24
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_Z11RobotSensorE8CRealPort>
    23c6:	7c 01       	movw	r14, r24
/* System.vdmrt 19:9 */
TVP sensorLeftVal = _Z11RobotSensorE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), leftVal))
;
    23c8:	80 91 0c 03 	lds	r24, 0x030C
    23cc:	90 91 0d 03 	lds	r25, 0x030D
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    23d8:	dc 01       	movw	r26, r24
    23da:	13 96       	adiw	r26, 0x03	; 3
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	14 97       	sbiw	r26, 0x04	; 4
    23e2:	01 90       	ld	r0, Z+
    23e4:	f0 81       	ld	r31, Z
    23e6:	e0 2d       	mov	r30, r0
    23e8:	86 81       	ldd	r24, Z+6	; 0x06
    23ea:	97 81       	ldd	r25, Z+7	; 0x07
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    23f4:	bc 01       	movw	r22, r24
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_Z11RobotSensorE8CRealPort>
    23fe:	8c 01       	movw	r16, r24
/* System.vdmrt 21:13 */
g_System_controller = _Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor(NULL, servoLeft, servoRight, sensorRightVal, sensorLeftVal);
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	b5 01       	movw	r22, r10
    2406:	a6 01       	movw	r20, r12
    2408:	97 01       	movw	r18, r14
    240a:	0e 94 16 03 	call	0x62c	; 0x62c <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor>
    240e:	90 93 0f 03 	sts	0x030F, r25
    2412:	80 93 0e 03 	sts	0x030E, r24

return __buf;
}
    2416:	ce 01       	movw	r24, r28
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	ff 90       	pop	r15
    2422:	ef 90       	pop	r14
    2424:	df 90       	pop	r13
    2426:	cf 90       	pop	r12
    2428:	bf 90       	pop	r11
    242a:	af 90       	pop	r10
    242c:	08 95       	ret

0000242e <System_static_shutdown>:



 void System_static_shutdown()	{

vdmFree(g_System_hwi);
    242e:	80 91 0c 03 	lds	r24, 0x030C
    2432:	90 91 0d 03 	lds	r25, 0x030D
    2436:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

vdmFree(g_System_controller);
    243a:	80 91 0e 03 	lds	r24, 0x030E
    243e:	90 91 0f 03 	lds	r25, 0x030F
    2442:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
    2446:	08 95       	ret

00002448 <System_const_shutdown>:



 void System_const_shutdown()	{

vdmFree(numFields_4);
    2448:	80 91 0a 03 	lds	r24, 0x030A
    244c:	90 91 0b 03 	lds	r25, 0x030B
    2450:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
    2454:	08 95       	ret

00002456 <System_static_init>:


 static  TVP _Z17fieldInitializer9EV()	{
/* System.vdmrt 6:43 */
TVP ret_14 = _Z17HardwareInterfaceEV(NULL)
;
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 49 0c 	call	0x1892	; 0x1892 <_Z17HardwareInterfaceEV>



 void System_static_init()	{

g_System_hwi = _Z17fieldInitializer9EV();
    245e:	90 93 0d 03 	sts	0x030D, r25
    2462:	80 93 0c 03 	sts	0x030C, r24

g_System_controller = _Z18fieldInitializer10EV();
    2466:	10 92 0f 03 	sts	0x030F, r1
    246a:	10 92 0e 03 	sts	0x030E, r1

return ;
}
    246e:	08 95       	ret

00002470 <System_const_init>:


 static  TVP _Z17fieldInitializer8EV()	{

TVP ret_15 = newInt(2)
;
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>



 void System_const_init()	{

numFields_4 = _Z17fieldInitializer8EV();
    2478:	90 93 0b 03 	sts	0x030B, r25
    247c:	80 93 0a 03 	sts	0x030A, r24

return ;
}
    2480:	08 95       	ret

00002482 <World_free_fields>:
 *
 --------------------------------- */

void World_free_fields(struct World *this)
{
	}
    2482:	08 95       	ret

00002484 <_Z3runEV>:
return ret_16;
}


/* World.vdmrt 5:8 */
 static  void _Z3runEV(WorldCLASS this)	{
    2484:	fc 01       	movw	r30, r24
/* World.vdmrt 7:5 */
;
/* World.vdmrt 8:5 */
CALL_FUNC_PTR(World, World, this, CLASS_World__Z5blockEV);
    2486:	a0 81       	ld	r26, Z
    2488:	b1 81       	ldd	r27, Z+1	; 0x01
    248a:	1a 96       	adiw	r26, 0x0a	; 10
    248c:	2d 91       	ld	r18, X+
    248e:	3c 91       	ld	r19, X
    2490:	1b 97       	sbiw	r26, 0x0b	; 11
    2492:	f9 01       	movw	r30, r18
    2494:	09 95       	icall
}
    2496:	08 95       	ret

00002498 <_Z5blockEV>:
/* World.vdmrt 12:13 */
{
/*  Skip  */
}
;
}
    2498:	08 95       	ret

0000249a <World_static_init>:


 void World_static_init()	{

return ;
}
    249a:	08 95       	ret

0000249c <World_static_shutdown>:


 void World_static_shutdown()	{

return ;
}
    249c:	08 95       	ret

0000249e <World_free>:
void World_free_fields(struct World *this)
{
	}

static void World_free(struct World *this)
{
    249e:	fc 01       	movw	r30, r24
	--this->_World_refs;
    24a0:	84 81       	ldd	r24, Z+4	; 0x04
    24a2:	95 81       	ldd	r25, Z+5	; 0x05
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	95 83       	std	Z+5, r25	; 0x05
    24a8:	84 83       	std	Z+4, r24	; 0x04
	if (this->_World_refs < 1)
    24aa:	89 2b       	or	r24, r25
    24ac:	19 f4       	brne	.+6      	; 0x24b4 <World_free+0x16>
	{
		World_free_fields(this);
		free(this);
    24ae:	cf 01       	movw	r24, r30
    24b0:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    24b4:	08 95       	ret

000024b6 <World_Constructor>:
 *
 --------------------------------- */
 
 
WorldCLASS World_Constructor(WorldCLASS this_ptr)
{
    24b6:	fc 01       	movw	r30, r24

	if(this_ptr==NULL)
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	39 f4       	brne	.+14     	; 0x24ca <World_Constructor+0x14>
	{
		this_ptr = (WorldCLASS) malloc(sizeof(struct World));
    24bc:	88 e0       	ldi	r24, 0x08	; 8
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    24c4:	fc 01       	movw	r30, r24
	}

	if(this_ptr!=NULL)
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	51 f0       	breq	.+20     	; 0x24de <World_Constructor+0x28>
	{
	
			
		/*  World init  */
		this_ptr->_World_id = CLASS_ID_World_ID;
    24ca:	88 e0       	ldi	r24, 0x08	; 8
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	93 83       	std	Z+3, r25	; 0x03
    24d0:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_World_refs = 0;
    24d2:	15 82       	std	Z+5, r1	; 0x05
    24d4:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_World_pVTable=VTableArrayForWorld;
    24d6:	81 e9       	ldi	r24, 0x91	; 145
    24d8:	92 e0       	ldi	r25, 0x02	; 2
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24

				}

	return this_ptr;
}
    24de:	cf 01       	movw	r24, r30
    24e0:	08 95       	ret

000024e2 <_Z5WorldEV>:
 TVP _Z5WorldEV(WorldCLASS this)	{

TVP __buf = NULL
;

if ( this == NULL )
    24e2:	89 2b       	or	r24, r25
    24e4:	19 f0       	breq	.+6      	; 0x24ec <_Z5WorldEV+0xa>
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	18 c0       	rjmp	.+48     	; 0x251c <_Z5WorldEV+0x3a>
}

/*  Method for creating new "class"  */
static TVP new()
{
	WorldCLASS ptr=World_Constructor(NULL);
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <World_Constructor>
    24f4:	fc 01       	movw	r30, r24

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_World_id, &ptr->_World_refs, (freeVdmClassFunction)&World_free, ptr)});
    24f6:	bc 01       	movw	r22, r24
    24f8:	6c 5f       	subi	r22, 0xFC	; 252
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	4f e4       	ldi	r20, 0x4F	; 79
    2502:	52 e1       	ldi	r21, 0x12	; 18
    2504:	9f 01       	movw	r18, r30
    2506:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	ac 01       	movw	r20, r24
/*  Method for creating new "class"  */
static TVP new()
{
	WorldCLASS ptr=World_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    2514:	8b e0       	ldi	r24, 0x0B	; 11
    2516:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
    251a:	9c 01       	movw	r18, r24
this = TO_CLASS_PTR(__buf, World);
}
;

return __buf;
}
    251c:	c9 01       	movw	r24, r18
    251e:	08 95       	ret

00002520 <World_const_shutdown>:



 void World_const_shutdown()	{

vdmFree(numFields_5);
    2520:	80 91 10 03 	lds	r24, 0x0310
    2524:	90 91 11 03 	lds	r25, 0x0311
    2528:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

return ;
}
    252c:	08 95       	ret

0000252e <World_const_init>:
 

 static  TVP _Z18fieldInitializer11EV()	{

TVP ret_16 = newInt(0)
;
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>



 void World_const_init()	{

numFields_5 = _Z18fieldInitializer11EV();
    2536:	90 93 11 03 	sts	0x0311, r25
    253a:	80 93 10 03 	sts	0x0310, r24

return ;
}
    253e:	08 95       	ret

00002540 <vdmFree_GCInternal>:
	return match;
}


void vdmFree_GCInternal(TVP ptr)
{
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	7c 01       	movw	r14, r24
	if (ptr == NULL)
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	09 f4       	brne	.+2      	; 0x2554 <vdmFree_GCInternal+0x14>
    2552:	6d c0       	rjmp	.+218    	; 0x262e <vdmFree_GCInternal+0xee>
		return;

	switch (ptr->type)
    2554:	dc 01       	movw	r26, r24
    2556:	8c 91       	ld	r24, X
    2558:	88 30       	cpi	r24, 0x08	; 8
    255a:	39 f0       	breq	.+14     	; 0x256a <vdmFree_GCInternal+0x2a>
    255c:	8b 30       	cpi	r24, 0x0B	; 11
    255e:	09 f4       	brne	.+2      	; 0x2562 <vdmFree_GCInternal+0x22>
    2560:	4b c0       	rjmp	.+150    	; 0x25f8 <vdmFree_GCInternal+0xb8>
    2562:	87 30       	cpi	r24, 0x07	; 7
    2564:	09 f0       	breq	.+2      	; 0x2568 <vdmFree_GCInternal+0x28>
    2566:	60 c0       	rjmp	.+192    	; 0x2628 <vdmFree_GCInternal+0xe8>
    2568:	26 c0       	rjmp	.+76     	; 0x25b6 <vdmFree_GCInternal+0x76>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    256a:	f7 01       	movw	r30, r14
    256c:	03 81       	ldd	r16, Z+3	; 0x03
    256e:	14 81       	ldd	r17, Z+4	; 0x04
    2570:	c0 e0       	ldi	r28, 0x00	; 0
    2572:	d0 e0       	ldi	r29, 0x00	; 0
    2574:	0c c0       	rjmp	.+24     	; 0x258e <vdmFree_GCInternal+0x4e>
		for (i = 0; i < cptr->size; i++)
		{
			if (cptr->value[i] != NULL)
    2576:	ce 01       	movw	r24, r28
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	e8 0f       	add	r30, r24
    257e:	f9 1f       	adc	r31, r25
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	11 f0       	breq	.+4      	; 0x258c <vdmFree_GCInternal+0x4c>
			{
				vdmFree_GCInternal(cptr->value[i]);
    2588:	0e 94 a0 12 	call	0x2540	; 0x2540 <vdmFree_GCInternal>
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    258c:	21 96       	adiw	r28, 0x01	; 1
    258e:	d8 01       	movw	r26, r16
    2590:	12 96       	adiw	r26, 0x02	; 2
    2592:	8d 91       	ld	r24, X+
    2594:	9c 91       	ld	r25, X
    2596:	13 97       	sbiw	r26, 0x03	; 3
    2598:	ed 91       	ld	r30, X+
    259a:	fc 91       	ld	r31, X
    259c:	c8 17       	cp	r28, r24
    259e:	d9 07       	cpc	r29, r25
    25a0:	54 f3       	brlt	.-44     	; 0x2576 <vdmFree_GCInternal+0x36>
			if (cptr->value[i] != NULL)
			{
				vdmFree_GCInternal(cptr->value[i]);
			}
		}
		free(cptr->value);
    25a2:	cf 01       	movw	r24, r30
    25a4:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
		free(cptr);
    25a8:	c8 01       	movw	r24, r16
    25aa:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
		ptr->value.ptr = NULL;
    25ae:	f7 01       	movw	r30, r14
    25b0:	14 82       	std	Z+4, r1	; 0x04
    25b2:	13 82       	std	Z+3, r1	; 0x03
    25b4:	39 c0       	rjmp	.+114    	; 0x2628 <vdmFree_GCInternal+0xe8>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    25b6:	d7 01       	movw	r26, r14
    25b8:	13 96       	adiw	r26, 0x03	; 3
    25ba:	0d 91       	ld	r16, X+
    25bc:	1c 91       	ld	r17, X
    25be:	14 97       	sbiw	r26, 0x04	; 4
    25c0:	c0 e0       	ldi	r28, 0x00	; 0
    25c2:	d0 e0       	ldi	r29, 0x00	; 0
    25c4:	0c c0       	rjmp	.+24     	; 0x25de <vdmFree_GCInternal+0x9e>
		for (i = 0; i < cptr->size; i++)
		{
			if (cptr->value[i] != NULL)
    25c6:	ce 01       	movw	r24, r28
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	e8 0f       	add	r30, r24
    25ce:	f9 1f       	adc	r31, r25
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	11 f0       	breq	.+4      	; 0x25dc <vdmFree_GCInternal+0x9c>
			{
				vdmFree_GCInternal(cptr->value[i]);
    25d8:	0e 94 a0 12 	call	0x2540	; 0x2540 <vdmFree_GCInternal>
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    25dc:	21 96       	adiw	r28, 0x01	; 1
    25de:	f8 01       	movw	r30, r16
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	93 81       	ldd	r25, Z+3	; 0x03
    25e4:	01 90       	ld	r0, Z+
    25e6:	f0 81       	ld	r31, Z
    25e8:	e0 2d       	mov	r30, r0
    25ea:	c8 17       	cp	r28, r24
    25ec:	d9 07       	cpc	r29, r25
    25ee:	5c f3       	brlt	.-42     	; 0x25c6 <vdmFree_GCInternal+0x86>
			if (cptr->value[i] != NULL)
			{
				vdmFree_GCInternal(cptr->value[i]);
			}
		}
		free(cptr->value);
    25f0:	cf 01       	movw	r24, r30
    25f2:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    25f6:	10 c0       	rjmp	.+32     	; 0x2618 <vdmFree_GCInternal+0xd8>
		break;
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) ptr->value.ptr;
    25f8:	f7 01       	movw	r30, r14
    25fa:	03 81       	ldd	r16, Z+3	; 0x03
    25fc:	14 81       	ldd	r17, Z+4	; 0x04
		classTptr->freeClass(classTptr->value);
    25fe:	d8 01       	movw	r26, r16
    2600:	16 96       	adiw	r26, 0x06	; 6
    2602:	ed 91       	ld	r30, X+
    2604:	fc 91       	ld	r31, X
    2606:	17 97       	sbiw	r26, 0x07	; 7
    2608:	8d 91       	ld	r24, X+
    260a:	9c 91       	ld	r25, X
    260c:	09 95       	icall
		classTptr->value = NULL;
    260e:	f8 01       	movw	r30, r16
    2610:	11 82       	std	Z+1, r1	; 0x01
    2612:	10 82       	st	Z, r1
		classTptr->freeClass = NULL;
    2614:	17 82       	std	Z+7, r1	; 0x07
    2616:	16 82       	std	Z+6, r1	; 0x06

		/* free classtype  */
		free(classTptr);
    2618:	c8 01       	movw	r24, r16
    261a:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
		ptr->value.ptr = NULL;
    261e:	d7 01       	movw	r26, r14
    2620:	14 96       	adiw	r26, 0x04	; 4
    2622:	1c 92       	st	X, r1
    2624:	1e 92       	st	-X, r1
    2626:	13 97       	sbiw	r26, 0x03	; 3
		break;
	}
	}

	/* free typedvalue  */
	free(ptr);
    2628:	c7 01       	movw	r24, r14
    262a:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
}
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	08 95       	ret

0000263c <vdmFree>:



void vdmFree(TVP ptr)
{
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	7c 01       	movw	r14, r24
	TVP *tmp;

	if (ptr == NULL)
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	09 f4       	brne	.+2      	; 0x2650 <vdmFree+0x14>
    264e:	77 c0       	rjmp	.+238    	; 0x273e <vdmFree+0x102>
		return;

	switch (ptr->type)
    2650:	dc 01       	movw	r26, r24
    2652:	8c 91       	ld	r24, X
    2654:	88 30       	cpi	r24, 0x08	; 8
    2656:	39 f0       	breq	.+14     	; 0x2666 <vdmFree+0x2a>
    2658:	8b 30       	cpi	r24, 0x0B	; 11
    265a:	09 f4       	brne	.+2      	; 0x265e <vdmFree+0x22>
    265c:	4b c0       	rjmp	.+150    	; 0x26f4 <vdmFree+0xb8>
    265e:	87 30       	cpi	r24, 0x07	; 7
    2660:	09 f0       	breq	.+2      	; 0x2664 <vdmFree+0x28>
    2662:	60 c0       	rjmp	.+192    	; 0x2724 <vdmFree+0xe8>
    2664:	26 c0       	rjmp	.+76     	; 0x26b2 <vdmFree+0x76>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    2666:	f7 01       	movw	r30, r14
    2668:	03 81       	ldd	r16, Z+3	; 0x03
    266a:	14 81       	ldd	r17, Z+4	; 0x04
    266c:	c0 e0       	ldi	r28, 0x00	; 0
    266e:	d0 e0       	ldi	r29, 0x00	; 0
    2670:	0c c0       	rjmp	.+24     	; 0x268a <vdmFree+0x4e>
		for (i = 0; i < cptr->size; i++)
		{
			if (cptr->value[i] != NULL)
    2672:	ce 01       	movw	r24, r28
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	e8 0f       	add	r30, r24
    267a:	f9 1f       	adc	r31, r25
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	11 f0       	breq	.+4      	; 0x2688 <vdmFree+0x4c>
			{
				vdmFree(cptr->value[i]);
    2684:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    2688:	21 96       	adiw	r28, 0x01	; 1
    268a:	d8 01       	movw	r26, r16
    268c:	12 96       	adiw	r26, 0x02	; 2
    268e:	8d 91       	ld	r24, X+
    2690:	9c 91       	ld	r25, X
    2692:	13 97       	sbiw	r26, 0x03	; 3
    2694:	ed 91       	ld	r30, X+
    2696:	fc 91       	ld	r31, X
    2698:	c8 17       	cp	r28, r24
    269a:	d9 07       	cpc	r29, r25
    269c:	54 f3       	brlt	.-44     	; 0x2672 <vdmFree+0x36>
			if (cptr->value[i] != NULL)
			{
				vdmFree(cptr->value[i]);
			}
		}
		free(cptr->value);
    269e:	cf 01       	movw	r24, r30
    26a0:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
		free(cptr);
    26a4:	c8 01       	movw	r24, r16
    26a6:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
		ptr->value.ptr = NULL;
    26aa:	f7 01       	movw	r30, r14
    26ac:	14 82       	std	Z+4, r1	; 0x04
    26ae:	13 82       	std	Z+3, r1	; 0x03
    26b0:	39 c0       	rjmp	.+114    	; 0x2724 <vdmFree+0xe8>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    26b2:	d7 01       	movw	r26, r14
    26b4:	13 96       	adiw	r26, 0x03	; 3
    26b6:	0d 91       	ld	r16, X+
    26b8:	1c 91       	ld	r17, X
    26ba:	14 97       	sbiw	r26, 0x04	; 4
    26bc:	c0 e0       	ldi	r28, 0x00	; 0
    26be:	d0 e0       	ldi	r29, 0x00	; 0
    26c0:	0c c0       	rjmp	.+24     	; 0x26da <vdmFree+0x9e>
		for (i = 0; i < cptr->size; i++)
		{
			if (cptr->value[i] != NULL)
    26c2:	ce 01       	movw	r24, r28
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	e8 0f       	add	r30, r24
    26ca:	f9 1f       	adc	r31, r25
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	11 f0       	breq	.+4      	; 0x26d8 <vdmFree+0x9c>
			{
				vdmFree(cptr->value[i]);
    26d4:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    26d8:	21 96       	adiw	r28, 0x01	; 1
    26da:	f8 01       	movw	r30, r16
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	01 90       	ld	r0, Z+
    26e2:	f0 81       	ld	r31, Z
    26e4:	e0 2d       	mov	r30, r0
    26e6:	c8 17       	cp	r28, r24
    26e8:	d9 07       	cpc	r29, r25
    26ea:	5c f3       	brlt	.-42     	; 0x26c2 <vdmFree+0x86>
			if (cptr->value[i] != NULL)
			{
				vdmFree(cptr->value[i]);
			}
		}
		free(cptr->value);
    26ec:	cf 01       	movw	r24, r30
    26ee:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    26f2:	10 c0       	rjmp	.+32     	; 0x2714 <vdmFree+0xd8>
		break;
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) ptr->value.ptr;
    26f4:	f7 01       	movw	r30, r14
    26f6:	03 81       	ldd	r16, Z+3	; 0x03
    26f8:	14 81       	ldd	r17, Z+4	; 0x04
		classTptr->freeClass(classTptr->value);
    26fa:	d8 01       	movw	r26, r16
    26fc:	16 96       	adiw	r26, 0x06	; 6
    26fe:	ed 91       	ld	r30, X+
    2700:	fc 91       	ld	r31, X
    2702:	17 97       	sbiw	r26, 0x07	; 7
    2704:	8d 91       	ld	r24, X+
    2706:	9c 91       	ld	r25, X
    2708:	09 95       	icall
		classTptr->value = NULL;
    270a:	f8 01       	movw	r30, r16
    270c:	11 82       	std	Z+1, r1	; 0x01
    270e:	10 82       	st	Z, r1
		classTptr->freeClass = NULL;
    2710:	17 82       	std	Z+7, r1	; 0x07
    2712:	16 82       	std	Z+6, r1	; 0x06

		/* free classtype  */
		free(classTptr);
    2714:	c8 01       	movw	r24, r16
    2716:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
		ptr->value.ptr = NULL;
    271a:	d7 01       	movw	r26, r14
    271c:	14 96       	adiw	r26, 0x04	; 4
    271e:	1c 92       	st	X, r1
    2720:	1e 92       	st	-X, r1
    2722:	13 97       	sbiw	r26, 0x03	; 3
		break;
	}
	}

	/* free typedvalue  */
	remove_allocd_mem_node_by_location(ptr);
    2724:	c7 01       	movw	r24, r14
    2726:	0e 94 ee 23 	call	0x47dc	; 0x47dc <remove_allocd_mem_node_by_location>
	tmp = ptr->ref_from;
    272a:	f7 01       	movw	r30, r14
    272c:	c1 81       	ldd	r28, Z+1	; 0x01
    272e:	d2 81       	ldd	r29, Z+2	; 0x02
	free(ptr);
    2730:	c7 01       	movw	r24, r14
    2732:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	if(tmp != NULL)
    2736:	20 97       	sbiw	r28, 0x00	; 0
    2738:	11 f0       	breq	.+4      	; 0x273e <vdmFree+0x102>
	{
		*tmp = NULL;
    273a:	19 82       	std	Y+1, r1	; 0x01
    273c:	18 82       	st	Y, r1
	}
}
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	ff 90       	pop	r15
    2748:	ef 90       	pop	r14
    274a:	08 95       	ret

0000274c <equals>:
}



bool equals(TVP a, TVP b)
{
    274c:	cf 92       	push	r12
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <equals+0x10>
    275c:	00 d0       	rcall	.+0      	; 0x275e <equals+0x12>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <equals+0x14>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	7c 01       	movw	r14, r24
    2766:	6b 01       	movw	r12, r22
	if(isNumber(a)&& isNumber(b))
    2768:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <isNumber>
    276c:	88 23       	and	r24, r24
    276e:	b9 f0       	breq	.+46     	; 0x279e <equals+0x52>
    2770:	c6 01       	movw	r24, r12
    2772:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <isNumber>
    2776:	88 23       	and	r24, r24
    2778:	91 f0       	breq	.+36     	; 0x279e <equals+0x52>
	{
		return toDouble(a)==toDouble(b);
    277a:	c7 01       	movw	r24, r14
    277c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    2780:	6b 83       	std	Y+3, r22	; 0x03
    2782:	7c 83       	std	Y+4, r23	; 0x04
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	c6 01       	movw	r24, r12
    278a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    278e:	9b 01       	movw	r18, r22
    2790:	ac 01       	movw	r20, r24
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	6b 81       	ldd	r22, Y+3	; 0x03
    2796:	7c 81       	ldd	r23, Y+4	; 0x04
    2798:	8d 81       	ldd	r24, Y+5	; 0x05
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	34 c0       	rjmp	.+104    	; 0x2806 <equals+0xba>
	}
	if (a->type != b->type) /* is this correct for optional types too  */
    279e:	f7 01       	movw	r30, r14
    27a0:	90 81       	ld	r25, Z
    27a2:	f6 01       	movw	r30, r12
    27a4:	80 81       	ld	r24, Z
    27a6:	98 17       	cp	r25, r24
    27a8:	09 f0       	breq	.+2      	; 0x27ac <equals+0x60>
    27aa:	5f c0       	rjmp	.+190    	; 0x286a <equals+0x11e>
	{
		return false;
	}

	switch (a->type)
    27ac:	96 30       	cpi	r25, 0x06	; 6
    27ae:	b9 f0       	breq	.+46     	; 0x27de <equals+0x92>
    27b0:	97 30       	cpi	r25, 0x07	; 7
    27b2:	28 f4       	brcc	.+10     	; 0x27be <equals+0x72>
    27b4:	93 30       	cpi	r25, 0x03	; 3
    27b6:	99 f0       	breq	.+38     	; 0x27de <equals+0x92>
    27b8:	94 30       	cpi	r25, 0x04	; 4
    27ba:	d0 f4       	brcc	.+52     	; 0x27f0 <equals+0xa4>
    27bc:	29 c0       	rjmp	.+82     	; 0x2810 <equals+0xc4>
    27be:	99 30       	cpi	r25, 0x09	; 9
    27c0:	39 f1       	breq	.+78     	; 0x2810 <equals+0xc4>
    27c2:	9a 30       	cpi	r25, 0x0A	; 10
    27c4:	30 f4       	brcc	.+12     	; 0x27d2 <equals+0x86>
    27c6:	97 30       	cpi	r25, 0x07	; 7
    27c8:	89 f1       	breq	.+98     	; 0x282c <equals+0xe0>
    27ca:	98 30       	cpi	r25, 0x08	; 8
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <equals+0x84>
    27ce:	4d c0       	rjmp	.+154    	; 0x286a <equals+0x11e>
    27d0:	27 c0       	rjmp	.+78     	; 0x2820 <equals+0xd4>
    27d2:	9a 30       	cpi	r25, 0x0A	; 10
    27d4:	e9 f0       	breq	.+58     	; 0x2810 <equals+0xc4>
    27d6:	9b 30       	cpi	r25, 0x0B	; 11
    27d8:	09 f0       	breq	.+2      	; 0x27dc <equals+0x90>
    27da:	47 c0       	rjmp	.+142    	; 0x286a <equals+0x11e>
    27dc:	35 c0       	rjmp	.+106    	; 0x2848 <equals+0xfc>
	{
		return a->value.boolVal == b->value.boolVal;
	}
	case VDM_CHAR:
	{
		return a->value.charVal == b->value.charVal;
    27de:	00 e0       	ldi	r16, 0x00	; 0
    27e0:	f7 01       	movw	r30, r14
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	f6 01       	movw	r30, r12
    27e6:	83 81       	ldd	r24, Z+3	; 0x03
    27e8:	98 17       	cp	r25, r24
    27ea:	09 f0       	breq	.+2      	; 0x27ee <equals+0xa2>
    27ec:	3f c0       	rjmp	.+126    	; 0x286c <equals+0x120>
    27ee:	3b c0       	rjmp	.+118    	; 0x2866 <equals+0x11a>
		return a->value.intVal == b->value.intVal;
	}
	case VDM_RAT:
	case VDM_REAL:
	{
		return a->value.doubleVal == b->value.doubleVal;
    27f0:	00 e0       	ldi	r16, 0x00	; 0
    27f2:	f7 01       	movw	r30, r14
    27f4:	63 81       	ldd	r22, Z+3	; 0x03
    27f6:	74 81       	ldd	r23, Z+4	; 0x04
    27f8:	85 81       	ldd	r24, Z+5	; 0x05
    27fa:	96 81       	ldd	r25, Z+6	; 0x06
    27fc:	f6 01       	movw	r30, r12
    27fe:	23 81       	ldd	r18, Z+3	; 0x03
    2800:	34 81       	ldd	r19, Z+4	; 0x04
    2802:	45 81       	ldd	r20, Z+5	; 0x05
    2804:	56 81       	ldd	r21, Z+6	; 0x06
    2806:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    280a:	88 23       	and	r24, r24
    280c:	79 f5       	brne	.+94     	; 0x286c <equals+0x120>
    280e:	2b c0       	rjmp	.+86     	; 0x2866 <equals+0x11a>
	}
	case VDM_QUOTE:
	{
		return a->value.quoteVal == b->value.quoteVal;
    2810:	00 e0       	ldi	r16, 0x00	; 0
    2812:	f7 01       	movw	r30, r14
    2814:	23 81       	ldd	r18, Z+3	; 0x03
    2816:	34 81       	ldd	r19, Z+4	; 0x04
    2818:	f6 01       	movw	r30, r12
    281a:	83 81       	ldd	r24, Z+3	; 0x03
    281c:	94 81       	ldd	r25, Z+4	; 0x04
    281e:	20 c0       	rjmp	.+64     	; 0x2860 <equals+0x114>
	}
#endif
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		return collectionEqual(a, b);
    2820:	c7 01       	movw	r24, r14
    2822:	b6 01       	movw	r22, r12
    2824:	0e 94 5d 14 	call	0x28ba	; 0x28ba <collectionEqual>
    2828:	08 2f       	mov	r16, r24
    282a:	20 c0       	rjmp	.+64     	; 0x286c <equals+0x120>
	}
#endif
#ifndef NO_SETS
	case VDM_SET:
	{
		TVP r0 = vdmSetEquals(a, b);
    282c:	c7 01       	movw	r24, r14
    282e:	b6 01       	movw	r22, r12
    2830:	0e 94 6f 2b 	call	0x56de	; 0x56de <vdmSetEquals>
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
		bool r = toBool(r0);
    2838:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <toBool>
    283c:	08 2f       	mov	r16, r24
		vdmFree(r0);
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    2846:	12 c0       	rjmp	.+36     	; 0x286c <equals+0x120>
	{
		struct ClassType* ac = a->value.ptr;
		struct ClassType* bc = b->value.ptr;

		/* reference compare does the pointer point to the same instance  */
		return ac->value == bc->value;
    2848:	00 e0       	ldi	r16, 0x00	; 0
    284a:	f7 01       	movw	r30, r14
    284c:	83 81       	ldd	r24, Z+3	; 0x03
    284e:	94 81       	ldd	r25, Z+4	; 0x04
    2850:	f6 01       	movw	r30, r12
    2852:	a3 81       	ldd	r26, Z+3	; 0x03
    2854:	b4 81       	ldd	r27, Z+4	; 0x04
    2856:	fc 01       	movw	r30, r24
    2858:	20 81       	ld	r18, Z
    285a:	31 81       	ldd	r19, Z+1	; 0x01
    285c:	8d 91       	ld	r24, X+
    285e:	9c 91       	ld	r25, X
    2860:	28 17       	cp	r18, r24
    2862:	39 07       	cpc	r19, r25
    2864:	19 f4       	brne	.+6      	; 0x286c <equals+0x120>
    2866:	01 e0       	ldi	r16, 0x01	; 1
    2868:	01 c0       	rjmp	.+2      	; 0x286c <equals+0x120>
    286a:	00 e0       	ldi	r16, 0x00	; 0
	}

	}
	return false;
}
    286c:	80 2f       	mov	r24, r16
    286e:	26 96       	adiw	r28, 0x06	; 6
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	08 95       	ret

0000288a <vdmInEqualsGC>:

TVP vdmInEquals(TVP a, TVP b)
{	return newBool(!equals(a,b));}

TVP vdmInEqualsGC(TVP a, TVP b, TVP *from)
{	return newBoolGC(!equals(a,b), from);}
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	8a 01       	movw	r16, r20
    2890:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	89 27       	eor	r24, r25
    2898:	b8 01       	movw	r22, r16
    289a:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <vdmEqualsGC>:

TVP vdmEquals(TVP a, TVP b)
{	return newBool(equals(a,b));}

TVP vdmEqualsGC(TVP a, TVP b, TVP *from)
{	return newBoolGC(equals(a,b), from);}
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	8a 01       	movw	r16, r20
    28aa:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    28ae:	b8 01       	movw	r22, r16
    28b0:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <collectionEqual>:
	}
	return false;
}

bool collectionEqual(TVP col1,TVP col2)
{
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ff 92       	push	r15
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	fb 01       	movw	r30, r22
	/* internal function do not call except if args points to a collection  */

	int i;

	UNWRAP_COLLECTION(aCol,col1);
    28ca:	dc 01       	movw	r26, r24
    28cc:	13 96       	adiw	r26, 0x03	; 3
    28ce:	0d 91       	ld	r16, X+
    28d0:	1c 91       	ld	r17, X
    28d2:	14 97       	sbiw	r26, 0x04	; 4
	UNWRAP_COLLECTION(bCol,col2);
    28d4:	c3 80       	ldd	r12, Z+3	; 0x03
    28d6:	d4 80       	ldd	r13, Z+4	; 0x04

	if(aCol->size!=bCol->size)
    28d8:	f8 01       	movw	r30, r16
    28da:	22 81       	ldd	r18, Z+2	; 0x02
    28dc:	33 81       	ldd	r19, Z+3	; 0x03
    28de:	d6 01       	movw	r26, r12
    28e0:	12 96       	adiw	r26, 0x02	; 2
    28e2:	8d 91       	ld	r24, X+
    28e4:	9c 91       	ld	r25, X
    28e6:	13 97       	sbiw	r26, 0x03	; 3
    28e8:	28 17       	cp	r18, r24
    28ea:	39 07       	cpc	r19, r25
    28ec:	11 f0       	breq	.+4      	; 0x28f2 <collectionEqual+0x38>
    28ee:	ff 24       	eor	r15, r15
    28f0:	2c c0       	rjmp	.+88     	; 0x294a <collectionEqual+0x90>
    28f2:	c0 e0       	ldi	r28, 0x00	; 0
    28f4:	d0 e0       	ldi	r29, 0x00	; 0
    28f6:	ff 24       	eor	r15, r15
    28f8:	f3 94       	inc	r15
    28fa:	1f c0       	rjmp	.+62     	; 0x293a <collectionEqual+0x80>
    28fc:	ce 01       	movw	r24, r28
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25

	bool match = true;

	for (i = 0; i < aCol->size; i++)
	{
		match &= equals(aCol->value[i],bCol->value[i]);
    2902:	f8 01       	movw	r30, r16
    2904:	a0 81       	ld	r26, Z
    2906:	b1 81       	ldd	r27, Z+1	; 0x01
    2908:	a8 0f       	add	r26, r24
    290a:	b9 1f       	adc	r27, r25
    290c:	f6 01       	movw	r30, r12
    290e:	20 81       	ld	r18, Z
    2910:	31 81       	ldd	r19, Z+1	; 0x01
    2912:	28 0f       	add	r18, r24
    2914:	39 1f       	adc	r19, r25
    2916:	f9 01       	movw	r30, r18
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	8d 91       	ld	r24, X+
    291e:	9c 91       	ld	r25, X
    2920:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	2f 2d       	mov	r18, r15
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	82 23       	and	r24, r18
    292c:	93 23       	and	r25, r19
    292e:	ff 24       	eor	r15, r15
    2930:	89 2b       	or	r24, r25
    2932:	11 f0       	breq	.+4      	; 0x2938 <collectionEqual+0x7e>
    2934:	ff 24       	eor	r15, r15
    2936:	f3 94       	inc	r15
		return false;
	}

	bool match = true;

	for (i = 0; i < aCol->size; i++)
    2938:	21 96       	adiw	r28, 0x01	; 1
    293a:	d8 01       	movw	r26, r16
    293c:	12 96       	adiw	r26, 0x02	; 2
    293e:	8d 91       	ld	r24, X+
    2940:	9c 91       	ld	r25, X
    2942:	13 97       	sbiw	r26, 0x03	; 3
    2944:	c8 17       	cp	r28, r24
    2946:	d9 07       	cpc	r29, r25
    2948:	cc f2       	brlt	.-78     	; 0x28fc <collectionEqual+0x42>
	{
		match &= equals(aCol->value[i],bCol->value[i]);
	}
	return match;
}
    294a:	8f 2d       	mov	r24, r15
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	ff 90       	pop	r15
    2956:	df 90       	pop	r13
    2958:	cf 90       	pop	r12
    295a:	08 95       	ret

0000295c <vdmCollectionSize>:

	return product;
}

int vdmCollectionSize(TVP collection)
{
    295c:	fc 01       	movw	r30, r24
	ASSERT_CHECK_COLLECTION(collection);
    295e:	80 81       	ld	r24, Z
    2960:	87 50       	subi	r24, 0x07	; 7
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	10 f0       	brcs	.+4      	; 0x296a <vdmCollectionSize+0xe>
    2966:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
    296a:	03 80       	ldd	r0, Z+3	; 0x03
    296c:	f4 81       	ldd	r31, Z+4	; 0x04
    296e:	e0 2d       	mov	r30, r0
	UNWRAP_COLLECTION(col,collection);
	return col->size;
}
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	08 95       	ret

00002976 <newTypeValue>:




TVP newTypeValue(vdmtype type, TypedValueType value)
{
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	d8 2e       	mov	r13, r24
    2982:	7a 01       	movw	r14, r20
    2984:	8b 01       	movw	r16, r22
	TVP ptr = malloc(sizeof(struct TypedValue));
    2986:	87 e0       	ldi	r24, 0x07	; 7
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    298e:	fc 01       	movw	r30, r24
	assert(ptr != NULL);
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	11 f4       	brne	.+4      	; 0x2998 <newTypeValue+0x22>
    2994:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	ptr->type = type;
    2998:	d0 82       	st	Z, r13
	ptr->value = value;
    299a:	e3 82       	std	Z+3, r14	; 0x03
    299c:	f4 82       	std	Z+4, r15	; 0x04
    299e:	05 83       	std	Z+5, r16	; 0x05
    29a0:	16 83       	std	Z+6, r17	; 0x06
	ptr->ref_from = NULL;
    29a2:	12 82       	std	Z+2, r1	; 0x02
    29a4:	11 82       	std	Z+1, r1	; 0x01

	return ptr;
}
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	08 95       	ret

000029b2 <newQuote>:
}
TVP newQuote(unsigned int x)
{
	return newTypeValue(VDM_QUOTE, (TypedValueType
	)
			{ .quoteVal = x });
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	ac 01       	movw	r20, r24
	)
			{ .charVal = x });
}
TVP newQuote(unsigned int x)
{
	return newTypeValue(VDM_QUOTE, (TypedValueType
    29bc:	89 e0       	ldi	r24, 0x09	; 9
    29be:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .quoteVal = x });
}
    29c2:	08 95       	ret

000029c4 <newChar>:
}
TVP newChar(char x)
{
	return newTypeValue(VDM_CHAR, (TypedValueType
	)
			{ .charVal = x });
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	48 2f       	mov	r20, r24
	)
			{ .doubleVal = x });
}
TVP newChar(char x)
{
	return newTypeValue(VDM_CHAR, (TypedValueType
    29ce:	86 e0       	ldi	r24, 0x06	; 6
    29d0:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .charVal = x });
}
    29d4:	08 95       	ret

000029d6 <newReal>:
	return newTypeValue(VDM_BOOL, (TypedValueType
	)
			{ .boolVal = x });
}
TVP newReal(double x)
{
    29d6:	ab 01       	movw	r20, r22
    29d8:	bc 01       	movw	r22, r24
	return newTypeValue(VDM_REAL, (TypedValueType
    29da:	84 e0       	ldi	r24, 0x04	; 4
    29dc:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .doubleVal = x });
}
    29e0:	08 95       	ret

000029e2 <newBool>:

TVP newBool(bool x)
{
	return newTypeValue(VDM_BOOL, (TypedValueType
	)
			{ .boolVal = x });
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	48 2f       	mov	r20, r24
			{ .intVal = x });
}

TVP newBool(bool x)
{
	return newTypeValue(VDM_BOOL, (TypedValueType
    29ec:	83 e0       	ldi	r24, 0x03	; 3
    29ee:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .boolVal = x });
}
    29f2:	08 95       	ret

000029f4 <vdmInEquals>:

TVP vdmEqualsGC(TVP a, TVP b, TVP *from)
{	return newBoolGC(equals(a,b), from);}

TVP vdmInEquals(TVP a, TVP b)
{	return newBool(!equals(a,b));}
    29f4:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	89 27       	eor	r24, r25
    29fc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    2a00:	08 95       	ret

00002a02 <vdmEquals>:
		*tmp = NULL;
	}
}

TVP vdmEquals(TVP a, TVP b)
{	return newBool(equals(a,b));}
    2a02:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    2a06:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    2a0a:	08 95       	ret

00002a0c <newInt>:
/* / Basic  */
TVP newInt(int x)
{
	return newTypeValue(VDM_INT, (TypedValueType
	)
			{ .intVal = x });
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	70 e0       	ldi	r23, 0x00	; 0
    2a14:	ac 01       	movw	r20, r24

/* #ifndef WITH_GC  */
/* / Basic  */
TVP newInt(int x)
{
	return newTypeValue(VDM_INT, (TypedValueType
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .intVal = x });
}
    2a1c:	08 95       	ret

00002a1e <vdmClone>:
	return vdmClone(col->value[index]);

}

TVP vdmClone(TVP x)
{
    2a1e:	af 92       	push	r10
    2a20:	bf 92       	push	r11
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	fc 01       	movw	r30, r24
	TVP tmp;

	if(x == NULL)
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	19 f4       	brne	.+6      	; 0x2a3e <vdmClone+0x20>
    2a38:	aa 24       	eor	r10, r10
    2a3a:	bb 24       	eor	r11, r11
    2a3c:	b1 c0       	rjmp	.+354    	; 0x2ba0 <vdmClone+0x182>
	{
		return NULL;
	}

	tmp = newTypeValue(x->type, x->value);
    2a3e:	43 81       	ldd	r20, Z+3	; 0x03
    2a40:	54 81       	ldd	r21, Z+4	; 0x04
    2a42:	65 81       	ldd	r22, Z+5	; 0x05
    2a44:	76 81       	ldd	r23, Z+6	; 0x06
    2a46:	80 81       	ld	r24, Z
    2a48:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
    2a4c:	5c 01       	movw	r10, r24

	/* FIXME vdmClone any pointers  */
	switch (tmp->type)
    2a4e:	dc 01       	movw	r26, r24
    2a50:	8c 91       	ld	r24, X
    2a52:	88 30       	cpi	r24, 0x08	; 8
    2a54:	39 f0       	breq	.+14     	; 0x2a64 <vdmClone+0x46>
    2a56:	8b 30       	cpi	r24, 0x0B	; 11
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <vdmClone+0x3e>
    2a5a:	90 c0       	rjmp	.+288    	; 0x2b7c <vdmClone+0x15e>
    2a5c:	87 30       	cpi	r24, 0x07	; 7
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <vdmClone+0x44>
    2a60:	9f c0       	rjmp	.+318    	; 0x2ba0 <vdmClone+0x182>
    2a62:	43 c0       	rjmp	.+134    	; 0x2aea <vdmClone+0xcc>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    2a64:	f5 01       	movw	r30, r10
    2a66:	03 81       	ldd	r16, Z+3	; 0x03
    2a68:	d4 80       	ldd	r13, Z+4	; 0x04

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    2a6a:	84 e0       	ldi	r24, 0x04	; 4
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2a72:	ec 01       	movw	r28, r24
		assert(ptr != NULL);
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <vdmClone+0x5c>
    2a78:	5d c0       	rjmp	.+186    	; 0x2b34 <vdmClone+0x116>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    2a7a:	e0 2e       	mov	r14, r16
    2a7c:	fd 2c       	mov	r15, r13

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
		assert(ptr != NULL);

		/* copy (size)  */
		*ptr = *cptr;
    2a7e:	f7 01       	movw	r30, r14
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	a2 81       	ldd	r26, Z+2	; 0x02
    2a86:	b3 81       	ldd	r27, Z+3	; 0x03
    2a88:	88 83       	st	Y, r24
    2a8a:	99 83       	std	Y+1, r25	; 0x01
    2a8c:	aa 83       	std	Y+2, r26	; 0x02
    2a8e:	bb 83       	std	Y+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2a9c:	99 83       	std	Y+1, r25	; 0x01
    2a9e:	88 83       	st	Y, r24
		assert(ptr->value != NULL);
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <vdmClone+0x88>
    2aa4:	47 c0       	rjmp	.+142    	; 0x2b34 <vdmClone+0x116>
    2aa6:	cc 24       	eor	r12, r12
    2aa8:	dd 24       	eor	r13, r13
    2aaa:	16 c0       	rjmp	.+44     	; 0x2ad8 <vdmClone+0xba>
    2aac:	c6 01       	movw	r24, r12
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25

		for (i = 0; i < cptr->size; i++)
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    2ab2:	08 81       	ld	r16, Y
    2ab4:	19 81       	ldd	r17, Y+1	; 0x01
    2ab6:	08 0f       	add	r16, r24
    2ab8:	19 1f       	adc	r17, r25
    2aba:	d7 01       	movw	r26, r14
    2abc:	ed 91       	ld	r30, X+
    2abe:	fc 91       	ld	r31, X
    2ac0:	e8 0f       	add	r30, r24
    2ac2:	f9 1f       	adc	r31, r25
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    2acc:	f8 01       	movw	r30, r16
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    2ad2:	08 94       	sec
    2ad4:	c1 1c       	adc	r12, r1
    2ad6:	d1 1c       	adc	r13, r1
    2ad8:	d7 01       	movw	r26, r14
    2ada:	12 96       	adiw	r26, 0x02	; 2
    2adc:	8d 91       	ld	r24, X+
    2ade:	9c 91       	ld	r25, X
    2ae0:	13 97       	sbiw	r26, 0x03	; 3
    2ae2:	c8 16       	cp	r12, r24
    2ae4:	d9 06       	cpc	r13, r25
    2ae6:	14 f3       	brlt	.-60     	; 0x2aac <vdmClone+0x8e>
    2ae8:	45 c0       	rjmp	.+138    	; 0x2b74 <vdmClone+0x156>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    2aea:	d5 01       	movw	r26, r10
    2aec:	13 96       	adiw	r26, 0x03	; 3
    2aee:	0c 91       	ld	r16, X
    2af0:	13 97       	sbiw	r26, 0x03	; 3
    2af2:	14 96       	adiw	r26, 0x04	; 4
    2af4:	dc 90       	ld	r13, X

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    2af6:	84 e0       	ldi	r24, 0x04	; 4
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2afe:	ec 01       	movw	r28, r24
		assert(ptr != NULL);
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	c1 f0       	breq	.+48     	; 0x2b34 <vdmClone+0x116>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    2b04:	e0 2e       	mov	r14, r16
    2b06:	fd 2c       	mov	r15, r13

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
		assert(ptr != NULL);

		/* copy (size)  */
		*ptr = *cptr;
    2b08:	f7 01       	movw	r30, r14
    2b0a:	80 81       	ld	r24, Z
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b10:	b3 81       	ldd	r27, Z+3	; 0x03
    2b12:	88 83       	st	Y, r24
    2b14:	99 83       	std	Y+1, r25	; 0x01
    2b16:	aa 83       	std	Y+2, r26	; 0x02
    2b18:	bb 83       	std	Y+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2b26:	99 83       	std	Y+1, r25	; 0x01
    2b28:	88 83       	st	Y, r24
		assert(ptr->value != NULL);
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <vdmClone+0x116>
    2b2e:	cc 24       	eor	r12, r12
    2b30:	dd 24       	eor	r13, r13
    2b32:	18 c0       	rjmp	.+48     	; 0x2b64 <vdmClone+0x146>
    2b34:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
    2b38:	c6 01       	movw	r24, r12
    2b3a:	88 0f       	add	r24, r24
    2b3c:	99 1f       	adc	r25, r25

		for (i = 0; i < cptr->size; i++)
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    2b3e:	08 81       	ld	r16, Y
    2b40:	19 81       	ldd	r17, Y+1	; 0x01
    2b42:	08 0f       	add	r16, r24
    2b44:	19 1f       	adc	r17, r25
    2b46:	d7 01       	movw	r26, r14
    2b48:	ed 91       	ld	r30, X+
    2b4a:	fc 91       	ld	r31, X
    2b4c:	e8 0f       	add	r30, r24
    2b4e:	f9 1f       	adc	r31, r25
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    2b58:	f8 01       	movw	r30, r16
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    2b5e:	08 94       	sec
    2b60:	c1 1c       	adc	r12, r1
    2b62:	d1 1c       	adc	r13, r1
    2b64:	d7 01       	movw	r26, r14
    2b66:	12 96       	adiw	r26, 0x02	; 2
    2b68:	8d 91       	ld	r24, X+
    2b6a:	9c 91       	ld	r25, X
    2b6c:	13 97       	sbiw	r26, 0x03	; 3
    2b6e:	c8 16       	cp	r12, r24
    2b70:	d9 06       	cpc	r13, r25
    2b72:	14 f3       	brlt	.-60     	; 0x2b38 <vdmClone+0x11a>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    2b74:	f5 01       	movw	r30, r10
    2b76:	d4 83       	std	Z+4, r29	; 0x04
    2b78:	c3 83       	std	Z+3, r28	; 0x03
    2b7a:	12 c0       	rjmp	.+36     	; 0x2ba0 <vdmClone+0x182>
	}
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) tmp->value.ptr;
    2b7c:	d5 01       	movw	r26, r10
    2b7e:	13 96       	adiw	r26, 0x03	; 3
    2b80:	ed 91       	ld	r30, X+
    2b82:	fc 91       	ld	r31, X
    2b84:	14 97       	sbiw	r26, 0x04	; 4

		/* improve using memcpy  */
		tmp->value.ptr = newClassValue(classTptr->classId, classTptr->refs, classTptr->freeClass, classTptr->value);
    2b86:	64 81       	ldd	r22, Z+4	; 0x04
    2b88:	75 81       	ldd	r23, Z+5	; 0x05
    2b8a:	46 81       	ldd	r20, Z+6	; 0x06
    2b8c:	57 81       	ldd	r21, Z+7	; 0x07
    2b8e:	20 81       	ld	r18, Z
    2b90:	31 81       	ldd	r19, Z+1	; 0x01
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    2b9a:	f5 01       	movw	r30, r10
    2b9c:	94 83       	std	Z+4, r25	; 0x04
    2b9e:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
	}

	return tmp;
}
    2ba0:	c5 01       	movw	r24, r10
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	df 90       	pop	r13
    2bb0:	cf 90       	pop	r12
    2bb2:	bf 90       	pop	r11
    2bb4:	af 90       	pop	r10
    2bb6:	08 95       	ret

00002bb8 <vdmCollectionIndex>:
	UNWRAP_COLLECTION(col,collection);
	return col->size;
}

TVP vdmCollectionIndex(TVP collection,int index)
{
    2bb8:	fc 01       	movw	r30, r24

	ASSERT_CHECK_COLLECTION(collection);
    2bba:	80 81       	ld	r24, Z
    2bbc:	87 50       	subi	r24, 0x07	; 7
    2bbe:	82 30       	cpi	r24, 0x02	; 2
    2bc0:	58 f4       	brcc	.+22     	; 0x2bd8 <vdmCollectionIndex+0x20>

	UNWRAP_COLLECTION(col,collection);
    2bc2:	23 81       	ldd	r18, Z+3	; 0x03
    2bc4:	84 81       	ldd	r24, Z+4	; 0x04

	assert(index>=0 && index<col->size && "invalid index");
    2bc6:	77 fd       	sbrc	r23, 7
    2bc8:	07 c0       	rjmp	.+14     	; 0x2bd8 <vdmCollectionIndex+0x20>
TVP vdmCollectionIndex(TVP collection,int index)
{

	ASSERT_CHECK_COLLECTION(collection);

	UNWRAP_COLLECTION(col,collection);
    2bca:	e2 2f       	mov	r30, r18
    2bcc:	f8 2f       	mov	r31, r24

	assert(index>=0 && index<col->size && "invalid index");
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	68 17       	cp	r22, r24
    2bd4:	79 07       	cpc	r23, r25
    2bd6:	14 f0       	brlt	.+4      	; 0x2bdc <vdmCollectionIndex+0x24>
    2bd8:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return vdmClone(col->value[index]);
    2bdc:	66 0f       	add	r22, r22
    2bde:	77 1f       	adc	r23, r23
    2be0:	01 90       	ld	r0, Z+
    2be2:	f0 81       	ld	r31, Z
    2be4:	e0 2d       	mov	r30, r0
    2be6:	e6 0f       	add	r30, r22
    2be8:	f7 1f       	adc	r31, r23
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>

}
    2bf2:	08 95       	ret

00002bf4 <newCollectionPrealloc>:
	)
			{ .ptr = ptr });
}

TVP newCollectionPrealloc(size_t size, size_t expected_size, vdmtype type)
{
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	8c 01       	movw	r16, r24
    2c04:	7b 01       	movw	r14, r22
    2c06:	d4 2e       	mov	r13, r20
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    2c08:	84 e0       	ldi	r24, 0x04	; 4
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2c10:	ec 01       	movw	r28, r24
	assert(ptr != NULL);
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	59 f0       	breq	.+22     	; 0x2c2c <newCollectionPrealloc+0x38>
	ptr->size = size;
    2c16:	1b 83       	std	Y+3, r17	; 0x03
    2c18:	0a 83       	std	Y+2, r16	; 0x02
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    2c1a:	c7 01       	movw	r24, r14
    2c1c:	62 e0       	ldi	r22, 0x02	; 2
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    2c24:	99 83       	std	Y+1, r25	; 0x01
    2c26:	88 83       	st	Y, r24
	assert(ptr->value != NULL);
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	11 f4       	brne	.+4      	; 0x2c30 <newCollectionPrealloc+0x3c>
    2c2c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newTypeValue(type, (TypedValueType
	)
			{ .ptr = ptr });
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	ae 01       	movw	r20, r28
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValue(type, (TypedValueType
    2c3a:	8d 2d       	mov	r24, r13
    2c3c:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .ptr = ptr });
}
    2c40:	df 91       	pop	r29
    2c42:	cf 91       	pop	r28
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	df 90       	pop	r13
    2c4e:	08 95       	ret

00002c50 <newCollectionWithValuesPrealloc>:
	}
	return product;
}

TVP newCollectionWithValuesPrealloc(size_t size, size_t expected_size, vdmtype type, TVP* elements)
{
    2c50:	8f 92       	push	r8
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	4c 01       	movw	r8, r24
    2c6a:	12 2f       	mov	r17, r18
    2c6c:	03 2f       	mov	r16, r19
	int i;

	TVP product = newCollectionPrealloc(size, expected_size, type);
    2c6e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <newCollectionPrealloc>
    2c72:	7c 01       	movw	r14, r24
	UNWRAP_COLLECTION(col,product);
    2c74:	fc 01       	movw	r30, r24
    2c76:	a3 80       	ldd	r10, Z+3	; 0x03
    2c78:	b4 80       	ldd	r11, Z+4	; 0x04
    2c7a:	21 2f       	mov	r18, r17
    2c7c:	30 2f       	mov	r19, r16
    2c7e:	c9 01       	movw	r24, r18
    2c80:	6c 01       	movw	r12, r24
    2c82:	c0 e0       	ldi	r28, 0x00	; 0
    2c84:	d0 e0       	ldi	r29, 0x00	; 0
    2c86:	12 c0       	rjmp	.+36     	; 0x2cac <newCollectionWithValuesPrealloc+0x5c>

	for (i = 0; i < size; i++)
	{
		col->value[i]= vdmClone(elements[i]);
    2c88:	ce 01       	movw	r24, r28
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	f5 01       	movw	r30, r10
    2c90:	00 81       	ld	r16, Z
    2c92:	11 81       	ldd	r17, Z+1	; 0x01
    2c94:	08 0f       	add	r16, r24
    2c96:	19 1f       	adc	r17, r25
    2c98:	f6 01       	movw	r30, r12
    2c9a:	81 91       	ld	r24, Z+
    2c9c:	91 91       	ld	r25, Z+
    2c9e:	6f 01       	movw	r12, r30
    2ca0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    2ca4:	f8 01       	movw	r30, r16
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	80 83       	st	Z, r24
	int i;

	TVP product = newCollectionPrealloc(size, expected_size, type);
	UNWRAP_COLLECTION(col,product);

	for (i = 0; i < size; i++)
    2caa:	21 96       	adiw	r28, 0x01	; 1
    2cac:	c8 15       	cp	r28, r8
    2cae:	d9 05       	cpc	r29, r9
    2cb0:	58 f3       	brcs	.-42     	; 0x2c88 <newCollectionWithValuesPrealloc+0x38>
	{
		col->value[i]= vdmClone(elements[i]);
	}
	return product;
}
    2cb2:	c7 01       	movw	r24, r14
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	df 90       	pop	r13
    2cc2:	cf 90       	pop	r12
    2cc4:	bf 90       	pop	r11
    2cc6:	af 90       	pop	r10
    2cc8:	9f 90       	pop	r9
    2cca:	8f 90       	pop	r8
    2ccc:	08 95       	ret

00002cce <newCollection>:
	)
			{ .intVal = hashVal });
}

TVP newCollection(size_t size, vdmtype type)
{
    2cce:	ff 92       	push	r15
    2cd0:	0f 93       	push	r16
    2cd2:	1f 93       	push	r17
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	8c 01       	movw	r16, r24
    2cda:	f6 2e       	mov	r15, r22
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    2cdc:	84 e0       	ldi	r24, 0x04	; 4
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2ce4:	ec 01       	movw	r28, r24
	assert(ptr != NULL);
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	81 f0       	breq	.+32     	; 0x2d0a <newCollection+0x3c>
	ptr->size = size;
    2cea:	1b 83       	std	Y+3, r17	; 0x03
    2cec:	0a 83       	std	Y+2, r16	; 0x02
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    2cee:	01 15       	cp	r16, r1
    2cf0:	11 05       	cpc	r17, r1
    2cf2:	11 f4       	brne	.+4      	; 0x2cf8 <newCollection+0x2a>
    2cf4:	01 e0       	ldi	r16, 0x01	; 1
    2cf6:	10 e0       	ldi	r17, 0x00	; 0
    2cf8:	c8 01       	movw	r24, r16
    2cfa:	62 e0       	ldi	r22, 0x02	; 2
    2cfc:	70 e0       	ldi	r23, 0x00	; 0
    2cfe:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    2d02:	99 83       	std	Y+1, r25	; 0x01
    2d04:	88 83       	st	Y, r24
	assert(ptr->value != NULL);
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	11 f4       	brne	.+4      	; 0x2d0e <newCollection+0x40>
    2d0a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newTypeValue(type, (TypedValueType
	)
			{ .ptr = ptr });
    2d0e:	40 e0       	ldi	r20, 0x00	; 0
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	70 e0       	ldi	r23, 0x00	; 0
    2d16:	ae 01       	movw	r20, r28
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValue(type, (TypedValueType
    2d18:	8f 2d       	mov	r24, r15
    2d1a:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .ptr = ptr });
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	08 95       	ret

00002d2a <newCollectionWithValues>:
	)
			{ .ptr = ptr }, from);
}

TVP newCollectionWithValues(size_t size, vdmtype type, TVP* elements)
{
    2d2a:	8f 92       	push	r8
    2d2c:	9f 92       	push	r9
    2d2e:	af 92       	push	r10
    2d30:	bf 92       	push	r11
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ef 92       	push	r14
    2d38:	ff 92       	push	r15
    2d3a:	0f 93       	push	r16
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	5c 01       	movw	r10, r24
    2d44:	14 2f       	mov	r17, r20
    2d46:	05 2f       	mov	r16, r21
	int i;

	TVP product = newCollection(size,type);
    2d48:	0e 94 67 16 	call	0x2cce	; 0x2cce <newCollection>
    2d4c:	7c 01       	movw	r14, r24
	UNWRAP_COLLECTION(col,product);
    2d4e:	fc 01       	movw	r30, r24
    2d50:	83 80       	ldd	r8, Z+3	; 0x03
    2d52:	94 80       	ldd	r9, Z+4	; 0x04
    2d54:	21 2f       	mov	r18, r17
    2d56:	30 2f       	mov	r19, r16
    2d58:	c9 01       	movw	r24, r18
    2d5a:	6c 01       	movw	r12, r24
    2d5c:	c0 e0       	ldi	r28, 0x00	; 0
    2d5e:	d0 e0       	ldi	r29, 0x00	; 0
    2d60:	12 c0       	rjmp	.+36     	; 0x2d86 <newCollectionWithValues+0x5c>

	for (i = 0; i < size; i++)
	{
		col->value[i]= vdmClone(elements[i]);
    2d62:	ce 01       	movw	r24, r28
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	f4 01       	movw	r30, r8
    2d6a:	00 81       	ld	r16, Z
    2d6c:	11 81       	ldd	r17, Z+1	; 0x01
    2d6e:	08 0f       	add	r16, r24
    2d70:	19 1f       	adc	r17, r25
    2d72:	f6 01       	movw	r30, r12
    2d74:	81 91       	ld	r24, Z+
    2d76:	91 91       	ld	r25, Z+
    2d78:	6f 01       	movw	r12, r30
    2d7a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    2d7e:	f8 01       	movw	r30, r16
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
	int i;

	TVP product = newCollection(size,type);
	UNWRAP_COLLECTION(col,product);

	for (i = 0; i < size; i++)
    2d84:	21 96       	adiw	r28, 0x01	; 1
    2d86:	ca 15       	cp	r28, r10
    2d88:	db 05       	cpc	r29, r11
    2d8a:	58 f3       	brcs	.-42     	; 0x2d62 <newCollectionWithValues+0x38>
	{
		col->value[i]= vdmClone(elements[i]);
	}
	return product;
}
    2d8c:	c7 01       	movw	r24, r14
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	ff 90       	pop	r15
    2d98:	ef 90       	pop	r14
    2d9a:	df 90       	pop	r13
    2d9c:	cf 90       	pop	r12
    2d9e:	bf 90       	pop	r11
    2da0:	af 90       	pop	r10
    2da2:	9f 90       	pop	r9
    2da4:	8f 90       	pop	r8
    2da6:	08 95       	ret

00002da8 <newCollectionPreallocGC>:
	)
			{ .ptr = ptr }, from);
}

TVP newCollectionPreallocGC(size_t size, size_t expected_size, vdmtype type, TVP *from)
{
    2da8:	bf 92       	push	r11
    2daa:	cf 92       	push	r12
    2dac:	df 92       	push	r13
    2dae:	ef 92       	push	r14
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	8c 01       	movw	r16, r24
    2dbc:	7b 01       	movw	r14, r22
    2dbe:	b4 2e       	mov	r11, r20
    2dc0:	69 01       	movw	r12, r18
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    2dc2:	84 e0       	ldi	r24, 0x04	; 4
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2dca:	ec 01       	movw	r28, r24
	assert(ptr != NULL);
    2dcc:	00 97       	sbiw	r24, 0x00	; 0
    2dce:	59 f0       	breq	.+22     	; 0x2de6 <newCollectionPreallocGC+0x3e>
	ptr->size = size;
    2dd0:	1b 83       	std	Y+3, r17	; 0x03
    2dd2:	0a 83       	std	Y+2, r16	; 0x02
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    2dd4:	c7 01       	movw	r24, r14
    2dd6:	62 e0       	ldi	r22, 0x02	; 2
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    2dde:	99 83       	std	Y+1, r25	; 0x01
    2de0:	88 83       	st	Y, r24
	assert(ptr->value != NULL);
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	11 f4       	brne	.+4      	; 0x2dea <newCollectionPreallocGC+0x42>
    2de6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newTypeValueGC(type, (TypedValueType
	)
			{ .ptr = ptr }, from);
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	ae 01       	movw	r20, r28
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValueGC(type, (TypedValueType
    2df4:	8b 2d       	mov	r24, r11
    2df6:	96 01       	movw	r18, r12
    2df8:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .ptr = ptr }, from);
}
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	ef 90       	pop	r14
    2e08:	df 90       	pop	r13
    2e0a:	cf 90       	pop	r12
    2e0c:	bf 90       	pop	r11
    2e0e:	08 95       	ret

00002e10 <newCollectionGC>:
	)
			{ .ptr = ptr });
}

TVP newCollectionGC(size_t size, vdmtype type, TVP *from)
{
    2e10:	df 92       	push	r13
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	8c 01       	movw	r16, r24
    2e20:	d6 2e       	mov	r13, r22
    2e22:	7a 01       	movw	r14, r20
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    2e24:	84 e0       	ldi	r24, 0x04	; 4
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    2e2c:	ec 01       	movw	r28, r24
	assert(ptr != NULL);
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	81 f0       	breq	.+32     	; 0x2e52 <newCollectionGC+0x42>
	ptr->size = size;
    2e32:	1b 83       	std	Y+3, r17	; 0x03
    2e34:	0a 83       	std	Y+2, r16	; 0x02
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    2e36:	01 15       	cp	r16, r1
    2e38:	11 05       	cpc	r17, r1
    2e3a:	11 f4       	brne	.+4      	; 0x2e40 <newCollectionGC+0x30>
    2e3c:	01 e0       	ldi	r16, 0x01	; 1
    2e3e:	10 e0       	ldi	r17, 0x00	; 0
    2e40:	c8 01       	movw	r24, r16
    2e42:	62 e0       	ldi	r22, 0x02	; 2
    2e44:	70 e0       	ldi	r23, 0x00	; 0
    2e46:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    2e4a:	99 83       	std	Y+1, r25	; 0x01
    2e4c:	88 83       	st	Y, r24
	assert(ptr->value != NULL);
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	11 f4       	brne	.+4      	; 0x2e56 <newCollectionGC+0x46>
    2e52:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newTypeValueGC(type, (TypedValueType
	)
			{ .ptr = ptr }, from);
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	ae 01       	movw	r20, r28
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValueGC(type, (TypedValueType
    2e60:	8d 2d       	mov	r24, r13
    2e62:	97 01       	movw	r18, r14
    2e64:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .ptr = ptr }, from);
}
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	ff 90       	pop	r15
    2e72:	ef 90       	pop	r14
    2e74:	df 90       	pop	r13
    2e76:	08 95       	ret

00002e78 <newCollectionWithValuesGC>:
	}
	return product;
}

TVP newCollectionWithValuesGC(size_t size, vdmtype type, TVP* elements, TVP *from)
{
    2e78:	8f 92       	push	r8
    2e7a:	9f 92       	push	r9
    2e7c:	af 92       	push	r10
    2e7e:	bf 92       	push	r11
    2e80:	cf 92       	push	r12
    2e82:	df 92       	push	r13
    2e84:	ef 92       	push	r14
    2e86:	ff 92       	push	r15
    2e88:	0f 93       	push	r16
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	4c 01       	movw	r8, r24
    2e92:	14 2f       	mov	r17, r20
    2e94:	05 2f       	mov	r16, r21
	int i;

	TVP product = newCollectionGC(size, type, from);
    2e96:	a9 01       	movw	r20, r18
    2e98:	0e 94 08 17 	call	0x2e10	; 0x2e10 <newCollectionGC>
    2e9c:	7c 01       	movw	r14, r24
	UNWRAP_COLLECTION(col, product);
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	a3 80       	ldd	r10, Z+3	; 0x03
    2ea2:	b4 80       	ldd	r11, Z+4	; 0x04
    2ea4:	21 2f       	mov	r18, r17
    2ea6:	30 2f       	mov	r19, r16
    2ea8:	c9 01       	movw	r24, r18
    2eaa:	6c 01       	movw	r12, r24
    2eac:	c0 e0       	ldi	r28, 0x00	; 0
    2eae:	d0 e0       	ldi	r29, 0x00	; 0
    2eb0:	12 c0       	rjmp	.+36     	; 0x2ed6 <newCollectionWithValuesGC+0x5e>

	for (i = 0; i < size; i++)
	{
		col->value[i]= vdmClone(elements[i]);
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	f5 01       	movw	r30, r10
    2eba:	00 81       	ld	r16, Z
    2ebc:	11 81       	ldd	r17, Z+1	; 0x01
    2ebe:	08 0f       	add	r16, r24
    2ec0:	19 1f       	adc	r17, r25
    2ec2:	f6 01       	movw	r30, r12
    2ec4:	81 91       	ld	r24, Z+
    2ec6:	91 91       	ld	r25, Z+
    2ec8:	6f 01       	movw	r12, r30
    2eca:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    2ece:	f8 01       	movw	r30, r16
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
	int i;

	TVP product = newCollectionGC(size, type, from);
	UNWRAP_COLLECTION(col, product);

	for (i = 0; i < size; i++)
    2ed4:	21 96       	adiw	r28, 0x01	; 1
    2ed6:	c8 15       	cp	r28, r8
    2ed8:	d9 05       	cpc	r29, r9
    2eda:	58 f3       	brcs	.-42     	; 0x2eb2 <newCollectionWithValuesGC+0x3a>
	{
		col->value[i]= vdmClone(elements[i]);
	}

	return product;
}
    2edc:	c7 01       	movw	r24, r14
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	df 90       	pop	r13
    2eec:	cf 90       	pop	r12
    2eee:	bf 90       	pop	r11
    2ef0:	af 90       	pop	r10
    2ef2:	9f 90       	pop	r9
    2ef4:	8f 90       	pop	r8
    2ef6:	08 95       	ret

00002ef8 <newToken>:
	)
			{ .quoteVal = x });
}

TVP newToken(TVP x)
{
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
	char *str = unpackString(x);
    2efc:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <unpackString>
    2f00:	ac 01       	movw	r20, r24
    2f02:	fc 01       	movw	r30, r24
    2f04:	c5 e0       	ldi	r28, 0x05	; 5
    2f06:	d5 e1       	ldi	r29, 0x15	; 21
    2f08:	09 c0       	rjmp	.+18     	; 0x2f1c <newToken+0x24>
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	82 0f       	add	r24, r18
    2f16:	93 1f       	adc	r25, r19
    2f18:	c8 0f       	add	r28, r24
    2f1a:	d9 1f       	adc	r29, r25
	char *str = unpackString(x);
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
    2f1c:	81 91       	ld	r24, Z+
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	21 15       	cp	r18, r1
    2f24:	31 05       	cpc	r19, r1
    2f26:	89 f7       	brne	.-30     	; 0x2f0a <newToken+0x12>
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);
    2f28:	ca 01       	movw	r24, r20
    2f2a:	0e 94 4f 38 	call	0x709e	; 0x709e <free>

	return newTypeValue(VDM_TOKEN, (TypedValueType
	)
			{ .intVal = hashVal });
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	50 e0       	ldi	r21, 0x00	; 0
    2f32:	60 e0       	ldi	r22, 0x00	; 0
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	ae 01       	movw	r20, r28
	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);

	return newTypeValue(VDM_TOKEN, (TypedValueType
    2f38:	8a e0       	ldi	r24, 0x0A	; 10
    2f3a:	0e 94 bb 14 	call	0x2976	; 0x2976 <newTypeValue>
	)
			{ .intVal = hashVal });
}
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	08 95       	ret

00002f44 <isNumber>:
	ASSERT_CHECK_BOOL(b);
	return newBoolGC((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal), from);
}

bool isNumber(TVP val)
{
    2f44:	fc 01       	movw	r30, r24
	switch(val->type)
    2f46:	e0 81       	ld	r30, Z
    2f48:	e3 30       	cpi	r30, 0x03	; 3
    2f4a:	28 f0       	brcs	.+10     	; 0x2f56 <isNumber+0x12>
    2f4c:	e4 50       	subi	r30, 0x04	; 4
    2f4e:	e2 30       	cpi	r30, 0x02	; 2
    2f50:	10 f0       	brcs	.+4      	; 0x2f56 <isNumber+0x12>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	08 95       	ret
    2f56:	81 e0       	ldi	r24, 0x01	; 1
	case VDM_RAT:
		return true;
	default:
		return false;
	}
}
    2f58:	08 95       	ret

00002f5a <toDouble>:
 *
 * Note that the following functions are defined for all numbers
 */

double toDouble(TVP a)
{
    2f5a:	fc 01       	movw	r30, r24
	switch(a->type)
    2f5c:	80 81       	ld	r24, Z
    2f5e:	83 30       	cpi	r24, 0x03	; 3
    2f60:	40 f0       	brcs	.+16     	; 0x2f72 <toDouble+0x18>
    2f62:	84 50       	subi	r24, 0x04	; 4
    2f64:	82 30       	cpi	r24, 0x02	; 2
    2f66:	70 f0       	brcs	.+28     	; 0x2f84 <toDouble+0x2a>
    2f68:	60 e0       	ldi	r22, 0x00	; 0
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0d c0       	rjmp	.+26     	; 0x2f8c <toDouble+0x32>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return (double) a->value.intVal;
    2f72:	63 81       	ldd	r22, Z+3	; 0x03
    2f74:	74 81       	ldd	r23, Z+4	; 0x04
    2f76:	88 27       	eor	r24, r24
    2f78:	77 fd       	sbrc	r23, 7
    2f7a:	80 95       	com	r24
    2f7c:	98 2f       	mov	r25, r24
    2f7e:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    2f82:	04 c0       	rjmp	.+8      	; 0x2f8c <toDouble+0x32>
	case VDM_REAL:
	case VDM_RAT:
		return a->value.doubleVal;
    2f84:	63 81       	ldd	r22, Z+3	; 0x03
    2f86:	74 81       	ldd	r23, Z+4	; 0x04
    2f88:	85 81       	ldd	r24, Z+5	; 0x05
    2f8a:	96 81       	ldd	r25, Z+6	; 0x06
	default:
		FATAL_ERROR("Invalid type");
		return 0;
	}
}
    2f8c:	08 95       	ret

00002f8e <toInteger>:

int toInteger(TVP a)
{
    2f8e:	fc 01       	movw	r30, r24
	switch(a->type)
    2f90:	80 81       	ld	r24, Z
    2f92:	83 30       	cpi	r24, 0x03	; 3
    2f94:	28 f0       	brcs	.+10     	; 0x2fa0 <toInteger+0x12>
    2f96:	84 30       	cpi	r24, 0x04	; 4
    2f98:	31 f0       	breq	.+12     	; 0x2fa6 <toInteger+0x18>
    2f9a:	60 e0       	ldi	r22, 0x00	; 0
    2f9c:	70 e0       	ldi	r23, 0x00	; 0
    2f9e:	09 c0       	rjmp	.+18     	; 0x2fb2 <toInteger+0x24>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return a->value.intVal;
    2fa0:	63 81       	ldd	r22, Z+3	; 0x03
    2fa2:	74 81       	ldd	r23, Z+4	; 0x04
    2fa4:	06 c0       	rjmp	.+12     	; 0x2fb2 <toInteger+0x24>
	case VDM_REAL:
		return a->value.doubleVal;
    2fa6:	63 81       	ldd	r22, Z+3	; 0x03
    2fa8:	74 81       	ldd	r23, Z+4	; 0x04
    2faa:	85 81       	ldd	r24, Z+5	; 0x05
    2fac:	96 81       	ldd	r25, Z+6	; 0x06
    2fae:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
	default:
		FATAL_ERROR("Invalid type");
		return 0;
	}
}
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	08 95       	ret

00002fb6 <toBool>:

bool toBool(TVP a)
{
    2fb6:	fc 01       	movw	r30, r24
	ASSERT_CHECK_BOOL(a);
    2fb8:	80 81       	ld	r24, Z
    2fba:	83 30       	cpi	r24, 0x03	; 3
    2fbc:	11 f0       	breq	.+4      	; 0x2fc2 <toBool+0xc>
    2fbe:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return a->value.boolVal;
}
    2fc2:	83 81       	ldd	r24, Z+3	; 0x03
    2fc4:	08 95       	ret

00002fc6 <vdmLessOrEqualGC>:

	return newBool(av<=bv);
}

TVP vdmLessOrEqualGC(TVP a, TVP b, TVP *from)
{
    2fc6:	af 92       	push	r10
    2fc8:	bf 92       	push	r11
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	0f 93       	push	r16
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <vdmLessOrEqualGC+0x10>
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <vdmLessOrEqualGC+0x12>
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	fc 01       	movw	r30, r24
    2fde:	5b 01       	movw	r10, r22
    2fe0:	6a 01       	movw	r12, r20
	ASSERT_CHECK_NUMERIC(a);
    2fe2:	80 81       	ld	r24, Z
    2fe4:	83 30       	cpi	r24, 0x03	; 3
    2fe6:	20 f0       	brcs	.+8      	; 0x2ff0 <vdmLessOrEqualGC+0x2a>
    2fe8:	84 30       	cpi	r24, 0x04	; 4
    2fea:	11 f0       	breq	.+4      	; 0x2ff0 <vdmLessOrEqualGC+0x2a>
    2fec:	85 30       	cpi	r24, 0x05	; 5
    2fee:	41 f4       	brne	.+16     	; 0x3000 <vdmLessOrEqualGC+0x3a>
	ASSERT_CHECK_NUMERIC(b);
    2ff0:	d5 01       	movw	r26, r10
    2ff2:	8c 91       	ld	r24, X
    2ff4:	83 30       	cpi	r24, 0x03	; 3
    2ff6:	30 f0       	brcs	.+12     	; 0x3004 <vdmLessOrEqualGC+0x3e>
    2ff8:	84 30       	cpi	r24, 0x04	; 4
    2ffa:	21 f0       	breq	.+8      	; 0x3004 <vdmLessOrEqualGC+0x3e>
    2ffc:	85 30       	cpi	r24, 0x05	; 5
    2ffe:	11 f0       	breq	.+4      	; 0x3004 <vdmLessOrEqualGC+0x3e>
    3000:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3004:	cf 01       	movw	r24, r30
    3006:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    300a:	69 83       	std	Y+1, r22	; 0x01
    300c:	7a 83       	std	Y+2, r23	; 0x02
    300e:	8b 83       	std	Y+3, r24	; 0x03
    3010:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    3012:	c5 01       	movw	r24, r10
    3014:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3018:	9b 01       	movw	r18, r22
    301a:	ac 01       	movw	r20, r24

	return newBoolGC(av <= bv, from);
    301c:	00 e0       	ldi	r16, 0x00	; 0
    301e:	69 81       	ldd	r22, Y+1	; 0x01
    3020:	7a 81       	ldd	r23, Y+2	; 0x02
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	9c 81       	ldd	r25, Y+4	; 0x04
    3026:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    302a:	18 16       	cp	r1, r24
    302c:	0c f0       	brlt	.+2      	; 0x3030 <vdmLessOrEqualGC+0x6a>
    302e:	01 e0       	ldi	r16, 0x01	; 1
    3030:	80 2f       	mov	r24, r16
    3032:	b6 01       	movw	r22, r12
    3034:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	0f 91       	pop	r16
    3046:	df 90       	pop	r13
    3048:	cf 90       	pop	r12
    304a:	bf 90       	pop	r11
    304c:	af 90       	pop	r10
    304e:	08 95       	ret

00003050 <vdmLessThanGC>:

	return newBool(av<bv);
}

TVP vdmLessThanGC(TVP a, TVP b, TVP *from)
{
    3050:	af 92       	push	r10
    3052:	bf 92       	push	r11
    3054:	cf 92       	push	r12
    3056:	df 92       	push	r13
    3058:	0f 93       	push	r16
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <vdmLessThanGC+0x10>
    3060:	00 d0       	rcall	.+0      	; 0x3062 <vdmLessThanGC+0x12>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	fc 01       	movw	r30, r24
    3068:	5b 01       	movw	r10, r22
    306a:	6a 01       	movw	r12, r20
	ASSERT_CHECK_NUMERIC(a);
    306c:	80 81       	ld	r24, Z
    306e:	83 30       	cpi	r24, 0x03	; 3
    3070:	20 f0       	brcs	.+8      	; 0x307a <vdmLessThanGC+0x2a>
    3072:	84 30       	cpi	r24, 0x04	; 4
    3074:	11 f0       	breq	.+4      	; 0x307a <vdmLessThanGC+0x2a>
    3076:	85 30       	cpi	r24, 0x05	; 5
    3078:	41 f4       	brne	.+16     	; 0x308a <vdmLessThanGC+0x3a>
	ASSERT_CHECK_NUMERIC(b);
    307a:	d5 01       	movw	r26, r10
    307c:	8c 91       	ld	r24, X
    307e:	83 30       	cpi	r24, 0x03	; 3
    3080:	30 f0       	brcs	.+12     	; 0x308e <vdmLessThanGC+0x3e>
    3082:	84 30       	cpi	r24, 0x04	; 4
    3084:	21 f0       	breq	.+8      	; 0x308e <vdmLessThanGC+0x3e>
    3086:	85 30       	cpi	r24, 0x05	; 5
    3088:	11 f0       	breq	.+4      	; 0x308e <vdmLessThanGC+0x3e>
    308a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    308e:	cf 01       	movw	r24, r30
    3090:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3094:	69 83       	std	Y+1, r22	; 0x01
    3096:	7a 83       	std	Y+2, r23	; 0x02
    3098:	8b 83       	std	Y+3, r24	; 0x03
    309a:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    309c:	c5 01       	movw	r24, r10
    309e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    30a2:	9b 01       	movw	r18, r22
    30a4:	ac 01       	movw	r20, r24

	return newBoolGC(av<bv, from);
    30a6:	00 e0       	ldi	r16, 0x00	; 0
    30a8:	69 81       	ldd	r22, Y+1	; 0x01
    30aa:	7a 81       	ldd	r23, Y+2	; 0x02
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    30b4:	88 23       	and	r24, r24
    30b6:	0c f4       	brge	.+2      	; 0x30ba <vdmLessThanGC+0x6a>
    30b8:	01 e0       	ldi	r16, 0x01	; 1
    30ba:	80 2f       	mov	r24, r16
    30bc:	b6 01       	movw	r22, r12
    30be:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	0f 91       	pop	r16
    30d0:	df 90       	pop	r13
    30d2:	cf 90       	pop	r12
    30d4:	bf 90       	pop	r11
    30d6:	af 90       	pop	r10
    30d8:	08 95       	ret

000030da <vdmGreaterOrEqualGC>:

	return newBool(av>=bv);
}

TVP vdmGreaterOrEqualGC(TVP a, TVP b, TVP *from)
{
    30da:	af 92       	push	r10
    30dc:	bf 92       	push	r11
    30de:	cf 92       	push	r12
    30e0:	df 92       	push	r13
    30e2:	0f 93       	push	r16
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <vdmGreaterOrEqualGC+0x10>
    30ea:	00 d0       	rcall	.+0      	; 0x30ec <vdmGreaterOrEqualGC+0x12>
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	fc 01       	movw	r30, r24
    30f2:	5b 01       	movw	r10, r22
    30f4:	6a 01       	movw	r12, r20
	ASSERT_CHECK_NUMERIC(a);
    30f6:	80 81       	ld	r24, Z
    30f8:	83 30       	cpi	r24, 0x03	; 3
    30fa:	20 f0       	brcs	.+8      	; 0x3104 <vdmGreaterOrEqualGC+0x2a>
    30fc:	84 30       	cpi	r24, 0x04	; 4
    30fe:	11 f0       	breq	.+4      	; 0x3104 <vdmGreaterOrEqualGC+0x2a>
    3100:	85 30       	cpi	r24, 0x05	; 5
    3102:	41 f4       	brne	.+16     	; 0x3114 <vdmGreaterOrEqualGC+0x3a>
	ASSERT_CHECK_NUMERIC(b);
    3104:	d5 01       	movw	r26, r10
    3106:	8c 91       	ld	r24, X
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	30 f0       	brcs	.+12     	; 0x3118 <vdmGreaterOrEqualGC+0x3e>
    310c:	84 30       	cpi	r24, 0x04	; 4
    310e:	21 f0       	breq	.+8      	; 0x3118 <vdmGreaterOrEqualGC+0x3e>
    3110:	85 30       	cpi	r24, 0x05	; 5
    3112:	11 f0       	breq	.+4      	; 0x3118 <vdmGreaterOrEqualGC+0x3e>
    3114:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3118:	cf 01       	movw	r24, r30
    311a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    311e:	69 83       	std	Y+1, r22	; 0x01
    3120:	7a 83       	std	Y+2, r23	; 0x02
    3122:	8b 83       	std	Y+3, r24	; 0x03
    3124:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    3126:	c5 01       	movw	r24, r10
    3128:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    312c:	9b 01       	movw	r18, r22
    312e:	ac 01       	movw	r20, r24

	return newBoolGC(av>=bv, from);
    3130:	00 e0       	ldi	r16, 0x00	; 0
    3132:	69 81       	ldd	r22, Y+1	; 0x01
    3134:	7a 81       	ldd	r23, Y+2	; 0x02
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	0e 94 b2 3b 	call	0x7764	; 0x7764 <__gesf2>
    313e:	88 23       	and	r24, r24
    3140:	0c f0       	brlt	.+2      	; 0x3144 <vdmGreaterOrEqualGC+0x6a>
    3142:	01 e0       	ldi	r16, 0x01	; 1
    3144:	80 2f       	mov	r24, r16
    3146:	b6 01       	movw	r22, r12
    3148:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	0f 91       	pop	r16
    315a:	df 90       	pop	r13
    315c:	cf 90       	pop	r12
    315e:	bf 90       	pop	r11
    3160:	af 90       	pop	r10
    3162:	08 95       	ret

00003164 <vdmGreaterThanGC>:

	return newBool(av>bv);
}

TVP vdmGreaterThanGC(TVP a,TVP b, TVP *from)
{
    3164:	af 92       	push	r10
    3166:	bf 92       	push	r11
    3168:	cf 92       	push	r12
    316a:	df 92       	push	r13
    316c:	0f 93       	push	r16
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	00 d0       	rcall	.+0      	; 0x3174 <vdmGreaterThanGC+0x10>
    3174:	00 d0       	rcall	.+0      	; 0x3176 <vdmGreaterThanGC+0x12>
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	fc 01       	movw	r30, r24
    317c:	5b 01       	movw	r10, r22
    317e:	6a 01       	movw	r12, r20
	ASSERT_CHECK_NUMERIC(a);
    3180:	80 81       	ld	r24, Z
    3182:	83 30       	cpi	r24, 0x03	; 3
    3184:	20 f0       	brcs	.+8      	; 0x318e <vdmGreaterThanGC+0x2a>
    3186:	84 30       	cpi	r24, 0x04	; 4
    3188:	11 f0       	breq	.+4      	; 0x318e <vdmGreaterThanGC+0x2a>
    318a:	85 30       	cpi	r24, 0x05	; 5
    318c:	41 f4       	brne	.+16     	; 0x319e <vdmGreaterThanGC+0x3a>
	ASSERT_CHECK_NUMERIC(b);
    318e:	d5 01       	movw	r26, r10
    3190:	8c 91       	ld	r24, X
    3192:	83 30       	cpi	r24, 0x03	; 3
    3194:	30 f0       	brcs	.+12     	; 0x31a2 <vdmGreaterThanGC+0x3e>
    3196:	84 30       	cpi	r24, 0x04	; 4
    3198:	21 f0       	breq	.+8      	; 0x31a2 <vdmGreaterThanGC+0x3e>
    319a:	85 30       	cpi	r24, 0x05	; 5
    319c:	11 f0       	breq	.+4      	; 0x31a2 <vdmGreaterThanGC+0x3e>
    319e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    31a2:	cf 01       	movw	r24, r30
    31a4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    31a8:	69 83       	std	Y+1, r22	; 0x01
    31aa:	7a 83       	std	Y+2, r23	; 0x02
    31ac:	8b 83       	std	Y+3, r24	; 0x03
    31ae:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    31b0:	c5 01       	movw	r24, r10
    31b2:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    31b6:	9b 01       	movw	r18, r22
    31b8:	ac 01       	movw	r20, r24

	return newBoolGC(av>bv, from);
    31ba:	00 e0       	ldi	r16, 0x00	; 0
    31bc:	69 81       	ldd	r22, Y+1	; 0x01
    31be:	7a 81       	ldd	r23, Y+2	; 0x02
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	0e 94 b2 3b 	call	0x7764	; 0x7764 <__gesf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	0c f4       	brge	.+2      	; 0x31ce <vdmGreaterThanGC+0x6a>
    31cc:	01 e0       	ldi	r16, 0x01	; 1
    31ce:	80 2f       	mov	r24, r16
    31d0:	b6 01       	movw	r22, r12
    31d2:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	0f 91       	pop	r16
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
    31e8:	bf 90       	pop	r11
    31ea:	af 90       	pop	r10
    31ec:	08 95       	ret

000031ee <vdmNumericEqualGC>:

	return newBool(av==bv);
}

TVP vdmNumericEqualGC(TVP a, TVP b, TVP *from)
{
    31ee:	af 92       	push	r10
    31f0:	bf 92       	push	r11
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	0f 93       	push	r16
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <vdmNumericEqualGC+0x10>
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <vdmNumericEqualGC+0x12>
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	fc 01       	movw	r30, r24
    3206:	5b 01       	movw	r10, r22
    3208:	6a 01       	movw	r12, r20
	ASSERT_CHECK_NUMERIC(a);
    320a:	80 81       	ld	r24, Z
    320c:	83 30       	cpi	r24, 0x03	; 3
    320e:	20 f0       	brcs	.+8      	; 0x3218 <vdmNumericEqualGC+0x2a>
    3210:	84 30       	cpi	r24, 0x04	; 4
    3212:	11 f0       	breq	.+4      	; 0x3218 <vdmNumericEqualGC+0x2a>
    3214:	85 30       	cpi	r24, 0x05	; 5
    3216:	41 f4       	brne	.+16     	; 0x3228 <vdmNumericEqualGC+0x3a>
	ASSERT_CHECK_NUMERIC(b);
    3218:	d5 01       	movw	r26, r10
    321a:	8c 91       	ld	r24, X
    321c:	83 30       	cpi	r24, 0x03	; 3
    321e:	30 f0       	brcs	.+12     	; 0x322c <vdmNumericEqualGC+0x3e>
    3220:	84 30       	cpi	r24, 0x04	; 4
    3222:	21 f0       	breq	.+8      	; 0x322c <vdmNumericEqualGC+0x3e>
    3224:	85 30       	cpi	r24, 0x05	; 5
    3226:	11 f0       	breq	.+4      	; 0x322c <vdmNumericEqualGC+0x3e>
    3228:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    322c:	cf 01       	movw	r24, r30
    322e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3232:	69 83       	std	Y+1, r22	; 0x01
    3234:	7a 83       	std	Y+2, r23	; 0x02
    3236:	8b 83       	std	Y+3, r24	; 0x03
    3238:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    323a:	c5 01       	movw	r24, r10
    323c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3240:	9b 01       	movw	r18, r22
    3242:	ac 01       	movw	r20, r24

	return newBoolGC(av==bv, from);
    3244:	00 e0       	ldi	r16, 0x00	; 0
    3246:	69 81       	ldd	r22, Y+1	; 0x01
    3248:	7a 81       	ldd	r23, Y+2	; 0x02
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	9c 81       	ldd	r25, Y+4	; 0x04
    324e:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    3252:	88 23       	and	r24, r24
    3254:	09 f4       	brne	.+2      	; 0x3258 <vdmNumericEqualGC+0x6a>
    3256:	01 e0       	ldi	r16, 0x01	; 1
    3258:	80 2f       	mov	r24, r16
    325a:	b6 01       	movw	r22, r12
    325c:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	0f 91       	pop	r16
    326e:	df 90       	pop	r13
    3270:	cf 90       	pop	r12
    3272:	bf 90       	pop	r11
    3274:	af 90       	pop	r10
    3276:	08 95       	ret

00003278 <isBoolGC>:
		return newBool(true);
	return newBool(false);
}

TVP isBoolGC(TVP v, TVP *from)
{
    3278:	fc 01       	movw	r30, r24
	if(v->type == VDM_BOOL)
    327a:	80 81       	ld	r24, Z
    327c:	83 30       	cpi	r24, 0x03	; 3
    327e:	21 f4       	brne	.+8      	; 0x3288 <isBoolGC+0x10>
		return newBoolGC(true, from);
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    3286:	08 95       	ret
	return newBoolGC(false, from);
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    328e:	08 95       	ret

00003290 <isRealGC>:
		return newBool(true);
	return newBool(false);
}

TVP isRealGC(TVP v, TVP *from)
{
    3290:	fc 01       	movw	r30, r24
	if(v->type == VDM_REAL)
    3292:	80 81       	ld	r24, Z
    3294:	84 30       	cpi	r24, 0x04	; 4
    3296:	21 f4       	brne	.+8      	; 0x32a0 <isRealGC+0x10>
		return newBoolGC(true, from);
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    329e:	08 95       	ret
	return newBoolGC(false, from);
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    32a6:	08 95       	ret

000032a8 <isIntGC>:
		return newBool(true);
	return newBool(false);
}

TVP isIntGC(TVP v, TVP *from)
{
    32a8:	fc 01       	movw	r30, r24
	if(v->type == VDM_INT)
    32aa:	80 81       	ld	r24, Z
    32ac:	88 23       	and	r24, r24
    32ae:	21 f4       	brne	.+8      	; 0x32b8 <isIntGC+0x10>
		return newBoolGC(true, from);
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    32b6:	08 95       	ret
	return newBoolGC(false, from);
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    32be:	08 95       	ret

000032c0 <vdmBiimplicationGC>:
	ASSERT_CHECK_BOOL(b);
	return newBool((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal));
}

TVP vdmBiimplicationGC(TVP a, TVP b, TVP *from)
{
    32c0:	fc 01       	movw	r30, r24
    32c2:	db 01       	movw	r26, r22
	if(a == NULL || b == NULL)
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	19 f1       	breq	.+70     	; 0x330e <vdmBiimplicationGC+0x4e>
    32c8:	61 15       	cp	r22, r1
    32ca:	71 05       	cpc	r23, r1
    32cc:	01 f1       	breq	.+64     	; 0x330e <vdmBiimplicationGC+0x4e>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    32ce:	80 81       	ld	r24, Z
    32d0:	83 30       	cpi	r24, 0x03	; 3
    32d2:	19 f4       	brne	.+6      	; 0x32da <vdmBiimplicationGC+0x1a>
	ASSERT_CHECK_BOOL(b);
    32d4:	8c 91       	ld	r24, X
    32d6:	83 30       	cpi	r24, 0x03	; 3
    32d8:	11 f0       	breq	.+4      	; 0x32de <vdmBiimplicationGC+0x1e>
    32da:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBoolGC((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal), from);
    32de:	93 81       	ldd	r25, Z+3	; 0x03
    32e0:	99 23       	and	r25, r25
    32e2:	41 f0       	breq	.+16     	; 0x32f4 <vdmBiimplicationGC+0x34>
    32e4:	13 96       	adiw	r26, 0x03	; 3
    32e6:	8c 91       	ld	r24, X
    32e8:	13 97       	sbiw	r26, 0x03	; 3
    32ea:	88 23       	and	r24, r24
    32ec:	19 f4       	brne	.+6      	; 0x32f4 <vdmBiimplicationGC+0x34>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	08 c0       	rjmp	.+16     	; 0x3304 <vdmBiimplicationGC+0x44>
    32f4:	13 96       	adiw	r26, 0x03	; 3
    32f6:	8c 91       	ld	r24, X
    32f8:	88 23       	and	r24, r24
    32fa:	19 f4       	brne	.+6      	; 0x3302 <vdmBiimplicationGC+0x42>
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	01 c0       	rjmp	.+2      	; 0x3304 <vdmBiimplicationGC+0x44>
    3302:	89 2f       	mov	r24, r25
    3304:	ba 01       	movw	r22, r20
    3306:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    330a:	9c 01       	movw	r18, r24
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <vdmBiimplicationGC+0x52>
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
}
    3312:	c9 01       	movw	r24, r18
    3314:	08 95       	ret

00003316 <vdmImpliesGC>:
	ASSERT_CHECK_BOOL(b);
	return newBool(b->value.boolVal);
}

TVP vdmImpliesGC(TVP a, TVP b, TVP *from)
{
    3316:	fc 01       	movw	r30, r24
    3318:	db 01       	movw	r26, r22
	if(a == NULL)
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	b9 f0       	breq	.+46     	; 0x334c <vdmImpliesGC+0x36>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    331e:	80 81       	ld	r24, Z
    3320:	83 30       	cpi	r24, 0x03	; 3
    3322:	59 f4       	brne	.+22     	; 0x333a <vdmImpliesGC+0x24>
	if(!a->value.boolVal)
    3324:	83 81       	ldd	r24, Z+3	; 0x03
    3326:	88 23       	and	r24, r24
    3328:	11 f4       	brne	.+4      	; 0x332e <vdmImpliesGC+0x18>
		return newBoolGC(true, from);
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	0a c0       	rjmp	.+20     	; 0x3342 <vdmImpliesGC+0x2c>

	if(b == NULL)
    332e:	61 15       	cp	r22, r1
    3330:	71 05       	cpc	r23, r1
    3332:	61 f0       	breq	.+24     	; 0x334c <vdmImpliesGC+0x36>
		return NULL;

	ASSERT_CHECK_BOOL(b);
    3334:	8c 91       	ld	r24, X
    3336:	83 30       	cpi	r24, 0x03	; 3
    3338:	11 f0       	breq	.+4      	; 0x333e <vdmImpliesGC+0x28>
    333a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBoolGC(b->value.boolVal, from);
    333e:	13 96       	adiw	r26, 0x03	; 3
    3340:	8c 91       	ld	r24, X
    3342:	ba 01       	movw	r22, r20
    3344:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    3348:	9c 01       	movw	r18, r24
    334a:	02 c0       	rjmp	.+4      	; 0x3350 <vdmImpliesGC+0x3a>
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
}
    3350:	c9 01       	movw	r24, r18
    3352:	08 95       	ret

00003354 <vdmXorGC>:
	ASSERT_CHECK_BOOL(b);
	return newBool((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)));
}

TVP vdmXorGC(TVP a, TVP b, TVP *from)
{
    3354:	fc 01       	movw	r30, r24
    3356:	db 01       	movw	r26, r22
	if(a == NULL || b == NULL)
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	f1 f0       	breq	.+60     	; 0x3398 <vdmXorGC+0x44>
    335c:	61 15       	cp	r22, r1
    335e:	71 05       	cpc	r23, r1
    3360:	d9 f0       	breq	.+54     	; 0x3398 <vdmXorGC+0x44>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    3362:	80 81       	ld	r24, Z
    3364:	83 30       	cpi	r24, 0x03	; 3
    3366:	19 f4       	brne	.+6      	; 0x336e <vdmXorGC+0x1a>
	ASSERT_CHECK_BOOL(b);
    3368:	8c 91       	ld	r24, X
    336a:	83 30       	cpi	r24, 0x03	; 3
    336c:	11 f0       	breq	.+4      	; 0x3372 <vdmXorGC+0x1e>
    336e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBoolGC((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)), from);
    3372:	83 81       	ldd	r24, Z+3	; 0x03
    3374:	13 96       	adiw	r26, 0x03	; 3
    3376:	9c 91       	ld	r25, X
    3378:	88 23       	and	r24, r24
    337a:	11 f4       	brne	.+4      	; 0x3380 <vdmXorGC+0x2c>
    337c:	89 2f       	mov	r24, r25
    337e:	07 c0       	rjmp	.+14     	; 0x338e <vdmXorGC+0x3a>
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	99 23       	and	r25, r25
    3386:	11 f4       	brne	.+4      	; 0x338c <vdmXorGC+0x38>
    3388:	61 e0       	ldi	r22, 0x01	; 1
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	86 2f       	mov	r24, r22
    338e:	ba 01       	movw	r22, r20
    3390:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    3394:	9c 01       	movw	r18, r24
    3396:	02 c0       	rjmp	.+4      	; 0x339c <vdmXorGC+0x48>
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
}
    339c:	c9 01       	movw	r24, r18
    339e:	08 95       	ret

000033a0 <vdmOrGC>:
	ASSERT_CHECK_BOOL(b);
	return newBool(b->value.boolVal);
}

TVP vdmOrGC(TVP a, TVP b, TVP *from)
{
    33a0:	fc 01       	movw	r30, r24
    33a2:	db 01       	movw	r26, r22
	if(a == NULL)
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	b9 f0       	breq	.+46     	; 0x33d6 <vdmOrGC+0x36>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    33a8:	80 81       	ld	r24, Z
    33aa:	83 30       	cpi	r24, 0x03	; 3
    33ac:	59 f4       	brne	.+22     	; 0x33c4 <vdmOrGC+0x24>
	if(a->value.boolVal)
    33ae:	83 81       	ldd	r24, Z+3	; 0x03
    33b0:	88 23       	and	r24, r24
    33b2:	11 f0       	breq	.+4      	; 0x33b8 <vdmOrGC+0x18>
		return newBoolGC(true, from);
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	0a c0       	rjmp	.+20     	; 0x33cc <vdmOrGC+0x2c>

	if(b == NULL)
    33b8:	61 15       	cp	r22, r1
    33ba:	71 05       	cpc	r23, r1
    33bc:	61 f0       	breq	.+24     	; 0x33d6 <vdmOrGC+0x36>
		return NULL;

	ASSERT_CHECK_BOOL(b);
    33be:	8c 91       	ld	r24, X
    33c0:	83 30       	cpi	r24, 0x03	; 3
    33c2:	11 f0       	breq	.+4      	; 0x33c8 <vdmOrGC+0x28>
    33c4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBoolGC(b->value.boolVal, from);
    33c8:	13 96       	adiw	r26, 0x03	; 3
    33ca:	8c 91       	ld	r24, X
    33cc:	ba 01       	movw	r22, r20
    33ce:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    33d2:	9c 01       	movw	r18, r24
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <vdmOrGC+0x3a>
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
}
    33da:	c9 01       	movw	r24, r18
    33dc:	08 95       	ret

000033de <vdmAndGC>:
	ASSERT_CHECK_BOOL(b);
	return newBool(b->value.boolVal);
}

TVP vdmAndGC(TVP a, TVP b, TVP *from)
{
    33de:	fc 01       	movw	r30, r24
    33e0:	db 01       	movw	r26, r22
	if(a == NULL)
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	a9 f0       	breq	.+42     	; 0x3410 <vdmAndGC+0x32>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    33e6:	80 81       	ld	r24, Z
    33e8:	83 30       	cpi	r24, 0x03	; 3
    33ea:	49 f4       	brne	.+18     	; 0x33fe <vdmAndGC+0x20>
	if(!a->value.boolVal)
    33ec:	83 81       	ldd	r24, Z+3	; 0x03
    33ee:	88 23       	and	r24, r24
    33f0:	51 f0       	breq	.+20     	; 0x3406 <vdmAndGC+0x28>
		return newBoolGC(false, from);

	if(b == NULL)
    33f2:	61 15       	cp	r22, r1
    33f4:	71 05       	cpc	r23, r1
    33f6:	61 f0       	breq	.+24     	; 0x3410 <vdmAndGC+0x32>
		return NULL;

	ASSERT_CHECK_BOOL(b);
    33f8:	8c 91       	ld	r24, X
    33fa:	83 30       	cpi	r24, 0x03	; 3
    33fc:	11 f0       	breq	.+4      	; 0x3402 <vdmAndGC+0x24>
    33fe:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBoolGC(b->value.boolVal, from);
    3402:	13 96       	adiw	r26, 0x03	; 3
    3404:	8c 91       	ld	r24, X
    3406:	ba 01       	movw	r22, r20
    3408:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    340c:	9c 01       	movw	r18, r24
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <vdmAndGC+0x36>
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
}
    3414:	c9 01       	movw	r24, r18
    3416:	08 95       	ret

00003418 <vdmNotGC>:

	return newBool(!arg->value.boolVal);
}

TVP vdmNotGC(TVP arg, TVP *from)
{
    3418:	fc 01       	movw	r30, r24
	if(arg == NULL)
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	19 f4       	brne	.+6      	; 0x3424 <vdmNotGC+0xc>
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	0b c0       	rjmp	.+22     	; 0x343a <vdmNotGC+0x22>
		return NULL;

	ASSERT_CHECK_BOOL(arg);
    3424:	80 81       	ld	r24, Z
    3426:	83 30       	cpi	r24, 0x03	; 3
    3428:	11 f0       	breq	.+4      	; 0x342e <vdmNotGC+0x16>
    342a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	return newBoolGC(!arg->value.boolVal, from);
    342e:	83 81       	ldd	r24, Z+3	; 0x03
    3430:	91 e0       	ldi	r25, 0x01	; 1
    3432:	89 27       	eor	r24, r25
    3434:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    3438:	9c 01       	movw	r18, r24
}
    343a:	c9 01       	movw	r24, r18
    343c:	08 95       	ret

0000343e <vdmLessOrEqual>:

	return newBoolGC(av<bv, from);
}

TVP vdmLessOrEqual(TVP a,TVP b)
{
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	0f 93       	push	r16
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	00 d0       	rcall	.+0      	; 0x344a <vdmLessOrEqual+0xc>
    344a:	00 d0       	rcall	.+0      	; 0x344c <vdmLessOrEqual+0xe>
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	fc 01       	movw	r30, r24
    3452:	6b 01       	movw	r12, r22
	ASSERT_CHECK_NUMERIC(a);
    3454:	80 81       	ld	r24, Z
    3456:	83 30       	cpi	r24, 0x03	; 3
    3458:	20 f0       	brcs	.+8      	; 0x3462 <vdmLessOrEqual+0x24>
    345a:	84 30       	cpi	r24, 0x04	; 4
    345c:	11 f0       	breq	.+4      	; 0x3462 <vdmLessOrEqual+0x24>
    345e:	85 30       	cpi	r24, 0x05	; 5
    3460:	41 f4       	brne	.+16     	; 0x3472 <vdmLessOrEqual+0x34>
	ASSERT_CHECK_NUMERIC(b);
    3462:	d6 01       	movw	r26, r12
    3464:	8c 91       	ld	r24, X
    3466:	83 30       	cpi	r24, 0x03	; 3
    3468:	30 f0       	brcs	.+12     	; 0x3476 <vdmLessOrEqual+0x38>
    346a:	84 30       	cpi	r24, 0x04	; 4
    346c:	21 f0       	breq	.+8      	; 0x3476 <vdmLessOrEqual+0x38>
    346e:	85 30       	cpi	r24, 0x05	; 5
    3470:	11 f0       	breq	.+4      	; 0x3476 <vdmLessOrEqual+0x38>
    3472:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3476:	cf 01       	movw	r24, r30
    3478:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    347c:	69 83       	std	Y+1, r22	; 0x01
    347e:	7a 83       	std	Y+2, r23	; 0x02
    3480:	8b 83       	std	Y+3, r24	; 0x03
    3482:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    3484:	c6 01       	movw	r24, r12
    3486:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    348a:	9b 01       	movw	r18, r22
    348c:	ac 01       	movw	r20, r24

	return newBool(av<=bv);
    348e:	00 e0       	ldi	r16, 0x00	; 0
    3490:	69 81       	ldd	r22, Y+1	; 0x01
    3492:	7a 81       	ldd	r23, Y+2	; 0x02
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    349c:	18 16       	cp	r1, r24
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <vdmLessOrEqual+0x64>
    34a0:	01 e0       	ldi	r16, 0x01	; 1
    34a2:	80 2f       	mov	r24, r16
    34a4:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	0f 91       	pop	r16
    34b6:	df 90       	pop	r13
    34b8:	cf 90       	pop	r12
    34ba:	08 95       	ret

000034bc <vdmLessThan>:

	return newBoolGC(av>=bv, from);
}

TVP vdmLessThan(TVP a,TVP b)
{
    34bc:	cf 92       	push	r12
    34be:	df 92       	push	r13
    34c0:	0f 93       	push	r16
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <vdmLessThan+0xc>
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <vdmLessThan+0xe>
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	fc 01       	movw	r30, r24
    34d0:	6b 01       	movw	r12, r22
	ASSERT_CHECK_NUMERIC(a);
    34d2:	80 81       	ld	r24, Z
    34d4:	83 30       	cpi	r24, 0x03	; 3
    34d6:	20 f0       	brcs	.+8      	; 0x34e0 <vdmLessThan+0x24>
    34d8:	84 30       	cpi	r24, 0x04	; 4
    34da:	11 f0       	breq	.+4      	; 0x34e0 <vdmLessThan+0x24>
    34dc:	85 30       	cpi	r24, 0x05	; 5
    34de:	41 f4       	brne	.+16     	; 0x34f0 <vdmLessThan+0x34>
	ASSERT_CHECK_NUMERIC(b);
    34e0:	d6 01       	movw	r26, r12
    34e2:	8c 91       	ld	r24, X
    34e4:	83 30       	cpi	r24, 0x03	; 3
    34e6:	30 f0       	brcs	.+12     	; 0x34f4 <vdmLessThan+0x38>
    34e8:	84 30       	cpi	r24, 0x04	; 4
    34ea:	21 f0       	breq	.+8      	; 0x34f4 <vdmLessThan+0x38>
    34ec:	85 30       	cpi	r24, 0x05	; 5
    34ee:	11 f0       	breq	.+4      	; 0x34f4 <vdmLessThan+0x38>
    34f0:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    34f4:	cf 01       	movw	r24, r30
    34f6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    34fa:	69 83       	std	Y+1, r22	; 0x01
    34fc:	7a 83       	std	Y+2, r23	; 0x02
    34fe:	8b 83       	std	Y+3, r24	; 0x03
    3500:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    3502:	c6 01       	movw	r24, r12
    3504:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3508:	9b 01       	movw	r18, r22
    350a:	ac 01       	movw	r20, r24

	return newBool(av<bv);
    350c:	00 e0       	ldi	r16, 0x00	; 0
    350e:	69 81       	ldd	r22, Y+1	; 0x01
    3510:	7a 81       	ldd	r23, Y+2	; 0x02
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    351a:	88 23       	and	r24, r24
    351c:	0c f4       	brge	.+2      	; 0x3520 <vdmLessThan+0x64>
    351e:	01 e0       	ldi	r16, 0x01	; 1
    3520:	80 2f       	mov	r24, r16
    3522:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	0f 91       	pop	r16
    3534:	df 90       	pop	r13
    3536:	cf 90       	pop	r12
    3538:	08 95       	ret

0000353a <vdmGreaterOrEqual>:

	return newBoolGC(av>bv, from);
}

TVP vdmGreaterOrEqual(TVP a,TVP b)
{
    353a:	cf 92       	push	r12
    353c:	df 92       	push	r13
    353e:	0f 93       	push	r16
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	00 d0       	rcall	.+0      	; 0x3546 <vdmGreaterOrEqual+0xc>
    3546:	00 d0       	rcall	.+0      	; 0x3548 <vdmGreaterOrEqual+0xe>
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	fc 01       	movw	r30, r24
    354e:	6b 01       	movw	r12, r22
	ASSERT_CHECK_NUMERIC(a);
    3550:	80 81       	ld	r24, Z
    3552:	83 30       	cpi	r24, 0x03	; 3
    3554:	20 f0       	brcs	.+8      	; 0x355e <vdmGreaterOrEqual+0x24>
    3556:	84 30       	cpi	r24, 0x04	; 4
    3558:	11 f0       	breq	.+4      	; 0x355e <vdmGreaterOrEqual+0x24>
    355a:	85 30       	cpi	r24, 0x05	; 5
    355c:	41 f4       	brne	.+16     	; 0x356e <vdmGreaterOrEqual+0x34>
	ASSERT_CHECK_NUMERIC(b);
    355e:	d6 01       	movw	r26, r12
    3560:	8c 91       	ld	r24, X
    3562:	83 30       	cpi	r24, 0x03	; 3
    3564:	30 f0       	brcs	.+12     	; 0x3572 <vdmGreaterOrEqual+0x38>
    3566:	84 30       	cpi	r24, 0x04	; 4
    3568:	21 f0       	breq	.+8      	; 0x3572 <vdmGreaterOrEqual+0x38>
    356a:	85 30       	cpi	r24, 0x05	; 5
    356c:	11 f0       	breq	.+4      	; 0x3572 <vdmGreaterOrEqual+0x38>
    356e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3572:	cf 01       	movw	r24, r30
    3574:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3578:	69 83       	std	Y+1, r22	; 0x01
    357a:	7a 83       	std	Y+2, r23	; 0x02
    357c:	8b 83       	std	Y+3, r24	; 0x03
    357e:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    3580:	c6 01       	movw	r24, r12
    3582:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3586:	9b 01       	movw	r18, r22
    3588:	ac 01       	movw	r20, r24

	return newBool(av>=bv);
    358a:	00 e0       	ldi	r16, 0x00	; 0
    358c:	69 81       	ldd	r22, Y+1	; 0x01
    358e:	7a 81       	ldd	r23, Y+2	; 0x02
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	0e 94 b2 3b 	call	0x7764	; 0x7764 <__gesf2>
    3598:	88 23       	and	r24, r24
    359a:	0c f0       	brlt	.+2      	; 0x359e <vdmGreaterOrEqual+0x64>
    359c:	01 e0       	ldi	r16, 0x01	; 1
    359e:	80 2f       	mov	r24, r16
    35a0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	0f 91       	pop	r16
    35b2:	df 90       	pop	r13
    35b4:	cf 90       	pop	r12
    35b6:	08 95       	ret

000035b8 <vdmGreaterThan>:

	return newBoolGC(av==bv, from);
}

TVP vdmGreaterThan(TVP a,TVP b)
{
    35b8:	cf 92       	push	r12
    35ba:	df 92       	push	r13
    35bc:	0f 93       	push	r16
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <vdmGreaterThan+0xc>
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <vdmGreaterThan+0xe>
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	fc 01       	movw	r30, r24
    35cc:	6b 01       	movw	r12, r22
	ASSERT_CHECK_NUMERIC(a);
    35ce:	80 81       	ld	r24, Z
    35d0:	83 30       	cpi	r24, 0x03	; 3
    35d2:	20 f0       	brcs	.+8      	; 0x35dc <vdmGreaterThan+0x24>
    35d4:	84 30       	cpi	r24, 0x04	; 4
    35d6:	11 f0       	breq	.+4      	; 0x35dc <vdmGreaterThan+0x24>
    35d8:	85 30       	cpi	r24, 0x05	; 5
    35da:	41 f4       	brne	.+16     	; 0x35ec <vdmGreaterThan+0x34>
	ASSERT_CHECK_NUMERIC(b);
    35dc:	d6 01       	movw	r26, r12
    35de:	8c 91       	ld	r24, X
    35e0:	83 30       	cpi	r24, 0x03	; 3
    35e2:	30 f0       	brcs	.+12     	; 0x35f0 <vdmGreaterThan+0x38>
    35e4:	84 30       	cpi	r24, 0x04	; 4
    35e6:	21 f0       	breq	.+8      	; 0x35f0 <vdmGreaterThan+0x38>
    35e8:	85 30       	cpi	r24, 0x05	; 5
    35ea:	11 f0       	breq	.+4      	; 0x35f0 <vdmGreaterThan+0x38>
    35ec:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    35f0:	cf 01       	movw	r24, r30
    35f2:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    35f6:	69 83       	std	Y+1, r22	; 0x01
    35f8:	7a 83       	std	Y+2, r23	; 0x02
    35fa:	8b 83       	std	Y+3, r24	; 0x03
    35fc:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    35fe:	c6 01       	movw	r24, r12
    3600:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3604:	9b 01       	movw	r18, r22
    3606:	ac 01       	movw	r20, r24

	return newBool(av>bv);
    3608:	00 e0       	ldi	r16, 0x00	; 0
    360a:	69 81       	ldd	r22, Y+1	; 0x01
    360c:	7a 81       	ldd	r23, Y+2	; 0x02
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	0e 94 b2 3b 	call	0x7764	; 0x7764 <__gesf2>
    3616:	18 16       	cp	r1, r24
    3618:	0c f4       	brge	.+2      	; 0x361c <vdmGreaterThan+0x64>
    361a:	01 e0       	ldi	r16, 0x01	; 1
    361c:	80 2f       	mov	r24, r16
    361e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	0f 91       	pop	r16
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	08 95       	ret

00003636 <vdmNumericEqual>:

	return newRealGC(pow(av,bv), from);
}

TVP vdmNumericEqual(TVP a,TVP b)
{
    3636:	cf 92       	push	r12
    3638:	df 92       	push	r13
    363a:	0f 93       	push	r16
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	00 d0       	rcall	.+0      	; 0x3642 <vdmNumericEqual+0xc>
    3642:	00 d0       	rcall	.+0      	; 0x3644 <vdmNumericEqual+0xe>
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	fc 01       	movw	r30, r24
    364a:	6b 01       	movw	r12, r22
	ASSERT_CHECK_NUMERIC(a);
    364c:	80 81       	ld	r24, Z
    364e:	83 30       	cpi	r24, 0x03	; 3
    3650:	20 f0       	brcs	.+8      	; 0x365a <vdmNumericEqual+0x24>
    3652:	84 30       	cpi	r24, 0x04	; 4
    3654:	11 f0       	breq	.+4      	; 0x365a <vdmNumericEqual+0x24>
    3656:	85 30       	cpi	r24, 0x05	; 5
    3658:	41 f4       	brne	.+16     	; 0x366a <vdmNumericEqual+0x34>
	ASSERT_CHECK_NUMERIC(b);
    365a:	d6 01       	movw	r26, r12
    365c:	8c 91       	ld	r24, X
    365e:	83 30       	cpi	r24, 0x03	; 3
    3660:	30 f0       	brcs	.+12     	; 0x366e <vdmNumericEqual+0x38>
    3662:	84 30       	cpi	r24, 0x04	; 4
    3664:	21 f0       	breq	.+8      	; 0x366e <vdmNumericEqual+0x38>
    3666:	85 30       	cpi	r24, 0x05	; 5
    3668:	11 f0       	breq	.+4      	; 0x366e <vdmNumericEqual+0x38>
    366a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    366e:	cf 01       	movw	r24, r30
    3670:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3674:	69 83       	std	Y+1, r22	; 0x01
    3676:	7a 83       	std	Y+2, r23	; 0x02
    3678:	8b 83       	std	Y+3, r24	; 0x03
    367a:	9c 83       	std	Y+4, r25	; 0x04
	double bv = toDouble(b);
    367c:	c6 01       	movw	r24, r12
    367e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3682:	9b 01       	movw	r18, r22
    3684:	ac 01       	movw	r20, r24

	return newBool(av==bv);
    3686:	00 e0       	ldi	r16, 0x00	; 0
    3688:	69 81       	ldd	r22, Y+1	; 0x01
    368a:	7a 81       	ldd	r23, Y+2	; 0x02
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	9c 81       	ldd	r25, Y+4	; 0x04
    3690:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    3694:	88 23       	and	r24, r24
    3696:	09 f4       	brne	.+2      	; 0x369a <vdmNumericEqual+0x64>
    3698:	01 e0       	ldi	r16, 0x01	; 1
    369a:	80 2f       	mov	r24, r16
    369c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	0f 91       	pop	r16
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	08 95       	ret

000036b4 <isBool>:
		return newBoolGC(true, from);
	return newBoolGC(false, from);
}

TVP isBool(TVP v)
{
    36b4:	fc 01       	movw	r30, r24
	if(v->type == VDM_BOOL)
    36b6:	80 81       	ld	r24, Z
    36b8:	83 30       	cpi	r24, 0x03	; 3
    36ba:	21 f4       	brne	.+8      	; 0x36c4 <isBool+0x10>
		return newBool(true);
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    36c2:	08 95       	ret
	return newBool(false);
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    36ca:	08 95       	ret

000036cc <isReal>:
		return newBoolGC(true, from);
	return newBoolGC(false, from);
}

TVP isReal(TVP v)
{
    36cc:	fc 01       	movw	r30, r24
	if(v->type == VDM_REAL)
    36ce:	80 81       	ld	r24, Z
    36d0:	84 30       	cpi	r24, 0x04	; 4
    36d2:	21 f4       	brne	.+8      	; 0x36dc <isReal+0x10>
		return newBool(true);
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    36da:	08 95       	ret
	return newBool(false);
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    36e2:	08 95       	ret

000036e4 <isInt>:
		return false;
	}
}

TVP isInt(TVP v)
{
    36e4:	fc 01       	movw	r30, r24
	if(v->type == VDM_INT)
    36e6:	80 81       	ld	r24, Z
    36e8:	88 23       	and	r24, r24
    36ea:	21 f4       	brne	.+8      	; 0x36f4 <isInt+0x10>
		return newBool(true);
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    36f2:	08 95       	ret
	return newBool(false);
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    36fa:	08 95       	ret

000036fc <vdmBiimplication>:
	ASSERT_CHECK_BOOL(b);
	return newBoolGC(b->value.boolVal, from);
}

TVP vdmBiimplication(TVP a,TVP b)
{
    36fc:	fc 01       	movw	r30, r24
    36fe:	db 01       	movw	r26, r22
	if(a == NULL || b == NULL)
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	11 f1       	breq	.+68     	; 0x3748 <vdmBiimplication+0x4c>
    3704:	61 15       	cp	r22, r1
    3706:	71 05       	cpc	r23, r1
    3708:	f9 f0       	breq	.+62     	; 0x3748 <vdmBiimplication+0x4c>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    370a:	80 81       	ld	r24, Z
    370c:	83 30       	cpi	r24, 0x03	; 3
    370e:	19 f4       	brne	.+6      	; 0x3716 <vdmBiimplication+0x1a>
	ASSERT_CHECK_BOOL(b);
    3710:	8c 91       	ld	r24, X
    3712:	83 30       	cpi	r24, 0x03	; 3
    3714:	11 f0       	breq	.+4      	; 0x371a <vdmBiimplication+0x1e>
    3716:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBool((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal));
    371a:	93 81       	ldd	r25, Z+3	; 0x03
    371c:	99 23       	and	r25, r25
    371e:	41 f0       	breq	.+16     	; 0x3730 <vdmBiimplication+0x34>
    3720:	13 96       	adiw	r26, 0x03	; 3
    3722:	8c 91       	ld	r24, X
    3724:	13 97       	sbiw	r26, 0x03	; 3
    3726:	88 23       	and	r24, r24
    3728:	19 f4       	brne	.+6      	; 0x3730 <vdmBiimplication+0x34>
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	08 c0       	rjmp	.+16     	; 0x3740 <vdmBiimplication+0x44>
    3730:	13 96       	adiw	r26, 0x03	; 3
    3732:	8c 91       	ld	r24, X
    3734:	88 23       	and	r24, r24
    3736:	19 f4       	brne	.+6      	; 0x373e <vdmBiimplication+0x42>
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	01 c0       	rjmp	.+2      	; 0x3740 <vdmBiimplication+0x44>
    373e:	89 2f       	mov	r24, r25
    3740:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    3744:	9c 01       	movw	r18, r24
    3746:	02 c0       	rjmp	.+4      	; 0x374c <vdmBiimplication+0x50>
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
}
    374c:	c9 01       	movw	r24, r18
    374e:	08 95       	ret

00003750 <vdmImplies>:
	ASSERT_CHECK_BOOL(b);
	return newBoolGC((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)), from);
}

TVP vdmImplies(TVP a,TVP b)
{
    3750:	fc 01       	movw	r30, r24
    3752:	db 01       	movw	r26, r22
	if(a == NULL)
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	b1 f0       	breq	.+44     	; 0x3784 <vdmImplies+0x34>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    3758:	80 81       	ld	r24, Z
    375a:	83 30       	cpi	r24, 0x03	; 3
    375c:	59 f4       	brne	.+22     	; 0x3774 <vdmImplies+0x24>
	if(!a->value.boolVal)
    375e:	83 81       	ldd	r24, Z+3	; 0x03
    3760:	88 23       	and	r24, r24
    3762:	11 f4       	brne	.+4      	; 0x3768 <vdmImplies+0x18>
		return newBool(true);
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	0a c0       	rjmp	.+20     	; 0x377c <vdmImplies+0x2c>

	if(b == NULL)
    3768:	61 15       	cp	r22, r1
    376a:	71 05       	cpc	r23, r1
    376c:	59 f0       	breq	.+22     	; 0x3784 <vdmImplies+0x34>
		return NULL;

	ASSERT_CHECK_BOOL(b);
    376e:	8c 91       	ld	r24, X
    3770:	83 30       	cpi	r24, 0x03	; 3
    3772:	11 f0       	breq	.+4      	; 0x3778 <vdmImplies+0x28>
    3774:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBool(b->value.boolVal);
    3778:	13 96       	adiw	r26, 0x03	; 3
    377a:	8c 91       	ld	r24, X
    377c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    3780:	9c 01       	movw	r18, r24
    3782:	02 c0       	rjmp	.+4      	; 0x3788 <vdmImplies+0x38>
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
}
    3788:	c9 01       	movw	r24, r18
    378a:	08 95       	ret

0000378c <vdmXor>:
	ASSERT_CHECK_BOOL(b);
	return newBoolGC(b->value.boolVal, from);
}

TVP vdmXor(TVP a,TVP b)
{
    378c:	fc 01       	movw	r30, r24
    378e:	db 01       	movw	r26, r22
	if(a == NULL || b == NULL)
    3790:	00 97       	sbiw	r24, 0x00	; 0
    3792:	e9 f0       	breq	.+58     	; 0x37ce <vdmXor+0x42>
    3794:	61 15       	cp	r22, r1
    3796:	71 05       	cpc	r23, r1
    3798:	d1 f0       	breq	.+52     	; 0x37ce <vdmXor+0x42>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    379a:	80 81       	ld	r24, Z
    379c:	83 30       	cpi	r24, 0x03	; 3
    379e:	19 f4       	brne	.+6      	; 0x37a6 <vdmXor+0x1a>
	ASSERT_CHECK_BOOL(b);
    37a0:	8c 91       	ld	r24, X
    37a2:	83 30       	cpi	r24, 0x03	; 3
    37a4:	11 f0       	breq	.+4      	; 0x37aa <vdmXor+0x1e>
    37a6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBool((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)));
    37aa:	83 81       	ldd	r24, Z+3	; 0x03
    37ac:	13 96       	adiw	r26, 0x03	; 3
    37ae:	9c 91       	ld	r25, X
    37b0:	88 23       	and	r24, r24
    37b2:	11 f4       	brne	.+4      	; 0x37b8 <vdmXor+0x2c>
    37b4:	89 2f       	mov	r24, r25
    37b6:	07 c0       	rjmp	.+14     	; 0x37c6 <vdmXor+0x3a>
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	99 23       	and	r25, r25
    37be:	11 f4       	brne	.+4      	; 0x37c4 <vdmXor+0x38>
    37c0:	61 e0       	ldi	r22, 0x01	; 1
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	86 2f       	mov	r24, r22
    37c6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    37ca:	9c 01       	movw	r18, r24
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <vdmXor+0x46>
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
}
    37d2:	c9 01       	movw	r24, r18
    37d4:	08 95       	ret

000037d6 <vdmOr>:
	ASSERT_CHECK_BOOL(b);
	return newBoolGC(b->value.boolVal, from);
}

TVP vdmOr(TVP a,TVP b)
{
    37d6:	fc 01       	movw	r30, r24
    37d8:	db 01       	movw	r26, r22
	if(a == NULL)
    37da:	00 97       	sbiw	r24, 0x00	; 0
    37dc:	b1 f0       	breq	.+44     	; 0x380a <vdmOr+0x34>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    37de:	80 81       	ld	r24, Z
    37e0:	83 30       	cpi	r24, 0x03	; 3
    37e2:	59 f4       	brne	.+22     	; 0x37fa <vdmOr+0x24>
	if(a->value.boolVal)
    37e4:	83 81       	ldd	r24, Z+3	; 0x03
    37e6:	88 23       	and	r24, r24
    37e8:	11 f0       	breq	.+4      	; 0x37ee <vdmOr+0x18>
		return newBool(true);
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	0a c0       	rjmp	.+20     	; 0x3802 <vdmOr+0x2c>

	if(b == NULL)
    37ee:	61 15       	cp	r22, r1
    37f0:	71 05       	cpc	r23, r1
    37f2:	59 f0       	breq	.+22     	; 0x380a <vdmOr+0x34>
		return NULL;

	ASSERT_CHECK_BOOL(b);
    37f4:	8c 91       	ld	r24, X
    37f6:	83 30       	cpi	r24, 0x03	; 3
    37f8:	11 f0       	breq	.+4      	; 0x37fe <vdmOr+0x28>
    37fa:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBool(b->value.boolVal);
    37fe:	13 96       	adiw	r26, 0x03	; 3
    3800:	8c 91       	ld	r24, X
    3802:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    3806:	9c 01       	movw	r18, r24
    3808:	02 c0       	rjmp	.+4      	; 0x380e <vdmOr+0x38>
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
}
    380e:	c9 01       	movw	r24, r18
    3810:	08 95       	ret

00003812 <vdmAnd>:

	return newBoolGC(!arg->value.boolVal, from);
}

TVP vdmAnd(TVP a,TVP b)
{
    3812:	fc 01       	movw	r30, r24
    3814:	db 01       	movw	r26, r22
	if(a == NULL)
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	a1 f0       	breq	.+40     	; 0x3842 <vdmAnd+0x30>
		return NULL;

	ASSERT_CHECK_BOOL(a);
    381a:	80 81       	ld	r24, Z
    381c:	83 30       	cpi	r24, 0x03	; 3
    381e:	49 f4       	brne	.+18     	; 0x3832 <vdmAnd+0x20>
	if(!a->value.boolVal)
    3820:	83 81       	ldd	r24, Z+3	; 0x03
    3822:	88 23       	and	r24, r24
    3824:	51 f0       	breq	.+20     	; 0x383a <vdmAnd+0x28>
		return newBool(false);

	if(b == NULL)
    3826:	61 15       	cp	r22, r1
    3828:	71 05       	cpc	r23, r1
    382a:	59 f0       	breq	.+22     	; 0x3842 <vdmAnd+0x30>
		return NULL;

	ASSERT_CHECK_BOOL(b);
    382c:	8c 91       	ld	r24, X
    382e:	83 30       	cpi	r24, 0x03	; 3
    3830:	11 f0       	breq	.+4      	; 0x3836 <vdmAnd+0x24>
    3832:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return newBool(b->value.boolVal);
    3836:	13 96       	adiw	r26, 0x03	; 3
    3838:	8c 91       	ld	r24, X
    383a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    383e:	9c 01       	movw	r18, r24
    3840:	02 c0       	rjmp	.+4      	; 0x3846 <vdmAnd+0x34>
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
}
    3846:	c9 01       	movw	r24, r18
    3848:	08 95       	ret

0000384a <vdmNot>:
/*
 * Boolean
 */

TVP vdmNot(TVP arg)
{
    384a:	fc 01       	movw	r30, r24
	if(arg == NULL)
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	19 f4       	brne	.+6      	; 0x3856 <vdmNot+0xc>
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	0b c0       	rjmp	.+22     	; 0x386c <vdmNot+0x22>
		return NULL;

	ASSERT_CHECK_BOOL(arg);
    3856:	80 81       	ld	r24, Z
    3858:	83 30       	cpi	r24, 0x03	; 3
    385a:	11 f0       	breq	.+4      	; 0x3860 <vdmNot+0x16>
    385c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	return newBool(!arg->value.boolVal);
    3860:	83 81       	ldd	r24, Z+3	; 0x03
    3862:	91 e0       	ldi	r25, 0x01	; 1
    3864:	89 27       	eor	r24, r25
    3866:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    386a:	9c 01       	movw	r18, r24
}
    386c:	c9 01       	movw	r24, r18
    386e:	08 95       	ret

00003870 <vdmPowerGC>:

	return newReal(pow(av,bv));
}

TVP vdmPowerGC(TVP a, TVP b, TVP *from)
{
    3870:	cf 92       	push	r12
    3872:	df 92       	push	r13
    3874:	ef 92       	push	r14
    3876:	ff 92       	push	r15
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	fc 01       	movw	r30, r24
    3882:	eb 01       	movw	r28, r22
    3884:	6a 01       	movw	r12, r20
	ASSERT_CHECK_NUMERIC(a);
    3886:	80 81       	ld	r24, Z
    3888:	83 30       	cpi	r24, 0x03	; 3
    388a:	20 f0       	brcs	.+8      	; 0x3894 <vdmPowerGC+0x24>
    388c:	84 30       	cpi	r24, 0x04	; 4
    388e:	11 f0       	breq	.+4      	; 0x3894 <vdmPowerGC+0x24>
    3890:	85 30       	cpi	r24, 0x05	; 5
    3892:	39 f4       	brne	.+14     	; 0x38a2 <vdmPowerGC+0x32>
	ASSERT_CHECK_NUMERIC(b);
    3894:	88 81       	ld	r24, Y
    3896:	83 30       	cpi	r24, 0x03	; 3
    3898:	30 f0       	brcs	.+12     	; 0x38a6 <vdmPowerGC+0x36>
    389a:	84 30       	cpi	r24, 0x04	; 4
    389c:	21 f0       	breq	.+8      	; 0x38a6 <vdmPowerGC+0x36>
    389e:	85 30       	cpi	r24, 0x05	; 5
    38a0:	11 f0       	breq	.+4      	; 0x38a6 <vdmPowerGC+0x36>
    38a2:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    38a6:	cf 01       	movw	r24, r30
    38a8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    38ac:	7b 01       	movw	r14, r22
    38ae:	8c 01       	movw	r16, r24
	double bv = toDouble(b);
    38b0:	ce 01       	movw	r24, r28
    38b2:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    38b6:	9b 01       	movw	r18, r22
    38b8:	ac 01       	movw	r20, r24

	return newRealGC(pow(av,bv), from);
    38ba:	c8 01       	movw	r24, r16
    38bc:	b7 01       	movw	r22, r14
    38be:	0e 94 19 3c 	call	0x7832	; 0x7832 <pow>
    38c2:	a6 01       	movw	r20, r12
    38c4:	0e 94 80 22 	call	0x4500	; 0x4500 <newRealGC>
}
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	1f 91       	pop	r17
    38ce:	0f 91       	pop	r16
    38d0:	ff 90       	pop	r15
    38d2:	ef 90       	pop	r14
    38d4:	df 90       	pop	r13
    38d6:	cf 90       	pop	r12
    38d8:	08 95       	ret

000038da <vdmDivisionGC>:

	return newReal(av/bv);
}

TVP vdmDivisionGC(TVP a,TVP b, TVP *from)
{
    38da:	cf 92       	push	r12
    38dc:	df 92       	push	r13
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	fc 01       	movw	r30, r24
    38ec:	eb 01       	movw	r28, r22
    38ee:	6a 01       	movw	r12, r20
	ASSERT_CHECK_NUMERIC(a);
    38f0:	80 81       	ld	r24, Z
    38f2:	83 30       	cpi	r24, 0x03	; 3
    38f4:	20 f0       	brcs	.+8      	; 0x38fe <vdmDivisionGC+0x24>
    38f6:	84 30       	cpi	r24, 0x04	; 4
    38f8:	11 f0       	breq	.+4      	; 0x38fe <vdmDivisionGC+0x24>
    38fa:	85 30       	cpi	r24, 0x05	; 5
    38fc:	39 f4       	brne	.+14     	; 0x390c <vdmDivisionGC+0x32>
	ASSERT_CHECK_NUMERIC(b);
    38fe:	88 81       	ld	r24, Y
    3900:	83 30       	cpi	r24, 0x03	; 3
    3902:	30 f0       	brcs	.+12     	; 0x3910 <vdmDivisionGC+0x36>
    3904:	84 30       	cpi	r24, 0x04	; 4
    3906:	21 f0       	breq	.+8      	; 0x3910 <vdmDivisionGC+0x36>
    3908:	85 30       	cpi	r24, 0x05	; 5
    390a:	11 f0       	breq	.+4      	; 0x3910 <vdmDivisionGC+0x36>
    390c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3910:	cf 01       	movw	r24, r30
    3912:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3916:	7b 01       	movw	r14, r22
    3918:	8c 01       	movw	r16, r24
	double bv = toDouble(b);
    391a:	ce 01       	movw	r24, r28
    391c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3920:	9b 01       	movw	r18, r22
    3922:	ac 01       	movw	r20, r24

	return newRealGC(av/bv, from);
    3924:	c8 01       	movw	r24, r16
    3926:	b7 01       	movw	r22, r14
    3928:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    392c:	a6 01       	movw	r20, r12
    392e:	0e 94 80 22 	call	0x4500	; 0x4500 <newRealGC>
}
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	df 90       	pop	r13
    3940:	cf 90       	pop	r12
    3942:	08 95       	ret

00003944 <vdmPower>:

		return newRealGC(lv-rv*(long) floor(lv/rv), from);
}

TVP vdmPower(TVP a,TVP b)
{
    3944:	ef 92       	push	r14
    3946:	ff 92       	push	r15
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	fc 01       	movw	r30, r24
    3952:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    3954:	80 81       	ld	r24, Z
    3956:	83 30       	cpi	r24, 0x03	; 3
    3958:	20 f0       	brcs	.+8      	; 0x3962 <vdmPower+0x1e>
    395a:	84 30       	cpi	r24, 0x04	; 4
    395c:	11 f0       	breq	.+4      	; 0x3962 <vdmPower+0x1e>
    395e:	85 30       	cpi	r24, 0x05	; 5
    3960:	39 f4       	brne	.+14     	; 0x3970 <vdmPower+0x2c>
	ASSERT_CHECK_NUMERIC(b);
    3962:	88 81       	ld	r24, Y
    3964:	83 30       	cpi	r24, 0x03	; 3
    3966:	30 f0       	brcs	.+12     	; 0x3974 <vdmPower+0x30>
    3968:	84 30       	cpi	r24, 0x04	; 4
    396a:	21 f0       	breq	.+8      	; 0x3974 <vdmPower+0x30>
    396c:	85 30       	cpi	r24, 0x05	; 5
    396e:	11 f0       	breq	.+4      	; 0x3974 <vdmPower+0x30>
    3970:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3974:	cf 01       	movw	r24, r30
    3976:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    397a:	7b 01       	movw	r14, r22
    397c:	8c 01       	movw	r16, r24
	double bv = toDouble(b);
    397e:	ce 01       	movw	r24, r28
    3980:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3984:	9b 01       	movw	r18, r22
    3986:	ac 01       	movw	r20, r24

	return newReal(pow(av,bv));
    3988:	c8 01       	movw	r24, r16
    398a:	b7 01       	movw	r22, r14
    398c:	0e 94 19 3c 	call	0x7832	; 0x7832 <pow>
    3990:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
}
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	1f 91       	pop	r17
    399a:	0f 91       	pop	r16
    399c:	ff 90       	pop	r15
    399e:	ef 90       	pop	r14
    39a0:	08 95       	ret

000039a2 <vdmDivision>:

		return newRealGC(av * bv, from);
}

TVP vdmDivision(TVP a,TVP b)
{
    39a2:	ef 92       	push	r14
    39a4:	ff 92       	push	r15
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	fc 01       	movw	r30, r24
    39b0:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    39b2:	80 81       	ld	r24, Z
    39b4:	83 30       	cpi	r24, 0x03	; 3
    39b6:	20 f0       	brcs	.+8      	; 0x39c0 <vdmDivision+0x1e>
    39b8:	84 30       	cpi	r24, 0x04	; 4
    39ba:	11 f0       	breq	.+4      	; 0x39c0 <vdmDivision+0x1e>
    39bc:	85 30       	cpi	r24, 0x05	; 5
    39be:	39 f4       	brne	.+14     	; 0x39ce <vdmDivision+0x2c>
	ASSERT_CHECK_NUMERIC(b);
    39c0:	88 81       	ld	r24, Y
    39c2:	83 30       	cpi	r24, 0x03	; 3
    39c4:	30 f0       	brcs	.+12     	; 0x39d2 <vdmDivision+0x30>
    39c6:	84 30       	cpi	r24, 0x04	; 4
    39c8:	21 f0       	breq	.+8      	; 0x39d2 <vdmDivision+0x30>
    39ca:	85 30       	cpi	r24, 0x05	; 5
    39cc:	11 f0       	breq	.+4      	; 0x39d2 <vdmDivision+0x30>
    39ce:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    39d2:	cf 01       	movw	r24, r30
    39d4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    39d8:	7b 01       	movw	r14, r22
    39da:	8c 01       	movw	r16, r24
	double bv = toDouble(b);
    39dc:	ce 01       	movw	r24, r28
    39de:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    39e2:	9b 01       	movw	r18, r22
    39e4:	ac 01       	movw	r20, r24

	return newReal(av/bv);
    39e6:	c8 01       	movw	r24, r16
    39e8:	b7 01       	movw	r22, r14
    39ea:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    39ee:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
}
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	1f 91       	pop	r17
    39f8:	0f 91       	pop	r16
    39fa:	ff 90       	pop	r15
    39fc:	ef 90       	pop	r14
    39fe:	08 95       	ret

00003a00 <divi>:

	return newRealGC(av/bv, from);
}

static long divi(double lv, double rv)
{
    3a00:	ef 92       	push	r14
    3a02:	ff 92       	push	r15
    3a04:	0f 93       	push	r16
    3a06:	1f 93       	push	r17
	 * div y = floor(abs(x/y)) Note that the order of floor and abs on the right-hand side makes a difference, the
	 * above example would yield -5 if we changed the order. This is because floor always yields a smaller (or
	 * equal) integer, e.g. floor (14/3) is 4 while floor (-14/3) is -5.
	 */

	if (lv / rv < 0)
    3a08:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    3a0c:	7b 01       	movw	r14, r22
    3a0e:	8c 01       	movw	r16, r24
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e0       	ldi	r20, 0x00	; 0
    3a16:	50 e0       	ldi	r21, 0x00	; 0
    3a18:	0e 94 10 3a 	call	0x7420	; 0x7420 <__cmpsf2>
    3a1c:	a8 01       	movw	r20, r16
    3a1e:	97 01       	movw	r18, r14
    3a20:	5f 77       	andi	r21, 0x7F	; 127
    3a22:	88 23       	and	r24, r24
    3a24:	34 f4       	brge	.+12     	; 0x3a32 <divi+0x32>
	{
		return (long) -floor(fabs(lv / rv));
    3a26:	ca 01       	movw	r24, r20
    3a28:	b9 01       	movw	r22, r18
    3a2a:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <floor>
    3a2e:	90 58       	subi	r25, 0x80	; 128
    3a30:	04 c0       	rjmp	.+8      	; 0x3a3a <divi+0x3a>
	} else
	{
		return (long) floor(fabs(-lv / rv));
    3a32:	ca 01       	movw	r24, r20
    3a34:	b9 01       	movw	r22, r18
    3a36:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <floor>
    3a3a:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3a3e:	9b 01       	movw	r18, r22
    3a40:	ac 01       	movw	r20, r24
	}
}
    3a42:	ca 01       	movw	r24, r20
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	08 95       	ret

00003a4e <vdmModGC>:

	return newReal(lv-rv*(long) floor(lv/rv));
}

TVP vdmModGC(TVP a, TVP b, TVP *from)
{
    3a4e:	8f 92       	push	r8
    3a50:	9f 92       	push	r9
    3a52:	af 92       	push	r10
    3a54:	bf 92       	push	r11
    3a56:	cf 92       	push	r12
    3a58:	df 92       	push	r13
    3a5a:	ef 92       	push	r14
    3a5c:	ff 92       	push	r15
    3a5e:	0f 93       	push	r16
    3a60:	1f 93       	push	r17
    3a62:	cf 93       	push	r28
    3a64:	df 93       	push	r29
    3a66:	fc 01       	movw	r30, r24
    3a68:	eb 01       	movw	r28, r22
    3a6a:	4a 01       	movw	r8, r20
	ASSERT_CHECK_NUMERIC(a);
    3a6c:	90 81       	ld	r25, Z
    3a6e:	93 30       	cpi	r25, 0x03	; 3
    3a70:	20 f0       	brcs	.+8      	; 0x3a7a <vdmModGC+0x2c>
    3a72:	94 30       	cpi	r25, 0x04	; 4
    3a74:	11 f0       	breq	.+4      	; 0x3a7a <vdmModGC+0x2c>
    3a76:	95 30       	cpi	r25, 0x05	; 5
    3a78:	59 f4       	brne	.+22     	; 0x3a90 <vdmModGC+0x42>
	ASSERT_CHECK_NUMERIC(b);
    3a7a:	88 81       	ld	r24, Y
    3a7c:	83 30       	cpi	r24, 0x03	; 3
    3a7e:	20 f0       	brcs	.+8      	; 0x3a88 <vdmModGC+0x3a>
    3a80:	84 30       	cpi	r24, 0x04	; 4
    3a82:	11 f0       	breq	.+4      	; 0x3a88 <vdmModGC+0x3a>
    3a84:	85 30       	cpi	r24, 0x05	; 5
    3a86:	21 f4       	brne	.+8      	; 0x3a90 <vdmModGC+0x42>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L575  */
	ASSERT_CHECK_INT(a);
    3a88:	99 23       	and	r25, r25
    3a8a:	11 f4       	brne	.+4      	; 0x3a90 <vdmModGC+0x42>
	ASSERT_CHECK_INT(b);
    3a8c:	88 23       	and	r24, r24
    3a8e:	11 f0       	breq	.+4      	; 0x3a94 <vdmModGC+0x46>
    3a90:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double lv =(int) toDouble(a);
    3a94:	cf 01       	movw	r24, r30
    3a96:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3a9a:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3a9e:	88 27       	eor	r24, r24
    3aa0:	77 fd       	sbrc	r23, 7
    3aa2:	80 95       	com	r24
    3aa4:	98 2f       	mov	r25, r24
    3aa6:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3aaa:	5b 01       	movw	r10, r22
    3aac:	6c 01       	movw	r12, r24
	double rv = (int)toDouble(b);
    3aae:	ce 01       	movw	r24, r28
    3ab0:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3ab4:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3ab8:	88 27       	eor	r24, r24
    3aba:	77 fd       	sbrc	r23, 7
    3abc:	80 95       	com	r24
    3abe:	98 2f       	mov	r25, r24
    3ac0:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3ac4:	7b 01       	movw	r14, r22
    3ac6:	8c 01       	movw	r16, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(lv-rv*(long) floor(lv/rv)), from);
    3ac8:	c6 01       	movw	r24, r12
    3aca:	b5 01       	movw	r22, r10
    3acc:	a8 01       	movw	r20, r16
    3ace:	97 01       	movw	r18, r14
    3ad0:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    3ad4:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <floor>
    3ad8:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3adc:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3ae0:	9b 01       	movw	r18, r22
    3ae2:	ac 01       	movw	r20, r24
    3ae4:	c8 01       	movw	r24, r16
    3ae6:	b7 01       	movw	r22, r14
    3ae8:	0e 94 b6 3b 	call	0x776c	; 0x776c <__mulsf3>
    3aec:	9b 01       	movw	r18, r22
    3aee:	ac 01       	movw	r20, r24
    3af0:	c6 01       	movw	r24, r12
    3af2:	b5 01       	movw	r22, r10
    3af4:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    3af8:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	b4 01       	movw	r22, r8
    3b02:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>

		return newRealGC(lv-rv*(long) floor(lv/rv), from);
}
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	1f 91       	pop	r17
    3b0c:	0f 91       	pop	r16
    3b0e:	ff 90       	pop	r15
    3b10:	ef 90       	pop	r14
    3b12:	df 90       	pop	r13
    3b14:	cf 90       	pop	r12
    3b16:	bf 90       	pop	r11
    3b18:	af 90       	pop	r10
    3b1a:	9f 90       	pop	r9
    3b1c:	8f 90       	pop	r8
    3b1e:	08 95       	ret

00003b20 <vdmRemGC>:

	return newInt(av-bv*divi(av,bv));
}

TVP vdmRemGC(TVP a, TVP b, TVP *from)
{
    3b20:	4f 92       	push	r4
    3b22:	5f 92       	push	r5
    3b24:	6f 92       	push	r6
    3b26:	7f 92       	push	r7
    3b28:	8f 92       	push	r8
    3b2a:	9f 92       	push	r9
    3b2c:	af 92       	push	r10
    3b2e:	bf 92       	push	r11
    3b30:	cf 92       	push	r12
    3b32:	df 92       	push	r13
    3b34:	ef 92       	push	r14
    3b36:	ff 92       	push	r15
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	fc 01       	movw	r30, r24
    3b42:	eb 01       	movw	r28, r22
    3b44:	2a 01       	movw	r4, r20
	ASSERT_CHECK_NUMERIC(a);
    3b46:	90 81       	ld	r25, Z
    3b48:	93 30       	cpi	r25, 0x03	; 3
    3b4a:	20 f0       	brcs	.+8      	; 0x3b54 <vdmRemGC+0x34>
    3b4c:	94 30       	cpi	r25, 0x04	; 4
    3b4e:	11 f0       	breq	.+4      	; 0x3b54 <vdmRemGC+0x34>
    3b50:	95 30       	cpi	r25, 0x05	; 5
    3b52:	59 f4       	brne	.+22     	; 0x3b6a <vdmRemGC+0x4a>
	ASSERT_CHECK_NUMERIC(b);
    3b54:	88 81       	ld	r24, Y
    3b56:	83 30       	cpi	r24, 0x03	; 3
    3b58:	20 f0       	brcs	.+8      	; 0x3b62 <vdmRemGC+0x42>
    3b5a:	84 30       	cpi	r24, 0x04	; 4
    3b5c:	11 f0       	breq	.+4      	; 0x3b62 <vdmRemGC+0x42>
    3b5e:	85 30       	cpi	r24, 0x05	; 5
    3b60:	21 f4       	brne	.+8      	; 0x3b6a <vdmRemGC+0x4a>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L628  */
	ASSERT_CHECK_INT(a);
    3b62:	99 23       	and	r25, r25
    3b64:	11 f4       	brne	.+4      	; 0x3b6a <vdmRemGC+0x4a>
	ASSERT_CHECK_INT(b);
    3b66:	88 23       	and	r24, r24
    3b68:	11 f0       	breq	.+4      	; 0x3b6e <vdmRemGC+0x4e>
    3b6a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	int av = toDouble(a);
    3b6e:	cf 01       	movw	r24, r30
    3b70:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3b74:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3b78:	5b 01       	movw	r10, r22
    3b7a:	6c 01       	movw	r12, r24
	int bv = toDouble(b);
    3b7c:	ce 01       	movw	r24, r28
    3b7e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3b82:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3b86:	7b 01       	movw	r14, r22
    3b88:	8c 01       	movw	r16, r24

	return newIntGC(av-bv*divi(av,bv), from);
    3b8a:	b5 01       	movw	r22, r10
    3b8c:	88 27       	eor	r24, r24
    3b8e:	77 fd       	sbrc	r23, 7
    3b90:	80 95       	com	r24
    3b92:	98 2f       	mov	r25, r24
    3b94:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3b98:	3b 01       	movw	r6, r22
    3b9a:	4c 01       	movw	r8, r24
    3b9c:	00 27       	eor	r16, r16
    3b9e:	f7 fc       	sbrc	r15, 7
    3ba0:	00 95       	com	r16
    3ba2:	10 2f       	mov	r17, r16
    3ba4:	c8 01       	movw	r24, r16
    3ba6:	b7 01       	movw	r22, r14
    3ba8:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3bac:	9b 01       	movw	r18, r22
    3bae:	ac 01       	movw	r20, r24
    3bb0:	c4 01       	movw	r24, r8
    3bb2:	b3 01       	movw	r22, r6
    3bb4:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <divi>
    3bb8:	a8 01       	movw	r20, r16
    3bba:	97 01       	movw	r18, r14
    3bbc:	0e 94 70 3d 	call	0x7ae0	; 0x7ae0 <__mulsi3>
    3bc0:	a6 1a       	sub	r10, r22
    3bc2:	b7 0a       	sbc	r11, r23
    3bc4:	c5 01       	movw	r24, r10
    3bc6:	b2 01       	movw	r22, r4
    3bc8:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
}
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	df 90       	pop	r13
    3bda:	cf 90       	pop	r12
    3bdc:	bf 90       	pop	r11
    3bde:	af 90       	pop	r10
    3be0:	9f 90       	pop	r9
    3be2:	8f 90       	pop	r8
    3be4:	7f 90       	pop	r7
    3be6:	6f 90       	pop	r6
    3be8:	5f 90       	pop	r5
    3bea:	4f 90       	pop	r4
    3bec:	08 95       	ret

00003bee <vdmDivGC>:

	return newInt(divi(av,bv));
}

TVP vdmDivGC(TVP a, TVP b, TVP *from)
{
    3bee:	8f 92       	push	r8
    3bf0:	9f 92       	push	r9
    3bf2:	af 92       	push	r10
    3bf4:	bf 92       	push	r11
    3bf6:	cf 92       	push	r12
    3bf8:	df 92       	push	r13
    3bfa:	ef 92       	push	r14
    3bfc:	ff 92       	push	r15
    3bfe:	0f 93       	push	r16
    3c00:	1f 93       	push	r17
    3c02:	cf 93       	push	r28
    3c04:	df 93       	push	r29
    3c06:	fc 01       	movw	r30, r24
    3c08:	eb 01       	movw	r28, r22
    3c0a:	4a 01       	movw	r8, r20
	ASSERT_CHECK_NUMERIC(a);
    3c0c:	90 81       	ld	r25, Z
    3c0e:	93 30       	cpi	r25, 0x03	; 3
    3c10:	20 f0       	brcs	.+8      	; 0x3c1a <vdmDivGC+0x2c>
    3c12:	94 30       	cpi	r25, 0x04	; 4
    3c14:	11 f0       	breq	.+4      	; 0x3c1a <vdmDivGC+0x2c>
    3c16:	95 30       	cpi	r25, 0x05	; 5
    3c18:	59 f4       	brne	.+22     	; 0x3c30 <vdmDivGC+0x42>
	ASSERT_CHECK_NUMERIC(b);
    3c1a:	88 81       	ld	r24, Y
    3c1c:	83 30       	cpi	r24, 0x03	; 3
    3c1e:	20 f0       	brcs	.+8      	; 0x3c28 <vdmDivGC+0x3a>
    3c20:	84 30       	cpi	r24, 0x04	; 4
    3c22:	11 f0       	breq	.+4      	; 0x3c28 <vdmDivGC+0x3a>
    3c24:	85 30       	cpi	r24, 0x05	; 5
    3c26:	21 f4       	brne	.+8      	; 0x3c30 <vdmDivGC+0x42>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L444  */

	ASSERT_CHECK_INT(a);
    3c28:	99 23       	and	r25, r25
    3c2a:	11 f4       	brne	.+4      	; 0x3c30 <vdmDivGC+0x42>
	ASSERT_CHECK_INT(b);
    3c2c:	88 23       	and	r24, r24
    3c2e:	11 f0       	breq	.+4      	; 0x3c34 <vdmDivGC+0x46>
    3c30:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	int av = toDouble(a);
    3c34:	cf 01       	movw	r24, r30
    3c36:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3c3a:	7b 01       	movw	r14, r22
    3c3c:	8c 01       	movw	r16, r24
	int bv = toDouble(b);
    3c3e:	ce 01       	movw	r24, r28
    3c40:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3c44:	5b 01       	movw	r10, r22
    3c46:	6c 01       	movw	r12, r24

	return newIntGC(divi(av,bv), from);
    3c48:	c8 01       	movw	r24, r16
    3c4a:	b7 01       	movw	r22, r14
    3c4c:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3c50:	88 27       	eor	r24, r24
    3c52:	77 fd       	sbrc	r23, 7
    3c54:	80 95       	com	r24
    3c56:	98 2f       	mov	r25, r24
    3c58:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3c5c:	7b 01       	movw	r14, r22
    3c5e:	8c 01       	movw	r16, r24
    3c60:	c6 01       	movw	r24, r12
    3c62:	b5 01       	movw	r22, r10
    3c64:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3c68:	88 27       	eor	r24, r24
    3c6a:	77 fd       	sbrc	r23, 7
    3c6c:	80 95       	com	r24
    3c6e:	98 2f       	mov	r25, r24
    3c70:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3c74:	9b 01       	movw	r18, r22
    3c76:	ac 01       	movw	r20, r24
    3c78:	c8 01       	movw	r24, r16
    3c7a:	b7 01       	movw	r22, r14
    3c7c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <divi>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	b4 01       	movw	r22, r8
    3c86:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
}
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	ff 90       	pop	r15
    3c94:	ef 90       	pop	r14
    3c96:	df 90       	pop	r13
    3c98:	cf 90       	pop	r12
    3c9a:	bf 90       	pop	r11
    3c9c:	af 90       	pop	r10
    3c9e:	9f 90       	pop	r9
    3ca0:	8f 90       	pop	r8
    3ca2:	08 95       	ret

00003ca4 <vdmProductGC>:

	return newReal(av * bv);
}

TVP vdmProductGC(TVP a, TVP b, TVP *from)
{
    3ca4:	af 92       	push	r10
    3ca6:	bf 92       	push	r11
    3ca8:	cf 92       	push	r12
    3caa:	df 92       	push	r13
    3cac:	ef 92       	push	r14
    3cae:	ff 92       	push	r15
    3cb0:	0f 93       	push	r16
    3cb2:	1f 93       	push	r17
    3cb4:	cf 93       	push	r28
    3cb6:	df 93       	push	r29
    3cb8:	fc 01       	movw	r30, r24
    3cba:	eb 01       	movw	r28, r22
    3cbc:	5a 01       	movw	r10, r20
	ASSERT_CHECK_NUMERIC(a);
    3cbe:	c0 80       	ld	r12, Z
    3cc0:	82 e0       	ldi	r24, 0x02	; 2
    3cc2:	8c 15       	cp	r24, r12
    3cc4:	30 f4       	brcc	.+12     	; 0x3cd2 <vdmProductGC+0x2e>
    3cc6:	84 e0       	ldi	r24, 0x04	; 4
    3cc8:	c8 16       	cp	r12, r24
    3cca:	19 f0       	breq	.+6      	; 0x3cd2 <vdmProductGC+0x2e>
    3ccc:	85 e0       	ldi	r24, 0x05	; 5
    3cce:	c8 16       	cp	r12, r24
    3cd0:	51 f4       	brne	.+20     	; 0x3ce6 <vdmProductGC+0x42>
	ASSERT_CHECK_NUMERIC(b);
    3cd2:	d8 80       	ld	r13, Y
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	8d 15       	cp	r24, r13
    3cd8:	40 f4       	brcc	.+16     	; 0x3cea <vdmProductGC+0x46>
    3cda:	84 e0       	ldi	r24, 0x04	; 4
    3cdc:	d8 16       	cp	r13, r24
    3cde:	29 f0       	breq	.+10     	; 0x3cea <vdmProductGC+0x46>
    3ce0:	85 e0       	ldi	r24, 0x05	; 5
    3ce2:	d8 16       	cp	r13, r24
    3ce4:	11 f0       	breq	.+4      	; 0x3cea <vdmProductGC+0x46>
    3ce6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3cea:	cf 01       	movw	r24, r30
    3cec:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3cf0:	7b 01       	movw	r14, r22
    3cf2:	8c 01       	movw	r16, r24
	double bv=toDouble(b);
    3cf4:	ce 01       	movw	r24, r28
    3cf6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3cfa:	9b 01       	movw	r18, r22
    3cfc:	ac 01       	movw	r20, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    3cfe:	82 e0       	ldi	r24, 0x02	; 2
    3d00:	8c 15       	cp	r24, r12
    3d02:	70 f0       	brcs	.+28     	; 0x3d20 <vdmProductGC+0x7c>
    3d04:	8d 15       	cp	r24, r13
    3d06:	60 f0       	brcs	.+24     	; 0x3d20 <vdmProductGC+0x7c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av * bv), from);
    3d08:	c8 01       	movw	r24, r16
    3d0a:	b7 01       	movw	r22, r14
    3d0c:	0e 94 b6 3b 	call	0x776c	; 0x776c <__mulsf3>
    3d10:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	b5 01       	movw	r22, r10
    3d1a:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
    3d1e:	07 c0       	rjmp	.+14     	; 0x3d2e <vdmProductGC+0x8a>

		return newRealGC(av * bv, from);
    3d20:	c8 01       	movw	r24, r16
    3d22:	b7 01       	movw	r22, r14
    3d24:	0e 94 b6 3b 	call	0x776c	; 0x776c <__mulsf3>
    3d28:	a5 01       	movw	r20, r10
    3d2a:	0e 94 80 22 	call	0x4500	; 0x4500 <newRealGC>
}
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	1f 91       	pop	r17
    3d34:	0f 91       	pop	r16
    3d36:	ff 90       	pop	r15
    3d38:	ef 90       	pop	r14
    3d3a:	df 90       	pop	r13
    3d3c:	cf 90       	pop	r12
    3d3e:	bf 90       	pop	r11
    3d40:	af 90       	pop	r10
    3d42:	08 95       	ret

00003d44 <vdmDifferenceGC>:

	return newReal(av - bv);
}

TVP vdmDifferenceGC(TVP a,TVP b, TVP *from)
{
    3d44:	af 92       	push	r10
    3d46:	bf 92       	push	r11
    3d48:	cf 92       	push	r12
    3d4a:	df 92       	push	r13
    3d4c:	ef 92       	push	r14
    3d4e:	ff 92       	push	r15
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	fc 01       	movw	r30, r24
    3d5a:	eb 01       	movw	r28, r22
    3d5c:	5a 01       	movw	r10, r20
	ASSERT_CHECK_NUMERIC(a);
    3d5e:	c0 80       	ld	r12, Z
    3d60:	82 e0       	ldi	r24, 0x02	; 2
    3d62:	8c 15       	cp	r24, r12
    3d64:	30 f4       	brcc	.+12     	; 0x3d72 <vdmDifferenceGC+0x2e>
    3d66:	84 e0       	ldi	r24, 0x04	; 4
    3d68:	c8 16       	cp	r12, r24
    3d6a:	19 f0       	breq	.+6      	; 0x3d72 <vdmDifferenceGC+0x2e>
    3d6c:	85 e0       	ldi	r24, 0x05	; 5
    3d6e:	c8 16       	cp	r12, r24
    3d70:	51 f4       	brne	.+20     	; 0x3d86 <vdmDifferenceGC+0x42>
	ASSERT_CHECK_NUMERIC(b);
    3d72:	d8 80       	ld	r13, Y
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	8d 15       	cp	r24, r13
    3d78:	40 f4       	brcc	.+16     	; 0x3d8a <vdmDifferenceGC+0x46>
    3d7a:	84 e0       	ldi	r24, 0x04	; 4
    3d7c:	d8 16       	cp	r13, r24
    3d7e:	29 f0       	breq	.+10     	; 0x3d8a <vdmDifferenceGC+0x46>
    3d80:	85 e0       	ldi	r24, 0x05	; 5
    3d82:	d8 16       	cp	r13, r24
    3d84:	11 f0       	breq	.+4      	; 0x3d8a <vdmDifferenceGC+0x46>
    3d86:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3d8a:	cf 01       	movw	r24, r30
    3d8c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3d90:	7b 01       	movw	r14, r22
    3d92:	8c 01       	movw	r16, r24
	double bv=toDouble(b);
    3d94:	ce 01       	movw	r24, r28
    3d96:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3d9a:	9b 01       	movw	r18, r22
    3d9c:	ac 01       	movw	r20, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	8c 15       	cp	r24, r12
    3da2:	70 f0       	brcs	.+28     	; 0x3dc0 <vdmDifferenceGC+0x7c>
    3da4:	8d 15       	cp	r24, r13
    3da6:	60 f0       	brcs	.+24     	; 0x3dc0 <vdmDifferenceGC+0x7c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av - bv), from);
    3da8:	c8 01       	movw	r24, r16
    3daa:	b7 01       	movw	r22, r14
    3dac:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    3db0:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	b5 01       	movw	r22, r10
    3dba:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
    3dbe:	07 c0       	rjmp	.+14     	; 0x3dce <vdmDifferenceGC+0x8a>

		return newRealGC(av - bv, from);
    3dc0:	c8 01       	movw	r24, r16
    3dc2:	b7 01       	movw	r22, r14
    3dc4:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    3dc8:	a5 01       	movw	r20, r10
    3dca:	0e 94 80 22 	call	0x4500	; 0x4500 <newRealGC>
}
    3dce:	df 91       	pop	r29
    3dd0:	cf 91       	pop	r28
    3dd2:	1f 91       	pop	r17
    3dd4:	0f 91       	pop	r16
    3dd6:	ff 90       	pop	r15
    3dd8:	ef 90       	pop	r14
    3dda:	df 90       	pop	r13
    3ddc:	cf 90       	pop	r12
    3dde:	bf 90       	pop	r11
    3de0:	af 90       	pop	r10
    3de2:	08 95       	ret

00003de4 <vdmSumGC>:

	return newReal(av+bv);
}

TVP vdmSumGC(TVP a,TVP b, TVP *from)
{
    3de4:	af 92       	push	r10
    3de6:	bf 92       	push	r11
    3de8:	cf 92       	push	r12
    3dea:	df 92       	push	r13
    3dec:	ef 92       	push	r14
    3dee:	ff 92       	push	r15
    3df0:	0f 93       	push	r16
    3df2:	1f 93       	push	r17
    3df4:	cf 93       	push	r28
    3df6:	df 93       	push	r29
    3df8:	fc 01       	movw	r30, r24
    3dfa:	eb 01       	movw	r28, r22
    3dfc:	5a 01       	movw	r10, r20
	ASSERT_CHECK_NUMERIC(a);
    3dfe:	c0 80       	ld	r12, Z
    3e00:	82 e0       	ldi	r24, 0x02	; 2
    3e02:	8c 15       	cp	r24, r12
    3e04:	30 f4       	brcc	.+12     	; 0x3e12 <vdmSumGC+0x2e>
    3e06:	84 e0       	ldi	r24, 0x04	; 4
    3e08:	c8 16       	cp	r12, r24
    3e0a:	19 f0       	breq	.+6      	; 0x3e12 <vdmSumGC+0x2e>
    3e0c:	85 e0       	ldi	r24, 0x05	; 5
    3e0e:	c8 16       	cp	r12, r24
    3e10:	51 f4       	brne	.+20     	; 0x3e26 <vdmSumGC+0x42>
	ASSERT_CHECK_NUMERIC(b);
    3e12:	d8 80       	ld	r13, Y
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	8d 15       	cp	r24, r13
    3e18:	40 f4       	brcc	.+16     	; 0x3e2a <vdmSumGC+0x46>
    3e1a:	84 e0       	ldi	r24, 0x04	; 4
    3e1c:	d8 16       	cp	r13, r24
    3e1e:	29 f0       	breq	.+10     	; 0x3e2a <vdmSumGC+0x46>
    3e20:	85 e0       	ldi	r24, 0x05	; 5
    3e22:	d8 16       	cp	r13, r24
    3e24:	11 f0       	breq	.+4      	; 0x3e2a <vdmSumGC+0x46>
    3e26:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    3e2a:	cf 01       	movw	r24, r30
    3e2c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3e30:	7b 01       	movw	r14, r22
    3e32:	8c 01       	movw	r16, r24
	double bv=toDouble(b);
    3e34:	ce 01       	movw	r24, r28
    3e36:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3e3a:	9b 01       	movw	r18, r22
    3e3c:	ac 01       	movw	r20, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    3e3e:	82 e0       	ldi	r24, 0x02	; 2
    3e40:	8c 15       	cp	r24, r12
    3e42:	70 f0       	brcs	.+28     	; 0x3e60 <vdmSumGC+0x7c>
    3e44:	8d 15       	cp	r24, r13
    3e46:	60 f0       	brcs	.+24     	; 0x3e60 <vdmSumGC+0x7c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av + bv), from);
    3e48:	c8 01       	movw	r24, r16
    3e4a:	b7 01       	movw	r22, r14
    3e4c:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    3e50:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	b5 01       	movw	r22, r10
    3e5a:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
    3e5e:	07 c0       	rjmp	.+14     	; 0x3e6e <vdmSumGC+0x8a>

		return newRealGC(av+bv, from);
    3e60:	c8 01       	movw	r24, r16
    3e62:	b7 01       	movw	r22, r14
    3e64:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    3e68:	a5 01       	movw	r20, r10
    3e6a:	0e 94 80 22 	call	0x4500	; 0x4500 <newRealGC>
}
    3e6e:	df 91       	pop	r29
    3e70:	cf 91       	pop	r28
    3e72:	1f 91       	pop	r17
    3e74:	0f 91       	pop	r16
    3e76:	ff 90       	pop	r15
    3e78:	ef 90       	pop	r14
    3e7a:	df 90       	pop	r13
    3e7c:	cf 90       	pop	r12
    3e7e:	bf 90       	pop	r11
    3e80:	af 90       	pop	r10
    3e82:	08 95       	ret

00003e84 <vdmFloorGC>:

	return newInt(floor(arg->value.doubleVal));
}

TVP vdmFloorGC(TVP arg, TVP *from)
{
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	fc 01       	movw	r30, r24
    3e8a:	eb 01       	movw	r28, r22
	ASSERT_CHECK_REAL(arg);
    3e8c:	80 81       	ld	r24, Z
    3e8e:	84 30       	cpi	r24, 0x04	; 4
    3e90:	11 f0       	breq	.+4      	; 0x3e96 <vdmFloorGC+0x12>
    3e92:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	/* TODO: Why do we return a Real, when floor is int in VDM?  */
	return newIntGC(floor(arg->value.doubleVal), from);
    3e96:	63 81       	ldd	r22, Z+3	; 0x03
    3e98:	74 81       	ldd	r23, Z+4	; 0x04
    3e9a:	85 81       	ldd	r24, Z+5	; 0x05
    3e9c:	96 81       	ldd	r25, Z+6	; 0x06
    3e9e:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <floor>
    3ea2:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	be 01       	movw	r22, r28
    3eac:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
}
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	08 95       	ret

00003eb6 <vdmAbsGC>:
		return NULL;
	}
}

TVP vdmAbsGC(TVP arg, TVP *from)
{
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	ab 01       	movw	r20, r22
	ASSERT_CHECK_NUMERIC(arg);
    3eba:	80 81       	ld	r24, Z
    3ebc:	83 30       	cpi	r24, 0x03	; 3
    3ebe:	30 f0       	brcs	.+12     	; 0x3ecc <vdmAbsGC+0x16>
    3ec0:	84 30       	cpi	r24, 0x04	; 4
    3ec2:	79 f0       	breq	.+30     	; 0x3ee2 <vdmAbsGC+0x2c>
    3ec4:	85 30       	cpi	r24, 0x05	; 5
    3ec6:	b1 f0       	breq	.+44     	; 0x3ef4 <vdmAbsGC+0x3e>
    3ec8:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	switch(arg->type)
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newIntGC(abs(arg->value.intVal), from);
    3ecc:	83 81       	ldd	r24, Z+3	; 0x03
    3ece:	94 81       	ldd	r25, Z+4	; 0x04
    3ed0:	97 ff       	sbrs	r25, 7
    3ed2:	03 c0       	rjmp	.+6      	; 0x3eda <vdmAbsGC+0x24>
    3ed4:	90 95       	com	r25
    3ed6:	81 95       	neg	r24
    3ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eda:	ba 01       	movw	r22, r20
    3edc:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
    3ee0:	07 c0       	rjmp	.+14     	; 0x3ef0 <vdmAbsGC+0x3a>
	case VDM_REAL:
		return newRealGC(fabs(arg->value.doubleVal), from);
    3ee2:	63 81       	ldd	r22, Z+3	; 0x03
    3ee4:	74 81       	ldd	r23, Z+4	; 0x04
    3ee6:	85 81       	ldd	r24, Z+5	; 0x05
    3ee8:	96 81       	ldd	r25, Z+6	; 0x06
    3eea:	9f 77       	andi	r25, 0x7F	; 127
    3eec:	0e 94 80 22 	call	0x4500	; 0x4500 <newRealGC>
    3ef0:	9c 01       	movw	r18, r24
    3ef2:	02 c0       	rjmp	.+4      	; 0x3ef8 <vdmAbsGC+0x42>
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
	}
}
    3ef8:	c9 01       	movw	r24, r18
    3efa:	08 95       	ret

00003efc <vdmMinusGC>:
		return NULL;
	}
}

TVP vdmMinusGC(TVP arg, TVP *from)
{
    3efc:	fc 01       	movw	r30, r24
    3efe:	ab 01       	movw	r20, r22
	ASSERT_CHECK_NUMERIC(arg);
    3f00:	80 81       	ld	r24, Z
    3f02:	83 30       	cpi	r24, 0x03	; 3
    3f04:	30 f0       	brcs	.+12     	; 0x3f12 <vdmMinusGC+0x16>
    3f06:	84 30       	cpi	r24, 0x04	; 4
    3f08:	61 f0       	breq	.+24     	; 0x3f22 <vdmMinusGC+0x26>
    3f0a:	85 30       	cpi	r24, 0x05	; 5
    3f0c:	99 f0       	breq	.+38     	; 0x3f34 <vdmMinusGC+0x38>
    3f0e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	switch(arg->type)
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newIntGC(-arg->value.intVal, from);
    3f12:	83 81       	ldd	r24, Z+3	; 0x03
    3f14:	94 81       	ldd	r25, Z+4	; 0x04
    3f16:	90 95       	com	r25
    3f18:	81 95       	neg	r24
    3f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1c:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
    3f20:	07 c0       	rjmp	.+14     	; 0x3f30 <vdmMinusGC+0x34>
	case VDM_REAL:
		return newRealGC(-arg->value.doubleVal, from);
    3f22:	63 81       	ldd	r22, Z+3	; 0x03
    3f24:	74 81       	ldd	r23, Z+4	; 0x04
    3f26:	85 81       	ldd	r24, Z+5	; 0x05
    3f28:	96 81       	ldd	r25, Z+6	; 0x06
    3f2a:	90 58       	subi	r25, 0x80	; 128
    3f2c:	0e 94 80 22 	call	0x4500	; 0x4500 <newRealGC>
    3f30:	9c 01       	movw	r18, r24
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <vdmMinusGC+0x3c>
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
	}
}
    3f38:	c9 01       	movw	r24, r18
    3f3a:	08 95       	ret

00003f3c <vdmMod>:

	return newIntGC(av-bv*divi(av,bv), from);
}

TVP vdmMod(TVP a,TVP b)
{
    3f3c:	af 92       	push	r10
    3f3e:	bf 92       	push	r11
    3f40:	cf 92       	push	r12
    3f42:	df 92       	push	r13
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	fc 01       	movw	r30, r24
    3f52:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    3f54:	90 81       	ld	r25, Z
    3f56:	93 30       	cpi	r25, 0x03	; 3
    3f58:	20 f0       	brcs	.+8      	; 0x3f62 <vdmMod+0x26>
    3f5a:	94 30       	cpi	r25, 0x04	; 4
    3f5c:	11 f0       	breq	.+4      	; 0x3f62 <vdmMod+0x26>
    3f5e:	95 30       	cpi	r25, 0x05	; 5
    3f60:	59 f4       	brne	.+22     	; 0x3f78 <vdmMod+0x3c>
	ASSERT_CHECK_NUMERIC(b);
    3f62:	88 81       	ld	r24, Y
    3f64:	83 30       	cpi	r24, 0x03	; 3
    3f66:	20 f0       	brcs	.+8      	; 0x3f70 <vdmMod+0x34>
    3f68:	84 30       	cpi	r24, 0x04	; 4
    3f6a:	11 f0       	breq	.+4      	; 0x3f70 <vdmMod+0x34>
    3f6c:	85 30       	cpi	r24, 0x05	; 5
    3f6e:	21 f4       	brne	.+8      	; 0x3f78 <vdmMod+0x3c>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L575  */
	ASSERT_CHECK_INT(a);
    3f70:	99 23       	and	r25, r25
    3f72:	11 f4       	brne	.+4      	; 0x3f78 <vdmMod+0x3c>
	ASSERT_CHECK_INT(b);
    3f74:	88 23       	and	r24, r24
    3f76:	11 f0       	breq	.+4      	; 0x3f7c <vdmMod+0x40>
    3f78:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double lv =(int) toDouble(a);
    3f7c:	cf 01       	movw	r24, r30
    3f7e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3f82:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3f86:	88 27       	eor	r24, r24
    3f88:	77 fd       	sbrc	r23, 7
    3f8a:	80 95       	com	r24
    3f8c:	98 2f       	mov	r25, r24
    3f8e:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3f92:	5b 01       	movw	r10, r22
    3f94:	6c 01       	movw	r12, r24
	double rv = (int)toDouble(b);
    3f96:	ce 01       	movw	r24, r28
    3f98:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    3f9c:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3fa0:	88 27       	eor	r24, r24
    3fa2:	77 fd       	sbrc	r23, 7
    3fa4:	80 95       	com	r24
    3fa6:	98 2f       	mov	r25, r24
    3fa8:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3fac:	7b 01       	movw	r14, r22
    3fae:	8c 01       	movw	r16, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(lv-rv*(long) floor(lv/rv)));
    3fb0:	c6 01       	movw	r24, r12
    3fb2:	b5 01       	movw	r22, r10
    3fb4:	a8 01       	movw	r20, r16
    3fb6:	97 01       	movw	r18, r14
    3fb8:	0e 94 14 3a 	call	0x7428	; 0x7428 <__divsf3>
    3fbc:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <floor>
    3fc0:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3fc4:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    3fc8:	9b 01       	movw	r18, r22
    3fca:	ac 01       	movw	r20, r24
    3fcc:	c8 01       	movw	r24, r16
    3fce:	b7 01       	movw	r22, r14
    3fd0:	0e 94 b6 3b 	call	0x776c	; 0x776c <__mulsf3>
    3fd4:	9b 01       	movw	r18, r22
    3fd6:	ac 01       	movw	r20, r24
    3fd8:	c6 01       	movw	r24, r12
    3fda:	b5 01       	movw	r22, r10
    3fdc:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    3fe0:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>

	return newReal(lv-rv*(long) floor(lv/rv));
}
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	ef 90       	pop	r14
    3ff8:	df 90       	pop	r13
    3ffa:	cf 90       	pop	r12
    3ffc:	bf 90       	pop	r11
    3ffe:	af 90       	pop	r10
    4000:	08 95       	ret

00004002 <vdmRem>:

	return newIntGC(divi(av,bv), from);
}

TVP vdmRem(TVP a,TVP b)
{
    4002:	6f 92       	push	r6
    4004:	7f 92       	push	r7
    4006:	8f 92       	push	r8
    4008:	9f 92       	push	r9
    400a:	af 92       	push	r10
    400c:	bf 92       	push	r11
    400e:	cf 92       	push	r12
    4010:	df 92       	push	r13
    4012:	ef 92       	push	r14
    4014:	ff 92       	push	r15
    4016:	0f 93       	push	r16
    4018:	1f 93       	push	r17
    401a:	cf 93       	push	r28
    401c:	df 93       	push	r29
    401e:	fc 01       	movw	r30, r24
    4020:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    4022:	90 81       	ld	r25, Z
    4024:	93 30       	cpi	r25, 0x03	; 3
    4026:	20 f0       	brcs	.+8      	; 0x4030 <vdmRem+0x2e>
    4028:	94 30       	cpi	r25, 0x04	; 4
    402a:	11 f0       	breq	.+4      	; 0x4030 <vdmRem+0x2e>
    402c:	95 30       	cpi	r25, 0x05	; 5
    402e:	59 f4       	brne	.+22     	; 0x4046 <vdmRem+0x44>
	ASSERT_CHECK_NUMERIC(b);
    4030:	88 81       	ld	r24, Y
    4032:	83 30       	cpi	r24, 0x03	; 3
    4034:	20 f0       	brcs	.+8      	; 0x403e <vdmRem+0x3c>
    4036:	84 30       	cpi	r24, 0x04	; 4
    4038:	11 f0       	breq	.+4      	; 0x403e <vdmRem+0x3c>
    403a:	85 30       	cpi	r24, 0x05	; 5
    403c:	21 f4       	brne	.+8      	; 0x4046 <vdmRem+0x44>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L628  */
	ASSERT_CHECK_INT(a);
    403e:	99 23       	and	r25, r25
    4040:	11 f4       	brne	.+4      	; 0x4046 <vdmRem+0x44>
	ASSERT_CHECK_INT(b);
    4042:	88 23       	and	r24, r24
    4044:	11 f0       	breq	.+4      	; 0x404a <vdmRem+0x48>
    4046:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	int av = toDouble(a);
    404a:	cf 01       	movw	r24, r30
    404c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    4050:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    4054:	5b 01       	movw	r10, r22
    4056:	6c 01       	movw	r12, r24
	int bv = toDouble(b);
    4058:	ce 01       	movw	r24, r28
    405a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    405e:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    4062:	7b 01       	movw	r14, r22
    4064:	8c 01       	movw	r16, r24

	return newInt(av-bv*divi(av,bv));
    4066:	b5 01       	movw	r22, r10
    4068:	88 27       	eor	r24, r24
    406a:	77 fd       	sbrc	r23, 7
    406c:	80 95       	com	r24
    406e:	98 2f       	mov	r25, r24
    4070:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    4074:	3b 01       	movw	r6, r22
    4076:	4c 01       	movw	r8, r24
    4078:	00 27       	eor	r16, r16
    407a:	f7 fc       	sbrc	r15, 7
    407c:	00 95       	com	r16
    407e:	10 2f       	mov	r17, r16
    4080:	c8 01       	movw	r24, r16
    4082:	b7 01       	movw	r22, r14
    4084:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    4088:	9b 01       	movw	r18, r22
    408a:	ac 01       	movw	r20, r24
    408c:	c4 01       	movw	r24, r8
    408e:	b3 01       	movw	r22, r6
    4090:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <divi>
    4094:	a8 01       	movw	r20, r16
    4096:	97 01       	movw	r18, r14
    4098:	0e 94 70 3d 	call	0x7ae0	; 0x7ae0 <__mulsi3>
    409c:	a6 1a       	sub	r10, r22
    409e:	b7 0a       	sbc	r11, r23
    40a0:	c5 01       	movw	r24, r10
    40a2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
}
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	1f 91       	pop	r17
    40ac:	0f 91       	pop	r16
    40ae:	ff 90       	pop	r15
    40b0:	ef 90       	pop	r14
    40b2:	df 90       	pop	r13
    40b4:	cf 90       	pop	r12
    40b6:	bf 90       	pop	r11
    40b8:	af 90       	pop	r10
    40ba:	9f 90       	pop	r9
    40bc:	8f 90       	pop	r8
    40be:	7f 90       	pop	r7
    40c0:	6f 90       	pop	r6
    40c2:	08 95       	ret

000040c4 <vdmDiv>:
		return (long) floor(fabs(-lv / rv));
	}
}

TVP vdmDiv(TVP a, TVP b)
{
    40c4:	af 92       	push	r10
    40c6:	bf 92       	push	r11
    40c8:	cf 92       	push	r12
    40ca:	df 92       	push	r13
    40cc:	ef 92       	push	r14
    40ce:	ff 92       	push	r15
    40d0:	0f 93       	push	r16
    40d2:	1f 93       	push	r17
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	fc 01       	movw	r30, r24
    40da:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    40dc:	90 81       	ld	r25, Z
    40de:	93 30       	cpi	r25, 0x03	; 3
    40e0:	20 f0       	brcs	.+8      	; 0x40ea <vdmDiv+0x26>
    40e2:	94 30       	cpi	r25, 0x04	; 4
    40e4:	11 f0       	breq	.+4      	; 0x40ea <vdmDiv+0x26>
    40e6:	95 30       	cpi	r25, 0x05	; 5
    40e8:	59 f4       	brne	.+22     	; 0x4100 <vdmDiv+0x3c>
	ASSERT_CHECK_NUMERIC(b);
    40ea:	88 81       	ld	r24, Y
    40ec:	83 30       	cpi	r24, 0x03	; 3
    40ee:	20 f0       	brcs	.+8      	; 0x40f8 <vdmDiv+0x34>
    40f0:	84 30       	cpi	r24, 0x04	; 4
    40f2:	11 f0       	breq	.+4      	; 0x40f8 <vdmDiv+0x34>
    40f4:	85 30       	cpi	r24, 0x05	; 5
    40f6:	21 f4       	brne	.+8      	; 0x4100 <vdmDiv+0x3c>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L444  */

	ASSERT_CHECK_INT(a);
    40f8:	99 23       	and	r25, r25
    40fa:	11 f4       	brne	.+4      	; 0x4100 <vdmDiv+0x3c>
	ASSERT_CHECK_INT(b);
    40fc:	88 23       	and	r24, r24
    40fe:	11 f0       	breq	.+4      	; 0x4104 <vdmDiv+0x40>
    4100:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	int av = toDouble(a);
    4104:	cf 01       	movw	r24, r30
    4106:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    410a:	7b 01       	movw	r14, r22
    410c:	8c 01       	movw	r16, r24
	int bv = toDouble(b);
    410e:	ce 01       	movw	r24, r28
    4110:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    4114:	5b 01       	movw	r10, r22
    4116:	6c 01       	movw	r12, r24

	return newInt(divi(av,bv));
    4118:	c8 01       	movw	r24, r16
    411a:	b7 01       	movw	r22, r14
    411c:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    4120:	88 27       	eor	r24, r24
    4122:	77 fd       	sbrc	r23, 7
    4124:	80 95       	com	r24
    4126:	98 2f       	mov	r25, r24
    4128:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    412c:	7b 01       	movw	r14, r22
    412e:	8c 01       	movw	r16, r24
    4130:	c6 01       	movw	r24, r12
    4132:	b5 01       	movw	r22, r10
    4134:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    4138:	88 27       	eor	r24, r24
    413a:	77 fd       	sbrc	r23, 7
    413c:	80 95       	com	r24
    413e:	98 2f       	mov	r25, r24
    4140:	0e 94 af 3a 	call	0x755e	; 0x755e <__floatsisf>
    4144:	9b 01       	movw	r18, r22
    4146:	ac 01       	movw	r20, r24
    4148:	c8 01       	movw	r24, r16
    414a:	b7 01       	movw	r22, r14
    414c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <divi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
}
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	1f 91       	pop	r17
    415e:	0f 91       	pop	r16
    4160:	ff 90       	pop	r15
    4162:	ef 90       	pop	r14
    4164:	df 90       	pop	r13
    4166:	cf 90       	pop	r12
    4168:	bf 90       	pop	r11
    416a:	af 90       	pop	r10
    416c:	08 95       	ret

0000416e <vdmProduct>:

		return newRealGC(av - bv, from);
}

TVP vdmProduct(TVP a,TVP b)
{
    416e:	cf 92       	push	r12
    4170:	df 92       	push	r13
    4172:	ef 92       	push	r14
    4174:	ff 92       	push	r15
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	fc 01       	movw	r30, r24
    4180:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    4182:	c0 80       	ld	r12, Z
    4184:	82 e0       	ldi	r24, 0x02	; 2
    4186:	8c 15       	cp	r24, r12
    4188:	30 f4       	brcc	.+12     	; 0x4196 <vdmProduct+0x28>
    418a:	84 e0       	ldi	r24, 0x04	; 4
    418c:	c8 16       	cp	r12, r24
    418e:	19 f0       	breq	.+6      	; 0x4196 <vdmProduct+0x28>
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	c8 16       	cp	r12, r24
    4194:	51 f4       	brne	.+20     	; 0x41aa <vdmProduct+0x3c>
	ASSERT_CHECK_NUMERIC(b);
    4196:	d8 80       	ld	r13, Y
    4198:	82 e0       	ldi	r24, 0x02	; 2
    419a:	8d 15       	cp	r24, r13
    419c:	40 f4       	brcc	.+16     	; 0x41ae <vdmProduct+0x40>
    419e:	84 e0       	ldi	r24, 0x04	; 4
    41a0:	d8 16       	cp	r13, r24
    41a2:	29 f0       	breq	.+10     	; 0x41ae <vdmProduct+0x40>
    41a4:	85 e0       	ldi	r24, 0x05	; 5
    41a6:	d8 16       	cp	r13, r24
    41a8:	11 f0       	breq	.+4      	; 0x41ae <vdmProduct+0x40>
    41aa:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    41ae:	cf 01       	movw	r24, r30
    41b0:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    41b4:	7b 01       	movw	r14, r22
    41b6:	8c 01       	movw	r16, r24
	double bv=toDouble(b);
    41b8:	ce 01       	movw	r24, r28
    41ba:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    41be:	9b 01       	movw	r18, r22
    41c0:	ac 01       	movw	r20, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    41c2:	82 e0       	ldi	r24, 0x02	; 2
    41c4:	8c 15       	cp	r24, r12
    41c6:	68 f0       	brcs	.+26     	; 0x41e2 <vdmProduct+0x74>
    41c8:	8d 15       	cp	r24, r13
    41ca:	58 f0       	brcs	.+22     	; 0x41e2 <vdmProduct+0x74>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av * bv));
    41cc:	c8 01       	movw	r24, r16
    41ce:	b7 01       	movw	r22, r14
    41d0:	0e 94 b6 3b 	call	0x776c	; 0x776c <__mulsf3>
    41d4:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    41e0:	06 c0       	rjmp	.+12     	; 0x41ee <vdmProduct+0x80>

	return newReal(av * bv);
    41e2:	c8 01       	movw	r24, r16
    41e4:	b7 01       	movw	r22, r14
    41e6:	0e 94 b6 3b 	call	0x776c	; 0x776c <__mulsf3>
    41ea:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
}
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	ff 90       	pop	r15
    41f8:	ef 90       	pop	r14
    41fa:	df 90       	pop	r13
    41fc:	cf 90       	pop	r12
    41fe:	08 95       	ret

00004200 <vdmDifference>:

		return newRealGC(av+bv, from);
}

TVP vdmDifference(TVP a,TVP b)
{
    4200:	cf 92       	push	r12
    4202:	df 92       	push	r13
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	fc 01       	movw	r30, r24
    4212:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    4214:	c0 80       	ld	r12, Z
    4216:	82 e0       	ldi	r24, 0x02	; 2
    4218:	8c 15       	cp	r24, r12
    421a:	30 f4       	brcc	.+12     	; 0x4228 <vdmDifference+0x28>
    421c:	84 e0       	ldi	r24, 0x04	; 4
    421e:	c8 16       	cp	r12, r24
    4220:	19 f0       	breq	.+6      	; 0x4228 <vdmDifference+0x28>
    4222:	85 e0       	ldi	r24, 0x05	; 5
    4224:	c8 16       	cp	r12, r24
    4226:	51 f4       	brne	.+20     	; 0x423c <vdmDifference+0x3c>
	ASSERT_CHECK_NUMERIC(b);
    4228:	d8 80       	ld	r13, Y
    422a:	82 e0       	ldi	r24, 0x02	; 2
    422c:	8d 15       	cp	r24, r13
    422e:	40 f4       	brcc	.+16     	; 0x4240 <vdmDifference+0x40>
    4230:	84 e0       	ldi	r24, 0x04	; 4
    4232:	d8 16       	cp	r13, r24
    4234:	29 f0       	breq	.+10     	; 0x4240 <vdmDifference+0x40>
    4236:	85 e0       	ldi	r24, 0x05	; 5
    4238:	d8 16       	cp	r13, r24
    423a:	11 f0       	breq	.+4      	; 0x4240 <vdmDifference+0x40>
    423c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    4240:	cf 01       	movw	r24, r30
    4242:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    4246:	7b 01       	movw	r14, r22
    4248:	8c 01       	movw	r16, r24
	double bv=toDouble(b);
    424a:	ce 01       	movw	r24, r28
    424c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    4250:	9b 01       	movw	r18, r22
    4252:	ac 01       	movw	r20, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    4254:	82 e0       	ldi	r24, 0x02	; 2
    4256:	8c 15       	cp	r24, r12
    4258:	68 f0       	brcs	.+26     	; 0x4274 <vdmDifference+0x74>
    425a:	8d 15       	cp	r24, r13
    425c:	58 f0       	brcs	.+22     	; 0x4274 <vdmDifference+0x74>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av - bv));
    425e:	c8 01       	movw	r24, r16
    4260:	b7 01       	movw	r22, r14
    4262:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    4266:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    4272:	06 c0       	rjmp	.+12     	; 0x4280 <vdmDifference+0x80>

	return newReal(av - bv);
    4274:	c8 01       	movw	r24, r16
    4276:	b7 01       	movw	r22, r14
    4278:	0e 94 ab 39 	call	0x7356	; 0x7356 <__subsf3>
    427c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
}
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	1f 91       	pop	r17
    4286:	0f 91       	pop	r16
    4288:	ff 90       	pop	r15
    428a:	ef 90       	pop	r14
    428c:	df 90       	pop	r13
    428e:	cf 90       	pop	r12
    4290:	08 95       	ret

00004292 <vdmSum>:
	/* TODO: Why do we return a Real, when floor is int in VDM?  */
	return newIntGC(floor(arg->value.doubleVal), from);
}

TVP vdmSum(TVP a,TVP b)
{
    4292:	cf 92       	push	r12
    4294:	df 92       	push	r13
    4296:	ef 92       	push	r14
    4298:	ff 92       	push	r15
    429a:	0f 93       	push	r16
    429c:	1f 93       	push	r17
    429e:	cf 93       	push	r28
    42a0:	df 93       	push	r29
    42a2:	fc 01       	movw	r30, r24
    42a4:	eb 01       	movw	r28, r22
	ASSERT_CHECK_NUMERIC(a);
    42a6:	c0 80       	ld	r12, Z
    42a8:	82 e0       	ldi	r24, 0x02	; 2
    42aa:	8c 15       	cp	r24, r12
    42ac:	30 f4       	brcc	.+12     	; 0x42ba <vdmSum+0x28>
    42ae:	84 e0       	ldi	r24, 0x04	; 4
    42b0:	c8 16       	cp	r12, r24
    42b2:	19 f0       	breq	.+6      	; 0x42ba <vdmSum+0x28>
    42b4:	85 e0       	ldi	r24, 0x05	; 5
    42b6:	c8 16       	cp	r12, r24
    42b8:	51 f4       	brne	.+20     	; 0x42ce <vdmSum+0x3c>
	ASSERT_CHECK_NUMERIC(b);
    42ba:	d8 80       	ld	r13, Y
    42bc:	82 e0       	ldi	r24, 0x02	; 2
    42be:	8d 15       	cp	r24, r13
    42c0:	40 f4       	brcc	.+16     	; 0x42d2 <vdmSum+0x40>
    42c2:	84 e0       	ldi	r24, 0x04	; 4
    42c4:	d8 16       	cp	r13, r24
    42c6:	29 f0       	breq	.+10     	; 0x42d2 <vdmSum+0x40>
    42c8:	85 e0       	ldi	r24, 0x05	; 5
    42ca:	d8 16       	cp	r13, r24
    42cc:	11 f0       	breq	.+4      	; 0x42d2 <vdmSum+0x40>
    42ce:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	double av = toDouble(a);
    42d2:	cf 01       	movw	r24, r30
    42d4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    42d8:	7b 01       	movw	r14, r22
    42da:	8c 01       	movw	r16, r24
	double bv = toDouble(b);
    42dc:	ce 01       	movw	r24, r28
    42de:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <toDouble>
    42e2:	9b 01       	movw	r18, r22
    42e4:	ac 01       	movw	r20, r24

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	8c 15       	cp	r24, r12
    42ea:	68 f0       	brcs	.+26     	; 0x4306 <vdmSum+0x74>
    42ec:	8d 15       	cp	r24, r13
    42ee:	58 f0       	brcs	.+22     	; 0x4306 <vdmSum+0x74>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av + bv));
    42f0:	c8 01       	movw	r24, r16
    42f2:	b7 01       	movw	r22, r14
    42f4:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    42f8:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    42fc:	dc 01       	movw	r26, r24
    42fe:	cb 01       	movw	r24, r22
    4300:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    4304:	06 c0       	rjmp	.+12     	; 0x4312 <vdmSum+0x80>

	return newReal(av+bv);
    4306:	c8 01       	movw	r24, r16
    4308:	b7 01       	movw	r22, r14
    430a:	0e 94 ac 39 	call	0x7358	; 0x7358 <__addsf3>
    430e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
}
    4312:	df 91       	pop	r29
    4314:	cf 91       	pop	r28
    4316:	1f 91       	pop	r17
    4318:	0f 91       	pop	r16
    431a:	ff 90       	pop	r15
    431c:	ef 90       	pop	r14
    431e:	df 90       	pop	r13
    4320:	cf 90       	pop	r12
    4322:	08 95       	ret

00004324 <vdmFloor>:
		return NULL;
	}
}

TVP vdmFloor(TVP arg)
{
    4324:	fc 01       	movw	r30, r24
	ASSERT_CHECK_REAL(arg);
    4326:	80 81       	ld	r24, Z
    4328:	84 30       	cpi	r24, 0x04	; 4
    432a:	11 f0       	breq	.+4      	; 0x4330 <vdmFloor+0xc>
    432c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	return newInt(floor(arg->value.doubleVal));
    4330:	63 81       	ldd	r22, Z+3	; 0x03
    4332:	74 81       	ldd	r23, Z+4	; 0x04
    4334:	85 81       	ldd	r24, Z+5	; 0x05
    4336:	96 81       	ldd	r25, Z+6	; 0x06
    4338:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <floor>
    433c:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <__fixsfsi>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
}
    4348:	08 95       	ret

0000434a <vdmAbs>:
		return NULL;
	}
}

TVP vdmAbs(TVP arg)
{
    434a:	fc 01       	movw	r30, r24
	ASSERT_CHECK_NUMERIC(arg);
    434c:	80 81       	ld	r24, Z
    434e:	83 30       	cpi	r24, 0x03	; 3
    4350:	30 f0       	brcs	.+12     	; 0x435e <vdmAbs+0x14>
    4352:	84 30       	cpi	r24, 0x04	; 4
    4354:	71 f0       	breq	.+28     	; 0x4372 <vdmAbs+0x28>
    4356:	85 30       	cpi	r24, 0x05	; 5
    4358:	a9 f0       	breq	.+42     	; 0x4384 <vdmAbs+0x3a>
    435a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	switch(arg->type)
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newInt(abs(arg->value.intVal));
    435e:	83 81       	ldd	r24, Z+3	; 0x03
    4360:	94 81       	ldd	r25, Z+4	; 0x04
    4362:	97 ff       	sbrs	r25, 7
    4364:	03 c0       	rjmp	.+6      	; 0x436c <vdmAbs+0x22>
    4366:	90 95       	com	r25
    4368:	81 95       	neg	r24
    436a:	9f 4f       	sbci	r25, 0xFF	; 255
    436c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    4370:	07 c0       	rjmp	.+14     	; 0x4380 <vdmAbs+0x36>
	case VDM_REAL:
		return newReal(fabs(arg->value.doubleVal));
    4372:	63 81       	ldd	r22, Z+3	; 0x03
    4374:	74 81       	ldd	r23, Z+4	; 0x04
    4376:	85 81       	ldd	r24, Z+5	; 0x05
    4378:	96 81       	ldd	r25, Z+6	; 0x06
    437a:	9f 77       	andi	r25, 0x7F	; 127
    437c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    4380:	9c 01       	movw	r18, r24
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <vdmAbs+0x3e>
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
	}
}
    4388:	c9 01       	movw	r24, r18
    438a:	08 95       	ret

0000438c <vdmMinus>:
	ASSERT_CHECK_BOOL(a);
	return a->value.boolVal;
}

TVP vdmMinus(TVP arg)
{
    438c:	fc 01       	movw	r30, r24
	ASSERT_CHECK_NUMERIC(arg);
    438e:	80 81       	ld	r24, Z
    4390:	83 30       	cpi	r24, 0x03	; 3
    4392:	30 f0       	brcs	.+12     	; 0x43a0 <vdmMinus+0x14>
    4394:	84 30       	cpi	r24, 0x04	; 4
    4396:	61 f0       	breq	.+24     	; 0x43b0 <vdmMinus+0x24>
    4398:	85 30       	cpi	r24, 0x05	; 5
    439a:	99 f0       	breq	.+38     	; 0x43c2 <vdmMinus+0x36>
    439c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	switch(arg->type)
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newInt(-arg->value.intVal);
    43a0:	83 81       	ldd	r24, Z+3	; 0x03
    43a2:	94 81       	ldd	r25, Z+4	; 0x04
    43a4:	90 95       	com	r25
    43a6:	81 95       	neg	r24
    43a8:	9f 4f       	sbci	r25, 0xFF	; 255
    43aa:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    43ae:	07 c0       	rjmp	.+14     	; 0x43be <vdmMinus+0x32>
	case VDM_REAL:
		return newReal(-arg->value.doubleVal);
    43b0:	63 81       	ldd	r22, Z+3	; 0x03
    43b2:	74 81       	ldd	r23, Z+4	; 0x04
    43b4:	85 81       	ldd	r24, Z+5	; 0x05
    43b6:	96 81       	ldd	r25, Z+6	; 0x06
    43b8:	90 58       	subi	r25, 0x80	; 128
    43ba:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <newReal>
    43be:	9c 01       	movw	r18, r24
    43c0:	02 c0       	rjmp	.+4      	; 0x43c6 <vdmMinus+0x3a>
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
	}
}
    43c6:	c9 01       	movw	r24, r18
    43c8:	08 95       	ret

000043ca <newClassValue>:


#include "VdmClass.h"

struct ClassType* newClassValue(int id, unsigned int* refs, freeVdmClassFunction freeClass, void* value)
{
    43ca:	cf 92       	push	r12
    43cc:	df 92       	push	r13
    43ce:	ef 92       	push	r14
    43d0:	ff 92       	push	r15
    43d2:	0f 93       	push	r16
    43d4:	1f 93       	push	r17
    43d6:	cf 93       	push	r28
    43d8:	df 93       	push	r29
    43da:	7c 01       	movw	r14, r24
    43dc:	eb 01       	movw	r28, r22
    43de:	6a 01       	movw	r12, r20
    43e0:	89 01       	movw	r16, r18
	struct ClassType* ptr = (struct ClassType*) malloc(sizeof(struct ClassType));
    43e2:	88 e0       	ldi	r24, 0x08	; 8
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    43ea:	29 2f       	mov	r18, r25
    43ec:	e8 2f       	mov	r30, r24
    43ee:	f9 2f       	mov	r31, r25
	assert(ptr != NULL);
    43f0:	30 97       	sbiw	r30, 0x00	; 0
    43f2:	11 f4       	brne	.+4      	; 0x43f8 <newClassValue+0x2e>
    43f4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	ptr->classId = id;
    43f8:	f3 82       	std	Z+3, r15	; 0x03
    43fa:	e2 82       	std	Z+2, r14	; 0x02
	ptr->value = value;
    43fc:	11 83       	std	Z+1, r17	; 0x01
    43fe:	00 83       	st	Z, r16
	ptr->freeClass = freeClass;
    4400:	d7 82       	std	Z+7, r13	; 0x07
    4402:	c6 82       	std	Z+6, r12	; 0x06
	ptr->refs = refs;
    4404:	d5 83       	std	Z+5, r29	; 0x05
    4406:	c4 83       	std	Z+4, r28	; 0x04
	(*refs)++;
    4408:	88 81       	ld	r24, Y
    440a:	99 81       	ldd	r25, Y+1	; 0x01
    440c:	01 96       	adiw	r24, 0x01	; 1
    440e:	99 83       	std	Y+1, r25	; 0x01
    4410:	88 83       	st	Y, r24
	return ptr;
}
    4412:	8e 2f       	mov	r24, r30
    4414:	92 2f       	mov	r25, r18
    4416:	df 91       	pop	r29
    4418:	cf 91       	pop	r28
    441a:	1f 91       	pop	r17
    441c:	0f 91       	pop	r16
    441e:	ff 90       	pop	r15
    4420:	ef 90       	pop	r14
    4422:	df 90       	pop	r13
    4424:	cf 90       	pop	r12
    4426:	08 95       	ret

00004428 <add_allocd_mem_node>:

	allocd_mem_tail = allocd_mem_head;
}

void add_allocd_mem_node(TVP l, TVP *from)
{
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	fc 01       	movw	r30, r24
	allocd_mem_tail->loc = l;
    442e:	00 91 16 03 	lds	r16, 0x0316
    4432:	10 91 17 03 	lds	r17, 0x0317
    4436:	d8 01       	movw	r26, r16
    4438:	8d 93       	st	X+, r24
    443a:	9c 93       	st	X, r25
	allocd_mem_tail->loc->ref_from = from;
    443c:	72 83       	std	Z+2, r23	; 0x02
    443e:	61 83       	std	Z+1, r22	; 0x01

	allocd_mem_tail->next = (struct alloc_list_node*)malloc(sizeof(struct alloc_list_node));
    4440:	84 e0       	ldi	r24, 0x04	; 4
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    4448:	f8 01       	movw	r30, r16
    444a:	82 83       	std	Z+2, r24	; 0x02
    444c:	93 83       	std	Z+3, r25	; 0x03
	assert(allocd_mem_tail->next != NULL);
    444e:	e0 91 16 03 	lds	r30, 0x0316
    4452:	f0 91 17 03 	lds	r31, 0x0317
    4456:	02 80       	ldd	r0, Z+2	; 0x02
    4458:	f3 81       	ldd	r31, Z+3	; 0x03
    445a:	e0 2d       	mov	r30, r0
    445c:	30 97       	sbiw	r30, 0x00	; 0
    445e:	11 f4       	brne	.+4      	; 0x4464 <add_allocd_mem_node+0x3c>
    4460:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	allocd_mem_tail = allocd_mem_tail->next;
    4464:	f0 93 17 03 	sts	0x0317, r31
    4468:	e0 93 16 03 	sts	0x0316, r30

	allocd_mem_tail->loc = NULL;
    446c:	11 82       	std	Z+1, r1	; 0x01
    446e:	10 82       	st	Z, r1
	allocd_mem_tail->next = NULL;
    4470:	13 82       	std	Z+3, r1	; 0x03
    4472:	12 82       	std	Z+2, r1	; 0x02
}
    4474:	1f 91       	pop	r17
    4476:	0f 91       	pop	r16
    4478:	08 95       	ret

0000447a <newTypeValueGC>:
}

/* #ifdef WITH_GC  */
/* ===============  Garbage collected versions  ==============  */
TVP newTypeValueGC(vdmtype type, TypedValueType value, TVP *ref_from)
{
    447a:	af 92       	push	r10
    447c:	bf 92       	push	r11
    447e:	cf 92       	push	r12
    4480:	df 92       	push	r13
    4482:	ef 92       	push	r14
    4484:	ff 92       	push	r15
    4486:	0f 93       	push	r16
    4488:	1f 93       	push	r17
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
    448e:	a8 2e       	mov	r10, r24
    4490:	7a 01       	movw	r14, r20
    4492:	8b 01       	movw	r16, r22
    4494:	69 01       	movw	r12, r18
	TVP ptr = (TVP) malloc(sizeof(struct TypedValue));
    4496:	87 e0       	ldi	r24, 0x07	; 7
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    449e:	b9 2e       	mov	r11, r25
    44a0:	c8 2f       	mov	r28, r24
    44a2:	d9 2f       	mov	r29, r25
	assert(ptr != NULL);
    44a4:	20 97       	sbiw	r28, 0x00	; 0
    44a6:	11 f4       	brne	.+4      	; 0x44ac <newTypeValueGC+0x32>
    44a8:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	ptr->type = type;
    44ac:	a8 82       	st	Y, r10
	ptr->value = value;
    44ae:	eb 82       	std	Y+3, r14	; 0x03
    44b0:	fc 82       	std	Y+4, r15	; 0x04
    44b2:	0d 83       	std	Y+5, r16	; 0x05
    44b4:	1e 83       	std	Y+6, r17	; 0x06
	add_allocd_mem_node(ptr, ref_from);
    44b6:	ce 01       	movw	r24, r28
    44b8:	b6 01       	movw	r22, r12
    44ba:	0e 94 14 22 	call	0x4428	; 0x4428 <add_allocd_mem_node>

	return ptr;
}
    44be:	8c 2f       	mov	r24, r28
    44c0:	9b 2d       	mov	r25, r11
    44c2:	df 91       	pop	r29
    44c4:	cf 91       	pop	r28
    44c6:	1f 91       	pop	r17
    44c8:	0f 91       	pop	r16
    44ca:	ff 90       	pop	r15
    44cc:	ef 90       	pop	r14
    44ce:	df 90       	pop	r13
    44d0:	cf 90       	pop	r12
    44d2:	bf 90       	pop	r11
    44d4:	af 90       	pop	r10
    44d6:	08 95       	ret

000044d8 <newQuoteGC>:
	)
			{ .charVal = x }, from);
}

TVP newQuoteGC(unsigned int x, TVP *from)
{
    44d8:	9b 01       	movw	r18, r22
	return newTypeValueGC(VDM_QUOTE, (TypedValueType
	)
			{ .quoteVal = x }, from);
    44da:	40 e0       	ldi	r20, 0x00	; 0
    44dc:	50 e0       	ldi	r21, 0x00	; 0
    44de:	60 e0       	ldi	r22, 0x00	; 0
    44e0:	70 e0       	ldi	r23, 0x00	; 0
    44e2:	ac 01       	movw	r20, r24
			{ .charVal = x }, from);
}

TVP newQuoteGC(unsigned int x, TVP *from)
{
	return newTypeValueGC(VDM_QUOTE, (TypedValueType
    44e4:	89 e0       	ldi	r24, 0x09	; 9
    44e6:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .quoteVal = x }, from);
}
    44ea:	08 95       	ret

000044ec <newCharGC>:
	)
			{ .doubleVal = x }, from);
}

TVP newCharGC(char x, TVP *from)
{
    44ec:	9b 01       	movw	r18, r22
	return newTypeValueGC(VDM_CHAR, (TypedValueType
	)
			{ .charVal = x }, from);
    44ee:	40 e0       	ldi	r20, 0x00	; 0
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	60 e0       	ldi	r22, 0x00	; 0
    44f4:	70 e0       	ldi	r23, 0x00	; 0
    44f6:	48 2f       	mov	r20, r24
			{ .doubleVal = x }, from);
}

TVP newCharGC(char x, TVP *from)
{
	return newTypeValueGC(VDM_CHAR, (TypedValueType
    44f8:	86 e0       	ldi	r24, 0x06	; 6
    44fa:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .charVal = x }, from);
}
    44fe:	08 95       	ret

00004500 <newRealGC>:
	)
			{ .boolVal = x }, from);
}

TVP newRealGC(double x, TVP *from)
{
    4500:	ef 92       	push	r14
    4502:	ff 92       	push	r15
    4504:	0f 93       	push	r16
    4506:	1f 93       	push	r17
    4508:	7b 01       	movw	r14, r22
    450a:	8c 01       	movw	r16, r24
    450c:	9a 01       	movw	r18, r20
	return newTypeValueGC(VDM_REAL, (TypedValueType
    450e:	84 e0       	ldi	r24, 0x04	; 4
    4510:	b8 01       	movw	r22, r16
    4512:	a7 01       	movw	r20, r14
    4514:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .doubleVal = x }, from);
}
    4518:	1f 91       	pop	r17
    451a:	0f 91       	pop	r16
    451c:	ff 90       	pop	r15
    451e:	ef 90       	pop	r14
    4520:	08 95       	ret

00004522 <newBoolGC>:
	)
			{ .intVal = x }, from);
}

TVP newBoolGC(bool x, TVP *from)
{
    4522:	9b 01       	movw	r18, r22
	return newTypeValueGC(VDM_BOOL, (TypedValueType
	)
			{ .boolVal = x }, from);
    4524:	40 e0       	ldi	r20, 0x00	; 0
    4526:	50 e0       	ldi	r21, 0x00	; 0
    4528:	60 e0       	ldi	r22, 0x00	; 0
    452a:	70 e0       	ldi	r23, 0x00	; 0
    452c:	48 2f       	mov	r20, r24
			{ .intVal = x }, from);
}

TVP newBoolGC(bool x, TVP *from)
{
	return newTypeValueGC(VDM_BOOL, (TypedValueType
    452e:	83 e0       	ldi	r24, 0x03	; 3
    4530:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .boolVal = x }, from);
}
    4534:	08 95       	ret

00004536 <newIntGC>:
	return ptr;
}

/* / Basic  */
TVP newIntGC(int x, TVP *from)
{
    4536:	9b 01       	movw	r18, r22
	return newTypeValueGC(VDM_INT, (TypedValueType
	)
			{ .intVal = x }, from);
    4538:	40 e0       	ldi	r20, 0x00	; 0
    453a:	50 e0       	ldi	r21, 0x00	; 0
    453c:	60 e0       	ldi	r22, 0x00	; 0
    453e:	70 e0       	ldi	r23, 0x00	; 0
    4540:	ac 01       	movw	r20, r24
}

/* / Basic  */
TVP newIntGC(int x, TVP *from)
{
	return newTypeValueGC(VDM_INT, (TypedValueType
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .intVal = x }, from);
}
    4548:	08 95       	ret

0000454a <vdm_gc_init>:
struct alloc_list_node *allocd_mem_head = NULL;
struct alloc_list_node *allocd_mem_tail = NULL;

void vdm_gc_init()
{
	allocd_mem_head = (struct alloc_list_node*)malloc(sizeof (struct alloc_list_node));
    454a:	84 e0       	ldi	r24, 0x04	; 4
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    4552:	fc 01       	movw	r30, r24
    4554:	90 93 15 03 	sts	0x0315, r25
    4558:	80 93 14 03 	sts	0x0314, r24
	assert(allocd_mem_head != NULL);
    455c:	00 97       	sbiw	r24, 0x00	; 0
    455e:	11 f4       	brne	.+4      	; 0x4564 <vdm_gc_init+0x1a>
    4560:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	allocd_mem_head->loc = NULL;
    4564:	11 82       	std	Z+1, r1	; 0x01
    4566:	10 82       	st	Z, r1
	allocd_mem_head->next = NULL;
    4568:	13 82       	std	Z+3, r1	; 0x03
    456a:	12 82       	std	Z+2, r1	; 0x02

	allocd_mem_tail = allocd_mem_head;
    456c:	90 93 17 03 	sts	0x0317, r25
    4570:	80 93 16 03 	sts	0x0316, r24
}
    4574:	08 95       	ret

00004576 <vdmCloneGC>:
	)
			{ .intVal = hashVal }, from);
}

TVP vdmCloneGC(TVP x, TVP *from)
{
    4576:	af 92       	push	r10
    4578:	bf 92       	push	r11
    457a:	cf 92       	push	r12
    457c:	df 92       	push	r13
    457e:	ef 92       	push	r14
    4580:	ff 92       	push	r15
    4582:	0f 93       	push	r16
    4584:	1f 93       	push	r17
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	fc 01       	movw	r30, r24
    458c:	9b 01       	movw	r18, r22
	TVP tmp;

	if(x == NULL)
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	19 f4       	brne	.+6      	; 0x4598 <vdmCloneGC+0x22>
    4592:	aa 24       	eor	r10, r10
    4594:	bb 24       	eor	r11, r11
    4596:	b1 c0       	rjmp	.+354    	; 0x46fa <vdmCloneGC+0x184>
	{
		return NULL;
	}

	tmp = newTypeValueGC(x->type, x->value, from);
    4598:	43 81       	ldd	r20, Z+3	; 0x03
    459a:	54 81       	ldd	r21, Z+4	; 0x04
    459c:	65 81       	ldd	r22, Z+5	; 0x05
    459e:	76 81       	ldd	r23, Z+6	; 0x06
    45a0:	80 81       	ld	r24, Z
    45a2:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
    45a6:	5c 01       	movw	r10, r24

	/* FIXME vdmClone any pointers  */
	switch (tmp->type)
    45a8:	dc 01       	movw	r26, r24
    45aa:	8c 91       	ld	r24, X
    45ac:	88 30       	cpi	r24, 0x08	; 8
    45ae:	39 f0       	breq	.+14     	; 0x45be <vdmCloneGC+0x48>
    45b0:	8b 30       	cpi	r24, 0x0B	; 11
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <vdmCloneGC+0x40>
    45b4:	90 c0       	rjmp	.+288    	; 0x46d6 <vdmCloneGC+0x160>
    45b6:	87 30       	cpi	r24, 0x07	; 7
    45b8:	09 f0       	breq	.+2      	; 0x45bc <vdmCloneGC+0x46>
    45ba:	9f c0       	rjmp	.+318    	; 0x46fa <vdmCloneGC+0x184>
    45bc:	43 c0       	rjmp	.+134    	; 0x4644 <vdmCloneGC+0xce>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    45be:	f5 01       	movw	r30, r10
    45c0:	03 81       	ldd	r16, Z+3	; 0x03
    45c2:	d4 80       	ldd	r13, Z+4	; 0x04

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    45c4:	84 e0       	ldi	r24, 0x04	; 4
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    45cc:	ec 01       	movw	r28, r24
		assert(ptr != NULL);
    45ce:	00 97       	sbiw	r24, 0x00	; 0
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <vdmCloneGC+0x5e>
    45d2:	5d c0       	rjmp	.+186    	; 0x468e <vdmCloneGC+0x118>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    45d4:	e0 2e       	mov	r14, r16
    45d6:	fd 2c       	mov	r15, r13

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
		assert(ptr != NULL);

		/* copy (size)  */
		*ptr = *cptr;
    45d8:	f7 01       	movw	r30, r14
    45da:	80 81       	ld	r24, Z
    45dc:	91 81       	ldd	r25, Z+1	; 0x01
    45de:	a2 81       	ldd	r26, Z+2	; 0x02
    45e0:	b3 81       	ldd	r27, Z+3	; 0x03
    45e2:	88 83       	st	Y, r24
    45e4:	99 83       	std	Y+1, r25	; 0x01
    45e6:	aa 83       	std	Y+2, r26	; 0x02
    45e8:	bb 83       	std	Y+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    45ea:	8a 81       	ldd	r24, Y+2	; 0x02
    45ec:	9b 81       	ldd	r25, Y+3	; 0x03
    45ee:	88 0f       	add	r24, r24
    45f0:	99 1f       	adc	r25, r25
    45f2:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    45f6:	99 83       	std	Y+1, r25	; 0x01
    45f8:	88 83       	st	Y, r24
		assert(ptr->value != NULL);
    45fa:	00 97       	sbiw	r24, 0x00	; 0
    45fc:	09 f4       	brne	.+2      	; 0x4600 <vdmCloneGC+0x8a>
    45fe:	47 c0       	rjmp	.+142    	; 0x468e <vdmCloneGC+0x118>
    4600:	cc 24       	eor	r12, r12
    4602:	dd 24       	eor	r13, r13
    4604:	16 c0       	rjmp	.+44     	; 0x4632 <vdmCloneGC+0xbc>
    4606:	c6 01       	movw	r24, r12
    4608:	88 0f       	add	r24, r24
    460a:	99 1f       	adc	r25, r25

		for (i = 0; i < cptr->size; i++)
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    460c:	08 81       	ld	r16, Y
    460e:	19 81       	ldd	r17, Y+1	; 0x01
    4610:	08 0f       	add	r16, r24
    4612:	19 1f       	adc	r17, r25
    4614:	d7 01       	movw	r26, r14
    4616:	ed 91       	ld	r30, X+
    4618:	fc 91       	ld	r31, X
    461a:	e8 0f       	add	r30, r24
    461c:	f9 1f       	adc	r31, r25
    461e:	80 81       	ld	r24, Z
    4620:	91 81       	ldd	r25, Z+1	; 0x01
    4622:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    4626:	f8 01       	movw	r30, r16
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    462c:	08 94       	sec
    462e:	c1 1c       	adc	r12, r1
    4630:	d1 1c       	adc	r13, r1
    4632:	d7 01       	movw	r26, r14
    4634:	12 96       	adiw	r26, 0x02	; 2
    4636:	8d 91       	ld	r24, X+
    4638:	9c 91       	ld	r25, X
    463a:	13 97       	sbiw	r26, 0x03	; 3
    463c:	c8 16       	cp	r12, r24
    463e:	d9 06       	cpc	r13, r25
    4640:	14 f3       	brlt	.-60     	; 0x4606 <vdmCloneGC+0x90>
    4642:	45 c0       	rjmp	.+138    	; 0x46ce <vdmCloneGC+0x158>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    4644:	d5 01       	movw	r26, r10
    4646:	13 96       	adiw	r26, 0x03	; 3
    4648:	0c 91       	ld	r16, X
    464a:	13 97       	sbiw	r26, 0x03	; 3
    464c:	14 96       	adiw	r26, 0x04	; 4
    464e:	dc 90       	ld	r13, X

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4650:	84 e0       	ldi	r24, 0x04	; 4
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    4658:	ec 01       	movw	r28, r24
		assert(ptr != NULL);
    465a:	00 97       	sbiw	r24, 0x00	; 0
    465c:	c1 f0       	breq	.+48     	; 0x468e <vdmCloneGC+0x118>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    465e:	e0 2e       	mov	r14, r16
    4660:	fd 2c       	mov	r15, r13

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
		assert(ptr != NULL);

		/* copy (size)  */
		*ptr = *cptr;
    4662:	f7 01       	movw	r30, r14
    4664:	80 81       	ld	r24, Z
    4666:	91 81       	ldd	r25, Z+1	; 0x01
    4668:	a2 81       	ldd	r26, Z+2	; 0x02
    466a:	b3 81       	ldd	r27, Z+3	; 0x03
    466c:	88 83       	st	Y, r24
    466e:	99 83       	std	Y+1, r25	; 0x01
    4670:	aa 83       	std	Y+2, r26	; 0x02
    4672:	bb 83       	std	Y+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    4674:	8a 81       	ldd	r24, Y+2	; 0x02
    4676:	9b 81       	ldd	r25, Y+3	; 0x03
    4678:	88 0f       	add	r24, r24
    467a:	99 1f       	adc	r25, r25
    467c:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    4680:	99 83       	std	Y+1, r25	; 0x01
    4682:	88 83       	st	Y, r24
		assert(ptr->value != NULL);
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	19 f0       	breq	.+6      	; 0x468e <vdmCloneGC+0x118>
    4688:	cc 24       	eor	r12, r12
    468a:	dd 24       	eor	r13, r13
    468c:	18 c0       	rjmp	.+48     	; 0x46be <vdmCloneGC+0x148>
    468e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
    4692:	c6 01       	movw	r24, r12
    4694:	88 0f       	add	r24, r24
    4696:	99 1f       	adc	r25, r25

		for (i = 0; i < cptr->size; i++)
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    4698:	08 81       	ld	r16, Y
    469a:	19 81       	ldd	r17, Y+1	; 0x01
    469c:	08 0f       	add	r16, r24
    469e:	19 1f       	adc	r17, r25
    46a0:	d7 01       	movw	r26, r14
    46a2:	ed 91       	ld	r30, X+
    46a4:	fc 91       	ld	r31, X
    46a6:	e8 0f       	add	r30, r24
    46a8:	f9 1f       	adc	r31, r25
    46aa:	80 81       	ld	r24, Z
    46ac:	91 81       	ldd	r25, Z+1	; 0x01
    46ae:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    46b2:	f8 01       	movw	r30, r16
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    46b8:	08 94       	sec
    46ba:	c1 1c       	adc	r12, r1
    46bc:	d1 1c       	adc	r13, r1
    46be:	d7 01       	movw	r26, r14
    46c0:	12 96       	adiw	r26, 0x02	; 2
    46c2:	8d 91       	ld	r24, X+
    46c4:	9c 91       	ld	r25, X
    46c6:	13 97       	sbiw	r26, 0x03	; 3
    46c8:	c8 16       	cp	r12, r24
    46ca:	d9 06       	cpc	r13, r25
    46cc:	14 f3       	brlt	.-60     	; 0x4692 <vdmCloneGC+0x11c>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    46ce:	f5 01       	movw	r30, r10
    46d0:	d4 83       	std	Z+4, r29	; 0x04
    46d2:	c3 83       	std	Z+3, r28	; 0x03
    46d4:	12 c0       	rjmp	.+36     	; 0x46fa <vdmCloneGC+0x184>
	}
#endif
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) tmp->value.ptr;
    46d6:	d5 01       	movw	r26, r10
    46d8:	13 96       	adiw	r26, 0x03	; 3
    46da:	ed 91       	ld	r30, X+
    46dc:	fc 91       	ld	r31, X
    46de:	14 97       	sbiw	r26, 0x04	; 4

		/* improve using memcpy  */
		tmp->value.ptr = newClassValue(classTptr->classId, classTptr->refs, classTptr->freeClass, classTptr->value);
    46e0:	64 81       	ldd	r22, Z+4	; 0x04
    46e2:	75 81       	ldd	r23, Z+5	; 0x05
    46e4:	46 81       	ldd	r20, Z+6	; 0x06
    46e6:	57 81       	ldd	r21, Z+7	; 0x07
    46e8:	20 81       	ld	r18, Z
    46ea:	31 81       	ldd	r19, Z+1	; 0x01
    46ec:	82 81       	ldd	r24, Z+2	; 0x02
    46ee:	93 81       	ldd	r25, Z+3	; 0x03
    46f0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <newClassValue>
    46f4:	f5 01       	movw	r30, r10
    46f6:	94 83       	std	Z+4, r25	; 0x04
    46f8:	83 83       	std	Z+3, r24	; 0x03
		break;
	}
	}

	return tmp;
}
    46fa:	c5 01       	movw	r24, r10
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	1f 91       	pop	r17
    4702:	0f 91       	pop	r16
    4704:	ff 90       	pop	r15
    4706:	ef 90       	pop	r14
    4708:	df 90       	pop	r13
    470a:	cf 90       	pop	r12
    470c:	bf 90       	pop	r11
    470e:	af 90       	pop	r10
    4710:	08 95       	ret

00004712 <newTokenGC>:
	)
			{ .quoteVal = x }, from);
}

TVP newTokenGC(TVP x, TVP *from)
{
    4712:	0f 93       	push	r16
    4714:	1f 93       	push	r17
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	8b 01       	movw	r16, r22
	char *str = unpackString(x);
    471c:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <unpackString>
    4720:	ac 01       	movw	r20, r24
    4722:	fc 01       	movw	r30, r24
    4724:	c5 e0       	ldi	r28, 0x05	; 5
    4726:	d5 e1       	ldi	r29, 0x15	; 21
    4728:	09 c0       	rjmp	.+18     	; 0x473c <newTokenGC+0x2a>
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;
    472a:	ce 01       	movw	r24, r28
    472c:	88 0f       	add	r24, r24
    472e:	99 1f       	adc	r25, r25
    4730:	88 0f       	add	r24, r24
    4732:	99 1f       	adc	r25, r25
    4734:	82 0f       	add	r24, r18
    4736:	93 1f       	adc	r25, r19
    4738:	c8 0f       	add	r28, r24
    473a:	d9 1f       	adc	r29, r25
	char *str = unpackString(x);
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
    473c:	81 91       	ld	r24, Z+
    473e:	28 2f       	mov	r18, r24
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	21 15       	cp	r18, r1
    4744:	31 05       	cpc	r19, r1
    4746:	89 f7       	brne	.-30     	; 0x472a <newTokenGC+0x18>
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);
    4748:	ca 01       	movw	r24, r20
    474a:	0e 94 4f 38 	call	0x709e	; 0x709e <free>

	return newTypeValueGC(VDM_TOKEN, (TypedValueType
	)
			{ .intVal = hashVal }, from);
    474e:	40 e0       	ldi	r20, 0x00	; 0
    4750:	50 e0       	ldi	r21, 0x00	; 0
    4752:	60 e0       	ldi	r22, 0x00	; 0
    4754:	70 e0       	ldi	r23, 0x00	; 0
    4756:	ae 01       	movw	r20, r28
	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);

	return newTypeValueGC(VDM_TOKEN, (TypedValueType
    4758:	8a e0       	ldi	r24, 0x0A	; 10
    475a:	98 01       	movw	r18, r16
    475c:	0e 94 3d 22 	call	0x447a	; 0x447a <newTypeValueGC>
	)
			{ .intVal = hashVal }, from);
}
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	1f 91       	pop	r17
    4766:	0f 91       	pop	r16
    4768:	08 95       	ret

0000476a <remove_allocd_mem_node>:
}



void remove_allocd_mem_node(struct alloc_list_node *node)
{
    476a:	cf 93       	push	r28
    476c:	df 93       	push	r29
    476e:	dc 01       	movw	r26, r24
	struct alloc_list_node *tmp, *prev;

	tmp = allocd_mem_head;
    4770:	20 91 14 03 	lds	r18, 0x0314
    4774:	30 91 15 03 	lds	r19, 0x0315
	prev = NULL;

	if(tmp == NULL)
    4778:	21 15       	cp	r18, r1
    477a:	31 05       	cpc	r19, r1
    477c:	61 f1       	breq	.+88     	; 0x47d6 <remove_allocd_mem_node+0x6c>
	{
		/* GC list empty.  */
		return;
    477e:	f9 01       	movw	r30, r18
    4780:	c0 e0       	ldi	r28, 0x00	; 0
    4782:	d0 e0       	ldi	r29, 0x00	; 0
    4784:	06 c0       	rjmp	.+12     	; 0x4792 <remove_allocd_mem_node+0x28>
	}

	while(tmp != node)
	{
		prev = tmp;
		tmp = tmp->next;
    4786:	82 81       	ldd	r24, Z+2	; 0x02
    4788:	93 81       	ldd	r25, Z+3	; 0x03
    478a:	ef 01       	movw	r28, r30

		if(tmp == NULL)
    478c:	00 97       	sbiw	r24, 0x00	; 0
    478e:	19 f1       	breq	.+70     	; 0x47d6 <remove_allocd_mem_node+0x6c>
		{
			return;
    4790:	fc 01       	movw	r30, r24
	{
		/* GC list empty.  */
		return;
	}

	while(tmp != node)
    4792:	ea 17       	cp	r30, r26
    4794:	fb 07       	cpc	r31, r27
    4796:	b9 f7       	brne	.-18     	; 0x4786 <remove_allocd_mem_node+0x1c>
		{
			return;
		}
	}

	if(tmp == allocd_mem_head)
    4798:	a2 17       	cp	r26, r18
    479a:	b3 07       	cpc	r27, r19
    479c:	a9 f4       	brne	.+42     	; 0x47c8 <remove_allocd_mem_node+0x5e>
	{
		allocd_mem_head = allocd_mem_head->next;
    479e:	12 96       	adiw	r26, 0x02	; 2
    47a0:	2d 91       	ld	r18, X+
    47a2:	3c 91       	ld	r19, X
    47a4:	13 97       	sbiw	r26, 0x03	; 3
    47a6:	30 93 15 03 	sts	0x0315, r19
    47aa:	20 93 14 03 	sts	0x0314, r18
		if(allocd_mem_tail == tmp)
    47ae:	80 91 16 03 	lds	r24, 0x0316
    47b2:	90 91 17 03 	lds	r25, 0x0317
    47b6:	8a 17       	cp	r24, r26
    47b8:	9b 07       	cpc	r25, r27
    47ba:	21 f4       	brne	.+8      	; 0x47c4 <remove_allocd_mem_node+0x5a>
		{
			allocd_mem_tail = allocd_mem_head;
    47bc:	30 93 17 03 	sts	0x0317, r19
    47c0:	20 93 16 03 	sts	0x0316, r18
		}

		free(node);
    47c4:	cd 01       	movw	r24, r26
    47c6:	05 c0       	rjmp	.+10     	; 0x47d2 <remove_allocd_mem_node+0x68>
		return;
	}
	else
	{
		prev->next = tmp->next;
    47c8:	82 81       	ldd	r24, Z+2	; 0x02
    47ca:	93 81       	ldd	r25, Z+3	; 0x03
    47cc:	9b 83       	std	Y+3, r25	; 0x03
    47ce:	8a 83       	std	Y+2, r24	; 0x02
		free(tmp);
    47d0:	cf 01       	movw	r24, r30
    47d2:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
		return;
	}
	return;
}
    47d6:	df 91       	pop	r29
    47d8:	cf 91       	pop	r28
    47da:	08 95       	ret

000047dc <remove_allocd_mem_node_by_location>:
}



void remove_allocd_mem_node_by_location(TVP loc)
{
    47dc:	9c 01       	movw	r18, r24
	struct alloc_list_node *tmp, *prev;

	prev = NULL;
	tmp = allocd_mem_head;
    47de:	40 91 14 03 	lds	r20, 0x0314
    47e2:	50 91 15 03 	lds	r21, 0x0315

	if(tmp == NULL)
    47e6:	41 15       	cp	r20, r1
    47e8:	51 05       	cpc	r21, r1
    47ea:	81 f1       	breq	.+96     	; 0x484c <remove_allocd_mem_node_by_location+0x70>
	{
		/* GC list empty.  */
		return;
    47ec:	fa 01       	movw	r30, r20
    47ee:	a0 e0       	ldi	r26, 0x00	; 0
    47f0:	b0 e0       	ldi	r27, 0x00	; 0
    47f2:	06 c0       	rjmp	.+12     	; 0x4800 <remove_allocd_mem_node_by_location+0x24>
	}

	while(tmp->loc != loc)
	{
		prev = tmp;
		tmp = tmp->next;
    47f4:	82 81       	ldd	r24, Z+2	; 0x02
    47f6:	93 81       	ldd	r25, Z+3	; 0x03
    47f8:	df 01       	movw	r26, r30

		if(tmp == NULL)
    47fa:	00 97       	sbiw	r24, 0x00	; 0
    47fc:	39 f1       	breq	.+78     	; 0x484c <remove_allocd_mem_node_by_location+0x70>
		{
			break;
    47fe:	fc 01       	movw	r30, r24
	{
		/* GC list empty.  */
		return;
	}

	while(tmp->loc != loc)
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	82 17       	cp	r24, r18
    4806:	93 07       	cpc	r25, r19
    4808:	a9 f7       	brne	.-22     	; 0x47f4 <remove_allocd_mem_node_by_location+0x18>
		{
			break;
		}
	}

	if(tmp == NULL)
    480a:	30 97       	sbiw	r30, 0x00	; 0
    480c:	f9 f0       	breq	.+62     	; 0x484c <remove_allocd_mem_node_by_location+0x70>
    480e:	22 81       	ldd	r18, Z+2	; 0x02
    4810:	33 81       	ldd	r19, Z+3	; 0x03
	{
		/* This memory is not under GC control.  */
		return;
	}
	else if(tmp == allocd_mem_head)
    4812:	e4 17       	cp	r30, r20
    4814:	f5 07       	cpc	r31, r21
    4816:	99 f4       	brne	.+38     	; 0x483e <remove_allocd_mem_node_by_location+0x62>
	{
		allocd_mem_head = allocd_mem_head->next;
    4818:	30 93 15 03 	sts	0x0315, r19
    481c:	20 93 14 03 	sts	0x0314, r18
		if(allocd_mem_tail == tmp)
    4820:	80 91 16 03 	lds	r24, 0x0316
    4824:	90 91 17 03 	lds	r25, 0x0317
    4828:	8e 17       	cp	r24, r30
    482a:	9f 07       	cpc	r25, r31
    482c:	21 f4       	brne	.+8      	; 0x4836 <remove_allocd_mem_node_by_location+0x5a>
		{
			allocd_mem_tail = allocd_mem_head;
    482e:	30 93 17 03 	sts	0x0317, r19
    4832:	20 93 16 03 	sts	0x0316, r18
		}

		free(tmp);
    4836:	cf 01       	movw	r24, r30
    4838:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    483c:	08 95       	ret
		return;
	}
	else
	{
		prev->next = tmp->next;
    483e:	13 96       	adiw	r26, 0x03	; 3
    4840:	3c 93       	st	X, r19
    4842:	2e 93       	st	-X, r18
    4844:	12 97       	sbiw	r26, 0x02	; 2
		free(tmp);
    4846:	cf 01       	movw	r24, r30
    4848:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    484c:	08 95       	ret

0000484e <vdm_gc>:
	allocd_mem_head = NULL;
	allocd_mem_tail = NULL;
}

void vdm_gc()
{
    484e:	af 92       	push	r10
    4850:	bf 92       	push	r11
    4852:	cf 92       	push	r12
    4854:	df 92       	push	r13
    4856:	ef 92       	push	r14
    4858:	ff 92       	push	r15
    485a:	0f 93       	push	r16
    485c:	1f 93       	push	r17
    485e:	df 93       	push	r29
    4860:	cf 93       	push	r28
    4862:	00 d0       	rcall	.+0      	; 0x4864 <vdm_gc+0x16>
    4864:	00 d0       	rcall	.+0      	; 0x4866 <vdm_gc+0x18>
    4866:	00 d0       	rcall	.+0      	; 0x4868 <vdm_gc+0x1a>
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62
	struct alloc_list_node *current, *tmp;
	TVP tmp_loc;

	current = allocd_mem_head;
    486c:	e0 91 14 03 	lds	r30, 0x0314
    4870:	f0 91 15 03 	lds	r31, 0x0315
    4874:	fa 83       	std	Y+2, r31	; 0x02
    4876:	e9 83       	std	Y+1, r30	; 0x01

	/* Nothing to do if no memory currently allocated.  */
	if(current->loc == NULL && current->next == NULL)
    4878:	80 81       	ld	r24, Z
    487a:	91 81       	ldd	r25, Z+1	; 0x01
    487c:	89 2b       	or	r24, r25
    487e:	09 f0       	breq	.+2      	; 0x4882 <vdm_gc+0x34>
    4880:	44 c0       	rjmp	.+136    	; 0x490a <vdm_gc+0xbc>
    4882:	82 81       	ldd	r24, Z+2	; 0x02
    4884:	93 81       	ldd	r25, Z+3	; 0x03
    4886:	89 2b       	or	r24, r25
    4888:	09 f0       	breq	.+2      	; 0x488c <vdm_gc+0x3e>
    488a:	3f c0       	rjmp	.+126    	; 0x490a <vdm_gc+0xbc>
    488c:	59 c0       	rjmp	.+178    	; 0x4940 <vdm_gc+0xf2>
		return;

	while(current != allocd_mem_tail)
	{
		tmp = current->next;
    488e:	f9 01       	movw	r30, r18
    4890:	82 81       	ldd	r24, Z+2	; 0x02
    4892:	93 81       	ldd	r25, Z+3	; 0x03
    4894:	9c 83       	std	Y+4, r25	; 0x04
    4896:	8b 83       	std	Y+3, r24	; 0x03
		tmp_loc = current->loc;
    4898:	a0 81       	ld	r26, Z
    489a:	b1 81       	ldd	r27, Z+1	; 0x01
    489c:	be 83       	std	Y+6, r27	; 0x06
    489e:	ad 83       	std	Y+5, r26	; 0x05

		/* No information was passed about where the reference was assigned.  */
		/* This is the case when the value is created in-place or when freed using vdmFree().  */
		if(current->loc->ref_from == NULL)
    48a0:	11 96       	adiw	r26, 0x01	; 1
    48a2:	ed 91       	ld	r30, X+
    48a4:	fc 91       	ld	r31, X
    48a6:	12 97       	sbiw	r26, 0x02	; 2
    48a8:	30 97       	sbiw	r30, 0x00	; 0
    48aa:	41 f4       	brne	.+16     	; 0x48bc <vdm_gc+0x6e>
		{
			remove_allocd_mem_node(current);
    48ac:	c9 01       	movw	r24, r18
    48ae:	0e 94 b5 23 	call	0x476a	; 0x476a <remove_allocd_mem_node>
			vdmFree_GCInternal(tmp_loc);
    48b2:	8d 81       	ldd	r24, Y+5	; 0x05
    48b4:	9e 81       	ldd	r25, Y+6	; 0x06
    48b6:	0e 94 a0 12 	call	0x2540	; 0x2540 <vdmFree_GCInternal>
    48ba:	22 c0       	rjmp	.+68     	; 0x4900 <vdm_gc+0xb2>
		}
		else if(*(current->loc->ref_from) != current->loc)
    48bc:	80 81       	ld	r24, Z
    48be:	91 81       	ldd	r25, Z+1	; 0x01
    48c0:	8a 17       	cp	r24, r26
    48c2:	9b 07       	cpc	r25, r27
    48c4:	e9 f0       	breq	.+58     	; 0x4900 <vdm_gc+0xb2>
		{
			/* For compatibility with vdmFree().  */
			/* Check that there is no interference between this call's stack  */
			/* variables and the reference to the memory we are freeing  */
			/* Before NULLing the referencing location for vdmFree.  */
			if(!((((void *)&tmp) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&tmp + 1))) ||
    48c6:	ee 15       	cp	r30, r14
    48c8:	ff 05       	cpc	r31, r15
    48ca:	18 f0       	brcs	.+6      	; 0x48d2 <vdm_gc+0x84>
    48cc:	0e 17       	cp	r16, r30
    48ce:	1f 07       	cpc	r17, r31
    48d0:	70 f4       	brcc	.+28     	; 0x48ee <vdm_gc+0xa0>
    48d2:	ea 15       	cp	r30, r10
    48d4:	fb 05       	cpc	r31, r11
    48d6:	18 f0       	brcs	.+6      	; 0x48de <vdm_gc+0x90>
    48d8:	ee 16       	cp	r14, r30
    48da:	ff 06       	cpc	r15, r31
    48dc:	40 f4       	brcc	.+16     	; 0x48ee <vdm_gc+0xa0>
    48de:	e0 17       	cp	r30, r16
    48e0:	f1 07       	cpc	r31, r17
    48e2:	18 f0       	brcs	.+6      	; 0x48ea <vdm_gc+0x9c>
    48e4:	ce 16       	cp	r12, r30
    48e6:	df 06       	cpc	r13, r31
    48e8:	10 f4       	brcc	.+4      	; 0x48ee <vdm_gc+0xa0>
					(((void *)&current) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&current + 1))) ||
					(((void *)&tmp_loc) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&tmp_loc + 1)))))
				*(current->loc->ref_from) = NULL;
    48ea:	11 82       	std	Z+1, r1	; 0x01
    48ec:	10 82       	st	Z, r1


			vdmFree_GCInternal(current->loc);
    48ee:	f9 01       	movw	r30, r18
    48f0:	80 81       	ld	r24, Z
    48f2:	91 81       	ldd	r25, Z+1	; 0x01
    48f4:	0e 94 a0 12 	call	0x2540	; 0x2540 <vdmFree_GCInternal>
			remove_allocd_mem_node(current);
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	0e 94 b5 23 	call	0x476a	; 0x476a <remove_allocd_mem_node>
		}
		current = tmp;
    4900:	8b 81       	ldd	r24, Y+3	; 0x03
    4902:	9c 81       	ldd	r25, Y+4	; 0x04
    4904:	9a 83       	std	Y+2, r25	; 0x02
    4906:	89 83       	std	Y+1, r24	; 0x01
    4908:	11 c0       	rjmp	.+34     	; 0x492c <vdm_gc+0xde>
		{
			/* For compatibility with vdmFree().  */
			/* Check that there is no interference between this call's stack  */
			/* variables and the reference to the memory we are freeing  */
			/* Before NULLing the referencing location for vdmFree.  */
			if(!((((void *)&tmp) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&tmp + 1))) ||
    490a:	e3 e0       	ldi	r30, 0x03	; 3
    490c:	ee 2e       	mov	r14, r30
    490e:	f1 2c       	mov	r15, r1
    4910:	ec 0e       	add	r14, r28
    4912:	fd 1e       	adc	r15, r29
    4914:	5e 01       	movw	r10, r28
    4916:	08 94       	sec
    4918:	a1 1c       	adc	r10, r1
    491a:	b1 1c       	adc	r11, r1
    491c:	8e 01       	movw	r16, r28
    491e:	0b 5f       	subi	r16, 0xFB	; 251
    4920:	1f 4f       	sbci	r17, 0xFF	; 255
    4922:	77 e0       	ldi	r23, 0x07	; 7
    4924:	c7 2e       	mov	r12, r23
    4926:	d1 2c       	mov	r13, r1
    4928:	cc 0e       	add	r12, r28
    492a:	dd 1e       	adc	r13, r29

	/* Nothing to do if no memory currently allocated.  */
	if(current->loc == NULL && current->next == NULL)
		return;

	while(current != allocd_mem_tail)
    492c:	29 81       	ldd	r18, Y+1	; 0x01
    492e:	3a 81       	ldd	r19, Y+2	; 0x02
    4930:	80 91 16 03 	lds	r24, 0x0316
    4934:	90 91 17 03 	lds	r25, 0x0317
    4938:	28 17       	cp	r18, r24
    493a:	39 07       	cpc	r19, r25
    493c:	09 f0       	breq	.+2      	; 0x4940 <vdm_gc+0xf2>
    493e:	a7 cf       	rjmp	.-178    	; 0x488e <vdm_gc+0x40>
			vdmFree_GCInternal(current->loc);
			remove_allocd_mem_node(current);
		}
		current = tmp;
	}
}
    4940:	26 96       	adiw	r28, 0x06	; 6
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
    494c:	cf 91       	pop	r28
    494e:	df 91       	pop	r29
    4950:	1f 91       	pop	r17
    4952:	0f 91       	pop	r16
    4954:	ff 90       	pop	r15
    4956:	ef 90       	pop	r14
    4958:	df 90       	pop	r13
    495a:	cf 90       	pop	r12
    495c:	bf 90       	pop	r11
    495e:	af 90       	pop	r10
    4960:	08 95       	ret

00004962 <vdm_gc_shutdown>:
	}
	return;
}

void vdm_gc_shutdown()
{
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
	struct alloc_list_node *tmp, *tmp2;

	tmp = allocd_mem_head;
    496a:	c0 91 14 03 	lds	r28, 0x0314
    496e:	d0 91 15 03 	lds	r29, 0x0315
    4972:	0f c0       	rjmp	.+30     	; 0x4992 <vdm_gc_shutdown+0x30>

	while(tmp != allocd_mem_tail)
	{
		tmp2 = tmp->next;
    4974:	1a 81       	ldd	r17, Y+2	; 0x02
    4976:	0b 81       	ldd	r16, Y+3	; 0x03

		if(tmp->loc != NULL)
    4978:	88 81       	ld	r24, Y
    497a:	99 81       	ldd	r25, Y+1	; 0x01
    497c:	00 97       	sbiw	r24, 0x00	; 0
    497e:	29 f0       	breq	.+10     	; 0x498a <vdm_gc_shutdown+0x28>
		{
			vdmFree_GCInternal(tmp->loc);
    4980:	0e 94 a0 12 	call	0x2540	; 0x2540 <vdmFree_GCInternal>
			remove_allocd_mem_node(tmp);
    4984:	ce 01       	movw	r24, r28
    4986:	0e 94 b5 23 	call	0x476a	; 0x476a <remove_allocd_mem_node>
    498a:	81 2f       	mov	r24, r17
    498c:	90 2f       	mov	r25, r16
    498e:	9c 01       	movw	r18, r24
    4990:	e9 01       	movw	r28, r18
{
	struct alloc_list_node *tmp, *tmp2;

	tmp = allocd_mem_head;

	while(tmp != allocd_mem_tail)
    4992:	80 91 16 03 	lds	r24, 0x0316
    4996:	90 91 17 03 	lds	r25, 0x0317
    499a:	c8 17       	cp	r28, r24
    499c:	d9 07       	cpc	r29, r25
    499e:	51 f7       	brne	.-44     	; 0x4974 <vdm_gc_shutdown+0x12>
			vdmFree_GCInternal(tmp->loc);
			remove_allocd_mem_node(tmp);
		}
		tmp = tmp2;
	}
	free(allocd_mem_tail);
    49a0:	ce 01       	movw	r24, r28
    49a2:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	allocd_mem_head = NULL;
    49a6:	10 92 15 03 	sts	0x0315, r1
    49aa:	10 92 14 03 	sts	0x0314, r1
	allocd_mem_tail = NULL;
    49ae:	10 92 17 03 	sts	0x0317, r1
    49b2:	10 92 16 03 	sts	0x0316, r1
}
    49b6:	df 91       	pop	r29
    49b8:	cf 91       	pop	r28
    49ba:	1f 91       	pop	r17
    49bc:	0f 91       	pop	r16
    49be:	08 95       	ret

000049c0 <vdmSeqUpdate>:
	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
	return vdmCloneGC(col->value[index-1], from);
}

void vdmSeqUpdate(TVP seq, TVP indexVal, TVP newValue)
{
    49c0:	0f 93       	push	r16
    49c2:	1f 93       	push	r17
    49c4:	fc 01       	movw	r30, r24
    49c6:	db 01       	movw	r26, r22
	ASSERT_CHECK(seq);
    49c8:	80 81       	ld	r24, Z
    49ca:	88 30       	cpi	r24, 0x08	; 8
    49cc:	99 f4       	brne	.+38     	; 0x49f4 <vdmSeqUpdate+0x34>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    49ce:	8c 91       	ld	r24, X
    49d0:	83 30       	cpi	r24, 0x03	; 3
    49d2:	80 f4       	brcc	.+32     	; 0x49f4 <vdmSeqUpdate+0x34>

	int index = indexVal->value.intVal;
    49d4:	13 96       	adiw	r26, 0x03	; 3
    49d6:	6d 91       	ld	r22, X+
    49d8:	7c 91       	ld	r23, X
    49da:	14 97       	sbiw	r26, 0x04	; 4
	UNWRAP_COLLECTION(col, seq);
    49dc:	23 81       	ldd	r18, Z+3	; 0x03
    49de:	84 81       	ldd	r24, Z+4	; 0x04

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    49e0:	16 16       	cp	r1, r22
    49e2:	17 06       	cpc	r1, r23
    49e4:	3c f4       	brge	.+14     	; 0x49f4 <vdmSeqUpdate+0x34>
{
	ASSERT_CHECK(seq);
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");

	int index = indexVal->value.intVal;
	UNWRAP_COLLECTION(col, seq);
    49e6:	e2 2f       	mov	r30, r18
    49e8:	f8 2f       	mov	r31, r24

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	86 17       	cp	r24, r22
    49f0:	97 07       	cpc	r25, r23
    49f2:	14 f4       	brge	.+4      	; 0x49f8 <vdmSeqUpdate+0x38>
    49f4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	col->value[index - 1] = vdmClone(newValue);
    49f8:	61 50       	subi	r22, 0x01	; 1
    49fa:	70 40       	sbci	r23, 0x00	; 0
    49fc:	66 0f       	add	r22, r22
    49fe:	77 1f       	adc	r23, r23
    4a00:	00 81       	ld	r16, Z
    4a02:	11 81       	ldd	r17, Z+1	; 0x01
    4a04:	06 0f       	add	r16, r22
    4a06:	17 1f       	adc	r17, r23
    4a08:	ca 01       	movw	r24, r20
    4a0a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    4a0e:	f8 01       	movw	r30, r16
    4a10:	91 83       	std	Z+1, r25	; 0x01
    4a12:	80 83       	st	Z, r24
}
    4a14:	1f 91       	pop	r17
    4a16:	0f 91       	pop	r16
    4a18:	08 95       	ret

00004a1a <vdmSeqIndex>:
}

/* TVP seqMod(TVP seq,TVP seq);  */

TVP vdmSeqIndex(TVP seq, TVP indexVal) /* VDM uses 1 based index  */
{
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	db 01       	movw	r26, r22
	ASSERT_CHECK(seq);
    4a1e:	80 81       	ld	r24, Z
    4a20:	88 30       	cpi	r24, 0x08	; 8
    4a22:	99 f4       	brne	.+38     	; 0x4a4a <vdmSeqIndex+0x30>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    4a24:	8c 91       	ld	r24, X
    4a26:	83 30       	cpi	r24, 0x03	; 3
    4a28:	80 f4       	brcc	.+32     	; 0x4a4a <vdmSeqIndex+0x30>

	int index = indexVal->value.intVal;
    4a2a:	13 96       	adiw	r26, 0x03	; 3
    4a2c:	6d 91       	ld	r22, X+
    4a2e:	7c 91       	ld	r23, X
    4a30:	14 97       	sbiw	r26, 0x04	; 4
	UNWRAP_COLLECTION(col,seq);
    4a32:	23 81       	ldd	r18, Z+3	; 0x03
    4a34:	84 81       	ldd	r24, Z+4	; 0x04

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    4a36:	16 16       	cp	r1, r22
    4a38:	17 06       	cpc	r1, r23
    4a3a:	3c f4       	brge	.+14     	; 0x4a4a <vdmSeqIndex+0x30>
{
	ASSERT_CHECK(seq);
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");

	int index = indexVal->value.intVal;
	UNWRAP_COLLECTION(col,seq);
    4a3c:	e2 2f       	mov	r30, r18
    4a3e:	f8 2f       	mov	r31, r24

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    4a40:	82 81       	ldd	r24, Z+2	; 0x02
    4a42:	93 81       	ldd	r25, Z+3	; 0x03
    4a44:	86 17       	cp	r24, r22
    4a46:	97 07       	cpc	r25, r23
    4a48:	14 f4       	brge	.+4      	; 0x4a4e <vdmSeqIndex+0x34>
    4a4a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return vdmClone(col->value[index-1]);
    4a4e:	61 50       	subi	r22, 0x01	; 1
    4a50:	70 40       	sbci	r23, 0x00	; 0
    4a52:	66 0f       	add	r22, r22
    4a54:	77 1f       	adc	r23, r23
    4a56:	01 90       	ld	r0, Z+
    4a58:	f0 81       	ld	r31, Z
    4a5a:	e0 2d       	mov	r30, r0
    4a5c:	e6 0f       	add	r30, r22
    4a5e:	f7 1f       	adc	r31, r23
    4a60:	80 81       	ld	r24, Z
    4a62:	91 81       	ldd	r25, Z+1	; 0x01
    4a64:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
}
    4a68:	08 95       	ret

00004a6a <vdmSeqHd>:
	col->value = (TVP*)realloc(col->value, col->size * sizeof(TVP));
	assert(col->value != NULL);
}

TVP vdmSeqHd(TVP seq)
{
    4a6a:	fc 01       	movw	r30, r24
	ASSERT_CHECK(seq);
    4a6c:	80 81       	ld	r24, Z
    4a6e:	88 30       	cpi	r24, 0x08	; 8
    4a70:	11 f0       	breq	.+4      	; 0x4a76 <vdmSeqHd+0xc>
    4a72:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
	return vdmClone(col->value[0]);
    4a76:	03 80       	ldd	r0, Z+3	; 0x03
    4a78:	f4 81       	ldd	r31, Z+4	; 0x04
    4a7a:	e0 2d       	mov	r30, r0
    4a7c:	01 90       	ld	r0, Z+
    4a7e:	f0 81       	ld	r31, Z
    4a80:	e0 2d       	mov	r30, r0
    4a82:	80 81       	ld	r24, Z
    4a84:	91 81       	ldd	r25, Z+1	; 0x01
    4a86:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
}
    4a8a:	08 95       	ret

00004a8c <vdmSeqIndexGC>:
	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
	return vdmClone(col->value[index-1]);
}

TVP vdmSeqIndexGC(TVP seq, TVP indexVal, TVP *from) /* VDM uses 1 based index  */
{
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	db 01       	movw	r26, r22
	ASSERT_CHECK(seq);
    4a90:	80 81       	ld	r24, Z
    4a92:	88 30       	cpi	r24, 0x08	; 8
    4a94:	99 f4       	brne	.+38     	; 0x4abc <vdmSeqIndexGC+0x30>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    4a96:	8c 91       	ld	r24, X
    4a98:	83 30       	cpi	r24, 0x03	; 3
    4a9a:	80 f4       	brcc	.+32     	; 0x4abc <vdmSeqIndexGC+0x30>

	int index = indexVal->value.intVal;
    4a9c:	13 96       	adiw	r26, 0x03	; 3
    4a9e:	6d 91       	ld	r22, X+
    4aa0:	7c 91       	ld	r23, X
    4aa2:	14 97       	sbiw	r26, 0x04	; 4
	UNWRAP_COLLECTION(col,seq);
    4aa4:	23 81       	ldd	r18, Z+3	; 0x03
    4aa6:	84 81       	ldd	r24, Z+4	; 0x04

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    4aa8:	16 16       	cp	r1, r22
    4aaa:	17 06       	cpc	r1, r23
    4aac:	3c f4       	brge	.+14     	; 0x4abc <vdmSeqIndexGC+0x30>
{
	ASSERT_CHECK(seq);
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");

	int index = indexVal->value.intVal;
	UNWRAP_COLLECTION(col,seq);
    4aae:	e2 2f       	mov	r30, r18
    4ab0:	f8 2f       	mov	r31, r24

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    4ab2:	82 81       	ldd	r24, Z+2	; 0x02
    4ab4:	93 81       	ldd	r25, Z+3	; 0x03
    4ab6:	86 17       	cp	r24, r22
    4ab8:	97 07       	cpc	r25, r23
    4aba:	14 f4       	brge	.+4      	; 0x4ac0 <vdmSeqIndexGC+0x34>
    4abc:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	return vdmCloneGC(col->value[index-1], from);
    4ac0:	61 50       	subi	r22, 0x01	; 1
    4ac2:	70 40       	sbci	r23, 0x00	; 0
    4ac4:	66 0f       	add	r22, r22
    4ac6:	77 1f       	adc	r23, r23
    4ac8:	01 90       	ld	r0, Z+
    4aca:	f0 81       	ld	r31, Z
    4acc:	e0 2d       	mov	r30, r0
    4ace:	e6 0f       	add	r30, r22
    4ad0:	f7 1f       	adc	r31, r23
    4ad2:	80 81       	ld	r24, Z
    4ad4:	91 81       	ldd	r25, Z+1	; 0x01
    4ad6:	ba 01       	movw	r22, r20
    4ad8:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
}
    4adc:	08 95       	ret

00004ade <vdmSeqHdGC>:
	UNWRAP_COLLECTION(col,seq);
	return vdmClone(col->value[0]);
}

TVP vdmSeqHdGC(TVP seq, TVP *from)
{
    4ade:	fc 01       	movw	r30, r24
	ASSERT_CHECK(seq);
    4ae0:	80 81       	ld	r24, Z
    4ae2:	88 30       	cpi	r24, 0x08	; 8
    4ae4:	11 f0       	breq	.+4      	; 0x4aea <vdmSeqHdGC+0xc>
    4ae6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
	return vdmCloneGC(col->value[0], from);
    4aea:	03 80       	ldd	r0, Z+3	; 0x03
    4aec:	f4 81       	ldd	r31, Z+4	; 0x04
    4aee:	e0 2d       	mov	r30, r0
    4af0:	01 90       	ld	r0, Z+
    4af2:	f0 81       	ld	r31, Z
    4af4:	e0 2d       	mov	r30, r0
    4af6:	80 81       	ld	r24, Z
    4af8:	91 81       	ldd	r25, Z+1	; 0x01
    4afa:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
}
    4afe:	08 95       	ret

00004b00 <vdmSeqReverseGC>:

	return elemsVal;
}

TVP vdmSeqReverseGC(TVP seq, TVP *from)
{
    4b00:	8f 92       	push	r8
    4b02:	9f 92       	push	r9
    4b04:	af 92       	push	r10
    4b06:	bf 92       	push	r11
    4b08:	cf 92       	push	r12
    4b0a:	df 92       	push	r13
    4b0c:	ef 92       	push	r14
    4b0e:	ff 92       	push	r15
    4b10:	0f 93       	push	r16
    4b12:	1f 93       	push	r17
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
    4b18:	fc 01       	movw	r30, r24
    4b1a:	ab 01       	movw	r20, r22
	int i;

	ASSERT_CHECK(seq);
    4b1c:	80 81       	ld	r24, Z
    4b1e:	88 30       	cpi	r24, 0x08	; 8
    4b20:	11 f0       	breq	.+4      	; 0x4b26 <vdmSeqReverseGC+0x26>
    4b22:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    4b26:	c3 80       	ldd	r12, Z+3	; 0x03
    4b28:	d4 80       	ldd	r13, Z+4	; 0x04
	return newCollection(size, VDM_SEQ);
}

static TVP newSeqGC(size_t size, TVP *from)
{
	return newCollectionGC(size, VDM_SEQ, from);
    4b2a:	d6 01       	movw	r26, r12
    4b2c:	12 96       	adiw	r26, 0x02	; 2
    4b2e:	8d 91       	ld	r24, X+
    4b30:	9c 91       	ld	r25, X
    4b32:	13 97       	sbiw	r26, 0x03	; 3
    4b34:	68 e0       	ldi	r22, 0x08	; 8
    4b36:	0e 94 08 17 	call	0x2e10	; 0x2e10 <newCollectionGC>
    4b3a:	5c 01       	movw	r10, r24
	ASSERT_CHECK(seq);
	UNWRAP_COLLECTION(col,seq);

	/* malloc  */
	TVP elemsVal = newSeqGC(col->size, from);
	UNWRAP_COLLECTION(elems,elemsVal);
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	83 80       	ldd	r8, Z+3	; 0x03
    4b40:	94 80       	ldd	r9, Z+4	; 0x04
    4b42:	d6 01       	movw	r26, r12
    4b44:	12 96       	adiw	r26, 0x02	; 2
    4b46:	cd 91       	ld	r28, X+
    4b48:	dc 91       	ld	r29, X
    4b4a:	13 97       	sbiw	r26, 0x03	; 3
    4b4c:	21 97       	sbiw	r28, 0x01	; 1
    4b4e:	cc 0f       	add	r28, r28
    4b50:	dd 1f       	adc	r29, r29
    4b52:	ee 24       	eor	r14, r14
    4b54:	ff 24       	eor	r15, r15
    4b56:	18 c0       	rjmp	.+48     	; 0x4b88 <vdmSeqReverseGC+0x88>

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
    4b58:	c7 01       	movw	r24, r14
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	f4 01       	movw	r30, r8
    4b60:	00 81       	ld	r16, Z
    4b62:	11 81       	ldd	r17, Z+1	; 0x01
    4b64:	08 0f       	add	r16, r24
    4b66:	19 1f       	adc	r17, r25
    4b68:	d6 01       	movw	r26, r12
    4b6a:	ed 91       	ld	r30, X+
    4b6c:	fc 91       	ld	r31, X
    4b6e:	ec 0f       	add	r30, r28
    4b70:	fd 1f       	adc	r31, r29
    4b72:	80 81       	ld	r24, Z
    4b74:	91 81       	ldd	r25, Z+1	; 0x01
    4b76:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    4b7a:	f8 01       	movw	r30, r16
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	80 83       	st	Z, r24
	TVP elemsVal = newSeqGC(col->size, from);
	UNWRAP_COLLECTION(elems,elemsVal);

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    4b80:	08 94       	sec
    4b82:	e1 1c       	adc	r14, r1
    4b84:	f1 1c       	adc	r15, r1
    4b86:	22 97       	sbiw	r28, 0x02	; 2
    4b88:	d6 01       	movw	r26, r12
    4b8a:	12 96       	adiw	r26, 0x02	; 2
    4b8c:	8d 91       	ld	r24, X+
    4b8e:	9c 91       	ld	r25, X
    4b90:	13 97       	sbiw	r26, 0x03	; 3
    4b92:	e8 16       	cp	r14, r24
    4b94:	f9 06       	cpc	r15, r25
    4b96:	04 f3       	brlt	.-64     	; 0x4b58 <vdmSeqReverseGC+0x58>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
	}

	return elemsVal;
}
    4b98:	c5 01       	movw	r24, r10
    4b9a:	df 91       	pop	r29
    4b9c:	cf 91       	pop	r28
    4b9e:	1f 91       	pop	r17
    4ba0:	0f 91       	pop	r16
    4ba2:	ff 90       	pop	r15
    4ba4:	ef 90       	pop	r14
    4ba6:	df 90       	pop	r13
    4ba8:	cf 90       	pop	r12
    4baa:	bf 90       	pop	r11
    4bac:	af 90       	pop	r10
    4bae:	9f 90       	pop	r9
    4bb0:	8f 90       	pop	r8
    4bb2:	08 95       	ret

00004bb4 <vdmSeqConcGC>:

	return concVal;
}

TVP vdmSeqConcGC(TVP seq, TVP seq2, TVP *from)
{
    4bb4:	8f 92       	push	r8
    4bb6:	9f 92       	push	r9
    4bb8:	af 92       	push	r10
    4bba:	bf 92       	push	r11
    4bbc:	cf 92       	push	r12
    4bbe:	df 92       	push	r13
    4bc0:	ef 92       	push	r14
    4bc2:	ff 92       	push	r15
    4bc4:	0f 93       	push	r16
    4bc6:	1f 93       	push	r17
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	fc 01       	movw	r30, r24
    4bce:	db 01       	movw	r26, r22
	int i;

	ASSERT_CHECK(seq);
    4bd0:	80 81       	ld	r24, Z
    4bd2:	88 30       	cpi	r24, 0x08	; 8
    4bd4:	19 f4       	brne	.+6      	; 0x4bdc <vdmSeqConcGC+0x28>
	ASSERT_CHECK(seq2);
    4bd6:	8c 91       	ld	r24, X
    4bd8:	88 30       	cpi	r24, 0x08	; 8
    4bda:	11 f0       	breq	.+4      	; 0x4be0 <vdmSeqConcGC+0x2c>
    4bdc:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    4be0:	e3 80       	ldd	r14, Z+3	; 0x03
    4be2:	f4 80       	ldd	r15, Z+4	; 0x04
	UNWRAP_COLLECTION(col2,seq2);
    4be4:	13 96       	adiw	r26, 0x03	; 3
    4be6:	ad 90       	ld	r10, X+
    4be8:	bc 90       	ld	r11, X
    4bea:	14 97       	sbiw	r26, 0x04	; 4
	return newCollection(size, VDM_SEQ);
}

static TVP newSeqGC(size_t size, TVP *from)
{
	return newCollectionGC(size, VDM_SEQ, from);
    4bec:	d5 01       	movw	r26, r10
    4bee:	12 96       	adiw	r26, 0x02	; 2
    4bf0:	8d 91       	ld	r24, X+
    4bf2:	9c 91       	ld	r25, X
    4bf4:	13 97       	sbiw	r26, 0x03	; 3
    4bf6:	f7 01       	movw	r30, r14
    4bf8:	22 81       	ldd	r18, Z+2	; 0x02
    4bfa:	33 81       	ldd	r19, Z+3	; 0x03
    4bfc:	82 0f       	add	r24, r18
    4bfe:	93 1f       	adc	r25, r19
    4c00:	68 e0       	ldi	r22, 0x08	; 8
    4c02:	0e 94 08 17 	call	0x2e10	; 0x2e10 <newCollectionGC>
    4c06:	6c 01       	movw	r12, r24
	UNWRAP_COLLECTION(col,seq);
	UNWRAP_COLLECTION(col2,seq2);

	/* malloc  */
	TVP concVal = newSeqGC(col->size+col2->size, from);
	UNWRAP_COLLECTION(concSeq,concVal);
    4c08:	dc 01       	movw	r26, r24
    4c0a:	13 96       	adiw	r26, 0x03	; 3
    4c0c:	8d 90       	ld	r8, X+
    4c0e:	9c 90       	ld	r9, X
    4c10:	14 97       	sbiw	r26, 0x04	; 4
    4c12:	c0 e0       	ldi	r28, 0x00	; 0
    4c14:	d0 e0       	ldi	r29, 0x00	; 0
    4c16:	15 c0       	rjmp	.+42     	; 0x4c42 <vdmSeqConcGC+0x8e>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    4c18:	ce 01       	movw	r24, r28
    4c1a:	88 0f       	add	r24, r24
    4c1c:	99 1f       	adc	r25, r25
	{
		concSeq->value[i] = vdmClone(col->value[i]);
    4c1e:	f4 01       	movw	r30, r8
    4c20:	00 81       	ld	r16, Z
    4c22:	11 81       	ldd	r17, Z+1	; 0x01
    4c24:	08 0f       	add	r16, r24
    4c26:	19 1f       	adc	r17, r25
    4c28:	d7 01       	movw	r26, r14
    4c2a:	ed 91       	ld	r30, X+
    4c2c:	fc 91       	ld	r31, X
    4c2e:	e8 0f       	add	r30, r24
    4c30:	f9 1f       	adc	r31, r25
    4c32:	80 81       	ld	r24, Z
    4c34:	91 81       	ldd	r25, Z+1	; 0x01
    4c36:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    4c3a:	f8 01       	movw	r30, r16
    4c3c:	91 83       	std	Z+1, r25	; 0x01
    4c3e:	80 83       	st	Z, r24
	/* malloc  */
	TVP concVal = newSeqGC(col->size+col2->size, from);
	UNWRAP_COLLECTION(concSeq,concVal);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    4c40:	21 96       	adiw	r28, 0x01	; 1
    4c42:	d7 01       	movw	r26, r14
    4c44:	12 96       	adiw	r26, 0x02	; 2
    4c46:	8d 91       	ld	r24, X+
    4c48:	9c 91       	ld	r25, X
    4c4a:	13 97       	sbiw	r26, 0x03	; 3
    4c4c:	c8 17       	cp	r28, r24
    4c4e:	d9 07       	cpc	r29, r25
    4c50:	1c f3       	brlt	.-58     	; 0x4c18 <vdmSeqConcGC+0x64>
    4c52:	7c 01       	movw	r14, r24
    4c54:	ee 0c       	add	r14, r14
    4c56:	ff 1c       	adc	r15, r15
    4c58:	c0 e0       	ldi	r28, 0x00	; 0
    4c5a:	d0 e0       	ldi	r29, 0x00	; 0
    4c5c:	19 c0       	rjmp	.+50     	; 0x4c90 <vdmSeqConcGC+0xdc>
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
    4c5e:	f4 01       	movw	r30, r8
    4c60:	00 81       	ld	r16, Z
    4c62:	11 81       	ldd	r17, Z+1	; 0x01
    4c64:	0e 0d       	add	r16, r14
    4c66:	1f 1d       	adc	r17, r15
    4c68:	ce 01       	movw	r24, r28
    4c6a:	88 0f       	add	r24, r24
    4c6c:	99 1f       	adc	r25, r25
    4c6e:	d5 01       	movw	r26, r10
    4c70:	ed 91       	ld	r30, X+
    4c72:	fc 91       	ld	r31, X
    4c74:	e8 0f       	add	r30, r24
    4c76:	f9 1f       	adc	r31, r25
    4c78:	80 81       	ld	r24, Z
    4c7a:	91 81       	ldd	r25, Z+1	; 0x01
    4c7c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    4c80:	f8 01       	movw	r30, r16
    4c82:	91 83       	std	Z+1, r25	; 0x01
    4c84:	80 83       	st	Z, r24
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
    4c86:	21 96       	adiw	r28, 0x01	; 1
    4c88:	82 e0       	ldi	r24, 0x02	; 2
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	e8 0e       	add	r14, r24
    4c8e:	f9 1e       	adc	r15, r25
    4c90:	d5 01       	movw	r26, r10
    4c92:	12 96       	adiw	r26, 0x02	; 2
    4c94:	8d 91       	ld	r24, X+
    4c96:	9c 91       	ld	r25, X
    4c98:	13 97       	sbiw	r26, 0x03	; 3
    4c9a:	c8 17       	cp	r28, r24
    4c9c:	d9 07       	cpc	r29, r25
    4c9e:	fc f2       	brlt	.-66     	; 0x4c5e <vdmSeqConcGC+0xaa>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
	}

	return concVal;
}
    4ca0:	c6 01       	movw	r24, r12
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	1f 91       	pop	r17
    4ca8:	0f 91       	pop	r16
    4caa:	ff 90       	pop	r15
    4cac:	ef 90       	pop	r14
    4cae:	df 90       	pop	r13
    4cb0:	cf 90       	pop	r12
    4cb2:	bf 90       	pop	r11
    4cb4:	af 90       	pop	r10
    4cb6:	9f 90       	pop	r9
    4cb8:	8f 90       	pop	r8
    4cba:	08 95       	ret

00004cbc <vdmSeqTlGC>:

	return tailVal;
}

TVP vdmSeqTlGC(TVP seq, TVP *from)
{
    4cbc:	8f 92       	push	r8
    4cbe:	9f 92       	push	r9
    4cc0:	af 92       	push	r10
    4cc2:	bf 92       	push	r11
    4cc4:	cf 92       	push	r12
    4cc6:	df 92       	push	r13
    4cc8:	ef 92       	push	r14
    4cca:	ff 92       	push	r15
    4ccc:	0f 93       	push	r16
    4cce:	1f 93       	push	r17
    4cd0:	cf 93       	push	r28
    4cd2:	df 93       	push	r29
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	ab 01       	movw	r20, r22
	int i;

	ASSERT_CHECK(seq);
    4cd8:	80 81       	ld	r24, Z
    4cda:	88 30       	cpi	r24, 0x08	; 8
    4cdc:	11 f0       	breq	.+4      	; 0x4ce2 <vdmSeqTlGC+0x26>
    4cde:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    4ce2:	a3 80       	ldd	r10, Z+3	; 0x03
    4ce4:	b4 80       	ldd	r11, Z+4	; 0x04
	return newCollection(size, VDM_SEQ);
}

static TVP newSeqGC(size_t size, TVP *from)
{
	return newCollectionGC(size, VDM_SEQ, from);
    4ce6:	d5 01       	movw	r26, r10
    4ce8:	12 96       	adiw	r26, 0x02	; 2
    4cea:	8d 91       	ld	r24, X+
    4cec:	9c 91       	ld	r25, X
    4cee:	13 97       	sbiw	r26, 0x03	; 3
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	68 e0       	ldi	r22, 0x08	; 8
    4cf4:	0e 94 08 17 	call	0x2e10	; 0x2e10 <newCollectionGC>
    4cf8:	6c 01       	movw	r12, r24
	ASSERT_CHECK(seq);
	UNWRAP_COLLECTION(col,seq);

	/* malloc  */
	TVP tailVal = newSeqGC(col->size - 1, from);
	UNWRAP_COLLECTION(tail,tailVal);
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	83 80       	ldd	r8, Z+3	; 0x03
    4cfe:	94 80       	ldd	r9, Z+4	; 0x04
    4d00:	c1 e0       	ldi	r28, 0x01	; 1
    4d02:	d0 e0       	ldi	r29, 0x00	; 0
    4d04:	ee 24       	eor	r14, r14
    4d06:	ff 24       	eor	r15, r15
    4d08:	19 c0       	rjmp	.+50     	; 0x4d3c <vdmSeqTlGC+0x80>

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
	{
		tail->value[i-1] = vdmClone(col->value[i]);
    4d0a:	d4 01       	movw	r26, r8
    4d0c:	0d 91       	ld	r16, X+
    4d0e:	1c 91       	ld	r17, X
    4d10:	0e 0d       	add	r16, r14
    4d12:	1f 1d       	adc	r17, r15
    4d14:	ce 01       	movw	r24, r28
    4d16:	88 0f       	add	r24, r24
    4d18:	99 1f       	adc	r25, r25
    4d1a:	d5 01       	movw	r26, r10
    4d1c:	ed 91       	ld	r30, X+
    4d1e:	fc 91       	ld	r31, X
    4d20:	e8 0f       	add	r30, r24
    4d22:	f9 1f       	adc	r31, r25
    4d24:	80 81       	ld	r24, Z
    4d26:	91 81       	ldd	r25, Z+1	; 0x01
    4d28:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    4d2c:	f8 01       	movw	r30, r16
    4d2e:	91 83       	std	Z+1, r25	; 0x01
    4d30:	80 83       	st	Z, r24
	/* malloc  */
	TVP tailVal = newSeqGC(col->size - 1, from);
	UNWRAP_COLLECTION(tail,tailVal);

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    4d32:	21 96       	adiw	r28, 0x01	; 1
    4d34:	82 e0       	ldi	r24, 0x02	; 2
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	e8 0e       	add	r14, r24
    4d3a:	f9 1e       	adc	r15, r25
    4d3c:	d5 01       	movw	r26, r10
    4d3e:	12 96       	adiw	r26, 0x02	; 2
    4d40:	8d 91       	ld	r24, X+
    4d42:	9c 91       	ld	r25, X
    4d44:	13 97       	sbiw	r26, 0x03	; 3
    4d46:	c8 17       	cp	r28, r24
    4d48:	d9 07       	cpc	r29, r25
    4d4a:	fc f2       	brlt	.-66     	; 0x4d0a <vdmSeqTlGC+0x4e>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
	}

	return tailVal;
}
    4d4c:	c6 01       	movw	r24, r12
    4d4e:	df 91       	pop	r29
    4d50:	cf 91       	pop	r28
    4d52:	1f 91       	pop	r17
    4d54:	0f 91       	pop	r16
    4d56:	ff 90       	pop	r15
    4d58:	ef 90       	pop	r14
    4d5a:	df 90       	pop	r13
    4d5c:	cf 90       	pop	r12
    4d5e:	bf 90       	pop	r11
    4d60:	af 90       	pop	r10
    4d62:	9f 90       	pop	r9
    4d64:	8f 90       	pop	r8
    4d66:	08 95       	ret

00004d68 <vdmSeqLen>:

TVP vdmSeqLen(TVP seq)
{
    4d68:	fc 01       	movw	r30, r24
	ASSERT_CHECK(seq);
    4d6a:	80 81       	ld	r24, Z
    4d6c:	88 30       	cpi	r24, 0x08	; 8
    4d6e:	11 f0       	breq	.+4      	; 0x4d74 <vdmSeqLen+0xc>
    4d70:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
	return newInt(col->size);
    4d74:	03 80       	ldd	r0, Z+3	; 0x03
    4d76:	f4 81       	ldd	r31, Z+4	; 0x04
    4d78:	e0 2d       	mov	r30, r0
    4d7a:	82 81       	ldd	r24, Z+2	; 0x02
    4d7c:	93 81       	ldd	r25, Z+3	; 0x03
    4d7e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
}
    4d82:	08 95       	ret

00004d84 <vdmSeqIndsGC>:
	return indsVal;
}


TVP vdmSeqIndsGC(TVP seq, TVP *from)
{
    4d84:	af 92       	push	r10
    4d86:	bf 92       	push	r11
    4d88:	cf 92       	push	r12
    4d8a:	df 92       	push	r13
    4d8c:	ef 92       	push	r14
    4d8e:	ff 92       	push	r15
    4d90:	0f 93       	push	r16
    4d92:	1f 93       	push	r17
    4d94:	cf 93       	push	r28
    4d96:	df 93       	push	r29
    4d98:	fc 01       	movw	r30, r24
    4d9a:	5b 01       	movw	r10, r22
	int i;

	ASSERT_CHECK(seq);
    4d9c:	80 81       	ld	r24, Z
    4d9e:	88 30       	cpi	r24, 0x08	; 8
    4da0:	81 f4       	brne	.+32     	; 0x4dc2 <vdmSeqIndsGC+0x3e>
	UNWRAP_COLLECTION(col,seq);
    4da2:	c3 80       	ldd	r12, Z+3	; 0x03
    4da4:	d4 80       	ldd	r13, Z+4	; 0x04

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
    4da6:	f6 01       	movw	r30, r12
    4da8:	82 81       	ldd	r24, Z+2	; 0x02
    4daa:	93 81       	ldd	r25, Z+3	; 0x03
    4dac:	62 e0       	ldi	r22, 0x02	; 2
    4dae:	70 e0       	ldi	r23, 0x00	; 0
    4db0:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    4db4:	8c 01       	movw	r16, r24
	assert(value != NULL);
    4db6:	00 97       	sbiw	r24, 0x00	; 0
    4db8:	21 f0       	breq	.+8      	; 0x4dc2 <vdmSeqIndsGC+0x3e>
    4dba:	7c 01       	movw	r14, r24
    4dbc:	c0 e0       	ldi	r28, 0x00	; 0
    4dbe:	d0 e0       	ldi	r29, 0x00	; 0
    4dc0:	0a c0       	rjmp	.+20     	; 0x4dd6 <vdmSeqIndsGC+0x52>
    4dc2:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
	{
		value[i] = newInt(i+1);
    4dc6:	21 96       	adiw	r28, 0x01	; 1
    4dc8:	ce 01       	movw	r24, r28
    4dca:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    4dce:	f7 01       	movw	r30, r14
    4dd0:	81 93       	st	Z+, r24
    4dd2:	91 93       	st	Z+, r25
    4dd4:	7f 01       	movw	r14, r30

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
	assert(value != NULL);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    4dd6:	f6 01       	movw	r30, r12
    4dd8:	82 81       	ldd	r24, Z+2	; 0x02
    4dda:	93 81       	ldd	r25, Z+3	; 0x03
    4ddc:	c8 17       	cp	r28, r24
    4dde:	d9 07       	cpc	r29, r25
    4de0:	94 f3       	brlt	.-28     	; 0x4dc6 <vdmSeqIndsGC+0x42>
	{
		value[i] = newInt(i+1);
	}

	TVP indsVal = newSetWithValuesGC(col->size, value, from);
    4de2:	b8 01       	movw	r22, r16
    4de4:	a5 01       	movw	r20, r10
    4de6:	0e 94 94 33 	call	0x6728	; 0x6728 <newSetWithValuesGC>

	return indsVal;
}
    4dea:	df 91       	pop	r29
    4dec:	cf 91       	pop	r28
    4dee:	1f 91       	pop	r17
    4df0:	0f 91       	pop	r16
    4df2:	ff 90       	pop	r15
    4df4:	ef 90       	pop	r14
    4df6:	df 90       	pop	r13
    4df8:	cf 90       	pop	r12
    4dfa:	bf 90       	pop	r11
    4dfc:	af 90       	pop	r10
    4dfe:	08 95       	ret

00004e00 <vdmSeqElemsGC>:
	return elemsVal;
}


TVP vdmSeqElemsGC(TVP seq, TVP *from)
{
    4e00:	fc 01       	movw	r30, r24
    4e02:	ab 01       	movw	r20, r22
	ASSERT_CHECK(seq);
    4e04:	80 81       	ld	r24, Z
    4e06:	88 30       	cpi	r24, 0x08	; 8
    4e08:	11 f0       	breq	.+4      	; 0x4e0e <vdmSeqElemsGC+0xe>
    4e0a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    4e0e:	03 80       	ldd	r0, Z+3	; 0x03
    4e10:	f4 81       	ldd	r31, Z+4	; 0x04
    4e12:	e0 2d       	mov	r30, r0

	TVP elemsVal = newSetWithValuesGC(col->size, col->value, from);
    4e14:	60 81       	ld	r22, Z
    4e16:	71 81       	ldd	r23, Z+1	; 0x01
    4e18:	82 81       	ldd	r24, Z+2	; 0x02
    4e1a:	93 81       	ldd	r25, Z+3	; 0x03
    4e1c:	0e 94 94 33 	call	0x6728	; 0x6728 <newSetWithValuesGC>

	return elemsVal;
}
    4e20:	08 95       	ret

00004e22 <vdmSeqInds>:


TVP vdmSeqInds(TVP seq)
{
    4e22:	cf 92       	push	r12
    4e24:	df 92       	push	r13
    4e26:	ef 92       	push	r14
    4e28:	ff 92       	push	r15
    4e2a:	0f 93       	push	r16
    4e2c:	1f 93       	push	r17
    4e2e:	cf 93       	push	r28
    4e30:	df 93       	push	r29
    4e32:	fc 01       	movw	r30, r24
	int i;

	ASSERT_CHECK(seq);
    4e34:	80 81       	ld	r24, Z
    4e36:	88 30       	cpi	r24, 0x08	; 8
    4e38:	81 f4       	brne	.+32     	; 0x4e5a <vdmSeqInds+0x38>
	UNWRAP_COLLECTION(col,seq);
    4e3a:	c3 80       	ldd	r12, Z+3	; 0x03
    4e3c:	d4 80       	ldd	r13, Z+4	; 0x04

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
    4e3e:	f6 01       	movw	r30, r12
    4e40:	82 81       	ldd	r24, Z+2	; 0x02
    4e42:	93 81       	ldd	r25, Z+3	; 0x03
    4e44:	62 e0       	ldi	r22, 0x02	; 2
    4e46:	70 e0       	ldi	r23, 0x00	; 0
    4e48:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    4e4c:	8c 01       	movw	r16, r24
	assert(value != NULL);
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	21 f0       	breq	.+8      	; 0x4e5a <vdmSeqInds+0x38>
    4e52:	7c 01       	movw	r14, r24
    4e54:	c0 e0       	ldi	r28, 0x00	; 0
    4e56:	d0 e0       	ldi	r29, 0x00	; 0
    4e58:	0a c0       	rjmp	.+20     	; 0x4e6e <vdmSeqInds+0x4c>
    4e5a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
	{
		value[i] = newInt(i+1);
    4e5e:	21 96       	adiw	r28, 0x01	; 1
    4e60:	ce 01       	movw	r24, r28
    4e62:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    4e66:	f7 01       	movw	r30, r14
    4e68:	81 93       	st	Z+, r24
    4e6a:	91 93       	st	Z+, r25
    4e6c:	7f 01       	movw	r14, r30

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
	assert(value != NULL);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    4e6e:	f6 01       	movw	r30, r12
    4e70:	82 81       	ldd	r24, Z+2	; 0x02
    4e72:	93 81       	ldd	r25, Z+3	; 0x03
    4e74:	c8 17       	cp	r28, r24
    4e76:	d9 07       	cpc	r29, r25
    4e78:	94 f3       	brlt	.-28     	; 0x4e5e <vdmSeqInds+0x3c>
	{
		value[i] = newInt(i+1);
	}

	TVP indsVal = newSetWithValues(col->size, value);
    4e7a:	b8 01       	movw	r22, r16
    4e7c:	0e 94 a7 2c 	call	0x594e	; 0x594e <newSetWithValues>

	return indsVal;
}
    4e80:	df 91       	pop	r29
    4e82:	cf 91       	pop	r28
    4e84:	1f 91       	pop	r17
    4e86:	0f 91       	pop	r16
    4e88:	ff 90       	pop	r15
    4e8a:	ef 90       	pop	r14
    4e8c:	df 90       	pop	r13
    4e8e:	cf 90       	pop	r12
    4e90:	08 95       	ret

00004e92 <vdmSeqElems>:
	return newIntGC(col->size, from);
}

#ifndef NO_SETS
TVP vdmSeqElems(TVP seq)
{
    4e92:	fc 01       	movw	r30, r24
	ASSERT_CHECK(seq);
    4e94:	80 81       	ld	r24, Z
    4e96:	88 30       	cpi	r24, 0x08	; 8
    4e98:	11 f0       	breq	.+4      	; 0x4e9e <vdmSeqElems+0xc>
    4e9a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    4e9e:	03 80       	ldd	r0, Z+3	; 0x03
    4ea0:	f4 81       	ldd	r31, Z+4	; 0x04
    4ea2:	e0 2d       	mov	r30, r0

	TVP elemsVal = newSetWithValues(col->size, col->value);
    4ea4:	60 81       	ld	r22, Z
    4ea6:	71 81       	ldd	r23, Z+1	; 0x01
    4ea8:	82 81       	ldd	r24, Z+2	; 0x02
    4eaa:	93 81       	ldd	r25, Z+3	; 0x03
    4eac:	0e 94 a7 2c 	call	0x594e	; 0x594e <newSetWithValues>

	return elemsVal;
}
    4eb0:	08 95       	ret

00004eb2 <vdmSeqLenGC>:
	UNWRAP_COLLECTION(col,seq);
	return newInt(col->size);
}

TVP vdmSeqLenGC(TVP seq, TVP *from)
{
    4eb2:	fc 01       	movw	r30, r24
	ASSERT_CHECK(seq);
    4eb4:	80 81       	ld	r24, Z
    4eb6:	88 30       	cpi	r24, 0x08	; 8
    4eb8:	11 f0       	breq	.+4      	; 0x4ebe <vdmSeqLenGC+0xc>
    4eba:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
	return newIntGC(col->size, from);
    4ebe:	03 80       	ldd	r0, Z+3	; 0x03
    4ec0:	f4 81       	ldd	r31, Z+4	; 0x04
    4ec2:	e0 2d       	mov	r30, r0
    4ec4:	82 81       	ldd	r24, Z+2	; 0x02
    4ec6:	93 81       	ldd	r25, Z+3	; 0x03
    4ec8:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
}
    4ecc:	08 95       	ret

00004ece <vdmSeqFit>:
	}
	vdmSeqAdd(col->value, &(col->size), element);
}

void vdmSeqFit(TVP seq)
{
    4ece:	0f 93       	push	r16
    4ed0:	1f 93       	push	r17
	UNWRAP_COLLECTION(col, seq);
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	03 81       	ldd	r16, Z+3	; 0x03
    4ed6:	14 81       	ldd	r17, Z+4	; 0x04

	/* Assumes that more memory is allocated in the col->value array than there are elements.  */
	col->value = (TVP*)realloc(col->value, col->size * sizeof(TVP));
    4ed8:	f8 01       	movw	r30, r16
    4eda:	62 81       	ldd	r22, Z+2	; 0x02
    4edc:	73 81       	ldd	r23, Z+3	; 0x03
    4ede:	66 0f       	add	r22, r22
    4ee0:	77 1f       	adc	r23, r23
    4ee2:	80 81       	ld	r24, Z
    4ee4:	91 81       	ldd	r25, Z+1	; 0x01
    4ee6:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    4eea:	f8 01       	movw	r30, r16
    4eec:	91 83       	std	Z+1, r25	; 0x01
    4eee:	80 83       	st	Z, r24
	assert(col->value != NULL);
    4ef0:	00 97       	sbiw	r24, 0x00	; 0
    4ef2:	11 f4       	brne	.+4      	; 0x4ef8 <vdmSeqFit+0x2a>
    4ef4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
}
    4ef8:	1f 91       	pop	r17
    4efa:	0f 91       	pop	r16
    4efc:	08 95       	ret

00004efe <vdmSeqGrow>:
	free(value);
	return res;
}

void vdmSeqGrow(TVP seq, TVP element)
{
    4efe:	0f 93       	push	r16
    4f00:	1f 93       	push	r17
    4f02:	cf 93       	push	r28
    4f04:	df 93       	push	r29
    4f06:	8b 01       	movw	r16, r22
	int bufsize = DEFAULT_SEQ_COMP_BUFFER;

	UNWRAP_COLLECTION(col, seq);
    4f08:	fc 01       	movw	r30, r24
    4f0a:	c3 81       	ldd	r28, Z+3	; 0x03
    4f0c:	d4 81       	ldd	r29, Z+4	; 0x04

	if(col->size >= bufsize)
    4f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f10:	9b 81       	ldd	r25, Y+3	; 0x03
    4f12:	02 97       	sbiw	r24, 0x02	; 2
    4f14:	64 f0       	brlt	.+24     	; 0x4f2e <vdmSeqGrow+0x30>
	{
		/* buffer too small add memory chunk  */
		bufsize += DEFAULT_SEQ_COMP_BUFFER_STEPSIZE;
		col->value = (TVP*)realloc(col->value, bufsize * sizeof(TVP));
    4f16:	88 81       	ld	r24, Y
    4f18:	99 81       	ldd	r25, Y+1	; 0x01
    4f1a:	68 e1       	ldi	r22, 0x18	; 24
    4f1c:	70 e0       	ldi	r23, 0x00	; 0
    4f1e:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    4f22:	99 83       	std	Y+1, r25	; 0x01
    4f24:	88 83       	st	Y, r24
		assert(col->value != NULL);
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	11 f4       	brne	.+4      	; 0x4f2e <vdmSeqGrow+0x30>
    4f2a:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

/* Utility functions.  */
/* ------------------------------------------------  */
static void vdmSeqAdd(TVP* value, int* index, TVP newValue)
{
	value[*index] = newValue;
    4f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f30:	9b 81       	ldd	r25, Y+3	; 0x03
    4f32:	9c 01       	movw	r18, r24
    4f34:	22 0f       	add	r18, r18
    4f36:	33 1f       	adc	r19, r19
    4f38:	e8 81       	ld	r30, Y
    4f3a:	f9 81       	ldd	r31, Y+1	; 0x01
    4f3c:	e2 0f       	add	r30, r18
    4f3e:	f3 1f       	adc	r31, r19
    4f40:	11 83       	std	Z+1, r17	; 0x01
    4f42:	00 83       	st	Z, r16
	*index = (*index) + 1;
    4f44:	01 96       	adiw	r24, 0x01	; 1
    4f46:	9b 83       	std	Y+3, r25	; 0x03
    4f48:	8a 83       	std	Y+2, r24	; 0x02
		bufsize += DEFAULT_SEQ_COMP_BUFFER_STEPSIZE;
		col->value = (TVP*)realloc(col->value, bufsize * sizeof(TVP));
		assert(col->value != NULL);
	}
	vdmSeqAdd(col->value, &(col->size), element);
}
    4f4a:	df 91       	pop	r29
    4f4c:	cf 91       	pop	r28
    4f4e:	1f 91       	pop	r17
    4f50:	0f 91       	pop	r16
    4f52:	08 95       	ret

00004f54 <newSeqVarToGrow>:
}

/* Just like newSeqVar, but with memory preallocated to an expected  */
/* result sequence length.  */
TVP newSeqVarToGrow(size_t size, size_t expected_size, ...)
{
    4f54:	4f 92       	push	r4
    4f56:	5f 92       	push	r5
    4f58:	6f 92       	push	r6
    4f5a:	7f 92       	push	r7
    4f5c:	8f 92       	push	r8
    4f5e:	9f 92       	push	r9
    4f60:	af 92       	push	r10
    4f62:	bf 92       	push	r11
    4f64:	cf 92       	push	r12
    4f66:	df 92       	push	r13
    4f68:	ef 92       	push	r14
    4f6a:	ff 92       	push	r15
    4f6c:	0f 93       	push	r16
    4f6e:	1f 93       	push	r17
    4f70:	df 93       	push	r29
    4f72:	cf 93       	push	r28
    4f74:	cd b7       	in	r28, 0x3d	; 61
    4f76:	de b7       	in	r29, 0x3e	; 62
    4f78:	4b 88       	ldd	r4, Y+19	; 0x13
    4f7a:	5c 88       	ldd	r5, Y+20	; 0x14
    4f7c:	7d 88       	ldd	r7, Y+21	; 0x15
    4f7e:	6e 88       	ldd	r6, Y+22	; 0x16
    4f80:	8e 01       	movw	r16, r28
    4f82:	09 5e       	subi	r16, 0xE9	; 233
    4f84:	1f 4f       	sbci	r17, 0xFF	; 255
	va_start(ap, expected_size);

	int count = 0;

	int bufsize = expected_size;  /* DEFAULT_SEQ_COMP_BUFFER;  */
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    4f86:	87 2d       	mov	r24, r7
    4f88:	96 2d       	mov	r25, r6
    4f8a:	62 e0       	ldi	r22, 0x02	; 2
    4f8c:	70 e0       	ldi	r23, 0x00	; 0
    4f8e:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    4f92:	7c 01       	movw	r14, r24
	assert(value != NULL);
    4f94:	00 97       	sbiw	r24, 0x00	; 0
    4f96:	f1 f0       	breq	.+60     	; 0x4fd4 <newSeqVarToGrow+0x80>
	va_list ap;
	va_start(ap, expected_size);

	int count = 0;

	int bufsize = expected_size;  /* DEFAULT_SEQ_COMP_BUFFER;  */
    4f98:	27 2d       	mov	r18, r7
    4f9a:	36 2d       	mov	r19, r6
    4f9c:	c9 01       	movw	r24, r18
    4f9e:	5c 01       	movw	r10, r24
    4fa0:	68 01       	movw	r12, r16
    4fa2:	00 e0       	ldi	r16, 0x00	; 0
    4fa4:	10 e0       	ldi	r17, 0x00	; 0
    4fa6:	25 c0       	rjmp	.+74     	; 0x4ff2 <newSeqVarToGrow+0x9e>
	assert(value != NULL);

	for(i = 0; i < size; i++)
	{
		TVP arg = va_arg(ap, TVP);
		TVP v= vdmClone(arg); /*  set binding  */
    4fa8:	f6 01       	movw	r30, r12
    4faa:	80 81       	ld	r24, Z
    4fac:	91 81       	ldd	r25, Z+1	; 0x01
    4fae:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    4fb2:	4c 01       	movw	r8, r24


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    4fb4:	0a 15       	cp	r16, r10
    4fb6:	1b 05       	cpc	r17, r11
    4fb8:	7c f0       	brlt	.+30     	; 0x4fd8 <newSeqVarToGrow+0x84>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SEQ_COMP_BUFFER_STEPSIZE;
    4fba:	8a e0       	ldi	r24, 0x0A	; 10
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	a8 0e       	add	r10, r24
    4fc0:	b9 1e       	adc	r11, r25
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    4fc2:	b5 01       	movw	r22, r10
    4fc4:	66 0f       	add	r22, r22
    4fc6:	77 1f       	adc	r23, r23
    4fc8:	c7 01       	movw	r24, r14
    4fca:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    4fce:	7c 01       	movw	r14, r24
			assert(value != NULL);
    4fd0:	00 97       	sbiw	r24, 0x00	; 0
    4fd2:	11 f4       	brne	.+4      	; 0x4fd8 <newSeqVarToGrow+0x84>
    4fd4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

/* Utility functions.  */
/* ------------------------------------------------  */
static void vdmSeqAdd(TVP* value, int* index, TVP newValue)
{
	value[*index] = newValue;
    4fd8:	f8 01       	movw	r30, r16
    4fda:	ee 0f       	add	r30, r30
    4fdc:	ff 1f       	adc	r31, r31
    4fde:	ee 0d       	add	r30, r14
    4fe0:	ff 1d       	adc	r31, r15
    4fe2:	91 82       	std	Z+1, r9	; 0x01
    4fe4:	80 82       	st	Z, r8

	int bufsize = expected_size;  /* DEFAULT_SEQ_COMP_BUFFER;  */
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for(i = 0; i < size; i++)
    4fe6:	0f 5f       	subi	r16, 0xFF	; 255
    4fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fea:	e2 e0       	ldi	r30, 0x02	; 2
    4fec:	f0 e0       	ldi	r31, 0x00	; 0
    4fee:	ce 0e       	add	r12, r30
    4ff0:	df 1e       	adc	r13, r31
    4ff2:	04 15       	cp	r16, r4
    4ff4:	15 05       	cpc	r17, r5
    4ff6:	c0 f2       	brcs	.-80     	; 0x4fa8 <newSeqVarToGrow+0x54>
		vdmSeqAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesPrealloc(count, expected_size, VDM_SEQ, value);
    4ff8:	c8 01       	movw	r24, r16
    4ffa:	67 2d       	mov	r22, r7
    4ffc:	76 2d       	mov	r23, r6
    4ffe:	48 e0       	ldi	r20, 0x08	; 8
    5000:	97 01       	movw	r18, r14
    5002:	0e 94 28 16 	call	0x2c50	; 0x2c50 <newCollectionWithValuesPrealloc>
    5006:	18 2f       	mov	r17, r24
    5008:	09 2f       	mov	r16, r25
	free(value);
    500a:	c7 01       	movw	r24, r14
    500c:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    5010:	81 2f       	mov	r24, r17
    5012:	90 2f       	mov	r25, r16
    5014:	cf 91       	pop	r28
    5016:	df 91       	pop	r29
    5018:	1f 91       	pop	r17
    501a:	0f 91       	pop	r16
    501c:	ff 90       	pop	r15
    501e:	ef 90       	pop	r14
    5020:	df 90       	pop	r13
    5022:	cf 90       	pop	r12
    5024:	bf 90       	pop	r11
    5026:	af 90       	pop	r10
    5028:	9f 90       	pop	r9
    502a:	8f 90       	pop	r8
    502c:	7f 90       	pop	r7
    502e:	6f 90       	pop	r6
    5030:	5f 90       	pop	r5
    5032:	4f 90       	pop	r4
    5034:	08 95       	ret

00005036 <newSeqVarGC>:

	return newCollectionWithValues(size, VDM_SEQ, elements);
}

TVP newSeqVarGC(size_t size, TVP *from, ...)
{
    5036:	ef 92       	push	r14
    5038:	ff 92       	push	r15
    503a:	0f 93       	push	r16
    503c:	1f 93       	push	r17
    503e:	df 93       	push	r29
    5040:	cf 93       	push	r28
    5042:	cd b7       	in	r28, 0x3d	; 61
    5044:	de b7       	in	r29, 0x3e	; 62
    5046:	69 85       	ldd	r22, Y+9	; 0x09
    5048:	7a 85       	ldd	r23, Y+10	; 0x0a
		elements[i] = arg;
	}
	va_end(ap);

	return newCollectionWithValuesGC(size, VDM_SEQ, elements, from);
}
    504a:	0d b7       	in	r16, 0x3d	; 61
    504c:	1e b7       	in	r17, 0x3e	; 62
}

TVP newSeqVarGC(size_t size, TVP *from, ...)
{
	int i;
	TVP elements[size];
    504e:	cb 01       	movw	r24, r22
    5050:	88 0f       	add	r24, r24
    5052:	99 1f       	adc	r25, r25
    5054:	2d b7       	in	r18, 0x3d	; 61
    5056:	3e b7       	in	r19, 0x3e	; 62
    5058:	28 1b       	sub	r18, r24
    505a:	39 0b       	sbc	r19, r25
    505c:	0f b6       	in	r0, 0x3f	; 63
    505e:	f8 94       	cli
    5060:	3e bf       	out	0x3e, r19	; 62
    5062:	0f be       	out	0x3f, r0	; 63
    5064:	2d bf       	out	0x3d, r18	; 61
    5066:	2f 5f       	subi	r18, 0xFF	; 255
    5068:	3f 4f       	sbci	r19, 0xFF	; 255

	return newCollectionWithValues(size, VDM_SEQ, elements);
}

TVP newSeqVarGC(size_t size, TVP *from, ...)
{
    506a:	ce 01       	movw	r24, r28
    506c:	0d 96       	adiw	r24, 0x0d	; 13
    506e:	dc 01       	movw	r26, r24
    5070:	f2 2e       	mov	r15, r18
    5072:	e3 2e       	mov	r14, r19
    5074:	f9 01       	movw	r30, r18
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	06 c0       	rjmp	.+12     	; 0x5088 <newSeqVarGC+0x52>
	va_start(ap, from);

	for (i = 0; i < size; i++)
	{
		TVP arg = va_arg(ap, TVP);
		elements[i] = arg;
    507c:	8d 91       	ld	r24, X+
    507e:	9d 91       	ld	r25, X+
    5080:	81 93       	st	Z+, r24
    5082:	91 93       	st	Z+, r25
	TVP elements[size];

	va_list ap;
	va_start(ap, from);

	for (i = 0; i < size; i++)
    5084:	2f 5f       	subi	r18, 0xFF	; 255
    5086:	3f 4f       	sbci	r19, 0xFF	; 255
    5088:	26 17       	cp	r18, r22
    508a:	37 07       	cpc	r19, r23
    508c:	b8 f3       	brcs	.-18     	; 0x507c <newSeqVarGC+0x46>
		TVP arg = va_arg(ap, TVP);
		elements[i] = arg;
	}
	va_end(ap);

	return newCollectionWithValuesGC(size, VDM_SEQ, elements, from);
    508e:	cb 01       	movw	r24, r22
    5090:	68 e0       	ldi	r22, 0x08	; 8
    5092:	4f 2d       	mov	r20, r15
    5094:	5e 2d       	mov	r21, r14
    5096:	2b 85       	ldd	r18, Y+11	; 0x0b
    5098:	3c 85       	ldd	r19, Y+12	; 0x0c
    509a:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <newCollectionWithValuesGC>
}
    509e:	0f b6       	in	r0, 0x3f	; 63
    50a0:	f8 94       	cli
    50a2:	1e bf       	out	0x3e, r17	; 62
    50a4:	0f be       	out	0x3f, r0	; 63
    50a6:	0d bf       	out	0x3d, r16	; 61
    50a8:	cf 91       	pop	r28
    50aa:	df 91       	pop	r29
    50ac:	1f 91       	pop	r17
    50ae:	0f 91       	pop	r16
    50b0:	ff 90       	pop	r15
    50b2:	ef 90       	pop	r14
    50b4:	08 95       	ret

000050b6 <newSeqVar>:
{
	return newCollectionWithValues(size, VDM_SEQ,elements);
}

TVP newSeqVar(size_t size, ...)
{
    50b6:	ef 92       	push	r14
    50b8:	ff 92       	push	r15
    50ba:	0f 93       	push	r16
    50bc:	1f 93       	push	r17
    50be:	df 93       	push	r29
    50c0:	cf 93       	push	r28
    50c2:	cd b7       	in	r28, 0x3d	; 61
    50c4:	de b7       	in	r29, 0x3e	; 62
    50c6:	fe 01       	movw	r30, r28
    50c8:	39 96       	adiw	r30, 0x09	; 9
    50ca:	61 91       	ld	r22, Z+
    50cc:	71 91       	ld	r23, Z+
		elements[i]=arg;
	}
	va_end(ap);

	return newCollectionWithValues(size, VDM_SEQ, elements);
}
    50ce:	0d b7       	in	r16, 0x3d	; 61
    50d0:	1e b7       	in	r17, 0x3e	; 62
}

TVP newSeqVar(size_t size, ...)
{
	int i;
	TVP elements[size];
    50d2:	cb 01       	movw	r24, r22
    50d4:	88 0f       	add	r24, r24
    50d6:	99 1f       	adc	r25, r25
    50d8:	2d b7       	in	r18, 0x3d	; 61
    50da:	3e b7       	in	r19, 0x3e	; 62
    50dc:	28 1b       	sub	r18, r24
    50de:	39 0b       	sbc	r19, r25
    50e0:	0f b6       	in	r0, 0x3f	; 63
    50e2:	f8 94       	cli
    50e4:	3e bf       	out	0x3e, r19	; 62
    50e6:	0f be       	out	0x3f, r0	; 63
    50e8:	2d bf       	out	0x3d, r18	; 61
    50ea:	2f 5f       	subi	r18, 0xFF	; 255
    50ec:	3f 4f       	sbci	r19, 0xFF	; 255
{
	return newCollectionWithValues(size, VDM_SEQ,elements);
}

TVP newSeqVar(size_t size, ...)
{
    50ee:	df 01       	movw	r26, r30
    50f0:	f2 2e       	mov	r15, r18
    50f2:	e3 2e       	mov	r14, r19
    50f4:	f9 01       	movw	r30, r18
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	06 c0       	rjmp	.+12     	; 0x5108 <newSeqVar+0x52>
	va_start(ap, size);

	for (i = 0; i < size; i++)
	{
		TVP arg = va_arg(ap, TVP);
		elements[i]=arg;
    50fc:	8d 91       	ld	r24, X+
    50fe:	9d 91       	ld	r25, X+
    5100:	81 93       	st	Z+, r24
    5102:	91 93       	st	Z+, r25
	TVP elements[size];

	va_list ap;
	va_start(ap, size);

	for (i = 0; i < size; i++)
    5104:	2f 5f       	subi	r18, 0xFF	; 255
    5106:	3f 4f       	sbci	r19, 0xFF	; 255
    5108:	26 17       	cp	r18, r22
    510a:	37 07       	cpc	r19, r23
    510c:	b8 f3       	brcs	.-18     	; 0x50fc <newSeqVar+0x46>
		TVP arg = va_arg(ap, TVP);
		elements[i]=arg;
	}
	va_end(ap);

	return newCollectionWithValues(size, VDM_SEQ, elements);
    510e:	cb 01       	movw	r24, r22
    5110:	68 e0       	ldi	r22, 0x08	; 8
    5112:	4f 2d       	mov	r20, r15
    5114:	5e 2d       	mov	r21, r14
    5116:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <newCollectionWithValues>
}
    511a:	0f b6       	in	r0, 0x3f	; 63
    511c:	f8 94       	cli
    511e:	1e bf       	out	0x3e, r17	; 62
    5120:	0f be       	out	0x3f, r0	; 63
    5122:	0d bf       	out	0x3d, r16	; 61
    5124:	cf 91       	pop	r28
    5126:	df 91       	pop	r29
    5128:	1f 91       	pop	r17
    512a:	0f 91       	pop	r16
    512c:	ff 90       	pop	r15
    512e:	ef 90       	pop	r14
    5130:	08 95       	ret

00005132 <newSeqWithValues>:
{
	return newCollectionGC(size, VDM_SEQ, from);
}

TVP newSeqWithValues(size_t size, TVP* elements)
{
    5132:	ab 01       	movw	r20, r22
	return newCollectionWithValues(size, VDM_SEQ,elements);
    5134:	68 e0       	ldi	r22, 0x08	; 8
    5136:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <newCollectionWithValues>
}
    513a:	08 95       	ret

0000513c <newSeq>:



TVP newSeq(size_t size)
{
	return newCollection(size, VDM_SEQ);
    513c:	68 e0       	ldi	r22, 0x08	; 8
    513e:	0e 94 67 16 	call	0x2cce	; 0x2cce <newCollection>
}
    5142:	08 95       	ret

00005144 <vdmSeqReverse>:

	return concVal;
}

TVP vdmSeqReverse(TVP seq)
{
    5144:	8f 92       	push	r8
    5146:	9f 92       	push	r9
    5148:	af 92       	push	r10
    514a:	bf 92       	push	r11
    514c:	cf 92       	push	r12
    514e:	df 92       	push	r13
    5150:	ef 92       	push	r14
    5152:	ff 92       	push	r15
    5154:	0f 93       	push	r16
    5156:	1f 93       	push	r17
    5158:	cf 93       	push	r28
    515a:	df 93       	push	r29
    515c:	fc 01       	movw	r30, r24
	int i;

	ASSERT_CHECK(seq);
    515e:	80 81       	ld	r24, Z
    5160:	88 30       	cpi	r24, 0x08	; 8
    5162:	11 f0       	breq	.+4      	; 0x5168 <vdmSeqReverse+0x24>
    5164:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    5168:	c3 80       	ldd	r12, Z+3	; 0x03
    516a:	d4 80       	ldd	r13, Z+4	; 0x04



TVP newSeq(size_t size)
{
	return newCollection(size, VDM_SEQ);
    516c:	d6 01       	movw	r26, r12
    516e:	12 96       	adiw	r26, 0x02	; 2
    5170:	8d 91       	ld	r24, X+
    5172:	9c 91       	ld	r25, X
    5174:	13 97       	sbiw	r26, 0x03	; 3
    5176:	68 e0       	ldi	r22, 0x08	; 8
    5178:	0e 94 67 16 	call	0x2cce	; 0x2cce <newCollection>
    517c:	5c 01       	movw	r10, r24
	ASSERT_CHECK(seq);
	UNWRAP_COLLECTION(col,seq);

	/* malloc  */
	TVP elemsVal = newSeq(col->size);
	UNWRAP_COLLECTION(elems,elemsVal);
    517e:	fc 01       	movw	r30, r24
    5180:	83 80       	ldd	r8, Z+3	; 0x03
    5182:	94 80       	ldd	r9, Z+4	; 0x04
    5184:	d6 01       	movw	r26, r12
    5186:	12 96       	adiw	r26, 0x02	; 2
    5188:	cd 91       	ld	r28, X+
    518a:	dc 91       	ld	r29, X
    518c:	13 97       	sbiw	r26, 0x03	; 3
    518e:	21 97       	sbiw	r28, 0x01	; 1
    5190:	cc 0f       	add	r28, r28
    5192:	dd 1f       	adc	r29, r29
    5194:	ee 24       	eor	r14, r14
    5196:	ff 24       	eor	r15, r15
    5198:	18 c0       	rjmp	.+48     	; 0x51ca <vdmSeqReverse+0x86>

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
    519a:	c7 01       	movw	r24, r14
    519c:	88 0f       	add	r24, r24
    519e:	99 1f       	adc	r25, r25
    51a0:	f4 01       	movw	r30, r8
    51a2:	00 81       	ld	r16, Z
    51a4:	11 81       	ldd	r17, Z+1	; 0x01
    51a6:	08 0f       	add	r16, r24
    51a8:	19 1f       	adc	r17, r25
    51aa:	d6 01       	movw	r26, r12
    51ac:	ed 91       	ld	r30, X+
    51ae:	fc 91       	ld	r31, X
    51b0:	ec 0f       	add	r30, r28
    51b2:	fd 1f       	adc	r31, r29
    51b4:	80 81       	ld	r24, Z
    51b6:	91 81       	ldd	r25, Z+1	; 0x01
    51b8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    51bc:	f8 01       	movw	r30, r16
    51be:	91 83       	std	Z+1, r25	; 0x01
    51c0:	80 83       	st	Z, r24
	TVP elemsVal = newSeq(col->size);
	UNWRAP_COLLECTION(elems,elemsVal);

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    51c2:	08 94       	sec
    51c4:	e1 1c       	adc	r14, r1
    51c6:	f1 1c       	adc	r15, r1
    51c8:	22 97       	sbiw	r28, 0x02	; 2
    51ca:	d6 01       	movw	r26, r12
    51cc:	12 96       	adiw	r26, 0x02	; 2
    51ce:	8d 91       	ld	r24, X+
    51d0:	9c 91       	ld	r25, X
    51d2:	13 97       	sbiw	r26, 0x03	; 3
    51d4:	e8 16       	cp	r14, r24
    51d6:	f9 06       	cpc	r15, r25
    51d8:	04 f3       	brlt	.-64     	; 0x519a <vdmSeqReverse+0x56>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
	}

	return elemsVal;
}
    51da:	c5 01       	movw	r24, r10
    51dc:	df 91       	pop	r29
    51de:	cf 91       	pop	r28
    51e0:	1f 91       	pop	r17
    51e2:	0f 91       	pop	r16
    51e4:	ff 90       	pop	r15
    51e6:	ef 90       	pop	r14
    51e8:	df 90       	pop	r13
    51ea:	cf 90       	pop	r12
    51ec:	bf 90       	pop	r11
    51ee:	af 90       	pop	r10
    51f0:	9f 90       	pop	r9
    51f2:	8f 90       	pop	r8
    51f4:	08 95       	ret

000051f6 <vdmSeqConc>:
	return indsVal;
}
#endif

TVP vdmSeqConc(TVP seq,TVP seq2)
{
    51f6:	8f 92       	push	r8
    51f8:	9f 92       	push	r9
    51fa:	af 92       	push	r10
    51fc:	bf 92       	push	r11
    51fe:	cf 92       	push	r12
    5200:	df 92       	push	r13
    5202:	ef 92       	push	r14
    5204:	ff 92       	push	r15
    5206:	0f 93       	push	r16
    5208:	1f 93       	push	r17
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	fc 01       	movw	r30, r24
    5210:	db 01       	movw	r26, r22
	int i;

	ASSERT_CHECK(seq);
    5212:	80 81       	ld	r24, Z
    5214:	88 30       	cpi	r24, 0x08	; 8
    5216:	19 f4       	brne	.+6      	; 0x521e <vdmSeqConc+0x28>
	ASSERT_CHECK(seq2);
    5218:	8c 91       	ld	r24, X
    521a:	88 30       	cpi	r24, 0x08	; 8
    521c:	11 f0       	breq	.+4      	; 0x5222 <vdmSeqConc+0x2c>
    521e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    5222:	e3 80       	ldd	r14, Z+3	; 0x03
    5224:	f4 80       	ldd	r15, Z+4	; 0x04
	UNWRAP_COLLECTION(col2,seq2);
    5226:	13 96       	adiw	r26, 0x03	; 3
    5228:	ad 90       	ld	r10, X+
    522a:	bc 90       	ld	r11, X
    522c:	14 97       	sbiw	r26, 0x04	; 4



TVP newSeq(size_t size)
{
	return newCollection(size, VDM_SEQ);
    522e:	d5 01       	movw	r26, r10
    5230:	12 96       	adiw	r26, 0x02	; 2
    5232:	8d 91       	ld	r24, X+
    5234:	9c 91       	ld	r25, X
    5236:	13 97       	sbiw	r26, 0x03	; 3
    5238:	f7 01       	movw	r30, r14
    523a:	22 81       	ldd	r18, Z+2	; 0x02
    523c:	33 81       	ldd	r19, Z+3	; 0x03
    523e:	82 0f       	add	r24, r18
    5240:	93 1f       	adc	r25, r19
    5242:	68 e0       	ldi	r22, 0x08	; 8
    5244:	0e 94 67 16 	call	0x2cce	; 0x2cce <newCollection>
    5248:	6c 01       	movw	r12, r24
	UNWRAP_COLLECTION(col,seq);
	UNWRAP_COLLECTION(col2,seq2);

	/* malloc  */
	TVP concVal = newSeq(col->size+col2->size);
	UNWRAP_COLLECTION(concSeq,concVal);
    524a:	dc 01       	movw	r26, r24
    524c:	13 96       	adiw	r26, 0x03	; 3
    524e:	8d 90       	ld	r8, X+
    5250:	9c 90       	ld	r9, X
    5252:	14 97       	sbiw	r26, 0x04	; 4
    5254:	c0 e0       	ldi	r28, 0x00	; 0
    5256:	d0 e0       	ldi	r29, 0x00	; 0
    5258:	15 c0       	rjmp	.+42     	; 0x5284 <vdmSeqConc+0x8e>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    525a:	ce 01       	movw	r24, r28
    525c:	88 0f       	add	r24, r24
    525e:	99 1f       	adc	r25, r25
	{
		concSeq->value[i] = vdmClone(col->value[i]);
    5260:	f4 01       	movw	r30, r8
    5262:	00 81       	ld	r16, Z
    5264:	11 81       	ldd	r17, Z+1	; 0x01
    5266:	08 0f       	add	r16, r24
    5268:	19 1f       	adc	r17, r25
    526a:	d7 01       	movw	r26, r14
    526c:	ed 91       	ld	r30, X+
    526e:	fc 91       	ld	r31, X
    5270:	e8 0f       	add	r30, r24
    5272:	f9 1f       	adc	r31, r25
    5274:	80 81       	ld	r24, Z
    5276:	91 81       	ldd	r25, Z+1	; 0x01
    5278:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    527c:	f8 01       	movw	r30, r16
    527e:	91 83       	std	Z+1, r25	; 0x01
    5280:	80 83       	st	Z, r24
	/* malloc  */
	TVP concVal = newSeq(col->size+col2->size);
	UNWRAP_COLLECTION(concSeq,concVal);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    5282:	21 96       	adiw	r28, 0x01	; 1
    5284:	d7 01       	movw	r26, r14
    5286:	12 96       	adiw	r26, 0x02	; 2
    5288:	8d 91       	ld	r24, X+
    528a:	9c 91       	ld	r25, X
    528c:	13 97       	sbiw	r26, 0x03	; 3
    528e:	c8 17       	cp	r28, r24
    5290:	d9 07       	cpc	r29, r25
    5292:	1c f3       	brlt	.-58     	; 0x525a <vdmSeqConc+0x64>
    5294:	7c 01       	movw	r14, r24
    5296:	ee 0c       	add	r14, r14
    5298:	ff 1c       	adc	r15, r15
    529a:	c0 e0       	ldi	r28, 0x00	; 0
    529c:	d0 e0       	ldi	r29, 0x00	; 0
    529e:	19 c0       	rjmp	.+50     	; 0x52d2 <vdmSeqConc+0xdc>
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
    52a0:	f4 01       	movw	r30, r8
    52a2:	00 81       	ld	r16, Z
    52a4:	11 81       	ldd	r17, Z+1	; 0x01
    52a6:	0e 0d       	add	r16, r14
    52a8:	1f 1d       	adc	r17, r15
    52aa:	ce 01       	movw	r24, r28
    52ac:	88 0f       	add	r24, r24
    52ae:	99 1f       	adc	r25, r25
    52b0:	d5 01       	movw	r26, r10
    52b2:	ed 91       	ld	r30, X+
    52b4:	fc 91       	ld	r31, X
    52b6:	e8 0f       	add	r30, r24
    52b8:	f9 1f       	adc	r31, r25
    52ba:	80 81       	ld	r24, Z
    52bc:	91 81       	ldd	r25, Z+1	; 0x01
    52be:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    52c2:	f8 01       	movw	r30, r16
    52c4:	91 83       	std	Z+1, r25	; 0x01
    52c6:	80 83       	st	Z, r24
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
    52c8:	21 96       	adiw	r28, 0x01	; 1
    52ca:	82 e0       	ldi	r24, 0x02	; 2
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	e8 0e       	add	r14, r24
    52d0:	f9 1e       	adc	r15, r25
    52d2:	d5 01       	movw	r26, r10
    52d4:	12 96       	adiw	r26, 0x02	; 2
    52d6:	8d 91       	ld	r24, X+
    52d8:	9c 91       	ld	r25, X
    52da:	13 97       	sbiw	r26, 0x03	; 3
    52dc:	c8 17       	cp	r28, r24
    52de:	d9 07       	cpc	r29, r25
    52e0:	fc f2       	brlt	.-66     	; 0x52a0 <vdmSeqConc+0xaa>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
	}

	return concVal;
}
    52e2:	c6 01       	movw	r24, r12
    52e4:	df 91       	pop	r29
    52e6:	cf 91       	pop	r28
    52e8:	1f 91       	pop	r17
    52ea:	0f 91       	pop	r16
    52ec:	ff 90       	pop	r15
    52ee:	ef 90       	pop	r14
    52f0:	df 90       	pop	r13
    52f2:	cf 90       	pop	r12
    52f4:	bf 90       	pop	r11
    52f6:	af 90       	pop	r10
    52f8:	9f 90       	pop	r9
    52fa:	8f 90       	pop	r8
    52fc:	08 95       	ret

000052fe <vdmSeqTl>:
	UNWRAP_COLLECTION(col,seq);
	return vdmCloneGC(col->value[0], from);
}

TVP vdmSeqTl(TVP seq)
{
    52fe:	8f 92       	push	r8
    5300:	9f 92       	push	r9
    5302:	af 92       	push	r10
    5304:	bf 92       	push	r11
    5306:	cf 92       	push	r12
    5308:	df 92       	push	r13
    530a:	ef 92       	push	r14
    530c:	ff 92       	push	r15
    530e:	0f 93       	push	r16
    5310:	1f 93       	push	r17
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	fc 01       	movw	r30, r24
	int i;

	ASSERT_CHECK(seq);
    5318:	80 81       	ld	r24, Z
    531a:	88 30       	cpi	r24, 0x08	; 8
    531c:	11 f0       	breq	.+4      	; 0x5322 <vdmSeqTl+0x24>
    531e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col,seq);
    5322:	a3 80       	ldd	r10, Z+3	; 0x03
    5324:	b4 80       	ldd	r11, Z+4	; 0x04



TVP newSeq(size_t size)
{
	return newCollection(size, VDM_SEQ);
    5326:	d5 01       	movw	r26, r10
    5328:	12 96       	adiw	r26, 0x02	; 2
    532a:	8d 91       	ld	r24, X+
    532c:	9c 91       	ld	r25, X
    532e:	13 97       	sbiw	r26, 0x03	; 3
    5330:	01 97       	sbiw	r24, 0x01	; 1
    5332:	68 e0       	ldi	r22, 0x08	; 8
    5334:	0e 94 67 16 	call	0x2cce	; 0x2cce <newCollection>
    5338:	6c 01       	movw	r12, r24
	ASSERT_CHECK(seq);
	UNWRAP_COLLECTION(col,seq);

	/* malloc  */
	TVP tailVal = newSeq(col->size-1);
	UNWRAP_COLLECTION(tail,tailVal);
    533a:	fc 01       	movw	r30, r24
    533c:	83 80       	ldd	r8, Z+3	; 0x03
    533e:	94 80       	ldd	r9, Z+4	; 0x04
    5340:	c1 e0       	ldi	r28, 0x01	; 1
    5342:	d0 e0       	ldi	r29, 0x00	; 0
    5344:	ee 24       	eor	r14, r14
    5346:	ff 24       	eor	r15, r15
    5348:	19 c0       	rjmp	.+50     	; 0x537c <vdmSeqTl+0x7e>

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
	{
		tail->value[i-1] = vdmClone(col->value[i]);
    534a:	d4 01       	movw	r26, r8
    534c:	0d 91       	ld	r16, X+
    534e:	1c 91       	ld	r17, X
    5350:	0e 0d       	add	r16, r14
    5352:	1f 1d       	adc	r17, r15
    5354:	ce 01       	movw	r24, r28
    5356:	88 0f       	add	r24, r24
    5358:	99 1f       	adc	r25, r25
    535a:	d5 01       	movw	r26, r10
    535c:	ed 91       	ld	r30, X+
    535e:	fc 91       	ld	r31, X
    5360:	e8 0f       	add	r30, r24
    5362:	f9 1f       	adc	r31, r25
    5364:	80 81       	ld	r24, Z
    5366:	91 81       	ldd	r25, Z+1	; 0x01
    5368:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    536c:	f8 01       	movw	r30, r16
    536e:	91 83       	std	Z+1, r25	; 0x01
    5370:	80 83       	st	Z, r24
	/* malloc  */
	TVP tailVal = newSeq(col->size-1);
	UNWRAP_COLLECTION(tail,tailVal);

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    5372:	21 96       	adiw	r28, 0x01	; 1
    5374:	82 e0       	ldi	r24, 0x02	; 2
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	e8 0e       	add	r14, r24
    537a:	f9 1e       	adc	r15, r25
    537c:	d5 01       	movw	r26, r10
    537e:	12 96       	adiw	r26, 0x02	; 2
    5380:	8d 91       	ld	r24, X+
    5382:	9c 91       	ld	r25, X
    5384:	13 97       	sbiw	r26, 0x03	; 3
    5386:	c8 17       	cp	r28, r24
    5388:	d9 07       	cpc	r29, r25
    538a:	fc f2       	brlt	.-66     	; 0x534a <vdmSeqTl+0x4c>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
	}

	return tailVal;
}
    538c:	c6 01       	movw	r24, r12
    538e:	df 91       	pop	r29
    5390:	cf 91       	pop	r28
    5392:	1f 91       	pop	r17
    5394:	0f 91       	pop	r16
    5396:	ff 90       	pop	r15
    5398:	ef 90       	pop	r14
    539a:	df 90       	pop	r13
    539c:	cf 90       	pop	r12
    539e:	bf 90       	pop	r11
    53a0:	af 90       	pop	r10
    53a2:	9f 90       	pop	r9
    53a4:	8f 90       	pop	r8
    53a6:	08 95       	ret

000053a8 <vdmSetElementAt>:
}


TVP vdmSetElementAt(TVP set, int loc)
{
	UNWRAP_COLLECTION(col, set);
    53a8:	dc 01       	movw	r26, r24
    53aa:	13 96       	adiw	r26, 0x03	; 3
    53ac:	ed 91       	ld	r30, X+
    53ae:	fc 91       	ld	r31, X
    53b0:	14 97       	sbiw	r26, 0x04	; 4

	if(loc >= col->size)
    53b2:	82 81       	ldd	r24, Z+2	; 0x02
    53b4:	93 81       	ldd	r25, Z+3	; 0x03
    53b6:	68 17       	cp	r22, r24
    53b8:	79 07       	cpc	r23, r25
    53ba:	1c f0       	brlt	.+6      	; 0x53c2 <vdmSetElementAt+0x1a>
    53bc:	20 e0       	ldi	r18, 0x00	; 0
    53be:	30 e0       	ldi	r19, 0x00	; 0
    53c0:	0c c0       	rjmp	.+24     	; 0x53da <vdmSetElementAt+0x32>
	{
		return NULL;
	}

	return vdmClone(col->value[loc]);
    53c2:	66 0f       	add	r22, r22
    53c4:	77 1f       	adc	r23, r23
    53c6:	01 90       	ld	r0, Z+
    53c8:	f0 81       	ld	r31, Z
    53ca:	e0 2d       	mov	r30, r0
    53cc:	e6 0f       	add	r30, r22
    53ce:	f7 1f       	adc	r31, r23
    53d0:	80 81       	ld	r24, Z
    53d2:	91 81       	ldd	r25, Z+1	; 0x01
    53d4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    53d8:	9c 01       	movw	r18, r24
}
    53da:	c9 01       	movw	r24, r18
    53dc:	08 95       	ret

000053de <vdmSetCardGC>:
	return newInt(col->size);
}


TVP vdmSetCardGC(TVP set, TVP *from)
{
    53de:	fc 01       	movw	r30, r24
	ASSERT_CHECK(set);
    53e0:	80 81       	ld	r24, Z
    53e2:	87 30       	cpi	r24, 0x07	; 7
    53e4:	11 f0       	breq	.+4      	; 0x53ea <vdmSetCardGC+0xc>
    53e6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col, set);

	return newIntGC(col->size, from);
    53ea:	03 80       	ldd	r0, Z+3	; 0x03
    53ec:	f4 81       	ldd	r31, Z+4	; 0x04
    53ee:	e0 2d       	mov	r30, r0
    53f0:	82 81       	ldd	r24, Z+2	; 0x02
    53f2:	93 81       	ldd	r25, Z+3	; 0x03
    53f4:	0e 94 9b 22 	call	0x4536	; 0x4536 <newIntGC>
}
    53f8:	08 95       	ret

000053fa <vdmSetCard>:
}



TVP vdmSetCard(TVP set)
{
    53fa:	fc 01       	movw	r30, r24
	ASSERT_CHECK(set);
    53fc:	80 81       	ld	r24, Z
    53fe:	87 30       	cpi	r24, 0x07	; 7
    5400:	11 f0       	breq	.+4      	; 0x5406 <vdmSetCard+0xc>
    5402:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	UNWRAP_COLLECTION(col, set);

	return newInt(col->size);
    5406:	03 80       	ldd	r0, Z+3	; 0x03
    5408:	f4 81       	ldd	r31, Z+4	; 0x04
    540a:	e0 2d       	mov	r30, r0
    540c:	82 81       	ldd	r24, Z+2	; 0x02
    540e:	93 81       	ldd	r25, Z+3	; 0x03
    5410:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
}
    5414:	08 95       	ret

00005416 <vdmSetNotEqualsGC>:
	return vdmInEquals(set1, set2);
}


TVP vdmSetNotEqualsGC(TVP set1, TVP set2, TVP *from)
{
    5416:	fc 01       	movw	r30, r24
    5418:	db 01       	movw	r26, r22
	ASSERT_CHECK(set1);
    541a:	80 81       	ld	r24, Z
    541c:	87 30       	cpi	r24, 0x07	; 7
    541e:	19 f4       	brne	.+6      	; 0x5426 <vdmSetNotEqualsGC+0x10>
	ASSERT_CHECK(set2);
    5420:	8c 91       	ld	r24, X
    5422:	87 30       	cpi	r24, 0x07	; 7
    5424:	11 f0       	breq	.+4      	; 0x542a <vdmSetNotEqualsGC+0x14>
    5426:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	return vdmInEqualsGC(set1, set2, from);
    542a:	cf 01       	movw	r24, r30
    542c:	0e 94 45 14 	call	0x288a	; 0x288a <vdmInEqualsGC>
}
    5430:	08 95       	ret

00005432 <vdmSetNotEquals>:
	return newBool(subsetRes);
}


TVP vdmSetNotEquals(TVP set1, TVP set2)
{
    5432:	fc 01       	movw	r30, r24
    5434:	db 01       	movw	r26, r22
	ASSERT_CHECK(set1);
    5436:	80 81       	ld	r24, Z
    5438:	87 30       	cpi	r24, 0x07	; 7
    543a:	19 f4       	brne	.+6      	; 0x5442 <vdmSetNotEquals+0x10>
	ASSERT_CHECK(set2);
    543c:	8c 91       	ld	r24, X
    543e:	87 30       	cpi	r24, 0x07	; 7
    5440:	11 f0       	breq	.+4      	; 0x5446 <vdmSetNotEquals+0x14>
    5442:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	return vdmInEquals(set1, set2);
    5446:	cf 01       	movw	r24, r30
    5448:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <vdmInEquals>
}
    544c:	08 95       	ret

0000544e <vdmSetMemberOfGC>:
	return newBool(found);
}


TVP vdmSetMemberOfGC(TVP set, TVP element, TVP *from)
{
    544e:	af 92       	push	r10
    5450:	bf 92       	push	r11
    5452:	cf 92       	push	r12
    5454:	df 92       	push	r13
    5456:	ef 92       	push	r14
    5458:	ff 92       	push	r15
    545a:	1f 93       	push	r17
    545c:	cf 93       	push	r28
    545e:	df 93       	push	r29
    5460:	fc 01       	movw	r30, r24
    5462:	6b 01       	movw	r12, r22
    5464:	5a 01       	movw	r10, r20
	int i;

	ASSERT_CHECK(set);
    5466:	80 81       	ld	r24, Z
    5468:	87 30       	cpi	r24, 0x07	; 7
    546a:	11 f0       	breq	.+4      	; 0x5470 <vdmSetMemberOfGC+0x22>
    546c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col,set);
    5470:	e3 80       	ldd	r14, Z+3	; 0x03
    5472:	f4 80       	ldd	r15, Z+4	; 0x04
    5474:	c0 e0       	ldi	r28, 0x00	; 0
    5476:	d0 e0       	ldi	r29, 0x00	; 0
    5478:	10 e0       	ldi	r17, 0x00	; 0
    547a:	17 c0       	rjmp	.+46     	; 0x54aa <vdmSetMemberOfGC+0x5c>

	bool found = false;

	for (i = 0; i < col->size; i++)
	{
		found|= equals(col->value[i],element);
    547c:	ce 01       	movw	r24, r28
    547e:	88 0f       	add	r24, r24
    5480:	99 1f       	adc	r25, r25
    5482:	d7 01       	movw	r26, r14
    5484:	ed 91       	ld	r30, X+
    5486:	fc 91       	ld	r31, X
    5488:	e8 0f       	add	r30, r24
    548a:	f9 1f       	adc	r31, r25
    548c:	80 81       	ld	r24, Z
    548e:	91 81       	ldd	r25, Z+1	; 0x01
    5490:	b6 01       	movw	r22, r12
    5492:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	21 2f       	mov	r18, r17
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	82 2b       	or	r24, r18
    549e:	93 2b       	or	r25, r19
    54a0:	10 e0       	ldi	r17, 0x00	; 0
    54a2:	89 2b       	or	r24, r25
    54a4:	09 f0       	breq	.+2      	; 0x54a8 <vdmSetMemberOfGC+0x5a>
    54a6:	11 e0       	ldi	r17, 0x01	; 1

	UNWRAP_COLLECTION(col,set);

	bool found = false;

	for (i = 0; i < col->size; i++)
    54a8:	21 96       	adiw	r28, 0x01	; 1
    54aa:	f7 01       	movw	r30, r14
    54ac:	82 81       	ldd	r24, Z+2	; 0x02
    54ae:	93 81       	ldd	r25, Z+3	; 0x03
    54b0:	c8 17       	cp	r28, r24
    54b2:	d9 07       	cpc	r29, r25
    54b4:	1c f3       	brlt	.-58     	; 0x547c <vdmSetMemberOfGC+0x2e>
	{
		found|= equals(col->value[i],element);
	}

	return newBoolGC(found, from);
    54b6:	81 2f       	mov	r24, r17
    54b8:	b5 01       	movw	r22, r10
    54ba:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	1f 91       	pop	r17
    54c4:	ff 90       	pop	r15
    54c6:	ef 90       	pop	r14
    54c8:	df 90       	pop	r13
    54ca:	cf 90       	pop	r12
    54cc:	bf 90       	pop	r11
    54ce:	af 90       	pop	r10
    54d0:	08 95       	ret

000054d2 <vdmSetMemberOf>:
}



TVP vdmSetMemberOf(TVP set, TVP element)
{
    54d2:	cf 92       	push	r12
    54d4:	df 92       	push	r13
    54d6:	ef 92       	push	r14
    54d8:	ff 92       	push	r15
    54da:	1f 93       	push	r17
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	fc 01       	movw	r30, r24
    54e2:	6b 01       	movw	r12, r22
	int i;

	ASSERT_CHECK(set);
    54e4:	80 81       	ld	r24, Z
    54e6:	87 30       	cpi	r24, 0x07	; 7
    54e8:	11 f0       	breq	.+4      	; 0x54ee <vdmSetMemberOf+0x1c>
    54ea:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col,set);
    54ee:	e3 80       	ldd	r14, Z+3	; 0x03
    54f0:	f4 80       	ldd	r15, Z+4	; 0x04
    54f2:	c0 e0       	ldi	r28, 0x00	; 0
    54f4:	d0 e0       	ldi	r29, 0x00	; 0
    54f6:	10 e0       	ldi	r17, 0x00	; 0
    54f8:	17 c0       	rjmp	.+46     	; 0x5528 <vdmSetMemberOf+0x56>

	bool found = false;

	for (i = 0; i < col->size; i++)
	{
		found|= equals(col->value[i],element);
    54fa:	ce 01       	movw	r24, r28
    54fc:	88 0f       	add	r24, r24
    54fe:	99 1f       	adc	r25, r25
    5500:	d7 01       	movw	r26, r14
    5502:	ed 91       	ld	r30, X+
    5504:	fc 91       	ld	r31, X
    5506:	e8 0f       	add	r30, r24
    5508:	f9 1f       	adc	r31, r25
    550a:	80 81       	ld	r24, Z
    550c:	91 81       	ldd	r25, Z+1	; 0x01
    550e:	b6 01       	movw	r22, r12
    5510:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	21 2f       	mov	r18, r17
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	82 2b       	or	r24, r18
    551c:	93 2b       	or	r25, r19
    551e:	10 e0       	ldi	r17, 0x00	; 0
    5520:	89 2b       	or	r24, r25
    5522:	09 f0       	breq	.+2      	; 0x5526 <vdmSetMemberOf+0x54>
    5524:	11 e0       	ldi	r17, 0x01	; 1

	UNWRAP_COLLECTION(col,set);

	bool found = false;

	for (i = 0; i < col->size; i++)
    5526:	21 96       	adiw	r28, 0x01	; 1
    5528:	f7 01       	movw	r30, r14
    552a:	82 81       	ldd	r24, Z+2	; 0x02
    552c:	93 81       	ldd	r25, Z+3	; 0x03
    552e:	c8 17       	cp	r28, r24
    5530:	d9 07       	cpc	r29, r25
    5532:	1c f3       	brlt	.-58     	; 0x54fa <vdmSetMemberOf+0x28>
	{
		found|= equals(col->value[i],element);
	}

	return newBool(found);
    5534:	81 2f       	mov	r24, r17
    5536:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    553a:	df 91       	pop	r29
    553c:	cf 91       	pop	r28
    553e:	1f 91       	pop	r17
    5540:	ff 90       	pop	r15
    5542:	ef 90       	pop	r14
    5544:	df 90       	pop	r13
    5546:	cf 90       	pop	r12
    5548:	08 95       	ret

0000554a <vdmSetSubsetGC>:
}



TVP vdmSetSubsetGC(TVP set1, TVP set2, TVP *from)
{
    554a:	cf 92       	push	r12
    554c:	df 92       	push	r13
    554e:	ef 92       	push	r14
    5550:	ff 92       	push	r15
    5552:	0f 93       	push	r16
    5554:	1f 93       	push	r17
    5556:	cf 93       	push	r28
    5558:	df 93       	push	r29
    555a:	fc 01       	movw	r30, r24
    555c:	7b 01       	movw	r14, r22
    555e:	6a 01       	movw	r12, r20
	int i;
	TVP res;

	ASSERT_CHECK(set1);
    5560:	80 81       	ld	r24, Z
    5562:	87 30       	cpi	r24, 0x07	; 7
    5564:	21 f4       	brne	.+8      	; 0x556e <vdmSetSubsetGC+0x24>
	ASSERT_CHECK(set2);
    5566:	db 01       	movw	r26, r22
    5568:	8c 91       	ld	r24, X
    556a:	87 30       	cpi	r24, 0x07	; 7
    556c:	11 f0       	breq	.+4      	; 0x5572 <vdmSetSubsetGC+0x28>
    556e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
    5572:	03 81       	ldd	r16, Z+3	; 0x03
    5574:	14 81       	ldd	r17, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);

	if(col1-> size > col2->size)
    5576:	db 01       	movw	r26, r22
    5578:	13 96       	adiw	r26, 0x03	; 3
    557a:	ed 91       	ld	r30, X+
    557c:	fc 91       	ld	r31, X
    557e:	14 97       	sbiw	r26, 0x04	; 4
    5580:	d8 01       	movw	r26, r16
    5582:	12 96       	adiw	r26, 0x02	; 2
    5584:	2d 91       	ld	r18, X+
    5586:	3c 91       	ld	r19, X
    5588:	13 97       	sbiw	r26, 0x03	; 3
    558a:	82 81       	ldd	r24, Z+2	; 0x02
    558c:	93 81       	ldd	r25, Z+3	; 0x03
    558e:	82 17       	cp	r24, r18
    5590:	93 07       	cpc	r25, r19
    5592:	bc f0       	brlt	.+46     	; 0x55c2 <vdmSetSubsetGC+0x78>
    5594:	c0 e0       	ldi	r28, 0x00	; 0
    5596:	d0 e0       	ldi	r29, 0x00	; 0
    5598:	1a c0       	rjmp	.+52     	; 0x55ce <vdmSetSubsetGC+0x84>
	}

	for(i = 0; i < col1->size; i++)
	{

		res = vdmSetMemberOf(set2, (col1->value)[i]);
    559a:	ce 01       	movw	r24, r28
    559c:	88 0f       	add	r24, r24
    559e:	99 1f       	adc	r25, r25
    55a0:	d8 01       	movw	r26, r16
    55a2:	ed 91       	ld	r30, X+
    55a4:	fc 91       	ld	r31, X
    55a6:	e8 0f       	add	r30, r24
    55a8:	f9 1f       	adc	r31, r25
    55aa:	60 81       	ld	r22, Z
    55ac:	71 81       	ldd	r23, Z+1	; 0x01
    55ae:	c7 01       	movw	r24, r14
    55b0:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <vdmSetMemberOf>
    55b4:	fc 01       	movw	r30, r24
		if(!res->value.boolVal)
    55b6:	83 81       	ldd	r24, Z+3	; 0x03
    55b8:	88 23       	and	r24, r24
    55ba:	29 f4       	brne	.+10     	; 0x55c6 <vdmSetSubsetGC+0x7c>
		{
			free(res);
    55bc:	cf 01       	movw	r24, r30
    55be:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
			return newBoolGC(false, from);
    55c2:	80 e0       	ldi	r24, 0x00	; 0
    55c4:	0b c0       	rjmp	.+22     	; 0x55dc <vdmSetSubsetGC+0x92>
		}
		free(res);
    55c6:	cf 01       	movw	r24, r30
    55c8:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	if(col1-> size > col2->size)
	{
		return newBoolGC(false, from);
	}

	for(i = 0; i < col1->size; i++)
    55cc:	21 96       	adiw	r28, 0x01	; 1
    55ce:	f8 01       	movw	r30, r16
    55d0:	82 81       	ldd	r24, Z+2	; 0x02
    55d2:	93 81       	ldd	r25, Z+3	; 0x03
    55d4:	c8 17       	cp	r28, r24
    55d6:	d9 07       	cpc	r29, r25
    55d8:	04 f3       	brlt	.-64     	; 0x559a <vdmSetSubsetGC+0x50>
			return newBoolGC(false, from);
		}
		free(res);
	}

	return newBoolGC(true, from);
    55da:	81 e0       	ldi	r24, 0x01	; 1
    55dc:	b6 01       	movw	r22, r12
    55de:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	1f 91       	pop	r17
    55e8:	0f 91       	pop	r16
    55ea:	ff 90       	pop	r15
    55ec:	ef 90       	pop	r14
    55ee:	df 90       	pop	r13
    55f0:	cf 90       	pop	r12
    55f2:	08 95       	ret

000055f4 <vdmSetProperSubsetGC>:
	return vdmSetSubset(set1, set2);
}


TVP vdmSetProperSubsetGC(TVP set1, TVP set2, TVP *from)
{
    55f4:	cf 93       	push	r28
    55f6:	df 93       	push	r29
    55f8:	ec 01       	movw	r28, r24
	ASSERT_CHECK(set1);
    55fa:	88 81       	ld	r24, Y
    55fc:	87 30       	cpi	r24, 0x07	; 7
    55fe:	21 f4       	brne	.+8      	; 0x5608 <vdmSetProperSubsetGC+0x14>
	ASSERT_CHECK(set2);
    5600:	fb 01       	movw	r30, r22
    5602:	80 81       	ld	r24, Z
    5604:	87 30       	cpi	r24, 0x07	; 7
    5606:	11 f0       	breq	.+4      	; 0x560c <vdmSetProperSubsetGC+0x18>
    5608:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
	UNWRAP_COLLECTION(col2, set2);

	if(col1->size >= col2->size)
    560c:	8b 81       	ldd	r24, Y+3	; 0x03
    560e:	9c 81       	ldd	r25, Y+4	; 0x04
    5610:	fb 01       	movw	r30, r22
    5612:	a3 81       	ldd	r26, Z+3	; 0x03
    5614:	b4 81       	ldd	r27, Z+4	; 0x04
    5616:	fc 01       	movw	r30, r24
    5618:	22 81       	ldd	r18, Z+2	; 0x02
    561a:	33 81       	ldd	r19, Z+3	; 0x03
    561c:	12 96       	adiw	r26, 0x02	; 2
    561e:	8d 91       	ld	r24, X+
    5620:	9c 91       	ld	r25, X
    5622:	13 97       	sbiw	r26, 0x03	; 3
    5624:	28 17       	cp	r18, r24
    5626:	39 07       	cpc	r19, r25
    5628:	2c f0       	brlt	.+10     	; 0x5634 <vdmSetProperSubsetGC+0x40>
	{
		return newBoolGC(false, from);
    562a:	80 e0       	ldi	r24, 0x00	; 0
    562c:	ba 01       	movw	r22, r20
    562e:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
    5632:	03 c0       	rjmp	.+6      	; 0x563a <vdmSetProperSubsetGC+0x46>
	}

	return vdmSetSubsetGC(set1, set2, from);
    5634:	ce 01       	movw	r24, r28
    5636:	0e 94 a5 2a 	call	0x554a	; 0x554a <vdmSetSubsetGC>
}
    563a:	df 91       	pop	r29
    563c:	cf 91       	pop	r28
    563e:	08 95       	ret

00005640 <vdmSetSubset>:
	return resultset;
}


TVP vdmSetSubset(TVP set1, TVP set2)
{
    5640:	ef 92       	push	r14
    5642:	ff 92       	push	r15
    5644:	0f 93       	push	r16
    5646:	1f 93       	push	r17
    5648:	cf 93       	push	r28
    564a:	df 93       	push	r29
    564c:	fc 01       	movw	r30, r24
    564e:	7b 01       	movw	r14, r22
	int i;
	TVP res;

	ASSERT_CHECK(set1);
    5650:	80 81       	ld	r24, Z
    5652:	87 30       	cpi	r24, 0x07	; 7
    5654:	21 f4       	brne	.+8      	; 0x565e <vdmSetSubset+0x1e>
	ASSERT_CHECK(set2);
    5656:	db 01       	movw	r26, r22
    5658:	8c 91       	ld	r24, X
    565a:	87 30       	cpi	r24, 0x07	; 7
    565c:	11 f0       	breq	.+4      	; 0x5662 <vdmSetSubset+0x22>
    565e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
    5662:	03 81       	ldd	r16, Z+3	; 0x03
    5664:	14 81       	ldd	r17, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);

	if(col1-> size > col2->size)
    5666:	db 01       	movw	r26, r22
    5668:	13 96       	adiw	r26, 0x03	; 3
    566a:	ed 91       	ld	r30, X+
    566c:	fc 91       	ld	r31, X
    566e:	14 97       	sbiw	r26, 0x04	; 4
    5670:	d8 01       	movw	r26, r16
    5672:	12 96       	adiw	r26, 0x02	; 2
    5674:	2d 91       	ld	r18, X+
    5676:	3c 91       	ld	r19, X
    5678:	13 97       	sbiw	r26, 0x03	; 3
    567a:	82 81       	ldd	r24, Z+2	; 0x02
    567c:	93 81       	ldd	r25, Z+3	; 0x03
    567e:	82 17       	cp	r24, r18
    5680:	93 07       	cpc	r25, r19
    5682:	bc f0       	brlt	.+46     	; 0x56b2 <vdmSetSubset+0x72>
    5684:	c0 e0       	ldi	r28, 0x00	; 0
    5686:	d0 e0       	ldi	r29, 0x00	; 0
    5688:	1a c0       	rjmp	.+52     	; 0x56be <vdmSetSubset+0x7e>
	}

	for(i = 0; i < col1->size; i++)
	{

		res = vdmSetMemberOf(set2, (col1->value)[i]);
    568a:	ce 01       	movw	r24, r28
    568c:	88 0f       	add	r24, r24
    568e:	99 1f       	adc	r25, r25
    5690:	d8 01       	movw	r26, r16
    5692:	ed 91       	ld	r30, X+
    5694:	fc 91       	ld	r31, X
    5696:	e8 0f       	add	r30, r24
    5698:	f9 1f       	adc	r31, r25
    569a:	60 81       	ld	r22, Z
    569c:	71 81       	ldd	r23, Z+1	; 0x01
    569e:	c7 01       	movw	r24, r14
    56a0:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <vdmSetMemberOf>
    56a4:	fc 01       	movw	r30, r24
		if(!res->value.boolVal)
    56a6:	83 81       	ldd	r24, Z+3	; 0x03
    56a8:	88 23       	and	r24, r24
    56aa:	29 f4       	brne	.+10     	; 0x56b6 <vdmSetSubset+0x76>
		{
			free(res);
    56ac:	cf 01       	movw	r24, r30
    56ae:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
			return newBool(false);
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	0b c0       	rjmp	.+22     	; 0x56cc <vdmSetSubset+0x8c>
		}
		free(res);
    56b6:	cf 01       	movw	r24, r30
    56b8:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	if(col1-> size > col2->size)
	{
		return newBool(false);
	}

	for(i = 0; i < col1->size; i++)
    56bc:	21 96       	adiw	r28, 0x01	; 1
    56be:	f8 01       	movw	r30, r16
    56c0:	82 81       	ldd	r24, Z+2	; 0x02
    56c2:	93 81       	ldd	r25, Z+3	; 0x03
    56c4:	c8 17       	cp	r28, r24
    56c6:	d9 07       	cpc	r29, r25
    56c8:	04 f3       	brlt	.-64     	; 0x568a <vdmSetSubset+0x4a>
			return newBool(false);
		}
		free(res);
	}

	return newBool(true);
    56ca:	81 e0       	ldi	r24, 0x01	; 1
    56cc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    56d0:	df 91       	pop	r29
    56d2:	cf 91       	pop	r28
    56d4:	1f 91       	pop	r17
    56d6:	0f 91       	pop	r16
    56d8:	ff 90       	pop	r15
    56da:	ef 90       	pop	r14
    56dc:	08 95       	ret

000056de <vdmSetEquals>:
}



TVP vdmSetEquals(TVP set1, TVP set2)
{
    56de:	ef 92       	push	r14
    56e0:	ff 92       	push	r15
    56e2:	0f 93       	push	r16
    56e4:	1f 93       	push	r17
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	8c 01       	movw	r16, r24
    56ec:	eb 01       	movw	r28, r22
	ASSERT_CHECK(set1);
    56ee:	fc 01       	movw	r30, r24
    56f0:	80 81       	ld	r24, Z
    56f2:	87 30       	cpi	r24, 0x07	; 7
    56f4:	19 f4       	brne	.+6      	; 0x56fc <vdmSetEquals+0x1e>
	ASSERT_CHECK(set2);
    56f6:	88 81       	ld	r24, Y
    56f8:	87 30       	cpi	r24, 0x07	; 7
    56fa:	11 f0       	breq	.+4      	; 0x5700 <vdmSetEquals+0x22>
    56fc:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	TVP subset12Res;
	TVP subset21Res;
	bool subsetRes;

	/* Check mutual inclusion.  */
	subset12Res = vdmSetSubset(set1, set2);
    5700:	c8 01       	movw	r24, r16
    5702:	0e 94 20 2b 	call	0x5640	; 0x5640 <vdmSetSubset>
    5706:	7c 01       	movw	r14, r24
	subset21Res = vdmSetSubset(set2, set1);
    5708:	ce 01       	movw	r24, r28
    570a:	b8 01       	movw	r22, r16
    570c:	0e 94 20 2b 	call	0x5640	; 0x5640 <vdmSetSubset>
    5710:	8c 01       	movw	r16, r24

	subsetRes = subset12Res->value.boolVal && subset21Res->value.boolVal;
    5712:	f7 01       	movw	r30, r14
    5714:	83 81       	ldd	r24, Z+3	; 0x03
    5716:	88 23       	and	r24, r24
    5718:	19 f4       	brne	.+6      	; 0x5720 <vdmSetEquals+0x42>
    571a:	c0 e0       	ldi	r28, 0x00	; 0
    571c:	d0 e0       	ldi	r29, 0x00	; 0
    571e:	09 c0       	rjmp	.+18     	; 0x5732 <vdmSetEquals+0x54>
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	f8 01       	movw	r30, r16
    5724:	83 81       	ldd	r24, Z+3	; 0x03
    5726:	88 23       	and	r24, r24
    5728:	09 f4       	brne	.+2      	; 0x572c <vdmSetEquals+0x4e>
    572a:	91 e0       	ldi	r25, 0x01	; 1
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	98 27       	eor	r25, r24
    5730:	c9 2f       	mov	r28, r25
	vdmFree(subset12Res);
    5732:	c7 01       	movw	r24, r14
    5734:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	vdmFree(subset21Res);
    5738:	c8 01       	movw	r24, r16
    573a:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	return newBool(subsetRes);
    573e:	8c 2f       	mov	r24, r28
    5740:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	1f 91       	pop	r17
    574a:	0f 91       	pop	r16
    574c:	ff 90       	pop	r15
    574e:	ef 90       	pop	r14
    5750:	08 95       	ret

00005752 <vdmSetProperSubset>:
}



TVP vdmSetProperSubset(TVP set1, TVP set2)
{
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	ec 01       	movw	r28, r24
	ASSERT_CHECK(set1);
    5758:	88 81       	ld	r24, Y
    575a:	87 30       	cpi	r24, 0x07	; 7
    575c:	21 f4       	brne	.+8      	; 0x5766 <vdmSetProperSubset+0x14>
	ASSERT_CHECK(set2);
    575e:	fb 01       	movw	r30, r22
    5760:	80 81       	ld	r24, Z
    5762:	87 30       	cpi	r24, 0x07	; 7
    5764:	11 f0       	breq	.+4      	; 0x576a <vdmSetProperSubset+0x18>
    5766:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
	UNWRAP_COLLECTION(col2, set2);

	if(col1->size >= col2->size)
    576a:	8b 81       	ldd	r24, Y+3	; 0x03
    576c:	9c 81       	ldd	r25, Y+4	; 0x04
    576e:	fb 01       	movw	r30, r22
    5770:	a3 81       	ldd	r26, Z+3	; 0x03
    5772:	b4 81       	ldd	r27, Z+4	; 0x04
    5774:	fc 01       	movw	r30, r24
    5776:	22 81       	ldd	r18, Z+2	; 0x02
    5778:	33 81       	ldd	r19, Z+3	; 0x03
    577a:	12 96       	adiw	r26, 0x02	; 2
    577c:	8d 91       	ld	r24, X+
    577e:	9c 91       	ld	r25, X
    5780:	13 97       	sbiw	r26, 0x03	; 3
    5782:	28 17       	cp	r18, r24
    5784:	39 07       	cpc	r19, r25
    5786:	24 f0       	brlt	.+8      	; 0x5790 <vdmSetProperSubset+0x3e>
	{
		return newBool(false);
    5788:	80 e0       	ldi	r24, 0x00	; 0
    578a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
    578e:	03 c0       	rjmp	.+6      	; 0x5796 <vdmSetProperSubset+0x44>
	}

	return vdmSetSubset(set1, set2);
    5790:	ce 01       	movw	r24, r28
    5792:	0e 94 20 2b 	call	0x5640	; 0x5640 <vdmSetSubset>
}
    5796:	df 91       	pop	r29
    5798:	cf 91       	pop	r28
    579a:	08 95       	ret

0000579c <vdmSetNotMemberOfGC>:

	return newBool(!resval);
}

TVP vdmSetNotMemberOfGC(TVP set, TVP element, TVP *from)
{
    579c:	1f 93       	push	r17
    579e:	cf 93       	push	r28
    57a0:	df 93       	push	r29
    57a2:	fc 01       	movw	r30, r24
    57a4:	ea 01       	movw	r28, r20
	TVP res;
	bool resval;

	ASSERT_CHECK(set);
    57a6:	80 81       	ld	r24, Z
    57a8:	87 30       	cpi	r24, 0x07	; 7
    57aa:	11 f0       	breq	.+4      	; 0x57b0 <vdmSetNotMemberOfGC+0x14>
    57ac:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	res = vdmSetMemberOf(set, element);
    57b0:	cf 01       	movw	r24, r30
    57b2:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <vdmSetMemberOf>
    57b6:	fc 01       	movw	r30, r24
	resval = res->value.boolVal;
    57b8:	13 81       	ldd	r17, Z+3	; 0x03

	vdmFree(res);
    57ba:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	return newBoolGC(!resval, from);
    57be:	81 e0       	ldi	r24, 0x01	; 1
    57c0:	81 27       	eor	r24, r17
    57c2:	be 01       	movw	r22, r28
    57c4:	0e 94 91 22 	call	0x4522	; 0x4522 <newBoolGC>
}
    57c8:	df 91       	pop	r29
    57ca:	cf 91       	pop	r28
    57cc:	1f 91       	pop	r17
    57ce:	08 95       	ret

000057d0 <vdmSetNotMemberOf>:
}



TVP vdmSetNotMemberOf(TVP set, TVP element)
{
    57d0:	1f 93       	push	r17
    57d2:	fc 01       	movw	r30, r24
	TVP res;
	bool resval;

	ASSERT_CHECK(set);
    57d4:	80 81       	ld	r24, Z
    57d6:	87 30       	cpi	r24, 0x07	; 7
    57d8:	11 f0       	breq	.+4      	; 0x57de <vdmSetNotMemberOf+0xe>
    57da:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	res = vdmSetMemberOf(set, element);
    57de:	cf 01       	movw	r24, r30
    57e0:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <vdmSetMemberOf>
    57e4:	fc 01       	movw	r30, r24
	resval = res->value.boolVal;
    57e6:	13 81       	ldd	r17, Z+3	; 0x03

	vdmFree(res);
    57e8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	return newBool(!resval);
    57ec:	81 e0       	ldi	r24, 0x01	; 1
    57ee:	81 27       	eor	r24, r17
    57f0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <newBool>
}
    57f4:	1f 91       	pop	r17
    57f6:	08 95       	ret

000057f8 <vdmSetAdd>:


/* Utility functions.  */
/* ------------------------------------------------  */
static void vdmSetAdd(TVP* value, int* index, TVP newValue)
{
    57f8:	8f 92       	push	r8
    57fa:	9f 92       	push	r9
    57fc:	af 92       	push	r10
    57fe:	bf 92       	push	r11
    5800:	df 92       	push	r13
    5802:	ef 92       	push	r14
    5804:	ff 92       	push	r15
    5806:	0f 93       	push	r16
    5808:	1f 93       	push	r17
    580a:	cf 93       	push	r28
    580c:	df 93       	push	r29
    580e:	5c 01       	movw	r10, r24
    5810:	4b 01       	movw	r8, r22
    5812:	7a 01       	movw	r14, r20
    5814:	8c 01       	movw	r16, r24
    5816:	c0 e0       	ldi	r28, 0x00	; 0
    5818:	d0 e0       	ldi	r29, 0x00	; 0
    581a:	dd 24       	eor	r13, r13
    581c:	13 c0       	rjmp	.+38     	; 0x5844 <vdmSetAdd+0x4c>
	int i;
	bool found = false;

	for (i = 0; i < *index; i++)
	{
		found |= equals(value[i],newValue);
    581e:	f8 01       	movw	r30, r16
    5820:	80 81       	ld	r24, Z
    5822:	91 81       	ldd	r25, Z+1	; 0x01
    5824:	b7 01       	movw	r22, r14
    5826:	0e 94 a6 13 	call	0x274c	; 0x274c <equals>
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	2d 2d       	mov	r18, r13
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	82 2b       	or	r24, r18
    5832:	93 2b       	or	r25, r19
    5834:	dd 24       	eor	r13, r13
    5836:	89 2b       	or	r24, r25
    5838:	11 f0       	breq	.+4      	; 0x583e <vdmSetAdd+0x46>
    583a:	dd 24       	eor	r13, r13
    583c:	d3 94       	inc	r13
static void vdmSetAdd(TVP* value, int* index, TVP newValue)
{
	int i;
	bool found = false;

	for (i = 0; i < *index; i++)
    583e:	21 96       	adiw	r28, 0x01	; 1
    5840:	0e 5f       	subi	r16, 0xFE	; 254
    5842:	1f 4f       	sbci	r17, 0xFF	; 255
    5844:	f4 01       	movw	r30, r8
    5846:	80 81       	ld	r24, Z
    5848:	91 81       	ldd	r25, Z+1	; 0x01
    584a:	c8 17       	cp	r28, r24
    584c:	d9 07       	cpc	r29, r25
    584e:	3c f3       	brlt	.-50     	; 0x581e <vdmSetAdd+0x26>
	{
		found |= equals(value[i],newValue);
	}

	if(!found)
    5850:	dd 20       	and	r13, r13
    5852:	61 f4       	brne	.+24     	; 0x586c <vdmSetAdd+0x74>
	{
		value[*index] = newValue;
    5854:	fc 01       	movw	r30, r24
    5856:	ee 0f       	add	r30, r30
    5858:	ff 1f       	adc	r31, r31
    585a:	ea 0d       	add	r30, r10
    585c:	fb 1d       	adc	r31, r11
    585e:	f1 82       	std	Z+1, r15	; 0x01
    5860:	e0 82       	st	Z, r14
		*index = (*index) + 1;
    5862:	01 96       	adiw	r24, 0x01	; 1
    5864:	f4 01       	movw	r30, r8
    5866:	91 83       	std	Z+1, r25	; 0x01
    5868:	80 83       	st	Z, r24
    586a:	03 c0       	rjmp	.+6      	; 0x5872 <vdmSetAdd+0x7a>
	}
	/* This value is a duplicate, so must not leave it lying around.  */
	else
		vdmFree(newValue);
    586c:	c7 01       	movw	r24, r14
    586e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
}
    5872:	df 91       	pop	r29
    5874:	cf 91       	pop	r28
    5876:	1f 91       	pop	r17
    5878:	0f 91       	pop	r16
    587a:	ff 90       	pop	r15
    587c:	ef 90       	pop	r14
    587e:	df 90       	pop	r13
    5880:	bf 90       	pop	r11
    5882:	af 90       	pop	r10
    5884:	9f 90       	pop	r9
    5886:	8f 90       	pop	r8
    5888:	08 95       	ret

0000588a <vdmSetElementAtGC>:
	return vdmClone(col->value[loc]);
}

TVP vdmSetElementAtGC(TVP set, int loc, TVP *from)
{
	UNWRAP_COLLECTION(col, set);
    588a:	dc 01       	movw	r26, r24
    588c:	13 96       	adiw	r26, 0x03	; 3
    588e:	ed 91       	ld	r30, X+
    5890:	fc 91       	ld	r31, X
    5892:	14 97       	sbiw	r26, 0x04	; 4

	if(loc >= col->size)
    5894:	82 81       	ldd	r24, Z+2	; 0x02
    5896:	93 81       	ldd	r25, Z+3	; 0x03
    5898:	68 17       	cp	r22, r24
    589a:	79 07       	cpc	r23, r25
    589c:	1c f0       	brlt	.+6      	; 0x58a4 <vdmSetElementAtGC+0x1a>
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	0d c0       	rjmp	.+26     	; 0x58be <vdmSetElementAtGC+0x34>
	{
		return NULL;
	}

	return vdmCloneGC(col->value[loc], from);
    58a4:	66 0f       	add	r22, r22
    58a6:	77 1f       	adc	r23, r23
    58a8:	01 90       	ld	r0, Z+
    58aa:	f0 81       	ld	r31, Z
    58ac:	e0 2d       	mov	r30, r0
    58ae:	e6 0f       	add	r30, r22
    58b0:	f7 1f       	adc	r31, r23
    58b2:	80 81       	ld	r24, Z
    58b4:	91 81       	ldd	r25, Z+1	; 0x01
    58b6:	ba 01       	movw	r22, r20
    58b8:	0e 94 bb 22 	call	0x4576	; 0x4576 <vdmCloneGC>
    58bc:	9c 01       	movw	r18, r24
}
    58be:	c9 01       	movw	r24, r18
    58c0:	08 95       	ret

000058c2 <vdmSetFit>:
}



void vdmSetFit(TVP set)
{
    58c2:	0f 93       	push	r16
    58c4:	1f 93       	push	r17
	UNWRAP_COLLECTION(col, set);
    58c6:	fc 01       	movw	r30, r24
    58c8:	03 81       	ldd	r16, Z+3	; 0x03
    58ca:	14 81       	ldd	r17, Z+4	; 0x04

	/* Assumes that more memory is allocated in the col->value array than there are elements.  */
	col->value = (TVP*)realloc(col->value, col->size * sizeof(TVP));
    58cc:	f8 01       	movw	r30, r16
    58ce:	62 81       	ldd	r22, Z+2	; 0x02
    58d0:	73 81       	ldd	r23, Z+3	; 0x03
    58d2:	66 0f       	add	r22, r22
    58d4:	77 1f       	adc	r23, r23
    58d6:	80 81       	ld	r24, Z
    58d8:	91 81       	ldd	r25, Z+1	; 0x01
    58da:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    58de:	f8 01       	movw	r30, r16
    58e0:	91 83       	std	Z+1, r25	; 0x01
    58e2:	80 83       	st	Z, r24
	assert(col->value != NULL);
    58e4:	00 97       	sbiw	r24, 0x00	; 0
    58e6:	11 f4       	brne	.+4      	; 0x58ec <vdmSetFit+0x2a>
    58e8:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
}
    58ec:	1f 91       	pop	r17
    58ee:	0f 91       	pop	r16
    58f0:	08 95       	ret

000058f2 <vdmSetGrow>:



/* What to return?  */
void vdmSetGrow(TVP set, TVP element)
{
    58f2:	ef 92       	push	r14
    58f4:	ff 92       	push	r15
    58f6:	0f 93       	push	r16
    58f8:	1f 93       	push	r17
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
    58fe:	7b 01       	movw	r14, r22
/* 	int bufsize = DEFAULT_SET_COMP_BUFFER;  */

	UNWRAP_COLLECTION(col, set);
    5900:	fc 01       	movw	r30, r24
    5902:	03 81       	ldd	r16, Z+3	; 0x03
    5904:	14 81       	ldd	r17, Z+4	; 0x04
/* 		buffer too small add memory chunk  */
/* 		bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;  */
/* 		col->value = (TVP*)realloc(col->value, bufsize * sizeof(TVP));  */
/* 	}  */

	col->value = (TVP *)realloc(col->value, (size + 1) * sizeof(TVP));
    5906:	f8 01       	movw	r30, r16
    5908:	62 81       	ldd	r22, Z+2	; 0x02
    590a:	73 81       	ldd	r23, Z+3	; 0x03
    590c:	6f 5f       	subi	r22, 0xFF	; 255
    590e:	7f 4f       	sbci	r23, 0xFF	; 255
    5910:	66 0f       	add	r22, r22
    5912:	77 1f       	adc	r23, r23
    5914:	80 81       	ld	r24, Z
    5916:	91 81       	ldd	r25, Z+1	; 0x01
    5918:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    591c:	ec 01       	movw	r28, r24
    591e:	f8 01       	movw	r30, r16
    5920:	91 83       	std	Z+1, r25	; 0x01
    5922:	80 83       	st	Z, r24
	assert(col->value != NULL);
    5924:	00 97       	sbiw	r24, 0x00	; 0
    5926:	11 f4       	brne	.+4      	; 0x592c <vdmSetGrow+0x3a>
    5928:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	vdmSetAdd(col->value, &(col->size), vdmClone(element));
    592c:	c7 01       	movw	r24, r14
    592e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    5932:	ac 01       	movw	r20, r24
    5934:	0e 5f       	subi	r16, 0xFE	; 254
    5936:	1f 4f       	sbci	r17, 0xFF	; 255
    5938:	ce 01       	movw	r24, r28
    593a:	b8 01       	movw	r22, r16
    593c:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>
}
    5940:	df 91       	pop	r29
    5942:	cf 91       	pop	r28
    5944:	1f 91       	pop	r17
    5946:	0f 91       	pop	r16
    5948:	ff 90       	pop	r15
    594a:	ef 90       	pop	r14
    594c:	08 95       	ret

0000594e <newSetWithValues>:
/* ------------------------------------------------  */



TVP newSetWithValues(size_t size, TVP* elements)
{
    594e:	4f 92       	push	r4
    5950:	5f 92       	push	r5
    5952:	6f 92       	push	r6
    5954:	7f 92       	push	r7
    5956:	8f 92       	push	r8
    5958:	9f 92       	push	r9
    595a:	af 92       	push	r10
    595c:	bf 92       	push	r11
    595e:	cf 92       	push	r12
    5960:	df 92       	push	r13
    5962:	ef 92       	push	r14
    5964:	ff 92       	push	r15
    5966:	0f 93       	push	r16
    5968:	1f 93       	push	r17
    596a:	df 93       	push	r29
    596c:	cf 93       	push	r28
    596e:	00 d0       	rcall	.+0      	; 0x5970 <newSetWithValues+0x22>
    5970:	cd b7       	in	r28, 0x3d	; 61
    5972:	de b7       	in	r29, 0x3e	; 62
    5974:	3c 01       	movw	r6, r24
    5976:	16 2f       	mov	r17, r22
    5978:	07 2f       	mov	r16, r23
	int i;
	int count = 0;
    597a:	1a 82       	std	Y+2, r1	; 0x02
    597c:	19 82       	std	Y+1, r1	; 0x01
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
    597e:	82 e0       	ldi	r24, 0x02	; 2
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	62 e0       	ldi	r22, 0x02	; 2
    5984:	70 e0       	ldi	r23, 0x00	; 0
    5986:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    598a:	7c 01       	movw	r14, r24
	assert(value != NULL);
    598c:	00 97       	sbiw	r24, 0x00	; 0
    598e:	19 f1       	breq	.+70     	; 0x59d6 <newSetWithValues+0x88>
    5990:	81 2f       	mov	r24, r17
    5992:	90 2f       	mov	r25, r16
    5994:	9c 01       	movw	r18, r24
    5996:	59 01       	movw	r10, r18
    5998:	cc 24       	eor	r12, r12
    599a:	dd 24       	eor	r13, r13
    599c:	02 e0       	ldi	r16, 0x02	; 2
    599e:	10 e0       	ldi	r17, 0x00	; 0
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
    59a0:	2e 01       	movw	r4, r28
    59a2:	08 94       	sec
    59a4:	41 1c       	adc	r4, r1
    59a6:	51 1c       	adc	r5, r1
    59a8:	24 c0       	rjmp	.+72     	; 0x59f2 <newSetWithValues+0xa4>
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
	{
		TVP v = vdmClone(elements[i]); /*  set binding  */
    59aa:	f5 01       	movw	r30, r10
    59ac:	80 81       	ld	r24, Z
    59ae:	91 81       	ldd	r25, Z+1	; 0x01
    59b0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    59b4:	4c 01       	movw	r8, r24

		if(count >= bufsize)
    59b6:	89 81       	ldd	r24, Y+1	; 0x01
    59b8:	9a 81       	ldd	r25, Y+2	; 0x02
    59ba:	80 17       	cp	r24, r16
    59bc:	91 07       	cpc	r25, r17
    59be:	6c f0       	brlt	.+26     	; 0x59da <newSetWithValues+0x8c>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    59c0:	06 5f       	subi	r16, 0xF6	; 246
    59c2:	1f 4f       	sbci	r17, 0xFF	; 255
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    59c4:	b8 01       	movw	r22, r16
    59c6:	66 0f       	add	r22, r22
    59c8:	77 1f       	adc	r23, r23
    59ca:	c7 01       	movw	r24, r14
    59cc:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    59d0:	7c 01       	movw	r14, r24
			assert(value != NULL);
    59d2:	00 97       	sbiw	r24, 0x00	; 0
    59d4:	11 f4       	brne	.+4      	; 0x59da <newSetWithValues+0x8c>
    59d6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
		}
		vdmSetAdd(value, &count,v);
    59da:	c7 01       	movw	r24, r14
    59dc:	b2 01       	movw	r22, r4
    59de:	a4 01       	movw	r20, r8
    59e0:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>
	int count = 0;
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    59e4:	08 94       	sec
    59e6:	c1 1c       	adc	r12, r1
    59e8:	d1 1c       	adc	r13, r1
    59ea:	82 e0       	ldi	r24, 0x02	; 2
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	a8 0e       	add	r10, r24
    59f0:	b9 1e       	adc	r11, r25
    59f2:	c6 14       	cp	r12, r6
    59f4:	d7 04       	cpc	r13, r7
    59f6:	c8 f2       	brcs	.-78     	; 0x59aa <newSetWithValues+0x5c>
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    59f8:	89 81       	ldd	r24, Y+1	; 0x01
    59fa:	9a 81       	ldd	r25, Y+2	; 0x02
    59fc:	67 e0       	ldi	r22, 0x07	; 7
    59fe:	a7 01       	movw	r20, r14
    5a00:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <newCollectionWithValues>
    5a04:	b8 2e       	mov	r11, r24
    5a06:	a9 2e       	mov	r10, r25
    5a08:	67 01       	movw	r12, r14
    5a0a:	00 e0       	ldi	r16, 0x00	; 0
    5a0c:	10 e0       	ldi	r17, 0x00	; 0
    5a0e:	08 c0       	rjmp	.+16     	; 0x5a20 <newSetWithValues+0xd2>

	for(i = 0; i < count; i++)
	{
		vdmFree(value[i]);
    5a10:	f6 01       	movw	r30, r12
    5a12:	81 91       	ld	r24, Z+
    5a14:	91 91       	ld	r25, Z+
    5a16:	6f 01       	movw	r12, r30
    5a18:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValues(count, VDM_SET, value);

	for(i = 0; i < count; i++)
    5a1c:	0f 5f       	subi	r16, 0xFF	; 255
    5a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a20:	89 81       	ldd	r24, Y+1	; 0x01
    5a22:	9a 81       	ldd	r25, Y+2	; 0x02
    5a24:	08 17       	cp	r16, r24
    5a26:	19 07       	cpc	r17, r25
    5a28:	9c f3       	brlt	.-26     	; 0x5a10 <newSetWithValues+0xc2>
	{
		vdmFree(value[i]);
	}
	free(value);
    5a2a:	c7 01       	movw	r24, r14
    5a2c:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    5a30:	8b 2d       	mov	r24, r11
    5a32:	9a 2d       	mov	r25, r10
    5a34:	0f 90       	pop	r0
    5a36:	0f 90       	pop	r0
    5a38:	cf 91       	pop	r28
    5a3a:	df 91       	pop	r29
    5a3c:	1f 91       	pop	r17
    5a3e:	0f 91       	pop	r16
    5a40:	ff 90       	pop	r15
    5a42:	ef 90       	pop	r14
    5a44:	df 90       	pop	r13
    5a46:	cf 90       	pop	r12
    5a48:	bf 90       	pop	r11
    5a4a:	af 90       	pop	r10
    5a4c:	9f 90       	pop	r9
    5a4e:	8f 90       	pop	r8
    5a50:	7f 90       	pop	r7
    5a52:	6f 90       	pop	r6
    5a54:	5f 90       	pop	r5
    5a56:	4f 90       	pop	r4
    5a58:	08 95       	ret

00005a5a <vdmSetUnion>:
}



TVP vdmSetUnion(TVP set1, TVP set2)
{
    5a5a:	6f 92       	push	r6
    5a5c:	7f 92       	push	r7
    5a5e:	8f 92       	push	r8
    5a60:	9f 92       	push	r9
    5a62:	af 92       	push	r10
    5a64:	bf 92       	push	r11
    5a66:	cf 92       	push	r12
    5a68:	df 92       	push	r13
    5a6a:	ef 92       	push	r14
    5a6c:	ff 92       	push	r15
    5a6e:	0f 93       	push	r16
    5a70:	1f 93       	push	r17
    5a72:	cf 93       	push	r28
    5a74:	df 93       	push	r29
    5a76:	fc 01       	movw	r30, r24
    5a78:	db 01       	movw	r26, r22
	TVP *newvalues;
	TVP resset;
	int i;

	ASSERT_CHECK(set1);
    5a7a:	80 81       	ld	r24, Z
    5a7c:	87 30       	cpi	r24, 0x07	; 7
    5a7e:	f9 f4       	brne	.+62     	; 0x5abe <vdmSetUnion+0x64>
	ASSERT_CHECK(set2);
    5a80:	8c 91       	ld	r24, X
    5a82:	87 30       	cpi	r24, 0x07	; 7
    5a84:	e1 f4       	brne	.+56     	; 0x5abe <vdmSetUnion+0x64>

	UNWRAP_COLLECTION(col1, set1);
    5a86:	a3 80       	ldd	r10, Z+3	; 0x03
    5a88:	b4 80       	ldd	r11, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);
    5a8a:	13 96       	adiw	r26, 0x03	; 3
    5a8c:	6d 90       	ld	r6, X+
    5a8e:	7c 90       	ld	r7, X
    5a90:	14 97       	sbiw	r26, 0x04	; 4
	/* int a = col1->size;  */

	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
    5a92:	d3 01       	movw	r26, r6
    5a94:	12 96       	adiw	r26, 0x02	; 2
    5a96:	8d 91       	ld	r24, X+
    5a98:	9c 91       	ld	r25, X
    5a9a:	13 97       	sbiw	r26, 0x03	; 3
    5a9c:	f5 01       	movw	r30, r10
    5a9e:	22 81       	ldd	r18, Z+2	; 0x02
    5aa0:	33 81       	ldd	r19, Z+3	; 0x03
    5aa2:	82 0f       	add	r24, r18
    5aa4:	93 1f       	adc	r25, r19
    5aa6:	88 0f       	add	r24, r24
    5aa8:	99 1f       	adc	r25, r25
    5aaa:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    5aae:	7c 01       	movw	r14, r24
	assert(newvalues != NULL);
    5ab0:	00 97       	sbiw	r24, 0x00	; 0
    5ab2:	29 f0       	breq	.+10     	; 0x5abe <vdmSetUnion+0x64>
    5ab4:	4c 01       	movw	r8, r24
    5ab6:	6c 01       	movw	r12, r24
    5ab8:	c0 e0       	ldi	r28, 0x00	; 0
    5aba:	d0 e0       	ldi	r29, 0x00	; 0
    5abc:	13 c0       	rjmp	.+38     	; 0x5ae4 <vdmSetUnion+0x8a>
    5abe:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
    5ac2:	ce 01       	movw	r24, r28
    5ac4:	88 0f       	add	r24, r24
    5ac6:	99 1f       	adc	r25, r25
    5ac8:	d5 01       	movw	r26, r10
    5aca:	ed 91       	ld	r30, X+
    5acc:	fc 91       	ld	r31, X
    5ace:	e8 0f       	add	r30, r24
    5ad0:	f9 1f       	adc	r31, r25
    5ad2:	80 81       	ld	r24, Z
    5ad4:	91 81       	ldd	r25, Z+1	; 0x01
    5ad6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    5ada:	f6 01       	movw	r30, r12
    5adc:	81 93       	st	Z+, r24
    5ade:	91 93       	st	Z+, r25
    5ae0:	6f 01       	movw	r12, r30
	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
	assert(newvalues != NULL);
	for(i = 0; i < col1->size; i++)
    5ae2:	21 96       	adiw	r28, 0x01	; 1
    5ae4:	d5 01       	movw	r26, r10
    5ae6:	12 96       	adiw	r26, 0x02	; 2
    5ae8:	0d 91       	ld	r16, X+
    5aea:	1c 91       	ld	r17, X
    5aec:	13 97       	sbiw	r26, 0x03	; 3
    5aee:	c0 17       	cp	r28, r16
    5af0:	d1 07       	cpc	r29, r17
    5af2:	3c f3       	brlt	.-50     	; 0x5ac2 <vdmSetUnion+0x68>
    5af4:	e8 01       	movw	r28, r16
    5af6:	cc 0f       	add	r28, r28
    5af8:	dd 1f       	adc	r29, r29
    5afa:	ce 0d       	add	r28, r14
    5afc:	df 1d       	adc	r29, r15
    5afe:	12 c0       	rjmp	.+36     	; 0x5b24 <vdmSetUnion+0xca>
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
    5b00:	c8 01       	movw	r24, r16
    5b02:	82 1b       	sub	r24, r18
    5b04:	93 0b       	sbc	r25, r19
    5b06:	88 0f       	add	r24, r24
    5b08:	99 1f       	adc	r25, r25
    5b0a:	d3 01       	movw	r26, r6
    5b0c:	ed 91       	ld	r30, X+
    5b0e:	fc 91       	ld	r31, X
    5b10:	e8 0f       	add	r30, r24
    5b12:	f9 1f       	adc	r31, r25
    5b14:	80 81       	ld	r24, Z
    5b16:	91 81       	ldd	r25, Z+1	; 0x01
    5b18:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    5b1c:	89 93       	st	Y+, r24
    5b1e:	99 93       	st	Y+, r25
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    5b20:	0f 5f       	subi	r16, 0xFF	; 255
    5b22:	1f 4f       	sbci	r17, 0xFF	; 255
    5b24:	f5 01       	movw	r30, r10
    5b26:	22 81       	ldd	r18, Z+2	; 0x02
    5b28:	33 81       	ldd	r19, Z+3	; 0x03
    5b2a:	d3 01       	movw	r26, r6
    5b2c:	12 96       	adiw	r26, 0x02	; 2
    5b2e:	8d 91       	ld	r24, X+
    5b30:	9c 91       	ld	r25, X
    5b32:	13 97       	sbiw	r26, 0x03	; 3
    5b34:	82 0f       	add	r24, r18
    5b36:	93 1f       	adc	r25, r19
    5b38:	08 17       	cp	r16, r24
    5b3a:	19 07       	cpc	r17, r25
    5b3c:	0c f3       	brlt	.-62     	; 0x5b00 <vdmSetUnion+0xa6>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValues(col1->size + col2->size, newvalues);
    5b3e:	b7 01       	movw	r22, r14
    5b40:	0e 94 a7 2c 	call	0x594e	; 0x594e <newSetWithValues>
    5b44:	18 2f       	mov	r17, r24
    5b46:	09 2f       	mov	r16, r25
    5b48:	c0 e0       	ldi	r28, 0x00	; 0
    5b4a:	d0 e0       	ldi	r29, 0x00	; 0
    5b4c:	07 c0       	rjmp	.+14     	; 0x5b5c <vdmSetUnion+0x102>

	for(i = 0; i < col1->size + col2->size; i++)
		vdmFree(newvalues[i]);
    5b4e:	f4 01       	movw	r30, r8
    5b50:	81 91       	ld	r24, Z+
    5b52:	91 91       	ld	r25, Z+
    5b54:	4f 01       	movw	r8, r30
    5b56:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValues(col1->size + col2->size, newvalues);

	for(i = 0; i < col1->size + col2->size; i++)
    5b5a:	21 96       	adiw	r28, 0x01	; 1
    5b5c:	d3 01       	movw	r26, r6
    5b5e:	12 96       	adiw	r26, 0x02	; 2
    5b60:	8d 91       	ld	r24, X+
    5b62:	9c 91       	ld	r25, X
    5b64:	13 97       	sbiw	r26, 0x03	; 3
    5b66:	f5 01       	movw	r30, r10
    5b68:	22 81       	ldd	r18, Z+2	; 0x02
    5b6a:	33 81       	ldd	r19, Z+3	; 0x03
    5b6c:	82 0f       	add	r24, r18
    5b6e:	93 1f       	adc	r25, r19
    5b70:	c8 17       	cp	r28, r24
    5b72:	d9 07       	cpc	r29, r25
    5b74:	64 f3       	brlt	.-40     	; 0x5b4e <vdmSetUnion+0xf4>
		vdmFree(newvalues[i]);
	free(newvalues);
    5b76:	c7 01       	movw	r24, r14
    5b78:	0e 94 4f 38 	call	0x709e	; 0x709e <free>

	return resset;
}
    5b7c:	81 2f       	mov	r24, r17
    5b7e:	90 2f       	mov	r25, r16
    5b80:	df 91       	pop	r29
    5b82:	cf 91       	pop	r28
    5b84:	1f 91       	pop	r17
    5b86:	0f 91       	pop	r16
    5b88:	ff 90       	pop	r15
    5b8a:	ef 90       	pop	r14
    5b8c:	df 90       	pop	r13
    5b8e:	cf 90       	pop	r12
    5b90:	bf 90       	pop	r11
    5b92:	af 90       	pop	r10
    5b94:	9f 90       	pop	r9
    5b96:	8f 90       	pop	r8
    5b98:	7f 90       	pop	r7
    5b9a:	6f 90       	pop	r6
    5b9c:	08 95       	ret

00005b9e <newSetVarToGrow>:


/* Just like newSetVar, but with memory preallocated to an expected  */
/* result set size.  */
TVP newSetVarToGrow(size_t size, size_t expected_size, ...)
{
    5b9e:	4f 92       	push	r4
    5ba0:	5f 92       	push	r5
    5ba2:	6f 92       	push	r6
    5ba4:	7f 92       	push	r7
    5ba6:	8f 92       	push	r8
    5ba8:	9f 92       	push	r9
    5baa:	af 92       	push	r10
    5bac:	bf 92       	push	r11
    5bae:	cf 92       	push	r12
    5bb0:	df 92       	push	r13
    5bb2:	ef 92       	push	r14
    5bb4:	ff 92       	push	r15
    5bb6:	0f 93       	push	r16
    5bb8:	1f 93       	push	r17
    5bba:	df 93       	push	r29
    5bbc:	cf 93       	push	r28
    5bbe:	00 d0       	rcall	.+0      	; 0x5bc0 <newSetVarToGrow+0x22>
    5bc0:	cd b7       	in	r28, 0x3d	; 61
    5bc2:	de b7       	in	r29, 0x3e	; 62
    5bc4:	4d 88       	ldd	r4, Y+21	; 0x15
    5bc6:	5e 88       	ldd	r5, Y+22	; 0x16
    5bc8:	1f 89       	ldd	r17, Y+23	; 0x17
    5bca:	08 8d       	ldd	r16, Y+24	; 0x18
    5bcc:	f9 e1       	ldi	r31, 0x19	; 25
    5bce:	af 2e       	mov	r10, r31
    5bd0:	b1 2c       	mov	r11, r1
    5bd2:	ac 0e       	add	r10, r28
    5bd4:	bd 1e       	adc	r11, r29
	int i;

	va_list ap;
	va_start(ap, expected_size);

	int count = 0;
    5bd6:	1a 82       	std	Y+2, r1	; 0x02
    5bd8:	19 82       	std	Y+1, r1	; 0x01

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    5bda:	81 2f       	mov	r24, r17
    5bdc:	90 2f       	mov	r25, r16
    5bde:	62 e0       	ldi	r22, 0x02	; 2
    5be0:	70 e0       	ldi	r23, 0x00	; 0
    5be2:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    5be6:	7c 01       	movw	r14, r24
	assert(value != NULL);
    5be8:	00 97       	sbiw	r24, 0x00	; 0
    5bea:	19 f1       	breq	.+70     	; 0x5c32 <newSetVarToGrow+0x94>
	va_list ap;
	va_start(ap, expected_size);

	int count = 0;

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
    5bec:	21 2f       	mov	r18, r17
    5bee:	30 2f       	mov	r19, r16
    5bf0:	c9 01       	movw	r24, r18
    5bf2:	6c 01       	movw	r12, r24
    5bf4:	00 e0       	ldi	r16, 0x00	; 0
    5bf6:	10 e0       	ldi	r17, 0x00	; 0
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
			assert(value != NULL);
		}
		vdmSetAdd(value,&count,v);
    5bf8:	3e 01       	movw	r6, r28
    5bfa:	08 94       	sec
    5bfc:	61 1c       	adc	r6, r1
    5bfe:	71 1c       	adc	r7, r1
    5c00:	25 c0       	rjmp	.+74     	; 0x5c4c <newSetVarToGrow+0xae>
	TVP v;

	for (i = 0; i < size; i++)
	{
		arg = va_arg(ap, TVP);
		v = vdmClone(arg); /*  set binding  */
    5c02:	f5 01       	movw	r30, r10
    5c04:	80 81       	ld	r24, Z
    5c06:	91 81       	ldd	r25, Z+1	; 0x01
    5c08:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    5c0c:	4c 01       	movw	r8, r24


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    5c0e:	89 81       	ldd	r24, Y+1	; 0x01
    5c10:	9a 81       	ldd	r25, Y+2	; 0x02
    5c12:	8c 15       	cp	r24, r12
    5c14:	9d 05       	cpc	r25, r13
    5c16:	7c f0       	brlt	.+30     	; 0x5c36 <newSetVarToGrow+0x98>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    5c18:	8a e0       	ldi	r24, 0x0A	; 10
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	c8 0e       	add	r12, r24
    5c1e:	d9 1e       	adc	r13, r25
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    5c20:	b6 01       	movw	r22, r12
    5c22:	66 0f       	add	r22, r22
    5c24:	77 1f       	adc	r23, r23
    5c26:	c7 01       	movw	r24, r14
    5c28:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    5c2c:	7c 01       	movw	r14, r24
			assert(value != NULL);
    5c2e:	00 97       	sbiw	r24, 0x00	; 0
    5c30:	11 f4       	brne	.+4      	; 0x5c36 <newSetVarToGrow+0x98>
    5c32:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
		}
		vdmSetAdd(value,&count,v);
    5c36:	c7 01       	movw	r24, r14
    5c38:	b3 01       	movw	r22, r6
    5c3a:	a4 01       	movw	r20, r8
    5c3c:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>
	assert(value != NULL);

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    5c40:	0f 5f       	subi	r16, 0xFF	; 255
    5c42:	1f 4f       	sbci	r17, 0xFF	; 255
    5c44:	e2 e0       	ldi	r30, 0x02	; 2
    5c46:	f0 e0       	ldi	r31, 0x00	; 0
    5c48:	ae 0e       	add	r10, r30
    5c4a:	bf 1e       	adc	r11, r31
    5c4c:	04 15       	cp	r16, r4
    5c4e:	15 05       	cpc	r17, r5
    5c50:	c0 f2       	brcs	.-80     	; 0x5c02 <newSetVarToGrow+0x64>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    5c52:	89 81       	ldd	r24, Y+1	; 0x01
    5c54:	9a 81       	ldd	r25, Y+2	; 0x02
    5c56:	67 e0       	ldi	r22, 0x07	; 7
    5c58:	a7 01       	movw	r20, r14
    5c5a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <newCollectionWithValues>
    5c5e:	18 2f       	mov	r17, r24
    5c60:	09 2f       	mov	r16, r25
	free(value);
    5c62:	c7 01       	movw	r24, r14
    5c64:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    5c68:	81 2f       	mov	r24, r17
    5c6a:	90 2f       	mov	r25, r16
    5c6c:	0f 90       	pop	r0
    5c6e:	0f 90       	pop	r0
    5c70:	cf 91       	pop	r28
    5c72:	df 91       	pop	r29
    5c74:	1f 91       	pop	r17
    5c76:	0f 91       	pop	r16
    5c78:	ff 90       	pop	r15
    5c7a:	ef 90       	pop	r14
    5c7c:	df 90       	pop	r13
    5c7e:	cf 90       	pop	r12
    5c80:	bf 90       	pop	r11
    5c82:	af 90       	pop	r10
    5c84:	9f 90       	pop	r9
    5c86:	8f 90       	pop	r8
    5c88:	7f 90       	pop	r7
    5c8a:	6f 90       	pop	r6
    5c8c:	5f 90       	pop	r5
    5c8e:	4f 90       	pop	r4
    5c90:	08 95       	ret

00005c92 <newSetVar>:
}



TVP newSetVar(size_t size, ...)
{
    5c92:	4f 92       	push	r4
    5c94:	5f 92       	push	r5
    5c96:	6f 92       	push	r6
    5c98:	7f 92       	push	r7
    5c9a:	8f 92       	push	r8
    5c9c:	9f 92       	push	r9
    5c9e:	af 92       	push	r10
    5ca0:	bf 92       	push	r11
    5ca2:	cf 92       	push	r12
    5ca4:	df 92       	push	r13
    5ca6:	ef 92       	push	r14
    5ca8:	ff 92       	push	r15
    5caa:	0f 93       	push	r16
    5cac:	1f 93       	push	r17
    5cae:	df 93       	push	r29
    5cb0:	cf 93       	push	r28
    5cb2:	00 d0       	rcall	.+0      	; 0x5cb4 <newSetVar+0x22>
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	8e 01       	movw	r16, r28
    5cba:	0b 5e       	subi	r16, 0xEB	; 235
    5cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    5cbe:	f8 01       	movw	r30, r16
    5cc0:	41 90       	ld	r4, Z+
    5cc2:	51 90       	ld	r5, Z+
    5cc4:	8f 01       	movw	r16, r30
	int i;

	va_list ap;
	va_start(ap, size);

	int count = 0;
    5cc6:	1a 82       	std	Y+2, r1	; 0x02
    5cc8:	19 82       	std	Y+1, r1	; 0x01

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    5cca:	82 e0       	ldi	r24, 0x02	; 2
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	62 e0       	ldi	r22, 0x02	; 2
    5cd0:	70 e0       	ldi	r23, 0x00	; 0
    5cd2:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    5cd6:	7c 01       	movw	r14, r24
	assert(value != NULL);
    5cd8:	00 97       	sbiw	r24, 0x00	; 0
    5cda:	01 f1       	breq	.+64     	; 0x5d1c <newSetVar+0x8a>
    5cdc:	58 01       	movw	r10, r16
    5cde:	cc 24       	eor	r12, r12
    5ce0:	dd 24       	eor	r13, r13
    5ce2:	02 e0       	ldi	r16, 0x02	; 2
    5ce4:	10 e0       	ldi	r17, 0x00	; 0
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
			assert(value != NULL);
		}
		vdmSetAdd(value, &count, v);
    5ce6:	3e 01       	movw	r6, r28
    5ce8:	08 94       	sec
    5cea:	61 1c       	adc	r6, r1
    5cec:	71 1c       	adc	r7, r1
    5cee:	24 c0       	rjmp	.+72     	; 0x5d38 <newSetVar+0xa6>

	for (i = 0; i < size; i++)
	{
		TVP arg = va_arg(ap, TVP);

		TVP v= vdmClone(arg);
    5cf0:	f5 01       	movw	r30, r10
    5cf2:	80 81       	ld	r24, Z
    5cf4:	91 81       	ldd	r25, Z+1	; 0x01
    5cf6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    5cfa:	4c 01       	movw	r8, r24

		/* TODO:  Check whether element exists.  */


		if(count>=bufsize)
    5cfc:	89 81       	ldd	r24, Y+1	; 0x01
    5cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    5d00:	80 17       	cp	r24, r16
    5d02:	91 07       	cpc	r25, r17
    5d04:	6c f0       	brlt	.+26     	; 0x5d20 <newSetVar+0x8e>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    5d06:	06 5f       	subi	r16, 0xF6	; 246
    5d08:	1f 4f       	sbci	r17, 0xFF	; 255
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    5d0a:	b8 01       	movw	r22, r16
    5d0c:	66 0f       	add	r22, r22
    5d0e:	77 1f       	adc	r23, r23
    5d10:	c7 01       	movw	r24, r14
    5d12:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    5d16:	7c 01       	movw	r14, r24
			assert(value != NULL);
    5d18:	00 97       	sbiw	r24, 0x00	; 0
    5d1a:	11 f4       	brne	.+4      	; 0x5d20 <newSetVar+0x8e>
    5d1c:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
		}
		vdmSetAdd(value, &count, v);
    5d20:	c7 01       	movw	r24, r14
    5d22:	b3 01       	movw	r22, r6
    5d24:	a4 01       	movw	r20, r8
    5d26:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    5d2a:	08 94       	sec
    5d2c:	c1 1c       	adc	r12, r1
    5d2e:	d1 1c       	adc	r13, r1
    5d30:	82 e0       	ldi	r24, 0x02	; 2
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	a8 0e       	add	r10, r24
    5d36:	b9 1e       	adc	r11, r25
    5d38:	c4 14       	cp	r12, r4
    5d3a:	d5 04       	cpc	r13, r5
    5d3c:	c8 f2       	brcs	.-78     	; 0x5cf0 <newSetVar+0x5e>
		vdmSetAdd(value, &count, v);
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    5d3e:	89 81       	ldd	r24, Y+1	; 0x01
    5d40:	9a 81       	ldd	r25, Y+2	; 0x02
    5d42:	67 e0       	ldi	r22, 0x07	; 7
    5d44:	a7 01       	movw	r20, r14
    5d46:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <newCollectionWithValues>
    5d4a:	b8 2e       	mov	r11, r24
    5d4c:	a9 2e       	mov	r10, r25
    5d4e:	67 01       	movw	r12, r14
    5d50:	00 e0       	ldi	r16, 0x00	; 0
    5d52:	10 e0       	ldi	r17, 0x00	; 0
    5d54:	08 c0       	rjmp	.+16     	; 0x5d66 <newSetVar+0xd4>
	for(i = 0; i < count; i++)
		vdmFree(value[i]);
    5d56:	f6 01       	movw	r30, r12
    5d58:	81 91       	ld	r24, Z+
    5d5a:	91 91       	ld	r25, Z+
    5d5c:	6f 01       	movw	r12, r30
    5d5e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
	for(i = 0; i < count; i++)
    5d62:	0f 5f       	subi	r16, 0xFF	; 255
    5d64:	1f 4f       	sbci	r17, 0xFF	; 255
    5d66:	89 81       	ldd	r24, Y+1	; 0x01
    5d68:	9a 81       	ldd	r25, Y+2	; 0x02
    5d6a:	08 17       	cp	r16, r24
    5d6c:	19 07       	cpc	r17, r25
    5d6e:	9c f3       	brlt	.-26     	; 0x5d56 <newSetVar+0xc4>
		vdmFree(value[i]);
	free(value);
    5d70:	c7 01       	movw	r24, r14
    5d72:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    5d76:	8b 2d       	mov	r24, r11
    5d78:	9a 2d       	mov	r25, r10
    5d7a:	0f 90       	pop	r0
    5d7c:	0f 90       	pop	r0
    5d7e:	cf 91       	pop	r28
    5d80:	df 91       	pop	r29
    5d82:	1f 91       	pop	r17
    5d84:	0f 91       	pop	r16
    5d86:	ff 90       	pop	r15
    5d88:	ef 90       	pop	r14
    5d8a:	df 90       	pop	r13
    5d8c:	cf 90       	pop	r12
    5d8e:	bf 90       	pop	r11
    5d90:	af 90       	pop	r10
    5d92:	9f 90       	pop	r9
    5d94:	8f 90       	pop	r8
    5d96:	7f 90       	pop	r7
    5d98:	6f 90       	pop	r6
    5d9a:	5f 90       	pop	r5
    5d9c:	4f 90       	pop	r4
    5d9e:	08 95       	ret

00005da0 <vdmSetPower>:
}



TVP vdmSetPower(TVP set)
{
    5da0:	2f 92       	push	r2
    5da2:	3f 92       	push	r3
    5da4:	4f 92       	push	r4
    5da6:	5f 92       	push	r5
    5da8:	6f 92       	push	r6
    5daa:	7f 92       	push	r7
    5dac:	8f 92       	push	r8
    5dae:	9f 92       	push	r9
    5db0:	af 92       	push	r10
    5db2:	bf 92       	push	r11
    5db4:	cf 92       	push	r12
    5db6:	df 92       	push	r13
    5db8:	ef 92       	push	r14
    5dba:	ff 92       	push	r15
    5dbc:	0f 93       	push	r16
    5dbe:	1f 93       	push	r17
    5dc0:	cf 93       	push	r28
    5dc2:	df 93       	push	r29
    5dc4:	fc 01       	movw	r30, r24
	TVP set3;
	TVP powerset;
	struct Collection *powercol;
	int powercolsize;

	ASSERT_CHECK(set);
    5dc6:	80 81       	ld	r24, Z
    5dc8:	87 30       	cpi	r24, 0x07	; 7
    5dca:	11 f0       	breq	.+4      	; 0x5dd0 <vdmSetPower+0x30>
    5dcc:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col, set);
    5dd0:	43 80       	ldd	r4, Z+3	; 0x03
    5dd2:	54 80       	ldd	r5, Z+4	; 0x04

	/* Initialize powerset to contain the empty set.  */
	powerset = newSetVar(0, NULL);
    5dd4:	00 d0       	rcall	.+0      	; 0x5dd6 <vdmSetPower+0x36>
    5dd6:	00 d0       	rcall	.+0      	; 0x5dd8 <vdmSetPower+0x38>
    5dd8:	ad b7       	in	r26, 0x3d	; 61
    5dda:	be b7       	in	r27, 0x3e	; 62
    5ddc:	12 96       	adiw	r26, 0x02	; 2
    5dde:	1c 92       	st	X, r1
    5de0:	1e 92       	st	-X, r1
    5de2:	11 97       	sbiw	r26, 0x01	; 1
    5de4:	14 96       	adiw	r26, 0x04	; 4
    5de6:	1c 92       	st	X, r1
    5de8:	1e 92       	st	-X, r1
    5dea:	13 97       	sbiw	r26, 0x03	; 3
    5dec:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    5df0:	6c 01       	movw	r12, r24

	set1 = newSetVar(0, NULL);
    5df2:	ed b7       	in	r30, 0x3d	; 61
    5df4:	fe b7       	in	r31, 0x3e	; 62
    5df6:	12 82       	std	Z+2, r1	; 0x02
    5df8:	11 82       	std	Z+1, r1	; 0x01
    5dfa:	14 82       	std	Z+4, r1	; 0x04
    5dfc:	13 82       	std	Z+3, r1	; 0x03
    5dfe:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    5e02:	8c 01       	movw	r16, r24
	set2 = newSetVar(1, set1);
    5e04:	81 e0       	ldi	r24, 0x01	; 1
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	ad b7       	in	r26, 0x3d	; 61
    5e0a:	be b7       	in	r27, 0x3e	; 62
    5e0c:	12 96       	adiw	r26, 0x02	; 2
    5e0e:	9c 93       	st	X, r25
    5e10:	8e 93       	st	-X, r24
    5e12:	11 97       	sbiw	r26, 0x01	; 1
    5e14:	14 96       	adiw	r26, 0x04	; 4
    5e16:	1c 93       	st	X, r17
    5e18:	0e 93       	st	-X, r16
    5e1a:	13 97       	sbiw	r26, 0x03	; 3
    5e1c:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    5e20:	7c 01       	movw	r14, r24
	vdmFree(set1);
    5e22:	0f 90       	pop	r0
    5e24:	0f 90       	pop	r0
    5e26:	0f 90       	pop	r0
    5e28:	0f 90       	pop	r0
    5e2a:	c8 01       	movw	r24, r16
    5e2c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	set1 = vdmSetUnion(powerset, set2);
    5e30:	c6 01       	movw	r24, r12
    5e32:	b7 01       	movw	r22, r14
    5e34:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    5e38:	18 2f       	mov	r17, r24
    5e3a:	09 2f       	mov	r16, r25
	vdmFree(set2);
    5e3c:	c7 01       	movw	r24, r14
    5e3e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	vdmFree(powerset);
    5e42:	c6 01       	movw	r24, r12
    5e44:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    5e48:	21 2f       	mov	r18, r17
    5e4a:	30 2f       	mov	r19, r16
    5e4c:	c9 01       	movw	r24, r18
    5e4e:	ec 01       	movw	r28, r24
    5e50:	aa 24       	eor	r10, r10
    5e52:	bb 24       	eor	r11, r11
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
		{
			powercol = (struct Collection*)powerset->value.ptr;

			set1 = newSetVar(1, (col->value)[i]);
    5e54:	01 e0       	ldi	r16, 0x01	; 1
    5e56:	20 2e       	mov	r2, r16
    5e58:	31 2c       	mov	r3, r1
    5e5a:	61 c0       	rjmp	.+194    	; 0x5f1e <vdmSetPower+0x17e>
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
    5e5c:	eb 81       	ldd	r30, Y+3	; 0x03
    5e5e:	fc 81       	ldd	r31, Y+4	; 0x04
    5e60:	62 80       	ldd	r6, Z+2	; 0x02
    5e62:	73 80       	ldd	r7, Z+3	; 0x03
    5e64:	45 01       	movw	r8, r10
    5e66:	88 0c       	add	r8, r8
    5e68:	99 1c       	adc	r9, r9
    5e6a:	cc 24       	eor	r12, r12
    5e6c:	dd 24       	eor	r13, r13
    5e6e:	50 c0       	rjmp	.+160    	; 0x5f10 <vdmSetPower+0x170>
		for(j = 0; j < powercolsize; j++)
		{
			powercol = (struct Collection*)powerset->value.ptr;
    5e70:	eb 80       	ldd	r14, Y+3	; 0x03
    5e72:	fc 80       	ldd	r15, Y+4	; 0x04

			set1 = newSetVar(1, (col->value)[i]);
    5e74:	00 d0       	rcall	.+0      	; 0x5e76 <vdmSetPower+0xd6>
    5e76:	00 d0       	rcall	.+0      	; 0x5e78 <vdmSetPower+0xd8>
    5e78:	ed b7       	in	r30, 0x3d	; 61
    5e7a:	fe b7       	in	r31, 0x3e	; 62
    5e7c:	32 82       	std	Z+2, r3	; 0x02
    5e7e:	21 82       	std	Z+1, r2	; 0x01
    5e80:	d2 01       	movw	r26, r4
    5e82:	ed 91       	ld	r30, X+
    5e84:	fc 91       	ld	r31, X
    5e86:	e8 0d       	add	r30, r8
    5e88:	f9 1d       	adc	r31, r9
    5e8a:	80 81       	ld	r24, Z
    5e8c:	91 81       	ldd	r25, Z+1	; 0x01
    5e8e:	ed b7       	in	r30, 0x3d	; 61
    5e90:	fe b7       	in	r31, 0x3e	; 62
    5e92:	94 83       	std	Z+4, r25	; 0x04
    5e94:	83 83       	std	Z+3, r24	; 0x03
    5e96:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    5e9a:	8c 01       	movw	r16, r24
			set2 = vdmSetUnion((powercol->value)[j], set1);
    5e9c:	0f 90       	pop	r0
    5e9e:	0f 90       	pop	r0
    5ea0:	0f 90       	pop	r0
    5ea2:	0f 90       	pop	r0
    5ea4:	c6 01       	movw	r24, r12
    5ea6:	88 0f       	add	r24, r24
    5ea8:	99 1f       	adc	r25, r25
    5eaa:	d7 01       	movw	r26, r14
    5eac:	ed 91       	ld	r30, X+
    5eae:	fc 91       	ld	r31, X
    5eb0:	e8 0f       	add	r30, r24
    5eb2:	f9 1f       	adc	r31, r25
    5eb4:	80 81       	ld	r24, Z
    5eb6:	91 81       	ldd	r25, Z+1	; 0x01
    5eb8:	b8 01       	movw	r22, r16
    5eba:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    5ebe:	7c 01       	movw	r14, r24
			vdmFree(set1);
    5ec0:	c8 01       	movw	r24, r16
    5ec2:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			set1 = newSetVar(1, set2);
    5ec6:	00 d0       	rcall	.+0      	; 0x5ec8 <vdmSetPower+0x128>
    5ec8:	00 d0       	rcall	.+0      	; 0x5eca <vdmSetPower+0x12a>
    5eca:	ed b7       	in	r30, 0x3d	; 61
    5ecc:	fe b7       	in	r31, 0x3e	; 62
    5ece:	32 82       	std	Z+2, r3	; 0x02
    5ed0:	21 82       	std	Z+1, r2	; 0x01
    5ed2:	f4 82       	std	Z+4, r15	; 0x04
    5ed4:	e3 82       	std	Z+3, r14	; 0x03
    5ed6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    5eda:	8c 01       	movw	r16, r24
			vdmFree(set2);
    5edc:	0f 90       	pop	r0
    5ede:	0f 90       	pop	r0
    5ee0:	0f 90       	pop	r0
    5ee2:	0f 90       	pop	r0
    5ee4:	c7 01       	movw	r24, r14
    5ee6:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			set3 = vdmSetUnion(powerset, set1);
    5eea:	ce 01       	movw	r24, r28
    5eec:	b8 01       	movw	r22, r16
    5eee:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    5ef2:	f8 2e       	mov	r15, r24
    5ef4:	e9 2e       	mov	r14, r25
			vdmFree(set1);
    5ef6:	c8 01       	movw	r24, r16
    5ef8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(powerset);
    5efc:	ce 01       	movw	r24, r28
    5efe:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
    5f02:	08 94       	sec
    5f04:	c1 1c       	adc	r12, r1
    5f06:	d1 1c       	adc	r13, r1
    5f08:	2f 2d       	mov	r18, r15
    5f0a:	3e 2d       	mov	r19, r14
    5f0c:	c9 01       	movw	r24, r18
    5f0e:	ec 01       	movw	r28, r24
    5f10:	c6 14       	cp	r12, r6
    5f12:	d7 04       	cpc	r13, r7
    5f14:	0c f4       	brge	.+2      	; 0x5f18 <vdmSetPower+0x178>
    5f16:	ac cf       	rjmp	.-168    	; 0x5e70 <vdmSetPower+0xd0>
	set1 = vdmSetUnion(powerset, set2);
	vdmFree(set2);
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
    5f18:	08 94       	sec
    5f1a:	a1 1c       	adc	r10, r1
    5f1c:	b1 1c       	adc	r11, r1
    5f1e:	d2 01       	movw	r26, r4
    5f20:	12 96       	adiw	r26, 0x02	; 2
    5f22:	8d 91       	ld	r24, X+
    5f24:	9c 91       	ld	r25, X
    5f26:	13 97       	sbiw	r26, 0x03	; 3
    5f28:	a8 16       	cp	r10, r24
    5f2a:	b9 06       	cpc	r11, r25
    5f2c:	0c f4       	brge	.+2      	; 0x5f30 <vdmSetPower+0x190>
    5f2e:	96 cf       	rjmp	.-212    	; 0x5e5c <vdmSetPower+0xbc>
			powerset = set3;
		}
	}

	return powerset;
}
    5f30:	ce 01       	movw	r24, r28
    5f32:	df 91       	pop	r29
    5f34:	cf 91       	pop	r28
    5f36:	1f 91       	pop	r17
    5f38:	0f 91       	pop	r16
    5f3a:	ff 90       	pop	r15
    5f3c:	ef 90       	pop	r14
    5f3e:	df 90       	pop	r13
    5f40:	cf 90       	pop	r12
    5f42:	bf 90       	pop	r11
    5f44:	af 90       	pop	r10
    5f46:	9f 90       	pop	r9
    5f48:	8f 90       	pop	r8
    5f4a:	7f 90       	pop	r7
    5f4c:	6f 90       	pop	r6
    5f4e:	5f 90       	pop	r5
    5f50:	4f 90       	pop	r4
    5f52:	3f 90       	pop	r3
    5f54:	2f 90       	pop	r2
    5f56:	08 95       	ret

00005f58 <vdmSetDunion>:
}



TVP vdmSetDunion(TVP set)
{
    5f58:	cf 92       	push	r12
    5f5a:	df 92       	push	r13
    5f5c:	ef 92       	push	r14
    5f5e:	ff 92       	push	r15
    5f60:	0f 93       	push	r16
    5f62:	1f 93       	push	r17
    5f64:	cf 93       	push	r28
    5f66:	df 93       	push	r29
    5f68:	fc 01       	movw	r30, r24
	int i;
	TVP unionset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    5f6a:	80 81       	ld	r24, Z
    5f6c:	87 30       	cpi	r24, 0x07	; 7
    5f6e:	c1 f4       	brne	.+48     	; 0x5fa0 <vdmSetDunion+0x48>

	UNWRAP_COLLECTION(col, set);
    5f70:	e3 80       	ldd	r14, Z+3	; 0x03
    5f72:	f4 80       	ldd	r15, Z+4	; 0x04
	for(i = 0; i < col->size; i++)
    5f74:	d7 01       	movw	r26, r14
    5f76:	12 96       	adiw	r26, 0x02	; 2
    5f78:	4d 91       	ld	r20, X+
    5f7a:	5c 91       	ld	r21, X
    5f7c:	13 97       	sbiw	r26, 0x03	; 3
    5f7e:	20 e0       	ldi	r18, 0x00	; 0
    5f80:	30 e0       	ldi	r19, 0x00	; 0
    5f82:	12 c0       	rjmp	.+36     	; 0x5fa8 <vdmSetDunion+0x50>
	{
		ASSERT_CHECK((col->value)[i]);
    5f84:	c9 01       	movw	r24, r18
    5f86:	88 0f       	add	r24, r24
    5f88:	99 1f       	adc	r25, r25
    5f8a:	d7 01       	movw	r26, r14
    5f8c:	ed 91       	ld	r30, X+
    5f8e:	fc 91       	ld	r31, X
    5f90:	e8 0f       	add	r30, r24
    5f92:	f9 1f       	adc	r31, r25
    5f94:	01 90       	ld	r0, Z+
    5f96:	f0 81       	ld	r31, Z
    5f98:	e0 2d       	mov	r30, r0
    5f9a:	80 81       	ld	r24, Z
    5f9c:	87 30       	cpi	r24, 0x07	; 7
    5f9e:	11 f0       	breq	.+4      	; 0x5fa4 <vdmSetDunion+0x4c>
    5fa0:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    5fa4:	2f 5f       	subi	r18, 0xFF	; 255
    5fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa8:	24 17       	cp	r18, r20
    5faa:	35 07       	cpc	r19, r21
    5fac:	5c f3       	brlt	.-42     	; 0x5f84 <vdmSetDunion+0x2c>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	unionset = newSetVar(0, NULL);
    5fae:	00 d0       	rcall	.+0      	; 0x5fb0 <vdmSetDunion+0x58>
    5fb0:	00 d0       	rcall	.+0      	; 0x5fb2 <vdmSetDunion+0x5a>
    5fb2:	ed b7       	in	r30, 0x3d	; 61
    5fb4:	fe b7       	in	r31, 0x3e	; 62
    5fb6:	12 82       	std	Z+2, r1	; 0x02
    5fb8:	11 82       	std	Z+1, r1	; 0x01
    5fba:	14 82       	std	Z+4, r1	; 0x04
    5fbc:	13 82       	std	Z+3, r1	; 0x03
    5fbe:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    5fc2:	d8 2e       	mov	r13, r24
    5fc4:	c9 2e       	mov	r12, r25
    5fc6:	c0 e0       	ldi	r28, 0x00	; 0
    5fc8:	d0 e0       	ldi	r29, 0x00	; 0
    5fca:	0f 90       	pop	r0
    5fcc:	0f 90       	pop	r0
    5fce:	0f 90       	pop	r0
    5fd0:	0f 90       	pop	r0
    5fd2:	16 c0       	rjmp	.+44     	; 0x6000 <vdmSetDunion+0xa8>

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
	{
		set1 = vdmSetUnion(unionset, (col->value)[i]);
    5fd4:	ce 01       	movw	r24, r28
    5fd6:	88 0f       	add	r24, r24
    5fd8:	99 1f       	adc	r25, r25
    5fda:	d7 01       	movw	r26, r14
    5fdc:	ed 91       	ld	r30, X+
    5fde:	fc 91       	ld	r31, X
    5fe0:	e8 0f       	add	r30, r24
    5fe2:	f9 1f       	adc	r31, r25
    5fe4:	60 81       	ld	r22, Z
    5fe6:	71 81       	ldd	r23, Z+1	; 0x01
    5fe8:	8d 2d       	mov	r24, r13
    5fea:	9c 2d       	mov	r25, r12
    5fec:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    5ff0:	18 2f       	mov	r17, r24
    5ff2:	09 2f       	mov	r16, r25
		vdmFree(unionset);
    5ff4:	8d 2d       	mov	r24, r13
    5ff6:	9c 2d       	mov	r25, r12
    5ff8:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	/* Initialize final set.  */
	unionset = newSetVar(0, NULL);

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    5ffc:	21 96       	adiw	r28, 0x01	; 1
    5ffe:	68 01       	movw	r12, r16
    6000:	f7 01       	movw	r30, r14
    6002:	82 81       	ldd	r24, Z+2	; 0x02
    6004:	93 81       	ldd	r25, Z+3	; 0x03
    6006:	c8 17       	cp	r28, r24
    6008:	d9 07       	cpc	r29, r25
    600a:	24 f3       	brlt	.-56     	; 0x5fd4 <vdmSetDunion+0x7c>
		vdmFree(unionset);
		unionset = set1;
	}

	return unionset;
}
    600c:	8d 2d       	mov	r24, r13
    600e:	9c 2d       	mov	r25, r12
    6010:	df 91       	pop	r29
    6012:	cf 91       	pop	r28
    6014:	1f 91       	pop	r17
    6016:	0f 91       	pop	r16
    6018:	ff 90       	pop	r15
    601a:	ef 90       	pop	r14
    601c:	df 90       	pop	r13
    601e:	cf 90       	pop	r12
    6020:	08 95       	ret

00006022 <vdmSetDifference>:




TVP vdmSetDifference(TVP set1, TVP set2)
{
    6022:	4f 92       	push	r4
    6024:	5f 92       	push	r5
    6026:	6f 92       	push	r6
    6028:	7f 92       	push	r7
    602a:	8f 92       	push	r8
    602c:	9f 92       	push	r9
    602e:	af 92       	push	r10
    6030:	bf 92       	push	r11
    6032:	cf 92       	push	r12
    6034:	df 92       	push	r13
    6036:	ef 92       	push	r14
    6038:	ff 92       	push	r15
    603a:	0f 93       	push	r16
    603c:	1f 93       	push	r17
    603e:	cf 93       	push	r28
    6040:	df 93       	push	r29
    6042:	fc 01       	movw	r30, r24
    6044:	5b 01       	movw	r10, r22
	TVP tmpset1;
	TVP tmpset2;
	TVP resultset;
	TVP res;

	ASSERT_CHECK(set1);
    6046:	80 81       	ld	r24, Z
    6048:	87 30       	cpi	r24, 0x07	; 7
    604a:	21 f4       	brne	.+8      	; 0x6054 <vdmSetDifference+0x32>
	ASSERT_CHECK(set2);
    604c:	db 01       	movw	r26, r22
    604e:	8c 91       	ld	r24, X
    6050:	87 30       	cpi	r24, 0x07	; 7
    6052:	11 f0       	breq	.+4      	; 0x6058 <vdmSetDifference+0x36>
    6054:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
    6058:	c3 80       	ldd	r12, Z+3	; 0x03
    605a:	d4 80       	ldd	r13, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);
    605c:	eb 01       	movw	r28, r22
    605e:	ab 81       	ldd	r26, Y+3	; 0x03
    6060:	bc 81       	ldd	r27, Y+4	; 0x04

	if(col1->size == 0 || col2->size == 0)
    6062:	e6 01       	movw	r28, r12
    6064:	8a 81       	ldd	r24, Y+2	; 0x02
    6066:	9b 81       	ldd	r25, Y+3	; 0x03
    6068:	89 2b       	or	r24, r25
    606a:	09 f4       	brne	.+2      	; 0x606e <vdmSetDifference+0x4c>
    606c:	61 c0       	rjmp	.+194    	; 0x6130 <vdmSetDifference+0x10e>
    606e:	12 96       	adiw	r26, 0x02	; 2
    6070:	8d 91       	ld	r24, X+
    6072:	9c 91       	ld	r25, X
    6074:	13 97       	sbiw	r26, 0x03	; 3
    6076:	89 2b       	or	r24, r25
    6078:	09 f4       	brne	.+2      	; 0x607c <vdmSetDifference+0x5a>
    607a:	5a c0       	rjmp	.+180    	; 0x6130 <vdmSetDifference+0x10e>
	{
		return set1;
	}

	resultset = newSetWithValues(0, NULL);
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	60 e0       	ldi	r22, 0x00	; 0
    6082:	70 e0       	ldi	r23, 0x00	; 0
    6084:	0e 94 a7 2c 	call	0x594e	; 0x594e <newSetWithValues>
    6088:	98 2e       	mov	r9, r24
    608a:	89 2e       	mov	r8, r25
    608c:	c0 e0       	ldi	r28, 0x00	; 0
    608e:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < col1->size; i++)
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
		if(res->value.boolVal)
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    6090:	e1 e0       	ldi	r30, 0x01	; 1
    6092:	4e 2e       	mov	r4, r30
    6094:	51 2c       	mov	r5, r1
    6096:	3f c0       	rjmp	.+126    	; 0x6116 <vdmSetDifference+0xf4>
		return set1;
	}

	resultset = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    6098:	7e 01       	movw	r14, r28
    609a:	ee 0c       	add	r14, r14
    609c:	ff 1c       	adc	r15, r15
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
    609e:	d6 01       	movw	r26, r12
    60a0:	ed 91       	ld	r30, X+
    60a2:	fc 91       	ld	r31, X
    60a4:	ee 0d       	add	r30, r14
    60a6:	ff 1d       	adc	r31, r15
    60a8:	60 81       	ld	r22, Z
    60aa:	71 81       	ldd	r23, Z+1	; 0x01
    60ac:	c5 01       	movw	r24, r10
    60ae:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <vdmSetNotMemberOf>
    60b2:	3c 01       	movw	r6, r24
		if(res->value.boolVal)
    60b4:	fc 01       	movw	r30, r24
    60b6:	83 81       	ldd	r24, Z+3	; 0x03
    60b8:	88 23       	and	r24, r24
    60ba:	49 f1       	breq	.+82     	; 0x610e <vdmSetDifference+0xec>
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    60bc:	00 d0       	rcall	.+0      	; 0x60be <vdmSetDifference+0x9c>
    60be:	00 d0       	rcall	.+0      	; 0x60c0 <vdmSetDifference+0x9e>
    60c0:	ad b7       	in	r26, 0x3d	; 61
    60c2:	be b7       	in	r27, 0x3e	; 62
    60c4:	12 96       	adiw	r26, 0x02	; 2
    60c6:	5c 92       	st	X, r5
    60c8:	4e 92       	st	-X, r4
    60ca:	11 97       	sbiw	r26, 0x01	; 1
    60cc:	d6 01       	movw	r26, r12
    60ce:	ed 91       	ld	r30, X+
    60d0:	fc 91       	ld	r31, X
    60d2:	ee 0d       	add	r30, r14
    60d4:	ff 1d       	adc	r31, r15
    60d6:	80 81       	ld	r24, Z
    60d8:	91 81       	ldd	r25, Z+1	; 0x01
    60da:	ed b7       	in	r30, 0x3d	; 61
    60dc:	fe b7       	in	r31, 0x3e	; 62
    60de:	94 83       	std	Z+4, r25	; 0x04
    60e0:	83 83       	std	Z+3, r24	; 0x03
    60e2:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    60e6:	8c 01       	movw	r16, r24
			tmpset2 = vdmSetUnion(resultset, tmpset1);
    60e8:	0f 90       	pop	r0
    60ea:	0f 90       	pop	r0
    60ec:	0f 90       	pop	r0
    60ee:	0f 90       	pop	r0
    60f0:	89 2d       	mov	r24, r9
    60f2:	98 2d       	mov	r25, r8
    60f4:	b8 01       	movw	r22, r16
    60f6:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    60fa:	f8 2e       	mov	r15, r24
    60fc:	e9 2e       	mov	r14, r25
			vdmFree(resultset);
    60fe:	89 2d       	mov	r24, r9
    6100:	98 2d       	mov	r25, r8
    6102:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			resultset = tmpset2;
			vdmFree(tmpset1);
    6106:	c8 01       	movw	r24, r16
    6108:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    610c:	47 01       	movw	r8, r14
		}
		vdmFree(res);
    610e:	c3 01       	movw	r24, r6
    6110:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		return set1;
	}

	resultset = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    6114:	21 96       	adiw	r28, 0x01	; 1
    6116:	d6 01       	movw	r26, r12
    6118:	12 96       	adiw	r26, 0x02	; 2
    611a:	8d 91       	ld	r24, X+
    611c:	9c 91       	ld	r25, X
    611e:	13 97       	sbiw	r26, 0x03	; 3
    6120:	c8 17       	cp	r28, r24
    6122:	d9 07       	cpc	r29, r25
    6124:	0c f4       	brge	.+2      	; 0x6128 <vdmSetDifference+0x106>
    6126:	b8 cf       	rjmp	.-144    	; 0x6098 <vdmSetDifference+0x76>
    6128:	89 2d       	mov	r24, r9
    612a:	98 2d       	mov	r25, r8
    612c:	9c 01       	movw	r18, r24
    612e:	f9 01       	movw	r30, r18
		}
		vdmFree(res);
	}

	return resultset;
}
    6130:	cf 01       	movw	r24, r30
    6132:	df 91       	pop	r29
    6134:	cf 91       	pop	r28
    6136:	1f 91       	pop	r17
    6138:	0f 91       	pop	r16
    613a:	ff 90       	pop	r15
    613c:	ef 90       	pop	r14
    613e:	df 90       	pop	r13
    6140:	cf 90       	pop	r12
    6142:	bf 90       	pop	r11
    6144:	af 90       	pop	r10
    6146:	9f 90       	pop	r9
    6148:	8f 90       	pop	r8
    614a:	7f 90       	pop	r7
    614c:	6f 90       	pop	r6
    614e:	5f 90       	pop	r5
    6150:	4f 90       	pop	r4
    6152:	08 95       	ret

00006154 <vdmSetInter>:
}



TVP vdmSetInter(TVP set1, TVP set2)
{
    6154:	4f 92       	push	r4
    6156:	5f 92       	push	r5
    6158:	6f 92       	push	r6
    615a:	7f 92       	push	r7
    615c:	8f 92       	push	r8
    615e:	9f 92       	push	r9
    6160:	af 92       	push	r10
    6162:	bf 92       	push	r11
    6164:	cf 92       	push	r12
    6166:	df 92       	push	r13
    6168:	ef 92       	push	r14
    616a:	ff 92       	push	r15
    616c:	0f 93       	push	r16
    616e:	1f 93       	push	r17
    6170:	cf 93       	push	r28
    6172:	df 93       	push	r29
    6174:	fc 01       	movw	r30, r24
    6176:	4b 01       	movw	r8, r22
	TVP inter;
	TVP tmpset1;
	TVP tmpset2;
	TVP res;

	ASSERT_CHECK(set1);
    6178:	80 81       	ld	r24, Z
    617a:	87 30       	cpi	r24, 0x07	; 7
    617c:	21 f4       	brne	.+8      	; 0x6186 <vdmSetInter+0x32>
	ASSERT_CHECK(set2);
    617e:	db 01       	movw	r26, r22
    6180:	8c 91       	ld	r24, X
    6182:	87 30       	cpi	r24, 0x07	; 7
    6184:	11 f0       	breq	.+4      	; 0x618a <vdmSetInter+0x36>
    6186:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
    618a:	c3 80       	ldd	r12, Z+3	; 0x03
    618c:	d4 80       	ldd	r13, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);
    618e:	db 01       	movw	r26, r22
    6190:	13 96       	adiw	r26, 0x03	; 3
    6192:	ed 91       	ld	r30, X+
    6194:	fc 91       	ld	r31, X
    6196:	14 97       	sbiw	r26, 0x04	; 4

	if(col1->size == 0 || col2->size ==0)
    6198:	d6 01       	movw	r26, r12
    619a:	12 96       	adiw	r26, 0x02	; 2
    619c:	8d 91       	ld	r24, X+
    619e:	9c 91       	ld	r25, X
    61a0:	13 97       	sbiw	r26, 0x03	; 3
    61a2:	89 2b       	or	r24, r25
    61a4:	21 f0       	breq	.+8      	; 0x61ae <vdmSetInter+0x5a>
    61a6:	82 81       	ldd	r24, Z+2	; 0x02
    61a8:	93 81       	ldd	r25, Z+3	; 0x03
    61aa:	89 2b       	or	r24, r25
    61ac:	41 f4       	brne	.+16     	; 0x61be <vdmSetInter+0x6a>
	{
		return newSetWithValues(0, NULL);
    61ae:	80 e0       	ldi	r24, 0x00	; 0
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	60 e0       	ldi	r22, 0x00	; 0
    61b4:	70 e0       	ldi	r23, 0x00	; 0
    61b6:	0e 94 a7 2c 	call	0x594e	; 0x594e <newSetWithValues>
    61ba:	5c 01       	movw	r10, r24
    61bc:	54 c0       	rjmp	.+168    	; 0x6266 <vdmSetInter+0x112>
	}

	inter = newSetWithValues(0, NULL);
    61be:	80 e0       	ldi	r24, 0x00	; 0
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	60 e0       	ldi	r22, 0x00	; 0
    61c4:	70 e0       	ldi	r23, 0x00	; 0
    61c6:	0e 94 a7 2c 	call	0x594e	; 0x594e <newSetWithValues>
    61ca:	5c 01       	movw	r10, r24
    61cc:	c0 e0       	ldi	r28, 0x00	; 0
    61ce:	d0 e0       	ldi	r29, 0x00	; 0
		res = vdmSetMemberOf(set2, (col1->value)[i]);

		if(res->value.boolVal)
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    61d0:	a1 e0       	ldi	r26, 0x01	; 1
    61d2:	4a 2e       	mov	r4, r26
    61d4:	51 2c       	mov	r5, r1
    61d6:	3e c0       	rjmp	.+124    	; 0x6254 <vdmSetInter+0x100>
		return newSetWithValues(0, NULL);
	}

	inter = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    61d8:	7e 01       	movw	r14, r28
    61da:	ee 0c       	add	r14, r14
    61dc:	ff 1c       	adc	r15, r15
	{
		res = vdmSetMemberOf(set2, (col1->value)[i]);
    61de:	d6 01       	movw	r26, r12
    61e0:	ed 91       	ld	r30, X+
    61e2:	fc 91       	ld	r31, X
    61e4:	ee 0d       	add	r30, r14
    61e6:	ff 1d       	adc	r31, r15
    61e8:	60 81       	ld	r22, Z
    61ea:	71 81       	ldd	r23, Z+1	; 0x01
    61ec:	c4 01       	movw	r24, r8
    61ee:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <vdmSetMemberOf>
    61f2:	3c 01       	movw	r6, r24

		if(res->value.boolVal)
    61f4:	fc 01       	movw	r30, r24
    61f6:	83 81       	ldd	r24, Z+3	; 0x03
    61f8:	88 23       	and	r24, r24
    61fa:	41 f1       	breq	.+80     	; 0x624c <vdmSetInter+0xf8>
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    61fc:	00 d0       	rcall	.+0      	; 0x61fe <vdmSetInter+0xaa>
    61fe:	00 d0       	rcall	.+0      	; 0x6200 <vdmSetInter+0xac>
    6200:	ad b7       	in	r26, 0x3d	; 61
    6202:	be b7       	in	r27, 0x3e	; 62
    6204:	12 96       	adiw	r26, 0x02	; 2
    6206:	5c 92       	st	X, r5
    6208:	4e 92       	st	-X, r4
    620a:	11 97       	sbiw	r26, 0x01	; 1
    620c:	d6 01       	movw	r26, r12
    620e:	ed 91       	ld	r30, X+
    6210:	fc 91       	ld	r31, X
    6212:	ee 0d       	add	r30, r14
    6214:	ff 1d       	adc	r31, r15
    6216:	80 81       	ld	r24, Z
    6218:	91 81       	ldd	r25, Z+1	; 0x01
    621a:	ed b7       	in	r30, 0x3d	; 61
    621c:	fe b7       	in	r31, 0x3e	; 62
    621e:	94 83       	std	Z+4, r25	; 0x04
    6220:	83 83       	std	Z+3, r24	; 0x03
    6222:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6226:	8c 01       	movw	r16, r24
			tmpset2 = vdmSetUnion(inter, tmpset1);
    6228:	0f 90       	pop	r0
    622a:	0f 90       	pop	r0
    622c:	0f 90       	pop	r0
    622e:	0f 90       	pop	r0
    6230:	c5 01       	movw	r24, r10
    6232:	b8 01       	movw	r22, r16
    6234:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    6238:	f8 2e       	mov	r15, r24
    623a:	e9 2e       	mov	r14, r25
			vdmFree(inter);
    623c:	c5 01       	movw	r24, r10
    623e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			inter = tmpset2;
			vdmFree(tmpset1);
    6242:	c8 01       	movw	r24, r16
    6244:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    6248:	af 2c       	mov	r10, r15
    624a:	be 2c       	mov	r11, r14
		}
		vdmFree(res);
    624c:	c3 01       	movw	r24, r6
    624e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		return newSetWithValues(0, NULL);
	}

	inter = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    6252:	21 96       	adiw	r28, 0x01	; 1
    6254:	d6 01       	movw	r26, r12
    6256:	12 96       	adiw	r26, 0x02	; 2
    6258:	8d 91       	ld	r24, X+
    625a:	9c 91       	ld	r25, X
    625c:	13 97       	sbiw	r26, 0x03	; 3
    625e:	c8 17       	cp	r28, r24
    6260:	d9 07       	cpc	r29, r25
    6262:	0c f4       	brge	.+2      	; 0x6266 <vdmSetInter+0x112>
    6264:	b9 cf       	rjmp	.-142    	; 0x61d8 <vdmSetInter+0x84>
		}
		vdmFree(res);
	}

	return inter;
}
    6266:	c5 01       	movw	r24, r10
    6268:	df 91       	pop	r29
    626a:	cf 91       	pop	r28
    626c:	1f 91       	pop	r17
    626e:	0f 91       	pop	r16
    6270:	ff 90       	pop	r15
    6272:	ef 90       	pop	r14
    6274:	df 90       	pop	r13
    6276:	cf 90       	pop	r12
    6278:	bf 90       	pop	r11
    627a:	af 90       	pop	r10
    627c:	9f 90       	pop	r9
    627e:	8f 90       	pop	r8
    6280:	7f 90       	pop	r7
    6282:	6f 90       	pop	r6
    6284:	5f 90       	pop	r5
    6286:	4f 90       	pop	r4
    6288:	08 95       	ret

0000628a <vdmSetDinter>:
}



TVP vdmSetDinter(TVP set)
{
    628a:	cf 92       	push	r12
    628c:	df 92       	push	r13
    628e:	ef 92       	push	r14
    6290:	ff 92       	push	r15
    6292:	0f 93       	push	r16
    6294:	1f 93       	push	r17
    6296:	cf 93       	push	r28
    6298:	df 93       	push	r29
    629a:	fc 01       	movw	r30, r24
	int i;
	TVP interset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    629c:	80 81       	ld	r24, Z
    629e:	87 30       	cpi	r24, 0x07	; 7
    62a0:	a9 f4       	brne	.+42     	; 0x62cc <vdmSetDinter+0x42>

	UNWRAP_COLLECTION(col, set);
    62a2:	e3 80       	ldd	r14, Z+3	; 0x03
    62a4:	f4 80       	ldd	r15, Z+4	; 0x04
	for(i = 0; i < col->size; i++)
    62a6:	d7 01       	movw	r26, r14
    62a8:	12 96       	adiw	r26, 0x02	; 2
    62aa:	4d 91       	ld	r20, X+
    62ac:	5c 91       	ld	r21, X
    62ae:	13 97       	sbiw	r26, 0x03	; 3
    62b0:	20 e0       	ldi	r18, 0x00	; 0
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	0f c0       	rjmp	.+30     	; 0x62d4 <vdmSetDinter+0x4a>
	{
		ASSERT_CHECK((col->value)[i]);
    62b6:	c9 01       	movw	r24, r18
    62b8:	88 0f       	add	r24, r24
    62ba:	99 1f       	adc	r25, r25
    62bc:	e8 0f       	add	r30, r24
    62be:	f9 1f       	adc	r31, r25
    62c0:	01 90       	ld	r0, Z+
    62c2:	f0 81       	ld	r31, Z
    62c4:	e0 2d       	mov	r30, r0
    62c6:	80 81       	ld	r24, Z
    62c8:	87 30       	cpi	r24, 0x07	; 7
    62ca:	11 f0       	breq	.+4      	; 0x62d0 <vdmSetDinter+0x46>
    62cc:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    62d0:	2f 5f       	subi	r18, 0xFF	; 255
    62d2:	3f 4f       	sbci	r19, 0xFF	; 255
    62d4:	d7 01       	movw	r26, r14
    62d6:	ed 91       	ld	r30, X+
    62d8:	fc 91       	ld	r31, X
    62da:	24 17       	cp	r18, r20
    62dc:	35 07       	cpc	r19, r21
    62de:	5c f3       	brlt	.-42     	; 0x62b6 <vdmSetDinter+0x2c>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);
    62e0:	80 81       	ld	r24, Z
    62e2:	91 81       	ldd	r25, Z+1	; 0x01
    62e4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    62e8:	d8 2e       	mov	r13, r24
    62ea:	c9 2e       	mov	r12, r25
    62ec:	c1 e0       	ldi	r28, 0x01	; 1
    62ee:	d0 e0       	ldi	r29, 0x00	; 0
    62f0:	16 c0       	rjmp	.+44     	; 0x631e <vdmSetDinter+0x94>

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
	{
		set1 = vdmSetInter(interset, (col->value)[i]);
    62f2:	ce 01       	movw	r24, r28
    62f4:	88 0f       	add	r24, r24
    62f6:	99 1f       	adc	r25, r25
    62f8:	d7 01       	movw	r26, r14
    62fa:	ed 91       	ld	r30, X+
    62fc:	fc 91       	ld	r31, X
    62fe:	e8 0f       	add	r30, r24
    6300:	f9 1f       	adc	r31, r25
    6302:	60 81       	ld	r22, Z
    6304:	71 81       	ldd	r23, Z+1	; 0x01
    6306:	8d 2d       	mov	r24, r13
    6308:	9c 2d       	mov	r25, r12
    630a:	0e 94 aa 30 	call	0x6154	; 0x6154 <vdmSetInter>
    630e:	18 2f       	mov	r17, r24
    6310:	09 2f       	mov	r16, r25
		vdmFree(interset);
    6312:	8d 2d       	mov	r24, r13
    6314:	9c 2d       	mov	r25, r12
    6316:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    631a:	21 96       	adiw	r28, 0x01	; 1
    631c:	68 01       	movw	r12, r16
    631e:	f7 01       	movw	r30, r14
    6320:	82 81       	ldd	r24, Z+2	; 0x02
    6322:	93 81       	ldd	r25, Z+3	; 0x03
    6324:	c8 17       	cp	r28, r24
    6326:	d9 07       	cpc	r29, r25
    6328:	24 f3       	brlt	.-56     	; 0x62f2 <vdmSetDinter+0x68>
		vdmFree(interset);
		interset = set1;
	}

	return interset;
}
    632a:	8d 2d       	mov	r24, r13
    632c:	9c 2d       	mov	r25, r12
    632e:	df 91       	pop	r29
    6330:	cf 91       	pop	r28
    6332:	1f 91       	pop	r17
    6334:	0f 91       	pop	r16
    6336:	ff 90       	pop	r15
    6338:	ef 90       	pop	r14
    633a:	df 90       	pop	r13
    633c:	cf 90       	pop	r12
    633e:	08 95       	ret

00006340 <vdmSetEnumerateSetOfInts>:
}



TVP vdmSetEnumerateSetOfInts(int lower, int upper)
{
    6340:	8f 92       	push	r8
    6342:	9f 92       	push	r9
    6344:	af 92       	push	r10
    6346:	bf 92       	push	r11
    6348:	cf 92       	push	r12
    634a:	df 92       	push	r13
    634c:	ef 92       	push	r14
    634e:	ff 92       	push	r15
    6350:	0f 93       	push	r16
    6352:	1f 93       	push	r17
    6354:	df 93       	push	r29
    6356:	cf 93       	push	r28
    6358:	00 d0       	rcall	.+0      	; 0x635a <vdmSetEnumerateSetOfInts+0x1a>
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
    635e:	8c 01       	movw	r16, r24
    6360:	6b 01       	movw	r12, r22
	/* For faster access.  */
	/* 	l = lower->value.intVal;  */
	/* 	u = upper->value.intVal;  */

	/* Some special cases.  */
	if (upper < lower)
    6362:	68 17       	cp	r22, r24
    6364:	79 07       	cpc	r23, r25
    6366:	1c f4       	brge	.+6      	; 0x636e <vdmSetEnumerateSetOfInts+0x2e>
    6368:	cc 24       	eor	r12, r12
    636a:	dd 24       	eor	r13, r13
    636c:	59 c0       	rjmp	.+178    	; 0x6420 <vdmSetEnumerateSetOfInts+0xe0>
	{
		return NULL;
	}

	if(lower == upper)
    636e:	86 17       	cp	r24, r22
    6370:	97 07       	cpc	r25, r23
    6372:	a1 f4       	brne	.+40     	; 0x639c <vdmSetEnumerateSetOfInts+0x5c>
	{
		return newSetVar(1, newInt(upper));
    6374:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    6378:	00 d0       	rcall	.+0      	; 0x637a <vdmSetEnumerateSetOfInts+0x3a>
    637a:	00 d0       	rcall	.+0      	; 0x637c <vdmSetEnumerateSetOfInts+0x3c>
    637c:	21 e0       	ldi	r18, 0x01	; 1
    637e:	30 e0       	ldi	r19, 0x00	; 0
    6380:	ed b7       	in	r30, 0x3d	; 61
    6382:	fe b7       	in	r31, 0x3e	; 62
    6384:	32 83       	std	Z+2, r19	; 0x02
    6386:	21 83       	std	Z+1, r18	; 0x01
    6388:	94 83       	std	Z+4, r25	; 0x04
    638a:	83 83       	std	Z+3, r24	; 0x03
    638c:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6390:	6c 01       	movw	r12, r24
    6392:	0f 90       	pop	r0
    6394:	0f 90       	pop	r0
    6396:	0f 90       	pop	r0
    6398:	0f 90       	pop	r0
    639a:	42 c0       	rjmp	.+132    	; 0x6420 <vdmSetEnumerateSetOfInts+0xe0>
	}

	/* The common case.  */
	theset = (TVP*)calloc(upper - lower + 1, sizeof(TVP));
    639c:	cb 01       	movw	r24, r22
    639e:	80 1b       	sub	r24, r16
    63a0:	91 0b       	sbc	r25, r17
    63a2:	01 96       	adiw	r24, 0x01	; 1
    63a4:	62 e0       	ldi	r22, 0x02	; 2
    63a6:	70 e0       	ldi	r23, 0x00	; 0
    63a8:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    63ac:	98 2e       	mov	r9, r24
    63ae:	89 2e       	mov	r8, r25
    63b0:	e8 2e       	mov	r14, r24
    63b2:	f9 2e       	mov	r15, r25
	assert(theset != NULL);
    63b4:	e1 14       	cp	r14, r1
    63b6:	f1 04       	cpc	r15, r1
    63b8:	11 f4       	brne	.+4      	; 0x63be <vdmSetEnumerateSetOfInts+0x7e>
    63ba:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	count = 0;
    63be:	1a 82       	std	Y+2, r1	; 0x02
    63c0:	19 82       	std	Y+1, r1	; 0x01

	for (i = lower; i <= upper; i++)
	{
		vdmSetAdd(theset, &count, newInt(i));
    63c2:	5e 01       	movw	r10, r28
    63c4:	08 94       	sec
    63c6:	a1 1c       	adc	r10, r1
    63c8:	b1 1c       	adc	r11, r1
    63ca:	c8 01       	movw	r24, r16
    63cc:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <newInt>
    63d0:	ac 01       	movw	r20, r24
    63d2:	c7 01       	movw	r24, r14
    63d4:	b5 01       	movw	r22, r10
    63d6:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>
	/* The common case.  */
	theset = (TVP*)calloc(upper - lower + 1, sizeof(TVP));
	assert(theset != NULL);
	count = 0;

	for (i = lower; i <= upper; i++)
    63da:	0f 5f       	subi	r16, 0xFF	; 255
    63dc:	1f 4f       	sbci	r17, 0xFF	; 255
    63de:	c0 16       	cp	r12, r16
    63e0:	d1 06       	cpc	r13, r17
    63e2:	9c f7       	brge	.-26     	; 0x63ca <vdmSetEnumerateSetOfInts+0x8a>
	{
		vdmSetAdd(theset, &count, newInt(i));
	}

	TVP res = newCollectionWithValues(count, VDM_SET, theset);
    63e4:	89 81       	ldd	r24, Y+1	; 0x01
    63e6:	9a 81       	ldd	r25, Y+2	; 0x02
    63e8:	67 e0       	ldi	r22, 0x07	; 7
    63ea:	a7 01       	movw	r20, r14
    63ec:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <newCollectionWithValues>
    63f0:	6c 01       	movw	r12, r24
    63f2:	89 2d       	mov	r24, r9
    63f4:	98 2d       	mov	r25, r8
    63f6:	9c 01       	movw	r18, r24
    63f8:	59 01       	movw	r10, r18
    63fa:	00 e0       	ldi	r16, 0x00	; 0
    63fc:	10 e0       	ldi	r17, 0x00	; 0
    63fe:	08 c0       	rjmp	.+16     	; 0x6410 <vdmSetEnumerateSetOfInts+0xd0>

	for(i = 0; i < count; i++)
	{
		vdmFree(theset[i]);
    6400:	f5 01       	movw	r30, r10
    6402:	81 91       	ld	r24, Z+
    6404:	91 91       	ld	r25, Z+
    6406:	5f 01       	movw	r10, r30
    6408:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		vdmSetAdd(theset, &count, newInt(i));
	}

	TVP res = newCollectionWithValues(count, VDM_SET, theset);

	for(i = 0; i < count; i++)
    640c:	0f 5f       	subi	r16, 0xFF	; 255
    640e:	1f 4f       	sbci	r17, 0xFF	; 255
    6410:	89 81       	ldd	r24, Y+1	; 0x01
    6412:	9a 81       	ldd	r25, Y+2	; 0x02
    6414:	08 17       	cp	r16, r24
    6416:	19 07       	cpc	r17, r25
    6418:	9c f3       	brlt	.-26     	; 0x6400 <vdmSetEnumerateSetOfInts+0xc0>
	{
		vdmFree(theset[i]);
	}
	free(theset);
    641a:	c7 01       	movw	r24, r14
    641c:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    6420:	c6 01       	movw	r24, r12
    6422:	0f 90       	pop	r0
    6424:	0f 90       	pop	r0
    6426:	cf 91       	pop	r28
    6428:	df 91       	pop	r29
    642a:	1f 91       	pop	r17
    642c:	0f 91       	pop	r16
    642e:	ff 90       	pop	r15
    6430:	ef 90       	pop	r14
    6432:	df 90       	pop	r13
    6434:	cf 90       	pop	r12
    6436:	bf 90       	pop	r11
    6438:	af 90       	pop	r10
    643a:	9f 90       	pop	r9
    643c:	8f 90       	pop	r8
    643e:	08 95       	ret

00006440 <newSetVarToGrowGC>:
	free(value);
	return res;
}

TVP newSetVarToGrowGC(size_t size, size_t expected_size, TVP *from, ...)
{
    6440:	4f 92       	push	r4
    6442:	5f 92       	push	r5
    6444:	6f 92       	push	r6
    6446:	7f 92       	push	r7
    6448:	8f 92       	push	r8
    644a:	9f 92       	push	r9
    644c:	af 92       	push	r10
    644e:	bf 92       	push	r11
    6450:	cf 92       	push	r12
    6452:	df 92       	push	r13
    6454:	ef 92       	push	r14
    6456:	ff 92       	push	r15
    6458:	0f 93       	push	r16
    645a:	1f 93       	push	r17
    645c:	df 93       	push	r29
    645e:	cf 93       	push	r28
    6460:	00 d0       	rcall	.+0      	; 0x6462 <newSetVarToGrowGC+0x22>
    6462:	cd b7       	in	r28, 0x3d	; 61
    6464:	de b7       	in	r29, 0x3e	; 62
    6466:	4d 88       	ldd	r4, Y+21	; 0x15
    6468:	5e 88       	ldd	r5, Y+22	; 0x16
    646a:	1f 89       	ldd	r17, Y+23	; 0x17
    646c:	08 8d       	ldd	r16, Y+24	; 0x18
    646e:	9b e1       	ldi	r25, 0x1B	; 27
    6470:	a9 2e       	mov	r10, r25
    6472:	b1 2c       	mov	r11, r1
    6474:	ac 0e       	add	r10, r28
    6476:	bd 1e       	adc	r11, r29
	va_list ap;
	va_start(ap, from);

	int i;
	int count = 0;
    6478:	1a 82       	std	Y+2, r1	; 0x02
    647a:	19 82       	std	Y+1, r1	; 0x01

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    647c:	81 2f       	mov	r24, r17
    647e:	90 2f       	mov	r25, r16
    6480:	62 e0       	ldi	r22, 0x02	; 2
    6482:	70 e0       	ldi	r23, 0x00	; 0
    6484:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    6488:	7c 01       	movw	r14, r24
	assert(value != NULL);
    648a:	00 97       	sbiw	r24, 0x00	; 0
    648c:	19 f1       	breq	.+70     	; 0x64d4 <newSetVarToGrowGC+0x94>
	va_start(ap, from);

	int i;
	int count = 0;

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
    648e:	21 2f       	mov	r18, r17
    6490:	30 2f       	mov	r19, r16
    6492:	c9 01       	movw	r24, r18
    6494:	6c 01       	movw	r12, r24
    6496:	00 e0       	ldi	r16, 0x00	; 0
    6498:	10 e0       	ldi	r17, 0x00	; 0
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
			assert(value != NULL);
		}
		vdmSetAdd(value,&count,v);
    649a:	3e 01       	movw	r6, r28
    649c:	08 94       	sec
    649e:	61 1c       	adc	r6, r1
    64a0:	71 1c       	adc	r7, r1
    64a2:	25 c0       	rjmp	.+74     	; 0x64ee <newSetVarToGrowGC+0xae>
	TVP v;

	for (i = 0; i < size; i++)
	{
		arg = va_arg(ap, TVP);
		v = vdmClone(arg); /*  set binding  */
    64a4:	f5 01       	movw	r30, r10
    64a6:	80 81       	ld	r24, Z
    64a8:	91 81       	ldd	r25, Z+1	; 0x01
    64aa:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    64ae:	4c 01       	movw	r8, r24


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    64b0:	89 81       	ldd	r24, Y+1	; 0x01
    64b2:	9a 81       	ldd	r25, Y+2	; 0x02
    64b4:	8c 15       	cp	r24, r12
    64b6:	9d 05       	cpc	r25, r13
    64b8:	7c f0       	brlt	.+30     	; 0x64d8 <newSetVarToGrowGC+0x98>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    64ba:	8a e0       	ldi	r24, 0x0A	; 10
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	c8 0e       	add	r12, r24
    64c0:	d9 1e       	adc	r13, r25
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    64c2:	b6 01       	movw	r22, r12
    64c4:	66 0f       	add	r22, r22
    64c6:	77 1f       	adc	r23, r23
    64c8:	c7 01       	movw	r24, r14
    64ca:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    64ce:	7c 01       	movw	r14, r24
			assert(value != NULL);
    64d0:	00 97       	sbiw	r24, 0x00	; 0
    64d2:	11 f4       	brne	.+4      	; 0x64d8 <newSetVarToGrowGC+0x98>
    64d4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
		}
		vdmSetAdd(value,&count,v);
    64d8:	c7 01       	movw	r24, r14
    64da:	b3 01       	movw	r22, r6
    64dc:	a4 01       	movw	r20, r8
    64de:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>
	assert(value != NULL);

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    64e2:	0f 5f       	subi	r16, 0xFF	; 255
    64e4:	1f 4f       	sbci	r17, 0xFF	; 255
    64e6:	e2 e0       	ldi	r30, 0x02	; 2
    64e8:	f0 e0       	ldi	r31, 0x00	; 0
    64ea:	ae 0e       	add	r10, r30
    64ec:	bf 1e       	adc	r11, r31
    64ee:	04 15       	cp	r16, r4
    64f0:	15 05       	cpc	r17, r5
    64f2:	c0 f2       	brcs	.-80     	; 0x64a4 <newSetVarToGrowGC+0x64>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    64f4:	89 81       	ldd	r24, Y+1	; 0x01
    64f6:	9a 81       	ldd	r25, Y+2	; 0x02
    64f8:	67 e0       	ldi	r22, 0x07	; 7
    64fa:	a7 01       	movw	r20, r14
    64fc:	29 8d       	ldd	r18, Y+25	; 0x19
    64fe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6500:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <newCollectionWithValuesGC>
    6504:	18 2f       	mov	r17, r24
    6506:	09 2f       	mov	r16, r25
	free(value);
    6508:	c7 01       	movw	r24, r14
    650a:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    650e:	81 2f       	mov	r24, r17
    6510:	90 2f       	mov	r25, r16
    6512:	0f 90       	pop	r0
    6514:	0f 90       	pop	r0
    6516:	cf 91       	pop	r28
    6518:	df 91       	pop	r29
    651a:	1f 91       	pop	r17
    651c:	0f 91       	pop	r16
    651e:	ff 90       	pop	r15
    6520:	ef 90       	pop	r14
    6522:	df 90       	pop	r13
    6524:	cf 90       	pop	r12
    6526:	bf 90       	pop	r11
    6528:	af 90       	pop	r10
    652a:	9f 90       	pop	r9
    652c:	8f 90       	pop	r8
    652e:	7f 90       	pop	r7
    6530:	6f 90       	pop	r6
    6532:	5f 90       	pop	r5
    6534:	4f 90       	pop	r4
    6536:	08 95       	ret

00006538 <newSetVarGC>:
	return res;
}


TVP newSetVarGC(size_t size, TVP *from, ...)
{
    6538:	4f 92       	push	r4
    653a:	5f 92       	push	r5
    653c:	6f 92       	push	r6
    653e:	7f 92       	push	r7
    6540:	8f 92       	push	r8
    6542:	9f 92       	push	r9
    6544:	af 92       	push	r10
    6546:	bf 92       	push	r11
    6548:	cf 92       	push	r12
    654a:	df 92       	push	r13
    654c:	ef 92       	push	r14
    654e:	ff 92       	push	r15
    6550:	0f 93       	push	r16
    6552:	1f 93       	push	r17
    6554:	df 93       	push	r29
    6556:	cf 93       	push	r28
    6558:	00 d0       	rcall	.+0      	; 0x655a <newSetVarGC+0x22>
    655a:	cd b7       	in	r28, 0x3d	; 61
    655c:	de b7       	in	r29, 0x3e	; 62
    655e:	4d 88       	ldd	r4, Y+21	; 0x15
    6560:	5e 88       	ldd	r5, Y+22	; 0x16
    6562:	8e 01       	movw	r16, r28
    6564:	07 5e       	subi	r16, 0xE7	; 231
    6566:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;

	va_list ap;
	va_start(ap, from);

	int count = 0;
    6568:	1a 82       	std	Y+2, r1	; 0x02
    656a:	19 82       	std	Y+1, r1	; 0x01

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    656c:	82 e0       	ldi	r24, 0x02	; 2
    656e:	90 e0       	ldi	r25, 0x00	; 0
    6570:	62 e0       	ldi	r22, 0x02	; 2
    6572:	70 e0       	ldi	r23, 0x00	; 0
    6574:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    6578:	7c 01       	movw	r14, r24
	assert(value != NULL);
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	01 f1       	breq	.+64     	; 0x65be <newSetVarGC+0x86>
    657e:	58 01       	movw	r10, r16
    6580:	cc 24       	eor	r12, r12
    6582:	dd 24       	eor	r13, r13
    6584:	02 e0       	ldi	r16, 0x02	; 2
    6586:	10 e0       	ldi	r17, 0x00	; 0
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
			assert(value != NULL);
		}
		vdmSetAdd(value,&count,v);
    6588:	3e 01       	movw	r6, r28
    658a:	08 94       	sec
    658c:	61 1c       	adc	r6, r1
    658e:	71 1c       	adc	r7, r1
    6590:	24 c0       	rjmp	.+72     	; 0x65da <newSetVarGC+0xa2>
	assert(value != NULL);

	for (i = 0; i < size; i++)
	{
		TVP arg = va_arg(ap, TVP);
		TVP v = vdmClone(arg);
    6592:	f5 01       	movw	r30, r10
    6594:	80 81       	ld	r24, Z
    6596:	91 81       	ldd	r25, Z+1	; 0x01
    6598:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    659c:	4c 01       	movw	r8, r24

		if(count>=bufsize)
    659e:	89 81       	ldd	r24, Y+1	; 0x01
    65a0:	9a 81       	ldd	r25, Y+2	; 0x02
    65a2:	80 17       	cp	r24, r16
    65a4:	91 07       	cpc	r25, r17
    65a6:	6c f0       	brlt	.+26     	; 0x65c2 <newSetVarGC+0x8a>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    65a8:	06 5f       	subi	r16, 0xF6	; 246
    65aa:	1f 4f       	sbci	r17, 0xFF	; 255
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    65ac:	b8 01       	movw	r22, r16
    65ae:	66 0f       	add	r22, r22
    65b0:	77 1f       	adc	r23, r23
    65b2:	c7 01       	movw	r24, r14
    65b4:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    65b8:	7c 01       	movw	r14, r24
			assert(value != NULL);
    65ba:	00 97       	sbiw	r24, 0x00	; 0
    65bc:	11 f4       	brne	.+4      	; 0x65c2 <newSetVarGC+0x8a>
    65be:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
		}
		vdmSetAdd(value,&count,v);
    65c2:	c7 01       	movw	r24, r14
    65c4:	b3 01       	movw	r22, r6
    65c6:	a4 01       	movw	r20, r8
    65c8:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    65cc:	08 94       	sec
    65ce:	c1 1c       	adc	r12, r1
    65d0:	d1 1c       	adc	r13, r1
    65d2:	82 e0       	ldi	r24, 0x02	; 2
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	a8 0e       	add	r10, r24
    65d8:	b9 1e       	adc	r11, r25
    65da:	c4 14       	cp	r12, r4
    65dc:	d5 04       	cpc	r13, r5
    65de:	c8 f2       	brcs	.-78     	; 0x6592 <newSetVarGC+0x5a>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    65e0:	89 81       	ldd	r24, Y+1	; 0x01
    65e2:	9a 81       	ldd	r25, Y+2	; 0x02
    65e4:	67 e0       	ldi	r22, 0x07	; 7
    65e6:	a7 01       	movw	r20, r14
    65e8:	2f 89       	ldd	r18, Y+23	; 0x17
    65ea:	38 8d       	ldd	r19, Y+24	; 0x18
    65ec:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <newCollectionWithValuesGC>
    65f0:	b8 2e       	mov	r11, r24
    65f2:	a9 2e       	mov	r10, r25
    65f4:	67 01       	movw	r12, r14
    65f6:	00 e0       	ldi	r16, 0x00	; 0
    65f8:	10 e0       	ldi	r17, 0x00	; 0
    65fa:	08 c0       	rjmp	.+16     	; 0x660c <newSetVarGC+0xd4>
	for(i = 0; i < count; i++)
	{
		vdmFree(value[i]);
    65fc:	f6 01       	movw	r30, r12
    65fe:	81 91       	ld	r24, Z+
    6600:	91 91       	ld	r25, Z+
    6602:	6f 01       	movw	r12, r30
    6604:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
	for(i = 0; i < count; i++)
    6608:	0f 5f       	subi	r16, 0xFF	; 255
    660a:	1f 4f       	sbci	r17, 0xFF	; 255
    660c:	89 81       	ldd	r24, Y+1	; 0x01
    660e:	9a 81       	ldd	r25, Y+2	; 0x02
    6610:	08 17       	cp	r16, r24
    6612:	19 07       	cpc	r17, r25
    6614:	9c f3       	brlt	.-26     	; 0x65fc <newSetVarGC+0xc4>
	{
		vdmFree(value[i]);
	}
	free(value);
    6616:	c7 01       	movw	r24, r14
    6618:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    661c:	8b 2d       	mov	r24, r11
    661e:	9a 2d       	mov	r25, r10
    6620:	0f 90       	pop	r0
    6622:	0f 90       	pop	r0
    6624:	cf 91       	pop	r28
    6626:	df 91       	pop	r29
    6628:	1f 91       	pop	r17
    662a:	0f 91       	pop	r16
    662c:	ff 90       	pop	r15
    662e:	ef 90       	pop	r14
    6630:	df 90       	pop	r13
    6632:	cf 90       	pop	r12
    6634:	bf 90       	pop	r11
    6636:	af 90       	pop	r10
    6638:	9f 90       	pop	r9
    663a:	8f 90       	pop	r8
    663c:	7f 90       	pop	r7
    663e:	6f 90       	pop	r6
    6640:	5f 90       	pop	r5
    6642:	4f 90       	pop	r4
    6644:	08 95       	ret

00006646 <vdmSetDunionGC>:
	return unionset;
}


TVP vdmSetDunionGC(TVP set, TVP *from)
{
    6646:	cf 92       	push	r12
    6648:	df 92       	push	r13
    664a:	ef 92       	push	r14
    664c:	ff 92       	push	r15
    664e:	0f 93       	push	r16
    6650:	1f 93       	push	r17
    6652:	cf 93       	push	r28
    6654:	df 93       	push	r29
    6656:	fc 01       	movw	r30, r24
	int i;
	TVP unionset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    6658:	80 81       	ld	r24, Z
    665a:	87 30       	cpi	r24, 0x07	; 7
    665c:	c1 f4       	brne	.+48     	; 0x668e <vdmSetDunionGC+0x48>

	UNWRAP_COLLECTION(col, set);
    665e:	e3 80       	ldd	r14, Z+3	; 0x03
    6660:	f4 80       	ldd	r15, Z+4	; 0x04
	for(i = 0; i < col->size; i++)
    6662:	d7 01       	movw	r26, r14
    6664:	12 96       	adiw	r26, 0x02	; 2
    6666:	4d 91       	ld	r20, X+
    6668:	5c 91       	ld	r21, X
    666a:	13 97       	sbiw	r26, 0x03	; 3
    666c:	20 e0       	ldi	r18, 0x00	; 0
    666e:	30 e0       	ldi	r19, 0x00	; 0
    6670:	12 c0       	rjmp	.+36     	; 0x6696 <vdmSetDunionGC+0x50>
	{
		ASSERT_CHECK((col->value)[i]);
    6672:	c9 01       	movw	r24, r18
    6674:	88 0f       	add	r24, r24
    6676:	99 1f       	adc	r25, r25
    6678:	d7 01       	movw	r26, r14
    667a:	ed 91       	ld	r30, X+
    667c:	fc 91       	ld	r31, X
    667e:	e8 0f       	add	r30, r24
    6680:	f9 1f       	adc	r31, r25
    6682:	01 90       	ld	r0, Z+
    6684:	f0 81       	ld	r31, Z
    6686:	e0 2d       	mov	r30, r0
    6688:	80 81       	ld	r24, Z
    668a:	87 30       	cpi	r24, 0x07	; 7
    668c:	11 f0       	breq	.+4      	; 0x6692 <vdmSetDunionGC+0x4c>
    668e:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    6692:	2f 5f       	subi	r18, 0xFF	; 255
    6694:	3f 4f       	sbci	r19, 0xFF	; 255
    6696:	24 17       	cp	r18, r20
    6698:	35 07       	cpc	r19, r21
    669a:	5c f3       	brlt	.-42     	; 0x6672 <vdmSetDunionGC+0x2c>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	unionset = newSetVarGC(0, NULL, from);
    669c:	00 d0       	rcall	.+0      	; 0x669e <vdmSetDunionGC+0x58>
    669e:	00 d0       	rcall	.+0      	; 0x66a0 <vdmSetDunionGC+0x5a>
    66a0:	00 d0       	rcall	.+0      	; 0x66a2 <vdmSetDunionGC+0x5c>
    66a2:	ed b7       	in	r30, 0x3d	; 61
    66a4:	fe b7       	in	r31, 0x3e	; 62
    66a6:	31 96       	adiw	r30, 0x01	; 1
    66a8:	ad b7       	in	r26, 0x3d	; 61
    66aa:	be b7       	in	r27, 0x3e	; 62
    66ac:	12 96       	adiw	r26, 0x02	; 2
    66ae:	1c 92       	st	X, r1
    66b0:	1e 92       	st	-X, r1
    66b2:	11 97       	sbiw	r26, 0x01	; 1
    66b4:	13 82       	std	Z+3, r1	; 0x03
    66b6:	12 82       	std	Z+2, r1	; 0x02
    66b8:	75 83       	std	Z+5, r23	; 0x05
    66ba:	64 83       	std	Z+4, r22	; 0x04
    66bc:	0e 94 9c 32 	call	0x6538	; 0x6538 <newSetVarGC>
    66c0:	d8 2e       	mov	r13, r24
    66c2:	c9 2e       	mov	r12, r25
    66c4:	c0 e0       	ldi	r28, 0x00	; 0
    66c6:	d0 e0       	ldi	r29, 0x00	; 0
    66c8:	ed b7       	in	r30, 0x3d	; 61
    66ca:	fe b7       	in	r31, 0x3e	; 62
    66cc:	36 96       	adiw	r30, 0x06	; 6
    66ce:	0f b6       	in	r0, 0x3f	; 63
    66d0:	f8 94       	cli
    66d2:	fe bf       	out	0x3e, r31	; 62
    66d4:	0f be       	out	0x3f, r0	; 63
    66d6:	ed bf       	out	0x3d, r30	; 61
    66d8:	16 c0       	rjmp	.+44     	; 0x6706 <vdmSetDunionGC+0xc0>

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
	{
		set1 = vdmSetUnion(unionset, (col->value)[i]);
    66da:	ce 01       	movw	r24, r28
    66dc:	88 0f       	add	r24, r24
    66de:	99 1f       	adc	r25, r25
    66e0:	d7 01       	movw	r26, r14
    66e2:	ed 91       	ld	r30, X+
    66e4:	fc 91       	ld	r31, X
    66e6:	e8 0f       	add	r30, r24
    66e8:	f9 1f       	adc	r31, r25
    66ea:	60 81       	ld	r22, Z
    66ec:	71 81       	ldd	r23, Z+1	; 0x01
    66ee:	8d 2d       	mov	r24, r13
    66f0:	9c 2d       	mov	r25, r12
    66f2:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    66f6:	18 2f       	mov	r17, r24
    66f8:	09 2f       	mov	r16, r25
		vdmFree(unionset);
    66fa:	8d 2d       	mov	r24, r13
    66fc:	9c 2d       	mov	r25, r12
    66fe:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	/* Initialize final set.  */
	unionset = newSetVarGC(0, NULL, from);

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    6702:	21 96       	adiw	r28, 0x01	; 1
    6704:	68 01       	movw	r12, r16
    6706:	f7 01       	movw	r30, r14
    6708:	82 81       	ldd	r24, Z+2	; 0x02
    670a:	93 81       	ldd	r25, Z+3	; 0x03
    670c:	c8 17       	cp	r28, r24
    670e:	d9 07       	cpc	r29, r25
    6710:	24 f3       	brlt	.-56     	; 0x66da <vdmSetDunionGC+0x94>
		vdmFree(unionset);
		unionset = set1;
	}

	return unionset;
}
    6712:	8d 2d       	mov	r24, r13
    6714:	9c 2d       	mov	r25, r12
    6716:	df 91       	pop	r29
    6718:	cf 91       	pop	r28
    671a:	1f 91       	pop	r17
    671c:	0f 91       	pop	r16
    671e:	ff 90       	pop	r15
    6720:	ef 90       	pop	r14
    6722:	df 90       	pop	r13
    6724:	cf 90       	pop	r12
    6726:	08 95       	ret

00006728 <newSetWithValuesGC>:
	return res;
}


TVP newSetWithValuesGC(size_t size, TVP* elements, TVP *from)
{
    6728:	2f 92       	push	r2
    672a:	3f 92       	push	r3
    672c:	4f 92       	push	r4
    672e:	5f 92       	push	r5
    6730:	6f 92       	push	r6
    6732:	7f 92       	push	r7
    6734:	8f 92       	push	r8
    6736:	9f 92       	push	r9
    6738:	af 92       	push	r10
    673a:	bf 92       	push	r11
    673c:	cf 92       	push	r12
    673e:	df 92       	push	r13
    6740:	ef 92       	push	r14
    6742:	ff 92       	push	r15
    6744:	0f 93       	push	r16
    6746:	1f 93       	push	r17
    6748:	df 93       	push	r29
    674a:	cf 93       	push	r28
    674c:	00 d0       	rcall	.+0      	; 0x674e <newSetWithValuesGC+0x26>
    674e:	cd b7       	in	r28, 0x3d	; 61
    6750:	de b7       	in	r29, 0x3e	; 62
    6752:	3c 01       	movw	r6, r24
    6754:	16 2f       	mov	r17, r22
    6756:	07 2f       	mov	r16, r23
    6758:	2a 01       	movw	r4, r20
	int i;
	int count = 0;
    675a:	1a 82       	std	Y+2, r1	; 0x02
    675c:	19 82       	std	Y+1, r1	; 0x01
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
    675e:	82 e0       	ldi	r24, 0x02	; 2
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	62 e0       	ldi	r22, 0x02	; 2
    6764:	70 e0       	ldi	r23, 0x00	; 0
    6766:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <calloc>
    676a:	7c 01       	movw	r14, r24
	assert(value != NULL);
    676c:	00 97       	sbiw	r24, 0x00	; 0
    676e:	19 f1       	breq	.+70     	; 0x67b6 <newSetWithValuesGC+0x8e>
    6770:	81 2f       	mov	r24, r17
    6772:	90 2f       	mov	r25, r16
    6774:	9c 01       	movw	r18, r24
    6776:	59 01       	movw	r10, r18
    6778:	cc 24       	eor	r12, r12
    677a:	dd 24       	eor	r13, r13
    677c:	02 e0       	ldi	r16, 0x02	; 2
    677e:	10 e0       	ldi	r17, 0x00	; 0
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
    6780:	1e 01       	movw	r2, r28
    6782:	08 94       	sec
    6784:	21 1c       	adc	r2, r1
    6786:	31 1c       	adc	r3, r1
    6788:	24 c0       	rjmp	.+72     	; 0x67d2 <newSetWithValuesGC+0xaa>
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
	{
		TVP v = vdmClone(elements[i]); /*  set binding  */
    678a:	f5 01       	movw	r30, r10
    678c:	80 81       	ld	r24, Z
    678e:	91 81       	ldd	r25, Z+1	; 0x01
    6790:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    6794:	4c 01       	movw	r8, r24

		if(count >= bufsize)
    6796:	89 81       	ldd	r24, Y+1	; 0x01
    6798:	9a 81       	ldd	r25, Y+2	; 0x02
    679a:	80 17       	cp	r24, r16
    679c:	91 07       	cpc	r25, r17
    679e:	6c f0       	brlt	.+26     	; 0x67ba <newSetWithValuesGC+0x92>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    67a0:	06 5f       	subi	r16, 0xF6	; 246
    67a2:	1f 4f       	sbci	r17, 0xFF	; 255
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    67a4:	b8 01       	movw	r22, r16
    67a6:	66 0f       	add	r22, r22
    67a8:	77 1f       	adc	r23, r23
    67aa:	c7 01       	movw	r24, r14
    67ac:	0e 94 a7 38 	call	0x714e	; 0x714e <realloc>
    67b0:	7c 01       	movw	r14, r24
			assert(value != NULL);
    67b2:	00 97       	sbiw	r24, 0x00	; 0
    67b4:	11 f4       	brne	.+4      	; 0x67ba <newSetWithValuesGC+0x92>
    67b6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
		}
		vdmSetAdd(value, &count,v);
    67ba:	c7 01       	movw	r24, r14
    67bc:	b1 01       	movw	r22, r2
    67be:	a4 01       	movw	r20, r8
    67c0:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <vdmSetAdd>
	int count = 0;
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    67c4:	08 94       	sec
    67c6:	c1 1c       	adc	r12, r1
    67c8:	d1 1c       	adc	r13, r1
    67ca:	82 e0       	ldi	r24, 0x02	; 2
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	a8 0e       	add	r10, r24
    67d0:	b9 1e       	adc	r11, r25
    67d2:	c6 14       	cp	r12, r6
    67d4:	d7 04       	cpc	r13, r7
    67d6:	c8 f2       	brcs	.-78     	; 0x678a <newSetWithValuesGC+0x62>
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    67d8:	89 81       	ldd	r24, Y+1	; 0x01
    67da:	9a 81       	ldd	r25, Y+2	; 0x02
    67dc:	67 e0       	ldi	r22, 0x07	; 7
    67de:	a7 01       	movw	r20, r14
    67e0:	92 01       	movw	r18, r4
    67e2:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <newCollectionWithValuesGC>
    67e6:	b8 2e       	mov	r11, r24
    67e8:	a9 2e       	mov	r10, r25
    67ea:	67 01       	movw	r12, r14
    67ec:	00 e0       	ldi	r16, 0x00	; 0
    67ee:	10 e0       	ldi	r17, 0x00	; 0
    67f0:	08 c0       	rjmp	.+16     	; 0x6802 <newSetWithValuesGC+0xda>

	for(i = 0; i < count; i++)
	{
		vdmFree(value[i]);
    67f2:	f6 01       	movw	r30, r12
    67f4:	81 91       	ld	r24, Z+
    67f6:	91 91       	ld	r25, Z+
    67f8:	6f 01       	movw	r12, r30
    67fa:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);

	for(i = 0; i < count; i++)
    67fe:	0f 5f       	subi	r16, 0xFF	; 255
    6800:	1f 4f       	sbci	r17, 0xFF	; 255
    6802:	89 81       	ldd	r24, Y+1	; 0x01
    6804:	9a 81       	ldd	r25, Y+2	; 0x02
    6806:	08 17       	cp	r16, r24
    6808:	19 07       	cpc	r17, r25
    680a:	9c f3       	brlt	.-26     	; 0x67f2 <newSetWithValuesGC+0xca>
	{
		vdmFree(value[i]);
	}
	free(value);
    680c:	c7 01       	movw	r24, r14
    680e:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
	return res;
}
    6812:	8b 2d       	mov	r24, r11
    6814:	9a 2d       	mov	r25, r10
    6816:	0f 90       	pop	r0
    6818:	0f 90       	pop	r0
    681a:	cf 91       	pop	r28
    681c:	df 91       	pop	r29
    681e:	1f 91       	pop	r17
    6820:	0f 91       	pop	r16
    6822:	ff 90       	pop	r15
    6824:	ef 90       	pop	r14
    6826:	df 90       	pop	r13
    6828:	cf 90       	pop	r12
    682a:	bf 90       	pop	r11
    682c:	af 90       	pop	r10
    682e:	9f 90       	pop	r9
    6830:	8f 90       	pop	r8
    6832:	7f 90       	pop	r7
    6834:	6f 90       	pop	r6
    6836:	5f 90       	pop	r5
    6838:	4f 90       	pop	r4
    683a:	3f 90       	pop	r3
    683c:	2f 90       	pop	r2
    683e:	08 95       	ret

00006840 <vdmSetDifferenceGC>:
}



TVP vdmSetDifferenceGC(TVP set1, TVP set2, TVP *from)
{
    6840:	4f 92       	push	r4
    6842:	5f 92       	push	r5
    6844:	6f 92       	push	r6
    6846:	7f 92       	push	r7
    6848:	8f 92       	push	r8
    684a:	9f 92       	push	r9
    684c:	af 92       	push	r10
    684e:	bf 92       	push	r11
    6850:	cf 92       	push	r12
    6852:	df 92       	push	r13
    6854:	ef 92       	push	r14
    6856:	ff 92       	push	r15
    6858:	0f 93       	push	r16
    685a:	1f 93       	push	r17
    685c:	cf 93       	push	r28
    685e:	df 93       	push	r29
    6860:	fc 01       	movw	r30, r24
    6862:	5b 01       	movw	r10, r22
	TVP tmpset1;
	TVP tmpset2;
	TVP resultset;
	TVP res;

	ASSERT_CHECK(set1);
    6864:	80 81       	ld	r24, Z
    6866:	87 30       	cpi	r24, 0x07	; 7
    6868:	21 f4       	brne	.+8      	; 0x6872 <vdmSetDifferenceGC+0x32>
	ASSERT_CHECK(set2);
    686a:	db 01       	movw	r26, r22
    686c:	8c 91       	ld	r24, X
    686e:	87 30       	cpi	r24, 0x07	; 7
    6870:	11 f0       	breq	.+4      	; 0x6876 <vdmSetDifferenceGC+0x36>
    6872:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
    6876:	c3 80       	ldd	r12, Z+3	; 0x03
    6878:	d4 80       	ldd	r13, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);
    687a:	eb 01       	movw	r28, r22
    687c:	ab 81       	ldd	r26, Y+3	; 0x03
    687e:	bc 81       	ldd	r27, Y+4	; 0x04

	if(col1->size == 0 || col2->size == 0)
    6880:	e6 01       	movw	r28, r12
    6882:	8a 81       	ldd	r24, Y+2	; 0x02
    6884:	9b 81       	ldd	r25, Y+3	; 0x03
    6886:	89 2b       	or	r24, r25
    6888:	09 f4       	brne	.+2      	; 0x688c <vdmSetDifferenceGC+0x4c>
    688a:	61 c0       	rjmp	.+194    	; 0x694e <vdmSetDifferenceGC+0x10e>
    688c:	12 96       	adiw	r26, 0x02	; 2
    688e:	8d 91       	ld	r24, X+
    6890:	9c 91       	ld	r25, X
    6892:	13 97       	sbiw	r26, 0x03	; 3
    6894:	89 2b       	or	r24, r25
    6896:	09 f4       	brne	.+2      	; 0x689a <vdmSetDifferenceGC+0x5a>
    6898:	5a c0       	rjmp	.+180    	; 0x694e <vdmSetDifferenceGC+0x10e>
	{
		return set1;
	}

	resultset = newSetWithValuesGC(0, NULL, from);
    689a:	80 e0       	ldi	r24, 0x00	; 0
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	60 e0       	ldi	r22, 0x00	; 0
    68a0:	70 e0       	ldi	r23, 0x00	; 0
    68a2:	0e 94 94 33 	call	0x6728	; 0x6728 <newSetWithValuesGC>
    68a6:	98 2e       	mov	r9, r24
    68a8:	89 2e       	mov	r8, r25
    68aa:	c0 e0       	ldi	r28, 0x00	; 0
    68ac:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < col1->size; i++)
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
		if(res->value.boolVal)
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    68ae:	b1 e0       	ldi	r27, 0x01	; 1
    68b0:	4b 2e       	mov	r4, r27
    68b2:	51 2c       	mov	r5, r1
    68b4:	3f c0       	rjmp	.+126    	; 0x6934 <vdmSetDifferenceGC+0xf4>
		return set1;
	}

	resultset = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    68b6:	7e 01       	movw	r14, r28
    68b8:	ee 0c       	add	r14, r14
    68ba:	ff 1c       	adc	r15, r15
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
    68bc:	d6 01       	movw	r26, r12
    68be:	ed 91       	ld	r30, X+
    68c0:	fc 91       	ld	r31, X
    68c2:	ee 0d       	add	r30, r14
    68c4:	ff 1d       	adc	r31, r15
    68c6:	60 81       	ld	r22, Z
    68c8:	71 81       	ldd	r23, Z+1	; 0x01
    68ca:	c5 01       	movw	r24, r10
    68cc:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <vdmSetNotMemberOf>
    68d0:	3c 01       	movw	r6, r24
		if(res->value.boolVal)
    68d2:	fc 01       	movw	r30, r24
    68d4:	83 81       	ldd	r24, Z+3	; 0x03
    68d6:	88 23       	and	r24, r24
    68d8:	49 f1       	breq	.+82     	; 0x692c <vdmSetDifferenceGC+0xec>
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    68da:	00 d0       	rcall	.+0      	; 0x68dc <vdmSetDifferenceGC+0x9c>
    68dc:	00 d0       	rcall	.+0      	; 0x68de <vdmSetDifferenceGC+0x9e>
    68de:	ad b7       	in	r26, 0x3d	; 61
    68e0:	be b7       	in	r27, 0x3e	; 62
    68e2:	12 96       	adiw	r26, 0x02	; 2
    68e4:	5c 92       	st	X, r5
    68e6:	4e 92       	st	-X, r4
    68e8:	11 97       	sbiw	r26, 0x01	; 1
    68ea:	d6 01       	movw	r26, r12
    68ec:	ed 91       	ld	r30, X+
    68ee:	fc 91       	ld	r31, X
    68f0:	ee 0d       	add	r30, r14
    68f2:	ff 1d       	adc	r31, r15
    68f4:	80 81       	ld	r24, Z
    68f6:	91 81       	ldd	r25, Z+1	; 0x01
    68f8:	ed b7       	in	r30, 0x3d	; 61
    68fa:	fe b7       	in	r31, 0x3e	; 62
    68fc:	94 83       	std	Z+4, r25	; 0x04
    68fe:	83 83       	std	Z+3, r24	; 0x03
    6900:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6904:	8c 01       	movw	r16, r24
			tmpset2 = vdmSetUnion(resultset, tmpset1);
    6906:	0f 90       	pop	r0
    6908:	0f 90       	pop	r0
    690a:	0f 90       	pop	r0
    690c:	0f 90       	pop	r0
    690e:	89 2d       	mov	r24, r9
    6910:	98 2d       	mov	r25, r8
    6912:	b8 01       	movw	r22, r16
    6914:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    6918:	f8 2e       	mov	r15, r24
    691a:	e9 2e       	mov	r14, r25
			vdmFree(resultset);
    691c:	89 2d       	mov	r24, r9
    691e:	98 2d       	mov	r25, r8
    6920:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			resultset = tmpset2;
			vdmFree(tmpset1);
    6924:	c8 01       	movw	r24, r16
    6926:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    692a:	47 01       	movw	r8, r14
		}
		vdmFree(res);
    692c:	c3 01       	movw	r24, r6
    692e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		return set1;
	}

	resultset = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    6932:	21 96       	adiw	r28, 0x01	; 1
    6934:	d6 01       	movw	r26, r12
    6936:	12 96       	adiw	r26, 0x02	; 2
    6938:	8d 91       	ld	r24, X+
    693a:	9c 91       	ld	r25, X
    693c:	13 97       	sbiw	r26, 0x03	; 3
    693e:	c8 17       	cp	r28, r24
    6940:	d9 07       	cpc	r29, r25
    6942:	0c f4       	brge	.+2      	; 0x6946 <vdmSetDifferenceGC+0x106>
    6944:	b8 cf       	rjmp	.-144    	; 0x68b6 <vdmSetDifferenceGC+0x76>
    6946:	89 2d       	mov	r24, r9
    6948:	98 2d       	mov	r25, r8
    694a:	9c 01       	movw	r18, r24
    694c:	f9 01       	movw	r30, r18
		}
		vdmFree(res);
	}

	return resultset;
}
    694e:	cf 01       	movw	r24, r30
    6950:	df 91       	pop	r29
    6952:	cf 91       	pop	r28
    6954:	1f 91       	pop	r17
    6956:	0f 91       	pop	r16
    6958:	ff 90       	pop	r15
    695a:	ef 90       	pop	r14
    695c:	df 90       	pop	r13
    695e:	cf 90       	pop	r12
    6960:	bf 90       	pop	r11
    6962:	af 90       	pop	r10
    6964:	9f 90       	pop	r9
    6966:	8f 90       	pop	r8
    6968:	7f 90       	pop	r7
    696a:	6f 90       	pop	r6
    696c:	5f 90       	pop	r5
    696e:	4f 90       	pop	r4
    6970:	08 95       	ret

00006972 <vdmSetInterGC>:
	return inter;
}


TVP vdmSetInterGC(TVP set1, TVP set2, TVP *from)
{
    6972:	4f 92       	push	r4
    6974:	5f 92       	push	r5
    6976:	6f 92       	push	r6
    6978:	7f 92       	push	r7
    697a:	8f 92       	push	r8
    697c:	9f 92       	push	r9
    697e:	af 92       	push	r10
    6980:	bf 92       	push	r11
    6982:	cf 92       	push	r12
    6984:	df 92       	push	r13
    6986:	ef 92       	push	r14
    6988:	ff 92       	push	r15
    698a:	0f 93       	push	r16
    698c:	1f 93       	push	r17
    698e:	cf 93       	push	r28
    6990:	df 93       	push	r29
    6992:	fc 01       	movw	r30, r24
    6994:	4b 01       	movw	r8, r22
	TVP inter;
	TVP tmpset1;
	TVP tmpset2;
	TVP res;

	ASSERT_CHECK(set1);
    6996:	80 81       	ld	r24, Z
    6998:	87 30       	cpi	r24, 0x07	; 7
    699a:	21 f4       	brne	.+8      	; 0x69a4 <vdmSetInterGC+0x32>
	ASSERT_CHECK(set2);
    699c:	db 01       	movw	r26, r22
    699e:	8c 91       	ld	r24, X
    69a0:	87 30       	cpi	r24, 0x07	; 7
    69a2:	11 f0       	breq	.+4      	; 0x69a8 <vdmSetInterGC+0x36>
    69a4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col1, set1);
    69a8:	c3 80       	ldd	r12, Z+3	; 0x03
    69aa:	d4 80       	ldd	r13, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);
    69ac:	db 01       	movw	r26, r22
    69ae:	13 96       	adiw	r26, 0x03	; 3
    69b0:	ed 91       	ld	r30, X+
    69b2:	fc 91       	ld	r31, X
    69b4:	14 97       	sbiw	r26, 0x04	; 4

	if(col1->size == 0 || col2->size ==0)
    69b6:	d6 01       	movw	r26, r12
    69b8:	12 96       	adiw	r26, 0x02	; 2
    69ba:	8d 91       	ld	r24, X+
    69bc:	9c 91       	ld	r25, X
    69be:	13 97       	sbiw	r26, 0x03	; 3
    69c0:	89 2b       	or	r24, r25
    69c2:	21 f0       	breq	.+8      	; 0x69cc <vdmSetInterGC+0x5a>
    69c4:	82 81       	ldd	r24, Z+2	; 0x02
    69c6:	93 81       	ldd	r25, Z+3	; 0x03
    69c8:	89 2b       	or	r24, r25
    69ca:	41 f4       	brne	.+16     	; 0x69dc <vdmSetInterGC+0x6a>
	{
		return newSetWithValuesGC(0, NULL, from);
    69cc:	80 e0       	ldi	r24, 0x00	; 0
    69ce:	90 e0       	ldi	r25, 0x00	; 0
    69d0:	60 e0       	ldi	r22, 0x00	; 0
    69d2:	70 e0       	ldi	r23, 0x00	; 0
    69d4:	0e 94 94 33 	call	0x6728	; 0x6728 <newSetWithValuesGC>
    69d8:	5c 01       	movw	r10, r24
    69da:	54 c0       	rjmp	.+168    	; 0x6a84 <vdmSetInterGC+0x112>
	}

	inter = newSetWithValuesGC(0, NULL, from);
    69dc:	80 e0       	ldi	r24, 0x00	; 0
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	60 e0       	ldi	r22, 0x00	; 0
    69e2:	70 e0       	ldi	r23, 0x00	; 0
    69e4:	0e 94 94 33 	call	0x6728	; 0x6728 <newSetWithValuesGC>
    69e8:	5c 01       	movw	r10, r24
    69ea:	c0 e0       	ldi	r28, 0x00	; 0
    69ec:	d0 e0       	ldi	r29, 0x00	; 0
		res = vdmSetMemberOf(set2, (col1->value)[i]);

		if(res->value.boolVal)
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    69ee:	01 e0       	ldi	r16, 0x01	; 1
    69f0:	40 2e       	mov	r4, r16
    69f2:	51 2c       	mov	r5, r1
    69f4:	3e c0       	rjmp	.+124    	; 0x6a72 <vdmSetInterGC+0x100>
		return newSetWithValuesGC(0, NULL, from);
	}

	inter = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    69f6:	7e 01       	movw	r14, r28
    69f8:	ee 0c       	add	r14, r14
    69fa:	ff 1c       	adc	r15, r15
	{
		res = vdmSetMemberOf(set2, (col1->value)[i]);
    69fc:	d6 01       	movw	r26, r12
    69fe:	ed 91       	ld	r30, X+
    6a00:	fc 91       	ld	r31, X
    6a02:	ee 0d       	add	r30, r14
    6a04:	ff 1d       	adc	r31, r15
    6a06:	60 81       	ld	r22, Z
    6a08:	71 81       	ldd	r23, Z+1	; 0x01
    6a0a:	c4 01       	movw	r24, r8
    6a0c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <vdmSetMemberOf>
    6a10:	3c 01       	movw	r6, r24

		if(res->value.boolVal)
    6a12:	fc 01       	movw	r30, r24
    6a14:	83 81       	ldd	r24, Z+3	; 0x03
    6a16:	88 23       	and	r24, r24
    6a18:	41 f1       	breq	.+80     	; 0x6a6a <vdmSetInterGC+0xf8>
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    6a1a:	00 d0       	rcall	.+0      	; 0x6a1c <vdmSetInterGC+0xaa>
    6a1c:	00 d0       	rcall	.+0      	; 0x6a1e <vdmSetInterGC+0xac>
    6a1e:	ad b7       	in	r26, 0x3d	; 61
    6a20:	be b7       	in	r27, 0x3e	; 62
    6a22:	12 96       	adiw	r26, 0x02	; 2
    6a24:	5c 92       	st	X, r5
    6a26:	4e 92       	st	-X, r4
    6a28:	11 97       	sbiw	r26, 0x01	; 1
    6a2a:	d6 01       	movw	r26, r12
    6a2c:	ed 91       	ld	r30, X+
    6a2e:	fc 91       	ld	r31, X
    6a30:	ee 0d       	add	r30, r14
    6a32:	ff 1d       	adc	r31, r15
    6a34:	80 81       	ld	r24, Z
    6a36:	91 81       	ldd	r25, Z+1	; 0x01
    6a38:	ed b7       	in	r30, 0x3d	; 61
    6a3a:	fe b7       	in	r31, 0x3e	; 62
    6a3c:	94 83       	std	Z+4, r25	; 0x04
    6a3e:	83 83       	std	Z+3, r24	; 0x03
    6a40:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6a44:	8c 01       	movw	r16, r24
			tmpset2 = vdmSetUnion(inter, tmpset1);
    6a46:	0f 90       	pop	r0
    6a48:	0f 90       	pop	r0
    6a4a:	0f 90       	pop	r0
    6a4c:	0f 90       	pop	r0
    6a4e:	c5 01       	movw	r24, r10
    6a50:	b8 01       	movw	r22, r16
    6a52:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    6a56:	f8 2e       	mov	r15, r24
    6a58:	e9 2e       	mov	r14, r25
			vdmFree(inter);
    6a5a:	c5 01       	movw	r24, r10
    6a5c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			inter = tmpset2;
			vdmFree(tmpset1);
    6a60:	c8 01       	movw	r24, r16
    6a62:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    6a66:	af 2c       	mov	r10, r15
    6a68:	be 2c       	mov	r11, r14
		}
		vdmFree(res);
    6a6a:	c3 01       	movw	r24, r6
    6a6c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		return newSetWithValuesGC(0, NULL, from);
	}

	inter = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    6a70:	21 96       	adiw	r28, 0x01	; 1
    6a72:	d6 01       	movw	r26, r12
    6a74:	12 96       	adiw	r26, 0x02	; 2
    6a76:	8d 91       	ld	r24, X+
    6a78:	9c 91       	ld	r25, X
    6a7a:	13 97       	sbiw	r26, 0x03	; 3
    6a7c:	c8 17       	cp	r28, r24
    6a7e:	d9 07       	cpc	r29, r25
    6a80:	0c f4       	brge	.+2      	; 0x6a84 <vdmSetInterGC+0x112>
    6a82:	b9 cf       	rjmp	.-142    	; 0x69f6 <vdmSetInterGC+0x84>
		}
		vdmFree(res);
	}

	return inter;
}
    6a84:	c5 01       	movw	r24, r10
    6a86:	df 91       	pop	r29
    6a88:	cf 91       	pop	r28
    6a8a:	1f 91       	pop	r17
    6a8c:	0f 91       	pop	r16
    6a8e:	ff 90       	pop	r15
    6a90:	ef 90       	pop	r14
    6a92:	df 90       	pop	r13
    6a94:	cf 90       	pop	r12
    6a96:	bf 90       	pop	r11
    6a98:	af 90       	pop	r10
    6a9a:	9f 90       	pop	r9
    6a9c:	8f 90       	pop	r8
    6a9e:	7f 90       	pop	r7
    6aa0:	6f 90       	pop	r6
    6aa2:	5f 90       	pop	r5
    6aa4:	4f 90       	pop	r4
    6aa6:	08 95       	ret

00006aa8 <vdmSetDinterGC>:
	return interset;
}


TVP vdmSetDinterGC(TVP set, TVP *from)
{
    6aa8:	af 92       	push	r10
    6aaa:	bf 92       	push	r11
    6aac:	cf 92       	push	r12
    6aae:	df 92       	push	r13
    6ab0:	ef 92       	push	r14
    6ab2:	ff 92       	push	r15
    6ab4:	0f 93       	push	r16
    6ab6:	1f 93       	push	r17
    6ab8:	cf 93       	push	r28
    6aba:	df 93       	push	r29
    6abc:	fc 01       	movw	r30, r24
    6abe:	5b 01       	movw	r10, r22
	int i;
	TVP interset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    6ac0:	80 81       	ld	r24, Z
    6ac2:	87 30       	cpi	r24, 0x07	; 7
    6ac4:	a9 f4       	brne	.+42     	; 0x6af0 <vdmSetDinterGC+0x48>

	UNWRAP_COLLECTION(col, set);
    6ac6:	e3 80       	ldd	r14, Z+3	; 0x03
    6ac8:	f4 80       	ldd	r15, Z+4	; 0x04
	for(i = 0; i < col->size; i++)
    6aca:	d7 01       	movw	r26, r14
    6acc:	12 96       	adiw	r26, 0x02	; 2
    6ace:	4d 91       	ld	r20, X+
    6ad0:	5c 91       	ld	r21, X
    6ad2:	13 97       	sbiw	r26, 0x03	; 3
    6ad4:	20 e0       	ldi	r18, 0x00	; 0
    6ad6:	30 e0       	ldi	r19, 0x00	; 0
    6ad8:	0f c0       	rjmp	.+30     	; 0x6af8 <vdmSetDinterGC+0x50>
	{
		ASSERT_CHECK((col->value)[i]);
    6ada:	c9 01       	movw	r24, r18
    6adc:	88 0f       	add	r24, r24
    6ade:	99 1f       	adc	r25, r25
    6ae0:	e8 0f       	add	r30, r24
    6ae2:	f9 1f       	adc	r31, r25
    6ae4:	01 90       	ld	r0, Z+
    6ae6:	f0 81       	ld	r31, Z
    6ae8:	e0 2d       	mov	r30, r0
    6aea:	80 81       	ld	r24, Z
    6aec:	87 30       	cpi	r24, 0x07	; 7
    6aee:	11 f0       	breq	.+4      	; 0x6af4 <vdmSetDinterGC+0x4c>
    6af0:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    6af4:	2f 5f       	subi	r18, 0xFF	; 255
    6af6:	3f 4f       	sbci	r19, 0xFF	; 255
    6af8:	d7 01       	movw	r26, r14
    6afa:	ed 91       	ld	r30, X+
    6afc:	fc 91       	ld	r31, X
    6afe:	24 17       	cp	r18, r20
    6b00:	35 07       	cpc	r19, r21
    6b02:	5c f3       	brlt	.-42     	; 0x6ada <vdmSetDinterGC+0x32>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);
    6b04:	80 81       	ld	r24, Z
    6b06:	91 81       	ldd	r25, Z+1	; 0x01
    6b08:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    6b0c:	d8 2e       	mov	r13, r24
    6b0e:	c9 2e       	mov	r12, r25
    6b10:	c1 e0       	ldi	r28, 0x01	; 1
    6b12:	d0 e0       	ldi	r29, 0x00	; 0
    6b14:	17 c0       	rjmp	.+46     	; 0x6b44 <vdmSetDinterGC+0x9c>

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
	{
		set1 = vdmSetInterGC(interset, (col->value)[i], from);
    6b16:	ce 01       	movw	r24, r28
    6b18:	88 0f       	add	r24, r24
    6b1a:	99 1f       	adc	r25, r25
    6b1c:	d7 01       	movw	r26, r14
    6b1e:	ed 91       	ld	r30, X+
    6b20:	fc 91       	ld	r31, X
    6b22:	e8 0f       	add	r30, r24
    6b24:	f9 1f       	adc	r31, r25
    6b26:	60 81       	ld	r22, Z
    6b28:	71 81       	ldd	r23, Z+1	; 0x01
    6b2a:	8d 2d       	mov	r24, r13
    6b2c:	9c 2d       	mov	r25, r12
    6b2e:	a5 01       	movw	r20, r10
    6b30:	0e 94 b9 34 	call	0x6972	; 0x6972 <vdmSetInterGC>
    6b34:	18 2f       	mov	r17, r24
    6b36:	09 2f       	mov	r16, r25
		vdmFree(interset);
    6b38:	8d 2d       	mov	r24, r13
    6b3a:	9c 2d       	mov	r25, r12
    6b3c:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    6b40:	21 96       	adiw	r28, 0x01	; 1
    6b42:	68 01       	movw	r12, r16
    6b44:	f7 01       	movw	r30, r14
    6b46:	82 81       	ldd	r24, Z+2	; 0x02
    6b48:	93 81       	ldd	r25, Z+3	; 0x03
    6b4a:	c8 17       	cp	r28, r24
    6b4c:	d9 07       	cpc	r29, r25
    6b4e:	1c f3       	brlt	.-58     	; 0x6b16 <vdmSetDinterGC+0x6e>
		vdmFree(interset);
		interset = set1;
	}

	return interset;
}
    6b50:	8d 2d       	mov	r24, r13
    6b52:	9c 2d       	mov	r25, r12
    6b54:	df 91       	pop	r29
    6b56:	cf 91       	pop	r28
    6b58:	1f 91       	pop	r17
    6b5a:	0f 91       	pop	r16
    6b5c:	ff 90       	pop	r15
    6b5e:	ef 90       	pop	r14
    6b60:	df 90       	pop	r13
    6b62:	cf 90       	pop	r12
    6b64:	bf 90       	pop	r11
    6b66:	af 90       	pop	r10
    6b68:	08 95       	ret

00006b6a <vdmSetUnionGC>:

	return resset;
}

TVP vdmSetUnionGC(TVP set1, TVP set2, TVP *from)
{
    6b6a:	4f 92       	push	r4
    6b6c:	5f 92       	push	r5
    6b6e:	6f 92       	push	r6
    6b70:	7f 92       	push	r7
    6b72:	8f 92       	push	r8
    6b74:	9f 92       	push	r9
    6b76:	af 92       	push	r10
    6b78:	bf 92       	push	r11
    6b7a:	cf 92       	push	r12
    6b7c:	df 92       	push	r13
    6b7e:	ef 92       	push	r14
    6b80:	ff 92       	push	r15
    6b82:	0f 93       	push	r16
    6b84:	1f 93       	push	r17
    6b86:	cf 93       	push	r28
    6b88:	df 93       	push	r29
    6b8a:	fc 01       	movw	r30, r24
    6b8c:	db 01       	movw	r26, r22
    6b8e:	2a 01       	movw	r4, r20
	int i;

	TVP *newvalues;
	TVP resset;

	ASSERT_CHECK(set1);
    6b90:	80 81       	ld	r24, Z
    6b92:	87 30       	cpi	r24, 0x07	; 7
    6b94:	f9 f4       	brne	.+62     	; 0x6bd4 <vdmSetUnionGC+0x6a>
	ASSERT_CHECK(set2);
    6b96:	8c 91       	ld	r24, X
    6b98:	87 30       	cpi	r24, 0x07	; 7
    6b9a:	e1 f4       	brne	.+56     	; 0x6bd4 <vdmSetUnionGC+0x6a>

	UNWRAP_COLLECTION(col1, set1);
    6b9c:	a3 80       	ldd	r10, Z+3	; 0x03
    6b9e:	b4 80       	ldd	r11, Z+4	; 0x04
	UNWRAP_COLLECTION(col2, set2);
    6ba0:	13 96       	adiw	r26, 0x03	; 3
    6ba2:	6d 90       	ld	r6, X+
    6ba4:	7c 90       	ld	r7, X
    6ba6:	14 97       	sbiw	r26, 0x04	; 4
	/* int a = col1->size;  */

	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
    6ba8:	d3 01       	movw	r26, r6
    6baa:	12 96       	adiw	r26, 0x02	; 2
    6bac:	8d 91       	ld	r24, X+
    6bae:	9c 91       	ld	r25, X
    6bb0:	13 97       	sbiw	r26, 0x03	; 3
    6bb2:	f5 01       	movw	r30, r10
    6bb4:	22 81       	ldd	r18, Z+2	; 0x02
    6bb6:	33 81       	ldd	r19, Z+3	; 0x03
    6bb8:	82 0f       	add	r24, r18
    6bba:	93 1f       	adc	r25, r19
    6bbc:	88 0f       	add	r24, r24
    6bbe:	99 1f       	adc	r25, r25
    6bc0:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    6bc4:	7c 01       	movw	r14, r24
	assert(newvalues != NULL);
    6bc6:	00 97       	sbiw	r24, 0x00	; 0
    6bc8:	29 f0       	breq	.+10     	; 0x6bd4 <vdmSetUnionGC+0x6a>
    6bca:	4c 01       	movw	r8, r24
    6bcc:	6c 01       	movw	r12, r24
    6bce:	c0 e0       	ldi	r28, 0x00	; 0
    6bd0:	d0 e0       	ldi	r29, 0x00	; 0
    6bd2:	13 c0       	rjmp	.+38     	; 0x6bfa <vdmSetUnionGC+0x90>
    6bd4:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
    6bd8:	ce 01       	movw	r24, r28
    6bda:	88 0f       	add	r24, r24
    6bdc:	99 1f       	adc	r25, r25
    6bde:	d5 01       	movw	r26, r10
    6be0:	ed 91       	ld	r30, X+
    6be2:	fc 91       	ld	r31, X
    6be4:	e8 0f       	add	r30, r24
    6be6:	f9 1f       	adc	r31, r25
    6be8:	80 81       	ld	r24, Z
    6bea:	91 81       	ldd	r25, Z+1	; 0x01
    6bec:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    6bf0:	f6 01       	movw	r30, r12
    6bf2:	81 93       	st	Z+, r24
    6bf4:	91 93       	st	Z+, r25
    6bf6:	6f 01       	movw	r12, r30
	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
	assert(newvalues != NULL);
	for(i = 0; i < col1->size; i++)
    6bf8:	21 96       	adiw	r28, 0x01	; 1
    6bfa:	d5 01       	movw	r26, r10
    6bfc:	12 96       	adiw	r26, 0x02	; 2
    6bfe:	0d 91       	ld	r16, X+
    6c00:	1c 91       	ld	r17, X
    6c02:	13 97       	sbiw	r26, 0x03	; 3
    6c04:	c0 17       	cp	r28, r16
    6c06:	d1 07       	cpc	r29, r17
    6c08:	3c f3       	brlt	.-50     	; 0x6bd8 <vdmSetUnionGC+0x6e>
    6c0a:	e8 01       	movw	r28, r16
    6c0c:	cc 0f       	add	r28, r28
    6c0e:	dd 1f       	adc	r29, r29
    6c10:	ce 0d       	add	r28, r14
    6c12:	df 1d       	adc	r29, r15
    6c14:	12 c0       	rjmp	.+36     	; 0x6c3a <vdmSetUnionGC+0xd0>
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
    6c16:	c8 01       	movw	r24, r16
    6c18:	82 1b       	sub	r24, r18
    6c1a:	93 0b       	sbc	r25, r19
    6c1c:	88 0f       	add	r24, r24
    6c1e:	99 1f       	adc	r25, r25
    6c20:	d3 01       	movw	r26, r6
    6c22:	ed 91       	ld	r30, X+
    6c24:	fc 91       	ld	r31, X
    6c26:	e8 0f       	add	r30, r24
    6c28:	f9 1f       	adc	r31, r25
    6c2a:	80 81       	ld	r24, Z
    6c2c:	91 81       	ldd	r25, Z+1	; 0x01
    6c2e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <vdmClone>
    6c32:	89 93       	st	Y+, r24
    6c34:	99 93       	st	Y+, r25
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    6c36:	0f 5f       	subi	r16, 0xFF	; 255
    6c38:	1f 4f       	sbci	r17, 0xFF	; 255
    6c3a:	f5 01       	movw	r30, r10
    6c3c:	22 81       	ldd	r18, Z+2	; 0x02
    6c3e:	33 81       	ldd	r19, Z+3	; 0x03
    6c40:	d3 01       	movw	r26, r6
    6c42:	12 96       	adiw	r26, 0x02	; 2
    6c44:	8d 91       	ld	r24, X+
    6c46:	9c 91       	ld	r25, X
    6c48:	13 97       	sbiw	r26, 0x03	; 3
    6c4a:	82 0f       	add	r24, r18
    6c4c:	93 1f       	adc	r25, r19
    6c4e:	08 17       	cp	r16, r24
    6c50:	19 07       	cpc	r17, r25
    6c52:	0c f3       	brlt	.-62     	; 0x6c16 <vdmSetUnionGC+0xac>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValuesGC(col1->size + col2->size, newvalues, from);
    6c54:	b7 01       	movw	r22, r14
    6c56:	a2 01       	movw	r20, r4
    6c58:	0e 94 94 33 	call	0x6728	; 0x6728 <newSetWithValuesGC>
    6c5c:	18 2f       	mov	r17, r24
    6c5e:	09 2f       	mov	r16, r25
    6c60:	c0 e0       	ldi	r28, 0x00	; 0
    6c62:	d0 e0       	ldi	r29, 0x00	; 0
    6c64:	07 c0       	rjmp	.+14     	; 0x6c74 <vdmSetUnionGC+0x10a>

	for(i = 0; i < col1->size + col2->size; i++)
		vdmFree(newvalues[i]);
    6c66:	f4 01       	movw	r30, r8
    6c68:	81 91       	ld	r24, Z+
    6c6a:	91 91       	ld	r25, Z+
    6c6c:	4f 01       	movw	r8, r30
    6c6e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValuesGC(col1->size + col2->size, newvalues, from);

	for(i = 0; i < col1->size + col2->size; i++)
    6c72:	21 96       	adiw	r28, 0x01	; 1
    6c74:	d3 01       	movw	r26, r6
    6c76:	12 96       	adiw	r26, 0x02	; 2
    6c78:	8d 91       	ld	r24, X+
    6c7a:	9c 91       	ld	r25, X
    6c7c:	13 97       	sbiw	r26, 0x03	; 3
    6c7e:	f5 01       	movw	r30, r10
    6c80:	22 81       	ldd	r18, Z+2	; 0x02
    6c82:	33 81       	ldd	r19, Z+3	; 0x03
    6c84:	82 0f       	add	r24, r18
    6c86:	93 1f       	adc	r25, r19
    6c88:	c8 17       	cp	r28, r24
    6c8a:	d9 07       	cpc	r29, r25
    6c8c:	64 f3       	brlt	.-40     	; 0x6c66 <vdmSetUnionGC+0xfc>
		vdmFree(newvalues[i]);
	free(newvalues);
    6c8e:	c7 01       	movw	r24, r14
    6c90:	0e 94 4f 38 	call	0x709e	; 0x709e <free>

	return resset;
}
    6c94:	81 2f       	mov	r24, r17
    6c96:	90 2f       	mov	r25, r16
    6c98:	df 91       	pop	r29
    6c9a:	cf 91       	pop	r28
    6c9c:	1f 91       	pop	r17
    6c9e:	0f 91       	pop	r16
    6ca0:	ff 90       	pop	r15
    6ca2:	ef 90       	pop	r14
    6ca4:	df 90       	pop	r13
    6ca6:	cf 90       	pop	r12
    6ca8:	bf 90       	pop	r11
    6caa:	af 90       	pop	r10
    6cac:	9f 90       	pop	r9
    6cae:	8f 90       	pop	r8
    6cb0:	7f 90       	pop	r7
    6cb2:	6f 90       	pop	r6
    6cb4:	5f 90       	pop	r5
    6cb6:	4f 90       	pop	r4
    6cb8:	08 95       	ret

00006cba <vdmSetPowerGC>:
	return powerset;
}


TVP vdmSetPowerGC(TVP set, TVP *from)
{
    6cba:	2f 92       	push	r2
    6cbc:	3f 92       	push	r3
    6cbe:	4f 92       	push	r4
    6cc0:	5f 92       	push	r5
    6cc2:	6f 92       	push	r6
    6cc4:	7f 92       	push	r7
    6cc6:	8f 92       	push	r8
    6cc8:	9f 92       	push	r9
    6cca:	af 92       	push	r10
    6ccc:	bf 92       	push	r11
    6cce:	cf 92       	push	r12
    6cd0:	df 92       	push	r13
    6cd2:	ef 92       	push	r14
    6cd4:	ff 92       	push	r15
    6cd6:	0f 93       	push	r16
    6cd8:	1f 93       	push	r17
    6cda:	df 93       	push	r29
    6cdc:	cf 93       	push	r28
    6cde:	00 d0       	rcall	.+0      	; 0x6ce0 <vdmSetPowerGC+0x26>
    6ce0:	00 d0       	rcall	.+0      	; 0x6ce2 <vdmSetPowerGC+0x28>
    6ce2:	cd b7       	in	r28, 0x3d	; 61
    6ce4:	de b7       	in	r29, 0x3e	; 62
    6ce6:	fc 01       	movw	r30, r24
    6ce8:	7a 83       	std	Y+2, r23	; 0x02
    6cea:	69 83       	std	Y+1, r22	; 0x01
	TVP set3;
	TVP powerset;
	struct Collection *powercol;
	int powercolsize;

	ASSERT_CHECK(set);
    6cec:	80 81       	ld	r24, Z
    6cee:	87 30       	cpi	r24, 0x07	; 7
    6cf0:	11 f0       	breq	.+4      	; 0x6cf6 <vdmSetPowerGC+0x3c>
    6cf2:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>

	UNWRAP_COLLECTION(col, set);
    6cf6:	43 80       	ldd	r4, Z+3	; 0x03
    6cf8:	54 80       	ldd	r5, Z+4	; 0x04

	/* Initialize powerset to contain the empty set.  */
	powerset = newSetVar(0, NULL);
    6cfa:	00 d0       	rcall	.+0      	; 0x6cfc <vdmSetPowerGC+0x42>
    6cfc:	00 d0       	rcall	.+0      	; 0x6cfe <vdmSetPowerGC+0x44>
    6cfe:	ad b7       	in	r26, 0x3d	; 61
    6d00:	be b7       	in	r27, 0x3e	; 62
    6d02:	12 96       	adiw	r26, 0x02	; 2
    6d04:	1c 92       	st	X, r1
    6d06:	1e 92       	st	-X, r1
    6d08:	11 97       	sbiw	r26, 0x01	; 1
    6d0a:	14 96       	adiw	r26, 0x04	; 4
    6d0c:	1c 92       	st	X, r1
    6d0e:	1e 92       	st	-X, r1
    6d10:	13 97       	sbiw	r26, 0x03	; 3
    6d12:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6d16:	6c 01       	movw	r12, r24

	set1 = newSetVar(0, NULL);
    6d18:	ed b7       	in	r30, 0x3d	; 61
    6d1a:	fe b7       	in	r31, 0x3e	; 62
    6d1c:	12 82       	std	Z+2, r1	; 0x02
    6d1e:	11 82       	std	Z+1, r1	; 0x01
    6d20:	14 82       	std	Z+4, r1	; 0x04
    6d22:	13 82       	std	Z+3, r1	; 0x03
    6d24:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6d28:	8c 01       	movw	r16, r24
	set2 = newSetVar(1, set1);
    6d2a:	81 e0       	ldi	r24, 0x01	; 1
    6d2c:	90 e0       	ldi	r25, 0x00	; 0
    6d2e:	ad b7       	in	r26, 0x3d	; 61
    6d30:	be b7       	in	r27, 0x3e	; 62
    6d32:	12 96       	adiw	r26, 0x02	; 2
    6d34:	9c 93       	st	X, r25
    6d36:	8e 93       	st	-X, r24
    6d38:	11 97       	sbiw	r26, 0x01	; 1
    6d3a:	14 96       	adiw	r26, 0x04	; 4
    6d3c:	1c 93       	st	X, r17
    6d3e:	0e 93       	st	-X, r16
    6d40:	13 97       	sbiw	r26, 0x03	; 3
    6d42:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6d46:	7c 01       	movw	r14, r24
	vdmFree(set1);
    6d48:	0f 90       	pop	r0
    6d4a:	0f 90       	pop	r0
    6d4c:	0f 90       	pop	r0
    6d4e:	0f 90       	pop	r0
    6d50:	c8 01       	movw	r24, r16
    6d52:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	set1 = vdmSetUnion(powerset, set2);
    6d56:	c6 01       	movw	r24, r12
    6d58:	b7 01       	movw	r22, r14
    6d5a:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    6d5e:	18 2f       	mov	r17, r24
    6d60:	09 2f       	mov	r16, r25
	vdmFree(set2);
    6d62:	c7 01       	movw	r24, r14
    6d64:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	vdmFree(powerset);
    6d68:	c6 01       	movw	r24, r12
    6d6a:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
    6d6e:	21 2f       	mov	r18, r17
    6d70:	30 2f       	mov	r19, r16
    6d72:	c9 01       	movw	r24, r18
    6d74:	9c 83       	std	Y+4, r25	; 0x04
    6d76:	8b 83       	std	Y+3, r24	; 0x03
    6d78:	aa 24       	eor	r10, r10
    6d7a:	bb 24       	eor	r11, r11
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
		{
			powercol = (struct Collection*)powerset->value.ptr;

			set1 = newSetVar(1, (col->value)[i]);
    6d7c:	01 e0       	ldi	r16, 0x01	; 1
    6d7e:	20 2e       	mov	r2, r16
    6d80:	31 2c       	mov	r3, r1
    6d82:	6e c0       	rjmp	.+220    	; 0x6e60 <vdmSetPowerGC+0x1a6>
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
    6d84:	ab 81       	ldd	r26, Y+3	; 0x03
    6d86:	bc 81       	ldd	r27, Y+4	; 0x04
    6d88:	13 96       	adiw	r26, 0x03	; 3
    6d8a:	ed 91       	ld	r30, X+
    6d8c:	fc 91       	ld	r31, X
    6d8e:	14 97       	sbiw	r26, 0x04	; 4
    6d90:	62 80       	ldd	r6, Z+2	; 0x02
    6d92:	73 80       	ldd	r7, Z+3	; 0x03
    6d94:	45 01       	movw	r8, r10
    6d96:	88 0c       	add	r8, r8
    6d98:	99 1c       	adc	r9, r9
    6d9a:	cc 24       	eor	r12, r12
    6d9c:	dd 24       	eor	r13, r13
    6d9e:	59 c0       	rjmp	.+178    	; 0x6e52 <vdmSetPowerGC+0x198>
		for(j = 0; j < powercolsize; j++)
		{
			powercol = (struct Collection*)powerset->value.ptr;
    6da0:	eb 81       	ldd	r30, Y+3	; 0x03
    6da2:	fc 81       	ldd	r31, Y+4	; 0x04
    6da4:	e3 80       	ldd	r14, Z+3	; 0x03
    6da6:	f4 80       	ldd	r15, Z+4	; 0x04

			set1 = newSetVar(1, (col->value)[i]);
    6da8:	00 d0       	rcall	.+0      	; 0x6daa <vdmSetPowerGC+0xf0>
    6daa:	00 d0       	rcall	.+0      	; 0x6dac <vdmSetPowerGC+0xf2>
    6dac:	ad b7       	in	r26, 0x3d	; 61
    6dae:	be b7       	in	r27, 0x3e	; 62
    6db0:	12 96       	adiw	r26, 0x02	; 2
    6db2:	3c 92       	st	X, r3
    6db4:	2e 92       	st	-X, r2
    6db6:	11 97       	sbiw	r26, 0x01	; 1
    6db8:	d2 01       	movw	r26, r4
    6dba:	ed 91       	ld	r30, X+
    6dbc:	fc 91       	ld	r31, X
    6dbe:	e8 0d       	add	r30, r8
    6dc0:	f9 1d       	adc	r31, r9
    6dc2:	80 81       	ld	r24, Z
    6dc4:	91 81       	ldd	r25, Z+1	; 0x01
    6dc6:	ed b7       	in	r30, 0x3d	; 61
    6dc8:	fe b7       	in	r31, 0x3e	; 62
    6dca:	94 83       	std	Z+4, r25	; 0x04
    6dcc:	83 83       	std	Z+3, r24	; 0x03
    6dce:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6dd2:	8c 01       	movw	r16, r24
			set2 = vdmSetUnion((powercol->value)[j], set1);
    6dd4:	0f 90       	pop	r0
    6dd6:	0f 90       	pop	r0
    6dd8:	0f 90       	pop	r0
    6dda:	0f 90       	pop	r0
    6ddc:	c6 01       	movw	r24, r12
    6dde:	88 0f       	add	r24, r24
    6de0:	99 1f       	adc	r25, r25
    6de2:	d7 01       	movw	r26, r14
    6de4:	ed 91       	ld	r30, X+
    6de6:	fc 91       	ld	r31, X
    6de8:	e8 0f       	add	r30, r24
    6dea:	f9 1f       	adc	r31, r25
    6dec:	80 81       	ld	r24, Z
    6dee:	91 81       	ldd	r25, Z+1	; 0x01
    6df0:	b8 01       	movw	r22, r16
    6df2:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vdmSetUnion>
    6df6:	7c 01       	movw	r14, r24
			vdmFree(set1);
    6df8:	c8 01       	movw	r24, r16
    6dfa:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			set1 = newSetVar(1, set2);
    6dfe:	00 d0       	rcall	.+0      	; 0x6e00 <vdmSetPowerGC+0x146>
    6e00:	00 d0       	rcall	.+0      	; 0x6e02 <vdmSetPowerGC+0x148>
    6e02:	ed b7       	in	r30, 0x3d	; 61
    6e04:	fe b7       	in	r31, 0x3e	; 62
    6e06:	32 82       	std	Z+2, r3	; 0x02
    6e08:	21 82       	std	Z+1, r2	; 0x01
    6e0a:	f4 82       	std	Z+4, r15	; 0x04
    6e0c:	e3 82       	std	Z+3, r14	; 0x03
    6e0e:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <newSetVar>
    6e12:	8c 01       	movw	r16, r24
			vdmFree(set2);
    6e14:	0f 90       	pop	r0
    6e16:	0f 90       	pop	r0
    6e18:	0f 90       	pop	r0
    6e1a:	0f 90       	pop	r0
    6e1c:	c7 01       	movw	r24, r14
    6e1e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			set3 = vdmSetUnionGC(powerset, set1, from);
    6e22:	8b 81       	ldd	r24, Y+3	; 0x03
    6e24:	9c 81       	ldd	r25, Y+4	; 0x04
    6e26:	b8 01       	movw	r22, r16
    6e28:	49 81       	ldd	r20, Y+1	; 0x01
    6e2a:	5a 81       	ldd	r21, Y+2	; 0x02
    6e2c:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <vdmSetUnionGC>
    6e30:	f8 2e       	mov	r15, r24
    6e32:	e9 2e       	mov	r14, r25
			vdmFree(set1);
    6e34:	c8 01       	movw	r24, r16
    6e36:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
			vdmFree(powerset);
    6e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6e3e:	0e 94 1e 13 	call	0x263c	; 0x263c <vdmFree>
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
    6e42:	08 94       	sec
    6e44:	c1 1c       	adc	r12, r1
    6e46:	d1 1c       	adc	r13, r1
    6e48:	2f 2d       	mov	r18, r15
    6e4a:	3e 2d       	mov	r19, r14
    6e4c:	c9 01       	movw	r24, r18
    6e4e:	9c 83       	std	Y+4, r25	; 0x04
    6e50:	8b 83       	std	Y+3, r24	; 0x03
    6e52:	c6 14       	cp	r12, r6
    6e54:	d7 04       	cpc	r13, r7
    6e56:	0c f4       	brge	.+2      	; 0x6e5a <vdmSetPowerGC+0x1a0>
    6e58:	a3 cf       	rjmp	.-186    	; 0x6da0 <vdmSetPowerGC+0xe6>
	set1 = vdmSetUnion(powerset, set2);
	vdmFree(set2);
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
    6e5a:	08 94       	sec
    6e5c:	a1 1c       	adc	r10, r1
    6e5e:	b1 1c       	adc	r11, r1
    6e60:	d2 01       	movw	r26, r4
    6e62:	12 96       	adiw	r26, 0x02	; 2
    6e64:	8d 91       	ld	r24, X+
    6e66:	9c 91       	ld	r25, X
    6e68:	13 97       	sbiw	r26, 0x03	; 3
    6e6a:	a8 16       	cp	r10, r24
    6e6c:	b9 06       	cpc	r11, r25
    6e6e:	0c f4       	brge	.+2      	; 0x6e72 <vdmSetPowerGC+0x1b8>
    6e70:	89 cf       	rjmp	.-238    	; 0x6d84 <vdmSetPowerGC+0xca>
			powerset = set3;
		}
	}

	return powerset;
}
    6e72:	8b 81       	ldd	r24, Y+3	; 0x03
    6e74:	9c 81       	ldd	r25, Y+4	; 0x04
    6e76:	0f 90       	pop	r0
    6e78:	0f 90       	pop	r0
    6e7a:	0f 90       	pop	r0
    6e7c:	0f 90       	pop	r0
    6e7e:	cf 91       	pop	r28
    6e80:	df 91       	pop	r29
    6e82:	1f 91       	pop	r17
    6e84:	0f 91       	pop	r16
    6e86:	ff 90       	pop	r15
    6e88:	ef 90       	pop	r14
    6e8a:	df 90       	pop	r13
    6e8c:	cf 90       	pop	r12
    6e8e:	bf 90       	pop	r11
    6e90:	af 90       	pop	r10
    6e92:	9f 90       	pop	r9
    6e94:	8f 90       	pop	r8
    6e96:	7f 90       	pop	r7
    6e98:	6f 90       	pop	r6
    6e9a:	5f 90       	pop	r5
    6e9c:	4f 90       	pop	r4
    6e9e:	3f 90       	pop	r3
    6ea0:	2f 90       	pop	r2
    6ea2:	08 95       	ret

00006ea4 <unpackString>:
#include "Vdm.h"
#include "VdmUnpackString.h"

char* unpackString(TVP charseq)
{
    6ea4:	cf 93       	push	r28
    6ea6:	df 93       	push	r29
	int i;
	char* str;



	UNWRAP_COLLECTION(col, charseq);
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	c3 81       	ldd	r28, Z+3	; 0x03
    6eac:	d4 81       	ldd	r29, Z+4	; 0x04

	str = (char*)malloc(col->size * sizeof(char) + 1);
    6eae:	8a 81       	ldd	r24, Y+2	; 0x02
    6eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    6eb2:	01 96       	adiw	r24, 0x01	; 1
    6eb4:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    6eb8:	9c 01       	movw	r18, r24
	assert(str != NULL);
    6eba:	00 97       	sbiw	r24, 0x00	; 0
    6ebc:	a1 f0       	breq	.+40     	; 0x6ee6 <unpackString+0x42>
	str[col->size] = 0;
    6ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    6ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    6ec2:	e8 0f       	add	r30, r24
    6ec4:	f9 1f       	adc	r31, r25
    6ec6:	10 82       	st	Z, r1
    6ec8:	40 e0       	ldi	r20, 0x00	; 0
    6eca:	50 e0       	ldi	r21, 0x00	; 0
    6ecc:	16 c0       	rjmp	.+44     	; 0x6efa <unpackString+0x56>

	for(i = 0; i < col->size; i++)
	{
		ASSERT_CHECK_CHAR((col->value[i]));
    6ece:	ca 01       	movw	r24, r20
    6ed0:	88 0f       	add	r24, r24
    6ed2:	99 1f       	adc	r25, r25
    6ed4:	e8 81       	ld	r30, Y
    6ed6:	f9 81       	ldd	r31, Y+1	; 0x01
    6ed8:	e8 0f       	add	r30, r24
    6eda:	f9 1f       	adc	r31, r25
    6edc:	a0 81       	ld	r26, Z
    6ede:	b1 81       	ldd	r27, Z+1	; 0x01
    6ee0:	8c 91       	ld	r24, X
    6ee2:	86 30       	cpi	r24, 0x06	; 6
    6ee4:	11 f0       	breq	.+4      	; 0x6eea <unpackString+0x46>
    6ee6:	0e 94 83 39 	call	0x7306	; 0x7306 <abort>
		str[i] = ((col->value[i])->value).charVal;
    6eea:	f9 01       	movw	r30, r18
    6eec:	e4 0f       	add	r30, r20
    6eee:	f5 1f       	adc	r31, r21
    6ef0:	13 96       	adiw	r26, 0x03	; 3
    6ef2:	8c 91       	ld	r24, X
    6ef4:	80 83       	st	Z, r24

	str = (char*)malloc(col->size * sizeof(char) + 1);
	assert(str != NULL);
	str[col->size] = 0;

	for(i = 0; i < col->size; i++)
    6ef6:	4f 5f       	subi	r20, 0xFF	; 255
    6ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    6efa:	8a 81       	ldd	r24, Y+2	; 0x02
    6efc:	9b 81       	ldd	r25, Y+3	; 0x03
    6efe:	48 17       	cp	r20, r24
    6f00:	59 07       	cpc	r21, r25
    6f02:	2c f3       	brlt	.-54     	; 0x6ece <unpackString+0x2a>
		ASSERT_CHECK_CHAR((col->value[i]));
		str[i] = ((col->value[i])->value).charVal;
	}

	return str;
}
    6f04:	c9 01       	movw	r24, r18
    6f06:	df 91       	pop	r29
    6f08:	cf 91       	pop	r28
    6f0a:	08 95       	ret

00006f0c <calloc>:
    6f0c:	0f 93       	push	r16
    6f0e:	1f 93       	push	r17
    6f10:	cf 93       	push	r28
    6f12:	df 93       	push	r29
    6f14:	68 9f       	mul	r22, r24
    6f16:	80 01       	movw	r16, r0
    6f18:	69 9f       	mul	r22, r25
    6f1a:	10 0d       	add	r17, r0
    6f1c:	78 9f       	mul	r23, r24
    6f1e:	10 0d       	add	r17, r0
    6f20:	11 24       	eor	r1, r1
    6f22:	c8 01       	movw	r24, r16
    6f24:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    6f28:	ec 01       	movw	r28, r24
    6f2a:	00 97       	sbiw	r24, 0x00	; 0
    6f2c:	29 f0       	breq	.+10     	; 0x6f38 <calloc+0x2c>
    6f2e:	60 e0       	ldi	r22, 0x00	; 0
    6f30:	70 e0       	ldi	r23, 0x00	; 0
    6f32:	a8 01       	movw	r20, r16
    6f34:	0e 94 94 39 	call	0x7328	; 0x7328 <memset>
    6f38:	ce 01       	movw	r24, r28
    6f3a:	df 91       	pop	r29
    6f3c:	cf 91       	pop	r28
    6f3e:	1f 91       	pop	r17
    6f40:	0f 91       	pop	r16
    6f42:	08 95       	ret

00006f44 <malloc>:
    6f44:	cf 93       	push	r28
    6f46:	df 93       	push	r29
    6f48:	bc 01       	movw	r22, r24
    6f4a:	82 30       	cpi	r24, 0x02	; 2
    6f4c:	91 05       	cpc	r25, r1
    6f4e:	10 f4       	brcc	.+4      	; 0x6f54 <malloc+0x10>
    6f50:	62 e0       	ldi	r22, 0x02	; 2
    6f52:	70 e0       	ldi	r23, 0x00	; 0
    6f54:	a0 91 5e 03 	lds	r26, 0x035E
    6f58:	b0 91 5f 03 	lds	r27, 0x035F
    6f5c:	ed 01       	movw	r28, r26
    6f5e:	e0 e0       	ldi	r30, 0x00	; 0
    6f60:	f0 e0       	ldi	r31, 0x00	; 0
    6f62:	40 e0       	ldi	r20, 0x00	; 0
    6f64:	50 e0       	ldi	r21, 0x00	; 0
    6f66:	21 c0       	rjmp	.+66     	; 0x6faa <malloc+0x66>
    6f68:	88 81       	ld	r24, Y
    6f6a:	99 81       	ldd	r25, Y+1	; 0x01
    6f6c:	86 17       	cp	r24, r22
    6f6e:	97 07       	cpc	r25, r23
    6f70:	69 f4       	brne	.+26     	; 0x6f8c <malloc+0x48>
    6f72:	8a 81       	ldd	r24, Y+2	; 0x02
    6f74:	9b 81       	ldd	r25, Y+3	; 0x03
    6f76:	30 97       	sbiw	r30, 0x00	; 0
    6f78:	19 f0       	breq	.+6      	; 0x6f80 <malloc+0x3c>
    6f7a:	93 83       	std	Z+3, r25	; 0x03
    6f7c:	82 83       	std	Z+2, r24	; 0x02
    6f7e:	04 c0       	rjmp	.+8      	; 0x6f88 <malloc+0x44>
    6f80:	90 93 5f 03 	sts	0x035F, r25
    6f84:	80 93 5e 03 	sts	0x035E, r24
    6f88:	fe 01       	movw	r30, r28
    6f8a:	34 c0       	rjmp	.+104    	; 0x6ff4 <malloc+0xb0>
    6f8c:	68 17       	cp	r22, r24
    6f8e:	79 07       	cpc	r23, r25
    6f90:	38 f4       	brcc	.+14     	; 0x6fa0 <malloc+0x5c>
    6f92:	41 15       	cp	r20, r1
    6f94:	51 05       	cpc	r21, r1
    6f96:	19 f0       	breq	.+6      	; 0x6f9e <malloc+0x5a>
    6f98:	84 17       	cp	r24, r20
    6f9a:	95 07       	cpc	r25, r21
    6f9c:	08 f4       	brcc	.+2      	; 0x6fa0 <malloc+0x5c>
    6f9e:	ac 01       	movw	r20, r24
    6fa0:	fe 01       	movw	r30, r28
    6fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    6fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    6fa6:	9c 01       	movw	r18, r24
    6fa8:	e9 01       	movw	r28, r18
    6faa:	20 97       	sbiw	r28, 0x00	; 0
    6fac:	e9 f6       	brne	.-70     	; 0x6f68 <malloc+0x24>
    6fae:	41 15       	cp	r20, r1
    6fb0:	51 05       	cpc	r21, r1
    6fb2:	a9 f1       	breq	.+106    	; 0x701e <malloc+0xda>
    6fb4:	ca 01       	movw	r24, r20
    6fb6:	86 1b       	sub	r24, r22
    6fb8:	97 0b       	sbc	r25, r23
    6fba:	04 97       	sbiw	r24, 0x04	; 4
    6fbc:	08 f4       	brcc	.+2      	; 0x6fc0 <malloc+0x7c>
    6fbe:	ba 01       	movw	r22, r20
    6fc0:	e0 e0       	ldi	r30, 0x00	; 0
    6fc2:	f0 e0       	ldi	r31, 0x00	; 0
    6fc4:	2a c0       	rjmp	.+84     	; 0x701a <malloc+0xd6>
    6fc6:	8d 91       	ld	r24, X+
    6fc8:	9c 91       	ld	r25, X
    6fca:	11 97       	sbiw	r26, 0x01	; 1
    6fcc:	84 17       	cp	r24, r20
    6fce:	95 07       	cpc	r25, r21
    6fd0:	f9 f4       	brne	.+62     	; 0x7010 <malloc+0xcc>
    6fd2:	64 17       	cp	r22, r20
    6fd4:	75 07       	cpc	r23, r21
    6fd6:	81 f4       	brne	.+32     	; 0x6ff8 <malloc+0xb4>
    6fd8:	12 96       	adiw	r26, 0x02	; 2
    6fda:	8d 91       	ld	r24, X+
    6fdc:	9c 91       	ld	r25, X
    6fde:	13 97       	sbiw	r26, 0x03	; 3
    6fe0:	30 97       	sbiw	r30, 0x00	; 0
    6fe2:	19 f0       	breq	.+6      	; 0x6fea <malloc+0xa6>
    6fe4:	93 83       	std	Z+3, r25	; 0x03
    6fe6:	82 83       	std	Z+2, r24	; 0x02
    6fe8:	04 c0       	rjmp	.+8      	; 0x6ff2 <malloc+0xae>
    6fea:	90 93 5f 03 	sts	0x035F, r25
    6fee:	80 93 5e 03 	sts	0x035E, r24
    6ff2:	fd 01       	movw	r30, r26
    6ff4:	32 96       	adiw	r30, 0x02	; 2
    6ff6:	4f c0       	rjmp	.+158    	; 0x7096 <malloc+0x152>
    6ff8:	ca 01       	movw	r24, r20
    6ffa:	86 1b       	sub	r24, r22
    6ffc:	97 0b       	sbc	r25, r23
    6ffe:	fd 01       	movw	r30, r26
    7000:	e8 0f       	add	r30, r24
    7002:	f9 1f       	adc	r31, r25
    7004:	61 93       	st	Z+, r22
    7006:	71 93       	st	Z+, r23
    7008:	02 97       	sbiw	r24, 0x02	; 2
    700a:	8d 93       	st	X+, r24
    700c:	9c 93       	st	X, r25
    700e:	43 c0       	rjmp	.+134    	; 0x7096 <malloc+0x152>
    7010:	fd 01       	movw	r30, r26
    7012:	82 81       	ldd	r24, Z+2	; 0x02
    7014:	93 81       	ldd	r25, Z+3	; 0x03
    7016:	9c 01       	movw	r18, r24
    7018:	d9 01       	movw	r26, r18
    701a:	10 97       	sbiw	r26, 0x00	; 0
    701c:	a1 f6       	brne	.-88     	; 0x6fc6 <malloc+0x82>
    701e:	80 91 5c 03 	lds	r24, 0x035C
    7022:	90 91 5d 03 	lds	r25, 0x035D
    7026:	89 2b       	or	r24, r25
    7028:	41 f4       	brne	.+16     	; 0x703a <malloc+0xf6>
    702a:	80 91 a5 02 	lds	r24, 0x02A5
    702e:	90 91 a6 02 	lds	r25, 0x02A6
    7032:	90 93 5d 03 	sts	0x035D, r25
    7036:	80 93 5c 03 	sts	0x035C, r24
    703a:	40 91 a7 02 	lds	r20, 0x02A7
    703e:	50 91 a8 02 	lds	r21, 0x02A8
    7042:	41 15       	cp	r20, r1
    7044:	51 05       	cpc	r21, r1
    7046:	41 f4       	brne	.+16     	; 0x7058 <malloc+0x114>
    7048:	4d b7       	in	r20, 0x3d	; 61
    704a:	5e b7       	in	r21, 0x3e	; 62
    704c:	80 91 a3 02 	lds	r24, 0x02A3
    7050:	90 91 a4 02 	lds	r25, 0x02A4
    7054:	48 1b       	sub	r20, r24
    7056:	59 0b       	sbc	r21, r25
    7058:	20 91 5c 03 	lds	r18, 0x035C
    705c:	30 91 5d 03 	lds	r19, 0x035D
    7060:	24 17       	cp	r18, r20
    7062:	35 07       	cpc	r19, r21
    7064:	b0 f4       	brcc	.+44     	; 0x7092 <malloc+0x14e>
    7066:	ca 01       	movw	r24, r20
    7068:	82 1b       	sub	r24, r18
    706a:	93 0b       	sbc	r25, r19
    706c:	86 17       	cp	r24, r22
    706e:	97 07       	cpc	r25, r23
    7070:	80 f0       	brcs	.+32     	; 0x7092 <malloc+0x14e>
    7072:	ab 01       	movw	r20, r22
    7074:	4e 5f       	subi	r20, 0xFE	; 254
    7076:	5f 4f       	sbci	r21, 0xFF	; 255
    7078:	84 17       	cp	r24, r20
    707a:	95 07       	cpc	r25, r21
    707c:	50 f0       	brcs	.+20     	; 0x7092 <malloc+0x14e>
    707e:	42 0f       	add	r20, r18
    7080:	53 1f       	adc	r21, r19
    7082:	50 93 5d 03 	sts	0x035D, r21
    7086:	40 93 5c 03 	sts	0x035C, r20
    708a:	f9 01       	movw	r30, r18
    708c:	61 93       	st	Z+, r22
    708e:	71 93       	st	Z+, r23
    7090:	02 c0       	rjmp	.+4      	; 0x7096 <malloc+0x152>
    7092:	e0 e0       	ldi	r30, 0x00	; 0
    7094:	f0 e0       	ldi	r31, 0x00	; 0
    7096:	cf 01       	movw	r24, r30
    7098:	df 91       	pop	r29
    709a:	cf 91       	pop	r28
    709c:	08 95       	ret

0000709e <free>:
    709e:	cf 93       	push	r28
    70a0:	df 93       	push	r29
    70a2:	00 97       	sbiw	r24, 0x00	; 0
    70a4:	09 f4       	brne	.+2      	; 0x70a8 <free+0xa>
    70a6:	50 c0       	rjmp	.+160    	; 0x7148 <free+0xaa>
    70a8:	ec 01       	movw	r28, r24
    70aa:	22 97       	sbiw	r28, 0x02	; 2
    70ac:	1b 82       	std	Y+3, r1	; 0x03
    70ae:	1a 82       	std	Y+2, r1	; 0x02
    70b0:	a0 91 5e 03 	lds	r26, 0x035E
    70b4:	b0 91 5f 03 	lds	r27, 0x035F
    70b8:	10 97       	sbiw	r26, 0x00	; 0
    70ba:	09 f1       	breq	.+66     	; 0x70fe <free+0x60>
    70bc:	40 e0       	ldi	r20, 0x00	; 0
    70be:	50 e0       	ldi	r21, 0x00	; 0
    70c0:	ac 17       	cp	r26, r28
    70c2:	bd 07       	cpc	r27, r29
    70c4:	08 f1       	brcs	.+66     	; 0x7108 <free+0x6a>
    70c6:	bb 83       	std	Y+3, r27	; 0x03
    70c8:	aa 83       	std	Y+2, r26	; 0x02
    70ca:	fe 01       	movw	r30, r28
    70cc:	21 91       	ld	r18, Z+
    70ce:	31 91       	ld	r19, Z+
    70d0:	e2 0f       	add	r30, r18
    70d2:	f3 1f       	adc	r31, r19
    70d4:	ae 17       	cp	r26, r30
    70d6:	bf 07       	cpc	r27, r31
    70d8:	79 f4       	brne	.+30     	; 0x70f8 <free+0x5a>
    70da:	8d 91       	ld	r24, X+
    70dc:	9c 91       	ld	r25, X
    70de:	11 97       	sbiw	r26, 0x01	; 1
    70e0:	28 0f       	add	r18, r24
    70e2:	39 1f       	adc	r19, r25
    70e4:	2e 5f       	subi	r18, 0xFE	; 254
    70e6:	3f 4f       	sbci	r19, 0xFF	; 255
    70e8:	39 83       	std	Y+1, r19	; 0x01
    70ea:	28 83       	st	Y, r18
    70ec:	12 96       	adiw	r26, 0x02	; 2
    70ee:	8d 91       	ld	r24, X+
    70f0:	9c 91       	ld	r25, X
    70f2:	13 97       	sbiw	r26, 0x03	; 3
    70f4:	9b 83       	std	Y+3, r25	; 0x03
    70f6:	8a 83       	std	Y+2, r24	; 0x02
    70f8:	41 15       	cp	r20, r1
    70fa:	51 05       	cpc	r21, r1
    70fc:	71 f4       	brne	.+28     	; 0x711a <free+0x7c>
    70fe:	d0 93 5f 03 	sts	0x035F, r29
    7102:	c0 93 5e 03 	sts	0x035E, r28
    7106:	20 c0       	rjmp	.+64     	; 0x7148 <free+0xaa>
    7108:	12 96       	adiw	r26, 0x02	; 2
    710a:	8d 91       	ld	r24, X+
    710c:	9c 91       	ld	r25, X
    710e:	13 97       	sbiw	r26, 0x03	; 3
    7110:	ad 01       	movw	r20, r26
    7112:	00 97       	sbiw	r24, 0x00	; 0
    7114:	11 f0       	breq	.+4      	; 0x711a <free+0x7c>
    7116:	dc 01       	movw	r26, r24
    7118:	d3 cf       	rjmp	.-90     	; 0x70c0 <free+0x22>
    711a:	fa 01       	movw	r30, r20
    711c:	d3 83       	std	Z+3, r29	; 0x03
    711e:	c2 83       	std	Z+2, r28	; 0x02
    7120:	21 91       	ld	r18, Z+
    7122:	31 91       	ld	r19, Z+
    7124:	e2 0f       	add	r30, r18
    7126:	f3 1f       	adc	r31, r19
    7128:	ce 17       	cp	r28, r30
    712a:	df 07       	cpc	r29, r31
    712c:	69 f4       	brne	.+26     	; 0x7148 <free+0xaa>
    712e:	88 81       	ld	r24, Y
    7130:	99 81       	ldd	r25, Y+1	; 0x01
    7132:	28 0f       	add	r18, r24
    7134:	39 1f       	adc	r19, r25
    7136:	2e 5f       	subi	r18, 0xFE	; 254
    7138:	3f 4f       	sbci	r19, 0xFF	; 255
    713a:	fa 01       	movw	r30, r20
    713c:	31 83       	std	Z+1, r19	; 0x01
    713e:	20 83       	st	Z, r18
    7140:	8a 81       	ldd	r24, Y+2	; 0x02
    7142:	9b 81       	ldd	r25, Y+3	; 0x03
    7144:	93 83       	std	Z+3, r25	; 0x03
    7146:	82 83       	std	Z+2, r24	; 0x02
    7148:	df 91       	pop	r29
    714a:	cf 91       	pop	r28
    714c:	08 95       	ret

0000714e <realloc>:
    714e:	8f 92       	push	r8
    7150:	9f 92       	push	r9
    7152:	af 92       	push	r10
    7154:	bf 92       	push	r11
    7156:	cf 92       	push	r12
    7158:	df 92       	push	r13
    715a:	ef 92       	push	r14
    715c:	ff 92       	push	r15
    715e:	0f 93       	push	r16
    7160:	1f 93       	push	r17
    7162:	cf 93       	push	r28
    7164:	df 93       	push	r29
    7166:	8c 01       	movw	r16, r24
    7168:	00 97       	sbiw	r24, 0x00	; 0
    716a:	29 f4       	brne	.+10     	; 0x7176 <realloc+0x28>
    716c:	cb 01       	movw	r24, r22
    716e:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    7172:	8c 01       	movw	r16, r24
    7174:	ba c0       	rjmp	.+372    	; 0x72ea <realloc+0x19c>
    7176:	9e ef       	ldi	r25, 0xFE	; 254
    7178:	e9 2e       	mov	r14, r25
    717a:	9f ef       	ldi	r25, 0xFF	; 255
    717c:	f9 2e       	mov	r15, r25
    717e:	e0 0e       	add	r14, r16
    7180:	f1 1e       	adc	r15, r17
    7182:	58 01       	movw	r10, r16
    7184:	a6 0e       	add	r10, r22
    7186:	b7 1e       	adc	r11, r23
    7188:	ae 14       	cp	r10, r14
    718a:	bf 04       	cpc	r11, r15
    718c:	08 f4       	brcc	.+2      	; 0x7190 <realloc+0x42>
    718e:	ab c0       	rjmp	.+342    	; 0x72e6 <realloc+0x198>
    7190:	8e ef       	ldi	r24, 0xFE	; 254
    7192:	88 2e       	mov	r8, r24
    7194:	8f ef       	ldi	r24, 0xFF	; 255
    7196:	98 2e       	mov	r9, r24
    7198:	8a 0c       	add	r8, r10
    719a:	9b 1c       	adc	r9, r11
    719c:	e7 01       	movw	r28, r14
    719e:	48 81       	ld	r20, Y
    71a0:	59 81       	ldd	r21, Y+1	; 0x01
    71a2:	46 17       	cp	r20, r22
    71a4:	57 07       	cpc	r21, r23
    71a6:	b8 f0       	brcs	.+46     	; 0x71d6 <realloc+0x88>
    71a8:	45 30       	cpi	r20, 0x05	; 5
    71aa:	51 05       	cpc	r21, r1
    71ac:	08 f4       	brcc	.+2      	; 0x71b0 <realloc+0x62>
    71ae:	9d c0       	rjmp	.+314    	; 0x72ea <realloc+0x19c>
    71b0:	ca 01       	movw	r24, r20
    71b2:	04 97       	sbiw	r24, 0x04	; 4
    71b4:	86 17       	cp	r24, r22
    71b6:	97 07       	cpc	r25, r23
    71b8:	08 f4       	brcc	.+2      	; 0x71bc <realloc+0x6e>
    71ba:	97 c0       	rjmp	.+302    	; 0x72ea <realloc+0x19c>
    71bc:	42 50       	subi	r20, 0x02	; 2
    71be:	50 40       	sbci	r21, 0x00	; 0
    71c0:	46 1b       	sub	r20, r22
    71c2:	57 0b       	sbc	r21, r23
    71c4:	f4 01       	movw	r30, r8
    71c6:	51 83       	std	Z+1, r21	; 0x01
    71c8:	40 83       	st	Z, r20
    71ca:	79 83       	std	Y+1, r23	; 0x01
    71cc:	68 83       	st	Y, r22
    71ce:	c5 01       	movw	r24, r10
    71d0:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    71d4:	8a c0       	rjmp	.+276    	; 0x72ea <realloc+0x19c>
    71d6:	6b 01       	movw	r12, r22
    71d8:	c4 1a       	sub	r12, r20
    71da:	d5 0a       	sbc	r13, r21
    71dc:	e0 91 5e 03 	lds	r30, 0x035E
    71e0:	f0 91 5f 03 	lds	r31, 0x035F
    71e4:	a0 e0       	ldi	r26, 0x00	; 0
    71e6:	b0 e0       	ldi	r27, 0x00	; 0
    71e8:	c0 e0       	ldi	r28, 0x00	; 0
    71ea:	d0 e0       	ldi	r29, 0x00	; 0
    71ec:	42 c0       	rjmp	.+132    	; 0x7272 <realloc+0x124>
    71ee:	e8 15       	cp	r30, r8
    71f0:	f9 05       	cpc	r31, r9
    71f2:	a1 f5       	brne	.+104    	; 0x725c <realloc+0x10e>
    71f4:	20 81       	ld	r18, Z
    71f6:	31 81       	ldd	r19, Z+1	; 0x01
    71f8:	2c 15       	cp	r18, r12
    71fa:	3d 05       	cpc	r19, r13
    71fc:	78 f1       	brcs	.+94     	; 0x725c <realloc+0x10e>
    71fe:	c9 01       	movw	r24, r18
    7200:	02 96       	adiw	r24, 0x02	; 2
    7202:	8c 15       	cp	r24, r12
    7204:	9d 05       	cpc	r25, r13
    7206:	a8 f0       	brcs	.+42     	; 0x7232 <realloc+0xe4>
    7208:	4e 5f       	subi	r20, 0xFE	; 254
    720a:	5f 4f       	sbci	r21, 0xFF	; 255
    720c:	42 0f       	add	r20, r18
    720e:	53 1f       	adc	r21, r19
    7210:	e7 01       	movw	r28, r14
    7212:	59 83       	std	Y+1, r21	; 0x01
    7214:	48 83       	st	Y, r20
    7216:	22 81       	ldd	r18, Z+2	; 0x02
    7218:	33 81       	ldd	r19, Z+3	; 0x03
    721a:	10 97       	sbiw	r26, 0x00	; 0
    721c:	29 f0       	breq	.+10     	; 0x7228 <realloc+0xda>
    721e:	13 96       	adiw	r26, 0x03	; 3
    7220:	3c 93       	st	X, r19
    7222:	2e 93       	st	-X, r18
    7224:	12 97       	sbiw	r26, 0x02	; 2
    7226:	61 c0       	rjmp	.+194    	; 0x72ea <realloc+0x19c>
    7228:	30 93 5f 03 	sts	0x035F, r19
    722c:	20 93 5e 03 	sts	0x035E, r18
    7230:	5c c0       	rjmp	.+184    	; 0x72ea <realloc+0x19c>
    7232:	22 50       	subi	r18, 0x02	; 2
    7234:	30 40       	sbci	r19, 0x00	; 0
    7236:	2c 19       	sub	r18, r12
    7238:	3d 09       	sbc	r19, r13
    723a:	31 83       	std	Z+1, r19	; 0x01
    723c:	20 83       	st	Z, r18
    723e:	10 97       	sbiw	r26, 0x00	; 0
    7240:	29 f0       	breq	.+10     	; 0x724c <realloc+0xfe>
    7242:	13 96       	adiw	r26, 0x03	; 3
    7244:	fc 93       	st	X, r31
    7246:	ee 93       	st	-X, r30
    7248:	12 97       	sbiw	r26, 0x02	; 2
    724a:	04 c0       	rjmp	.+8      	; 0x7254 <realloc+0x106>
    724c:	f0 93 5f 03 	sts	0x035F, r31
    7250:	e0 93 5e 03 	sts	0x035E, r30
    7254:	f7 01       	movw	r30, r14
    7256:	71 83       	std	Z+1, r23	; 0x01
    7258:	60 83       	st	Z, r22
    725a:	47 c0       	rjmp	.+142    	; 0x72ea <realloc+0x19c>
    725c:	80 81       	ld	r24, Z
    725e:	91 81       	ldd	r25, Z+1	; 0x01
    7260:	c8 17       	cp	r28, r24
    7262:	d9 07       	cpc	r29, r25
    7264:	08 f4       	brcc	.+2      	; 0x7268 <realloc+0x11a>
    7266:	ec 01       	movw	r28, r24
    7268:	df 01       	movw	r26, r30
    726a:	82 81       	ldd	r24, Z+2	; 0x02
    726c:	93 81       	ldd	r25, Z+3	; 0x03
    726e:	9c 01       	movw	r18, r24
    7270:	f9 01       	movw	r30, r18
    7272:	30 97       	sbiw	r30, 0x00	; 0
    7274:	09 f0       	breq	.+2      	; 0x7278 <realloc+0x12a>
    7276:	bb cf       	rjmp	.-138    	; 0x71ee <realloc+0xa0>
    7278:	40 0f       	add	r20, r16
    727a:	51 1f       	adc	r21, r17
    727c:	80 91 5c 03 	lds	r24, 0x035C
    7280:	90 91 5d 03 	lds	r25, 0x035D
    7284:	84 17       	cp	r24, r20
    7286:	95 07       	cpc	r25, r21
    7288:	e9 f4       	brne	.+58     	; 0x72c4 <realloc+0x176>
    728a:	c6 17       	cp	r28, r22
    728c:	d7 07       	cpc	r29, r23
    728e:	d0 f4       	brcc	.+52     	; 0x72c4 <realloc+0x176>
    7290:	20 91 a7 02 	lds	r18, 0x02A7
    7294:	30 91 a8 02 	lds	r19, 0x02A8
    7298:	21 15       	cp	r18, r1
    729a:	31 05       	cpc	r19, r1
    729c:	41 f4       	brne	.+16     	; 0x72ae <realloc+0x160>
    729e:	2d b7       	in	r18, 0x3d	; 61
    72a0:	3e b7       	in	r19, 0x3e	; 62
    72a2:	80 91 a3 02 	lds	r24, 0x02A3
    72a6:	90 91 a4 02 	lds	r25, 0x02A4
    72aa:	28 1b       	sub	r18, r24
    72ac:	39 0b       	sbc	r19, r25
    72ae:	a2 16       	cp	r10, r18
    72b0:	b3 06       	cpc	r11, r19
    72b2:	c8 f4       	brcc	.+50     	; 0x72e6 <realloc+0x198>
    72b4:	b0 92 5d 03 	sts	0x035D, r11
    72b8:	a0 92 5c 03 	sts	0x035C, r10
    72bc:	e7 01       	movw	r28, r14
    72be:	79 83       	std	Y+1, r23	; 0x01
    72c0:	68 83       	st	Y, r22
    72c2:	13 c0       	rjmp	.+38     	; 0x72ea <realloc+0x19c>
    72c4:	cb 01       	movw	r24, r22
    72c6:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <malloc>
    72ca:	ec 01       	movw	r28, r24
    72cc:	00 97       	sbiw	r24, 0x00	; 0
    72ce:	59 f0       	breq	.+22     	; 0x72e6 <realloc+0x198>
    72d0:	f7 01       	movw	r30, r14
    72d2:	40 81       	ld	r20, Z
    72d4:	51 81       	ldd	r21, Z+1	; 0x01
    72d6:	b8 01       	movw	r22, r16
    72d8:	0e 94 8b 39 	call	0x7316	; 0x7316 <memcpy>
    72dc:	c8 01       	movw	r24, r16
    72de:	0e 94 4f 38 	call	0x709e	; 0x709e <free>
    72e2:	8e 01       	movw	r16, r28
    72e4:	02 c0       	rjmp	.+4      	; 0x72ea <realloc+0x19c>
    72e6:	00 e0       	ldi	r16, 0x00	; 0
    72e8:	10 e0       	ldi	r17, 0x00	; 0
    72ea:	c8 01       	movw	r24, r16
    72ec:	df 91       	pop	r29
    72ee:	cf 91       	pop	r28
    72f0:	1f 91       	pop	r17
    72f2:	0f 91       	pop	r16
    72f4:	ff 90       	pop	r15
    72f6:	ef 90       	pop	r14
    72f8:	df 90       	pop	r13
    72fa:	cf 90       	pop	r12
    72fc:	bf 90       	pop	r11
    72fe:	af 90       	pop	r10
    7300:	9f 90       	pop	r9
    7302:	8f 90       	pop	r8
    7304:	08 95       	ret

00007306 <abort>:
    7306:	81 e0       	ldi	r24, 0x01	; 1
    7308:	90 e0       	ldi	r25, 0x00	; 0
    730a:	f8 94       	cli
    730c:	0c 94 8f 3d 	jmp	0x7b1e	; 0x7b1e <_exit>

00007310 <exit>:
    7310:	f8 94       	cli
    7312:	0c 94 8f 3d 	jmp	0x7b1e	; 0x7b1e <_exit>

00007316 <memcpy>:
    7316:	fb 01       	movw	r30, r22
    7318:	dc 01       	movw	r26, r24
    731a:	02 c0       	rjmp	.+4      	; 0x7320 <memcpy+0xa>
    731c:	01 90       	ld	r0, Z+
    731e:	0d 92       	st	X+, r0
    7320:	41 50       	subi	r20, 0x01	; 1
    7322:	50 40       	sbci	r21, 0x00	; 0
    7324:	d8 f7       	brcc	.-10     	; 0x731c <memcpy+0x6>
    7326:	08 95       	ret

00007328 <memset>:
    7328:	dc 01       	movw	r26, r24
    732a:	01 c0       	rjmp	.+2      	; 0x732e <memset+0x6>
    732c:	6d 93       	st	X+, r22
    732e:	41 50       	subi	r20, 0x01	; 1
    7330:	50 40       	sbci	r21, 0x00	; 0
    7332:	e0 f7       	brcc	.-8      	; 0x732c <memset+0x4>
    7334:	08 95       	ret

00007336 <strcmp>:
    7336:	fb 01       	movw	r30, r22
    7338:	dc 01       	movw	r26, r24
    733a:	8d 91       	ld	r24, X+
    733c:	01 90       	ld	r0, Z+
    733e:	80 19       	sub	r24, r0
    7340:	01 10       	cpse	r0, r1
    7342:	d9 f3       	breq	.-10     	; 0x733a <strcmp+0x4>
    7344:	99 0b       	sbc	r25, r25
    7346:	08 95       	ret

00007348 <strcpy>:
    7348:	fb 01       	movw	r30, r22
    734a:	dc 01       	movw	r26, r24
    734c:	01 90       	ld	r0, Z+
    734e:	0d 92       	st	X+, r0
    7350:	00 20       	and	r0, r0
    7352:	e1 f7       	brne	.-8      	; 0x734c <strcpy+0x4>
    7354:	08 95       	ret

00007356 <__subsf3>:
    7356:	50 58       	subi	r21, 0x80	; 128

00007358 <__addsf3>:
    7358:	bb 27       	eor	r27, r27
    735a:	aa 27       	eor	r26, r26
    735c:	0e d0       	rcall	.+28     	; 0x737a <__addsf3x>
    735e:	b1 c1       	rjmp	.+866    	; 0x76c2 <__fp_round>
    7360:	a2 d1       	rcall	.+836    	; 0x76a6 <__fp_pscA>
    7362:	30 f0       	brcs	.+12     	; 0x7370 <__addsf3+0x18>
    7364:	a7 d1       	rcall	.+846    	; 0x76b4 <__fp_pscB>
    7366:	20 f0       	brcs	.+8      	; 0x7370 <__addsf3+0x18>
    7368:	31 f4       	brne	.+12     	; 0x7376 <__addsf3+0x1e>
    736a:	9f 3f       	cpi	r25, 0xFF	; 255
    736c:	11 f4       	brne	.+4      	; 0x7372 <__addsf3+0x1a>
    736e:	1e f4       	brtc	.+6      	; 0x7376 <__addsf3+0x1e>
    7370:	97 c1       	rjmp	.+814    	; 0x76a0 <__fp_nan>
    7372:	0e f4       	brtc	.+2      	; 0x7376 <__addsf3+0x1e>
    7374:	e0 95       	com	r30
    7376:	e7 fb       	bst	r30, 7
    7378:	64 c1       	rjmp	.+712    	; 0x7642 <__fp_inf>

0000737a <__addsf3x>:
    737a:	e9 2f       	mov	r30, r25
    737c:	b3 d1       	rcall	.+870    	; 0x76e4 <__fp_split3>
    737e:	80 f3       	brcs	.-32     	; 0x7360 <__addsf3+0x8>
    7380:	ba 17       	cp	r27, r26
    7382:	62 07       	cpc	r22, r18
    7384:	73 07       	cpc	r23, r19
    7386:	84 07       	cpc	r24, r20
    7388:	95 07       	cpc	r25, r21
    738a:	18 f0       	brcs	.+6      	; 0x7392 <__addsf3x+0x18>
    738c:	71 f4       	brne	.+28     	; 0x73aa <__addsf3x+0x30>
    738e:	9e f5       	brtc	.+102    	; 0x73f6 <__addsf3x+0x7c>
    7390:	e2 c1       	rjmp	.+964    	; 0x7756 <__fp_zero>
    7392:	0e f4       	brtc	.+2      	; 0x7396 <__addsf3x+0x1c>
    7394:	e0 95       	com	r30
    7396:	0b 2e       	mov	r0, r27
    7398:	ba 2f       	mov	r27, r26
    739a:	a0 2d       	mov	r26, r0
    739c:	0b 01       	movw	r0, r22
    739e:	b9 01       	movw	r22, r18
    73a0:	90 01       	movw	r18, r0
    73a2:	0c 01       	movw	r0, r24
    73a4:	ca 01       	movw	r24, r20
    73a6:	a0 01       	movw	r20, r0
    73a8:	11 24       	eor	r1, r1
    73aa:	ff 27       	eor	r31, r31
    73ac:	59 1b       	sub	r21, r25
    73ae:	99 f0       	breq	.+38     	; 0x73d6 <__addsf3x+0x5c>
    73b0:	59 3f       	cpi	r21, 0xF9	; 249
    73b2:	50 f4       	brcc	.+20     	; 0x73c8 <__addsf3x+0x4e>
    73b4:	50 3e       	cpi	r21, 0xE0	; 224
    73b6:	68 f1       	brcs	.+90     	; 0x7412 <__addsf3x+0x98>
    73b8:	1a 16       	cp	r1, r26
    73ba:	f0 40       	sbci	r31, 0x00	; 0
    73bc:	a2 2f       	mov	r26, r18
    73be:	23 2f       	mov	r18, r19
    73c0:	34 2f       	mov	r19, r20
    73c2:	44 27       	eor	r20, r20
    73c4:	58 5f       	subi	r21, 0xF8	; 248
    73c6:	f3 cf       	rjmp	.-26     	; 0x73ae <__addsf3x+0x34>
    73c8:	46 95       	lsr	r20
    73ca:	37 95       	ror	r19
    73cc:	27 95       	ror	r18
    73ce:	a7 95       	ror	r26
    73d0:	f0 40       	sbci	r31, 0x00	; 0
    73d2:	53 95       	inc	r21
    73d4:	c9 f7       	brne	.-14     	; 0x73c8 <__addsf3x+0x4e>
    73d6:	7e f4       	brtc	.+30     	; 0x73f6 <__addsf3x+0x7c>
    73d8:	1f 16       	cp	r1, r31
    73da:	ba 0b       	sbc	r27, r26
    73dc:	62 0b       	sbc	r22, r18
    73de:	73 0b       	sbc	r23, r19
    73e0:	84 0b       	sbc	r24, r20
    73e2:	ba f0       	brmi	.+46     	; 0x7412 <__addsf3x+0x98>
    73e4:	91 50       	subi	r25, 0x01	; 1
    73e6:	a1 f0       	breq	.+40     	; 0x7410 <__addsf3x+0x96>
    73e8:	ff 0f       	add	r31, r31
    73ea:	bb 1f       	adc	r27, r27
    73ec:	66 1f       	adc	r22, r22
    73ee:	77 1f       	adc	r23, r23
    73f0:	88 1f       	adc	r24, r24
    73f2:	c2 f7       	brpl	.-16     	; 0x73e4 <__addsf3x+0x6a>
    73f4:	0e c0       	rjmp	.+28     	; 0x7412 <__addsf3x+0x98>
    73f6:	ba 0f       	add	r27, r26
    73f8:	62 1f       	adc	r22, r18
    73fa:	73 1f       	adc	r23, r19
    73fc:	84 1f       	adc	r24, r20
    73fe:	48 f4       	brcc	.+18     	; 0x7412 <__addsf3x+0x98>
    7400:	87 95       	ror	r24
    7402:	77 95       	ror	r23
    7404:	67 95       	ror	r22
    7406:	b7 95       	ror	r27
    7408:	f7 95       	ror	r31
    740a:	9e 3f       	cpi	r25, 0xFE	; 254
    740c:	08 f0       	brcs	.+2      	; 0x7410 <__addsf3x+0x96>
    740e:	b3 cf       	rjmp	.-154    	; 0x7376 <__addsf3+0x1e>
    7410:	93 95       	inc	r25
    7412:	88 0f       	add	r24, r24
    7414:	08 f0       	brcs	.+2      	; 0x7418 <__addsf3x+0x9e>
    7416:	99 27       	eor	r25, r25
    7418:	ee 0f       	add	r30, r30
    741a:	97 95       	ror	r25
    741c:	87 95       	ror	r24
    741e:	08 95       	ret

00007420 <__cmpsf2>:
    7420:	ec d0       	rcall	.+472    	; 0x75fa <__fp_cmp>
    7422:	08 f4       	brcc	.+2      	; 0x7426 <__cmpsf2+0x6>
    7424:	81 e0       	ldi	r24, 0x01	; 1
    7426:	08 95       	ret

00007428 <__divsf3>:
    7428:	0c d0       	rcall	.+24     	; 0x7442 <__divsf3x>
    742a:	4b c1       	rjmp	.+662    	; 0x76c2 <__fp_round>
    742c:	43 d1       	rcall	.+646    	; 0x76b4 <__fp_pscB>
    742e:	40 f0       	brcs	.+16     	; 0x7440 <__divsf3+0x18>
    7430:	3a d1       	rcall	.+628    	; 0x76a6 <__fp_pscA>
    7432:	30 f0       	brcs	.+12     	; 0x7440 <__divsf3+0x18>
    7434:	21 f4       	brne	.+8      	; 0x743e <__divsf3+0x16>
    7436:	5f 3f       	cpi	r21, 0xFF	; 255
    7438:	19 f0       	breq	.+6      	; 0x7440 <__divsf3+0x18>
    743a:	03 c1       	rjmp	.+518    	; 0x7642 <__fp_inf>
    743c:	51 11       	cpse	r21, r1
    743e:	8c c1       	rjmp	.+792    	; 0x7758 <__fp_szero>
    7440:	2f c1       	rjmp	.+606    	; 0x76a0 <__fp_nan>

00007442 <__divsf3x>:
    7442:	50 d1       	rcall	.+672    	; 0x76e4 <__fp_split3>
    7444:	98 f3       	brcs	.-26     	; 0x742c <__divsf3+0x4>

00007446 <__divsf3_pse>:
    7446:	99 23       	and	r25, r25
    7448:	c9 f3       	breq	.-14     	; 0x743c <__divsf3+0x14>
    744a:	55 23       	and	r21, r21
    744c:	b1 f3       	breq	.-20     	; 0x743a <__divsf3+0x12>
    744e:	95 1b       	sub	r25, r21
    7450:	55 0b       	sbc	r21, r21
    7452:	bb 27       	eor	r27, r27
    7454:	aa 27       	eor	r26, r26
    7456:	62 17       	cp	r22, r18
    7458:	73 07       	cpc	r23, r19
    745a:	84 07       	cpc	r24, r20
    745c:	38 f0       	brcs	.+14     	; 0x746c <__divsf3_pse+0x26>
    745e:	9f 5f       	subi	r25, 0xFF	; 255
    7460:	5f 4f       	sbci	r21, 0xFF	; 255
    7462:	22 0f       	add	r18, r18
    7464:	33 1f       	adc	r19, r19
    7466:	44 1f       	adc	r20, r20
    7468:	aa 1f       	adc	r26, r26
    746a:	a9 f3       	breq	.-22     	; 0x7456 <__divsf3_pse+0x10>
    746c:	33 d0       	rcall	.+102    	; 0x74d4 <__divsf3_pse+0x8e>
    746e:	0e 2e       	mov	r0, r30
    7470:	3a f0       	brmi	.+14     	; 0x7480 <__divsf3_pse+0x3a>
    7472:	e0 e8       	ldi	r30, 0x80	; 128
    7474:	30 d0       	rcall	.+96     	; 0x74d6 <__divsf3_pse+0x90>
    7476:	91 50       	subi	r25, 0x01	; 1
    7478:	50 40       	sbci	r21, 0x00	; 0
    747a:	e6 95       	lsr	r30
    747c:	00 1c       	adc	r0, r0
    747e:	ca f7       	brpl	.-14     	; 0x7472 <__divsf3_pse+0x2c>
    7480:	29 d0       	rcall	.+82     	; 0x74d4 <__divsf3_pse+0x8e>
    7482:	fe 2f       	mov	r31, r30
    7484:	27 d0       	rcall	.+78     	; 0x74d4 <__divsf3_pse+0x8e>
    7486:	66 0f       	add	r22, r22
    7488:	77 1f       	adc	r23, r23
    748a:	88 1f       	adc	r24, r24
    748c:	bb 1f       	adc	r27, r27
    748e:	26 17       	cp	r18, r22
    7490:	37 07       	cpc	r19, r23
    7492:	48 07       	cpc	r20, r24
    7494:	ab 07       	cpc	r26, r27
    7496:	b0 e8       	ldi	r27, 0x80	; 128
    7498:	09 f0       	breq	.+2      	; 0x749c <__divsf3_pse+0x56>
    749a:	bb 0b       	sbc	r27, r27
    749c:	80 2d       	mov	r24, r0
    749e:	bf 01       	movw	r22, r30
    74a0:	ff 27       	eor	r31, r31
    74a2:	93 58       	subi	r25, 0x83	; 131
    74a4:	5f 4f       	sbci	r21, 0xFF	; 255
    74a6:	2a f0       	brmi	.+10     	; 0x74b2 <__divsf3_pse+0x6c>
    74a8:	9e 3f       	cpi	r25, 0xFE	; 254
    74aa:	51 05       	cpc	r21, r1
    74ac:	68 f0       	brcs	.+26     	; 0x74c8 <__divsf3_pse+0x82>
    74ae:	c9 c0       	rjmp	.+402    	; 0x7642 <__fp_inf>
    74b0:	53 c1       	rjmp	.+678    	; 0x7758 <__fp_szero>
    74b2:	5f 3f       	cpi	r21, 0xFF	; 255
    74b4:	ec f3       	brlt	.-6      	; 0x74b0 <__divsf3_pse+0x6a>
    74b6:	98 3e       	cpi	r25, 0xE8	; 232
    74b8:	dc f3       	brlt	.-10     	; 0x74b0 <__divsf3_pse+0x6a>
    74ba:	86 95       	lsr	r24
    74bc:	77 95       	ror	r23
    74be:	67 95       	ror	r22
    74c0:	b7 95       	ror	r27
    74c2:	f7 95       	ror	r31
    74c4:	9f 5f       	subi	r25, 0xFF	; 255
    74c6:	c9 f7       	brne	.-14     	; 0x74ba <__divsf3_pse+0x74>
    74c8:	88 0f       	add	r24, r24
    74ca:	91 1d       	adc	r25, r1
    74cc:	96 95       	lsr	r25
    74ce:	87 95       	ror	r24
    74d0:	97 f9       	bld	r25, 7
    74d2:	08 95       	ret
    74d4:	e1 e0       	ldi	r30, 0x01	; 1
    74d6:	66 0f       	add	r22, r22
    74d8:	77 1f       	adc	r23, r23
    74da:	88 1f       	adc	r24, r24
    74dc:	bb 1f       	adc	r27, r27
    74de:	62 17       	cp	r22, r18
    74e0:	73 07       	cpc	r23, r19
    74e2:	84 07       	cpc	r24, r20
    74e4:	ba 07       	cpc	r27, r26
    74e6:	20 f0       	brcs	.+8      	; 0x74f0 <__divsf3_pse+0xaa>
    74e8:	62 1b       	sub	r22, r18
    74ea:	73 0b       	sbc	r23, r19
    74ec:	84 0b       	sbc	r24, r20
    74ee:	ba 0b       	sbc	r27, r26
    74f0:	ee 1f       	adc	r30, r30
    74f2:	88 f7       	brcc	.-30     	; 0x74d6 <__divsf3_pse+0x90>
    74f4:	e0 95       	com	r30
    74f6:	08 95       	ret

000074f8 <__fixsfsi>:
    74f8:	04 d0       	rcall	.+8      	; 0x7502 <__fixunssfsi>
    74fa:	68 94       	set
    74fc:	b1 11       	cpse	r27, r1
    74fe:	2c c1       	rjmp	.+600    	; 0x7758 <__fp_szero>
    7500:	08 95       	ret

00007502 <__fixunssfsi>:
    7502:	f8 d0       	rcall	.+496    	; 0x76f4 <__fp_splitA>
    7504:	88 f0       	brcs	.+34     	; 0x7528 <__fixunssfsi+0x26>
    7506:	9f 57       	subi	r25, 0x7F	; 127
    7508:	90 f0       	brcs	.+36     	; 0x752e <__fixunssfsi+0x2c>
    750a:	b9 2f       	mov	r27, r25
    750c:	99 27       	eor	r25, r25
    750e:	b7 51       	subi	r27, 0x17	; 23
    7510:	a0 f0       	brcs	.+40     	; 0x753a <__fixunssfsi+0x38>
    7512:	d1 f0       	breq	.+52     	; 0x7548 <__fixunssfsi+0x46>
    7514:	66 0f       	add	r22, r22
    7516:	77 1f       	adc	r23, r23
    7518:	88 1f       	adc	r24, r24
    751a:	99 1f       	adc	r25, r25
    751c:	1a f0       	brmi	.+6      	; 0x7524 <__fixunssfsi+0x22>
    751e:	ba 95       	dec	r27
    7520:	c9 f7       	brne	.-14     	; 0x7514 <__fixunssfsi+0x12>
    7522:	12 c0       	rjmp	.+36     	; 0x7548 <__fixunssfsi+0x46>
    7524:	b1 30       	cpi	r27, 0x01	; 1
    7526:	81 f0       	breq	.+32     	; 0x7548 <__fixunssfsi+0x46>
    7528:	16 d1       	rcall	.+556    	; 0x7756 <__fp_zero>
    752a:	b1 e0       	ldi	r27, 0x01	; 1
    752c:	08 95       	ret
    752e:	13 c1       	rjmp	.+550    	; 0x7756 <__fp_zero>
    7530:	67 2f       	mov	r22, r23
    7532:	78 2f       	mov	r23, r24
    7534:	88 27       	eor	r24, r24
    7536:	b8 5f       	subi	r27, 0xF8	; 248
    7538:	39 f0       	breq	.+14     	; 0x7548 <__fixunssfsi+0x46>
    753a:	b9 3f       	cpi	r27, 0xF9	; 249
    753c:	cc f3       	brlt	.-14     	; 0x7530 <__fixunssfsi+0x2e>
    753e:	86 95       	lsr	r24
    7540:	77 95       	ror	r23
    7542:	67 95       	ror	r22
    7544:	b3 95       	inc	r27
    7546:	d9 f7       	brne	.-10     	; 0x753e <__fixunssfsi+0x3c>
    7548:	3e f4       	brtc	.+14     	; 0x7558 <__fixunssfsi+0x56>
    754a:	90 95       	com	r25
    754c:	80 95       	com	r24
    754e:	70 95       	com	r23
    7550:	61 95       	neg	r22
    7552:	7f 4f       	sbci	r23, 0xFF	; 255
    7554:	8f 4f       	sbci	r24, 0xFF	; 255
    7556:	9f 4f       	sbci	r25, 0xFF	; 255
    7558:	08 95       	ret

0000755a <__floatunsisf>:
    755a:	e8 94       	clt
    755c:	09 c0       	rjmp	.+18     	; 0x7570 <__floatsisf+0x12>

0000755e <__floatsisf>:
    755e:	97 fb       	bst	r25, 7
    7560:	3e f4       	brtc	.+14     	; 0x7570 <__floatsisf+0x12>
    7562:	90 95       	com	r25
    7564:	80 95       	com	r24
    7566:	70 95       	com	r23
    7568:	61 95       	neg	r22
    756a:	7f 4f       	sbci	r23, 0xFF	; 255
    756c:	8f 4f       	sbci	r24, 0xFF	; 255
    756e:	9f 4f       	sbci	r25, 0xFF	; 255
    7570:	99 23       	and	r25, r25
    7572:	a9 f0       	breq	.+42     	; 0x759e <__floatsisf+0x40>
    7574:	f9 2f       	mov	r31, r25
    7576:	96 e9       	ldi	r25, 0x96	; 150
    7578:	bb 27       	eor	r27, r27
    757a:	93 95       	inc	r25
    757c:	f6 95       	lsr	r31
    757e:	87 95       	ror	r24
    7580:	77 95       	ror	r23
    7582:	67 95       	ror	r22
    7584:	b7 95       	ror	r27
    7586:	f1 11       	cpse	r31, r1
    7588:	f8 cf       	rjmp	.-16     	; 0x757a <__floatsisf+0x1c>
    758a:	fa f4       	brpl	.+62     	; 0x75ca <__floatsisf+0x6c>
    758c:	bb 0f       	add	r27, r27
    758e:	11 f4       	brne	.+4      	; 0x7594 <__floatsisf+0x36>
    7590:	60 ff       	sbrs	r22, 0
    7592:	1b c0       	rjmp	.+54     	; 0x75ca <__floatsisf+0x6c>
    7594:	6f 5f       	subi	r22, 0xFF	; 255
    7596:	7f 4f       	sbci	r23, 0xFF	; 255
    7598:	8f 4f       	sbci	r24, 0xFF	; 255
    759a:	9f 4f       	sbci	r25, 0xFF	; 255
    759c:	16 c0       	rjmp	.+44     	; 0x75ca <__floatsisf+0x6c>
    759e:	88 23       	and	r24, r24
    75a0:	11 f0       	breq	.+4      	; 0x75a6 <__floatsisf+0x48>
    75a2:	96 e9       	ldi	r25, 0x96	; 150
    75a4:	11 c0       	rjmp	.+34     	; 0x75c8 <__floatsisf+0x6a>
    75a6:	77 23       	and	r23, r23
    75a8:	21 f0       	breq	.+8      	; 0x75b2 <__floatsisf+0x54>
    75aa:	9e e8       	ldi	r25, 0x8E	; 142
    75ac:	87 2f       	mov	r24, r23
    75ae:	76 2f       	mov	r23, r22
    75b0:	05 c0       	rjmp	.+10     	; 0x75bc <__floatsisf+0x5e>
    75b2:	66 23       	and	r22, r22
    75b4:	71 f0       	breq	.+28     	; 0x75d2 <__floatsisf+0x74>
    75b6:	96 e8       	ldi	r25, 0x86	; 134
    75b8:	86 2f       	mov	r24, r22
    75ba:	70 e0       	ldi	r23, 0x00	; 0
    75bc:	60 e0       	ldi	r22, 0x00	; 0
    75be:	2a f0       	brmi	.+10     	; 0x75ca <__floatsisf+0x6c>
    75c0:	9a 95       	dec	r25
    75c2:	66 0f       	add	r22, r22
    75c4:	77 1f       	adc	r23, r23
    75c6:	88 1f       	adc	r24, r24
    75c8:	da f7       	brpl	.-10     	; 0x75c0 <__floatsisf+0x62>
    75ca:	88 0f       	add	r24, r24
    75cc:	96 95       	lsr	r25
    75ce:	87 95       	ror	r24
    75d0:	97 f9       	bld	r25, 7
    75d2:	08 95       	ret

000075d4 <floor>:
    75d4:	a9 d0       	rcall	.+338    	; 0x7728 <__fp_trunc>
    75d6:	80 f0       	brcs	.+32     	; 0x75f8 <floor+0x24>
    75d8:	9f 37       	cpi	r25, 0x7F	; 127
    75da:	40 f4       	brcc	.+16     	; 0x75ec <floor+0x18>
    75dc:	91 11       	cpse	r25, r1
    75de:	0e f0       	brts	.+2      	; 0x75e2 <floor+0xe>
    75e0:	bb c0       	rjmp	.+374    	; 0x7758 <__fp_szero>
    75e2:	60 e0       	ldi	r22, 0x00	; 0
    75e4:	70 e0       	ldi	r23, 0x00	; 0
    75e6:	80 e8       	ldi	r24, 0x80	; 128
    75e8:	9f eb       	ldi	r25, 0xBF	; 191
    75ea:	08 95       	ret
    75ec:	26 f4       	brtc	.+8      	; 0x75f6 <floor+0x22>
    75ee:	1b 16       	cp	r1, r27
    75f0:	61 1d       	adc	r22, r1
    75f2:	71 1d       	adc	r23, r1
    75f4:	81 1d       	adc	r24, r1
    75f6:	2b c0       	rjmp	.+86     	; 0x764e <__fp_mintl>
    75f8:	45 c0       	rjmp	.+138    	; 0x7684 <__fp_mpack>

000075fa <__fp_cmp>:
    75fa:	99 0f       	add	r25, r25
    75fc:	00 08       	sbc	r0, r0
    75fe:	55 0f       	add	r21, r21
    7600:	aa 0b       	sbc	r26, r26
    7602:	e0 e8       	ldi	r30, 0x80	; 128
    7604:	fe ef       	ldi	r31, 0xFE	; 254
    7606:	16 16       	cp	r1, r22
    7608:	17 06       	cpc	r1, r23
    760a:	e8 07       	cpc	r30, r24
    760c:	f9 07       	cpc	r31, r25
    760e:	c0 f0       	brcs	.+48     	; 0x7640 <__fp_cmp+0x46>
    7610:	12 16       	cp	r1, r18
    7612:	13 06       	cpc	r1, r19
    7614:	e4 07       	cpc	r30, r20
    7616:	f5 07       	cpc	r31, r21
    7618:	98 f0       	brcs	.+38     	; 0x7640 <__fp_cmp+0x46>
    761a:	62 1b       	sub	r22, r18
    761c:	73 0b       	sbc	r23, r19
    761e:	84 0b       	sbc	r24, r20
    7620:	95 0b       	sbc	r25, r21
    7622:	39 f4       	brne	.+14     	; 0x7632 <__fp_cmp+0x38>
    7624:	0a 26       	eor	r0, r26
    7626:	61 f0       	breq	.+24     	; 0x7640 <__fp_cmp+0x46>
    7628:	23 2b       	or	r18, r19
    762a:	24 2b       	or	r18, r20
    762c:	25 2b       	or	r18, r21
    762e:	21 f4       	brne	.+8      	; 0x7638 <__fp_cmp+0x3e>
    7630:	08 95       	ret
    7632:	0a 26       	eor	r0, r26
    7634:	09 f4       	brne	.+2      	; 0x7638 <__fp_cmp+0x3e>
    7636:	a1 40       	sbci	r26, 0x01	; 1
    7638:	a6 95       	lsr	r26
    763a:	8f ef       	ldi	r24, 0xFF	; 255
    763c:	81 1d       	adc	r24, r1
    763e:	81 1d       	adc	r24, r1
    7640:	08 95       	ret

00007642 <__fp_inf>:
    7642:	97 f9       	bld	r25, 7
    7644:	9f 67       	ori	r25, 0x7F	; 127
    7646:	80 e8       	ldi	r24, 0x80	; 128
    7648:	70 e0       	ldi	r23, 0x00	; 0
    764a:	60 e0       	ldi	r22, 0x00	; 0
    764c:	08 95       	ret

0000764e <__fp_mintl>:
    764e:	88 23       	and	r24, r24
    7650:	71 f4       	brne	.+28     	; 0x766e <__fp_mintl+0x20>
    7652:	77 23       	and	r23, r23
    7654:	21 f0       	breq	.+8      	; 0x765e <__fp_mintl+0x10>
    7656:	98 50       	subi	r25, 0x08	; 8
    7658:	87 2b       	or	r24, r23
    765a:	76 2f       	mov	r23, r22
    765c:	07 c0       	rjmp	.+14     	; 0x766c <__fp_mintl+0x1e>
    765e:	66 23       	and	r22, r22
    7660:	11 f4       	brne	.+4      	; 0x7666 <__fp_mintl+0x18>
    7662:	99 27       	eor	r25, r25
    7664:	0d c0       	rjmp	.+26     	; 0x7680 <__fp_mintl+0x32>
    7666:	90 51       	subi	r25, 0x10	; 16
    7668:	86 2b       	or	r24, r22
    766a:	70 e0       	ldi	r23, 0x00	; 0
    766c:	60 e0       	ldi	r22, 0x00	; 0
    766e:	2a f0       	brmi	.+10     	; 0x767a <__fp_mintl+0x2c>
    7670:	9a 95       	dec	r25
    7672:	66 0f       	add	r22, r22
    7674:	77 1f       	adc	r23, r23
    7676:	88 1f       	adc	r24, r24
    7678:	da f7       	brpl	.-10     	; 0x7670 <__fp_mintl+0x22>
    767a:	88 0f       	add	r24, r24
    767c:	96 95       	lsr	r25
    767e:	87 95       	ror	r24
    7680:	97 f9       	bld	r25, 7
    7682:	08 95       	ret

00007684 <__fp_mpack>:
    7684:	9f 3f       	cpi	r25, 0xFF	; 255
    7686:	31 f0       	breq	.+12     	; 0x7694 <__fp_mpack_finite+0xc>

00007688 <__fp_mpack_finite>:
    7688:	91 50       	subi	r25, 0x01	; 1
    768a:	20 f4       	brcc	.+8      	; 0x7694 <__fp_mpack_finite+0xc>
    768c:	87 95       	ror	r24
    768e:	77 95       	ror	r23
    7690:	67 95       	ror	r22
    7692:	b7 95       	ror	r27
    7694:	88 0f       	add	r24, r24
    7696:	91 1d       	adc	r25, r1
    7698:	96 95       	lsr	r25
    769a:	87 95       	ror	r24
    769c:	97 f9       	bld	r25, 7
    769e:	08 95       	ret

000076a0 <__fp_nan>:
    76a0:	9f ef       	ldi	r25, 0xFF	; 255
    76a2:	80 ec       	ldi	r24, 0xC0	; 192
    76a4:	08 95       	ret

000076a6 <__fp_pscA>:
    76a6:	00 24       	eor	r0, r0
    76a8:	0a 94       	dec	r0
    76aa:	16 16       	cp	r1, r22
    76ac:	17 06       	cpc	r1, r23
    76ae:	18 06       	cpc	r1, r24
    76b0:	09 06       	cpc	r0, r25
    76b2:	08 95       	ret

000076b4 <__fp_pscB>:
    76b4:	00 24       	eor	r0, r0
    76b6:	0a 94       	dec	r0
    76b8:	12 16       	cp	r1, r18
    76ba:	13 06       	cpc	r1, r19
    76bc:	14 06       	cpc	r1, r20
    76be:	05 06       	cpc	r0, r21
    76c0:	08 95       	ret

000076c2 <__fp_round>:
    76c2:	09 2e       	mov	r0, r25
    76c4:	03 94       	inc	r0
    76c6:	00 0c       	add	r0, r0
    76c8:	11 f4       	brne	.+4      	; 0x76ce <__fp_round+0xc>
    76ca:	88 23       	and	r24, r24
    76cc:	52 f0       	brmi	.+20     	; 0x76e2 <__fp_round+0x20>
    76ce:	bb 0f       	add	r27, r27
    76d0:	40 f4       	brcc	.+16     	; 0x76e2 <__fp_round+0x20>
    76d2:	bf 2b       	or	r27, r31
    76d4:	11 f4       	brne	.+4      	; 0x76da <__fp_round+0x18>
    76d6:	60 ff       	sbrs	r22, 0
    76d8:	04 c0       	rjmp	.+8      	; 0x76e2 <__fp_round+0x20>
    76da:	6f 5f       	subi	r22, 0xFF	; 255
    76dc:	7f 4f       	sbci	r23, 0xFF	; 255
    76de:	8f 4f       	sbci	r24, 0xFF	; 255
    76e0:	9f 4f       	sbci	r25, 0xFF	; 255
    76e2:	08 95       	ret

000076e4 <__fp_split3>:
    76e4:	57 fd       	sbrc	r21, 7
    76e6:	90 58       	subi	r25, 0x80	; 128
    76e8:	44 0f       	add	r20, r20
    76ea:	55 1f       	adc	r21, r21
    76ec:	59 f0       	breq	.+22     	; 0x7704 <__fp_splitA+0x10>
    76ee:	5f 3f       	cpi	r21, 0xFF	; 255
    76f0:	71 f0       	breq	.+28     	; 0x770e <__fp_splitA+0x1a>
    76f2:	47 95       	ror	r20

000076f4 <__fp_splitA>:
    76f4:	88 0f       	add	r24, r24
    76f6:	97 fb       	bst	r25, 7
    76f8:	99 1f       	adc	r25, r25
    76fa:	61 f0       	breq	.+24     	; 0x7714 <__fp_splitA+0x20>
    76fc:	9f 3f       	cpi	r25, 0xFF	; 255
    76fe:	79 f0       	breq	.+30     	; 0x771e <__fp_splitA+0x2a>
    7700:	87 95       	ror	r24
    7702:	08 95       	ret
    7704:	12 16       	cp	r1, r18
    7706:	13 06       	cpc	r1, r19
    7708:	14 06       	cpc	r1, r20
    770a:	55 1f       	adc	r21, r21
    770c:	f2 cf       	rjmp	.-28     	; 0x76f2 <__fp_split3+0xe>
    770e:	46 95       	lsr	r20
    7710:	f1 df       	rcall	.-30     	; 0x76f4 <__fp_splitA>
    7712:	08 c0       	rjmp	.+16     	; 0x7724 <__fp_splitA+0x30>
    7714:	16 16       	cp	r1, r22
    7716:	17 06       	cpc	r1, r23
    7718:	18 06       	cpc	r1, r24
    771a:	99 1f       	adc	r25, r25
    771c:	f1 cf       	rjmp	.-30     	; 0x7700 <__fp_splitA+0xc>
    771e:	86 95       	lsr	r24
    7720:	71 05       	cpc	r23, r1
    7722:	61 05       	cpc	r22, r1
    7724:	08 94       	sec
    7726:	08 95       	ret

00007728 <__fp_trunc>:
    7728:	e5 df       	rcall	.-54     	; 0x76f4 <__fp_splitA>
    772a:	a0 f0       	brcs	.+40     	; 0x7754 <__fp_trunc+0x2c>
    772c:	be e7       	ldi	r27, 0x7E	; 126
    772e:	b9 17       	cp	r27, r25
    7730:	88 f4       	brcc	.+34     	; 0x7754 <__fp_trunc+0x2c>
    7732:	bb 27       	eor	r27, r27
    7734:	9f 38       	cpi	r25, 0x8F	; 143
    7736:	60 f4       	brcc	.+24     	; 0x7750 <__fp_trunc+0x28>
    7738:	16 16       	cp	r1, r22
    773a:	b1 1d       	adc	r27, r1
    773c:	67 2f       	mov	r22, r23
    773e:	78 2f       	mov	r23, r24
    7740:	88 27       	eor	r24, r24
    7742:	98 5f       	subi	r25, 0xF8	; 248
    7744:	f7 cf       	rjmp	.-18     	; 0x7734 <__fp_trunc+0xc>
    7746:	86 95       	lsr	r24
    7748:	77 95       	ror	r23
    774a:	67 95       	ror	r22
    774c:	b1 1d       	adc	r27, r1
    774e:	93 95       	inc	r25
    7750:	96 39       	cpi	r25, 0x96	; 150
    7752:	c8 f3       	brcs	.-14     	; 0x7746 <__fp_trunc+0x1e>
    7754:	08 95       	ret

00007756 <__fp_zero>:
    7756:	e8 94       	clt

00007758 <__fp_szero>:
    7758:	bb 27       	eor	r27, r27
    775a:	66 27       	eor	r22, r22
    775c:	77 27       	eor	r23, r23
    775e:	cb 01       	movw	r24, r22
    7760:	97 f9       	bld	r25, 7
    7762:	08 95       	ret

00007764 <__gesf2>:
    7764:	4a df       	rcall	.-364    	; 0x75fa <__fp_cmp>
    7766:	08 f4       	brcc	.+2      	; 0x776a <__gesf2+0x6>
    7768:	8f ef       	ldi	r24, 0xFF	; 255
    776a:	08 95       	ret

0000776c <__mulsf3>:
    776c:	0b d0       	rcall	.+22     	; 0x7784 <__mulsf3x>
    776e:	a9 cf       	rjmp	.-174    	; 0x76c2 <__fp_round>
    7770:	9a df       	rcall	.-204    	; 0x76a6 <__fp_pscA>
    7772:	28 f0       	brcs	.+10     	; 0x777e <__mulsf3+0x12>
    7774:	9f df       	rcall	.-194    	; 0x76b4 <__fp_pscB>
    7776:	18 f0       	brcs	.+6      	; 0x777e <__mulsf3+0x12>
    7778:	95 23       	and	r25, r21
    777a:	09 f0       	breq	.+2      	; 0x777e <__mulsf3+0x12>
    777c:	62 cf       	rjmp	.-316    	; 0x7642 <__fp_inf>
    777e:	90 cf       	rjmp	.-224    	; 0x76a0 <__fp_nan>
    7780:	11 24       	eor	r1, r1
    7782:	ea cf       	rjmp	.-44     	; 0x7758 <__fp_szero>

00007784 <__mulsf3x>:
    7784:	af df       	rcall	.-162    	; 0x76e4 <__fp_split3>
    7786:	a0 f3       	brcs	.-24     	; 0x7770 <__mulsf3+0x4>

00007788 <__mulsf3_pse>:
    7788:	95 9f       	mul	r25, r21
    778a:	d1 f3       	breq	.-12     	; 0x7780 <__mulsf3+0x14>
    778c:	95 0f       	add	r25, r21
    778e:	50 e0       	ldi	r21, 0x00	; 0
    7790:	55 1f       	adc	r21, r21
    7792:	62 9f       	mul	r22, r18
    7794:	f0 01       	movw	r30, r0
    7796:	72 9f       	mul	r23, r18
    7798:	bb 27       	eor	r27, r27
    779a:	f0 0d       	add	r31, r0
    779c:	b1 1d       	adc	r27, r1
    779e:	63 9f       	mul	r22, r19
    77a0:	aa 27       	eor	r26, r26
    77a2:	f0 0d       	add	r31, r0
    77a4:	b1 1d       	adc	r27, r1
    77a6:	aa 1f       	adc	r26, r26
    77a8:	64 9f       	mul	r22, r20
    77aa:	66 27       	eor	r22, r22
    77ac:	b0 0d       	add	r27, r0
    77ae:	a1 1d       	adc	r26, r1
    77b0:	66 1f       	adc	r22, r22
    77b2:	82 9f       	mul	r24, r18
    77b4:	22 27       	eor	r18, r18
    77b6:	b0 0d       	add	r27, r0
    77b8:	a1 1d       	adc	r26, r1
    77ba:	62 1f       	adc	r22, r18
    77bc:	73 9f       	mul	r23, r19
    77be:	b0 0d       	add	r27, r0
    77c0:	a1 1d       	adc	r26, r1
    77c2:	62 1f       	adc	r22, r18
    77c4:	83 9f       	mul	r24, r19
    77c6:	a0 0d       	add	r26, r0
    77c8:	61 1d       	adc	r22, r1
    77ca:	22 1f       	adc	r18, r18
    77cc:	74 9f       	mul	r23, r20
    77ce:	33 27       	eor	r19, r19
    77d0:	a0 0d       	add	r26, r0
    77d2:	61 1d       	adc	r22, r1
    77d4:	23 1f       	adc	r18, r19
    77d6:	84 9f       	mul	r24, r20
    77d8:	60 0d       	add	r22, r0
    77da:	21 1d       	adc	r18, r1
    77dc:	82 2f       	mov	r24, r18
    77de:	76 2f       	mov	r23, r22
    77e0:	6a 2f       	mov	r22, r26
    77e2:	11 24       	eor	r1, r1
    77e4:	9f 57       	subi	r25, 0x7F	; 127
    77e6:	50 40       	sbci	r21, 0x00	; 0
    77e8:	8a f0       	brmi	.+34     	; 0x780c <__mulsf3_pse+0x84>
    77ea:	e1 f0       	breq	.+56     	; 0x7824 <__mulsf3_pse+0x9c>
    77ec:	88 23       	and	r24, r24
    77ee:	4a f0       	brmi	.+18     	; 0x7802 <__mulsf3_pse+0x7a>
    77f0:	ee 0f       	add	r30, r30
    77f2:	ff 1f       	adc	r31, r31
    77f4:	bb 1f       	adc	r27, r27
    77f6:	66 1f       	adc	r22, r22
    77f8:	77 1f       	adc	r23, r23
    77fa:	88 1f       	adc	r24, r24
    77fc:	91 50       	subi	r25, 0x01	; 1
    77fe:	50 40       	sbci	r21, 0x00	; 0
    7800:	a9 f7       	brne	.-22     	; 0x77ec <__mulsf3_pse+0x64>
    7802:	9e 3f       	cpi	r25, 0xFE	; 254
    7804:	51 05       	cpc	r21, r1
    7806:	70 f0       	brcs	.+28     	; 0x7824 <__mulsf3_pse+0x9c>
    7808:	1c cf       	rjmp	.-456    	; 0x7642 <__fp_inf>
    780a:	a6 cf       	rjmp	.-180    	; 0x7758 <__fp_szero>
    780c:	5f 3f       	cpi	r21, 0xFF	; 255
    780e:	ec f3       	brlt	.-6      	; 0x780a <__mulsf3_pse+0x82>
    7810:	98 3e       	cpi	r25, 0xE8	; 232
    7812:	dc f3       	brlt	.-10     	; 0x780a <__mulsf3_pse+0x82>
    7814:	86 95       	lsr	r24
    7816:	77 95       	ror	r23
    7818:	67 95       	ror	r22
    781a:	b7 95       	ror	r27
    781c:	f7 95       	ror	r31
    781e:	e7 95       	ror	r30
    7820:	9f 5f       	subi	r25, 0xFF	; 255
    7822:	c1 f7       	brne	.-16     	; 0x7814 <__mulsf3_pse+0x8c>
    7824:	fe 2b       	or	r31, r30
    7826:	88 0f       	add	r24, r24
    7828:	91 1d       	adc	r25, r1
    782a:	96 95       	lsr	r25
    782c:	87 95       	ror	r24
    782e:	97 f9       	bld	r25, 7
    7830:	08 95       	ret

00007832 <pow>:
    7832:	fa 01       	movw	r30, r20
    7834:	ee 0f       	add	r30, r30
    7836:	ff 1f       	adc	r31, r31
    7838:	30 96       	adiw	r30, 0x00	; 0
    783a:	21 05       	cpc	r18, r1
    783c:	31 05       	cpc	r19, r1
    783e:	99 f1       	breq	.+102    	; 0x78a6 <pow+0x74>
    7840:	61 15       	cp	r22, r1
    7842:	71 05       	cpc	r23, r1
    7844:	61 f4       	brne	.+24     	; 0x785e <pow+0x2c>
    7846:	80 38       	cpi	r24, 0x80	; 128
    7848:	bf e3       	ldi	r27, 0x3F	; 63
    784a:	9b 07       	cpc	r25, r27
    784c:	49 f1       	breq	.+82     	; 0x78a0 <pow+0x6e>
    784e:	68 94       	set
    7850:	90 38       	cpi	r25, 0x80	; 128
    7852:	81 05       	cpc	r24, r1
    7854:	61 f0       	breq	.+24     	; 0x786e <pow+0x3c>
    7856:	80 38       	cpi	r24, 0x80	; 128
    7858:	bf ef       	ldi	r27, 0xFF	; 255
    785a:	9b 07       	cpc	r25, r27
    785c:	41 f0       	breq	.+16     	; 0x786e <pow+0x3c>
    785e:	99 23       	and	r25, r25
    7860:	42 f5       	brpl	.+80     	; 0x78b2 <pow+0x80>
    7862:	ff 3f       	cpi	r31, 0xFF	; 255
    7864:	e1 05       	cpc	r30, r1
    7866:	31 05       	cpc	r19, r1
    7868:	21 05       	cpc	r18, r1
    786a:	11 f1       	breq	.+68     	; 0x78b0 <pow+0x7e>
    786c:	e8 94       	clt
    786e:	08 94       	sec
    7870:	e7 95       	ror	r30
    7872:	d9 01       	movw	r26, r18
    7874:	aa 23       	and	r26, r26
    7876:	29 f4       	brne	.+10     	; 0x7882 <pow+0x50>
    7878:	ab 2f       	mov	r26, r27
    787a:	be 2f       	mov	r27, r30
    787c:	f8 5f       	subi	r31, 0xF8	; 248
    787e:	d0 f3       	brcs	.-12     	; 0x7874 <pow+0x42>
    7880:	10 c0       	rjmp	.+32     	; 0x78a2 <pow+0x70>
    7882:	ff 5f       	subi	r31, 0xFF	; 255
    7884:	70 f4       	brcc	.+28     	; 0x78a2 <pow+0x70>
    7886:	a6 95       	lsr	r26
    7888:	e0 f7       	brcc	.-8      	; 0x7882 <pow+0x50>
    788a:	f7 39       	cpi	r31, 0x97	; 151
    788c:	50 f0       	brcs	.+20     	; 0x78a2 <pow+0x70>
    788e:	19 f0       	breq	.+6      	; 0x7896 <pow+0x64>
    7890:	ff 3a       	cpi	r31, 0xAF	; 175
    7892:	38 f4       	brcc	.+14     	; 0x78a2 <pow+0x70>
    7894:	9f 77       	andi	r25, 0x7F	; 127
    7896:	9f 93       	push	r25
    7898:	0c d0       	rcall	.+24     	; 0x78b2 <pow+0x80>
    789a:	0f 90       	pop	r0
    789c:	07 fc       	sbrc	r0, 7
    789e:	90 58       	subi	r25, 0x80	; 128
    78a0:	08 95       	ret
    78a2:	3e f0       	brts	.+14     	; 0x78b2 <pow+0x80>
    78a4:	fd ce       	rjmp	.-518    	; 0x76a0 <__fp_nan>
    78a6:	60 e0       	ldi	r22, 0x00	; 0
    78a8:	70 e0       	ldi	r23, 0x00	; 0
    78aa:	80 e8       	ldi	r24, 0x80	; 128
    78ac:	9f e3       	ldi	r25, 0x3F	; 63
    78ae:	08 95       	ret
    78b0:	4f e7       	ldi	r20, 0x7F	; 127
    78b2:	9f 77       	andi	r25, 0x7F	; 127
    78b4:	5f 93       	push	r21
    78b6:	4f 93       	push	r20
    78b8:	3f 93       	push	r19
    78ba:	2f 93       	push	r18
    78bc:	9e d0       	rcall	.+316    	; 0x79fa <log>
    78be:	2f 91       	pop	r18
    78c0:	3f 91       	pop	r19
    78c2:	4f 91       	pop	r20
    78c4:	5f 91       	pop	r21
    78c6:	52 df       	rcall	.-348    	; 0x776c <__mulsf3>
    78c8:	05 c0       	rjmp	.+10     	; 0x78d4 <exp>
    78ca:	19 f4       	brne	.+6      	; 0x78d2 <pow+0xa0>
    78cc:	0e f0       	brts	.+2      	; 0x78d0 <pow+0x9e>
    78ce:	b9 ce       	rjmp	.-654    	; 0x7642 <__fp_inf>
    78d0:	42 cf       	rjmp	.-380    	; 0x7756 <__fp_zero>
    78d2:	e6 ce       	rjmp	.-564    	; 0x76a0 <__fp_nan>

000078d4 <exp>:
    78d4:	0f df       	rcall	.-482    	; 0x76f4 <__fp_splitA>
    78d6:	c8 f3       	brcs	.-14     	; 0x78ca <pow+0x98>
    78d8:	96 38       	cpi	r25, 0x86	; 134
    78da:	c0 f7       	brcc	.-16     	; 0x78cc <pow+0x9a>
    78dc:	07 f8       	bld	r0, 7
    78de:	0f 92       	push	r0
    78e0:	e8 94       	clt
    78e2:	2b e3       	ldi	r18, 0x3B	; 59
    78e4:	3a ea       	ldi	r19, 0xAA	; 170
    78e6:	48 eb       	ldi	r20, 0xB8	; 184
    78e8:	5f e7       	ldi	r21, 0x7F	; 127
    78ea:	4e df       	rcall	.-356    	; 0x7788 <__mulsf3_pse>
    78ec:	0f 92       	push	r0
    78ee:	0f 92       	push	r0
    78f0:	0f 92       	push	r0
    78f2:	4d b7       	in	r20, 0x3d	; 61
    78f4:	5e b7       	in	r21, 0x3e	; 62
    78f6:	0f 92       	push	r0
    78f8:	c0 d0       	rcall	.+384    	; 0x7a7a <modf>
    78fa:	ec e8       	ldi	r30, 0x8C	; 140
    78fc:	f0 e0       	ldi	r31, 0x00	; 0
    78fe:	16 d0       	rcall	.+44     	; 0x792c <__fp_powser>
    7900:	4f 91       	pop	r20
    7902:	5f 91       	pop	r21
    7904:	ef 91       	pop	r30
    7906:	ff 91       	pop	r31
    7908:	e5 95       	asr	r30
    790a:	ee 1f       	adc	r30, r30
    790c:	ff 1f       	adc	r31, r31
    790e:	49 f0       	breq	.+18     	; 0x7922 <exp+0x4e>
    7910:	fe 57       	subi	r31, 0x7E	; 126
    7912:	e0 68       	ori	r30, 0x80	; 128
    7914:	44 27       	eor	r20, r20
    7916:	ee 0f       	add	r30, r30
    7918:	44 1f       	adc	r20, r20
    791a:	fa 95       	dec	r31
    791c:	e1 f7       	brne	.-8      	; 0x7916 <exp+0x42>
    791e:	41 95       	neg	r20
    7920:	55 0b       	sbc	r21, r21
    7922:	32 d0       	rcall	.+100    	; 0x7988 <ldexp>
    7924:	0f 90       	pop	r0
    7926:	07 fe       	sbrs	r0, 7
    7928:	26 c0       	rjmp	.+76     	; 0x7976 <inverse>
    792a:	08 95       	ret

0000792c <__fp_powser>:
    792c:	df 93       	push	r29
    792e:	cf 93       	push	r28
    7930:	1f 93       	push	r17
    7932:	0f 93       	push	r16
    7934:	ff 92       	push	r15
    7936:	ef 92       	push	r14
    7938:	df 92       	push	r13
    793a:	7b 01       	movw	r14, r22
    793c:	8c 01       	movw	r16, r24
    793e:	68 94       	set
    7940:	05 c0       	rjmp	.+10     	; 0x794c <__fp_powser+0x20>
    7942:	da 2e       	mov	r13, r26
    7944:	ef 01       	movw	r28, r30
    7946:	1e df       	rcall	.-452    	; 0x7784 <__mulsf3x>
    7948:	fe 01       	movw	r30, r28
    794a:	e8 94       	clt
    794c:	a5 91       	lpm	r26, Z+
    794e:	25 91       	lpm	r18, Z+
    7950:	35 91       	lpm	r19, Z+
    7952:	45 91       	lpm	r20, Z+
    7954:	55 91       	lpm	r21, Z+
    7956:	ae f3       	brts	.-22     	; 0x7942 <__fp_powser+0x16>
    7958:	ef 01       	movw	r28, r30
    795a:	0f dd       	rcall	.-1506   	; 0x737a <__addsf3x>
    795c:	fe 01       	movw	r30, r28
    795e:	97 01       	movw	r18, r14
    7960:	a8 01       	movw	r20, r16
    7962:	da 94       	dec	r13
    7964:	79 f7       	brne	.-34     	; 0x7944 <__fp_powser+0x18>
    7966:	df 90       	pop	r13
    7968:	ef 90       	pop	r14
    796a:	ff 90       	pop	r15
    796c:	0f 91       	pop	r16
    796e:	1f 91       	pop	r17
    7970:	cf 91       	pop	r28
    7972:	df 91       	pop	r29
    7974:	08 95       	ret

00007976 <inverse>:
    7976:	9b 01       	movw	r18, r22
    7978:	ac 01       	movw	r20, r24
    797a:	60 e0       	ldi	r22, 0x00	; 0
    797c:	70 e0       	ldi	r23, 0x00	; 0
    797e:	80 e8       	ldi	r24, 0x80	; 128
    7980:	9f e3       	ldi	r25, 0x3F	; 63
    7982:	52 cd       	rjmp	.-1372   	; 0x7428 <__divsf3>
    7984:	5e ce       	rjmp	.-836    	; 0x7642 <__fp_inf>
    7986:	7e ce       	rjmp	.-772    	; 0x7684 <__fp_mpack>

00007988 <ldexp>:
    7988:	b5 de       	rcall	.-662    	; 0x76f4 <__fp_splitA>
    798a:	e8 f3       	brcs	.-6      	; 0x7986 <inverse+0x10>
    798c:	99 23       	and	r25, r25
    798e:	d9 f3       	breq	.-10     	; 0x7986 <inverse+0x10>
    7990:	94 0f       	add	r25, r20
    7992:	51 1d       	adc	r21, r1
    7994:	bb f3       	brvs	.-18     	; 0x7984 <inverse+0xe>
    7996:	91 50       	subi	r25, 0x01	; 1
    7998:	50 40       	sbci	r21, 0x00	; 0
    799a:	94 f0       	brlt	.+36     	; 0x79c0 <ldexp+0x38>
    799c:	59 f0       	breq	.+22     	; 0x79b4 <ldexp+0x2c>
    799e:	88 23       	and	r24, r24
    79a0:	32 f0       	brmi	.+12     	; 0x79ae <ldexp+0x26>
    79a2:	66 0f       	add	r22, r22
    79a4:	77 1f       	adc	r23, r23
    79a6:	88 1f       	adc	r24, r24
    79a8:	91 50       	subi	r25, 0x01	; 1
    79aa:	50 40       	sbci	r21, 0x00	; 0
    79ac:	c1 f7       	brne	.-16     	; 0x799e <ldexp+0x16>
    79ae:	9e 3f       	cpi	r25, 0xFE	; 254
    79b0:	51 05       	cpc	r21, r1
    79b2:	44 f7       	brge	.-48     	; 0x7984 <inverse+0xe>
    79b4:	88 0f       	add	r24, r24
    79b6:	91 1d       	adc	r25, r1
    79b8:	96 95       	lsr	r25
    79ba:	87 95       	ror	r24
    79bc:	97 f9       	bld	r25, 7
    79be:	08 95       	ret
    79c0:	5f 3f       	cpi	r21, 0xFF	; 255
    79c2:	ac f0       	brlt	.+42     	; 0x79ee <ldexp+0x66>
    79c4:	98 3e       	cpi	r25, 0xE8	; 232
    79c6:	9c f0       	brlt	.+38     	; 0x79ee <ldexp+0x66>
    79c8:	bb 27       	eor	r27, r27
    79ca:	86 95       	lsr	r24
    79cc:	77 95       	ror	r23
    79ce:	67 95       	ror	r22
    79d0:	b7 95       	ror	r27
    79d2:	08 f4       	brcc	.+2      	; 0x79d6 <ldexp+0x4e>
    79d4:	b1 60       	ori	r27, 0x01	; 1
    79d6:	93 95       	inc	r25
    79d8:	c1 f7       	brne	.-16     	; 0x79ca <ldexp+0x42>
    79da:	bb 0f       	add	r27, r27
    79dc:	58 f7       	brcc	.-42     	; 0x79b4 <ldexp+0x2c>
    79de:	11 f4       	brne	.+4      	; 0x79e4 <ldexp+0x5c>
    79e0:	60 ff       	sbrs	r22, 0
    79e2:	e8 cf       	rjmp	.-48     	; 0x79b4 <ldexp+0x2c>
    79e4:	6f 5f       	subi	r22, 0xFF	; 255
    79e6:	7f 4f       	sbci	r23, 0xFF	; 255
    79e8:	8f 4f       	sbci	r24, 0xFF	; 255
    79ea:	9f 4f       	sbci	r25, 0xFF	; 255
    79ec:	e3 cf       	rjmp	.-58     	; 0x79b4 <ldexp+0x2c>
    79ee:	b4 ce       	rjmp	.-664    	; 0x7758 <__fp_szero>
    79f0:	0e f0       	brts	.+2      	; 0x79f4 <ldexp+0x6c>
    79f2:	48 ce       	rjmp	.-880    	; 0x7684 <__fp_mpack>
    79f4:	55 ce       	rjmp	.-854    	; 0x76a0 <__fp_nan>
    79f6:	68 94       	set
    79f8:	24 ce       	rjmp	.-952    	; 0x7642 <__fp_inf>

000079fa <log>:
    79fa:	7c de       	rcall	.-776    	; 0x76f4 <__fp_splitA>
    79fc:	c8 f3       	brcs	.-14     	; 0x79f0 <ldexp+0x68>
    79fe:	99 23       	and	r25, r25
    7a00:	d1 f3       	breq	.-12     	; 0x79f6 <ldexp+0x6e>
    7a02:	c6 f3       	brts	.-16     	; 0x79f4 <ldexp+0x6c>
    7a04:	df 93       	push	r29
    7a06:	cf 93       	push	r28
    7a08:	1f 93       	push	r17
    7a0a:	0f 93       	push	r16
    7a0c:	ff 92       	push	r15
    7a0e:	c9 2f       	mov	r28, r25
    7a10:	dd 27       	eor	r29, r29
    7a12:	88 23       	and	r24, r24
    7a14:	2a f0       	brmi	.+10     	; 0x7a20 <log+0x26>
    7a16:	21 97       	sbiw	r28, 0x01	; 1
    7a18:	66 0f       	add	r22, r22
    7a1a:	77 1f       	adc	r23, r23
    7a1c:	88 1f       	adc	r24, r24
    7a1e:	da f7       	brpl	.-10     	; 0x7a16 <log+0x1c>
    7a20:	20 e0       	ldi	r18, 0x00	; 0
    7a22:	30 e0       	ldi	r19, 0x00	; 0
    7a24:	40 e8       	ldi	r20, 0x80	; 128
    7a26:	5f eb       	ldi	r21, 0xBF	; 191
    7a28:	9f e3       	ldi	r25, 0x3F	; 63
    7a2a:	88 39       	cpi	r24, 0x98	; 152
    7a2c:	20 f0       	brcs	.+8      	; 0x7a36 <log+0x3c>
    7a2e:	80 3e       	cpi	r24, 0xE0	; 224
    7a30:	30 f0       	brcs	.+12     	; 0x7a3e <log+0x44>
    7a32:	21 96       	adiw	r28, 0x01	; 1
    7a34:	8f 77       	andi	r24, 0x7F	; 127
    7a36:	90 dc       	rcall	.-1760   	; 0x7358 <__addsf3>
    7a38:	e4 eb       	ldi	r30, 0xB4	; 180
    7a3a:	f0 e0       	ldi	r31, 0x00	; 0
    7a3c:	03 c0       	rjmp	.+6      	; 0x7a44 <log+0x4a>
    7a3e:	8c dc       	rcall	.-1768   	; 0x7358 <__addsf3>
    7a40:	e1 ee       	ldi	r30, 0xE1	; 225
    7a42:	f0 e0       	ldi	r31, 0x00	; 0
    7a44:	73 df       	rcall	.-282    	; 0x792c <__fp_powser>
    7a46:	8b 01       	movw	r16, r22
    7a48:	be 01       	movw	r22, r28
    7a4a:	ec 01       	movw	r28, r24
    7a4c:	fb 2e       	mov	r15, r27
    7a4e:	6f 57       	subi	r22, 0x7F	; 127
    7a50:	71 09       	sbc	r23, r1
    7a52:	75 95       	asr	r23
    7a54:	77 1f       	adc	r23, r23
    7a56:	88 0b       	sbc	r24, r24
    7a58:	99 0b       	sbc	r25, r25
    7a5a:	81 dd       	rcall	.-1278   	; 0x755e <__floatsisf>
    7a5c:	28 e1       	ldi	r18, 0x18	; 24
    7a5e:	32 e7       	ldi	r19, 0x72	; 114
    7a60:	41 e3       	ldi	r20, 0x31	; 49
    7a62:	5f e3       	ldi	r21, 0x3F	; 63
    7a64:	8f de       	rcall	.-738    	; 0x7784 <__mulsf3x>
    7a66:	af 2d       	mov	r26, r15
    7a68:	98 01       	movw	r18, r16
    7a6a:	ae 01       	movw	r20, r28
    7a6c:	ff 90       	pop	r15
    7a6e:	0f 91       	pop	r16
    7a70:	1f 91       	pop	r17
    7a72:	cf 91       	pop	r28
    7a74:	df 91       	pop	r29
    7a76:	81 dc       	rcall	.-1790   	; 0x737a <__addsf3x>
    7a78:	24 ce       	rjmp	.-952    	; 0x76c2 <__fp_round>

00007a7a <modf>:
    7a7a:	fa 01       	movw	r30, r20
    7a7c:	dc 01       	movw	r26, r24
    7a7e:	aa 0f       	add	r26, r26
    7a80:	bb 1f       	adc	r27, r27
    7a82:	9b 01       	movw	r18, r22
    7a84:	ac 01       	movw	r20, r24
    7a86:	bf 57       	subi	r27, 0x7F	; 127
    7a88:	28 f4       	brcc	.+10     	; 0x7a94 <modf+0x1a>
    7a8a:	22 27       	eor	r18, r18
    7a8c:	33 27       	eor	r19, r19
    7a8e:	44 27       	eor	r20, r20
    7a90:	50 78       	andi	r21, 0x80	; 128
    7a92:	1f c0       	rjmp	.+62     	; 0x7ad2 <modf+0x58>
    7a94:	b7 51       	subi	r27, 0x17	; 23
    7a96:	88 f4       	brcc	.+34     	; 0x7aba <modf+0x40>
    7a98:	ab 2f       	mov	r26, r27
    7a9a:	00 24       	eor	r0, r0
    7a9c:	46 95       	lsr	r20
    7a9e:	37 95       	ror	r19
    7aa0:	27 95       	ror	r18
    7aa2:	01 1c       	adc	r0, r1
    7aa4:	a3 95       	inc	r26
    7aa6:	d2 f3       	brmi	.-12     	; 0x7a9c <modf+0x22>
    7aa8:	00 20       	and	r0, r0
    7aaa:	69 f0       	breq	.+26     	; 0x7ac6 <modf+0x4c>
    7aac:	22 0f       	add	r18, r18
    7aae:	33 1f       	adc	r19, r19
    7ab0:	44 1f       	adc	r20, r20
    7ab2:	b3 95       	inc	r27
    7ab4:	da f3       	brmi	.-10     	; 0x7aac <modf+0x32>
    7ab6:	0d d0       	rcall	.+26     	; 0x7ad2 <modf+0x58>
    7ab8:	4e cc       	rjmp	.-1892   	; 0x7356 <__subsf3>
    7aba:	61 30       	cpi	r22, 0x01	; 1
    7abc:	71 05       	cpc	r23, r1
    7abe:	a0 e8       	ldi	r26, 0x80	; 128
    7ac0:	8a 07       	cpc	r24, r26
    7ac2:	b9 46       	sbci	r27, 0x69	; 105
    7ac4:	30 f4       	brcc	.+12     	; 0x7ad2 <modf+0x58>
    7ac6:	9b 01       	movw	r18, r22
    7ac8:	ac 01       	movw	r20, r24
    7aca:	66 27       	eor	r22, r22
    7acc:	77 27       	eor	r23, r23
    7ace:	88 27       	eor	r24, r24
    7ad0:	90 78       	andi	r25, 0x80	; 128
    7ad2:	30 96       	adiw	r30, 0x00	; 0
    7ad4:	21 f0       	breq	.+8      	; 0x7ade <modf+0x64>
    7ad6:	20 83       	st	Z, r18
    7ad8:	31 83       	std	Z+1, r19	; 0x01
    7ada:	42 83       	std	Z+2, r20	; 0x02
    7adc:	53 83       	std	Z+3, r21	; 0x03
    7ade:	08 95       	ret

00007ae0 <__mulsi3>:
    7ae0:	62 9f       	mul	r22, r18
    7ae2:	d0 01       	movw	r26, r0
    7ae4:	73 9f       	mul	r23, r19
    7ae6:	f0 01       	movw	r30, r0
    7ae8:	82 9f       	mul	r24, r18
    7aea:	e0 0d       	add	r30, r0
    7aec:	f1 1d       	adc	r31, r1
    7aee:	64 9f       	mul	r22, r20
    7af0:	e0 0d       	add	r30, r0
    7af2:	f1 1d       	adc	r31, r1
    7af4:	92 9f       	mul	r25, r18
    7af6:	f0 0d       	add	r31, r0
    7af8:	83 9f       	mul	r24, r19
    7afa:	f0 0d       	add	r31, r0
    7afc:	74 9f       	mul	r23, r20
    7afe:	f0 0d       	add	r31, r0
    7b00:	65 9f       	mul	r22, r21
    7b02:	f0 0d       	add	r31, r0
    7b04:	99 27       	eor	r25, r25
    7b06:	72 9f       	mul	r23, r18
    7b08:	b0 0d       	add	r27, r0
    7b0a:	e1 1d       	adc	r30, r1
    7b0c:	f9 1f       	adc	r31, r25
    7b0e:	63 9f       	mul	r22, r19
    7b10:	b0 0d       	add	r27, r0
    7b12:	e1 1d       	adc	r30, r1
    7b14:	f9 1f       	adc	r31, r25
    7b16:	bd 01       	movw	r22, r26
    7b18:	cf 01       	movw	r24, r30
    7b1a:	11 24       	eor	r1, r1
    7b1c:	08 95       	ret

00007b1e <_exit>:
    7b1e:	f8 94       	cli

00007b20 <__stop_program>:
    7b20:	ff cf       	rjmp	.-2      	; 0x7b20 <__stop_program>
