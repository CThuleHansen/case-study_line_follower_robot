
AURobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  0000e58a  0000e61e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e58a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  008002c0  008002c0  0000e7de  2**0
                  ALLOC
  3 .stab         00000e04  00000000  00000000  0000e7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ea8  00000000  00000000  0000f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001048c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c0  00000000  00000000  0001049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001a75  00000000  00000000  0001075d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a142  00000000  00000000  000121d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000023e8  00000000  00000000  0001c314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006819  00000000  00000000  0001e6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001770  00000000  00000000  00024f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000029be  00000000  00000000  00026688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 7c 69 	jmp	0xd2f8	; 0xd2f8 <__vector_20>
      54:	0c 94 cf 69 	jmp	0xd39e	; 0xd39e <__vector_21>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      6c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      70:	0c 94 f2 6a 	jmp	0xd5e4	; 0xd5e4 <__vector_28>
      74:	0c 94 45 6b 	jmp	0xd68a	; 0xd68a <__vector_29>
      78:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      7c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      80:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      84:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      88:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <BoolPort_static_shutdown+0x6>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__c.2859>:
     10e:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
     11e:	20 46 4c 41 53 48 0a 00                              FLASH..

00000126 <__c.2869>:
     126:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
     136:	65 72 72 6f 72 3a 20 00                             error: .

0000013e <__c.2867>:
     13e:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
     14e:	6f 72 3a 20 00                                      or: .

00000153 <__c.2865>:
     153:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
     163:	3a 20 00                                            : .

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e4       	ldi	r29, 0x40	; 64
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	12 e0       	ldi	r17, 0x02	; 2
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	ea e8       	ldi	r30, 0x8A	; 138
     17a:	f5 ee       	ldi	r31, 0xE5	; 229
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a0 3c       	cpi	r26, 0xC0	; 192
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	14 e0       	ldi	r17, 0x04	; 4
     18e:	a0 ec       	ldi	r26, 0xC0	; 192
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a0 30       	cpi	r26, 0x00	; 0
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
     1a0:	0c 94 6e 6e 	jmp	0xdcdc	; 0xdcdc <exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <InitADC>:
 *      Author: parallels
 */
#include "adcutil.h"

void InitADC()
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
    ADMUX = (1 << REFS0); // For Aref=AVcc;
     1b0:	ec e7       	ldi	r30, 0x7C	; 124
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 e4       	ldi	r24, 0x40	; 64
     1b6:	80 83       	st	Z, r24
	
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); //| (1 << ADPS0); //Rrescalar div factor =128
     1b8:	ea e7       	ldi	r30, 0x7A	; 122
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	86 e8       	ldi	r24, 0x86	; 134
     1be:	80 83       	st	Z, r24
    //ADCSRB=0;
}
     1c0:	cf 91       	pop	r28
     1c2:	df 91       	pop	r29
     1c4:	08 95       	ret

000001c6 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	0f 92       	push	r0
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	89 83       	std	Y+1, r24	; 0x01
    //Select ADC Channel ch must be 0-7
    ch = ch & 0b00000111;
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	87 70       	andi	r24, 0x07	; 7
     1d6:	89 83       	std	Y+1, r24	; 0x01
  
  	//Remember to clear the bottom three bits when other channels are read.
	ADMUX = (ADMUX & 0xf8) | ch;
     1d8:	ac e7       	ldi	r26, 0x7C	; 124
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	ec e7       	ldi	r30, 0x7C	; 124
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	98 2f       	mov	r25, r24
     1e4:	98 7f       	andi	r25, 0xF8	; 248
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	89 2b       	or	r24, r25
     1ea:	8c 93       	st	X, r24

    //Start Single conversion
    ADCSRA |= (1 << ADSC);
     1ec:	aa e7       	ldi	r26, 0x7A	; 122
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	ea e7       	ldi	r30, 0x7A	; 122
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 64       	ori	r24, 0x40	; 64
     1f8:	8c 93       	st	X, r24

    //Wait for conversion to complete
    while (!(ADCSRA & (1 << ADIF)))
     1fa:	ea e7       	ldi	r30, 0x7A	; 122
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	80 71       	andi	r24, 0x10	; 16
     206:	90 70       	andi	r25, 0x00	; 0
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	b9 f3       	breq	.-18     	; 0x1fa <ReadADC+0x34>
    //Clear ADIF by writing one to it
    //Note you may be wondering why we have write one to clear it
    //This is standard way of clearing bits in io as said in datasheets.
    //The code writes '1' but it result in setting bit to '0' !!!

    ADCSRA |= (1 << ADIF);
     20c:	aa e7       	ldi	r26, 0x7A	; 122
     20e:	b0 e0       	ldi	r27, 0x00	; 0
     210:	ea e7       	ldi	r30, 0x7A	; 122
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	80 61       	ori	r24, 0x10	; 16
     218:	8c 93       	st	X, r24

    return (ADC);
     21a:	e8 e7       	ldi	r30, 0x78	; 120
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
}
     222:	0f 90       	pop	r0
     224:	cf 91       	pop	r28
     226:	df 91       	pop	r29
     228:	08 95       	ret

0000022a <fmuLoggerCache>:
#define UART_BAUD_RATE      19200      


void fmuLoggerCache(void *componentEnvironment, fmi2String instanceName,
                    fmi2Status status, fmi2String category, fmi2String message,
                    ...) {}
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <uart_initialization>:


void uart_initialization()
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	2b 97       	sbiw	r28, 0x0b	; 11
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
	unsigned int c;
    char buffer[7];
    int  num=134;
     24c:	86 e8       	ldi	r24, 0x86	; 134
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	89 83       	std	Y+1, r24	; 0x01
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
     254:	89 e1       	ldi	r24, 0x19	; 25
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 18 6a 	call	0xd430	; 0xd430 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
     25c:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 ab 6a 	call	0xd556	; 0xd556 <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
     266:	8e e0       	ldi	r24, 0x0E	; 14
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 c9 6a 	call	0xd592	; 0xd592 <uart_puts_p>
        
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	9a 81       	ldd	r25, Y+2	; 0x02
     272:	9e 01       	movw	r18, r28
     274:	2b 5f       	subi	r18, 0xFB	; 251
     276:	3f 4f       	sbci	r19, 0xFF	; 255
     278:	b9 01       	movw	r22, r18
     27a:	4a e0       	ldi	r20, 0x0A	; 10
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	0e 94 9a 6e 	call	0xdd34	; 0xdd34 <itoa>
    uart_puts(buffer);        // and transmit string to UART
     282:	ce 01       	movw	r24, r28
     284:	05 96       	adiw	r24, 0x05	; 5
     286:	0e 94 ab 6a 	call	0xd556	; 0xd556 <uart_puts>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
     28a:	8d e0       	ldi	r24, 0x0D	; 13
     28c:	0e 94 81 6a 	call	0xd502	; 0xd502 <uart_putc>
}
     290:	2b 96       	adiw	r28, 0x0b	; 11
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <do_one_serial_echo>:

void do_one_serial_echo()
{
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	29 97       	sbiw	r28, 0x09	; 9
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
	unsigned int c;
	char buffer[7];

	c = uart_getc();
     2b6:	0e 94 4d 6a 	call	0xd49a	; 0xd49a <uart_getc>
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
        if ( c & UART_NO_DATA )
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	80 70       	andi	r24, 0x00	; 0
     2c4:	91 70       	andi	r25, 0x01	; 1
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	09 f5       	brne	.+66     	; 0x30c <do_one_serial_echo+0x6a>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	9a 81       	ldd	r25, Y+2	; 0x02
     2ce:	80 70       	andi	r24, 0x00	; 0
     2d0:	90 71       	andi	r25, 0x10	; 16
     2d2:	00 97       	sbiw	r24, 0x00	; 0
     2d4:	21 f0       	breq	.+8      	; 0x2de <do_one_serial_echo+0x3c>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
     2d6:	83 e5       	ldi	r24, 0x53	; 83
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 c9 6a 	call	0xd592	; 0xd592 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	80 70       	andi	r24, 0x00	; 0
     2e4:	98 70       	andi	r25, 0x08	; 8
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <do_one_serial_echo+0x50>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
     2ea:	8e e3       	ldi	r24, 0x3E	; 62
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	0e 94 c9 6a 	call	0xd592	; 0xd592 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	9a 81       	ldd	r25, Y+2	; 0x02
     2f6:	80 70       	andi	r24, 0x00	; 0
     2f8:	92 70       	andi	r25, 0x02	; 2
     2fa:	00 97       	sbiw	r24, 0x00	; 0
     2fc:	21 f0       	breq	.+8      	; 0x306 <do_one_serial_echo+0x64>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
     2fe:	86 e2       	ldi	r24, 0x26	; 38
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 c9 6a 	call	0xd592	; 0xd592 <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	0e 94 81 6a 	call	0xd502	; 0xd502 <uart_putc>
        }
}
     30c:	29 96       	adiw	r28, 0x09	; 9
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	08 95       	ret

0000031e <main>:



int main()
{
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	df 93       	push	r29
     32c:	cf 93       	push	r28
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	c4 54       	subi	r28, 0x44	; 68
     334:	d0 40       	sbci	r29, 0x00	; 0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
//DDRB = 0xff;
  DDRD = 0xff;
     340:	ea e2       	ldi	r30, 0x2A	; 42
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 83       	st	Z, r24
  PORTD = 0x00;
     348:	eb e2       	ldi	r30, 0x2B	; 43
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	10 82       	st	Z, r1
  //PORTB = 0x00;



  InitADC();
     34e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <InitADC>
  uart_initialization();
     352:	0e 94 1c 01 	call	0x238	; 0x238 <uart_initialization>

  fmi2CallbackFunctions callback = {&fmuLoggerCache, NULL, NULL, NULL, NULL};
     356:	ce 01       	movw	r24, r28
     358:	4f 96       	adiw	r24, 0x1f	; 31
     35a:	9f af       	std	Y+63, r25	; 0x3f
     35c:	8e af       	std	Y+62, r24	; 0x3e
     35e:	e7 e1       	ldi	r30, 0x17	; 23
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	22 96       	adiw	r28, 0x02	; 2
     364:	ff af       	std	Y+63, r31	; 0x3f
     366:	ee af       	std	Y+62, r30	; 0x3e
     368:	22 97       	sbiw	r28, 0x02	; 2
     36a:	fa e0       	ldi	r31, 0x0A	; 10
     36c:	23 96       	adiw	r28, 0x03	; 3
     36e:	ff af       	std	Y+63, r31	; 0x3f
     370:	23 97       	sbiw	r28, 0x03	; 3
     372:	22 96       	adiw	r28, 0x02	; 2
     374:	ee ad       	ldd	r30, Y+62	; 0x3e
     376:	ff ad       	ldd	r31, Y+63	; 0x3f
     378:	22 97       	sbiw	r28, 0x02	; 2
     37a:	00 80       	ld	r0, Z
     37c:	22 96       	adiw	r28, 0x02	; 2
     37e:	8e ad       	ldd	r24, Y+62	; 0x3e
     380:	9f ad       	ldd	r25, Y+63	; 0x3f
     382:	22 97       	sbiw	r28, 0x02	; 2
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	22 96       	adiw	r28, 0x02	; 2
     388:	9f af       	std	Y+63, r25	; 0x3f
     38a:	8e af       	std	Y+62, r24	; 0x3e
     38c:	22 97       	sbiw	r28, 0x02	; 2
     38e:	ee ad       	ldd	r30, Y+62	; 0x3e
     390:	ff ad       	ldd	r31, Y+63	; 0x3f
     392:	00 82       	st	Z, r0
     394:	8e ad       	ldd	r24, Y+62	; 0x3e
     396:	9f ad       	ldd	r25, Y+63	; 0x3f
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	9f af       	std	Y+63, r25	; 0x3f
     39c:	8e af       	std	Y+62, r24	; 0x3e
     39e:	23 96       	adiw	r28, 0x03	; 3
     3a0:	9f ad       	ldd	r25, Y+63	; 0x3f
     3a2:	23 97       	sbiw	r28, 0x03	; 3
     3a4:	91 50       	subi	r25, 0x01	; 1
     3a6:	23 96       	adiw	r28, 0x03	; 3
     3a8:	9f af       	std	Y+63, r25	; 0x3f
     3aa:	23 97       	sbiw	r28, 0x03	; 3
     3ac:	23 96       	adiw	r28, 0x03	; 3
     3ae:	ef ad       	ldd	r30, Y+63	; 0x3f
     3b0:	23 97       	sbiw	r28, 0x03	; 3
     3b2:	ee 23       	and	r30, r30
     3b4:	f1 f6       	brne	.-68     	; 0x372 <main+0x54>
 
  //systemInit();

  //Initialize rest of the buffer.

	fmiBuffer.realBuffer[FMI_LEFTVAL] = 0.0;
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	80 93 ce 03 	sts	0x03CE, r24
     3c2:	90 93 cf 03 	sts	0x03CF, r25
     3c6:	a0 93 d0 03 	sts	0x03D0, r26
     3ca:	b0 93 d1 03 	sts	0x03D1, r27
	fmiBuffer.realBuffer[FMI_RIGHTVAL] = 0.0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	a0 e0       	ldi	r26, 0x00	; 0
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	80 93 d2 03 	sts	0x03D2, r24
     3da:	90 93 d3 03 	sts	0x03D3, r25
     3de:	a0 93 d4 03 	sts	0x03D4, r26
     3e2:	b0 93 d5 03 	sts	0x03D5, r27
	fmiBuffer.realBuffer[FMI_FORWARDROTATE] = 5.0;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	a0 ea       	ldi	r26, 0xA0	; 160
     3ec:	b0 e4       	ldi	r27, 0x40	; 64
     3ee:	80 93 ca 03 	sts	0x03CA, r24
     3f2:	90 93 cb 03 	sts	0x03CB, r25
     3f6:	a0 93 cc 03 	sts	0x03CC, r26
     3fa:	b0 93 cd 03 	sts	0x03CD, r27
	fmiBuffer.realBuffer[FMI_SERVOLEFTOUT] = 0.0;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	80 93 d6 03 	sts	0x03D6, r24
     40a:	90 93 d7 03 	sts	0x03D7, r25
     40e:	a0 93 d8 03 	sts	0x03D8, r26
     412:	b0 93 d9 03 	sts	0x03D9, r27
	fmiBuffer.realBuffer[FMI_SERVORIGHTOUT] = 0.0;
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	80 93 de 03 	sts	0x03DE, r24
     422:	90 93 df 03 	sts	0x03DF, r25
     426:	a0 93 e0 03 	sts	0x03E0, r26
     42a:	b0 93 e1 03 	sts	0x03E1, r27
	fmiBuffer.realBuffer[FMI_BACKWARDROTATE] = 1.0;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	a0 e8       	ldi	r26, 0x80	; 128
     434:	bf e3       	ldi	r27, 0x3F	; 63
     436:	80 93 e2 03 	sts	0x03E2, r24
     43a:	90 93 e3 03 	sts	0x03E3, r25
     43e:	a0 93 e4 03 	sts	0x03E4, r26
     442:	b0 93 e5 03 	sts	0x03E5, r27
	fmiBuffer.realBuffer[FMI_FORWARDSPEED] = 4.0;
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	a0 e8       	ldi	r26, 0x80	; 128
     44c:	b0 e4       	ldi	r27, 0x40	; 64
     44e:	80 93 e6 03 	sts	0x03E6, r24
     452:	90 93 e7 03 	sts	0x03E7, r25
     456:	a0 93 e8 03 	sts	0x03E8, r26
     45a:	b0 93 e9 03 	sts	0x03E9, r27
  
	fmi2Component instReturn = fmi2Instantiate("this system", fmi2CoSimulation, _FMU_GUID, "", &callback, fmi2True, fmi2True);
     45e:	81 e2       	ldi	r24, 0x21	; 33
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	2d e2       	ldi	r18, 0x2D	; 45
     464:	31 e0       	ldi	r19, 0x01	; 1
     466:	e4 e5       	ldi	r30, 0x54	; 84
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	de 01       	movw	r26, r28
     46c:	5f 96       	adiw	r26, 0x1f	; 31
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	a9 01       	movw	r20, r18
     474:	9f 01       	movw	r18, r30
     476:	8d 01       	movw	r16, r26
     478:	ee 24       	eor	r14, r14
     47a:	ff 24       	eor	r15, r15
     47c:	e3 94       	inc	r14
     47e:	cc 24       	eor	r12, r12
     480:	dd 24       	eor	r13, r13
     482:	c3 94       	inc	r12
     484:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <fmi2Instantiate>
     488:	9e 8f       	std	Y+30, r25	; 0x1e
     48a:	8d 8f       	std	Y+29, r24	; 0x1d

	if(instReturn == NULL)
     48c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     48e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     490:	00 97       	sbiw	r24, 0x00	; 0
     492:	91 f4       	brne	.+36     	; 0x4b8 <main+0x19a>
		return 1;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
	//do_one_serial_echo();
  }


  return 0;
}
     498:	cc 5b       	subi	r28, 0xBC	; 188
     49a:	df 4f       	sbci	r29, 0xFF	; 255
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	08 95       	ret
	fmi2Component instReturn = fmi2Instantiate("this system", fmi2CoSimulation, _FMU_GUID, "", &callback, fmi2True, fmi2True);

	if(instReturn == NULL)
		return 1;

	double now = 0;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	89 8f       	std	Y+25, r24	; 0x19
     4c2:	9a 8f       	std	Y+26, r25	; 0x1a
     4c4:	ab 8f       	std	Y+27, r26	; 0x1b
     4c6:	bc 8f       	std	Y+28, r27	; 0x1c
	double step = 0.01;
     4c8:	8a e0       	ldi	r24, 0x0A	; 10
     4ca:	97 ed       	ldi	r25, 0xD7	; 215
     4cc:	a3 e2       	ldi	r26, 0x23	; 35
     4ce:	bc e3       	ldi	r27, 0x3C	; 60
     4d0:	8d 8b       	std	Y+21, r24	; 0x15
     4d2:	9e 8b       	std	Y+22, r25	; 0x16
     4d4:	af 8b       	std	Y+23, r26	; 0x17
     4d6:	b8 8f       	std	Y+24, r27	; 0x18

	char buffer[20];
	int lm, rm, alive;

	alive = 0;
     4d8:	18 8a       	std	Y+16, r1	; 0x10
     4da:	1f 86       	std	Y+15, r1	; 0x0f

	while(true)
	{
	//Read switch values that indicate sensor threshold crossings.
	fmiBuffer.realBuffer[FMI_LEFTVAL] = ReadADC(0);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ReadADC>
     4e2:	cc 01       	movw	r24, r24
     4e4:	a0 e0       	ldi	r26, 0x00	; 0
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	bc 01       	movw	r22, r24
     4ea:	cd 01       	movw	r24, r26
     4ec:	0e 94 bd 6f 	call	0xdf7a	; 0xdf7a <__floatunsisf>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	80 93 ce 03 	sts	0x03CE, r24
     4f8:	90 93 cf 03 	sts	0x03CF, r25
     4fc:	a0 93 d0 03 	sts	0x03D0, r26
     500:	b0 93 d1 03 	sts	0x03D1, r27
	fmiBuffer.realBuffer[FMI_RIGHTVAL] = ReadADC(1);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ReadADC>
     50a:	cc 01       	movw	r24, r24
     50c:	a0 e0       	ldi	r26, 0x00	; 0
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 bd 6f 	call	0xdf7a	; 0xdf7a <__floatunsisf>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	80 93 d2 03 	sts	0x03D2, r24
     520:	90 93 d3 03 	sts	0x03D3, r25
     524:	a0 93 d4 03 	sts	0x03D4, r26
     528:	b0 93 d5 03 	sts	0x03D5, r27

    fmi2DoStep(NULL, now, step, false);	
     52c:	29 8d       	ldd	r18, Y+25	; 0x19
     52e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     530:	4b 8d       	ldd	r20, Y+27	; 0x1b
     532:	5c 8d       	ldd	r21, Y+28	; 0x1c
     534:	ed 88       	ldd	r14, Y+21	; 0x15
     536:	fe 88       	ldd	r15, Y+22	; 0x16
     538:	0f 89       	ldd	r16, Y+23	; 0x17
     53a:	18 8d       	ldd	r17, Y+24	; 0x18
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	ba 01       	movw	r22, r20
     542:	a9 01       	movw	r20, r18
     544:	98 01       	movw	r18, r16
     546:	87 01       	movw	r16, r14
     548:	ee 24       	eor	r14, r14
     54a:	ff 24       	eor	r15, r15
     54c:	0e 94 0e 10 	call	0x201c	; 0x201c <fmi2DoStep>

    now = now + step;
     550:	69 8d       	ldd	r22, Y+25	; 0x19
     552:	7a 8d       	ldd	r23, Y+26	; 0x1a
     554:	8b 8d       	ldd	r24, Y+27	; 0x1b
     556:	9c 8d       	ldd	r25, Y+28	; 0x1c
     558:	2d 89       	ldd	r18, Y+21	; 0x15
     55a:	3e 89       	ldd	r19, Y+22	; 0x16
     55c:	4f 89       	ldd	r20, Y+23	; 0x17
     55e:	58 8d       	ldd	r21, Y+24	; 0x18
     560:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	89 8f       	std	Y+25, r24	; 0x19
     56a:	9a 8f       	std	Y+26, r25	; 0x1a
     56c:	ab 8f       	std	Y+27, r26	; 0x1b
     56e:	bc 8f       	std	Y+28, r27	; 0x1c

    // sync buffer with hardware

	lm = fmiBuffer.realBuffer[FMI_SERVOLEFTOUT] >= 4 ? 1 : 0;
     570:	80 91 d6 03 	lds	r24, 0x03D6
     574:	90 91 d7 03 	lds	r25, 0x03D7
     578:	a0 91 d8 03 	lds	r26, 0x03D8
     57c:	b0 91 d9 03 	lds	r27, 0x03D9
     580:	1c 8a       	std	Y+20, r1	; 0x14
     582:	1b 8a       	std	Y+19, r1	; 0x13
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e8       	ldi	r20, 0x80	; 128
     58e:	50 e4       	ldi	r21, 0x40	; 64
     590:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
     594:	88 23       	and	r24, r24
     596:	24 f0       	brlt	.+8      	; 0x5a0 <main+0x282>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	9c 8b       	std	Y+20, r25	; 0x14
     59e:	8b 8b       	std	Y+19, r24	; 0x13
	rm = fmiBuffer.realBuffer[FMI_SERVORIGHTOUT] <= -4 ? 0 : 1;
     5a0:	80 91 de 03 	lds	r24, 0x03DE
     5a4:	90 91 df 03 	lds	r25, 0x03DF
     5a8:	a0 91 e0 03 	lds	r26, 0x03E0
     5ac:	b0 91 e1 03 	lds	r27, 0x03E1
     5b0:	1d ae       	std	Y+61, r1	; 0x3d
     5b2:	bc 01       	movw	r22, r24
     5b4:	cd 01       	movw	r24, r26
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e8       	ldi	r20, 0x80	; 128
     5bc:	50 ec       	ldi	r21, 0xC0	; 192
     5be:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
     5c2:	18 16       	cp	r1, r24
     5c4:	14 f0       	brlt	.+4      	; 0x5ca <main+0x2ac>
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	fd af       	std	Y+61, r31	; 0x3d
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	9d ad       	ldd	r25, Y+61	; 0x3d
     5ce:	89 27       	eor	r24, r25
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9a 8b       	std	Y+18, r25	; 0x12
     5d6:	89 8b       	std	Y+17, r24	; 0x11

    if (lm)
     5d8:	8b 89       	ldd	r24, Y+19	; 0x13
     5da:	9c 89       	ldd	r25, Y+20	; 0x14
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	79 f0       	breq	.+30     	; 0x5fe <main+0x2e0>
	{
		PORTD &= ~(1 << PIND3);
     5e0:	ab e2       	ldi	r26, 0x2B	; 43
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	eb e2       	ldi	r30, 0x2B	; 43
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	87 7f       	andi	r24, 0xF7	; 247
     5ec:	8c 93       	st	X, r24
		PORTD &= ~(1 << PIND4);
     5ee:	ab e2       	ldi	r26, 0x2B	; 43
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	eb e2       	ldi	r30, 0x2B	; 43
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 7e       	andi	r24, 0xEF	; 239
     5fa:	8c 93       	st	X, r24
     5fc:	0e c0       	rjmp	.+28     	; 0x61a <main+0x2fc>
    }
	else
	{
		PORTD |= 1 << PIND3;
     5fe:	ab e2       	ldi	r26, 0x2B	; 43
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	eb e2       	ldi	r30, 0x2B	; 43
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	88 60       	ori	r24, 0x08	; 8
     60a:	8c 93       	st	X, r24
		PORTD |= 1 << PIND4;
     60c:	ab e2       	ldi	r26, 0x2B	; 43
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	eb e2       	ldi	r30, 0x2B	; 43
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	80 61       	ori	r24, 0x10	; 16
     618:	8c 93       	st	X, r24
    }

	if (rm)
     61a:	89 89       	ldd	r24, Y+17	; 0x11
     61c:	9a 89       	ldd	r25, Y+18	; 0x12
     61e:	00 97       	sbiw	r24, 0x00	; 0
     620:	79 f0       	breq	.+30     	; 0x640 <main+0x322>
	{
		PORTD &= ~(1 << PIND2);
     622:	ab e2       	ldi	r26, 0x2B	; 43
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	eb e2       	ldi	r30, 0x2B	; 43
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	8b 7f       	andi	r24, 0xFB	; 251
     62e:	8c 93       	st	X, r24
		PORTD &= ~(1 << PIND5);
     630:	ab e2       	ldi	r26, 0x2B	; 43
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	eb e2       	ldi	r30, 0x2B	; 43
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	8f 7d       	andi	r24, 0xDF	; 223
     63c:	8c 93       	st	X, r24
     63e:	0e c0       	rjmp	.+28     	; 0x65c <main+0x33e>
   }
	else
	{
		PORTD |= 1 << PIND2;
     640:	ab e2       	ldi	r26, 0x2B	; 43
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	eb e2       	ldi	r30, 0x2B	; 43
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	84 60       	ori	r24, 0x04	; 4
     64c:	8c 93       	st	X, r24
		PORTD |= 1 << PIND5;
     64e:	ab e2       	ldi	r26, 0x2B	; 43
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	eb e2       	ldi	r30, 0x2B	; 43
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
     658:	80 62       	ori	r24, 0x20	; 32
     65a:	8c 93       	st	X, r24

//	uart_puts(buffer);


	// alive indicator
	if(alive)
     65c:	8f 85       	ldd	r24, Y+15	; 0x0f
     65e:	98 89       	ldd	r25, Y+16	; 0x10
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	41 f0       	breq	.+16     	; 0x674 <main+0x356>
    	PORTD |= (1 << PIND6);
     664:	ab e2       	ldi	r26, 0x2B	; 43
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	eb e2       	ldi	r30, 0x2B	; 43
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	80 64       	ori	r24, 0x40	; 64
     670:	8c 93       	st	X, r24
     672:	07 c0       	rjmp	.+14     	; 0x682 <main+0x364>
	else
    PORTD &= ~(1 << PIND6);
     674:	ab e2       	ldi	r26, 0x2B	; 43
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	eb e2       	ldi	r30, 0x2B	; 43
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	8f 7b       	andi	r24, 0xBF	; 191
     680:	8c 93       	st	X, r24

	alive = !alive;
     682:	25 96       	adiw	r28, 0x05	; 5
     684:	1f ae       	std	Y+63, r1	; 0x3f
     686:	1e ae       	std	Y+62, r1	; 0x3e
     688:	25 97       	sbiw	r28, 0x05	; 5
     68a:	8f 85       	ldd	r24, Y+15	; 0x0f
     68c:	98 89       	ldd	r25, Y+16	; 0x10
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	31 f4       	brne	.+12     	; 0x69e <main+0x380>
     692:	e1 e0       	ldi	r30, 0x01	; 1
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	25 96       	adiw	r28, 0x05	; 5
     698:	ff af       	std	Y+63, r31	; 0x3f
     69a:	ee af       	std	Y+62, r30	; 0x3e
     69c:	25 97       	sbiw	r28, 0x05	; 5
     69e:	25 96       	adiw	r28, 0x05	; 5
     6a0:	8e ad       	ldd	r24, Y+62	; 0x3e
     6a2:	9f ad       	ldd	r25, Y+63	; 0x3f
     6a4:	25 97       	sbiw	r28, 0x05	; 5
     6a6:	98 8b       	std	Y+16, r25	; 0x10
     6a8:	8f 87       	std	Y+15, r24	; 0x0f
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	a8 e4       	ldi	r26, 0x48	; 72
     6b0:	b3 e4       	ldi	r27, 0x43	; 67
     6b2:	8b 87       	std	Y+11, r24	; 0x0b
     6b4:	9c 87       	std	Y+12, r25	; 0x0c
     6b6:	ad 87       	std	Y+13, r26	; 0x0d
     6b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6ba:	6b 85       	ldd	r22, Y+11	; 0x0b
     6bc:	7c 85       	ldd	r23, Y+12	; 0x0c
     6be:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c0:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	4a ef       	ldi	r20, 0xFA	; 250
     6c8:	54 e4       	ldi	r21, 0x44	; 68
     6ca:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	8f 83       	std	Y+7, r24	; 0x07
     6d4:	98 87       	std	Y+8, r25	; 0x08
     6d6:	a9 87       	std	Y+9, r26	; 0x09
     6d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6da:	6f 81       	ldd	r22, Y+7	; 0x07
     6dc:	78 85       	ldd	r23, Y+8	; 0x08
     6de:	89 85       	ldd	r24, Y+9	; 0x09
     6e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
     6ee:	88 23       	and	r24, r24
     6f0:	2c f4       	brge	.+10     	; 0x6fc <main+0x3de>
		__ticks = 1;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9e 83       	std	Y+6, r25	; 0x06
     6f8:	8d 83       	std	Y+5, r24	; 0x05
     6fa:	3f c0       	rjmp	.+126    	; 0x77a <main+0x45c>
	else if (__tmp > 65535)
     6fc:	6f 81       	ldd	r22, Y+7	; 0x07
     6fe:	78 85       	ldd	r23, Y+8	; 0x08
     700:	89 85       	ldd	r24, Y+9	; 0x09
     702:	9a 85       	ldd	r25, Y+10	; 0x0a
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	3f ef       	ldi	r19, 0xFF	; 255
     708:	4f e7       	ldi	r20, 0x7F	; 127
     70a:	57 e4       	ldi	r21, 0x47	; 71
     70c:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
     710:	18 16       	cp	r1, r24
     712:	4c f5       	brge	.+82     	; 0x766 <main+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     714:	6b 85       	ldd	r22, Y+11	; 0x0b
     716:	7c 85       	ldd	r23, Y+12	; 0x0c
     718:	8d 85       	ldd	r24, Y+13	; 0x0d
     71a:	9e 85       	ldd	r25, Y+14	; 0x0e
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 e2       	ldi	r20, 0x20	; 32
     722:	51 e4       	ldi	r21, 0x41	; 65
     724:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
     728:	dc 01       	movw	r26, r24
     72a:	cb 01       	movw	r24, r22
     72c:	bc 01       	movw	r22, r24
     72e:	cd 01       	movw	r24, r26
     730:	0e 94 91 6f 	call	0xdf22	; 0xdf22 <__fixunssfsi>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	9e 83       	std	Y+6, r25	; 0x06
     73a:	8d 83       	std	Y+5, r24	; 0x05
     73c:	0f c0       	rjmp	.+30     	; 0x75c <main+0x43e>
     73e:	88 ec       	ldi	r24, 0xC8	; 200
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	9c 83       	std	Y+4, r25	; 0x04
     744:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <main+0x42c>
     74e:	9c 83       	std	Y+4, r25	; 0x04
     750:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     752:	8d 81       	ldd	r24, Y+5	; 0x05
     754:	9e 81       	ldd	r25, Y+6	; 0x06
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	9e 83       	std	Y+6, r25	; 0x06
     75a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     75c:	8d 81       	ldd	r24, Y+5	; 0x05
     75e:	9e 81       	ldd	r25, Y+6	; 0x06
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	69 f7       	brne	.-38     	; 0x73e <main+0x420>
     764:	bb ce       	rjmp	.-650    	; 0x4dc <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     766:	6f 81       	ldd	r22, Y+7	; 0x07
     768:	78 85       	ldd	r23, Y+8	; 0x08
     76a:	89 85       	ldd	r24, Y+9	; 0x09
     76c:	9a 85       	ldd	r25, Y+10	; 0x0a
     76e:	0e 94 91 6f 	call	0xdf22	; 0xdf22 <__fixunssfsi>
     772:	dc 01       	movw	r26, r24
     774:	cb 01       	movw	r24, r22
     776:	9e 83       	std	Y+6, r25	; 0x06
     778:	8d 83       	std	Y+5, r24	; 0x05
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	9e 81       	ldd	r25, Y+6	; 0x06
     77e:	9a 83       	std	Y+2, r25	; 0x02
     780:	89 83       	std	Y+1, r24	; 0x01
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <main+0x468>
     78a:	9a 83       	std	Y+2, r25	; 0x02
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	a6 ce       	rjmp	.-692    	; 0x4dc <main+0x1be>

00000790 <BoolPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void BoolPort_free_fields(struct BoolPort *this)
{
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	00 d0       	rcall	.+0      	; 0x796 <BoolPort_free_fields+0x6>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_BoolPort_value);
     79e:	e9 81       	ldd	r30, Y+1	; 0x01
     7a0:	fa 81       	ldd	r31, Y+2	; 0x02
     7a2:	86 85       	ldd	r24, Z+14	; 0x0e
     7a4:	97 85       	ldd	r25, Z+15	; 0x0f
     7a6:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	cf 91       	pop	r28
     7b0:	df 91       	pop	r29
     7b2:	08 95       	ret

000007b4 <BoolPort_free>:

static void BoolPort_free(struct BoolPort *this)
{
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <BoolPort_free+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	89 83       	std	Y+1, r24	; 0x01
	--this->_BoolPort_refs;
     7c2:	e9 81       	ldd	r30, Y+1	; 0x01
     7c4:	fa 81       	ldd	r31, Y+2	; 0x02
     7c6:	84 85       	ldd	r24, Z+12	; 0x0c
     7c8:	95 85       	ldd	r25, Z+13	; 0x0d
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	e9 81       	ldd	r30, Y+1	; 0x01
     7ce:	fa 81       	ldd	r31, Y+2	; 0x02
     7d0:	95 87       	std	Z+13, r25	; 0x0d
     7d2:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_BoolPort_refs < 1)
     7d4:	e9 81       	ldd	r30, Y+1	; 0x01
     7d6:	fa 81       	ldd	r31, Y+2	; 0x02
     7d8:	84 85       	ldd	r24, Z+12	; 0x0c
     7da:	95 85       	ldd	r25, Z+13	; 0x0d
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	41 f4       	brne	.+16     	; 0x7f0 <BoolPort_free+0x3c>
	{
		BoolPort_free_fields(this);
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	0e 94 c8 03 	call	0x790	; 0x790 <BoolPort_free_fields>
		free(this);
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	cf 91       	pop	r28
     7f6:	df 91       	pop	r29
     7f8:	08 95       	ret

000007fa <_Z17fieldInitializer4EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer4EV(BoolPortCLASS this)	{
     7fa:	df 93       	push	r29
     7fc:	cf 93       	push	r28
     7fe:	00 d0       	rcall	.+0      	; 0x800 <_Z17fieldInitializer4EV+0x6>
     800:	00 d0       	rcall	.+0      	; 0x802 <_Z17fieldInitializer4EV+0x8>
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	9c 83       	std	Y+4, r25	; 0x04
     808:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 54:18 */
TVP ret_6 = newBool(false)
;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
     810:	9a 83       	std	Y+2, r25	; 0x02
     812:	89 83       	std	Y+1, r24	; 0x01

return ret_6;
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
}
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	cf 91       	pop	r28
     822:	df 91       	pop	r29
     824:	08 95       	ret

00000826 <_Z8setValueEB>:


/* Fmi.vdmrt 60:12 */
 static  void _Z8setValueEB(BoolPortCLASS this, TVP v)	{
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	00 d0       	rcall	.+0      	; 0x830 <_Z8setValueEB+0xa>
     830:	00 d0       	rcall	.+0      	; 0x832 <_Z8setValueEB+0xc>
     832:	00 d0       	rcall	.+0      	; 0x834 <_Z8setValueEB+0xe>
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	7e 83       	std	Y+6, r23	; 0x06
     83e:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 61:27 */
TVP field_tmp_3 = vdmCloneGC(v, NULL)
;
     840:	8d 81       	ldd	r24, Y+5	; 0x05
     842:	9e 81       	ldd	r25, Y+6	; 0x06
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(BoolPort, BoolPort, this, value, field_tmp_3);
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	fc 01       	movw	r30, r24
     856:	3e 96       	adiw	r30, 0x0e	; 14
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	9c 81       	ldd	r25, Y+4	; 0x04
     864:	8c 01       	movw	r16, r24
     866:	02 5f       	subi	r16, 0xF2	; 242
     868:	1f 4f       	sbci	r17, 0xFF	; 255
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02
     86e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
     872:	f8 01       	movw	r30, r16
     874:	91 83       	std	Z+1, r25	; 0x01
     876:	80 83       	st	Z, r24

vdmFree(field_tmp_3);
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
}
     880:	26 96       	adiw	r28, 0x06	; 6
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	cf 91       	pop	r28
     88e:	df 91       	pop	r29
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	08 95       	ret

00000896 <_Z8getValueEV>:


/* Fmi.vdmrt 63:12 */
 static  TVP _Z8getValueEV(BoolPortCLASS this)	{
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	00 d0       	rcall	.+0      	; 0x89c <_Z8getValueEV+0x6>
     89c:	00 d0       	rcall	.+0      	; 0x89e <_Z8getValueEV+0x8>
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	9c 83       	std	Y+4, r25	; 0x04
     8a4:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 64:26 */
TVP ret_7 = vdmCloneGC(GET_FIELD_PTR_GC(BoolPort, BoolPort, this, value), NULL)
;
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	fc 01       	movw	r30, r24
     8ac:	3e 96       	adiw	r30, 0x0e	; 14
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 64:19 */
return ret_7;
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	cf 91       	pop	r28
     8d4:	df 91       	pop	r29
     8d6:	08 95       	ret

000008d8 <BoolPort_const_init>:



 void BoolPort_const_init()	{
     8d8:	df 93       	push	r29
     8da:	cf 93       	push	r28
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62

return ;
}
     8e0:	cf 91       	pop	r28
     8e2:	df 91       	pop	r29
     8e4:	08 95       	ret

000008e6 <BoolPort_const_shutdown>:



 void BoolPort_const_shutdown()	{
     8e6:	df 93       	push	r29
     8e8:	cf 93       	push	r28
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62

return ;
}
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	08 95       	ret

000008f4 <BoolPort_static_init>:



 void BoolPort_static_init()	{
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62

return ;
}
     8fc:	cf 91       	pop	r28
     8fe:	df 91       	pop	r29
     900:	08 95       	ret

00000902 <BoolPort_static_shutdown>:



 void BoolPort_static_shutdown()	{
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62

return ;
}
     90a:	cf 91       	pop	r28
     90c:	df 91       	pop	r29
     90e:	08 95       	ret

00000910 <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
     910:	df 93       	push	r29
     912:	cf 93       	push	r28
     914:	00 d0       	rcall	.+0      	; 0x916 <Port__Z8getValueEV+0x6>
     916:	00 d0       	rcall	.+0      	; 0x918 <Port__Z8getValueEV+0x8>
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	8b 83       	std	Y+3, r24	; 0x03

BoolPortCLASS this = CLASS_DOWNCAST(Port, BoolPort, base)
;
     920:	8b 81       	ldd	r24, Y+3	; 0x03
     922:	9c 81       	ldd	r25, Y+4	; 0x04
     924:	9a 83       	std	Y+2, r25	; 0x02
     926:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	0e 94 4b 04 	call	0x896	; 0x896 <_Z8getValueEV>
}
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	08 95       	ret

0000093e <BoolPort_Constructor>:
 *
 --------------------------------- */
 
 
BoolPortCLASS BoolPort_Constructor(BoolPortCLASS this_ptr)
{
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	00 d0       	rcall	.+0      	; 0x944 <BoolPort_Constructor+0x6>
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	9a 81       	ldd	r25, Y+2	; 0x02
     950:	00 97       	sbiw	r24, 0x00	; 0
     952:	31 f4       	brne	.+12     	; 0x960 <BoolPort_Constructor+0x22>
	{
		this_ptr = (BoolPortCLASS) malloc(sizeof(struct BoolPort));
     954:	82 e1       	ldi	r24, 0x12	; 18
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
     95c:	9a 83       	std	Y+2, r25	; 0x02
     95e:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	9a 81       	ldd	r25, Y+2	; 0x02
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	c9 f1       	breq	.+114    	; 0x9da <BoolPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,BoolPort,Port));
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	9a 81       	ldd	r25, Y+2	; 0x02
     96c:	0e 94 92 1a 	call	0x3524	; 0x3524 <Port_Constructor>

					if(! g_VTableArrayForBoolPort_Override_Port[0].pFunc)
     970:	80 91 c4 02 	lds	r24, 0x02C4
     974:	90 91 c5 02 	lds	r25, 0x02C5
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	89 f4       	brne	.+34     	; 0x99e <BoolPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForBoolPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
     97c:	e9 81       	ldd	r30, Y+1	; 0x01
     97e:	fa 81       	ldd	r31, Y+2	; 0x02
     980:	20 81       	ld	r18, Z
     982:	31 81       	ldd	r19, Z+1	; 0x01
     984:	80 ec       	ldi	r24, 0xC0	; 192
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	b9 01       	movw	r22, r18
     98a:	42 e1       	ldi	r20, 0x12	; 18
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForBoolPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
     992:	88 e8       	ldi	r24, 0x88	; 136
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	90 93 cb 02 	sts	0x02CB, r25
     99a:	80 93 ca 02 	sts	0x02CA, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForBoolPort_Override_Port;
     99e:	e9 81       	ldd	r30, Y+1	; 0x01
     9a0:	fa 81       	ldd	r31, Y+2	; 0x02
     9a2:	80 ec       	ldi	r24, 0xC0	; 192
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	80 83       	st	Z, r24
				
		
		/*  BoolPort init  */
		this_ptr->_BoolPort_id = CLASS_ID_BoolPort_ID;
     9aa:	e9 81       	ldd	r30, Y+1	; 0x01
     9ac:	fa 81       	ldd	r31, Y+2	; 0x02
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	93 87       	std	Z+11, r25	; 0x0b
     9b4:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_BoolPort_refs = 0;
     9b6:	e9 81       	ldd	r30, Y+1	; 0x01
     9b8:	fa 81       	ldd	r31, Y+2	; 0x02
     9ba:	15 86       	std	Z+13, r1	; 0x0d
     9bc:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_BoolPort_pVTable=VTableArrayForBoolPort;
     9be:	e9 81       	ldd	r30, Y+1	; 0x01
     9c0:	fa 81       	ldd	r31, Y+2	; 0x02
     9c2:	85 e5       	ldi	r24, 0x55	; 85
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	91 87       	std	Z+9, r25	; 0x09
     9c8:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_BoolPort_value= _Z17fieldInitializer4EV(this_ptr);
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_Z17fieldInitializer4EV>
     9d2:	e9 81       	ldd	r30, Y+1	; 0x01
     9d4:	fa 81       	ldd	r31, Y+2	; 0x02
     9d6:	97 87       	std	Z+15, r25	; 0x0f
     9d8:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <new+0x6>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <new+0x8>
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <new+0xa>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
	BoolPortCLASS ptr=BoolPort_Constructor(NULL);
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 9f 04 	call	0x93e	; 0x93e <BoolPort_Constructor>
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_BoolPort_id, &ptr->_BoolPort_refs, (freeVdmClassFunction)&BoolPort_free, ptr)});
     a02:	e9 81       	ldd	r30, Y+1	; 0x01
     a04:	fa 81       	ldd	r31, Y+2	; 0x02
     a06:	62 85       	ldd	r22, Z+10	; 0x0a
     a08:	73 85       	ldd	r23, Z+11	; 0x0b
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	9c 01       	movw	r18, r24
     a10:	24 5f       	subi	r18, 0xF4	; 244
     a12:	3f 4f       	sbci	r19, 0xFF	; 255
     a14:	4a ed       	ldi	r20, 0xDA	; 218
     a16:	53 e0       	ldi	r21, 0x03	; 3
     a18:	e9 81       	ldd	r30, Y+1	; 0x01
     a1a:	fa 81       	ldd	r31, Y+2	; 0x02
     a1c:	cb 01       	movw	r24, r22
     a1e:	b9 01       	movw	r22, r18
     a20:	9f 01       	movw	r18, r30
     a22:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
     a26:	1b 82       	std	Y+3, r1	; 0x03
     a28:	1c 82       	std	Y+4, r1	; 0x04
     a2a:	1d 82       	std	Y+5, r1	; 0x05
     a2c:	1e 82       	std	Y+6, r1	; 0x06
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	BoolPortCLASS ptr=BoolPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
     a32:	2b 81       	ldd	r18, Y+3	; 0x03
     a34:	3c 81       	ldd	r19, Y+4	; 0x04
     a36:	4d 81       	ldd	r20, Y+5	; 0x05
     a38:	5e 81       	ldd	r21, Y+6	; 0x06
     a3a:	8b e0       	ldi	r24, 0x0B	; 11
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	ba 01       	movw	r22, r20
     a40:	a9 01       	movw	r20, r18
     a42:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_BoolPort_id, &ptr->_BoolPort_refs, (freeVdmClassFunction)&BoolPort_free, ptr)});
}
     a46:	26 96       	adiw	r28, 0x06	; 6
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	08 95       	ret

00000a58 <_Z8BoolPortEB>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 57:12 */
 TVP _Z8BoolPortEB(BoolPortCLASS this, TVP v)	{
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <_Z8BoolPortEB+0x6>
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <_Z8BoolPortEB+0x8>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <_Z8BoolPortEB+0xa>
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	9c 83       	std	Y+4, r25	; 0x04
     a68:	8b 83       	std	Y+3, r24	; 0x03
     a6a:	7e 83       	std	Y+6, r23	; 0x06
     a6c:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
     a6e:	1a 82       	std	Y+2, r1	; 0x02
     a70:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	9c 81       	ldd	r25, Y+4	; 0x04
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	69 f4       	brne	.+26     	; 0xa94 <_Z8BoolPortEB+0x3c>
	
	{

__buf = new();
     a7a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <new>
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, BoolPort);
     a82:	e9 81       	ldd	r30, Y+1	; 0x01
     a84:	fa 81       	ldd	r31, Y+2	; 0x02
     a86:	84 81       	ldd	r24, Z+4	; 0x04
     a88:	95 81       	ldd	r25, Z+5	; 0x05
     a8a:	fc 01       	movw	r30, r24
     a8c:	80 81       	ld	r24, Z
     a8e:	91 81       	ldd	r25, Z+1	; 0x01
     a90:	9c 83       	std	Y+4, r25	; 0x04
     a92:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 58:18 */
CALL_FUNC_PTR(BoolPort, BoolPort, this, CLASS_BoolPort__Z8setValueEB, v);
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	fc 01       	movw	r30, r24
     a9a:	38 96       	adiw	r30, 0x08	; 8
     a9c:	80 81       	ld	r24, Z
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	fc 01       	movw	r30, r24
     aa2:	36 96       	adiw	r30, 0x06	; 6
     aa4:	84 81       	ldd	r24, Z+4	; 0x04
     aa6:	95 81       	ldd	r25, Z+5	; 0x05
     aa8:	fc 01       	movw	r30, r24
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	9c 81       	ldd	r25, Y+4	; 0x04
     aae:	2d 81       	ldd	r18, Y+5	; 0x05
     ab0:	3e 81       	ldd	r19, Y+6	; 0x06
     ab2:	b9 01       	movw	r22, r18
     ab4:	09 95       	icall

return __buf;
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     aba:	26 96       	adiw	r28, 0x06	; 6
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	cf 91       	pop	r28
     ac8:	df 91       	pop	r29
     aca:	08 95       	ret

00000acc <_Z8BoolPortEV>:


    /* Fmi.vdmrt 51:7 */
 TVP _Z8BoolPortEV(BoolPortCLASS this)	{
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <_Z8BoolPortEV+0x6>
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <_Z8BoolPortEV+0x8>
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	9c 83       	std	Y+4, r25	; 0x04
     ada:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
     adc:	1a 82       	std	Y+2, r1	; 0x02
     ade:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	69 f4       	brne	.+26     	; 0xb02 <_Z8BoolPortEV+0x36>
	
	{

__buf = new();
     ae8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <new>
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, BoolPort);
     af0:	e9 81       	ldd	r30, Y+1	; 0x01
     af2:	fa 81       	ldd	r31, Y+2	; 0x02
     af4:	84 81       	ldd	r24, Z+4	; 0x04
     af6:	95 81       	ldd	r25, Z+5	; 0x05
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	cf 91       	pop	r28
     b10:	df 91       	pop	r29
     b12:	08 95       	ret

00000b14 <Controller_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void Controller_free_fields(struct Controller *this)
{
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	00 d0       	rcall	.+0      	; 0xb1a <Controller_free_fields+0x6>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
			vdmFree(this->m_Controller_servoLeft);
     b22:	e9 81       	ldd	r30, Y+1	; 0x01
     b24:	fa 81       	ldd	r31, Y+2	; 0x02
     b26:	86 81       	ldd	r24, Z+6	; 0x06
     b28:	97 81       	ldd	r25, Z+7	; 0x07
     b2a:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(this->m_Controller_servoRight);
     b2e:	e9 81       	ldd	r30, Y+1	; 0x01
     b30:	fa 81       	ldd	r31, Y+2	; 0x02
     b32:	80 85       	ldd	r24, Z+8	; 0x08
     b34:	91 85       	ldd	r25, Z+9	; 0x09
     b36:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(this->m_Controller_sensorRightVal);
     b3a:	e9 81       	ldd	r30, Y+1	; 0x01
     b3c:	fa 81       	ldd	r31, Y+2	; 0x02
     b3e:	82 85       	ldd	r24, Z+10	; 0x0a
     b40:	93 85       	ldd	r25, Z+11	; 0x0b
     b42:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(this->m_Controller_sensorLeftVal);
     b46:	e9 81       	ldd	r30, Y+1	; 0x01
     b48:	fa 81       	ldd	r31, Y+2	; 0x02
     b4a:	84 85       	ldd	r24, Z+12	; 0x0c
     b4c:	95 85       	ldd	r25, Z+13	; 0x0d
     b4e:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <Controller_free>:

static void Controller_free(struct Controller *this)
{
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	00 d0       	rcall	.+0      	; 0xb62 <Controller_free+0x6>
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
	--this->_Controller_refs;
     b6a:	e9 81       	ldd	r30, Y+1	; 0x01
     b6c:	fa 81       	ldd	r31, Y+2	; 0x02
     b6e:	84 81       	ldd	r24, Z+4	; 0x04
     b70:	95 81       	ldd	r25, Z+5	; 0x05
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	e9 81       	ldd	r30, Y+1	; 0x01
     b76:	fa 81       	ldd	r31, Y+2	; 0x02
     b78:	95 83       	std	Z+5, r25	; 0x05
     b7a:	84 83       	std	Z+4, r24	; 0x04
	if (this->_Controller_refs < 1)
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	84 81       	ldd	r24, Z+4	; 0x04
     b82:	95 81       	ldd	r25, Z+5	; 0x05
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	41 f4       	brne	.+16     	; 0xb98 <Controller_free+0x3c>
	{
		Controller_free_fields(this);
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	0e 94 8a 05 	call	0xb14	; 0xb14 <Controller_free_fields>
		free(this);
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <_Z17fieldInitializer7EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer7EV()	{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <_Z17fieldInitializer7EV+0x6>
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62

TVP ret_12 = newInt(4)
;
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01

return ret_12;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <_Z12control_loopEV>:


/* Controller.vdmrt 20:12 */
 static  void _Z12control_loopEV(ControllerCLASS this)	{
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	66 97       	sbiw	r28, 0x16	; 22
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	9e 8b       	std	Y+22, r25	; 0x16
     be0:	8d 8b       	std	Y+21, r24	; 0x15

TVP andResult_1 = newBoolGC(false, NULL)
;
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
     bec:	9c 8b       	std	Y+20, r25	; 0x14
     bee:	8b 8b       	std	Y+19, r24	; 0x13

if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
     bf0:	8d 89       	ldd	r24, Y+21	; 0x15
     bf2:	9e 89       	ldd	r25, Y+22	; 0x16
     bf4:	fc 01       	movw	r30, r24
     bf6:	3a 96       	adiw	r30, 0x0a	; 10
     bf8:	80 81       	ld	r24, Z
     bfa:	91 81       	ldd	r25, Z+1	; 0x01
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     c04:	fc 01       	movw	r30, r24
     c06:	84 81       	ldd	r24, Z+4	; 0x04
     c08:	95 81       	ldd	r25, Z+5	; 0x05
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	91 81       	ldd	r25, Z+1	; 0x01
     c16:	fc 01       	movw	r30, r24
     c18:	36 96       	adiw	r30, 0x06	; 6
     c1a:	84 81       	ldd	r24, Z+4	; 0x04
     c1c:	95 81       	ldd	r25, Z+5	; 0x05
     c1e:	8c 01       	movw	r16, r24
     c20:	8d 89       	ldd	r24, Y+21	; 0x15
     c22:	9e 89       	ldd	r25, Y+22	; 0x16
     c24:	fc 01       	movw	r30, r24
     c26:	3a 96       	adiw	r30, 0x0a	; 10
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     c34:	fc 01       	movw	r30, r24
     c36:	84 81       	ldd	r24, Z+4	; 0x04
     c38:	95 81       	ldd	r25, Z+5	; 0x05
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	f8 01       	movw	r30, r16
     c42:	09 95       	icall
     c44:	8c 01       	movw	r16, r24
     c46:	80 e9       	ldi	r24, 0x90	; 144
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
     c52:	9c 01       	movw	r18, r24
     c54:	c8 01       	movw	r24, r16
     c56:	b9 01       	movw	r22, r18
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	0e 94 30 46 	call	0x8c60	; 0x8c60 <vdmLessThanGC>
     c60:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
     c64:	88 23       	and	r24, r24
     c66:	09 f4       	brne	.+2      	; 0xc6a <_Z12control_loopEV+0xa4>
     c68:	43 c0       	rjmp	.+134    	; 0xcf0 <_Z12control_loopEV+0x12a>
	
	if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
     c6a:	8d 89       	ldd	r24, Y+21	; 0x15
     c6c:	9e 89       	ldd	r25, Y+22	; 0x16
     c6e:	fc 01       	movw	r30, r24
     c70:	3c 96       	adiw	r30, 0x0c	; 12
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     c7e:	fc 01       	movw	r30, r24
     c80:	84 81       	ldd	r24, Z+4	; 0x04
     c82:	95 81       	ldd	r25, Z+5	; 0x05
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	fc 01       	movw	r30, r24
     c92:	36 96       	adiw	r30, 0x06	; 6
     c94:	84 81       	ldd	r24, Z+4	; 0x04
     c96:	95 81       	ldd	r25, Z+5	; 0x05
     c98:	8c 01       	movw	r16, r24
     c9a:	8d 89       	ldd	r24, Y+21	; 0x15
     c9c:	9e 89       	ldd	r25, Y+22	; 0x16
     c9e:	fc 01       	movw	r30, r24
     ca0:	3c 96       	adiw	r30, 0x0c	; 12
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     cae:	fc 01       	movw	r30, r24
     cb0:	84 81       	ldd	r24, Z+4	; 0x04
     cb2:	95 81       	ldd	r25, Z+5	; 0x05
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	f8 01       	movw	r30, r16
     cbc:	09 95       	icall
     cbe:	8c 01       	movw	r16, r24
     cc0:	80 e9       	ldi	r24, 0x90	; 144
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
     ccc:	9c 01       	movw	r18, r24
     cce:	c8 01       	movw	r24, r16
     cd0:	b9 01       	movw	r22, r18
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	0e 94 30 46 	call	0x8c60	; 0x8c60 <vdmLessThanGC>
     cda:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
     cde:	88 23       	and	r24, r24
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <_Z12control_loopEV+0x12a>
	
	andResult_1 = newBoolGC(true, NULL);;;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
     cec:	9c 8b       	std	Y+20, r25	; 0x14
     cee:	8b 8b       	std	Y+19, r24	; 0x13
/* Controller.vdmrt 23:9 */
if ( toBool(andResult_1) )
     cf0:	8b 89       	ldd	r24, Y+19	; 0x13
     cf2:	9c 89       	ldd	r25, Y+20	; 0x14
     cf4:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
     cf8:	88 23       	and	r24, r24
     cfa:	09 f4       	brne	.+2      	; 0xcfe <_Z12control_loopEV+0x138>
     cfc:	9c c0       	rjmp	.+312    	; 0xe36 <_Z12control_loopEV+0x270>
	/* Controller.vdmrt 24:14 */
	{
/* Controller.vdmrt 25:33 */
TVP embeding_1 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardSpeed, CLASS_RealPort__Z8getValueEV), NULL)
;
     cfe:	e0 91 de 02 	lds	r30, 0x02DE
     d02:	f0 91 df 02 	lds	r31, 0x02DF
     d06:	84 81       	ldd	r24, Z+4	; 0x04
     d08:	95 81       	ldd	r25, Z+5	; 0x05
     d0a:	fc 01       	movw	r30, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	fc 01       	movw	r30, r24
     d12:	38 96       	adiw	r30, 0x08	; 8
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
     d18:	fc 01       	movw	r30, r24
     d1a:	3c 96       	adiw	r30, 0x0c	; 12
     d1c:	84 81       	ldd	r24, Z+4	; 0x04
     d1e:	95 81       	ldd	r25, Z+5	; 0x05
     d20:	9c 01       	movw	r18, r24
     d22:	e0 91 de 02 	lds	r30, 0x02DE
     d26:	f0 91 df 02 	lds	r31, 0x02DF
     d2a:	84 81       	ldd	r24, Z+4	; 0x04
     d2c:	95 81       	ldd	r25, Z+5	; 0x05
     d2e:	fc 01       	movw	r30, r24
     d30:	80 81       	ld	r24, Z
     d32:	91 81       	ldd	r25, Z+1	; 0x01
     d34:	f9 01       	movw	r30, r18
     d36:	09 95       	icall
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <vdmMinusGC>
     d40:	9c 87       	std	Y+12, r25	; 0x0c
     d42:	8b 87       	std	Y+11, r24	; 0x0b
/* Controller.vdmrt 25:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_1);
     d44:	8d 89       	ldd	r24, Y+21	; 0x15
     d46:	9e 89       	ldd	r25, Y+22	; 0x16
     d48:	fc 01       	movw	r30, r24
     d4a:	38 96       	adiw	r30, 0x08	; 8
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     d58:	fc 01       	movw	r30, r24
     d5a:	84 81       	ldd	r24, Z+4	; 0x04
     d5c:	95 81       	ldd	r25, Z+5	; 0x05
     d5e:	fc 01       	movw	r30, r24
     d60:	80 81       	ld	r24, Z
     d62:	91 81       	ldd	r25, Z+1	; 0x01
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	fc 01       	movw	r30, r24
     d6c:	36 96       	adiw	r30, 0x06	; 6
     d6e:	84 81       	ldd	r24, Z+4	; 0x04
     d70:	95 81       	ldd	r25, Z+5	; 0x05
     d72:	8c 01       	movw	r16, r24
     d74:	8d 89       	ldd	r24, Y+21	; 0x15
     d76:	9e 89       	ldd	r25, Y+22	; 0x16
     d78:	fc 01       	movw	r30, r24
     d7a:	38 96       	adiw	r30, 0x08	; 8
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     d88:	fc 01       	movw	r30, r24
     d8a:	84 81       	ldd	r24, Z+4	; 0x04
     d8c:	95 81       	ldd	r25, Z+5	; 0x05
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	2b 85       	ldd	r18, Y+11	; 0x0b
     d96:	3c 85       	ldd	r19, Y+12	; 0x0c
     d98:	b9 01       	movw	r22, r18
     d9a:	f8 01       	movw	r30, r16
     d9c:	09 95       	icall
/* Controller.vdmrt 26:32 */
TVP embeding_2 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardSpeed, CLASS_RealPort__Z8getValueEV)
;
     d9e:	e0 91 de 02 	lds	r30, 0x02DE
     da2:	f0 91 df 02 	lds	r31, 0x02DF
     da6:	84 81       	ldd	r24, Z+4	; 0x04
     da8:	95 81       	ldd	r25, Z+5	; 0x05
     daa:	fc 01       	movw	r30, r24
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	fc 01       	movw	r30, r24
     db2:	38 96       	adiw	r30, 0x08	; 8
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	fc 01       	movw	r30, r24
     dba:	3c 96       	adiw	r30, 0x0c	; 12
     dbc:	84 81       	ldd	r24, Z+4	; 0x04
     dbe:	95 81       	ldd	r25, Z+5	; 0x05
     dc0:	9c 01       	movw	r18, r24
     dc2:	e0 91 de 02 	lds	r30, 0x02DE
     dc6:	f0 91 df 02 	lds	r31, 0x02DF
     dca:	84 81       	ldd	r24, Z+4	; 0x04
     dcc:	95 81       	ldd	r25, Z+5	; 0x05
     dce:	fc 01       	movw	r30, r24
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	f9 01       	movw	r30, r18
     dd6:	09 95       	icall
     dd8:	9a 87       	std	Y+10, r25	; 0x0a
     dda:	89 87       	std	Y+9, r24	; 0x09
/* Controller.vdmrt 26:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_2);
     ddc:	8d 89       	ldd	r24, Y+21	; 0x15
     dde:	9e 89       	ldd	r25, Y+22	; 0x16
     de0:	fc 01       	movw	r30, r24
     de2:	36 96       	adiw	r30, 0x06	; 6
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     df0:	fc 01       	movw	r30, r24
     df2:	84 81       	ldd	r24, Z+4	; 0x04
     df4:	95 81       	ldd	r25, Z+5	; 0x05
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	fc 01       	movw	r30, r24
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	fc 01       	movw	r30, r24
     e04:	36 96       	adiw	r30, 0x06	; 6
     e06:	84 81       	ldd	r24, Z+4	; 0x04
     e08:	95 81       	ldd	r25, Z+5	; 0x05
     e0a:	8c 01       	movw	r16, r24
     e0c:	8d 89       	ldd	r24, Y+21	; 0x15
     e0e:	9e 89       	ldd	r25, Y+22	; 0x16
     e10:	fc 01       	movw	r30, r24
     e12:	36 96       	adiw	r30, 0x06	; 6
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     e20:	fc 01       	movw	r30, r24
     e22:	84 81       	ldd	r24, Z+4	; 0x04
     e24:	95 81       	ldd	r25, Z+5	; 0x05
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	29 85       	ldd	r18, Y+9	; 0x09
     e2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e30:	b9 01       	movw	r22, r18
     e32:	f8 01       	movw	r30, r16
     e34:	09 95       	icall
}
;

TVP andResult_2 = newBoolGC(false, NULL)
;
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
     e40:	9a 8b       	std	Y+18, r25	; 0x12
     e42:	89 8b       	std	Y+17, r24	; 0x11

if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
     e44:	8d 89       	ldd	r24, Y+21	; 0x15
     e46:	9e 89       	ldd	r25, Y+22	; 0x16
     e48:	fc 01       	movw	r30, r24
     e4a:	3a 96       	adiw	r30, 0x0a	; 10
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     e58:	fc 01       	movw	r30, r24
     e5a:	84 81       	ldd	r24, Z+4	; 0x04
     e5c:	95 81       	ldd	r25, Z+5	; 0x05
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	fc 01       	movw	r30, r24
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	fc 01       	movw	r30, r24
     e6c:	36 96       	adiw	r30, 0x06	; 6
     e6e:	84 81       	ldd	r24, Z+4	; 0x04
     e70:	95 81       	ldd	r25, Z+5	; 0x05
     e72:	8c 01       	movw	r16, r24
     e74:	8d 89       	ldd	r24, Y+21	; 0x15
     e76:	9e 89       	ldd	r25, Y+22	; 0x16
     e78:	fc 01       	movw	r30, r24
     e7a:	3a 96       	adiw	r30, 0x0a	; 10
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     e88:	fc 01       	movw	r30, r24
     e8a:	84 81       	ldd	r24, Z+4	; 0x04
     e8c:	95 81       	ldd	r25, Z+5	; 0x05
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	f8 01       	movw	r30, r16
     e96:	09 95       	icall
     e98:	8c 01       	movw	r16, r24
     e9a:	80 e9       	ldi	r24, 0x90	; 144
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
     ea6:	9c 01       	movw	r18, r24
     ea8:	c8 01       	movw	r24, r16
     eaa:	b9 01       	movw	r22, r18
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	0e 94 30 46 	call	0x8c60	; 0x8c60 <vdmLessThanGC>
     eb4:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
     eb8:	88 23       	and	r24, r24
     eba:	09 f4       	brne	.+2      	; 0xebe <_Z12control_loopEV+0x2f8>
     ebc:	43 c0       	rjmp	.+134    	; 0xf44 <_Z12control_loopEV+0x37e>
	
	if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
     ebe:	8d 89       	ldd	r24, Y+21	; 0x15
     ec0:	9e 89       	ldd	r25, Y+22	; 0x16
     ec2:	fc 01       	movw	r30, r24
     ec4:	3c 96       	adiw	r30, 0x0c	; 12
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     ed2:	fc 01       	movw	r30, r24
     ed4:	84 81       	ldd	r24, Z+4	; 0x04
     ed6:	95 81       	ldd	r25, Z+5	; 0x05
     ed8:	fc 01       	movw	r30, r24
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	fc 01       	movw	r30, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	fc 01       	movw	r30, r24
     ee6:	36 96       	adiw	r30, 0x06	; 6
     ee8:	84 81       	ldd	r24, Z+4	; 0x04
     eea:	95 81       	ldd	r25, Z+5	; 0x05
     eec:	8c 01       	movw	r16, r24
     eee:	8d 89       	ldd	r24, Y+21	; 0x15
     ef0:	9e 89       	ldd	r25, Y+22	; 0x16
     ef2:	fc 01       	movw	r30, r24
     ef4:	3c 96       	adiw	r30, 0x0c	; 12
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     f02:	fc 01       	movw	r30, r24
     f04:	84 81       	ldd	r24, Z+4	; 0x04
     f06:	95 81       	ldd	r25, Z+5	; 0x05
     f08:	fc 01       	movw	r30, r24
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	f8 01       	movw	r30, r16
     f10:	09 95       	icall
     f12:	8c 01       	movw	r16, r24
     f14:	80 e9       	ldi	r24, 0x90	; 144
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
     f20:	9c 01       	movw	r18, r24
     f22:	c8 01       	movw	r24, r16
     f24:	b9 01       	movw	r22, r18
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	0e 94 12 44 	call	0x8824	; 0x8824 <vdmGreaterThanGC>
     f2e:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
     f32:	88 23       	and	r24, r24
     f34:	39 f0       	breq	.+14     	; 0xf44 <_Z12control_loopEV+0x37e>
	
	andResult_2 = newBoolGC(true, NULL);;;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
     f40:	9a 8b       	std	Y+18, r25	; 0x12
     f42:	89 8b       	std	Y+17, r24	; 0x11
/* Controller.vdmrt 29:9 */
if ( toBool(andResult_2) )
     f44:	89 89       	ldd	r24, Y+17	; 0x11
     f46:	9a 89       	ldd	r25, Y+18	; 0x12
     f48:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
     f4c:	88 23       	and	r24, r24
     f4e:	09 f4       	brne	.+2      	; 0xf52 <_Z12control_loopEV+0x38c>
     f50:	9c c0       	rjmp	.+312    	; 0x108a <_Z12control_loopEV+0x4c4>
	/* Controller.vdmrt 30:14 */
	{
/* Controller.vdmrt 31:33 */
TVP embeding_3 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardRotate, CLASS_RealPort__Z8getValueEV), NULL)
;
     f52:	e0 91 e0 02 	lds	r30, 0x02E0
     f56:	f0 91 e1 02 	lds	r31, 0x02E1
     f5a:	84 81       	ldd	r24, Z+4	; 0x04
     f5c:	95 81       	ldd	r25, Z+5	; 0x05
     f5e:	fc 01       	movw	r30, r24
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	fc 01       	movw	r30, r24
     f66:	38 96       	adiw	r30, 0x08	; 8
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	fc 01       	movw	r30, r24
     f6e:	3c 96       	adiw	r30, 0x0c	; 12
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	95 81       	ldd	r25, Z+5	; 0x05
     f74:	9c 01       	movw	r18, r24
     f76:	e0 91 e0 02 	lds	r30, 0x02E0
     f7a:	f0 91 e1 02 	lds	r31, 0x02E1
     f7e:	84 81       	ldd	r24, Z+4	; 0x04
     f80:	95 81       	ldd	r25, Z+5	; 0x05
     f82:	fc 01       	movw	r30, r24
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	f9 01       	movw	r30, r18
     f8a:	09 95       	icall
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <vdmMinusGC>
     f94:	98 87       	std	Y+8, r25	; 0x08
     f96:	8f 83       	std	Y+7, r24	; 0x07
/* Controller.vdmrt 31:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_3);
     f98:	8d 89       	ldd	r24, Y+21	; 0x15
     f9a:	9e 89       	ldd	r25, Y+22	; 0x16
     f9c:	fc 01       	movw	r30, r24
     f9e:	38 96       	adiw	r30, 0x08	; 8
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     fac:	fc 01       	movw	r30, r24
     fae:	84 81       	ldd	r24, Z+4	; 0x04
     fb0:	95 81       	ldd	r25, Z+5	; 0x05
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	fc 01       	movw	r30, r24
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	fc 01       	movw	r30, r24
     fc0:	36 96       	adiw	r30, 0x06	; 6
     fc2:	84 81       	ldd	r24, Z+4	; 0x04
     fc4:	95 81       	ldd	r25, Z+5	; 0x05
     fc6:	8c 01       	movw	r16, r24
     fc8:	8d 89       	ldd	r24, Y+21	; 0x15
     fca:	9e 89       	ldd	r25, Y+22	; 0x16
     fcc:	fc 01       	movw	r30, r24
     fce:	38 96       	adiw	r30, 0x08	; 8
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
     fdc:	fc 01       	movw	r30, r24
     fde:	84 81       	ldd	r24, Z+4	; 0x04
     fe0:	95 81       	ldd	r25, Z+5	; 0x05
     fe2:	fc 01       	movw	r30, r24
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	2f 81       	ldd	r18, Y+7	; 0x07
     fea:	38 85       	ldd	r19, Y+8	; 0x08
     fec:	b9 01       	movw	r22, r18
     fee:	f8 01       	movw	r30, r16
     ff0:	09 95       	icall
/* Controller.vdmrt 32:32 */
TVP embeding_4 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_backwardRotate, CLASS_RealPort__Z8getValueEV)
;
     ff2:	e0 91 e2 02 	lds	r30, 0x02E2
     ff6:	f0 91 e3 02 	lds	r31, 0x02E3
     ffa:	84 81       	ldd	r24, Z+4	; 0x04
     ffc:	95 81       	ldd	r25, Z+5	; 0x05
     ffe:	fc 01       	movw	r30, r24
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	fc 01       	movw	r30, r24
    1006:	38 96       	adiw	r30, 0x08	; 8
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	fc 01       	movw	r30, r24
    100e:	3c 96       	adiw	r30, 0x0c	; 12
    1010:	84 81       	ldd	r24, Z+4	; 0x04
    1012:	95 81       	ldd	r25, Z+5	; 0x05
    1014:	9c 01       	movw	r18, r24
    1016:	e0 91 e2 02 	lds	r30, 0x02E2
    101a:	f0 91 e3 02 	lds	r31, 0x02E3
    101e:	84 81       	ldd	r24, Z+4	; 0x04
    1020:	95 81       	ldd	r25, Z+5	; 0x05
    1022:	fc 01       	movw	r30, r24
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	f9 01       	movw	r30, r18
    102a:	09 95       	icall
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
/* Controller.vdmrt 32:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_4);
    1030:	8d 89       	ldd	r24, Y+21	; 0x15
    1032:	9e 89       	ldd	r25, Y+22	; 0x16
    1034:	fc 01       	movw	r30, r24
    1036:	36 96       	adiw	r30, 0x06	; 6
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1044:	fc 01       	movw	r30, r24
    1046:	84 81       	ldd	r24, Z+4	; 0x04
    1048:	95 81       	ldd	r25, Z+5	; 0x05
    104a:	fc 01       	movw	r30, r24
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	fc 01       	movw	r30, r24
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	fc 01       	movw	r30, r24
    1058:	36 96       	adiw	r30, 0x06	; 6
    105a:	84 81       	ldd	r24, Z+4	; 0x04
    105c:	95 81       	ldd	r25, Z+5	; 0x05
    105e:	8c 01       	movw	r16, r24
    1060:	8d 89       	ldd	r24, Y+21	; 0x15
    1062:	9e 89       	ldd	r25, Y+22	; 0x16
    1064:	fc 01       	movw	r30, r24
    1066:	36 96       	adiw	r30, 0x06	; 6
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1074:	fc 01       	movw	r30, r24
    1076:	84 81       	ldd	r24, Z+4	; 0x04
    1078:	95 81       	ldd	r25, Z+5	; 0x05
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	2d 81       	ldd	r18, Y+5	; 0x05
    1082:	3e 81       	ldd	r19, Y+6	; 0x06
    1084:	b9 01       	movw	r22, r18
    1086:	f8 01       	movw	r30, r16
    1088:	09 95       	icall
}
;

TVP andResult_3 = newBoolGC(false, NULL)
;
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    1094:	98 8b       	std	Y+16, r25	; 0x10
    1096:	8f 87       	std	Y+15, r24	; 0x0f

if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
    1098:	8d 89       	ldd	r24, Y+21	; 0x15
    109a:	9e 89       	ldd	r25, Y+22	; 0x16
    109c:	fc 01       	movw	r30, r24
    109e:	3a 96       	adiw	r30, 0x0a	; 10
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    10ac:	fc 01       	movw	r30, r24
    10ae:	84 81       	ldd	r24, Z+4	; 0x04
    10b0:	95 81       	ldd	r25, Z+5	; 0x05
    10b2:	fc 01       	movw	r30, r24
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	fc 01       	movw	r30, r24
    10c0:	36 96       	adiw	r30, 0x06	; 6
    10c2:	84 81       	ldd	r24, Z+4	; 0x04
    10c4:	95 81       	ldd	r25, Z+5	; 0x05
    10c6:	8c 01       	movw	r16, r24
    10c8:	8d 89       	ldd	r24, Y+21	; 0x15
    10ca:	9e 89       	ldd	r25, Y+22	; 0x16
    10cc:	fc 01       	movw	r30, r24
    10ce:	3a 96       	adiw	r30, 0x0a	; 10
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    10dc:	fc 01       	movw	r30, r24
    10de:	84 81       	ldd	r24, Z+4	; 0x04
    10e0:	95 81       	ldd	r25, Z+5	; 0x05
    10e2:	fc 01       	movw	r30, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	f8 01       	movw	r30, r16
    10ea:	09 95       	icall
    10ec:	8c 01       	movw	r16, r24
    10ee:	80 e9       	ldi	r24, 0x90	; 144
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    10fa:	9c 01       	movw	r18, r24
    10fc:	c8 01       	movw	r24, r16
    10fe:	b9 01       	movw	r22, r18
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	0e 94 12 44 	call	0x8824	; 0x8824 <vdmGreaterThanGC>
    1108:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
    110c:	88 23       	and	r24, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <_Z12control_loopEV+0x54c>
    1110:	43 c0       	rjmp	.+134    	; 0x1198 <_Z12control_loopEV+0x5d2>
	
	if ( toBool(vdmLessThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
    1112:	8d 89       	ldd	r24, Y+21	; 0x15
    1114:	9e 89       	ldd	r25, Y+22	; 0x16
    1116:	fc 01       	movw	r30, r24
    1118:	3c 96       	adiw	r30, 0x0c	; 12
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1126:	fc 01       	movw	r30, r24
    1128:	84 81       	ldd	r24, Z+4	; 0x04
    112a:	95 81       	ldd	r25, Z+5	; 0x05
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	fc 01       	movw	r30, r24
    113a:	36 96       	adiw	r30, 0x06	; 6
    113c:	84 81       	ldd	r24, Z+4	; 0x04
    113e:	95 81       	ldd	r25, Z+5	; 0x05
    1140:	8c 01       	movw	r16, r24
    1142:	8d 89       	ldd	r24, Y+21	; 0x15
    1144:	9e 89       	ldd	r25, Y+22	; 0x16
    1146:	fc 01       	movw	r30, r24
    1148:	3c 96       	adiw	r30, 0x0c	; 12
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1156:	fc 01       	movw	r30, r24
    1158:	84 81       	ldd	r24, Z+4	; 0x04
    115a:	95 81       	ldd	r25, Z+5	; 0x05
    115c:	fc 01       	movw	r30, r24
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	f8 01       	movw	r30, r16
    1164:	09 95       	icall
    1166:	8c 01       	movw	r16, r24
    1168:	80 e9       	ldi	r24, 0x90	; 144
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    1174:	9c 01       	movw	r18, r24
    1176:	c8 01       	movw	r24, r16
    1178:	b9 01       	movw	r22, r18
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	0e 94 30 46 	call	0x8c60	; 0x8c60 <vdmLessThanGC>
    1182:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
    1186:	88 23       	and	r24, r24
    1188:	39 f0       	breq	.+14     	; 0x1198 <_Z12control_loopEV+0x5d2>
	
	andResult_3 = newBoolGC(true, NULL);;;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    1194:	98 8b       	std	Y+16, r25	; 0x10
    1196:	8f 87       	std	Y+15, r24	; 0x0f
/* Controller.vdmrt 35:9 */
if ( toBool(andResult_3) )
    1198:	8f 85       	ldd	r24, Y+15	; 0x0f
    119a:	98 89       	ldd	r25, Y+16	; 0x10
    119c:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
    11a0:	88 23       	and	r24, r24
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <_Z12control_loopEV+0x5e0>
    11a4:	9c c0       	rjmp	.+312    	; 0x12de <_Z12control_loopEV+0x718>
	/* Controller.vdmrt 36:14 */
	{
/* Controller.vdmrt 37:33 */
TVP embeding_5 = vdmMinusGC(CALL_FUNC(RealPort, RealPort, g_HardwareInterface_backwardRotate, CLASS_RealPort__Z8getValueEV), NULL)
;
    11a6:	e0 91 e2 02 	lds	r30, 0x02E2
    11aa:	f0 91 e3 02 	lds	r31, 0x02E3
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	95 81       	ldd	r25, Z+5	; 0x05
    11b2:	fc 01       	movw	r30, r24
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	fc 01       	movw	r30, r24
    11ba:	38 96       	adiw	r30, 0x08	; 8
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	fc 01       	movw	r30, r24
    11c2:	3c 96       	adiw	r30, 0x0c	; 12
    11c4:	84 81       	ldd	r24, Z+4	; 0x04
    11c6:	95 81       	ldd	r25, Z+5	; 0x05
    11c8:	9c 01       	movw	r18, r24
    11ca:	e0 91 e2 02 	lds	r30, 0x02E2
    11ce:	f0 91 e3 02 	lds	r31, 0x02E3
    11d2:	84 81       	ldd	r24, Z+4	; 0x04
    11d4:	95 81       	ldd	r25, Z+5	; 0x05
    11d6:	fc 01       	movw	r30, r24
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	f9 01       	movw	r30, r18
    11de:	09 95       	icall
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <vdmMinusGC>
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
/* Controller.vdmrt 37:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoRight), CLASS_RobotServo__Z8setServoER, embeding_5);
    11ec:	8d 89       	ldd	r24, Y+21	; 0x15
    11ee:	9e 89       	ldd	r25, Y+22	; 0x16
    11f0:	fc 01       	movw	r30, r24
    11f2:	38 96       	adiw	r30, 0x08	; 8
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1200:	fc 01       	movw	r30, r24
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	fc 01       	movw	r30, r24
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
    120c:	fc 01       	movw	r30, r24
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	fc 01       	movw	r30, r24
    1214:	36 96       	adiw	r30, 0x06	; 6
    1216:	84 81       	ldd	r24, Z+4	; 0x04
    1218:	95 81       	ldd	r25, Z+5	; 0x05
    121a:	8c 01       	movw	r16, r24
    121c:	8d 89       	ldd	r24, Y+21	; 0x15
    121e:	9e 89       	ldd	r25, Y+22	; 0x16
    1220:	fc 01       	movw	r30, r24
    1222:	38 96       	adiw	r30, 0x08	; 8
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1230:	fc 01       	movw	r30, r24
    1232:	84 81       	ldd	r24, Z+4	; 0x04
    1234:	95 81       	ldd	r25, Z+5	; 0x05
    1236:	fc 01       	movw	r30, r24
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	2b 81       	ldd	r18, Y+3	; 0x03
    123e:	3c 81       	ldd	r19, Y+4	; 0x04
    1240:	b9 01       	movw	r22, r18
    1242:	f8 01       	movw	r30, r16
    1244:	09 95       	icall
/* Controller.vdmrt 38:32 */
TVP embeding_6 = CALL_FUNC(RealPort, RealPort, g_HardwareInterface_forwardRotate, CLASS_RealPort__Z8getValueEV)
;
    1246:	e0 91 e0 02 	lds	r30, 0x02E0
    124a:	f0 91 e1 02 	lds	r31, 0x02E1
    124e:	84 81       	ldd	r24, Z+4	; 0x04
    1250:	95 81       	ldd	r25, Z+5	; 0x05
    1252:	fc 01       	movw	r30, r24
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	fc 01       	movw	r30, r24
    125a:	38 96       	adiw	r30, 0x08	; 8
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	fc 01       	movw	r30, r24
    1262:	3c 96       	adiw	r30, 0x0c	; 12
    1264:	84 81       	ldd	r24, Z+4	; 0x04
    1266:	95 81       	ldd	r25, Z+5	; 0x05
    1268:	9c 01       	movw	r18, r24
    126a:	e0 91 e0 02 	lds	r30, 0x02E0
    126e:	f0 91 e1 02 	lds	r31, 0x02E1
    1272:	84 81       	ldd	r24, Z+4	; 0x04
    1274:	95 81       	ldd	r25, Z+5	; 0x05
    1276:	fc 01       	movw	r30, r24
    1278:	80 81       	ld	r24, Z
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	f9 01       	movw	r30, r18
    127e:	09 95       	icall
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
/* Controller.vdmrt 38:13 */
CALL_FUNC(RobotServo, RobotServo, GET_FIELD_PTR_GC(Controller, Controller, this, servoLeft), CLASS_RobotServo__Z8setServoER, embeding_6);
    1284:	8d 89       	ldd	r24, Y+21	; 0x15
    1286:	9e 89       	ldd	r25, Y+22	; 0x16
    1288:	fc 01       	movw	r30, r24
    128a:	36 96       	adiw	r30, 0x06	; 6
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1298:	fc 01       	movw	r30, r24
    129a:	84 81       	ldd	r24, Z+4	; 0x04
    129c:	95 81       	ldd	r25, Z+5	; 0x05
    129e:	fc 01       	movw	r30, r24
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	fc 01       	movw	r30, r24
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	fc 01       	movw	r30, r24
    12ac:	36 96       	adiw	r30, 0x06	; 6
    12ae:	84 81       	ldd	r24, Z+4	; 0x04
    12b0:	95 81       	ldd	r25, Z+5	; 0x05
    12b2:	8c 01       	movw	r16, r24
    12b4:	8d 89       	ldd	r24, Y+21	; 0x15
    12b6:	9e 89       	ldd	r25, Y+22	; 0x16
    12b8:	fc 01       	movw	r30, r24
    12ba:	36 96       	adiw	r30, 0x06	; 6
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    12c8:	fc 01       	movw	r30, r24
    12ca:	84 81       	ldd	r24, Z+4	; 0x04
    12cc:	95 81       	ldd	r25, Z+5	; 0x05
    12ce:	fc 01       	movw	r30, r24
    12d0:	80 81       	ld	r24, Z
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	29 81       	ldd	r18, Y+1	; 0x01
    12d6:	3a 81       	ldd	r19, Y+2	; 0x02
    12d8:	b9 01       	movw	r22, r18
    12da:	f8 01       	movw	r30, r16
    12dc:	09 95       	icall
}
;

TVP andResult_4 = newBoolGC(false, NULL)
;
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    12e8:	9e 87       	std	Y+14, r25	; 0x0e
    12ea:	8d 87       	std	Y+13, r24	; 0x0d

if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorRightVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
    12ec:	8d 89       	ldd	r24, Y+21	; 0x15
    12ee:	9e 89       	ldd	r25, Y+22	; 0x16
    12f0:	fc 01       	movw	r30, r24
    12f2:	3a 96       	adiw	r30, 0x0a	; 10
    12f4:	80 81       	ld	r24, Z
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1300:	fc 01       	movw	r30, r24
    1302:	84 81       	ldd	r24, Z+4	; 0x04
    1304:	95 81       	ldd	r25, Z+5	; 0x05
    1306:	fc 01       	movw	r30, r24
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	fc 01       	movw	r30, r24
    1314:	36 96       	adiw	r30, 0x06	; 6
    1316:	84 81       	ldd	r24, Z+4	; 0x04
    1318:	95 81       	ldd	r25, Z+5	; 0x05
    131a:	8c 01       	movw	r16, r24
    131c:	8d 89       	ldd	r24, Y+21	; 0x15
    131e:	9e 89       	ldd	r25, Y+22	; 0x16
    1320:	fc 01       	movw	r30, r24
    1322:	3a 96       	adiw	r30, 0x0a	; 10
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1330:	fc 01       	movw	r30, r24
    1332:	84 81       	ldd	r24, Z+4	; 0x04
    1334:	95 81       	ldd	r25, Z+5	; 0x05
    1336:	fc 01       	movw	r30, r24
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	f8 01       	movw	r30, r16
    133e:	09 95       	icall
    1340:	8c 01       	movw	r16, r24
    1342:	80 e9       	ldi	r24, 0x90	; 144
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    134e:	9c 01       	movw	r18, r24
    1350:	c8 01       	movw	r24, r16
    1352:	b9 01       	movw	r22, r18
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	0e 94 12 44 	call	0x8824	; 0x8824 <vdmGreaterThanGC>
    135c:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <_Z12control_loopEV+0x7a0>
    1364:	43 c0       	rjmp	.+134    	; 0x13ec <_Z12control_loopEV+0x826>
	
	if ( toBool(vdmGreaterThanGC(CALL_FUNC(RobotSensor, RobotSensor, GET_FIELD_PTR_GC(Controller, Controller, this, sensorLeftVal), CLASS_RobotSensor__Z10getReadingEV), newIntGC(400, NULL), NULL)) )
    1366:	8d 89       	ldd	r24, Y+21	; 0x15
    1368:	9e 89       	ldd	r25, Y+22	; 0x16
    136a:	fc 01       	movw	r30, r24
    136c:	3c 96       	adiw	r30, 0x0c	; 12
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    137a:	fc 01       	movw	r30, r24
    137c:	84 81       	ldd	r24, Z+4	; 0x04
    137e:	95 81       	ldd	r25, Z+5	; 0x05
    1380:	fc 01       	movw	r30, r24
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	fc 01       	movw	r30, r24
    138e:	36 96       	adiw	r30, 0x06	; 6
    1390:	84 81       	ldd	r24, Z+4	; 0x04
    1392:	95 81       	ldd	r25, Z+5	; 0x05
    1394:	8c 01       	movw	r16, r24
    1396:	8d 89       	ldd	r24, Y+21	; 0x15
    1398:	9e 89       	ldd	r25, Y+22	; 0x16
    139a:	fc 01       	movw	r30, r24
    139c:	3c 96       	adiw	r30, 0x0c	; 12
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    13aa:	fc 01       	movw	r30, r24
    13ac:	84 81       	ldd	r24, Z+4	; 0x04
    13ae:	95 81       	ldd	r25, Z+5	; 0x05
    13b0:	fc 01       	movw	r30, r24
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	f8 01       	movw	r30, r16
    13b8:	09 95       	icall
    13ba:	8c 01       	movw	r16, r24
    13bc:	80 e9       	ldi	r24, 0x90	; 144
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    13c8:	9c 01       	movw	r18, r24
    13ca:	c8 01       	movw	r24, r16
    13cc:	b9 01       	movw	r22, r18
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	0e 94 12 44 	call	0x8824	; 0x8824 <vdmGreaterThanGC>
    13d6:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
    13da:	88 23       	and	r24, r24
    13dc:	39 f0       	breq	.+14     	; 0x13ec <_Z12control_loopEV+0x826>
	
	andResult_4 = newBoolGC(true, NULL);;;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    13e8:	9e 87       	std	Y+14, r25	; 0x0e
    13ea:	8d 87       	std	Y+13, r24	; 0x0d
/* Controller.vdmrt 41:9 */
if ( toBool(andResult_4) )
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
	/* Controller.vdmrt 42:14 */
	{
/*  Skip  */
}
;;
}
    13f4:	66 96       	adiw	r28, 0x16	; 22
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	08 95       	ret

0000140a <Controller_const_init>:



 void Controller_const_init()	{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62

numFields_3 = _Z17fieldInitializer7EV();
    1412:	0e 94 d1 05 	call	0xba2	; 0xba2 <_Z17fieldInitializer7EV>
    1416:	90 93 d3 02 	sts	0x02D3, r25
    141a:	80 93 d2 02 	sts	0x02D2, r24

return ;
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <Controller_const_shutdown>:



 void Controller_const_shutdown()	{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_3);
    142c:	80 91 d2 02 	lds	r24, 0x02D2
    1430:	90 91 d3 02 	lds	r25, 0x02D3
    1434:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <Controller_static_init>:



 void Controller_static_init()	{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62

return ;
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <Controller_static_shutdown>:



 void Controller_static_shutdown()	{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62

return ;
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <Controller_Constructor>:
 *
 --------------------------------- */
 
 
ControllerCLASS Controller_Constructor(ControllerCLASS this_ptr)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <Controller_Constructor+0x6>
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	31 f4       	brne	.+12     	; 0x147c <Controller_Constructor+0x22>
	{
		this_ptr = (ControllerCLASS) malloc(sizeof(struct Controller));
    1470:	80 e1       	ldi	r24, 0x10	; 16
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	01 f1       	breq	.+64     	; 0x14c4 <Controller_Constructor+0x6a>
	{
	
			
		/*  Controller init  */
		this_ptr->_Controller_id = CLASS_ID_Controller_ID;
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	93 83       	std	Z+3, r25	; 0x03
    148e:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_Controller_refs = 0;
    1490:	e9 81       	ldd	r30, Y+1	; 0x01
    1492:	fa 81       	ldd	r31, Y+2	; 0x02
    1494:	15 82       	std	Z+5, r1	; 0x05
    1496:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_Controller_pVTable=VTableArrayForController;
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	8d e6       	ldi	r24, 0x6D	; 109
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24

							this_ptr->m_Controller_servoLeft= NULL ;
    14a4:	e9 81       	ldd	r30, Y+1	; 0x01
    14a6:	fa 81       	ldd	r31, Y+2	; 0x02
    14a8:	17 82       	std	Z+7, r1	; 0x07
    14aa:	16 82       	std	Z+6, r1	; 0x06
						this_ptr->m_Controller_servoRight= NULL ;
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	11 86       	std	Z+9, r1	; 0x09
    14b2:	10 86       	std	Z+8, r1	; 0x08
						this_ptr->m_Controller_sensorRightVal= NULL ;
    14b4:	e9 81       	ldd	r30, Y+1	; 0x01
    14b6:	fa 81       	ldd	r31, Y+2	; 0x02
    14b8:	13 86       	std	Z+11, r1	; 0x0b
    14ba:	12 86       	std	Z+10, r1	; 0x0a
						this_ptr->m_Controller_sensorLeftVal= NULL ;
    14bc:	e9 81       	ldd	r30, Y+1	; 0x01
    14be:	fa 81       	ldd	r31, Y+2	; 0x02
    14c0:	15 86       	std	Z+13, r1	; 0x0d
    14c2:	14 86       	std	Z+12, r1	; 0x0c
			}

	return this_ptr;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <new+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <new+0x8>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <new+0xa>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	ControllerCLASS ptr=Controller_Constructor(NULL);
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 2d 0a 	call	0x145a	; 0x145a <Controller_Constructor>
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_Controller_id, &ptr->_Controller_refs, (freeVdmClassFunction)&Controller_free, ptr)});
    14ec:	e9 81       	ldd	r30, Y+1	; 0x01
    14ee:	fa 81       	ldd	r31, Y+2	; 0x02
    14f0:	62 81       	ldd	r22, Z+2	; 0x02
    14f2:	73 81       	ldd	r23, Z+3	; 0x03
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	9c 01       	movw	r18, r24
    14fa:	2c 5f       	subi	r18, 0xFC	; 252
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	4e ea       	ldi	r20, 0xAE	; 174
    1500:	55 e0       	ldi	r21, 0x05	; 5
    1502:	e9 81       	ldd	r30, Y+1	; 0x01
    1504:	fa 81       	ldd	r31, Y+2	; 0x02
    1506:	cb 01       	movw	r24, r22
    1508:	b9 01       	movw	r22, r18
    150a:	9f 01       	movw	r18, r30
    150c:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    1510:	1b 82       	std	Y+3, r1	; 0x03
    1512:	1c 82       	std	Y+4, r1	; 0x04
    1514:	1d 82       	std	Y+5, r1	; 0x05
    1516:	1e 82       	std	Y+6, r1	; 0x06
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	ControllerCLASS ptr=Controller_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	4d 81       	ldd	r20, Y+5	; 0x05
    1522:	5e 81       	ldd	r21, Y+6	; 0x06
    1524:	8b e0       	ldi	r24, 0x0B	; 11
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	ba 01       	movw	r22, r20
    152a:	a9 01       	movw	r20, r18
    152c:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_Controller_id, &ptr->_Controller_refs, (freeVdmClassFunction)&Controller_free, ptr)});
}
    1530:	26 96       	adiw	r28, 0x06	; 6
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor>:
 *
 --------------------------------- */ 
 

    /* Controller.vdmrt 11:12 */
 TVP _Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor(ControllerCLASS this, TVP servL, TVP servR, TVP sensRightVal, TVP sensLeftVal)	{
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	64 97       	sbiw	r28, 0x14	; 20
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	9c 87       	std	Y+12, r25	; 0x0c
    155c:	8b 87       	std	Y+11, r24	; 0x0b
    155e:	7e 87       	std	Y+14, r23	; 0x0e
    1560:	6d 87       	std	Y+13, r22	; 0x0d
    1562:	58 8b       	std	Y+16, r21	; 0x10
    1564:	4f 87       	std	Y+15, r20	; 0x0f
    1566:	3a 8b       	std	Y+18, r19	; 0x12
    1568:	29 8b       	std	Y+17, r18	; 0x11
    156a:	1c 8b       	std	Y+20, r17	; 0x14
    156c:	0b 8b       	std	Y+19, r16	; 0x13

TVP __buf = NULL
;
    156e:	1a 86       	std	Y+10, r1	; 0x0a
    1570:	19 86       	std	Y+9, r1	; 0x09

if ( this == NULL )
    1572:	8b 85       	ldd	r24, Y+11	; 0x0b
    1574:	9c 85       	ldd	r25, Y+12	; 0x0c
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f4       	brne	.+26     	; 0x1594 <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor+0x52>
	
	{

__buf = new();
    157a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <new>
    157e:	9a 87       	std	Y+10, r25	; 0x0a
    1580:	89 87       	std	Y+9, r24	; 0x09

this = TO_CLASS_PTR(__buf, Controller);
    1582:	e9 85       	ldd	r30, Y+9	; 0x09
    1584:	fa 85       	ldd	r31, Y+10	; 0x0a
    1586:	84 81       	ldd	r24, Z+4	; 0x04
    1588:	95 81       	ldd	r25, Z+5	; 0x05
    158a:	fc 01       	movw	r30, r24
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	9c 87       	std	Y+12, r25	; 0x0c
    1592:	8b 87       	std	Y+11, r24	; 0x0b
;

{
/* Controller.vdmrt 14:19 */
TVP field_tmp_6 = vdmCloneGC(servL, NULL)
;
    1594:	8d 85       	ldd	r24, Y+13	; 0x0d
    1596:	9e 85       	ldd	r25, Y+14	; 0x0e
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    15a0:	98 87       	std	Y+8, r25	; 0x08
    15a2:	8f 83       	std	Y+7, r24	; 0x07

SET_FIELD_PTR(Controller, Controller, this, servoLeft, field_tmp_6);
    15a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a8:	fc 01       	movw	r30, r24
    15aa:	36 96       	adiw	r30, 0x06	; 6
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    15b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b8:	8c 01       	movw	r16, r24
    15ba:	0a 5f       	subi	r16, 0xFA	; 250
    15bc:	1f 4f       	sbci	r17, 0xFF	; 255
    15be:	8f 81       	ldd	r24, Y+7	; 0x07
    15c0:	98 85       	ldd	r25, Y+8	; 0x08
    15c2:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    15c6:	f8 01       	movw	r30, r16
    15c8:	91 83       	std	Z+1, r25	; 0x01
    15ca:	80 83       	st	Z, r24

vdmFree(field_tmp_6);
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	98 85       	ldd	r25, Y+8	; 0x08
    15d0:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
;

{
/* Controller.vdmrt 15:18 */
TVP field_tmp_7 = vdmCloneGC(servR, NULL)
;
    15d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d6:	98 89       	ldd	r25, Y+16	; 0x10
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05

SET_FIELD_PTR(Controller, Controller, this, servoRight, field_tmp_7);
    15e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e8:	fc 01       	movw	r30, r24
    15ea:	38 96       	adiw	r30, 0x08	; 8
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    15f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f8:	8c 01       	movw	r16, r24
    15fa:	08 5f       	subi	r16, 0xF8	; 248
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    1606:	f8 01       	movw	r30, r16
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24

vdmFree(field_tmp_7);
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
;

{
/* Controller.vdmrt 16:24 */
TVP field_tmp_8 = vdmCloneGC(sensRightVal, NULL)
;
    1614:	89 89       	ldd	r24, Y+17	; 0x11
    1616:	9a 89       	ldd	r25, Y+18	; 0x12
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03

SET_FIELD_PTR(Controller, Controller, this, sensorRightVal, field_tmp_8);
    1624:	8b 85       	ldd	r24, Y+11	; 0x0b
    1626:	9c 85       	ldd	r25, Y+12	; 0x0c
    1628:	fc 01       	movw	r30, r24
    162a:	3a 96       	adiw	r30, 0x0a	; 10
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	8c 01       	movw	r16, r24
    163a:	06 5f       	subi	r16, 0xF6	; 246
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    1646:	f8 01       	movw	r30, r16
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24

vdmFree(field_tmp_8);
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
;

{
/* Controller.vdmrt 17:21 */
TVP field_tmp_9 = vdmCloneGC(sensLeftVal, NULL)
;
    1654:	8b 89       	ldd	r24, Y+19	; 0x13
    1656:	9c 89       	ldd	r25, Y+20	; 0x14
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(Controller, Controller, this, sensorLeftVal, field_tmp_9);
    1664:	8b 85       	ldd	r24, Y+11	; 0x0b
    1666:	9c 85       	ldd	r25, Y+12	; 0x0c
    1668:	fc 01       	movw	r30, r24
    166a:	3c 96       	adiw	r30, 0x0c	; 12
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    1674:	8b 85       	ldd	r24, Y+11	; 0x0b
    1676:	9c 85       	ldd	r25, Y+12	; 0x0c
    1678:	8c 01       	movw	r16, r24
    167a:	04 5f       	subi	r16, 0xF4	; 244
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    1686:	f8 01       	movw	r30, r16
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24

vdmFree(field_tmp_9);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
}
;

return __buf;
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    1698:	64 96       	adiw	r28, 0x14	; 20
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <_Z10ControllerEV>:


    /* Controller.vdmrt 1:7 */
 TVP _Z10ControllerEV(ControllerCLASS this)	{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <_Z10ControllerEV+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <_Z10ControllerEV+0x8>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    16be:	1a 82       	std	Y+2, r1	; 0x02
    16c0:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <_Z10ControllerEV+0x36>
	
	{

__buf = new();
    16ca:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <new>
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, Controller);
    16d2:	e9 81       	ldd	r30, Y+1	; 0x01
    16d4:	fa 81       	ldd	r31, Y+2	; 0x02
    16d6:	84 81       	ldd	r24, Z+4	; 0x04
    16d8:	95 81       	ldd	r25, Z+5	; 0x05
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <fmi2Instantiate>:
*  ---------------------------------------------------------------------------
*/
fmi2Component fmi2Instantiate(fmi2String instanceName, fmi2Type fmuType, fmi2String fmuGUID,
		fmi2String fmuResourceLocation, const fmi2CallbackFunctions *functions, fmi2Boolean visible,
		fmi2Boolean loggingOn)
{
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	8b 83       	std	Y+3, r24	; 0x03
    171a:	7e 83       	std	Y+6, r23	; 0x06
    171c:	6d 83       	std	Y+5, r22	; 0x05
    171e:	58 87       	std	Y+8, r21	; 0x08
    1720:	4f 83       	std	Y+7, r20	; 0x07
    1722:	3a 87       	std	Y+10, r19	; 0x0a
    1724:	29 87       	std	Y+9, r18	; 0x09
    1726:	1c 87       	std	Y+12, r17	; 0x0c
    1728:	0b 87       	std	Y+11, r16	; 0x0b
    172a:	fe 86       	std	Y+14, r15	; 0x0e
    172c:	ed 86       	std	Y+13, r14	; 0x0d
    172e:	d8 8a       	std	Y+16, r13	; 0x10
    1730:	cf 86       	std	Y+15, r12	; 0x0f
	char *tmpInstanceName;
	
	g_fmiCallbackFunctions = functions;
    1732:	8b 85       	ldd	r24, Y+11	; 0x0b
    1734:	9c 85       	ldd	r25, Y+12	; 0x0c
    1736:	90 93 b9 03 	sts	0x03B9, r25
    173a:	80 93 b8 03 	sts	0x03B8, r24
	
	if(strcmp(fmuGUID, _FMU_GUID) != 0)
    173e:	8f 81       	ldd	r24, Y+7	; 0x07
    1740:	98 85       	ldd	r25, Y+8	; 0x08
    1742:	2f e7       	ldi	r18, 0x7F	; 127
    1744:	31 e0       	ldi	r19, 0x01	; 1
    1746:	b9 01       	movw	r22, r18
    1748:	0e 94 81 6e 	call	0xdd02	; 0xdd02 <strcmp>
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	c1 f1       	breq	.+112    	; 0x17c0 <fmi2Instantiate+0xca>
	{
		g_fmiCallbackFunctions->logger((void*) 1,g_fmiInstanceName,fmi2Error,"logError","%s\n", "GUID mismatch.");
    1750:	e0 91 b8 03 	lds	r30, 0x03B8
    1754:	f0 91 b9 03 	lds	r31, 0x03B9
    1758:	40 81       	ld	r20, Z
    175a:	51 81       	ldd	r21, Z+1	; 0x01
    175c:	20 91 fa 03 	lds	r18, 0x03FA
    1760:	30 91 fb 03 	lds	r19, 0x03FB
    1764:	8d b7       	in	r24, 0x3d	; 61
    1766:	9e b7       	in	r25, 0x3e	; 62
    1768:	0c 97       	sbiw	r24, 0x0c	; 12
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	9e bf       	out	0x3e, r25	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	8d bf       	out	0x3d, r24	; 61
    1774:	ed b7       	in	r30, 0x3d	; 61
    1776:	fe b7       	in	r31, 0x3e	; 62
    1778:	31 96       	adiw	r30, 0x01	; 1
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
    1782:	33 83       	std	Z+3, r19	; 0x03
    1784:	22 83       	std	Z+2, r18	; 0x02
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	95 83       	std	Z+5, r25	; 0x05
    178c:	84 83       	std	Z+4, r24	; 0x04
    178e:	86 ea       	ldi	r24, 0xA6	; 166
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	97 83       	std	Z+7, r25	; 0x07
    1794:	86 83       	std	Z+6, r24	; 0x06
    1796:	8f ea       	ldi	r24, 0xAF	; 175
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	91 87       	std	Z+9, r25	; 0x09
    179c:	80 87       	std	Z+8, r24	; 0x08
    179e:	83 eb       	ldi	r24, 0xB3	; 179
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	93 87       	std	Z+11, r25	; 0x0b
    17a4:	82 87       	std	Z+10, r24	; 0x0a
    17a6:	fa 01       	movw	r30, r20
    17a8:	09 95       	icall
    17aa:	8d b7       	in	r24, 0x3d	; 61
    17ac:	9e b7       	in	r25, 0x3e	; 62
    17ae:	0c 96       	adiw	r24, 0x0c	; 12
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	9e bf       	out	0x3e, r25	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	8d bf       	out	0x3d, r24	; 61
		return NULL;
    17ba:	1a 8a       	std	Y+18, r1	; 0x12
    17bc:	19 8a       	std	Y+17, r1	; 0x11
    17be:	32 c0       	rjmp	.+100    	; 0x1824 <fmi2Instantiate+0x12e>
	}

	tmpInstanceName = (char*)malloc(strlen(instanceName) + 1);
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <strlen>
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
	strcpy(tmpInstanceName, instanceName);
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	b9 01       	movw	r22, r18
    17dc:	0e 94 8a 6e 	call	0xdd14	; 0xdd14 <strcpy>
	g_fmiInstanceName = tmpInstanceName;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	90 93 fb 03 	sts	0x03FB, r25
    17e8:	80 93 fa 03 	sts	0x03FA, r24

	resourcesLocation = (char*)calloc(strlen(fmuResourceLocation) + 1, sizeof(char));
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <strlen>
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    17fe:	90 93 29 03 	sts	0x0329, r25
    1802:	80 93 28 03 	sts	0x0328, r24
	strcpy(resourcesLocation, fmuResourceLocation);
    1806:	80 91 28 03 	lds	r24, 0x0328
    180a:	90 91 29 03 	lds	r25, 0x0329
    180e:	29 85       	ldd	r18, Y+9	; 0x09
    1810:	3a 85       	ldd	r19, Y+10	; 0x0a
    1812:	b9 01       	movw	r22, r18
    1814:	0e 94 8a 6e 	call	0xdd14	; 0xdd14 <strcpy>
	
	systemInit();
    1818:	0e 94 3c 13 	call	0x2678	; 0x2678 <systemInit>

	return (void*) 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9a 8b       	std	Y+18, r25	; 0x12
    1822:	89 8b       	std	Y+17, r24	; 0x11
    1824:	89 89       	ldd	r24, Y+17	; 0x11
    1826:	9a 89       	ldd	r25, Y+18	; 0x12
}
    1828:	62 96       	adiw	r28, 0x12	; 18
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	08 95       	ret

00001846 <fmi2SetupExperiment>:

fmi2Status fmi2SetupExperiment(fmi2Component c, fmi2Boolean toleranceDefined, fmi2Real tolerance,
		fmi2Real startTime, fmi2Boolean stopTimeDefined, fmi2Real stopTime)
{
    1846:	8f 92       	push	r8
    1848:	9f 92       	push	r9
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	62 97       	sbiw	r28, 0x12	; 18
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	7c 83       	std	Y+4, r23	; 0x04
    1874:	6b 83       	std	Y+3, r22	; 0x03
    1876:	2d 83       	std	Y+5, r18	; 0x05
    1878:	3e 83       	std	Y+6, r19	; 0x06
    187a:	4f 83       	std	Y+7, r20	; 0x07
    187c:	58 87       	std	Y+8, r21	; 0x08
    187e:	e9 86       	std	Y+9, r14	; 0x09
    1880:	fa 86       	std	Y+10, r15	; 0x0a
    1882:	0b 87       	std	Y+11, r16	; 0x0b
    1884:	1c 87       	std	Y+12, r17	; 0x0c
    1886:	de 86       	std	Y+14, r13	; 0x0e
    1888:	cd 86       	std	Y+13, r12	; 0x0d
    188a:	8f 86       	std	Y+15, r8	; 0x0f
    188c:	98 8a       	std	Y+16, r9	; 0x10
    188e:	a9 8a       	std	Y+17, r10	; 0x11
    1890:	ba 8a       	std	Y+18, r11	; 0x12
	return fmi2OK;
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
}
    1896:	62 96       	adiw	r28, 0x12	; 18
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	bf 90       	pop	r11
    18b4:	af 90       	pop	r10
    18b6:	9f 90       	pop	r9
    18b8:	8f 90       	pop	r8
    18ba:	08 95       	ret

000018bc <fmi2EnterInitializationMode>:

fmi2Status fmi2EnterInitializationMode(fmi2Component c)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <fmi2EnterInitializationMode+0x6>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <fmi2ExitInitializationMode>:

fmi2Status fmi2ExitInitializationMode(fmi2Component c)
{	
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	00 d0       	rcall	.+0      	; 0x18de <fmi2ExitInitializationMode+0x6>
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <fmi2Terminate>:

fmi2Status fmi2Terminate(fmi2Component c)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <fmi2Terminate+0x6>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <fmi2Reset>:

fmi2Status fmi2Reset(fmi2Component c)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <fmi2Reset+0x6>
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <fmi2FreeInstance>:

void fmi2FreeInstance(fmi2Component c)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <fmi2FreeInstance+0x6>
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
	systemDeInit();
    193a:	0e 94 be 13 	call	0x277c	; 0x277c <systemDeInit>
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <fmi2GetVersion>:
*  FMI functions: class methods not depending of a specific model instance
*  ---------------------------------------------------------------------------
*/

const char* fmi2GetVersion()
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	return fmi2Version;
    1950:	82 ec       	ldi	r24, 0xC2	; 194
    1952:	91 e0       	ldi	r25, 0x01	; 1
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <fmi2GetTypesPlatform>:

const char* fmi2GetTypesPlatform()
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	return fmi2TypesPlatform;
    1962:	86 ec       	ldi	r24, 0xC6	; 198
    1964:	91 e0       	ldi	r25, 0x01	; 1
}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <fmi2SetDebugLogging>:
*  ---------------------------------------------------------------------------
*/

fmi2Status fmi2SetDebugLogging(fmi2Component c, fmi2Boolean loggingOn, size_t nCategories,
		const fmi2String categories[])
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	28 97       	sbiw	r28, 0x08	; 8
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	7c 83       	std	Y+4, r23	; 0x04
    1986:	6b 83       	std	Y+3, r22	; 0x03
    1988:	5e 83       	std	Y+6, r21	; 0x06
    198a:	4d 83       	std	Y+5, r20	; 0x05
    198c:	38 87       	std	Y+8, r19	; 0x08
    198e:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
}
    1994:	28 96       	adiw	r28, 0x08	; 8
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <fmi2GetReal>:

fmi2Status fmi2GetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Real value[])
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	2c 97       	sbiw	r28, 0x0c	; 12
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
    19be:	78 87       	std	Y+8, r23	; 0x08
    19c0:	6f 83       	std	Y+7, r22	; 0x07
    19c2:	5a 87       	std	Y+10, r21	; 0x0a
    19c4:	49 87       	std	Y+9, r20	; 0x09
    19c6:	3c 87       	std	Y+12, r19	; 0x0c
    19c8:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    19ca:	1c 82       	std	Y+4, r1	; 0x04
    19cc:	1b 82       	std	Y+3, r1	; 0x03
    19ce:	31 c0       	rjmp	.+98     	; 0x1a32 <fmi2GetReal+0x8c>
	{
		fmi2ValueReference vRef = vr[i];
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	9c 01       	movw	r18, r24
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	8f 81       	ldd	r24, Y+7	; 0x07
    19dc:	98 85       	ldd	r25, Y+8	; 0x08
    19de:	fc 01       	movw	r30, r24
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
		value[i] = fmiBuffer.realBuffer[vRef];
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	9c 01       	movw	r18, r24
    19f2:	22 0f       	add	r18, r18
    19f4:	33 1f       	adc	r19, r19
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    19fe:	28 0f       	add	r18, r24
    1a00:	39 1f       	adc	r19, r25
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	04 96       	adiw	r24, 0x04	; 4
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	fc 01       	movw	r30, r24
    1a12:	e6 54       	subi	r30, 0x46	; 70
    1a14:	fc 4f       	sbci	r31, 0xFC	; 252
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a1c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a1e:	f9 01       	movw	r30, r18
    1a20:	80 83       	st	Z, r24
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	a2 83       	std	Z+2, r26	; 0x02
    1a26:	b3 83       	std	Z+3, r27	; 0x03

fmi2Status fmi2GetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Real value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	8b 83       	std	Y+3, r24	; 0x03
    1a32:	2b 81       	ldd	r18, Y+3	; 0x03
    1a34:	3c 81       	ldd	r19, Y+4	; 0x04
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	28 17       	cp	r18, r24
    1a3c:	39 07       	cpc	r19, r25
    1a3e:	40 f2       	brcs	.-112    	; 0x19d0 <fmi2GetReal+0x2a>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.realBuffer[vRef];
	}
	return fmi2OK;
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
}
    1a44:	2c 96       	adiw	r28, 0x0c	; 12
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <fmi2GetInteger>:

fmi2Status fmi2GetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Integer value[])
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	2c 97       	sbiw	r28, 0x0c	; 12
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	78 87       	std	Y+8, r23	; 0x08
    1a70:	6f 83       	std	Y+7, r22	; 0x07
    1a72:	5a 87       	std	Y+10, r21	; 0x0a
    1a74:	49 87       	std	Y+9, r20	; 0x09
    1a76:	3c 87       	std	Y+12, r19	; 0x0c
    1a78:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1a7a:	1c 82       	std	Y+4, r1	; 0x04
    1a7c:	1b 82       	std	Y+3, r1	; 0x03
    1a7e:	2a c0       	rjmp	.+84     	; 0x1ad4 <fmi2GetInteger+0x7e>
	{
		fmi2ValueReference vRef = vr[i];
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	9c 01       	movw	r18, r24
    1a86:	22 0f       	add	r18, r18
    1a88:	33 1f       	adc	r19, r19
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8c:	98 85       	ldd	r25, Y+8	; 0x08
    1a8e:	fc 01       	movw	r30, r24
    1a90:	e2 0f       	add	r30, r18
    1a92:	f3 1f       	adc	r31, r19
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
		value[i] = fmiBuffer.intBuffer[vRef];
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	9c 01       	movw	r18, r24
    1aa2:	22 0f       	add	r18, r18
    1aa4:	33 1f       	adc	r19, r19
    1aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aaa:	dc 01       	movw	r26, r24
    1aac:	a2 0f       	add	r26, r18
    1aae:	b3 1f       	adc	r27, r19
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	48 96       	adiw	r24, 0x18	; 24
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	fc 01       	movw	r30, r24
    1abc:	e6 54       	subi	r30, 0x46	; 70
    1abe:	fc 4f       	sbci	r31, 0xFC	; 252
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	11 96       	adiw	r26, 0x01	; 1
    1ac6:	9c 93       	st	X, r25
    1ac8:	8e 93       	st	-X, r24

fmi2Status fmi2GetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Integer value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	28 17       	cp	r18, r24
    1ade:	39 07       	cpc	r19, r25
    1ae0:	78 f2       	brcs	.-98     	; 0x1a80 <fmi2GetInteger+0x2a>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.intBuffer[vRef];
	}
	return fmi2OK;
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
}
    1ae6:	2c 96       	adiw	r28, 0x0c	; 12
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <fmi2GetBoolean>:

fmi2Status fmi2GetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Boolean value[])
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	2c 97       	sbiw	r28, 0x0c	; 12
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	78 87       	std	Y+8, r23	; 0x08
    1b12:	6f 83       	std	Y+7, r22	; 0x07
    1b14:	5a 87       	std	Y+10, r21	; 0x0a
    1b16:	49 87       	std	Y+9, r20	; 0x09
    1b18:	3c 87       	std	Y+12, r19	; 0x0c
    1b1a:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1b1c:	1c 82       	std	Y+4, r1	; 0x04
    1b1e:	1b 82       	std	Y+3, r1	; 0x03
    1b20:	29 c0       	rjmp	.+82     	; 0x1b74 <fmi2GetBoolean+0x7c>
	{
		fmi2ValueReference vRef = vr[i];
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	9c 01       	movw	r18, r24
    1b28:	22 0f       	add	r18, r18
    1b2a:	33 1f       	adc	r19, r19
    1b2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2e:	98 85       	ldd	r25, Y+8	; 0x08
    1b30:	fc 01       	movw	r30, r24
    1b32:	e2 0f       	add	r30, r18
    1b34:	f3 1f       	adc	r31, r19
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
		value[i] = fmiBuffer.booleanBuffer[vRef];
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	9c 01       	movw	r18, r24
    1b44:	22 0f       	add	r18, r18
    1b46:	33 1f       	adc	r19, r19
    1b48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	a2 0f       	add	r26, r18
    1b50:	b3 1f       	adc	r27, r19
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	e6 54       	subi	r30, 0x46	; 70
    1b5e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	11 96       	adiw	r26, 0x01	; 1
    1b66:	9c 93       	st	X, r25
    1b68:	8e 93       	st	-X, r24

fmi2Status fmi2GetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2Boolean value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	8b 83       	std	Y+3, r24	; 0x03
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	3c 81       	ldd	r19, Y+4	; 0x04
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	80 f2       	brcs	.-96     	; 0x1b22 <fmi2GetBoolean+0x2a>
	{
		fmi2ValueReference vRef = vr[i];
		value[i] = fmiBuffer.booleanBuffer[vRef];
	}

	return fmi2OK;
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
}
    1b86:	2c 96       	adiw	r28, 0x0c	; 12
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <fmi2GetString>:

fmi2Status fmi2GetString(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, fmi2String value[])
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	28 97       	sbiw	r28, 0x08	; 8
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	7c 83       	std	Y+4, r23	; 0x04
    1bb2:	6b 83       	std	Y+3, r22	; 0x03
    1bb4:	5e 83       	std	Y+6, r21	; 0x06
    1bb6:	4d 83       	std	Y+5, r20	; 0x05
    1bb8:	38 87       	std	Y+8, r19	; 0x08
    1bba:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
}
    1bc0:	28 96       	adiw	r28, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <fmi2SetReal>:

fmi2Status fmi2SetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Real value[])
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	2c 97       	sbiw	r28, 0x0c	; 12
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	78 87       	std	Y+8, r23	; 0x08
    1bec:	6f 83       	std	Y+7, r22	; 0x07
    1bee:	5a 87       	std	Y+10, r21	; 0x0a
    1bf0:	49 87       	std	Y+9, r20	; 0x09
    1bf2:	3c 87       	std	Y+12, r19	; 0x0c
    1bf4:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1bf6:	1c 82       	std	Y+4, r1	; 0x04
    1bf8:	1b 82       	std	Y+3, r1	; 0x03
    1bfa:	32 c0       	rjmp	.+100    	; 0x1c60 <fmi2SetReal+0x8e>
	{
		fmi2ValueReference vRef = vr[i];
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	9c 01       	movw	r18, r24
    1c02:	22 0f       	add	r18, r18
    1c04:	33 1f       	adc	r19, r19
    1c06:	8f 81       	ldd	r24, Y+7	; 0x07
    1c08:	98 85       	ldd	r25, Y+8	; 0x08
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	e2 0f       	add	r30, r18
    1c0e:	f3 1f       	adc	r31, r19
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.realBuffer[vRef] = value[i];
    1c18:	69 81       	ldd	r22, Y+1	; 0x01
    1c1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	9c 01       	movw	r18, r24
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e2 0f       	add	r30, r18
    1c32:	f3 1f       	adc	r31, r19
    1c34:	20 81       	ld	r18, Z
    1c36:	31 81       	ldd	r19, Z+1	; 0x01
    1c38:	42 81       	ldd	r20, Z+2	; 0x02
    1c3a:	53 81       	ldd	r21, Z+3	; 0x03
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	04 96       	adiw	r24, 0x04	; 4
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e6 54       	subi	r30, 0x46	; 70
    1c4c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c4e:	20 83       	st	Z, r18
    1c50:	31 83       	std	Z+1, r19	; 0x01
    1c52:	42 83       	std	Z+2, r20	; 0x02
    1c54:	53 83       	std	Z+3, r21	; 0x03

fmi2Status fmi2SetReal(fmi2Component c, const fmi2ValueReference vr[], size_t nvr, const fmi2Real value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
    1c60:	2b 81       	ldd	r18, Y+3	; 0x03
    1c62:	3c 81       	ldd	r19, Y+4	; 0x04
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	28 17       	cp	r18, r24
    1c6a:	39 07       	cpc	r19, r25
    1c6c:	38 f2       	brcs	.-114    	; 0x1bfc <fmi2SetReal+0x2a>
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.realBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.realBuffer[vRef]);  */
	}

	return fmi2OK;
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
}
    1c72:	2c 96       	adiw	r28, 0x0c	; 12
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <fmi2SetInteger>:

fmi2Status fmi2SetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer value[])
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	78 87       	std	Y+8, r23	; 0x08
    1c9e:	6f 83       	std	Y+7, r22	; 0x07
    1ca0:	5a 87       	std	Y+10, r21	; 0x0a
    1ca2:	49 87       	std	Y+9, r20	; 0x09
    1ca4:	3c 87       	std	Y+12, r19	; 0x0c
    1ca6:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1ca8:	1c 82       	std	Y+4, r1	; 0x04
    1caa:	1b 82       	std	Y+3, r1	; 0x03
    1cac:	2a c0       	rjmp	.+84     	; 0x1d02 <fmi2SetInteger+0x7e>
	{
		fmi2ValueReference vRef = vr[i];
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cba:	98 85       	ldd	r25, Y+8	; 0x08
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	e2 0f       	add	r30, r18
    1cc0:	f3 1f       	adc	r31, r19
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.intBuffer[vRef] = value[i];
    1cca:	49 81       	ldd	r20, Y+1	; 0x01
    1ccc:	5a 81       	ldd	r21, Y+2	; 0x02
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cda:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e2 0f       	add	r30, r18
    1ce0:	f3 1f       	adc	r31, r19
    1ce2:	20 81       	ld	r18, Z
    1ce4:	31 81       	ldd	r19, Z+1	; 0x01
    1ce6:	ca 01       	movw	r24, r20
    1ce8:	48 96       	adiw	r24, 0x18	; 24
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e6 54       	subi	r30, 0x46	; 70
    1cf2:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf4:	31 83       	std	Z+1, r19	; 0x01
    1cf6:	20 83       	st	Z, r18
fmi2Status fmi2SetInteger(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	9c 83       	std	Y+4, r25	; 0x04
    1d00:	8b 83       	std	Y+3, r24	; 0x03
    1d02:	2b 81       	ldd	r18, Y+3	; 0x03
    1d04:	3c 81       	ldd	r19, Y+4	; 0x04
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0a:	28 17       	cp	r18, r24
    1d0c:	39 07       	cpc	r19, r25
    1d0e:	78 f2       	brcs	.-98     	; 0x1cae <fmi2SetInteger+0x2a>
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.intBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.intBuffer[vRef]);  */
	}

	return fmi2OK;
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
}
    1d14:	2c 96       	adiw	r28, 0x0c	; 12
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <fmi2SetBoolean>:

fmi2Status fmi2SetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Boolean value[])
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	2c 97       	sbiw	r28, 0x0c	; 12
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	78 87       	std	Y+8, r23	; 0x08
    1d40:	6f 83       	std	Y+7, r22	; 0x07
    1d42:	5a 87       	std	Y+10, r21	; 0x0a
    1d44:	49 87       	std	Y+9, r20	; 0x09
    1d46:	3c 87       	std	Y+12, r19	; 0x0c
    1d48:	2b 87       	std	Y+11, r18	; 0x0b
	int i;

	for (i = 0; i < nvr; i++)
    1d4a:	1c 82       	std	Y+4, r1	; 0x04
    1d4c:	1b 82       	std	Y+3, r1	; 0x03
    1d4e:	29 c0       	rjmp	.+82     	; 0x1da2 <fmi2SetBoolean+0x7c>
	{
		fmi2ValueReference vRef = vr[i];
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	9c 01       	movw	r18, r24
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5c:	98 85       	ldd	r25, Y+8	; 0x08
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.booleanBuffer[vRef] = value[i];
    1d6c:	49 81       	ldd	r20, Y+1	; 0x01
    1d6e:	5a 81       	ldd	r21, Y+2	; 0x02
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	9c 01       	movw	r18, r24
    1d76:	22 0f       	add	r18, r18
    1d78:	33 1f       	adc	r19, r19
    1d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e2 0f       	add	r30, r18
    1d82:	f3 1f       	adc	r31, r19
    1d84:	20 81       	ld	r18, Z
    1d86:	31 81       	ldd	r19, Z+1	; 0x01
    1d88:	ca 01       	movw	r24, r20
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e6 54       	subi	r30, 0x46	; 70
    1d92:	fc 4f       	sbci	r31, 0xFC	; 252
    1d94:	31 83       	std	Z+1, r19	; 0x01
    1d96:	20 83       	st	Z, r18
fmi2Status fmi2SetBoolean(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Boolean value[])
{
	int i;

	for (i = 0; i < nvr; i++)
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	8b 83       	std	Y+3, r24	; 0x03
    1da2:	2b 81       	ldd	r18, Y+3	; 0x03
    1da4:	3c 81       	ldd	r19, Y+4	; 0x04
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	28 17       	cp	r18, r24
    1dac:	39 07       	cpc	r19, r25
    1dae:	80 f2       	brcs	.-96     	; 0x1d50 <fmi2SetBoolean+0x2a>
		fmi2ValueReference vRef = vr[i];
		fmiBuffer.booleanBuffer[vRef] = value[i];
		/*  printf("FMI real id=%d set to: %f\n", vRef, fmiBuffer.boolBuffer[vRef]);  */
	}

	return fmi2OK;
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
}
    1db4:	2c 96       	adiw	r28, 0x0c	; 12
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <fmi2SetString>:

fmi2Status fmi2SetString(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2String value[])
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	28 97       	sbiw	r28, 0x08	; 8
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	7c 83       	std	Y+4, r23	; 0x04
    1de0:	6b 83       	std	Y+3, r22	; 0x03
    1de2:	5e 83       	std	Y+6, r21	; 0x06
    1de4:	4d 83       	std	Y+5, r20	; 0x05
    1de6:	38 87       	std	Y+8, r19	; 0x08
    1de8:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
}
    1dee:	28 96       	adiw	r28, 0x08	; 8
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <fmi2GetFMUstate>:

fmi2Status fmi2GetFMUstate(fmi2Component c, fmi2FMUstate* FMUstate)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <fmi2GetFMUstate+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <fmi2GetFMUstate+0x8>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	7c 83       	std	Y+4, r23	; 0x04
    1e12:	6b 83       	std	Y+3, r22	; 0x03
	return fmi2OK;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <fmi2SetFMUstate>:
fmi2Status fmi2SetFMUstate(fmi2Component c, fmi2FMUstate FMUstate)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <fmi2SetFMUstate+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <fmi2SetFMUstate+0x8>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	7c 83       	std	Y+4, r23	; 0x04
    1e38:	6b 83       	std	Y+3, r22	; 0x03
	return fmi2OK;
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <fmi2FreeFMUstate>:
fmi2Status fmi2FreeFMUstate(fmi2Component c, fmi2FMUstate* FMUstate)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <fmi2FreeFMUstate+0x6>
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <fmi2FreeFMUstate+0x8>
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	7c 83       	std	Y+4, r23	; 0x04
    1e5e:	6b 83       	std	Y+3, r22	; 0x03
	return fmi2OK;
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <fmi2SerializedFMUstateSize>:
fmi2Status fmi2SerializedFMUstateSize(fmi2Component c, fmi2FMUstate FMUstate, size_t *size)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <fmi2SerializedFMUstateSize+0x6>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <fmi2SerializedFMUstateSize+0x8>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <fmi2SerializedFMUstateSize+0xa>
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	7c 83       	std	Y+4, r23	; 0x04
    1e86:	6b 83       	std	Y+3, r22	; 0x03
    1e88:	5e 83       	std	Y+6, r21	; 0x06
    1e8a:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
}
    1e90:	26 96       	adiw	r28, 0x06	; 6
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <fmi2SerializeFMUstate>:
fmi2Status fmi2SerializeFMUstate(fmi2Component c, fmi2FMUstate FMUstate, fmi2Byte serializedState[],
		size_t size)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	28 97       	sbiw	r28, 0x08	; 8
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	7c 83       	std	Y+4, r23	; 0x04
    1ebc:	6b 83       	std	Y+3, r22	; 0x03
    1ebe:	5e 83       	std	Y+6, r21	; 0x06
    1ec0:	4d 83       	std	Y+5, r20	; 0x05
    1ec2:	38 87       	std	Y+8, r19	; 0x08
    1ec4:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
}
    1eca:	28 96       	adiw	r28, 0x08	; 8
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <fmi2DeSerializeFMUstate>:
fmi2Status fmi2DeSerializeFMUstate(fmi2Component c, const fmi2Byte serializedState[], size_t size,
		fmi2FMUstate* FMUstate)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	28 97       	sbiw	r28, 0x08	; 8
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	7c 83       	std	Y+4, r23	; 0x04
    1ef6:	6b 83       	std	Y+3, r22	; 0x03
    1ef8:	5e 83       	std	Y+6, r21	; 0x06
    1efa:	4d 83       	std	Y+5, r20	; 0x05
    1efc:	38 87       	std	Y+8, r19	; 0x08
    1efe:	2f 83       	std	Y+7, r18	; 0x07
	return fmi2OK;
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
}
    1f04:	28 96       	adiw	r28, 0x08	; 8
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <fmi2GetDirectionalDerivative>:

fmi2Status fmi2GetDirectionalDerivative(fmi2Component c, const fmi2ValueReference vUnknown_ref[],
		size_t nUnknown, const fmi2ValueReference vKnown_ref[], size_t nKnown, const fmi2Real dvKnown[],
		fmi2Real dvUnknown[])
{
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	7c 83       	std	Y+4, r23	; 0x04
    1f3c:	6b 83       	std	Y+3, r22	; 0x03
    1f3e:	5e 83       	std	Y+6, r21	; 0x06
    1f40:	4d 83       	std	Y+5, r20	; 0x05
    1f42:	38 87       	std	Y+8, r19	; 0x08
    1f44:	2f 83       	std	Y+7, r18	; 0x07
    1f46:	1a 87       	std	Y+10, r17	; 0x0a
    1f48:	09 87       	std	Y+9, r16	; 0x09
    1f4a:	fc 86       	std	Y+12, r15	; 0x0c
    1f4c:	eb 86       	std	Y+11, r14	; 0x0b
    1f4e:	de 86       	std	Y+14, r13	; 0x0e
    1f50:	cd 86       	std	Y+13, r12	; 0x0d
	return fmi2OK;
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
}
    1f56:	2e 96       	adiw	r28, 0x0e	; 14
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	08 95       	ret

00001f74 <fmi2SetRealInputDerivatives>:
*/
#ifdef FMI_COSIMULATION
/* Simulating the slave */
fmi2Status fmi2SetRealInputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer order[], const fmi2Real value[])
{
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	2a 97       	sbiw	r28, 0x0a	; 10
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	7c 83       	std	Y+4, r23	; 0x04
    1f92:	6b 83       	std	Y+3, r22	; 0x03
    1f94:	5e 83       	std	Y+6, r21	; 0x06
    1f96:	4d 83       	std	Y+5, r20	; 0x05
    1f98:	38 87       	std	Y+8, r19	; 0x08
    1f9a:	2f 83       	std	Y+7, r18	; 0x07
    1f9c:	1a 87       	std	Y+10, r17	; 0x0a
    1f9e:	09 87       	std	Y+9, r16	; 0x09
	return fmi2OK;
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
}
    1fa4:	2a 96       	adiw	r28, 0x0a	; 10
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <fmi2GetRealOutputDerivatives>:

fmi2Status fmi2GetRealOutputDerivatives(fmi2Component c, const fmi2ValueReference vr[], size_t nvr,
		const fmi2Integer order[], fmi2Real value[])
{
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	2a 97       	sbiw	r28, 0x0a	; 10
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	7c 83       	std	Y+4, r23	; 0x04
    1fd8:	6b 83       	std	Y+3, r22	; 0x03
    1fda:	5e 83       	std	Y+6, r21	; 0x06
    1fdc:	4d 83       	std	Y+5, r20	; 0x05
    1fde:	38 87       	std	Y+8, r19	; 0x08
    1fe0:	2f 83       	std	Y+7, r18	; 0x07
    1fe2:	1a 87       	std	Y+10, r17	; 0x0a
    1fe4:	09 87       	std	Y+9, r16	; 0x09
	return fmi2OK;
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
}
    1fea:	2a 96       	adiw	r28, 0x0a	; 10
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	08 95       	ret

00002000 <fmi2CancelStep>:

fmi2Status fmi2CancelStep(fmi2Component c)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <fmi2CancelStep+0x6>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
	return fmi2OK;
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <fmi2DoStep>:

fmi2Status fmi2DoStep(fmi2Component c, fmi2Real currentCommunicationPoint, fmi2Real communicationStepSize,
		fmi2Boolean noSetFMUStatePriorToCurrentPoint)
{
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	2e 97       	sbiw	r28, 0x0e	; 14
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	9c 83       	std	Y+4, r25	; 0x04
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	4d 83       	std	Y+5, r20	; 0x05
    203e:	5e 83       	std	Y+6, r21	; 0x06
    2040:	6f 83       	std	Y+7, r22	; 0x07
    2042:	78 87       	std	Y+8, r23	; 0x08
    2044:	09 87       	std	Y+9, r16	; 0x09
    2046:	1a 87       	std	Y+10, r17	; 0x0a
    2048:	2b 87       	std	Y+11, r18	; 0x0b
    204a:	3c 87       	std	Y+12, r19	; 0x0c
    204c:	fe 86       	std	Y+14, r15	; 0x0e
    204e:	ed 86       	std	Y+13, r14	; 0x0d
	fmi2Status stepStatus;

	syncInputsToModel();
    2050:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <syncInputsToModel>
	stepStatus = vdmStep(currentCommunicationPoint, communicationStepSize);
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	af 81       	ldd	r26, Y+7	; 0x07
    205a:	b8 85       	ldd	r27, Y+8	; 0x08
    205c:	29 85       	ldd	r18, Y+9	; 0x09
    205e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2060:	4b 85       	ldd	r20, Y+11	; 0x0b
    2062:	5c 85       	ldd	r21, Y+12	; 0x0c
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vdmStep>
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
	syncOutputsToBuffers();
    2070:	0e 94 64 12 	call	0x24c8	; 0x24c8 <syncOutputsToBuffers>
	return stepStatus;
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2078:	2e 96       	adiw	r28, 0x0e	; 14
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	08 95       	ret

00002092 <fmi2GetStatus>:

fmi2Status fmi2GetStatus(fmi2Component c, const fmi2StatusKind s, fmi2Status *value)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <fmi2GetStatus+0x6>
    2098:	00 d0       	rcall	.+0      	; 0x209a <fmi2GetStatus+0x8>
    209a:	00 d0       	rcall	.+0      	; 0x209c <fmi2GetStatus+0xa>
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	7c 83       	std	Y+4, r23	; 0x04
    20a6:	6b 83       	std	Y+3, r22	; 0x03
    20a8:	5e 83       	std	Y+6, r21	; 0x06
    20aa:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
}
    20b0:	26 96       	adiw	r28, 0x06	; 6
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <fmi2GetRealStatus>:

fmi2Status fmi2GetRealStatus(fmi2Component c, const fmi2StatusKind s, fmi2Real *value)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <fmi2GetRealStatus+0x6>
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <fmi2GetRealStatus+0x8>
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <fmi2GetRealStatus+0xa>
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	7c 83       	std	Y+4, r23	; 0x04
    20d6:	6b 83       	std	Y+3, r22	; 0x03
    20d8:	5e 83       	std	Y+6, r21	; 0x06
    20da:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
}
    20e0:	26 96       	adiw	r28, 0x06	; 6
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <fmi2GetIntegerStatus>:

fmi2Status fmi2GetIntegerStatus(fmi2Component c, const fmi2StatusKind s, fmi2Integer *value)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <fmi2GetIntegerStatus+0x6>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <fmi2GetIntegerStatus+0x8>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <fmi2GetIntegerStatus+0xa>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	7c 83       	std	Y+4, r23	; 0x04
    2106:	6b 83       	std	Y+3, r22	; 0x03
    2108:	5e 83       	std	Y+6, r21	; 0x06
    210a:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
}
    2110:	26 96       	adiw	r28, 0x06	; 6
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <fmi2GetBooleanStatus>:

fmi2Status fmi2GetBooleanStatus(fmi2Component c, const fmi2StatusKind s, fmi2Boolean *value)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <fmi2GetBooleanStatus+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <fmi2GetBooleanStatus+0x8>
    212a:	00 d0       	rcall	.+0      	; 0x212c <fmi2GetBooleanStatus+0xa>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	7c 83       	std	Y+4, r23	; 0x04
    2136:	6b 83       	std	Y+3, r22	; 0x03
    2138:	5e 83       	std	Y+6, r21	; 0x06
    213a:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
}
    2140:	26 96       	adiw	r28, 0x06	; 6
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <fmi2GetStringStatus>:

fmi2Status fmi2GetStringStatus(fmi2Component c, const fmi2StatusKind s, fmi2String *value)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <fmi2GetStringStatus+0x6>
    2158:	00 d0       	rcall	.+0      	; 0x215a <fmi2GetStringStatus+0x8>
    215a:	00 d0       	rcall	.+0      	; 0x215c <fmi2GetStringStatus+0xa>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	7c 83       	std	Y+4, r23	; 0x04
    2166:	6b 83       	std	Y+3, r22	; 0x03
    2168:	5e 83       	std	Y+6, r21	; 0x06
    216a:	4d 83       	std	Y+5, r20	; 0x05
	return fmi2OK;
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
}
    2170:	26 96       	adiw	r28, 0x06	; 6
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <fmi2GetMaxStepsize>:

/* INTO cps specific*/
fmi2Status fmi2GetMaxStepsize(fmi2Component c, fmi2Real* size)
{	
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <fmi2GetMaxStepsize+0x6>
    2188:	00 d0       	rcall	.+0      	; 0x218a <fmi2GetMaxStepsize+0x8>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	7c 83       	std	Y+4, r23	; 0x04
    2194:	6b 83       	std	Y+3, r22	; 0x03
	*size = maxStepSize;
    2196:	80 91 d8 02 	lds	r24, 0x02D8
    219a:	90 91 d9 02 	lds	r25, 0x02D9
    219e:	a0 91 da 02 	lds	r26, 0x02DA
    21a2:	b0 91 db 02 	lds	r27, 0x02DB
    21a6:	eb 81       	ldd	r30, Y+3	; 0x03
    21a8:	fc 81       	ldd	r31, Y+4	; 0x04
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	a2 83       	std	Z+2, r26	; 0x02
    21b0:	b3 83       	std	Z+3, r27	; 0x03
	return fmi2OK;
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
}
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <syncInputsToModel>:
TVP sys = NULL;
fmi2Boolean syncOutAllowed = fmi2True;
fmi2Real maxStepSize = 0.0;


void syncInputsToModel(){
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	62 97       	sbiw	r28, 0x12	; 18
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[0]);
    21dc:	80 91 ca 03 	lds	r24, 0x03CA
    21e0:	90 91 cb 03 	lds	r25, 0x03CB
    21e4:	a0 91 cc 03 	lds	r26, 0x03CC
    21e8:	b0 91 cd 03 	lds	r27, 0x03CD
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    21f4:	9a 8b       	std	Y+18, r25	; 0x12
    21f6:	89 8b       	std	Y+17, r24	; 0x11
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_forwardRotate,value,newValue);
    21f8:	e0 91 e0 02 	lds	r30, 0x02E0
    21fc:	f0 91 e1 02 	lds	r31, 0x02E1
    2200:	84 81       	ldd	r24, Z+4	; 0x04
    2202:	95 81       	ldd	r25, Z+5	; 0x05
    2204:	fc 01       	movw	r30, r24
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	fc 01       	movw	r30, r24
    220c:	3e 96       	adiw	r30, 0x0e	; 14
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    2216:	e0 91 e0 02 	lds	r30, 0x02E0
    221a:	f0 91 e1 02 	lds	r31, 0x02E1
    221e:	84 81       	ldd	r24, Z+4	; 0x04
    2220:	95 81       	ldd	r25, Z+5	; 0x05
    2222:	fc 01       	movw	r30, r24
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	8c 01       	movw	r16, r24
    222a:	02 5f       	subi	r16, 0xF2	; 242
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
    222e:	89 89       	ldd	r24, Y+17	; 0x11
    2230:	9a 89       	ldd	r25, Y+18	; 0x12
    2232:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2236:	f8 01       	movw	r30, r16
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
		vdmFree(newValue);
    223c:	89 89       	ldd	r24, Y+17	; 0x11
    223e:	9a 89       	ldd	r25, Y+18	; 0x12
    2240:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[1]);
    2244:	80 91 ce 03 	lds	r24, 0x03CE
    2248:	90 91 cf 03 	lds	r25, 0x03CF
    224c:	a0 91 d0 03 	lds	r26, 0x03D0
    2250:	b0 91 d1 03 	lds	r27, 0x03D1
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,leftVal);
    2260:	e0 91 22 03 	lds	r30, 0x0322
    2264:	f0 91 23 03 	lds	r31, 0x0323
    2268:	84 81       	ldd	r24, Z+4	; 0x04
    226a:	95 81       	ldd	r25, Z+5	; 0x05
    226c:	fc 01       	movw	r30, r24
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	fc 01       	movw	r30, r24
    2274:	36 96       	adiw	r30, 0x06	; 6
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    227e:	9e 87       	std	Y+14, r25	; 0x0e
    2280:	8d 87       	std	Y+13, r24	; 0x0d
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    2282:	ed 85       	ldd	r30, Y+13	; 0x0d
    2284:	fe 85       	ldd	r31, Y+14	; 0x0e
    2286:	84 81       	ldd	r24, Z+4	; 0x04
    2288:	95 81       	ldd	r25, Z+5	; 0x05
    228a:	fc 01       	movw	r30, r24
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	fc 01       	movw	r30, r24
    2292:	3e 96       	adiw	r30, 0x0e	; 14
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    229c:	ed 85       	ldd	r30, Y+13	; 0x0d
    229e:	fe 85       	ldd	r31, Y+14	; 0x0e
    22a0:	84 81       	ldd	r24, Z+4	; 0x04
    22a2:	95 81       	ldd	r25, Z+5	; 0x05
    22a4:	fc 01       	movw	r30, r24
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	8c 01       	movw	r16, r24
    22ac:	02 5f       	subi	r16, 0xF2	; 242
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b2:	98 89       	ldd	r25, Y+16	; 0x10
    22b4:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    22b8:	f8 01       	movw	r30, r16
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
		vdmFree(newValue);vdmFree(p);
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	98 89       	ldd	r25, Y+16	; 0x10
    22c2:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    22c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ca:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[2]);
    22ce:	80 91 d2 03 	lds	r24, 0x03D2
    22d2:	90 91 d3 03 	lds	r25, 0x03D3
    22d6:	a0 91 d4 03 	lds	r26, 0x03D4
    22da:	b0 91 d5 03 	lds	r27, 0x03D5
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    22e6:	9c 87       	std	Y+12, r25	; 0x0c
    22e8:	8b 87       	std	Y+11, r24	; 0x0b
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,rightVal);
    22ea:	e0 91 22 03 	lds	r30, 0x0322
    22ee:	f0 91 23 03 	lds	r31, 0x0323
    22f2:	84 81       	ldd	r24, Z+4	; 0x04
    22f4:	95 81       	ldd	r25, Z+5	; 0x05
    22f6:	fc 01       	movw	r30, r24
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	fc 01       	movw	r30, r24
    22fe:	38 96       	adiw	r30, 0x08	; 8
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2308:	9a 87       	std	Y+10, r25	; 0x0a
    230a:	89 87       	std	Y+9, r24	; 0x09
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    230c:	e9 85       	ldd	r30, Y+9	; 0x09
    230e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2310:	84 81       	ldd	r24, Z+4	; 0x04
    2312:	95 81       	ldd	r25, Z+5	; 0x05
    2314:	fc 01       	movw	r30, r24
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	fc 01       	movw	r30, r24
    231c:	3e 96       	adiw	r30, 0x0e	; 14
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    2326:	e9 85       	ldd	r30, Y+9	; 0x09
    2328:	fa 85       	ldd	r31, Y+10	; 0x0a
    232a:	84 81       	ldd	r24, Z+4	; 0x04
    232c:	95 81       	ldd	r25, Z+5	; 0x05
    232e:	fc 01       	movw	r30, r24
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	8c 01       	movw	r16, r24
    2336:	02 5f       	subi	r16, 0xF2	; 242
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	8b 85       	ldd	r24, Y+11	; 0x0b
    233c:	9c 85       	ldd	r25, Y+12	; 0x0c
    233e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2342:	f8 01       	movw	r30, r16
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
		vdmFree(newValue);vdmFree(p);
    2348:	8b 85       	ldd	r24, Y+11	; 0x0b
    234a:	9c 85       	ldd	r25, Y+12	; 0x0c
    234c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[4]);
    2358:	80 91 da 03 	lds	r24, 0x03DA
    235c:	90 91 db 03 	lds	r25, 0x03DB
    2360:	a0 91 dc 03 	lds	r26, 0x03DC
    2364:	b0 91 dd 03 	lds	r27, 0x03DD
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2370:	98 87       	std	Y+8, r25	; 0x08
    2372:	8f 83       	std	Y+7, r24	; 0x07
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,total_energy_used);
    2374:	e0 91 22 03 	lds	r30, 0x0322
    2378:	f0 91 23 03 	lds	r31, 0x0323
    237c:	84 81       	ldd	r24, Z+4	; 0x04
    237e:	95 81       	ldd	r25, Z+5	; 0x05
    2380:	fc 01       	movw	r30, r24
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	fc 01       	movw	r30, r24
    2388:	3a 96       	adiw	r30, 0x0a	; 10
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
		SET_FIELD(RealPort,RealPort,p,value,newValue);
    2396:	ed 81       	ldd	r30, Y+5	; 0x05
    2398:	fe 81       	ldd	r31, Y+6	; 0x06
    239a:	84 81       	ldd	r24, Z+4	; 0x04
    239c:	95 81       	ldd	r25, Z+5	; 0x05
    239e:	fc 01       	movw	r30, r24
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	fc 01       	movw	r30, r24
    23a6:	3e 96       	adiw	r30, 0x0e	; 14
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    23b0:	ed 81       	ldd	r30, Y+5	; 0x05
    23b2:	fe 81       	ldd	r31, Y+6	; 0x06
    23b4:	84 81       	ldd	r24, Z+4	; 0x04
    23b6:	95 81       	ldd	r25, Z+5	; 0x05
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	8c 01       	movw	r16, r24
    23c0:	02 5f       	subi	r16, 0xF2	; 242
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	8f 81       	ldd	r24, Y+7	; 0x07
    23c6:	98 85       	ldd	r25, Y+8	; 0x08
    23c8:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    23cc:	f8 01       	movw	r30, r16
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	80 83       	st	Z, r24
		vdmFree(newValue);vdmFree(p);
    23d2:	8f 81       	ldd	r24, Y+7	; 0x07
    23d4:	98 85       	ldd	r25, Y+8	; 0x08
    23d6:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[6]);
    23e2:	80 91 e2 03 	lds	r24, 0x03E2
    23e6:	90 91 e3 03 	lds	r25, 0x03E3
    23ea:	a0 91 e4 03 	lds	r26, 0x03E4
    23ee:	b0 91 e5 03 	lds	r27, 0x03E5
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_backwardRotate,value,newValue);
    23fe:	e0 91 e2 02 	lds	r30, 0x02E2
    2402:	f0 91 e3 02 	lds	r31, 0x02E3
    2406:	84 81       	ldd	r24, Z+4	; 0x04
    2408:	95 81       	ldd	r25, Z+5	; 0x05
    240a:	fc 01       	movw	r30, r24
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	fc 01       	movw	r30, r24
    2412:	3e 96       	adiw	r30, 0x0e	; 14
    2414:	80 81       	ld	r24, Z
    2416:	91 81       	ldd	r25, Z+1	; 0x01
    2418:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    241c:	e0 91 e2 02 	lds	r30, 0x02E2
    2420:	f0 91 e3 02 	lds	r31, 0x02E3
    2424:	84 81       	ldd	r24, Z+4	; 0x04
    2426:	95 81       	ldd	r25, Z+5	; 0x05
    2428:	fc 01       	movw	r30, r24
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	8c 01       	movw	r16, r24
    2430:	02 5f       	subi	r16, 0xF2	; 242
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    243c:	f8 01       	movw	r30, r16
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
		vdmFree(newValue);
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
	{
		TVP newValue = newReal(fmiBuffer.realBuffer[7]);
    244a:	80 91 e6 03 	lds	r24, 0x03E6
    244e:	90 91 e7 03 	lds	r25, 0x03E7
    2452:	a0 91 e8 03 	lds	r26, 0x03E8
    2456:	b0 91 e9 03 	lds	r27, 0x03E9
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2462:	9a 83       	std	Y+2, r25	; 0x02
    2464:	89 83       	std	Y+1, r24	; 0x01
		SET_FIELD(RealPort,RealPort,g_HardwareInterface_forwardSpeed,value,newValue);
    2466:	e0 91 de 02 	lds	r30, 0x02DE
    246a:	f0 91 df 02 	lds	r31, 0x02DF
    246e:	84 81       	ldd	r24, Z+4	; 0x04
    2470:	95 81       	ldd	r25, Z+5	; 0x05
    2472:	fc 01       	movw	r30, r24
    2474:	80 81       	ld	r24, Z
    2476:	91 81       	ldd	r25, Z+1	; 0x01
    2478:	fc 01       	movw	r30, r24
    247a:	3e 96       	adiw	r30, 0x0e	; 14
    247c:	80 81       	ld	r24, Z
    247e:	91 81       	ldd	r25, Z+1	; 0x01
    2480:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    2484:	e0 91 de 02 	lds	r30, 0x02DE
    2488:	f0 91 df 02 	lds	r31, 0x02DF
    248c:	84 81       	ldd	r24, Z+4	; 0x04
    248e:	95 81       	ldd	r25, Z+5	; 0x05
    2490:	fc 01       	movw	r30, r24
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	8c 01       	movw	r16, r24
    2498:	02 5f       	subi	r16, 0xF2	; 242
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    24a4:	f8 01       	movw	r30, r16
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
		vdmFree(newValue);
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
}
    24b2:	62 96       	adiw	r28, 0x12	; 18
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	08 95       	ret

000024c8 <syncOutputsToBuffers>:
void syncOutputsToBuffers(){
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	28 97       	sbiw	r28, 0x08	; 8
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
	if(syncOutAllowed == fmi2False) return;
    24dc:	80 91 ce 01 	lds	r24, 0x01CE
    24e0:	90 91 cf 01 	lds	r25, 0x01CF
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	09 f4       	brne	.+2      	; 0x24ea <syncOutputsToBuffers+0x22>
    24e8:	6c c0       	rjmp	.+216    	; 0x25c2 <syncOutputsToBuffers+0xfa>

	{
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,servo_left_out);
    24ea:	e0 91 22 03 	lds	r30, 0x0322
    24ee:	f0 91 23 03 	lds	r31, 0x0323
    24f2:	84 81       	ldd	r24, Z+4	; 0x04
    24f4:	95 81       	ldd	r25, Z+5	; 0x05
    24f6:	fc 01       	movw	r30, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	fc 01       	movw	r30, r24
    24fe:	3e 96       	adiw	r30, 0x0e	; 14
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2508:	98 87       	std	Y+8, r25	; 0x08
    250a:	8f 83       	std	Y+7, r24	; 0x07
		TVP v = GET_FIELD(RealPort,RealPort,p,value);
    250c:	ef 81       	ldd	r30, Y+7	; 0x07
    250e:	f8 85       	ldd	r31, Y+8	; 0x08
    2510:	84 81       	ldd	r24, Z+4	; 0x04
    2512:	95 81       	ldd	r25, Z+5	; 0x05
    2514:	fc 01       	movw	r30, r24
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	fc 01       	movw	r30, r24
    251c:	3e 96       	adiw	r30, 0x0e	; 14
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
		fmiBuffer.realBuffer[3]=v->value.doubleVal;
    252a:	ed 81       	ldd	r30, Y+5	; 0x05
    252c:	fe 81       	ldd	r31, Y+6	; 0x06
    252e:	84 81       	ldd	r24, Z+4	; 0x04
    2530:	95 81       	ldd	r25, Z+5	; 0x05
    2532:	a6 81       	ldd	r26, Z+6	; 0x06
    2534:	b7 81       	ldd	r27, Z+7	; 0x07
    2536:	80 93 d6 03 	sts	0x03D6, r24
    253a:	90 93 d7 03 	sts	0x03D7, r25
    253e:	a0 93 d8 03 	sts	0x03D8, r26
    2542:	b0 93 d9 03 	sts	0x03D9, r27
		vdmFree(v);vdmFree(p);
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    254e:	8f 81       	ldd	r24, Y+7	; 0x07
    2550:	98 85       	ldd	r25, Y+8	; 0x08
    2552:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
	{
		TVP p = GET_FIELD(HardwareInterface,HardwareInterface,g_System_hwi,servo_right_out);
    2556:	e0 91 22 03 	lds	r30, 0x0322
    255a:	f0 91 23 03 	lds	r31, 0x0323
    255e:	84 81       	ldd	r24, Z+4	; 0x04
    2560:	95 81       	ldd	r25, Z+5	; 0x05
    2562:	fc 01       	movw	r30, r24
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	fc 01       	movw	r30, r24
    256a:	3c 96       	adiw	r30, 0x0c	; 12
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
		TVP v = GET_FIELD(RealPort,RealPort,p,value);
    2578:	eb 81       	ldd	r30, Y+3	; 0x03
    257a:	fc 81       	ldd	r31, Y+4	; 0x04
    257c:	84 81       	ldd	r24, Z+4	; 0x04
    257e:	95 81       	ldd	r25, Z+5	; 0x05
    2580:	fc 01       	movw	r30, r24
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	fc 01       	movw	r30, r24
    2588:	3e 96       	adiw	r30, 0x0e	; 14
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
		fmiBuffer.realBuffer[5]=v->value.doubleVal;
    2596:	e9 81       	ldd	r30, Y+1	; 0x01
    2598:	fa 81       	ldd	r31, Y+2	; 0x02
    259a:	84 81       	ldd	r24, Z+4	; 0x04
    259c:	95 81       	ldd	r25, Z+5	; 0x05
    259e:	a6 81       	ldd	r26, Z+6	; 0x06
    25a0:	b7 81       	ldd	r27, Z+7	; 0x07
    25a2:	80 93 de 03 	sts	0x03DE, r24
    25a6:	90 93 df 03 	sts	0x03DF, r25
    25aa:	a0 93 e0 03 	sts	0x03E0, r26
    25ae:	b0 93 e1 03 	sts	0x03E1, r27
		vdmFree(v);vdmFree(p);
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
}
    25c2:	28 96       	adiw	r28, 0x08	; 8
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <periodic_taskg_System_controller__Z12control_loopEV>:
void periodic_taskg_System_controller__Z12control_loopEV()
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
	CALL_FUNC(Controller, Controller, g_System_controller, CLASS_Controller__Z12control_loopEV);
    25dc:	e0 91 24 03 	lds	r30, 0x0324
    25e0:	f0 91 25 03 	lds	r31, 0x0325
    25e4:	84 81       	ldd	r24, Z+4	; 0x04
    25e6:	95 81       	ldd	r25, Z+5	; 0x05
    25e8:	fc 01       	movw	r30, r24
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	fc 01       	movw	r30, r24
    25f6:	36 96       	adiw	r30, 0x06	; 6
    25f8:	84 81       	ldd	r24, Z+4	; 0x04
    25fa:	95 81       	ldd	r25, Z+5	; 0x05
    25fc:	9c 01       	movw	r18, r24
    25fe:	e0 91 24 03 	lds	r30, 0x0324
    2602:	f0 91 25 03 	lds	r31, 0x0325
    2606:	84 81       	ldd	r24, Z+4	; 0x04
    2608:	95 81       	ldd	r25, Z+5	; 0x05
    260a:	fc 01       	movw	r30, r24
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	f9 01       	movw	r30, r18
    2612:	09 95       	icall
	g_fmiCallbackFunctions->logger((void*) 1, g_fmiInstanceName, fmi2OK, "logAll", "called &periodic_taskg_System_controller__Z12control_loopEV\n");
    2614:	e0 91 b8 03 	lds	r30, 0x03B8
    2618:	f0 91 b9 03 	lds	r31, 0x03B9
    261c:	40 81       	ld	r20, Z
    261e:	51 81       	ldd	r21, Z+1	; 0x01
    2620:	20 91 fa 03 	lds	r18, 0x03FA
    2624:	30 91 fb 03 	lds	r19, 0x03FB
    2628:	8d b7       	in	r24, 0x3d	; 61
    262a:	9e b7       	in	r25, 0x3e	; 62
    262c:	0a 97       	sbiw	r24, 0x0a	; 10
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	9e bf       	out	0x3e, r25	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	8d bf       	out	0x3d, r24	; 61
    2638:	ed b7       	in	r30, 0x3d	; 61
    263a:	fe b7       	in	r31, 0x3e	; 62
    263c:	31 96       	adiw	r30, 0x01	; 1
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	33 83       	std	Z+3, r19	; 0x03
    2648:	22 83       	std	Z+2, r18	; 0x02
    264a:	15 82       	std	Z+5, r1	; 0x05
    264c:	14 82       	std	Z+4, r1	; 0x04
    264e:	80 ed       	ldi	r24, 0xD0	; 208
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	97 83       	std	Z+7, r25	; 0x07
    2654:	86 83       	std	Z+6, r24	; 0x06
    2656:	87 ed       	ldi	r24, 0xD7	; 215
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	91 87       	std	Z+9, r25	; 0x09
    265c:	80 87       	std	Z+8, r24	; 0x08
    265e:	fa 01       	movw	r30, r20
    2660:	09 95       	icall
    2662:	8d b7       	in	r24, 0x3d	; 61
    2664:	9e b7       	in	r25, 0x3e	; 62
    2666:	0a 96       	adiw	r24, 0x0a	; 10
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	9e bf       	out	0x3e, r25	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	8d bf       	out	0x3d, r24	; 61
}
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <systemInit>:
{ 1.0E7, &periodic_taskg_System_controller__Z12control_loopEV, 0 }
};


void systemInit()
{
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <systemInit+0xa>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	vdm_gc_init();
    2686:	0e 94 13 48 	call	0x9026	; 0x9026 <vdm_gc_init>

	int i;

	for(i = 0; i < PERIODIC_GENERATED_COUNT; i++) threads[i].period = threads[i].period / 1.0E9;
    268a:	1a 82       	std	Y+2, r1	; 0x02
    268c:	19 82       	std	Y+1, r1	; 0x01
    268e:	36 c0       	rjmp	.+108    	; 0x26fc <systemInit+0x84>
    2690:	09 81       	ldd	r16, Y+1	; 0x01
    2692:	1a 81       	ldd	r17, Y+2	; 0x02
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	9c 01       	movw	r18, r24
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	82 0f       	add	r24, r18
    26a8:	93 1f       	adc	r25, r19
    26aa:	fc 01       	movw	r30, r24
    26ac:	ec 5e       	subi	r30, 0xEC	; 236
    26ae:	fd 4f       	sbci	r31, 0xFD	; 253
    26b0:	80 81       	ld	r24, Z
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	a2 81       	ldd	r26, Z+2	; 0x02
    26b6:	b3 81       	ldd	r27, Z+3	; 0x03
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	28 e2       	ldi	r18, 0x28	; 40
    26be:	3b e6       	ldi	r19, 0x6B	; 107
    26c0:	4e e6       	ldi	r20, 0x6E	; 110
    26c2:	5e e4       	ldi	r21, 0x4E	; 78
    26c4:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	ac 01       	movw	r20, r24
    26ce:	bd 01       	movw	r22, r26
    26d0:	c8 01       	movw	r24, r16
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	9c 01       	movw	r18, r24
    26d8:	22 0f       	add	r18, r18
    26da:	33 1f       	adc	r19, r19
    26dc:	22 0f       	add	r18, r18
    26de:	33 1f       	adc	r19, r19
    26e0:	82 0f       	add	r24, r18
    26e2:	93 1f       	adc	r25, r19
    26e4:	fc 01       	movw	r30, r24
    26e6:	ec 5e       	subi	r30, 0xEC	; 236
    26e8:	fd 4f       	sbci	r31, 0xFD	; 253
    26ea:	40 83       	st	Z, r20
    26ec:	51 83       	std	Z+1, r21	; 0x01
    26ee:	62 83       	std	Z+2, r22	; 0x02
    26f0:	73 83       	std	Z+3, r23	; 0x03
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	18 16       	cp	r1, r24
    2702:	19 06       	cpc	r1, r25
    2704:	2c f6       	brge	.-118    	; 0x2690 <systemInit+0x18>

	RobotSensor_const_init();
    2706:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <RobotSensor_const_init>
	Port_const_init();
    270a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <Port_const_init>
	IntPort_const_init();
    270e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <IntPort_const_init>
	BoolPort_const_init();
    2712:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <BoolPort_const_init>
	RealPort_const_init();
    2716:	0e 94 c1 1b 	call	0x3782	; 0x3782 <RealPort_const_init>
	StringPort_const_init();
    271a:	0e 94 a8 20 	call	0x4150	; 0x4150 <StringPort_const_init>
	Controller_const_init();
    271e:	0e 94 05 0a 	call	0x140a	; 0x140a <Controller_const_init>
	System_const_init();
    2722:	0e 94 27 22 	call	0x444e	; 0x444e <System_const_init>
	World_const_init();
    2726:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <World_const_init>
	HardwareInterface_const_init();
    272a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <HardwareInterface_const_init>
	RobotServo_const_init();
    272e:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <RobotServo_const_init>

	RobotSensor_static_init();
    2732:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <RobotSensor_static_init>
	Port_static_init();
    2736:	0e 94 84 1a 	call	0x3508	; 0x3508 <Port_static_init>
	IntPort_static_init();
    273a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <IntPort_static_init>
	BoolPort_static_init();
    273e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <BoolPort_static_init>
	RealPort_static_init();
    2742:	0e 94 cf 1b 	call	0x379e	; 0x379e <RealPort_static_init>
	StringPort_static_init();
    2746:	0e 94 b6 20 	call	0x416c	; 0x416c <StringPort_static_init>
	Controller_static_init();
    274a:	0e 94 1f 0a 	call	0x143e	; 0x143e <Controller_static_init>
	System_static_init();
    274e:	0e 94 41 22 	call	0x4482	; 0x4482 <System_static_init>
	World_static_init();
    2752:	0e 94 03 24 	call	0x4806	; 0x4806 <World_static_init>
	HardwareInterface_static_init();
    2756:	0e 94 89 17 	call	0x2f12	; 0x2f12 <HardwareInterface_static_init>
	RobotServo_static_init();
    275a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <RobotServo_static_init>

	sys = _Z6SystemEV(NULL);
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 cb 22 	call	0x4596	; 0x4596 <_Z6SystemEV>
    2766:	90 93 d7 02 	sts	0x02D7, r25
    276a:	80 93 d6 02 	sts	0x02D6, r24

}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	08 95       	ret

0000277c <systemDeInit>:


void systemDeInit()
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	RobotSensor_static_shutdown();
    2784:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <RobotSensor_static_shutdown>
	Port_static_shutdown();
    2788:	0e 94 8b 1a 	call	0x3516	; 0x3516 <Port_static_shutdown>
	IntPort_static_shutdown();
    278c:	0e 94 01 19 	call	0x3202	; 0x3202 <IntPort_static_shutdown>
	BoolPort_static_shutdown();
    2790:	0e 94 81 04 	call	0x902	; 0x902 <BoolPort_static_shutdown>
	RealPort_static_shutdown();
    2794:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <RealPort_static_shutdown>
	StringPort_static_shutdown();
    2798:	0e 94 bd 20 	call	0x417a	; 0x417a <StringPort_static_shutdown>
	Controller_static_shutdown();
    279c:	0e 94 26 0a 	call	0x144c	; 0x144c <Controller_static_shutdown>
	System_static_shutdown();
    27a0:	0e 94 54 22 	call	0x44a8	; 0x44a8 <System_static_shutdown>
	World_static_shutdown();
    27a4:	0e 94 0a 24 	call	0x4814	; 0x4814 <World_static_shutdown>
	HardwareInterface_static_shutdown();
    27a8:	0e 94 90 17 	call	0x2f20	; 0x2f20 <HardwareInterface_static_shutdown>
	RobotServo_static_shutdown();
    27ac:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <RobotServo_static_shutdown>

	RobotSensor_const_shutdown();
    27b0:	0e 94 75 1d 	call	0x3aea	; 0x3aea <RobotSensor_const_shutdown>
	Port_const_shutdown();
    27b4:	0e 94 77 1a 	call	0x34ee	; 0x34ee <Port_const_shutdown>
	IntPort_const_shutdown();
    27b8:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <IntPort_const_shutdown>
	BoolPort_const_shutdown();
    27bc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <BoolPort_const_shutdown>
	RealPort_const_shutdown();
    27c0:	0e 94 c8 1b 	call	0x3790	; 0x3790 <RealPort_const_shutdown>
	StringPort_const_shutdown();
    27c4:	0e 94 af 20 	call	0x415e	; 0x415e <StringPort_const_shutdown>
	Controller_const_shutdown();
    27c8:	0e 94 12 0a 	call	0x1424	; 0x1424 <Controller_const_shutdown>
	System_const_shutdown();
    27cc:	0e 94 34 22 	call	0x4468	; 0x4468 <System_const_shutdown>
	World_const_shutdown();
    27d0:	0e 94 f6 23 	call	0x47ec	; 0x47ec <World_const_shutdown>
	HardwareInterface_const_shutdown();
    27d4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <HardwareInterface_const_shutdown>
	RobotServo_const_shutdown();
    27d8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <RobotServo_const_shutdown>

	vdmFree(sys);
    27dc:	80 91 d6 02 	lds	r24, 0x02D6
    27e0:	90 91 d7 02 	lds	r25, 0x02D7
    27e4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

	vdm_gc_shutdown();
    27e8:	0e 94 6b 49 	call	0x92d6	; 0x92d6 <vdm_gc_shutdown>
}
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <vdmStep>:

/*
* Both time value are given in seconds
*/
fmi2Status vdmStep(fmi2Real currentCommunicationPoint, fmi2Real communicationStepSize)
{
    27f2:	cf 92       	push	r12
    27f4:	df 92       	push	r13
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	0f 93       	push	r16
    27fc:	1f 93       	push	r17
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	2e 97       	sbiw	r28, 0x0e	; 14
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	6f 83       	std	Y+7, r22	; 0x07
    2814:	78 87       	std	Y+8, r23	; 0x08
    2816:	89 87       	std	Y+9, r24	; 0x09
    2818:	9a 87       	std	Y+10, r25	; 0x0a
    281a:	2b 87       	std	Y+11, r18	; 0x0b
    281c:	3c 87       	std	Y+12, r19	; 0x0c
    281e:	4d 87       	std	Y+13, r20	; 0x0d
    2820:	5e 87       	std	Y+14, r21	; 0x0e
	int i, j;
	int threadRunCount;

	/*  Call each thread the appropriate number of times.  */
	for(i = 0;  i < PERIODIC_GENERATED_COUNT; i++)
    2822:	1e 82       	std	Y+6, r1	; 0x06
    2824:	1d 82       	std	Y+5, r1	; 0x05
    2826:	a1 c1       	rjmp	.+834    	; 0x2b6a <vdmStep+0x378>
	{
		/*  Times align, sync took place last time.  */
		if(threads[i].lastExecuted >= currentCommunicationPoint)
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	9c 01       	movw	r18, r24
    2832:	22 0f       	add	r18, r18
    2834:	33 1f       	adc	r19, r19
    2836:	22 0f       	add	r18, r18
    2838:	33 1f       	adc	r19, r19
    283a:	82 0f       	add	r24, r18
    283c:	93 1f       	adc	r25, r19
    283e:	fc 01       	movw	r30, r24
    2840:	e6 5e       	subi	r30, 0xE6	; 230
    2842:	fd 4f       	sbci	r31, 0xFD	; 253
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	a2 81       	ldd	r26, Z+2	; 0x02
    284a:	b3 81       	ldd	r27, Z+3	; 0x03
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	2f 81       	ldd	r18, Y+7	; 0x07
    2852:	38 85       	ldd	r19, Y+8	; 0x08
    2854:	49 85       	ldd	r20, Y+9	; 0x09
    2856:	5a 85       	ldd	r21, Y+10	; 0x0a
    2858:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
    285c:	88 23       	and	r24, r24
    285e:	0c f4       	brge	.+2      	; 0x2862 <vdmStep+0x70>
    2860:	c6 c0       	rjmp	.+396    	; 0x29ee <vdmStep+0x1fc>
		{
			/*  Can not do anything, still waiting for the last step's turn to come.  */
			if(threads[i].lastExecuted >= currentCommunicationPoint + communicationStepSize)
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	9c 01       	movw	r18, r24
    286c:	22 0f       	add	r18, r18
    286e:	33 1f       	adc	r19, r19
    2870:	22 0f       	add	r18, r18
    2872:	33 1f       	adc	r19, r19
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	fc 01       	movw	r30, r24
    287a:	e6 5e       	subi	r30, 0xE6	; 230
    287c:	fd 4f       	sbci	r31, 0xFD	; 253
    287e:	e0 80       	ld	r14, Z
    2880:	f1 80       	ldd	r15, Z+1	; 0x01
    2882:	02 81       	ldd	r16, Z+2	; 0x02
    2884:	13 81       	ldd	r17, Z+3	; 0x03
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2890:	3c 85       	ldd	r19, Y+12	; 0x0c
    2892:	4d 85       	ldd	r20, Y+13	; 0x0d
    2894:	5e 85       	ldd	r21, Y+14	; 0x0e
    2896:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9c 01       	movw	r18, r24
    28a0:	ad 01       	movw	r20, r26
    28a2:	c8 01       	movw	r24, r16
    28a4:	b7 01       	movw	r22, r14
    28a6:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
    28aa:	88 23       	and	r24, r24
    28ac:	3c f0       	brlt	.+14     	; 0x28bc <vdmStep+0xca>
			{
				threadRunCount = 0;
    28ae:	1a 82       	std	Y+2, r1	; 0x02
    28b0:	19 82       	std	Y+1, r1	; 0x01
				syncOutAllowed = fmi2False;
    28b2:	10 92 cf 01 	sts	0x01CF, r1
    28b6:	10 92 ce 01 	sts	0x01CE, r1
    28ba:	ef c0       	rjmp	.+478    	; 0x2a9a <vdmStep+0x2a8>
			}
			/*  Previous step will finish inside this step.
			*   At least one execution can be fit inside this step.
			*/
			else if(threads[i].lastExecuted + threads[i].period <= currentCommunicationPoint + communicationStepSize)
    28bc:	8d 81       	ldd	r24, Y+5	; 0x05
    28be:	9e 81       	ldd	r25, Y+6	; 0x06
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	9c 01       	movw	r18, r24
    28c6:	22 0f       	add	r18, r18
    28c8:	33 1f       	adc	r19, r19
    28ca:	22 0f       	add	r18, r18
    28cc:	33 1f       	adc	r19, r19
    28ce:	82 0f       	add	r24, r18
    28d0:	93 1f       	adc	r25, r19
    28d2:	fc 01       	movw	r30, r24
    28d4:	e6 5e       	subi	r30, 0xE6	; 230
    28d6:	fd 4f       	sbci	r31, 0xFD	; 253
    28d8:	e0 80       	ld	r14, Z
    28da:	f1 80       	ldd	r15, Z+1	; 0x01
    28dc:	02 81       	ldd	r16, Z+2	; 0x02
    28de:	13 81       	ldd	r17, Z+3	; 0x03
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	9c 01       	movw	r18, r24
    28ea:	22 0f       	add	r18, r18
    28ec:	33 1f       	adc	r19, r19
    28ee:	22 0f       	add	r18, r18
    28f0:	33 1f       	adc	r19, r19
    28f2:	82 0f       	add	r24, r18
    28f4:	93 1f       	adc	r25, r19
    28f6:	fc 01       	movw	r30, r24
    28f8:	ec 5e       	subi	r30, 0xEC	; 236
    28fa:	fd 4f       	sbci	r31, 0xFD	; 253
    28fc:	20 81       	ld	r18, Z
    28fe:	31 81       	ldd	r19, Z+1	; 0x01
    2900:	42 81       	ldd	r20, Z+2	; 0x02
    2902:	53 81       	ldd	r21, Z+3	; 0x03
    2904:	c8 01       	movw	r24, r16
    2906:	b7 01       	movw	r22, r14
    2908:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	7c 01       	movw	r14, r24
    2912:	8d 01       	movw	r16, r26
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	2b 85       	ldd	r18, Y+11	; 0x0b
    291e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2920:	4d 85       	ldd	r20, Y+13	; 0x0d
    2922:	5e 85       	ldd	r21, Y+14	; 0x0e
    2924:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9c 01       	movw	r18, r24
    292e:	ad 01       	movw	r20, r26
    2930:	c8 01       	movw	r24, r16
    2932:	b7 01       	movw	r22, r14
    2934:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    2938:	18 16       	cp	r1, r24
    293a:	0c f4       	brge	.+2      	; 0x293e <vdmStep+0x14c>
    293c:	4f c0       	rjmp	.+158    	; 0x29dc <vdmStep+0x1ea>
			{
				/*  Find number of executions to fit inside of step, allow sync.  */
				threadRunCount = (currentCommunicationPoint + communicationStepSize - threads[i].lastExecuted) / threads[i].period;
    293e:	6f 81       	ldd	r22, Y+7	; 0x07
    2940:	78 85       	ldd	r23, Y+8	; 0x08
    2942:	89 85       	ldd	r24, Y+9	; 0x09
    2944:	9a 85       	ldd	r25, Y+10	; 0x0a
    2946:	2b 85       	ldd	r18, Y+11	; 0x0b
    2948:	3c 85       	ldd	r19, Y+12	; 0x0c
    294a:	4d 85       	ldd	r20, Y+13	; 0x0d
    294c:	5e 85       	ldd	r21, Y+14	; 0x0e
    294e:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	7c 01       	movw	r14, r24
    2958:	8d 01       	movw	r16, r26
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	9c 01       	movw	r18, r24
    2964:	22 0f       	add	r18, r18
    2966:	33 1f       	adc	r19, r19
    2968:	22 0f       	add	r18, r18
    296a:	33 1f       	adc	r19, r19
    296c:	82 0f       	add	r24, r18
    296e:	93 1f       	adc	r25, r19
    2970:	fc 01       	movw	r30, r24
    2972:	e6 5e       	subi	r30, 0xE6	; 230
    2974:	fd 4f       	sbci	r31, 0xFD	; 253
    2976:	20 81       	ld	r18, Z
    2978:	31 81       	ldd	r19, Z+1	; 0x01
    297a:	42 81       	ldd	r20, Z+2	; 0x02
    297c:	53 81       	ldd	r21, Z+3	; 0x03
    297e:	c8 01       	movw	r24, r16
    2980:	b7 01       	movw	r22, r14
    2982:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	7c 01       	movw	r14, r24
    298c:	8d 01       	movw	r16, r26
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	9c 01       	movw	r18, r24
    2998:	22 0f       	add	r18, r18
    299a:	33 1f       	adc	r19, r19
    299c:	22 0f       	add	r18, r18
    299e:	33 1f       	adc	r19, r19
    29a0:	82 0f       	add	r24, r18
    29a2:	93 1f       	adc	r25, r19
    29a4:	fc 01       	movw	r30, r24
    29a6:	ec 5e       	subi	r30, 0xEC	; 236
    29a8:	fd 4f       	sbci	r31, 0xFD	; 253
    29aa:	20 81       	ld	r18, Z
    29ac:	31 81       	ldd	r19, Z+1	; 0x01
    29ae:	42 81       	ldd	r20, Z+2	; 0x02
    29b0:	53 81       	ldd	r21, Z+3	; 0x03
    29b2:	c8 01       	movw	r24, r16
    29b4:	b7 01       	movw	r22, r14
    29b6:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
				syncOutAllowed = fmi2True;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	90 93 cf 01 	sts	0x01CF, r25
    29d6:	80 93 ce 01 	sts	0x01CE, r24
    29da:	5f c0       	rjmp	.+190    	; 0x2a9a <vdmStep+0x2a8>
			}
			/*  Can not execute, but can sync existing values at the end of this step.  */
			else 
			{
				threadRunCount = 0;
    29dc:	1a 82       	std	Y+2, r1	; 0x02
    29de:	19 82       	std	Y+1, r1	; 0x01
				syncOutAllowed = fmi2True;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	90 93 cf 01 	sts	0x01CF, r25
    29e8:	80 93 ce 01 	sts	0x01CE, r24
    29ec:	56 c0       	rjmp	.+172    	; 0x2a9a <vdmStep+0x2a8>
			}
		}
		else
		{
			/*  Find number of executions to fit inside of step, allow sync because need to update regardless.  */
			threadRunCount = (currentCommunicationPoint + communicationStepSize - threads[i].lastExecuted) / threads[i].period;
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    29f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    29fa:	4d 85       	ldd	r20, Y+13	; 0x0d
    29fc:	5e 85       	ldd	r21, Y+14	; 0x0e
    29fe:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	7c 01       	movw	r14, r24
    2a08:	8d 01       	movw	r16, r26
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	9c 01       	movw	r18, r24
    2a14:	22 0f       	add	r18, r18
    2a16:	33 1f       	adc	r19, r19
    2a18:	22 0f       	add	r18, r18
    2a1a:	33 1f       	adc	r19, r19
    2a1c:	82 0f       	add	r24, r18
    2a1e:	93 1f       	adc	r25, r19
    2a20:	fc 01       	movw	r30, r24
    2a22:	e6 5e       	subi	r30, 0xE6	; 230
    2a24:	fd 4f       	sbci	r31, 0xFD	; 253
    2a26:	20 81       	ld	r18, Z
    2a28:	31 81       	ldd	r19, Z+1	; 0x01
    2a2a:	42 81       	ldd	r20, Z+2	; 0x02
    2a2c:	53 81       	ldd	r21, Z+3	; 0x03
    2a2e:	c8 01       	movw	r24, r16
    2a30:	b7 01       	movw	r22, r14
    2a32:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	7c 01       	movw	r14, r24
    2a3c:	8d 01       	movw	r16, r26
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	88 0f       	add	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	9c 01       	movw	r18, r24
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	82 0f       	add	r24, r18
    2a52:	93 1f       	adc	r25, r19
    2a54:	fc 01       	movw	r30, r24
    2a56:	ec 5e       	subi	r30, 0xEC	; 236
    2a58:	fd 4f       	sbci	r31, 0xFD	; 253
    2a5a:	20 81       	ld	r18, Z
    2a5c:	31 81       	ldd	r19, Z+1	; 0x01
    2a5e:	42 81       	ldd	r20, Z+2	; 0x02
    2a60:	53 81       	ldd	r21, Z+3	; 0x03
    2a62:	c8 01       	movw	r24, r16
    2a64:	b7 01       	movw	r22, r14
    2a66:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
			syncOutAllowed = fmi2True;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	90 93 cf 01 	sts	0x01CF, r25
    2a86:	80 93 ce 01 	sts	0x01CE, r24

			/*  Period too long for this step so postpone until next step.  */
			if(threadRunCount == 0)
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	21 f4       	brne	.+8      	; 0x2a9a <vdmStep+0x2a8>
			{
				syncOutAllowed = fmi2False;
    2a92:	10 92 cf 01 	sts	0x01CF, r1
    2a96:	10 92 ce 01 	sts	0x01CE, r1
			}
		}		

		/*  Execute each thread the number of times that its period fits in the step size.  */
		for(j = 0; j < threadRunCount; j++)
    2a9a:	1c 82       	std	Y+4, r1	; 0x04
    2a9c:	1b 82       	std	Y+3, r1	; 0x03
    2a9e:	56 c0       	rjmp	.+172    	; 0x2b4c <vdmStep+0x35a>
		{
			threads[i].call();
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	9c 01       	movw	r18, r24
    2aaa:	22 0f       	add	r18, r18
    2aac:	33 1f       	adc	r19, r19
    2aae:	22 0f       	add	r18, r18
    2ab0:	33 1f       	adc	r19, r19
    2ab2:	82 0f       	add	r24, r18
    2ab4:	93 1f       	adc	r25, r19
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e8 5e       	subi	r30, 0xE8	; 232
    2aba:	fd 4f       	sbci	r31, 0xFD	; 253
    2abc:	01 90       	ld	r0, Z+
    2abe:	f0 81       	ld	r31, Z
    2ac0:	e0 2d       	mov	r30, r0
    2ac2:	09 95       	icall

			/*  Update the thread's last execution time.  */
			threads[i].lastExecuted += threads[i].period;
    2ac4:	cd 80       	ldd	r12, Y+5	; 0x05
    2ac6:	de 80       	ldd	r13, Y+6	; 0x06
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	9c 01       	movw	r18, r24
    2ad2:	22 0f       	add	r18, r18
    2ad4:	33 1f       	adc	r19, r19
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	82 0f       	add	r24, r18
    2adc:	93 1f       	adc	r25, r19
    2ade:	fc 01       	movw	r30, r24
    2ae0:	e6 5e       	subi	r30, 0xE6	; 230
    2ae2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ae4:	e0 80       	ld	r14, Z
    2ae6:	f1 80       	ldd	r15, Z+1	; 0x01
    2ae8:	02 81       	ldd	r16, Z+2	; 0x02
    2aea:	13 81       	ldd	r17, Z+3	; 0x03
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	9c 01       	movw	r18, r24
    2af6:	22 0f       	add	r18, r18
    2af8:	33 1f       	adc	r19, r19
    2afa:	22 0f       	add	r18, r18
    2afc:	33 1f       	adc	r19, r19
    2afe:	82 0f       	add	r24, r18
    2b00:	93 1f       	adc	r25, r19
    2b02:	fc 01       	movw	r30, r24
    2b04:	ec 5e       	subi	r30, 0xEC	; 236
    2b06:	fd 4f       	sbci	r31, 0xFD	; 253
    2b08:	20 81       	ld	r18, Z
    2b0a:	31 81       	ldd	r19, Z+1	; 0x01
    2b0c:	42 81       	ldd	r20, Z+2	; 0x02
    2b0e:	53 81       	ldd	r21, Z+3	; 0x03
    2b10:	c8 01       	movw	r24, r16
    2b12:	b7 01       	movw	r22, r14
    2b14:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	bd 01       	movw	r22, r26
    2b20:	c6 01       	movw	r24, r12
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	9c 01       	movw	r18, r24
    2b28:	22 0f       	add	r18, r18
    2b2a:	33 1f       	adc	r19, r19
    2b2c:	22 0f       	add	r18, r18
    2b2e:	33 1f       	adc	r19, r19
    2b30:	82 0f       	add	r24, r18
    2b32:	93 1f       	adc	r25, r19
    2b34:	fc 01       	movw	r30, r24
    2b36:	e6 5e       	subi	r30, 0xE6	; 230
    2b38:	fd 4f       	sbci	r31, 0xFD	; 253
    2b3a:	40 83       	st	Z, r20
    2b3c:	51 83       	std	Z+1, r21	; 0x01
    2b3e:	62 83       	std	Z+2, r22	; 0x02
    2b40:	73 83       	std	Z+3, r23	; 0x03
				syncOutAllowed = fmi2False;
			}
		}		

		/*  Execute each thread the number of times that its period fits in the step size.  */
		for(j = 0; j < threadRunCount; j++)
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	9c 83       	std	Y+4, r25	; 0x04
    2b4a:	8b 83       	std	Y+3, r24	; 0x03
    2b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	28 17       	cp	r18, r24
    2b56:	39 07       	cpc	r19, r25
    2b58:	0c f4       	brge	.+2      	; 0x2b5c <vdmStep+0x36a>
    2b5a:	a2 cf       	rjmp	.-188    	; 0x2aa0 <vdmStep+0x2ae>

			/*  Update the thread's last execution time.  */
			threads[i].lastExecuted += threads[i].period;
		}

		vdm_gc();
    2b5c:	0e 94 b0 49 	call	0x9360	; 0x9360 <vdm_gc>
{
	int i, j;
	int threadRunCount;

	/*  Call each thread the appropriate number of times.  */
	for(i = 0;  i < PERIODIC_GENERATED_COUNT; i++)
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	9e 83       	std	Y+6, r25	; 0x06
    2b68:	8d 83       	std	Y+5, r24	; 0x05
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6e:	18 16       	cp	r1, r24
    2b70:	19 06       	cpc	r1, r25
    2b72:	0c f0       	brlt	.+2      	; 0x2b76 <vdmStep+0x384>
    2b74:	59 ce       	rjmp	.-846    	; 0x2828 <vdmStep+0x36>

	/* Calculate maximum step size for next step.  Cyclic controllers with no feedback do not have
	a limit on how large a step they can take.  To be considered in the future for controllers
	with feedback.
	*/
	maxStepSize = INT_MAX * 1.0;
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	9e ef       	ldi	r25, 0xFE	; 254
    2b7a:	af ef       	ldi	r26, 0xFF	; 255
    2b7c:	b6 e4       	ldi	r27, 0x46	; 70
    2b7e:	80 93 d8 02 	sts	0x02D8, r24
    2b82:	90 93 d9 02 	sts	0x02D9, r25
    2b86:	a0 93 da 02 	sts	0x02DA, r26
    2b8a:	b0 93 db 02 	sts	0x02DB, r27

	/*  g_fmiCallbackFunctions->logger((void*) 1, g_fmiInstanceName, fmi2OK, "logDebug", "NOW:  %f, TP: %f, LE:  %f, STEP:  %f, SYNC:  %d, RUNS:  %d\n", currentCommunicationPoint, threads[0].period, threads[0].lastExecuted, communicationStepSize, syncOutAllowed, threadRunCount);  */

	return fmi2OK;
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	90 e0       	ldi	r25, 0x00	; 0
}
    2b92:	2e 96       	adiw	r28, 0x0e	; 14
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    2bae:	08 95       	ret

00002bb0 <systemMain>:

void systemMain()
{
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <systemMain+0x6>
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
	TVP world = _Z5WorldEV(NULL);
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0e 94 75 24 	call	0x48ea	; 0x48ea <_Z5WorldEV>
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
	CALL_FUNC(World, World, world, CLASS_World__Z3runEV);
    2bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bca:	84 81       	ldd	r24, Z+4	; 0x04
    2bcc:	95 81       	ldd	r25, Z+5	; 0x05
    2bce:	fc 01       	movw	r30, r24
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	01 90       	ld	r0, Z+
    2bd8:	f0 81       	ld	r31, Z
    2bda:	e0 2d       	mov	r30, r0
    2bdc:	84 81       	ldd	r24, Z+4	; 0x04
    2bde:	95 81       	ldd	r25, Z+5	; 0x05
    2be0:	9c 01       	movw	r18, r24
    2be2:	e9 81       	ldd	r30, Y+1	; 0x01
    2be4:	fa 81       	ldd	r31, Y+2	; 0x02
    2be6:	84 81       	ldd	r24, Z+4	; 0x04
    2be8:	95 81       	ldd	r25, Z+5	; 0x05
    2bea:	fc 01       	movw	r30, r24
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	f9 01       	movw	r30, r18
    2bf2:	09 95       	icall
	vdmFree(world);
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
}
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <HardwareInterface_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void HardwareInterface_free_fields(struct HardwareInterface *this)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <HardwareInterface_free_fields+0x6>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01
						vdmFree(this->m_HardwareInterface_leftVal);
    2c14:	e9 81       	ldd	r30, Y+1	; 0x01
    2c16:	fa 81       	ldd	r31, Y+2	; 0x02
    2c18:	86 81       	ldd	r24, Z+6	; 0x06
    2c1a:	97 81       	ldd	r25, Z+7	; 0x07
    2c1c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(this->m_HardwareInterface_rightVal);
    2c20:	e9 81       	ldd	r30, Y+1	; 0x01
    2c22:	fa 81       	ldd	r31, Y+2	; 0x02
    2c24:	80 85       	ldd	r24, Z+8	; 0x08
    2c26:	91 85       	ldd	r25, Z+9	; 0x09
    2c28:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(this->m_HardwareInterface_total_energy_used);
    2c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c30:	82 85       	ldd	r24, Z+10	; 0x0a
    2c32:	93 85       	ldd	r25, Z+11	; 0x0b
    2c34:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(this->m_HardwareInterface_servo_right_out);
    2c38:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3c:	84 85       	ldd	r24, Z+12	; 0x0c
    2c3e:	95 85       	ldd	r25, Z+13	; 0x0d
    2c40:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(this->m_HardwareInterface_servo_left_out);
    2c44:	e9 81       	ldd	r30, Y+1	; 0x01
    2c46:	fa 81       	ldd	r31, Y+2	; 0x02
    2c48:	86 85       	ldd	r24, Z+14	; 0x0e
    2c4a:	97 85       	ldd	r25, Z+15	; 0x0f
    2c4c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <HardwareInterface_free>:

static void HardwareInterface_free(struct HardwareInterface *this)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <HardwareInterface_free+0x6>
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
	--this->_HardwareInterface_refs;
    2c68:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6c:	84 81       	ldd	r24, Z+4	; 0x04
    2c6e:	95 81       	ldd	r25, Z+5	; 0x05
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	e9 81       	ldd	r30, Y+1	; 0x01
    2c74:	fa 81       	ldd	r31, Y+2	; 0x02
    2c76:	95 83       	std	Z+5, r25	; 0x05
    2c78:	84 83       	std	Z+4, r24	; 0x04
	if (this->_HardwareInterface_refs < 1)
    2c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7e:	84 81       	ldd	r24, Z+4	; 0x04
    2c80:	95 81       	ldd	r25, Z+5	; 0x05
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	41 f4       	brne	.+16     	; 0x2c96 <HardwareInterface_free+0x3c>
	{
		HardwareInterface_free_fields(this);
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <HardwareInterface_free_fields>
		free(this);
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	9a 81       	ldd	r25, Y+2	; 0x02
    2c92:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <_Z18fieldInitializer20EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer20EV(HardwareInterfaceCLASS this)	{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <_Z18fieldInitializer20EV+0x6>
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <_Z18fieldInitializer20EV+0x8>
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	9c 83       	std	Y+4, r25	; 0x04
    2cae:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 26:39 */
TVP ret_17 = _Z8RealPortER(NULL, newReal(0.0))
;
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	70 e0       	ldi	r23, 0x00	; 0
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2cbc:	9c 01       	movw	r18, r24
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01

return ret_17;
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <_Z18fieldInitializer19EV>:



 static  TVP _Z18fieldInitializer19EV(HardwareInterfaceCLASS this)	{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <_Z18fieldInitializer19EV+0x6>
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <_Z18fieldInitializer19EV+0x8>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9c 83       	std	Y+4, r25	; 0x04
    2cec:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 24:40 */
TVP ret_18 = _Z8RealPortER(NULL, newReal(0.0))
;
    2cee:	60 e0       	ldi	r22, 0x00	; 0
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2cfa:	9c 01       	movw	r18, r24
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	b9 01       	movw	r22, r18
    2d02:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2d06:	9a 83       	std	Y+2, r25	; 0x02
    2d08:	89 83       	std	Y+1, r24	; 0x01

return ret_18;
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <_Z18fieldInitializer18EV>:



 static  TVP _Z18fieldInitializer18EV(HardwareInterfaceCLASS this)	{
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <_Z18fieldInitializer18EV+0x6>
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <_Z18fieldInitializer18EV+0x8>
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 19:42 */
TVP ret_19 = _Z8RealPortER(NULL, newReal(0.0))
;
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2d38:	9c 01       	movw	r18, r24
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	b9 01       	movw	r22, r18
    2d40:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01

return ret_19;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <_Z18fieldInitializer17EV>:



 static  TVP _Z18fieldInitializer17EV(HardwareInterfaceCLASS this)	{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <_Z18fieldInitializer17EV+0x6>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <_Z18fieldInitializer17EV+0x8>
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 17:33 */
TVP ret_20 = _Z8RealPortER(NULL, newReal(0.0))
;
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	70 e0       	ldi	r23, 0x00	; 0
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2d76:	9c 01       	movw	r18, r24
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	b9 01       	movw	r22, r18
    2d7e:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2d82:	9a 83       	std	Y+2, r25	; 0x02
    2d84:	89 83       	std	Y+1, r24	; 0x01

return ret_20;
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <_Z18fieldInitializer16EV>:



 static  TVP _Z18fieldInitializer16EV(HardwareInterfaceCLASS this)	{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <_Z18fieldInitializer16EV+0x6>
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <_Z18fieldInitializer16EV+0x8>
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
/* HardwareInterface.vdmrt 15:32 */
TVP ret_21 = _Z8RealPortER(NULL, newReal(0.0))
;
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2db4:	9c 01       	movw	r18, r24
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	b9 01       	movw	r22, r18
    2dbc:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2dc0:	9a 83       	std	Y+2, r25	; 0x02
    2dc2:	89 83       	std	Y+1, r24	; 0x01

return ret_21;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <_Z18fieldInitializer15EV>:



 static  TVP _Z18fieldInitializer15EV()	{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <_Z18fieldInitializer15EV+0x6>
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
/* HardwareInterface.vdmrt 9:40 */
TVP ret_22 = _Z8RealPortER(NULL, newReal(1.0))
;
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	80 e8       	ldi	r24, 0x80	; 128
    2de6:	9f e3       	ldi	r25, 0x3F	; 63
    2de8:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2dec:	9c 01       	movw	r18, r24
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	b9 01       	movw	r22, r18
    2df4:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01

return ret_22;
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <_Z18fieldInitializer14EV>:



 static  TVP _Z18fieldInitializer14EV()	{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <_Z18fieldInitializer14EV+0x6>
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
/* HardwareInterface.vdmrt 7:39 */
TVP ret_23 = _Z8RealPortER(NULL, newReal(5.0))
;
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	70 e0       	ldi	r23, 0x00	; 0
    2e18:	80 ea       	ldi	r24, 0xA0	; 160
    2e1a:	90 e4       	ldi	r25, 0x40	; 64
    2e1c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2e20:	9c 01       	movw	r18, r24
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	b9 01       	movw	r22, r18
    2e28:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2e2c:	9a 83       	std	Y+2, r25	; 0x02
    2e2e:	89 83       	std	Y+1, r24	; 0x01

return ret_23;
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <_Z18fieldInitializer13EV>:



 static  TVP _Z18fieldInitializer13EV()	{
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <_Z18fieldInitializer13EV+0x6>
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
/* HardwareInterface.vdmrt 5:38 */
TVP ret_24 = _Z8RealPortER(NULL, newReal(4.0))
;
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	80 e8       	ldi	r24, 0x80	; 128
    2e4e:	90 e4       	ldi	r25, 0x40	; 64
    2e50:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    2e54:	9c 01       	movw	r18, r24
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	b9 01       	movw	r22, r18
    2e5c:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8RealPortER>
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01

return ret_24;
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <_Z18fieldInitializer12EV>:



 static  TVP _Z18fieldInitializer12EV()	{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <_Z18fieldInitializer12EV+0x6>
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62

TVP ret_25 = newInt(8)
;
    2e7c:	88 e0       	ldi	r24, 0x08	; 8
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01

return ret_25;
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <HardwareInterface_const_init>:



 void HardwareInterface_const_init()	{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62

numFields_6 = _Z18fieldInitializer12EV();
    2e9e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <_Z18fieldInitializer12EV>
    2ea2:	90 93 dd 02 	sts	0x02DD, r25
    2ea6:	80 93 dc 02 	sts	0x02DC, r24

g_HardwareInterface_forwardSpeed = _Z18fieldInitializer13EV();
    2eaa:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <_Z18fieldInitializer13EV>
    2eae:	90 93 df 02 	sts	0x02DF, r25
    2eb2:	80 93 de 02 	sts	0x02DE, r24

g_HardwareInterface_forwardRotate = _Z18fieldInitializer14EV();
    2eb6:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z18fieldInitializer14EV>
    2eba:	90 93 e1 02 	sts	0x02E1, r25
    2ebe:	80 93 e0 02 	sts	0x02E0, r24

g_HardwareInterface_backwardRotate = _Z18fieldInitializer15EV();
    2ec2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_Z18fieldInitializer15EV>
    2ec6:	90 93 e3 02 	sts	0x02E3, r25
    2eca:	80 93 e2 02 	sts	0x02E2, r24

return ;
}
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <HardwareInterface_const_shutdown>:



 void HardwareInterface_const_shutdown()	{
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_6);
    2edc:	80 91 dc 02 	lds	r24, 0x02DC
    2ee0:	90 91 dd 02 	lds	r25, 0x02DD
    2ee4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

vdmFree(g_HardwareInterface_forwardSpeed);
    2ee8:	80 91 de 02 	lds	r24, 0x02DE
    2eec:	90 91 df 02 	lds	r25, 0x02DF
    2ef0:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

vdmFree(g_HardwareInterface_forwardRotate);
    2ef4:	80 91 e0 02 	lds	r24, 0x02E0
    2ef8:	90 91 e1 02 	lds	r25, 0x02E1
    2efc:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

vdmFree(g_HardwareInterface_backwardRotate);
    2f00:	80 91 e2 02 	lds	r24, 0x02E2
    2f04:	90 91 e3 02 	lds	r25, 0x02E3
    2f08:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <HardwareInterface_static_init>:



 void HardwareInterface_static_init()	{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62

return ;
}
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <HardwareInterface_static_shutdown>:



 void HardwareInterface_static_shutdown()	{
    2f20:	df 93       	push	r29
    2f22:	cf 93       	push	r28
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62

return ;
}
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <HardwareInterface_Constructor>:
 *
 --------------------------------- */
 
 
HardwareInterfaceCLASS HardwareInterface_Constructor(HardwareInterfaceCLASS this_ptr)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <HardwareInterface_Constructor+0x6>
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	31 f4       	brne	.+12     	; 0x2f50 <HardwareInterface_Constructor+0x22>
	{
		this_ptr = (HardwareInterfaceCLASS) malloc(sizeof(struct HardwareInterface));
    2f44:	82 e1       	ldi	r24, 0x12	; 18
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	c1 f1       	breq	.+112    	; 0x2fc8 <HardwareInterface_Constructor+0x9a>
	{
	
			
		/*  HardwareInterface init  */
		this_ptr->_HardwareInterface_id = CLASS_ID_HardwareInterface_ID;
    2f58:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f5c:	89 e0       	ldi	r24, 0x09	; 9
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	93 83       	std	Z+3, r25	; 0x03
    2f62:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_HardwareInterface_refs = 0;
    2f64:	e9 81       	ldd	r30, Y+1	; 0x01
    2f66:	fa 81       	ldd	r31, Y+2	; 0x02
    2f68:	15 82       	std	Z+5, r1	; 0x05
    2f6a:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_HardwareInterface_pVTable=VTableArrayForHardwareInterface;
    2f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f70:	8e e1       	ldi	r24, 0x1E	; 30
    2f72:	92 e0       	ldi	r25, 0x02	; 2
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	80 83       	st	Z, r24

																this_ptr->m_HardwareInterface_leftVal= _Z18fieldInitializer16EV(this_ptr);
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_Z18fieldInitializer16EV>
    2f80:	e9 81       	ldd	r30, Y+1	; 0x01
    2f82:	fa 81       	ldd	r31, Y+2	; 0x02
    2f84:	97 83       	std	Z+7, r25	; 0x07
    2f86:	86 83       	std	Z+6, r24	; 0x06
						this_ptr->m_HardwareInterface_rightVal= _Z18fieldInitializer17EV(this_ptr);
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8c:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_Z18fieldInitializer17EV>
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	91 87       	std	Z+9, r25	; 0x09
    2f96:	80 87       	std	Z+8, r24	; 0x08
						this_ptr->m_HardwareInterface_total_energy_used= _Z18fieldInitializer18EV(this_ptr);
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_Z18fieldInitializer18EV>
    2fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa4:	93 87       	std	Z+11, r25	; 0x0b
    2fa6:	82 87       	std	Z+10, r24	; 0x0a
						this_ptr->m_HardwareInterface_servo_right_out= _Z18fieldInitializer19EV(this_ptr);
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_Z18fieldInitializer19EV>
    2fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb4:	95 87       	std	Z+13, r25	; 0x0d
    2fb6:	84 87       	std	Z+12, r24	; 0x0c
						this_ptr->m_HardwareInterface_servo_left_out= _Z18fieldInitializer20EV(this_ptr);
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_Z18fieldInitializer20EV>
    2fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc4:	97 87       	std	Z+15, r25	; 0x0f
    2fc6:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <new+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <new+0x8>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <new+0xa>
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
	HardwareInterfaceCLASS ptr=HardwareInterface_Constructor(NULL);
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <HardwareInterface_Constructor>
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_HardwareInterface_id, &ptr->_HardwareInterface_refs, (freeVdmClassFunction)&HardwareInterface_free, ptr)});
    2ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff4:	62 81       	ldd	r22, Z+2	; 0x02
    2ff6:	73 81       	ldd	r23, Z+3	; 0x03
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	9c 01       	movw	r18, r24
    2ffe:	2c 5f       	subi	r18, 0xFC	; 252
    3000:	3f 4f       	sbci	r19, 0xFF	; 255
    3002:	4d e2       	ldi	r20, 0x2D	; 45
    3004:	56 e1       	ldi	r21, 0x16	; 22
    3006:	e9 81       	ldd	r30, Y+1	; 0x01
    3008:	fa 81       	ldd	r31, Y+2	; 0x02
    300a:	cb 01       	movw	r24, r22
    300c:	b9 01       	movw	r22, r18
    300e:	9f 01       	movw	r18, r30
    3010:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    3014:	1b 82       	std	Y+3, r1	; 0x03
    3016:	1c 82       	std	Y+4, r1	; 0x04
    3018:	1d 82       	std	Y+5, r1	; 0x05
    301a:	1e 82       	std	Y+6, r1	; 0x06
    301c:	9c 83       	std	Y+4, r25	; 0x04
    301e:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	HardwareInterfaceCLASS ptr=HardwareInterface_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3020:	2b 81       	ldd	r18, Y+3	; 0x03
    3022:	3c 81       	ldd	r19, Y+4	; 0x04
    3024:	4d 81       	ldd	r20, Y+5	; 0x05
    3026:	5e 81       	ldd	r21, Y+6	; 0x06
    3028:	8b e0       	ldi	r24, 0x0B	; 11
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	ba 01       	movw	r22, r20
    302e:	a9 01       	movw	r20, r18
    3030:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_HardwareInterface_id, &ptr->_HardwareInterface_refs, (freeVdmClassFunction)&HardwareInterface_free, ptr)});
}
    3034:	26 96       	adiw	r28, 0x06	; 6
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <_Z17HardwareInterfaceEV>:
 *
 --------------------------------- */ 
 

    /* HardwareInterface.vdmrt 1:7 */
 TVP _Z17HardwareInterfaceEV(HardwareInterfaceCLASS this)	{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	00 d0       	rcall	.+0      	; 0x304c <_Z17HardwareInterfaceEV+0x6>
    304c:	00 d0       	rcall	.+0      	; 0x304e <_Z17HardwareInterfaceEV+0x8>
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	9c 83       	std	Y+4, r25	; 0x04
    3054:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    3056:	1a 82       	std	Y+2, r1	; 0x02
    3058:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	9c 81       	ldd	r25, Y+4	; 0x04
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	69 f4       	brne	.+26     	; 0x307c <_Z17HardwareInterfaceEV+0x36>
	
	{

__buf = new();
    3062:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <new>
    3066:	9a 83       	std	Y+2, r25	; 0x02
    3068:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, HardwareInterface);
    306a:	e9 81       	ldd	r30, Y+1	; 0x01
    306c:	fa 81       	ldd	r31, Y+2	; 0x02
    306e:	84 81       	ldd	r24, Z+4	; 0x04
    3070:	95 81       	ldd	r25, Z+5	; 0x05
    3072:	fc 01       	movw	r30, r24
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	9c 83       	std	Y+4, r25	; 0x04
    307a:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <IntPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void IntPort_free_fields(struct IntPort *this)
{
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	00 d0       	rcall	.+0      	; 0x3094 <IntPort_free_fields+0x6>
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	9a 83       	std	Y+2, r25	; 0x02
    309a:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_IntPort_value);
    309c:	e9 81       	ldd	r30, Y+1	; 0x01
    309e:	fa 81       	ldd	r31, Y+2	; 0x02
    30a0:	86 85       	ldd	r24, Z+14	; 0x0e
    30a2:	97 85       	ldd	r25, Z+15	; 0x0f
    30a4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <IntPort_free>:

static void IntPort_free(struct IntPort *this)
{
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	00 d0       	rcall	.+0      	; 0x30b8 <IntPort_free+0x6>
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
	--this->_IntPort_refs;
    30c0:	e9 81       	ldd	r30, Y+1	; 0x01
    30c2:	fa 81       	ldd	r31, Y+2	; 0x02
    30c4:	84 85       	ldd	r24, Z+12	; 0x0c
    30c6:	95 85       	ldd	r25, Z+13	; 0x0d
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	e9 81       	ldd	r30, Y+1	; 0x01
    30cc:	fa 81       	ldd	r31, Y+2	; 0x02
    30ce:	95 87       	std	Z+13, r25	; 0x0d
    30d0:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_IntPort_refs < 1)
    30d2:	e9 81       	ldd	r30, Y+1	; 0x01
    30d4:	fa 81       	ldd	r31, Y+2	; 0x02
    30d6:	84 85       	ldd	r24, Z+12	; 0x0c
    30d8:	95 85       	ldd	r25, Z+13	; 0x0d
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	41 f4       	brne	.+16     	; 0x30ee <IntPort_free+0x3c>
	{
		IntPort_free_fields(this);
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	0e 94 47 18 	call	0x308e	; 0x308e <IntPort_free_fields>
		free(this);
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <_Z17fieldInitializer3EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer3EV(IntPortCLASS this)	{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <_Z17fieldInitializer3EV+0x6>
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <_Z17fieldInitializer3EV+0x8>
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 37:17 */
TVP ret_4 = newInt(0)
;
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    3110:	9a 83       	std	Y+2, r25	; 0x02
    3112:	89 83       	std	Y+1, r24	; 0x01

return ret_4;
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <_Z8setValueEI>:


/* Fmi.vdmrt 43:12 */
 static  void _Z8setValueEI(IntPortCLASS this, TVP v)	{
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <_Z8setValueEI+0xa>
    3130:	00 d0       	rcall	.+0      	; 0x3132 <_Z8setValueEI+0xc>
    3132:	00 d0       	rcall	.+0      	; 0x3134 <_Z8setValueEI+0xe>
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
    313c:	7e 83       	std	Y+6, r23	; 0x06
    313e:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 44:27 */
TVP field_tmp_2 = vdmCloneGC(v, NULL)
;
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	70 e0       	ldi	r23, 0x00	; 0
    3148:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(IntPort, IntPort, this, value, field_tmp_2);
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	fc 01       	movw	r30, r24
    3156:	3e 96       	adiw	r30, 0x0e	; 14
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	9c 81       	ldd	r25, Y+4	; 0x04
    3164:	8c 01       	movw	r16, r24
    3166:	02 5f       	subi	r16, 0xF2	; 242
    3168:	1f 4f       	sbci	r17, 0xFF	; 255
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    3172:	f8 01       	movw	r30, r16
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	80 83       	st	Z, r24

vdmFree(field_tmp_2);
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
}
    3180:	26 96       	adiw	r28, 0x06	; 6
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <_Z8getValueEV>:


/* Fmi.vdmrt 46:12 */
 static  TVP _Z8getValueEV(IntPortCLASS this)	{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	00 d0       	rcall	.+0      	; 0x319c <_Z8getValueEV+0x6>
    319c:	00 d0       	rcall	.+0      	; 0x319e <_Z8getValueEV+0x8>
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	9c 83       	std	Y+4, r25	; 0x04
    31a4:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 47:26 */
TVP ret_5 = vdmCloneGC(GET_FIELD_PTR_GC(IntPort, IntPort, this, value), NULL)
;
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	9c 81       	ldd	r25, Y+4	; 0x04
    31aa:	fc 01       	movw	r30, r24
    31ac:	3e 96       	adiw	r30, 0x0e	; 14
    31ae:	80 81       	ld	r24, Z
    31b0:	91 81       	ldd	r25, Z+1	; 0x01
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 47:19 */
return ret_5;
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	cf 91       	pop	r28
    31d4:	df 91       	pop	r29
    31d6:	08 95       	ret

000031d8 <IntPort_const_init>:



 void IntPort_const_init()	{
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62

return ;
}
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <IntPort_const_shutdown>:



 void IntPort_const_shutdown()	{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62

return ;
}
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <IntPort_static_init>:



 void IntPort_static_init()	{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62

return ;
}
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <IntPort_static_shutdown>:



 void IntPort_static_shutdown()	{
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62

return ;
}
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	00 d0       	rcall	.+0      	; 0x3216 <Port__Z8getValueEV+0x6>
    3216:	00 d0       	rcall	.+0      	; 0x3218 <Port__Z8getValueEV+0x8>
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	9c 83       	std	Y+4, r25	; 0x04
    321e:	8b 83       	std	Y+3, r24	; 0x03

IntPortCLASS this = CLASS_DOWNCAST(Port, IntPort, base)
;
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	9a 81       	ldd	r25, Y+2	; 0x02
    322c:	0e 94 cb 18 	call	0x3196	; 0x3196 <_Z8getValueEV>
}
    3230:	0f 90       	pop	r0
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <IntPort_Constructor>:
 *
 --------------------------------- */
 
 
IntPortCLASS IntPort_Constructor(IntPortCLASS this_ptr)
{
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	00 d0       	rcall	.+0      	; 0x3244 <IntPort_Constructor+0x6>
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	9a 83       	std	Y+2, r25	; 0x02
    324a:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	9a 81       	ldd	r25, Y+2	; 0x02
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	31 f4       	brne	.+12     	; 0x3260 <IntPort_Constructor+0x22>
	{
		this_ptr = (IntPortCLASS) malloc(sizeof(struct IntPort));
    3254:	82 e1       	ldi	r24, 0x12	; 18
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	c9 f1       	breq	.+114    	; 0x32da <IntPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,IntPort,Port));
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	9a 81       	ldd	r25, Y+2	; 0x02
    326c:	0e 94 92 1a 	call	0x3524	; 0x3524 <Port_Constructor>

					if(! g_VTableArrayForIntPort_Override_Port[0].pFunc)
    3270:	80 91 e8 02 	lds	r24, 0x02E8
    3274:	90 91 e9 02 	lds	r25, 0x02E9
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	89 f4       	brne	.+34     	; 0x329e <IntPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForIntPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    327c:	e9 81       	ldd	r30, Y+1	; 0x01
    327e:	fa 81       	ldd	r31, Y+2	; 0x02
    3280:	20 81       	ld	r18, Z
    3282:	31 81       	ldd	r19, Z+1	; 0x01
    3284:	84 ee       	ldi	r24, 0xE4	; 228
    3286:	92 e0       	ldi	r25, 0x02	; 2
    3288:	b9 01       	movw	r22, r18
    328a:	42 e1       	ldi	r20, 0x12	; 18
    328c:	50 e0       	ldi	r21, 0x00	; 0
    328e:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForIntPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    3292:	88 e0       	ldi	r24, 0x08	; 8
    3294:	99 e1       	ldi	r25, 0x19	; 25
    3296:	90 93 ef 02 	sts	0x02EF, r25
    329a:	80 93 ee 02 	sts	0x02EE, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForIntPort_Override_Port;
    329e:	e9 81       	ldd	r30, Y+1	; 0x01
    32a0:	fa 81       	ldd	r31, Y+2	; 0x02
    32a2:	84 ee       	ldi	r24, 0xE4	; 228
    32a4:	92 e0       	ldi	r25, 0x02	; 2
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	80 83       	st	Z, r24
				
		
		/*  IntPort init  */
		this_ptr->_IntPort_id = CLASS_ID_IntPort_ID;
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	fa 81       	ldd	r31, Y+2	; 0x02
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	93 87       	std	Z+11, r25	; 0x0b
    32b4:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_IntPort_refs = 0;
    32b6:	e9 81       	ldd	r30, Y+1	; 0x01
    32b8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ba:	15 86       	std	Z+13, r1	; 0x0d
    32bc:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_IntPort_pVTable=VTableArrayForIntPort;
    32be:	e9 81       	ldd	r30, Y+1	; 0x01
    32c0:	fa 81       	ldd	r31, Y+2	; 0x02
    32c2:	84 e2       	ldi	r24, 0x24	; 36
    32c4:	92 e0       	ldi	r25, 0x02	; 2
    32c6:	91 87       	std	Z+9, r25	; 0x09
    32c8:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_IntPort_value= _Z17fieldInitializer3EV(this_ptr);
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_Z17fieldInitializer3EV>
    32d2:	e9 81       	ldd	r30, Y+1	; 0x01
    32d4:	fa 81       	ldd	r31, Y+2	; 0x02
    32d6:	97 87       	std	Z+15, r25	; 0x0f
    32d8:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <new+0x6>
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <new+0x8>
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <new+0xa>
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
	IntPortCLASS ptr=IntPort_Constructor(NULL);
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 1f 19 	call	0x323e	; 0x323e <IntPort_Constructor>
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_IntPort_id, &ptr->_IntPort_refs, (freeVdmClassFunction)&IntPort_free, ptr)});
    3302:	e9 81       	ldd	r30, Y+1	; 0x01
    3304:	fa 81       	ldd	r31, Y+2	; 0x02
    3306:	62 85       	ldd	r22, Z+10	; 0x0a
    3308:	73 85       	ldd	r23, Z+11	; 0x0b
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	9a 81       	ldd	r25, Y+2	; 0x02
    330e:	9c 01       	movw	r18, r24
    3310:	24 5f       	subi	r18, 0xF4	; 244
    3312:	3f 4f       	sbci	r19, 0xFF	; 255
    3314:	49 e5       	ldi	r20, 0x59	; 89
    3316:	58 e1       	ldi	r21, 0x18	; 24
    3318:	e9 81       	ldd	r30, Y+1	; 0x01
    331a:	fa 81       	ldd	r31, Y+2	; 0x02
    331c:	cb 01       	movw	r24, r22
    331e:	b9 01       	movw	r22, r18
    3320:	9f 01       	movw	r18, r30
    3322:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    3326:	1b 82       	std	Y+3, r1	; 0x03
    3328:	1c 82       	std	Y+4, r1	; 0x04
    332a:	1d 82       	std	Y+5, r1	; 0x05
    332c:	1e 82       	std	Y+6, r1	; 0x06
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	IntPortCLASS ptr=IntPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3332:	2b 81       	ldd	r18, Y+3	; 0x03
    3334:	3c 81       	ldd	r19, Y+4	; 0x04
    3336:	4d 81       	ldd	r20, Y+5	; 0x05
    3338:	5e 81       	ldd	r21, Y+6	; 0x06
    333a:	8b e0       	ldi	r24, 0x0B	; 11
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	ba 01       	movw	r22, r20
    3340:	a9 01       	movw	r20, r18
    3342:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_IntPort_id, &ptr->_IntPort_refs, (freeVdmClassFunction)&IntPort_free, ptr)});
}
    3346:	26 96       	adiw	r28, 0x06	; 6
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <_Z7IntPortEI>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 40:12 */
 TVP _Z7IntPortEI(IntPortCLASS this, TVP v)	{
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	00 d0       	rcall	.+0      	; 0x335e <_Z7IntPortEI+0x6>
    335e:	00 d0       	rcall	.+0      	; 0x3360 <_Z7IntPortEI+0x8>
    3360:	00 d0       	rcall	.+0      	; 0x3362 <_Z7IntPortEI+0xa>
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	9c 83       	std	Y+4, r25	; 0x04
    3368:	8b 83       	std	Y+3, r24	; 0x03
    336a:	7e 83       	std	Y+6, r23	; 0x06
    336c:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
    336e:	1a 82       	std	Y+2, r1	; 0x02
    3370:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	9c 81       	ldd	r25, Y+4	; 0x04
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	69 f4       	brne	.+26     	; 0x3394 <_Z7IntPortEI+0x3c>
	
	{

__buf = new();
    337a:	0e 94 74 19 	call	0x32e8	; 0x32e8 <new>
    337e:	9a 83       	std	Y+2, r25	; 0x02
    3380:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, IntPort);
    3382:	e9 81       	ldd	r30, Y+1	; 0x01
    3384:	fa 81       	ldd	r31, Y+2	; 0x02
    3386:	84 81       	ldd	r24, Z+4	; 0x04
    3388:	95 81       	ldd	r25, Z+5	; 0x05
    338a:	fc 01       	movw	r30, r24
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	9c 83       	std	Y+4, r25	; 0x04
    3392:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 41:17 */
CALL_FUNC_PTR(IntPort, IntPort, this, CLASS_IntPort__Z8setValueEI, v);
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	9c 81       	ldd	r25, Y+4	; 0x04
    3398:	fc 01       	movw	r30, r24
    339a:	38 96       	adiw	r30, 0x08	; 8
    339c:	80 81       	ld	r24, Z
    339e:	91 81       	ldd	r25, Z+1	; 0x01
    33a0:	fc 01       	movw	r30, r24
    33a2:	36 96       	adiw	r30, 0x06	; 6
    33a4:	84 81       	ldd	r24, Z+4	; 0x04
    33a6:	95 81       	ldd	r25, Z+5	; 0x05
    33a8:	fc 01       	movw	r30, r24
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	2d 81       	ldd	r18, Y+5	; 0x05
    33b0:	3e 81       	ldd	r19, Y+6	; 0x06
    33b2:	b9 01       	movw	r22, r18
    33b4:	09 95       	icall

return __buf;
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    33ba:	26 96       	adiw	r28, 0x06	; 6
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <_Z7IntPortEV>:


    /* Fmi.vdmrt 34:7 */
 TVP _Z7IntPortEV(IntPortCLASS this)	{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <_Z7IntPortEV+0x6>
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <_Z7IntPortEV+0x8>
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	9c 83       	std	Y+4, r25	; 0x04
    33da:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    33dc:	1a 82       	std	Y+2, r1	; 0x02
    33de:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	9c 81       	ldd	r25, Y+4	; 0x04
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	69 f4       	brne	.+26     	; 0x3402 <_Z7IntPortEV+0x36>
	
	{

__buf = new();
    33e8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <new>
    33ec:	9a 83       	std	Y+2, r25	; 0x02
    33ee:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, IntPort);
    33f0:	e9 81       	ldd	r30, Y+1	; 0x01
    33f2:	fa 81       	ldd	r31, Y+2	; 0x02
    33f4:	84 81       	ldd	r24, Z+4	; 0x04
    33f6:	95 81       	ldd	r25, Z+5	; 0x05
    33f8:	fc 01       	movw	r30, r24
    33fa:	80 81       	ld	r24, Z
    33fc:	91 81       	ldd	r25, Z+1	; 0x01
    33fe:	9c 83       	std	Y+4, r25	; 0x04
    3400:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	08 95       	ret

00003414 <Port_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void Port_free_fields(struct Port *this)
{
    3414:	df 93       	push	r29
    3416:	cf 93       	push	r28
    3418:	00 d0       	rcall	.+0      	; 0x341a <Port_free_fields+0x6>
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	9a 83       	std	Y+2, r25	; 0x02
    3420:	89 83       	std	Y+1, r24	; 0x01
	}
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <Port_free>:

static void Port_free(struct Port *this)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	00 d0       	rcall	.+0      	; 0x3432 <Port_free+0x6>
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
	--this->_Port_refs;
    343a:	e9 81       	ldd	r30, Y+1	; 0x01
    343c:	fa 81       	ldd	r31, Y+2	; 0x02
    343e:	84 81       	ldd	r24, Z+4	; 0x04
    3440:	95 81       	ldd	r25, Z+5	; 0x05
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	e9 81       	ldd	r30, Y+1	; 0x01
    3446:	fa 81       	ldd	r31, Y+2	; 0x02
    3448:	95 83       	std	Z+5, r25	; 0x05
    344a:	84 83       	std	Z+4, r24	; 0x04
	if (this->_Port_refs < 1)
    344c:	e9 81       	ldd	r30, Y+1	; 0x01
    344e:	fa 81       	ldd	r31, Y+2	; 0x02
    3450:	84 81       	ldd	r24, Z+4	; 0x04
    3452:	95 81       	ldd	r25, Z+5	; 0x05
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	41 f4       	brne	.+16     	; 0x3468 <Port_free+0x3c>
	{
		Port_free_fields(this);
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <Port_free_fields>
		free(this);
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	9a 81       	ldd	r25, Y+2	; 0x02
    3464:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <_Z17fieldInitializer2EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer2EV()	{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	00 d0       	rcall	.+0      	; 0x3478 <_Z17fieldInitializer2EV+0x6>
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62

TVP ret_3 = newInt(0)
;
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01

return ret_3;
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	cf 91       	pop	r28
    3492:	df 91       	pop	r29
    3494:	08 95       	ret

00003496 <_Z8setValueE5X1QCBR>:


/* Fmi.vdmrt 26:12 */
 static  void _Z8setValueE5X1QCBR(PortCLASS this, TVP v)	{
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	00 d0       	rcall	.+0      	; 0x349c <_Z8setValueE5X1QCBR+0x6>
    349c:	00 d0       	rcall	.+0      	; 0x349e <_Z8setValueE5X1QCBR+0x8>
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	7c 83       	std	Y+4, r23	; 0x04
    34a8:	6b 83       	std	Y+3, r22	; 0x03

return ;
}
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <_Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP _Z8getValueEV(PortCLASS this)	{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	00 d0       	rcall	.+0      	; 0x34be <_Z8getValueEV+0x6>
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	9a 83       	std	Y+2, r25	; 0x02
    34c4:	89 83       	std	Y+1, r24	; 0x01

return NULL;
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	90 e0       	ldi	r25, 0x00	; 0
}
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <Port_const_init>:



 void Port_const_init()	{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62

numFields_2 = _Z17fieldInitializer2EV();
    34dc:	0e 94 39 1a 	call	0x3472	; 0x3472 <_Z17fieldInitializer2EV>
    34e0:	90 93 f7 02 	sts	0x02F7, r25
    34e4:	80 93 f6 02 	sts	0x02F6, r24

return ;
}
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <Port_const_shutdown>:



 void Port_const_shutdown()	{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_2);
    34f6:	80 91 f6 02 	lds	r24, 0x02F6
    34fa:	90 91 f7 02 	lds	r25, 0x02F7
    34fe:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <Port_static_init>:



 void Port_static_init()	{
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <Port_static_shutdown>:



 void Port_static_shutdown()	{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62

return ;
}
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	08 95       	ret

00003524 <Port_Constructor>:
 *
 --------------------------------- */
 
 
PortCLASS Port_Constructor(PortCLASS this_ptr)
{
    3524:	df 93       	push	r29
    3526:	cf 93       	push	r28
    3528:	00 d0       	rcall	.+0      	; 0x352a <Port_Constructor+0x6>
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	9a 81       	ldd	r25, Y+2	; 0x02
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	31 f4       	brne	.+12     	; 0x3546 <Port_Constructor+0x22>
	{
		this_ptr = (PortCLASS) malloc(sizeof(struct Port));
    353a:	88 e0       	ldi	r24, 0x08	; 8
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	81 f0       	breq	.+32     	; 0x356e <Port_Constructor+0x4a>
	{
	
			
		/*  Port init  */
		this_ptr->_Port_id = CLASS_ID_Port_ID;
    354e:	e9 81       	ldd	r30, Y+1	; 0x01
    3550:	fa 81       	ldd	r31, Y+2	; 0x02
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	93 83       	std	Z+3, r25	; 0x03
    3558:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_Port_refs = 0;
    355a:	e9 81       	ldd	r30, Y+1	; 0x01
    355c:	fa 81       	ldd	r31, Y+2	; 0x02
    355e:	15 82       	std	Z+5, r1	; 0x05
    3560:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_Port_pVTable=VTableArrayForPort;
    3562:	e9 81       	ldd	r30, Y+1	; 0x01
    3564:	fa 81       	ldd	r31, Y+2	; 0x02
    3566:	8c e3       	ldi	r24, 0x3C	; 60
    3568:	92 e0       	ldi	r25, 0x02	; 2
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	80 83       	st	Z, r24

				}

	return this_ptr;
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	00 d0       	rcall	.+0      	; 0x3582 <new+0x6>
    3582:	00 d0       	rcall	.+0      	; 0x3584 <new+0x8>
    3584:	00 d0       	rcall	.+0      	; 0x3586 <new+0xa>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
	PortCLASS ptr=Port_Constructor(NULL);
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 94 92 1a 	call	0x3524	; 0x3524 <Port_Constructor>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_Port_id, &ptr->_Port_refs, (freeVdmClassFunction)&Port_free, ptr)});
    3596:	e9 81       	ldd	r30, Y+1	; 0x01
    3598:	fa 81       	ldd	r31, Y+2	; 0x02
    359a:	62 81       	ldd	r22, Z+2	; 0x02
    359c:	73 81       	ldd	r23, Z+3	; 0x03
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	9a 81       	ldd	r25, Y+2	; 0x02
    35a2:	9c 01       	movw	r18, r24
    35a4:	2c 5f       	subi	r18, 0xFC	; 252
    35a6:	3f 4f       	sbci	r19, 0xFF	; 255
    35a8:	46 e1       	ldi	r20, 0x16	; 22
    35aa:	5a e1       	ldi	r21, 0x1A	; 26
    35ac:	e9 81       	ldd	r30, Y+1	; 0x01
    35ae:	fa 81       	ldd	r31, Y+2	; 0x02
    35b0:	cb 01       	movw	r24, r22
    35b2:	b9 01       	movw	r22, r18
    35b4:	9f 01       	movw	r18, r30
    35b6:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    35ba:	1b 82       	std	Y+3, r1	; 0x03
    35bc:	1c 82       	std	Y+4, r1	; 0x04
    35be:	1d 82       	std	Y+5, r1	; 0x05
    35c0:	1e 82       	std	Y+6, r1	; 0x06
    35c2:	9c 83       	std	Y+4, r25	; 0x04
    35c4:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	PortCLASS ptr=Port_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    35c6:	2b 81       	ldd	r18, Y+3	; 0x03
    35c8:	3c 81       	ldd	r19, Y+4	; 0x04
    35ca:	4d 81       	ldd	r20, Y+5	; 0x05
    35cc:	5e 81       	ldd	r21, Y+6	; 0x06
    35ce:	8b e0       	ldi	r24, 0x0B	; 11
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	ba 01       	movw	r22, r20
    35d4:	a9 01       	movw	r20, r18
    35d6:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_Port_id, &ptr->_Port_refs, (freeVdmClassFunction)&Port_free, ptr)});
}
    35da:	26 96       	adiw	r28, 0x06	; 6
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <_Z4PortEV>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 18:7 */
 TVP _Z4PortEV(PortCLASS this)	{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <_Z4PortEV+0x6>
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <_Z4PortEV+0x8>
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	9c 83       	std	Y+4, r25	; 0x04
    35fa:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    35fc:	1a 82       	std	Y+2, r1	; 0x02
    35fe:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3600:	8b 81       	ldd	r24, Y+3	; 0x03
    3602:	9c 81       	ldd	r25, Y+4	; 0x04
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	69 f4       	brne	.+26     	; 0x3622 <_Z4PortEV+0x36>
	
	{

__buf = new();
    3608:	0e 94 be 1a 	call	0x357c	; 0x357c <new>
    360c:	9a 83       	std	Y+2, r25	; 0x02
    360e:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, Port);
    3610:	e9 81       	ldd	r30, Y+1	; 0x01
    3612:	fa 81       	ldd	r31, Y+2	; 0x02
    3614:	84 81       	ldd	r24, Z+4	; 0x04
    3616:	95 81       	ldd	r25, Z+5	; 0x05
    3618:	fc 01       	movw	r30, r24
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	9c 83       	std	Y+4, r25	; 0x04
    3620:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <RealPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void RealPort_free_fields(struct RealPort *this)
{
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	00 d0       	rcall	.+0      	; 0x363a <RealPort_free_fields+0x6>
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	9a 83       	std	Y+2, r25	; 0x02
    3640:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_RealPort_value);
    3642:	e9 81       	ldd	r30, Y+1	; 0x01
    3644:	fa 81       	ldd	r31, Y+2	; 0x02
    3646:	86 85       	ldd	r24, Z+14	; 0x0e
    3648:	97 85       	ldd	r25, Z+15	; 0x0f
    364a:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <RealPort_free>:

static void RealPort_free(struct RealPort *this)
{
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	00 d0       	rcall	.+0      	; 0x365e <RealPort_free+0x6>
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	9a 83       	std	Y+2, r25	; 0x02
    3664:	89 83       	std	Y+1, r24	; 0x01
	--this->_RealPort_refs;
    3666:	e9 81       	ldd	r30, Y+1	; 0x01
    3668:	fa 81       	ldd	r31, Y+2	; 0x02
    366a:	84 85       	ldd	r24, Z+12	; 0x0c
    366c:	95 85       	ldd	r25, Z+13	; 0x0d
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	e9 81       	ldd	r30, Y+1	; 0x01
    3672:	fa 81       	ldd	r31, Y+2	; 0x02
    3674:	95 87       	std	Z+13, r25	; 0x0d
    3676:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_RealPort_refs < 1)
    3678:	e9 81       	ldd	r30, Y+1	; 0x01
    367a:	fa 81       	ldd	r31, Y+2	; 0x02
    367c:	84 85       	ldd	r24, Z+12	; 0x0c
    367e:	95 85       	ldd	r25, Z+13	; 0x0d
    3680:	00 97       	sbiw	r24, 0x00	; 0
    3682:	41 f4       	brne	.+16     	; 0x3694 <RealPort_free+0x3c>
	{
		RealPort_free_fields(this);
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	9a 81       	ldd	r25, Y+2	; 0x02
    3688:	0e 94 1a 1b 	call	0x3634	; 0x3634 <RealPort_free_fields>
		free(this);
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
    3690:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <_Z17fieldInitializer5EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer5EV(RealPortCLASS this)	{
    369e:	df 93       	push	r29
    36a0:	cf 93       	push	r28
    36a2:	00 d0       	rcall	.+0      	; 0x36a4 <_Z17fieldInitializer5EV+0x6>
    36a4:	00 d0       	rcall	.+0      	; 0x36a6 <_Z17fieldInitializer5EV+0x8>
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 71:18 */
TVP ret_8 = newReal(0.0)
;
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	70 e0       	ldi	r23, 0x00	; 0
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    36ba:	9a 83       	std	Y+2, r25	; 0x02
    36bc:	89 83       	std	Y+1, r24	; 0x01

return ret_8;
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	08 95       	ret

000036d0 <_Z8setValueER>:


/* Fmi.vdmrt 77:12 */
 static  void _Z8setValueER(RealPortCLASS this, TVP v)	{
    36d0:	0f 93       	push	r16
    36d2:	1f 93       	push	r17
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	00 d0       	rcall	.+0      	; 0x36da <_Z8setValueER+0xa>
    36da:	00 d0       	rcall	.+0      	; 0x36dc <_Z8setValueER+0xc>
    36dc:	00 d0       	rcall	.+0      	; 0x36de <_Z8setValueER+0xe>
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	9c 83       	std	Y+4, r25	; 0x04
    36e4:	8b 83       	std	Y+3, r24	; 0x03
    36e6:	7e 83       	std	Y+6, r23	; 0x06
    36e8:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 78:27 */
TVP field_tmp_4 = vdmCloneGC(v, NULL)
;
    36ea:	8d 81       	ldd	r24, Y+5	; 0x05
    36ec:	9e 81       	ldd	r25, Y+6	; 0x06
    36ee:	60 e0       	ldi	r22, 0x00	; 0
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    36f6:	9a 83       	std	Y+2, r25	; 0x02
    36f8:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(RealPort, RealPort, this, value, field_tmp_4);
    36fa:	8b 81       	ldd	r24, Y+3	; 0x03
    36fc:	9c 81       	ldd	r25, Y+4	; 0x04
    36fe:	fc 01       	movw	r30, r24
    3700:	3e 96       	adiw	r30, 0x0e	; 14
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	9c 81       	ldd	r25, Y+4	; 0x04
    370e:	8c 01       	movw	r16, r24
    3710:	02 5f       	subi	r16, 0xF2	; 242
    3712:	1f 4f       	sbci	r17, 0xFF	; 255
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    371c:	f8 01       	movw	r30, r16
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24

vdmFree(field_tmp_4);
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	9a 81       	ldd	r25, Y+2	; 0x02
    3726:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
}
    372a:	26 96       	adiw	r28, 0x06	; 6
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	de bf       	out	0x3e, r29	; 62
    3732:	0f be       	out	0x3f, r0	; 63
    3734:	cd bf       	out	0x3d, r28	; 61
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	08 95       	ret

00003740 <_Z8getValueEV>:


/* Fmi.vdmrt 80:12 */
 static  TVP _Z8getValueEV(RealPortCLASS this)	{
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	00 d0       	rcall	.+0      	; 0x3746 <_Z8getValueEV+0x6>
    3746:	00 d0       	rcall	.+0      	; 0x3748 <_Z8getValueEV+0x8>
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	9c 83       	std	Y+4, r25	; 0x04
    374e:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 81:26 */
TVP ret_9 = vdmCloneGC(GET_FIELD_PTR_GC(RealPort, RealPort, this, value), NULL)
;
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	9c 81       	ldd	r25, Y+4	; 0x04
    3754:	fc 01       	movw	r30, r24
    3756:	3e 96       	adiw	r30, 0x0e	; 14
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    376c:	9a 83       	std	Y+2, r25	; 0x02
    376e:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 81:19 */
return ret_9;
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <RealPort_const_init>:



 void RealPort_const_init()	{
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62

return ;
}
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <RealPort_const_shutdown>:



 void RealPort_const_shutdown()	{
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <RealPort_static_init>:



 void RealPort_static_init()	{
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62

return ;
}
    37a6:	cf 91       	pop	r28
    37a8:	df 91       	pop	r29
    37aa:	08 95       	ret

000037ac <RealPort_static_shutdown>:



 void RealPort_static_shutdown()	{
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62

return ;
}
    37b4:	cf 91       	pop	r28
    37b6:	df 91       	pop	r29
    37b8:	08 95       	ret

000037ba <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
    37ba:	df 93       	push	r29
    37bc:	cf 93       	push	r28
    37be:	00 d0       	rcall	.+0      	; 0x37c0 <Port__Z8getValueEV+0x6>
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <Port__Z8getValueEV+0x8>
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	9c 83       	std	Y+4, r25	; 0x04
    37c8:	8b 83       	std	Y+3, r24	; 0x03

RealPortCLASS this = CLASS_DOWNCAST(Port, RealPort, base)
;
    37ca:	8b 81       	ldd	r24, Y+3	; 0x03
    37cc:	9c 81       	ldd	r25, Y+4	; 0x04
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_Z8getValueEV>
}
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <RealPort_Constructor>:
 *
 --------------------------------- */
 
 
RealPortCLASS RealPort_Constructor(RealPortCLASS this_ptr)
{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	00 d0       	rcall	.+0      	; 0x37ee <RealPort_Constructor+0x6>
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	9a 83       	std	Y+2, r25	; 0x02
    37f4:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	9a 81       	ldd	r25, Y+2	; 0x02
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	31 f4       	brne	.+12     	; 0x380a <RealPort_Constructor+0x22>
	{
		this_ptr = (RealPortCLASS) malloc(sizeof(struct RealPort));
    37fe:	82 e1       	ldi	r24, 0x12	; 18
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	9a 81       	ldd	r25, Y+2	; 0x02
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	c9 f1       	breq	.+114    	; 0x3884 <RealPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,RealPort,Port));
    3812:	89 81       	ldd	r24, Y+1	; 0x01
    3814:	9a 81       	ldd	r25, Y+2	; 0x02
    3816:	0e 94 92 1a 	call	0x3524	; 0x3524 <Port_Constructor>

					if(! g_VTableArrayForRealPort_Override_Port[0].pFunc)
    381a:	80 91 fc 02 	lds	r24, 0x02FC
    381e:	90 91 fd 02 	lds	r25, 0x02FD
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	89 f4       	brne	.+34     	; 0x3848 <RealPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForRealPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    3826:	e9 81       	ldd	r30, Y+1	; 0x01
    3828:	fa 81       	ldd	r31, Y+2	; 0x02
    382a:	20 81       	ld	r18, Z
    382c:	31 81       	ldd	r19, Z+1	; 0x01
    382e:	88 ef       	ldi	r24, 0xF8	; 248
    3830:	92 e0       	ldi	r25, 0x02	; 2
    3832:	b9 01       	movw	r22, r18
    3834:	42 e1       	ldi	r20, 0x12	; 18
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForRealPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    383c:	8d ed       	ldi	r24, 0xDD	; 221
    383e:	9b e1       	ldi	r25, 0x1B	; 27
    3840:	90 93 03 03 	sts	0x0303, r25
    3844:	80 93 02 03 	sts	0x0302, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForRealPort_Override_Port;
    3848:	e9 81       	ldd	r30, Y+1	; 0x01
    384a:	fa 81       	ldd	r31, Y+2	; 0x02
    384c:	88 ef       	ldi	r24, 0xF8	; 248
    384e:	92 e0       	ldi	r25, 0x02	; 2
    3850:	91 83       	std	Z+1, r25	; 0x01
    3852:	80 83       	st	Z, r24
				
		
		/*  RealPort init  */
		this_ptr->_RealPort_id = CLASS_ID_RealPort_ID;
    3854:	e9 81       	ldd	r30, Y+1	; 0x01
    3856:	fa 81       	ldd	r31, Y+2	; 0x02
    3858:	84 e0       	ldi	r24, 0x04	; 4
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	93 87       	std	Z+11, r25	; 0x0b
    385e:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_RealPort_refs = 0;
    3860:	e9 81       	ldd	r30, Y+1	; 0x01
    3862:	fa 81       	ldd	r31, Y+2	; 0x02
    3864:	15 86       	std	Z+13, r1	; 0x0d
    3866:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_RealPort_pVTable=VTableArrayForRealPort;
    3868:	e9 81       	ldd	r30, Y+1	; 0x01
    386a:	fa 81       	ldd	r31, Y+2	; 0x02
    386c:	8e e4       	ldi	r24, 0x4E	; 78
    386e:	92 e0       	ldi	r25, 0x02	; 2
    3870:	91 87       	std	Z+9, r25	; 0x09
    3872:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_RealPort_value= _Z17fieldInitializer5EV(this_ptr);
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	9a 81       	ldd	r25, Y+2	; 0x02
    3878:	0e 94 4f 1b 	call	0x369e	; 0x369e <_Z17fieldInitializer5EV>
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	fa 81       	ldd	r31, Y+2	; 0x02
    3880:	97 87       	std	Z+15, r25	; 0x0f
    3882:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	00 d0       	rcall	.+0      	; 0x3898 <new+0x6>
    3898:	00 d0       	rcall	.+0      	; 0x389a <new+0x8>
    389a:	00 d0       	rcall	.+0      	; 0x389c <new+0xa>
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
	RealPortCLASS ptr=RealPort_Constructor(NULL);
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <RealPort_Constructor>
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RealPort_id, &ptr->_RealPort_refs, (freeVdmClassFunction)&RealPort_free, ptr)});
    38ac:	e9 81       	ldd	r30, Y+1	; 0x01
    38ae:	fa 81       	ldd	r31, Y+2	; 0x02
    38b0:	62 85       	ldd	r22, Z+10	; 0x0a
    38b2:	73 85       	ldd	r23, Z+11	; 0x0b
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	9a 81       	ldd	r25, Y+2	; 0x02
    38b8:	9c 01       	movw	r18, r24
    38ba:	24 5f       	subi	r18, 0xF4	; 244
    38bc:	3f 4f       	sbci	r19, 0xFF	; 255
    38be:	4c e2       	ldi	r20, 0x2C	; 44
    38c0:	5b e1       	ldi	r21, 0x1B	; 27
    38c2:	e9 81       	ldd	r30, Y+1	; 0x01
    38c4:	fa 81       	ldd	r31, Y+2	; 0x02
    38c6:	cb 01       	movw	r24, r22
    38c8:	b9 01       	movw	r22, r18
    38ca:	9f 01       	movw	r18, r30
    38cc:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    38d0:	1b 82       	std	Y+3, r1	; 0x03
    38d2:	1c 82       	std	Y+4, r1	; 0x04
    38d4:	1d 82       	std	Y+5, r1	; 0x05
    38d6:	1e 82       	std	Y+6, r1	; 0x06
    38d8:	9c 83       	std	Y+4, r25	; 0x04
    38da:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	RealPortCLASS ptr=RealPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    38dc:	2b 81       	ldd	r18, Y+3	; 0x03
    38de:	3c 81       	ldd	r19, Y+4	; 0x04
    38e0:	4d 81       	ldd	r20, Y+5	; 0x05
    38e2:	5e 81       	ldd	r21, Y+6	; 0x06
    38e4:	8b e0       	ldi	r24, 0x0B	; 11
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	ba 01       	movw	r22, r20
    38ea:	a9 01       	movw	r20, r18
    38ec:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RealPort_id, &ptr->_RealPort_refs, (freeVdmClassFunction)&RealPort_free, ptr)});
}
    38f0:	26 96       	adiw	r28, 0x06	; 6
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	cd bf       	out	0x3d, r28	; 61
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <_Z8RealPortER>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 74:12 */
 TVP _Z8RealPortER(RealPortCLASS this, TVP v)	{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	00 d0       	rcall	.+0      	; 0x3908 <_Z8RealPortER+0x6>
    3908:	00 d0       	rcall	.+0      	; 0x390a <_Z8RealPortER+0x8>
    390a:	00 d0       	rcall	.+0      	; 0x390c <_Z8RealPortER+0xa>
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	9c 83       	std	Y+4, r25	; 0x04
    3912:	8b 83       	std	Y+3, r24	; 0x03
    3914:	7e 83       	std	Y+6, r23	; 0x06
    3916:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
    3918:	1a 82       	std	Y+2, r1	; 0x02
    391a:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	9c 81       	ldd	r25, Y+4	; 0x04
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	69 f4       	brne	.+26     	; 0x393e <_Z8RealPortER+0x3c>
	
	{

__buf = new();
    3924:	0e 94 49 1c 	call	0x3892	; 0x3892 <new>
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RealPort);
    392c:	e9 81       	ldd	r30, Y+1	; 0x01
    392e:	fa 81       	ldd	r31, Y+2	; 0x02
    3930:	84 81       	ldd	r24, Z+4	; 0x04
    3932:	95 81       	ldd	r25, Z+5	; 0x05
    3934:	fc 01       	movw	r30, r24
    3936:	80 81       	ld	r24, Z
    3938:	91 81       	ldd	r25, Z+1	; 0x01
    393a:	9c 83       	std	Y+4, r25	; 0x04
    393c:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 75:18 */
CALL_FUNC_PTR(RealPort, RealPort, this, CLASS_RealPort__Z8setValueER, v);
    393e:	8b 81       	ldd	r24, Y+3	; 0x03
    3940:	9c 81       	ldd	r25, Y+4	; 0x04
    3942:	fc 01       	movw	r30, r24
    3944:	38 96       	adiw	r30, 0x08	; 8
    3946:	80 81       	ld	r24, Z
    3948:	91 81       	ldd	r25, Z+1	; 0x01
    394a:	fc 01       	movw	r30, r24
    394c:	36 96       	adiw	r30, 0x06	; 6
    394e:	84 81       	ldd	r24, Z+4	; 0x04
    3950:	95 81       	ldd	r25, Z+5	; 0x05
    3952:	fc 01       	movw	r30, r24
    3954:	8b 81       	ldd	r24, Y+3	; 0x03
    3956:	9c 81       	ldd	r25, Y+4	; 0x04
    3958:	2d 81       	ldd	r18, Y+5	; 0x05
    395a:	3e 81       	ldd	r19, Y+6	; 0x06
    395c:	b9 01       	movw	r22, r18
    395e:	09 95       	icall

return __buf;
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3964:	26 96       	adiw	r28, 0x06	; 6
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	cf 91       	pop	r28
    3972:	df 91       	pop	r29
    3974:	08 95       	ret

00003976 <_Z8RealPortEV>:


    /* Fmi.vdmrt 68:7 */
 TVP _Z8RealPortEV(RealPortCLASS this)	{
    3976:	df 93       	push	r29
    3978:	cf 93       	push	r28
    397a:	00 d0       	rcall	.+0      	; 0x397c <_Z8RealPortEV+0x6>
    397c:	00 d0       	rcall	.+0      	; 0x397e <_Z8RealPortEV+0x8>
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
    3982:	9c 83       	std	Y+4, r25	; 0x04
    3984:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    3986:	1a 82       	std	Y+2, r1	; 0x02
    3988:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    398a:	8b 81       	ldd	r24, Y+3	; 0x03
    398c:	9c 81       	ldd	r25, Y+4	; 0x04
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	69 f4       	brne	.+26     	; 0x39ac <_Z8RealPortEV+0x36>
	
	{

__buf = new();
    3992:	0e 94 49 1c 	call	0x3892	; 0x3892 <new>
    3996:	9a 83       	std	Y+2, r25	; 0x02
    3998:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RealPort);
    399a:	e9 81       	ldd	r30, Y+1	; 0x01
    399c:	fa 81       	ldd	r31, Y+2	; 0x02
    399e:	84 81       	ldd	r24, Z+4	; 0x04
    39a0:	95 81       	ldd	r25, Z+5	; 0x05
    39a2:	fc 01       	movw	r30, r24
    39a4:	80 81       	ld	r24, Z
    39a6:	91 81       	ldd	r25, Z+1	; 0x01
    39a8:	9c 83       	std	Y+4, r25	; 0x04
    39aa:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	cf 91       	pop	r28
    39ba:	df 91       	pop	r29
    39bc:	08 95       	ret

000039be <RobotSensor_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void RobotSensor_free_fields(struct RobotSensor *this)
{
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	00 d0       	rcall	.+0      	; 0x39c4 <RobotSensor_free_fields+0x6>
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	9a 83       	std	Y+2, r25	; 0x02
    39ca:	89 83       	std	Y+1, r24	; 0x01
			vdmFree(this->m_RobotSensor_port);
    39cc:	e9 81       	ldd	r30, Y+1	; 0x01
    39ce:	fa 81       	ldd	r31, Y+2	; 0x02
    39d0:	86 81       	ldd	r24, Z+6	; 0x06
    39d2:	97 81       	ldd	r25, Z+7	; 0x07
    39d4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	08 95       	ret

000039e2 <RobotSensor_free>:

static void RobotSensor_free(struct RobotSensor *this)
{
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	00 d0       	rcall	.+0      	; 0x39e8 <RobotSensor_free+0x6>
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	9a 83       	std	Y+2, r25	; 0x02
    39ee:	89 83       	std	Y+1, r24	; 0x01
	--this->_RobotSensor_refs;
    39f0:	e9 81       	ldd	r30, Y+1	; 0x01
    39f2:	fa 81       	ldd	r31, Y+2	; 0x02
    39f4:	84 81       	ldd	r24, Z+4	; 0x04
    39f6:	95 81       	ldd	r25, Z+5	; 0x05
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	e9 81       	ldd	r30, Y+1	; 0x01
    39fc:	fa 81       	ldd	r31, Y+2	; 0x02
    39fe:	95 83       	std	Z+5, r25	; 0x05
    3a00:	84 83       	std	Z+4, r24	; 0x04
	if (this->_RobotSensor_refs < 1)
    3a02:	e9 81       	ldd	r30, Y+1	; 0x01
    3a04:	fa 81       	ldd	r31, Y+2	; 0x02
    3a06:	84 81       	ldd	r24, Z+4	; 0x04
    3a08:	95 81       	ldd	r25, Z+5	; 0x05
    3a0a:	00 97       	sbiw	r24, 0x00	; 0
    3a0c:	41 f4       	brne	.+16     	; 0x3a1e <RobotSensor_free+0x3c>
	{
		RobotSensor_free_fields(this);
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	9a 81       	ldd	r25, Y+2	; 0x02
    3a12:	0e 94 df 1c 	call	0x39be	; 0x39be <RobotSensor_free_fields>
		free(this);
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1a:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <_Z17fieldInitializer1EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer1EV()	{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <_Z17fieldInitializer1EV+0x6>
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62

TVP ret_1 = newInt(1)
;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    3a3a:	9a 83       	std	Y+2, r25	; 0x02
    3a3c:	89 83       	std	Y+1, r24	; 0x01

return ret_1;
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <_Z10getReadingEV>:


/* RobotSensor.vdmrt 12:8 */
 static  TVP _Z10getReadingEV(RobotSensorCLASS this)	{
    3a4c:	0f 93       	push	r16
    3a4e:	1f 93       	push	r17
    3a50:	df 93       	push	r29
    3a52:	cf 93       	push	r28
    3a54:	00 d0       	rcall	.+0      	; 0x3a56 <_Z10getReadingEV+0xa>
    3a56:	00 d0       	rcall	.+0      	; 0x3a58 <_Z10getReadingEV+0xc>
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	9c 83       	std	Y+4, r25	; 0x04
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
/* RobotSensor.vdmrt 13:23 */
TVP ret_2 = CALL_FUNC(RealPort, RealPort, GET_FIELD_PTR_GC(RobotSensor, RobotSensor, this, port), CLASS_RealPort__Z8getValueEV)
;
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	fc 01       	movw	r30, r24
    3a66:	36 96       	adiw	r30, 0x06	; 6
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	60 e0       	ldi	r22, 0x00	; 0
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    3a74:	fc 01       	movw	r30, r24
    3a76:	84 81       	ldd	r24, Z+4	; 0x04
    3a78:	95 81       	ldd	r25, Z+5	; 0x05
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	80 81       	ld	r24, Z
    3a7e:	91 81       	ldd	r25, Z+1	; 0x01
    3a80:	fc 01       	movw	r30, r24
    3a82:	38 96       	adiw	r30, 0x08	; 8
    3a84:	80 81       	ld	r24, Z
    3a86:	91 81       	ldd	r25, Z+1	; 0x01
    3a88:	fc 01       	movw	r30, r24
    3a8a:	3c 96       	adiw	r30, 0x0c	; 12
    3a8c:	84 81       	ldd	r24, Z+4	; 0x04
    3a8e:	95 81       	ldd	r25, Z+5	; 0x05
    3a90:	8c 01       	movw	r16, r24
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
    3a94:	9c 81       	ldd	r25, Y+4	; 0x04
    3a96:	fc 01       	movw	r30, r24
    3a98:	36 96       	adiw	r30, 0x06	; 6
    3a9a:	80 81       	ld	r24, Z
    3a9c:	91 81       	ldd	r25, Z+1	; 0x01
    3a9e:	60 e0       	ldi	r22, 0x00	; 0
    3aa0:	70 e0       	ldi	r23, 0x00	; 0
    3aa2:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	84 81       	ldd	r24, Z+4	; 0x04
    3aaa:	95 81       	ldd	r25, Z+5	; 0x05
    3aac:	fc 01       	movw	r30, r24
    3aae:	80 81       	ld	r24, Z
    3ab0:	91 81       	ldd	r25, Z+1	; 0x01
    3ab2:	f8 01       	movw	r30, r16
    3ab4:	09 95       	icall
    3ab6:	9a 83       	std	Y+2, r25	; 0x02
    3ab8:	89 83       	std	Y+1, r24	; 0x01
/* RobotSensor.vdmrt 13:16 */
return ret_2;
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	cf 91       	pop	r28
    3ac8:	df 91       	pop	r29
    3aca:	1f 91       	pop	r17
    3acc:	0f 91       	pop	r16
    3ace:	08 95       	ret

00003ad0 <RobotSensor_const_init>:



 void RobotSensor_const_init()	{
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62

numFields_1 = _Z17fieldInitializer1EV();
    3ad8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <_Z17fieldInitializer1EV>
    3adc:	90 93 0b 03 	sts	0x030B, r25
    3ae0:	80 93 0a 03 	sts	0x030A, r24

return ;
}
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <RobotSensor_const_shutdown>:



 void RobotSensor_const_shutdown()	{
    3aea:	df 93       	push	r29
    3aec:	cf 93       	push	r28
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_1);
    3af2:	80 91 0a 03 	lds	r24, 0x030A
    3af6:	90 91 0b 03 	lds	r25, 0x030B
    3afa:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    3afe:	cf 91       	pop	r28
    3b00:	df 91       	pop	r29
    3b02:	08 95       	ret

00003b04 <RobotSensor_static_init>:



 void RobotSensor_static_init()	{
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <RobotSensor_static_shutdown>:



 void RobotSensor_static_shutdown()	{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <RobotSensor_Constructor>:
 *
 --------------------------------- */
 
 
RobotSensorCLASS RobotSensor_Constructor(RobotSensorCLASS this_ptr)
{
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	00 d0       	rcall	.+0      	; 0x3b26 <RobotSensor_Constructor+0x6>
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	9a 81       	ldd	r25, Y+2	; 0x02
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	31 f4       	brne	.+12     	; 0x3b42 <RobotSensor_Constructor+0x22>
	{
		this_ptr = (RobotSensorCLASS) malloc(sizeof(struct RobotSensor));
    3b36:	8a e0       	ldi	r24, 0x0A	; 10
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    3b3e:	9a 83       	std	Y+2, r25	; 0x02
    3b40:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	9a 81       	ldd	r25, Y+2	; 0x02
    3b46:	00 97       	sbiw	r24, 0x00	; 0
    3b48:	91 f0       	breq	.+36     	; 0x3b6e <RobotSensor_Constructor+0x4e>
	{
	
			
		/*  RobotSensor init  */
		this_ptr->_RobotSensor_id = CLASS_ID_RobotSensor_ID;
    3b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b4e:	13 82       	std	Z+3, r1	; 0x03
    3b50:	12 82       	std	Z+2, r1	; 0x02
		this_ptr->_RobotSensor_refs = 0;
    3b52:	e9 81       	ldd	r30, Y+1	; 0x01
    3b54:	fa 81       	ldd	r31, Y+2	; 0x02
    3b56:	15 82       	std	Z+5, r1	; 0x05
    3b58:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_RobotSensor_pVTable=VTableArrayForRobotSensor;
    3b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b5e:	86 e6       	ldi	r24, 0x66	; 102
    3b60:	92 e0       	ldi	r25, 0x02	; 2
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	80 83       	st	Z, r24

							this_ptr->m_RobotSensor_port= NULL ;
    3b66:	e9 81       	ldd	r30, Y+1	; 0x01
    3b68:	fa 81       	ldd	r31, Y+2	; 0x02
    3b6a:	17 82       	std	Z+7, r1	; 0x07
    3b6c:	16 82       	std	Z+6, r1	; 0x06
			}

	return this_ptr;
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	cf 91       	pop	r28
    3b78:	df 91       	pop	r29
    3b7a:	08 95       	ret

00003b7c <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <new+0x6>
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <new+0x8>
    3b84:	00 d0       	rcall	.+0      	; 0x3b86 <new+0xa>
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
	RobotSensorCLASS ptr=RobotSensor_Constructor(NULL);
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <RobotSensor_Constructor>
    3b92:	9a 83       	std	Y+2, r25	; 0x02
    3b94:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RobotSensor_id, &ptr->_RobotSensor_refs, (freeVdmClassFunction)&RobotSensor_free, ptr)});
    3b96:	e9 81       	ldd	r30, Y+1	; 0x01
    3b98:	fa 81       	ldd	r31, Y+2	; 0x02
    3b9a:	62 81       	ldd	r22, Z+2	; 0x02
    3b9c:	73 81       	ldd	r23, Z+3	; 0x03
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba2:	9c 01       	movw	r18, r24
    3ba4:	2c 5f       	subi	r18, 0xFC	; 252
    3ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba8:	41 ef       	ldi	r20, 0xF1	; 241
    3baa:	5c e1       	ldi	r21, 0x1C	; 28
    3bac:	e9 81       	ldd	r30, Y+1	; 0x01
    3bae:	fa 81       	ldd	r31, Y+2	; 0x02
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	b9 01       	movw	r22, r18
    3bb4:	9f 01       	movw	r18, r30
    3bb6:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    3bba:	1b 82       	std	Y+3, r1	; 0x03
    3bbc:	1c 82       	std	Y+4, r1	; 0x04
    3bbe:	1d 82       	std	Y+5, r1	; 0x05
    3bc0:	1e 82       	std	Y+6, r1	; 0x06
    3bc2:	9c 83       	std	Y+4, r25	; 0x04
    3bc4:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	RobotSensorCLASS ptr=RobotSensor_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    3bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    3bca:	4d 81       	ldd	r20, Y+5	; 0x05
    3bcc:	5e 81       	ldd	r21, Y+6	; 0x06
    3bce:	8b e0       	ldi	r24, 0x0B	; 11
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	ba 01       	movw	r22, r20
    3bd4:	a9 01       	movw	r20, r18
    3bd6:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RobotSensor_id, &ptr->_RobotSensor_refs, (freeVdmClassFunction)&RobotSensor_free, ptr)});
}
    3bda:	26 96       	adiw	r28, 0x06	; 6
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	f8 94       	cli
    3be0:	de bf       	out	0x3e, r29	; 62
    3be2:	0f be       	out	0x3f, r0	; 63
    3be4:	cd bf       	out	0x3d, r28	; 61
    3be6:	cf 91       	pop	r28
    3be8:	df 91       	pop	r29
    3bea:	08 95       	ret

00003bec <_Z11RobotSensorE8CRealPort>:
 *
 --------------------------------- */ 
 

    /* RobotSensor.vdmrt 9:8 */
 TVP _Z11RobotSensorE8CRealPort(RobotSensorCLASS this, TVP p)	{
    3bec:	0f 93       	push	r16
    3bee:	1f 93       	push	r17
    3bf0:	df 93       	push	r29
    3bf2:	cf 93       	push	r28
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	28 97       	sbiw	r28, 0x08	; 8
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	9e 83       	std	Y+6, r25	; 0x06
    3c06:	8d 83       	std	Y+5, r24	; 0x05
    3c08:	78 87       	std	Y+8, r23	; 0x08
    3c0a:	6f 83       	std	Y+7, r22	; 0x07

TVP __buf = NULL
;
    3c0c:	1c 82       	std	Y+4, r1	; 0x04
    3c0e:	1b 82       	std	Y+3, r1	; 0x03

if ( this == NULL )
    3c10:	8d 81       	ldd	r24, Y+5	; 0x05
    3c12:	9e 81       	ldd	r25, Y+6	; 0x06
    3c14:	00 97       	sbiw	r24, 0x00	; 0
    3c16:	69 f4       	brne	.+26     	; 0x3c32 <_Z11RobotSensorE8CRealPort+0x46>
	
	{

__buf = new();
    3c18:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <new>
    3c1c:	9c 83       	std	Y+4, r25	; 0x04
    3c1e:	8b 83       	std	Y+3, r24	; 0x03

this = TO_CLASS_PTR(__buf, RobotSensor);
    3c20:	eb 81       	ldd	r30, Y+3	; 0x03
    3c22:	fc 81       	ldd	r31, Y+4	; 0x04
    3c24:	84 81       	ldd	r24, Z+4	; 0x04
    3c26:	95 81       	ldd	r25, Z+5	; 0x05
    3c28:	fc 01       	movw	r30, r24
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	9e 83       	std	Y+6, r25	; 0x06
    3c30:	8d 83       	std	Y+5, r24	; 0x05
}
;
/* RobotSensor.vdmrt 10:27 */
TVP field_tmp_1 = vdmCloneGC(p, NULL)
;
    3c32:	8f 81       	ldd	r24, Y+7	; 0x07
    3c34:	98 85       	ldd	r25, Y+8	; 0x08
    3c36:	60 e0       	ldi	r22, 0x00	; 0
    3c38:	70 e0       	ldi	r23, 0x00	; 0
    3c3a:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    3c3e:	9a 83       	std	Y+2, r25	; 0x02
    3c40:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(RobotSensor, RobotSensor, this, port, field_tmp_1);
    3c42:	8d 81       	ldd	r24, Y+5	; 0x05
    3c44:	9e 81       	ldd	r25, Y+6	; 0x06
    3c46:	fc 01       	movw	r30, r24
    3c48:	36 96       	adiw	r30, 0x06	; 6
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    3c52:	8d 81       	ldd	r24, Y+5	; 0x05
    3c54:	9e 81       	ldd	r25, Y+6	; 0x06
    3c56:	8c 01       	movw	r16, r24
    3c58:	0a 5f       	subi	r16, 0xFA	; 250
    3c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c60:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    3c64:	f8 01       	movw	r30, r16
    3c66:	91 83       	std	Z+1, r25	; 0x01
    3c68:	80 83       	st	Z, r24

vdmFree(field_tmp_1);
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6e:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return __buf;
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3c76:	28 96       	adiw	r28, 0x08	; 8
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	cd bf       	out	0x3d, r28	; 61
    3c82:	cf 91       	pop	r28
    3c84:	df 91       	pop	r29
    3c86:	1f 91       	pop	r17
    3c88:	0f 91       	pop	r16
    3c8a:	08 95       	ret

00003c8c <_Z11RobotSensorEV>:


    /* RobotSensor.vdmrt 1:7 */
 TVP _Z11RobotSensorEV(RobotSensorCLASS this)	{
    3c8c:	df 93       	push	r29
    3c8e:	cf 93       	push	r28
    3c90:	00 d0       	rcall	.+0      	; 0x3c92 <_Z11RobotSensorEV+0x6>
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <_Z11RobotSensorEV+0x8>
    3c94:	cd b7       	in	r28, 0x3d	; 61
    3c96:	de b7       	in	r29, 0x3e	; 62
    3c98:	9c 83       	std	Y+4, r25	; 0x04
    3c9a:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    3c9c:	1a 82       	std	Y+2, r1	; 0x02
    3c9e:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	69 f4       	brne	.+26     	; 0x3cc2 <_Z11RobotSensorEV+0x36>
	
	{

__buf = new();
    3ca8:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <new>
    3cac:	9a 83       	std	Y+2, r25	; 0x02
    3cae:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RobotSensor);
    3cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb4:	84 81       	ldd	r24, Z+4	; 0x04
    3cb6:	95 81       	ldd	r25, Z+5	; 0x05
    3cb8:	fc 01       	movw	r30, r24
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	9c 83       	std	Y+4, r25	; 0x04
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <RobotServo_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void RobotServo_free_fields(struct RobotServo *this)
{
    3cd4:	df 93       	push	r29
    3cd6:	cf 93       	push	r28
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <RobotServo_free_fields+0x6>
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	89 83       	std	Y+1, r24	; 0x01
			vdmFree(this->m_RobotServo_port);
    3ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce6:	86 81       	ldd	r24, Z+6	; 0x06
    3ce8:	97 81       	ldd	r25, Z+7	; 0x07
    3cea:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <RobotServo_free>:

static void RobotServo_free(struct RobotServo *this)
{
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <RobotServo_free+0x6>
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	9a 83       	std	Y+2, r25	; 0x02
    3d04:	89 83       	std	Y+1, r24	; 0x01
	--this->_RobotServo_refs;
    3d06:	e9 81       	ldd	r30, Y+1	; 0x01
    3d08:	fa 81       	ldd	r31, Y+2	; 0x02
    3d0a:	84 81       	ldd	r24, Z+4	; 0x04
    3d0c:	95 81       	ldd	r25, Z+5	; 0x05
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	e9 81       	ldd	r30, Y+1	; 0x01
    3d12:	fa 81       	ldd	r31, Y+2	; 0x02
    3d14:	95 83       	std	Z+5, r25	; 0x05
    3d16:	84 83       	std	Z+4, r24	; 0x04
	if (this->_RobotServo_refs < 1)
    3d18:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d1c:	84 81       	ldd	r24, Z+4	; 0x04
    3d1e:	95 81       	ldd	r25, Z+5	; 0x05
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	41 f4       	brne	.+16     	; 0x3d34 <RobotServo_free+0x3c>
	{
		RobotServo_free_fields(this);
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
    3d26:	9a 81       	ldd	r25, Y+2	; 0x02
    3d28:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <RobotServo_free_fields>
		free(this);
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d30:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <_Z18fieldInitializer21EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer21EV()	{
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <_Z18fieldInitializer21EV+0x6>
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62

TVP ret_26 = newInt(1)
;
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01

return ret_26;
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	cf 91       	pop	r28
    3d5e:	df 91       	pop	r29
    3d60:	08 95       	ret

00003d62 <_Z8setServoER>:


/* RobotServo.vdmrt 12:8 */
 static  void _Z8setServoER(RobotServoCLASS this, TVP value)	{
    3d62:	0f 93       	push	r16
    3d64:	1f 93       	push	r17
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	00 d0       	rcall	.+0      	; 0x3d6c <_Z8setServoER+0xa>
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <_Z8setServoER+0xc>
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
    3d72:	9a 83       	std	Y+2, r25	; 0x02
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	7c 83       	std	Y+4, r23	; 0x04
    3d78:	6b 83       	std	Y+3, r22	; 0x03
/* RobotServo.vdmrt 13:19 */
CALL_FUNC(RealPort, RealPort, GET_FIELD_PTR_GC(RobotServo, RobotServo, this, port), CLASS_RealPort__Z8setValueER, value);
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7e:	fc 01       	movw	r30, r24
    3d80:	36 96       	adiw	r30, 0x06	; 6
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    3d8e:	fc 01       	movw	r30, r24
    3d90:	84 81       	ldd	r24, Z+4	; 0x04
    3d92:	95 81       	ldd	r25, Z+5	; 0x05
    3d94:	fc 01       	movw	r30, r24
    3d96:	80 81       	ld	r24, Z
    3d98:	91 81       	ldd	r25, Z+1	; 0x01
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	38 96       	adiw	r30, 0x08	; 8
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	fc 01       	movw	r30, r24
    3da4:	36 96       	adiw	r30, 0x06	; 6
    3da6:	84 81       	ldd	r24, Z+4	; 0x04
    3da8:	95 81       	ldd	r25, Z+5	; 0x05
    3daa:	8c 01       	movw	r16, r24
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	9a 81       	ldd	r25, Y+2	; 0x02
    3db0:	fc 01       	movw	r30, r24
    3db2:	36 96       	adiw	r30, 0x06	; 6
    3db4:	80 81       	ld	r24, Z
    3db6:	91 81       	ldd	r25, Z+1	; 0x01
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	70 e0       	ldi	r23, 0x00	; 0
    3dbc:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	84 81       	ldd	r24, Z+4	; 0x04
    3dc4:	95 81       	ldd	r25, Z+5	; 0x05
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	80 81       	ld	r24, Z
    3dca:	91 81       	ldd	r25, Z+1	; 0x01
    3dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    3dce:	3c 81       	ldd	r19, Y+4	; 0x04
    3dd0:	b9 01       	movw	r22, r18
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	09 95       	icall
}
    3dd6:	0f 90       	pop	r0
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	0f 90       	pop	r0
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	08 95       	ret

00003de8 <RobotServo_const_init>:



 void RobotServo_const_init()	{
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	cd b7       	in	r28, 0x3d	; 61
    3dee:	de b7       	in	r29, 0x3e	; 62

numFields_7 = _Z18fieldInitializer21EV();
    3df0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <_Z18fieldInitializer21EV>
    3df4:	90 93 0d 03 	sts	0x030D, r25
    3df8:	80 93 0c 03 	sts	0x030C, r24

return ;
}
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	08 95       	ret

00003e02 <RobotServo_const_shutdown>:



 void RobotServo_const_shutdown()	{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_7);
    3e0a:	80 91 0c 03 	lds	r24, 0x030C
    3e0e:	90 91 0d 03 	lds	r25, 0x030D
    3e12:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <RobotServo_static_init>:



 void RobotServo_static_init()	{
    3e1c:	df 93       	push	r29
    3e1e:	cf 93       	push	r28
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3e24:	cf 91       	pop	r28
    3e26:	df 91       	pop	r29
    3e28:	08 95       	ret

00003e2a <RobotServo_static_shutdown>:



 void RobotServo_static_shutdown()	{
    3e2a:	df 93       	push	r29
    3e2c:	cf 93       	push	r28
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62

return ;
}
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <RobotServo_Constructor>:
 *
 --------------------------------- */
 
 
RobotServoCLASS RobotServo_Constructor(RobotServoCLASS this_ptr)
{
    3e38:	df 93       	push	r29
    3e3a:	cf 93       	push	r28
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <RobotServo_Constructor+0x6>
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4a:	00 97       	sbiw	r24, 0x00	; 0
    3e4c:	31 f4       	brne	.+12     	; 0x3e5a <RobotServo_Constructor+0x22>
	{
		this_ptr = (RobotServoCLASS) malloc(sizeof(struct RobotServo));
    3e4e:	8a e0       	ldi	r24, 0x0A	; 10
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    3e56:	9a 83       	std	Y+2, r25	; 0x02
    3e58:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5e:	00 97       	sbiw	r24, 0x00	; 0
    3e60:	a1 f0       	breq	.+40     	; 0x3e8a <RobotServo_Constructor+0x52>
	{
	
			
		/*  RobotServo init  */
		this_ptr->_RobotServo_id = CLASS_ID_RobotServo_ID;
    3e62:	e9 81       	ldd	r30, Y+1	; 0x01
    3e64:	fa 81       	ldd	r31, Y+2	; 0x02
    3e66:	8a e0       	ldi	r24, 0x0A	; 10
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	93 83       	std	Z+3, r25	; 0x03
    3e6c:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_RobotServo_refs = 0;
    3e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e70:	fa 81       	ldd	r31, Y+2	; 0x02
    3e72:	15 82       	std	Z+5, r1	; 0x05
    3e74:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_RobotServo_pVTable=VTableArrayForRobotServo;
    3e76:	e9 81       	ldd	r30, Y+1	; 0x01
    3e78:	fa 81       	ldd	r31, Y+2	; 0x02
    3e7a:	88 e7       	ldi	r24, 0x78	; 120
    3e7c:	92 e0       	ldi	r25, 0x02	; 2
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24

							this_ptr->m_RobotServo_port= NULL ;
    3e82:	e9 81       	ldd	r30, Y+1	; 0x01
    3e84:	fa 81       	ldd	r31, Y+2	; 0x02
    3e86:	17 82       	std	Z+7, r1	; 0x07
    3e88:	16 82       	std	Z+6, r1	; 0x06
			}

	return this_ptr;
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <new+0x6>
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <new+0x8>
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <new+0xa>
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
	RobotServoCLASS ptr=RobotServo_Constructor(NULL);
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <RobotServo_Constructor>
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_RobotServo_id, &ptr->_RobotServo_refs, (freeVdmClassFunction)&RobotServo_free, ptr)});
    3eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    3eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    3eb6:	62 81       	ldd	r22, Z+2	; 0x02
    3eb8:	73 81       	ldd	r23, Z+3	; 0x03
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebe:	9c 01       	movw	r18, r24
    3ec0:	2c 5f       	subi	r18, 0xFC	; 252
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec4:	4c e7       	ldi	r20, 0x7C	; 124
    3ec6:	5e e1       	ldi	r21, 0x1E	; 30
    3ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    3eca:	fa 81       	ldd	r31, Y+2	; 0x02
    3ecc:	cb 01       	movw	r24, r22
    3ece:	b9 01       	movw	r22, r18
    3ed0:	9f 01       	movw	r18, r30
    3ed2:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    3ed6:	1b 82       	std	Y+3, r1	; 0x03
    3ed8:	1c 82       	std	Y+4, r1	; 0x04
    3eda:	1d 82       	std	Y+5, r1	; 0x05
    3edc:	1e 82       	std	Y+6, r1	; 0x06
    3ede:	9c 83       	std	Y+4, r25	; 0x04
    3ee0:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	RobotServoCLASS ptr=RobotServo_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    3ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ee4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ee6:	4d 81       	ldd	r20, Y+5	; 0x05
    3ee8:	5e 81       	ldd	r21, Y+6	; 0x06
    3eea:	8b e0       	ldi	r24, 0x0B	; 11
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	ba 01       	movw	r22, r20
    3ef0:	a9 01       	movw	r20, r18
    3ef2:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_RobotServo_id, &ptr->_RobotServo_refs, (freeVdmClassFunction)&RobotServo_free, ptr)});
}
    3ef6:	26 96       	adiw	r28, 0x06	; 6
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <_Z10RobotServoE8CRealPort>:
 *
 --------------------------------- */ 
 

    /* RobotServo.vdmrt 9:8 */
 TVP _Z10RobotServoE8CRealPort(RobotServoCLASS this, TVP p)	{
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	28 97       	sbiw	r28, 0x08	; 8
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	9e 83       	std	Y+6, r25	; 0x06
    3f22:	8d 83       	std	Y+5, r24	; 0x05
    3f24:	78 87       	std	Y+8, r23	; 0x08
    3f26:	6f 83       	std	Y+7, r22	; 0x07

TVP __buf = NULL
;
    3f28:	1c 82       	std	Y+4, r1	; 0x04
    3f2a:	1b 82       	std	Y+3, r1	; 0x03

if ( this == NULL )
    3f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	69 f4       	brne	.+26     	; 0x3f4e <_Z10RobotServoE8CRealPort+0x46>
	
	{

__buf = new();
    3f34:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <new>
    3f38:	9c 83       	std	Y+4, r25	; 0x04
    3f3a:	8b 83       	std	Y+3, r24	; 0x03

this = TO_CLASS_PTR(__buf, RobotServo);
    3f3c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f3e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f40:	84 81       	ldd	r24, Z+4	; 0x04
    3f42:	95 81       	ldd	r25, Z+5	; 0x05
    3f44:	fc 01       	movw	r30, r24
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	9e 83       	std	Y+6, r25	; 0x06
    3f4c:	8d 83       	std	Y+5, r24	; 0x05
}
;
/* RobotServo.vdmrt 10:26 */
TVP field_tmp_10 = vdmCloneGC(p, NULL)
;
    3f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    3f50:	98 85       	ldd	r25, Y+8	; 0x08
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    3f5a:	9a 83       	std	Y+2, r25	; 0x02
    3f5c:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(RobotServo, RobotServo, this, port, field_tmp_10);
    3f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f60:	9e 81       	ldd	r25, Y+6	; 0x06
    3f62:	fc 01       	movw	r30, r24
    3f64:	36 96       	adiw	r30, 0x06	; 6
    3f66:	80 81       	ld	r24, Z
    3f68:	91 81       	ldd	r25, Z+1	; 0x01
    3f6a:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    3f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f70:	9e 81       	ldd	r25, Y+6	; 0x06
    3f72:	8c 01       	movw	r16, r24
    3f74:	0a 5f       	subi	r16, 0xFA	; 250
    3f76:	1f 4f       	sbci	r17, 0xFF	; 255
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7c:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    3f80:	f8 01       	movw	r30, r16
    3f82:	91 83       	std	Z+1, r25	; 0x01
    3f84:	80 83       	st	Z, r24

vdmFree(field_tmp_10);
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8a:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return __buf;
    3f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f90:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3f92:	28 96       	adiw	r28, 0x08	; 8
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	cf 91       	pop	r28
    3fa0:	df 91       	pop	r29
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	08 95       	ret

00003fa8 <_Z10RobotServoEV>:


    /* RobotServo.vdmrt 1:7 */
 TVP _Z10RobotServoEV(RobotServoCLASS this)	{
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	00 d0       	rcall	.+0      	; 0x3fae <_Z10RobotServoEV+0x6>
    3fae:	00 d0       	rcall	.+0      	; 0x3fb0 <_Z10RobotServoEV+0x8>
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	9c 83       	std	Y+4, r25	; 0x04
    3fb6:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    3fb8:	1a 82       	std	Y+2, r1	; 0x02
    3fba:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc0:	00 97       	sbiw	r24, 0x00	; 0
    3fc2:	69 f4       	brne	.+26     	; 0x3fde <_Z10RobotServoEV+0x36>
	
	{

__buf = new();
    3fc4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <new>
    3fc8:	9a 83       	std	Y+2, r25	; 0x02
    3fca:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, RobotServo);
    3fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    3fce:	fa 81       	ldd	r31, Y+2	; 0x02
    3fd0:	84 81       	ldd	r24, Z+4	; 0x04
    3fd2:	95 81       	ldd	r25, Z+5	; 0x05
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	80 81       	ld	r24, Z
    3fd8:	91 81       	ldd	r25, Z+1	; 0x01
    3fda:	9c 83       	std	Y+4, r25	; 0x04
    3fdc:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    3fde:	89 81       	ldd	r24, Y+1	; 0x01
    3fe0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	cf 91       	pop	r28
    3fec:	df 91       	pop	r29
    3fee:	08 95       	ret

00003ff0 <StringPort_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void StringPort_free_fields(struct StringPort *this)
{
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	00 d0       	rcall	.+0      	; 0x3ff6 <StringPort_free_fields+0x6>
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	9a 83       	std	Y+2, r25	; 0x02
    3ffc:	89 83       	std	Y+1, r24	; 0x01
		vdmFree(this->m_StringPort_value);
    3ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    4000:	fa 81       	ldd	r31, Y+2	; 0x02
    4002:	86 85       	ldd	r24, Z+14	; 0x0e
    4004:	97 85       	ldd	r25, Z+15	; 0x0f
    4006:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	cf 91       	pop	r28
    4010:	df 91       	pop	r29
    4012:	08 95       	ret

00004014 <StringPort_free>:

static void StringPort_free(struct StringPort *this)
{
    4014:	df 93       	push	r29
    4016:	cf 93       	push	r28
    4018:	00 d0       	rcall	.+0      	; 0x401a <StringPort_free+0x6>
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
    401e:	9a 83       	std	Y+2, r25	; 0x02
    4020:	89 83       	std	Y+1, r24	; 0x01
	--this->_StringPort_refs;
    4022:	e9 81       	ldd	r30, Y+1	; 0x01
    4024:	fa 81       	ldd	r31, Y+2	; 0x02
    4026:	84 85       	ldd	r24, Z+12	; 0x0c
    4028:	95 85       	ldd	r25, Z+13	; 0x0d
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	e9 81       	ldd	r30, Y+1	; 0x01
    402e:	fa 81       	ldd	r31, Y+2	; 0x02
    4030:	95 87       	std	Z+13, r25	; 0x0d
    4032:	84 87       	std	Z+12, r24	; 0x0c
	if (this->_StringPort_refs < 1)
    4034:	e9 81       	ldd	r30, Y+1	; 0x01
    4036:	fa 81       	ldd	r31, Y+2	; 0x02
    4038:	84 85       	ldd	r24, Z+12	; 0x0c
    403a:	95 85       	ldd	r25, Z+13	; 0x0d
    403c:	00 97       	sbiw	r24, 0x00	; 0
    403e:	41 f4       	brne	.+16     	; 0x4050 <StringPort_free+0x3c>
	{
		StringPort_free_fields(this);
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
    4044:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <StringPort_free_fields>
		free(this);
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	cf 91       	pop	r28
    4056:	df 91       	pop	r29
    4058:	08 95       	ret

0000405a <_Z17fieldInitializer6EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z17fieldInitializer6EV(StringPortCLASS this)	{
    405a:	df 93       	push	r29
    405c:	cf 93       	push	r28
    405e:	00 d0       	rcall	.+0      	; 0x4060 <_Z17fieldInitializer6EV+0x6>
    4060:	00 d0       	rcall	.+0      	; 0x4062 <_Z17fieldInitializer6EV+0x8>
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	9c 83       	std	Y+4, r25	; 0x04
    4068:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 88:20 */
TVP ret_10 = newSeqVar(0, NULL)
;
    406a:	00 d0       	rcall	.+0      	; 0x406c <_Z17fieldInitializer6EV+0x12>
    406c:	00 d0       	rcall	.+0      	; 0x406e <_Z17fieldInitializer6EV+0x14>
    406e:	ed b7       	in	r30, 0x3d	; 61
    4070:	fe b7       	in	r31, 0x3e	; 62
    4072:	31 96       	adiw	r30, 0x01	; 1
    4074:	11 82       	std	Z+1, r1	; 0x01
    4076:	10 82       	st	Z, r1
    4078:	13 82       	std	Z+3, r1	; 0x03
    407a:	12 82       	std	Z+2, r1	; 0x02
    407c:	0e 94 b2 4d 	call	0x9b64	; 0x9b64 <newSeqVar>
    4080:	0f 90       	pop	r0
    4082:	0f 90       	pop	r0
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	9a 83       	std	Y+2, r25	; 0x02
    408a:	89 83       	std	Y+1, r24	; 0x01

return ret_10;
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	cf 91       	pop	r28
    409a:	df 91       	pop	r29
    409c:	08 95       	ret

0000409e <_Z8setValueE1QC>:


/* Fmi.vdmrt 94:12 */
 static  void _Z8setValueE1QC(StringPortCLASS this, TVP v)	{
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	00 d0       	rcall	.+0      	; 0x40a8 <_Z8setValueE1QC+0xa>
    40a8:	00 d0       	rcall	.+0      	; 0x40aa <_Z8setValueE1QC+0xc>
    40aa:	00 d0       	rcall	.+0      	; 0x40ac <_Z8setValueE1QC+0xe>
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
    40b0:	9c 83       	std	Y+4, r25	; 0x04
    40b2:	8b 83       	std	Y+3, r24	; 0x03
    40b4:	7e 83       	std	Y+6, r23	; 0x06
    40b6:	6d 83       	std	Y+5, r22	; 0x05
/* Fmi.vdmrt 95:27 */
TVP field_tmp_5 = vdmCloneGC(v, NULL)
;
    40b8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ba:	9e 81       	ldd	r25, Y+6	; 0x06
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    40c4:	9a 83       	std	Y+2, r25	; 0x02
    40c6:	89 83       	std	Y+1, r24	; 0x01

SET_FIELD_PTR(StringPort, StringPort, this, value, field_tmp_5);
    40c8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ca:	9c 81       	ldd	r25, Y+4	; 0x04
    40cc:	fc 01       	movw	r30, r24
    40ce:	3e 96       	adiw	r30, 0x0e	; 14
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
    40d8:	8b 81       	ldd	r24, Y+3	; 0x03
    40da:	9c 81       	ldd	r25, Y+4	; 0x04
    40dc:	8c 01       	movw	r16, r24
    40de:	02 5f       	subi	r16, 0xF2	; 242
    40e0:	1f 4f       	sbci	r17, 0xFF	; 255
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	9a 81       	ldd	r25, Y+2	; 0x02
    40e6:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    40ea:	f8 01       	movw	r30, r16
    40ec:	91 83       	std	Z+1, r25	; 0x01
    40ee:	80 83       	st	Z, r24

vdmFree(field_tmp_5);
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
    40f2:	9a 81       	ldd	r25, Y+2	; 0x02
    40f4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
}
    40f8:	26 96       	adiw	r28, 0x06	; 6
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	0f be       	out	0x3f, r0	; 63
    4102:	cd bf       	out	0x3d, r28	; 61
    4104:	cf 91       	pop	r28
    4106:	df 91       	pop	r29
    4108:	1f 91       	pop	r17
    410a:	0f 91       	pop	r16
    410c:	08 95       	ret

0000410e <_Z8getValueEV>:


/* Fmi.vdmrt 97:12 */
 static  TVP _Z8getValueEV(StringPortCLASS this)	{
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	00 d0       	rcall	.+0      	; 0x4114 <_Z8getValueEV+0x6>
    4114:	00 d0       	rcall	.+0      	; 0x4116 <_Z8getValueEV+0x8>
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
    411a:	9c 83       	std	Y+4, r25	; 0x04
    411c:	8b 83       	std	Y+3, r24	; 0x03
/* Fmi.vdmrt 98:26 */
TVP ret_11 = vdmCloneGC(GET_FIELD_PTR_GC(StringPort, StringPort, this, value), NULL)
;
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	9c 81       	ldd	r25, Y+4	; 0x04
    4122:	fc 01       	movw	r30, r24
    4124:	3e 96       	adiw	r30, 0x0e	; 14
    4126:	80 81       	ld	r24, Z
    4128:	91 81       	ldd	r25, Z+1	; 0x01
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    4132:	60 e0       	ldi	r22, 0x00	; 0
    4134:	70 e0       	ldi	r23, 0x00	; 0
    4136:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    413a:	9a 83       	std	Y+2, r25	; 0x02
    413c:	89 83       	std	Y+1, r24	; 0x01
/* Fmi.vdmrt 98:19 */
return ret_11;
    413e:	89 81       	ldd	r24, Y+1	; 0x01
    4140:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	cf 91       	pop	r28
    414c:	df 91       	pop	r29
    414e:	08 95       	ret

00004150 <StringPort_const_init>:



 void StringPort_const_init()	{
    4150:	df 93       	push	r29
    4152:	cf 93       	push	r28
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62

return ;
}
    4158:	cf 91       	pop	r28
    415a:	df 91       	pop	r29
    415c:	08 95       	ret

0000415e <StringPort_const_shutdown>:



 void StringPort_const_shutdown()	{
    415e:	df 93       	push	r29
    4160:	cf 93       	push	r28
    4162:	cd b7       	in	r28, 0x3d	; 61
    4164:	de b7       	in	r29, 0x3e	; 62

return ;
}
    4166:	cf 91       	pop	r28
    4168:	df 91       	pop	r29
    416a:	08 95       	ret

0000416c <StringPort_static_init>:



 void StringPort_static_init()	{
    416c:	df 93       	push	r29
    416e:	cf 93       	push	r28
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62

return ;
}
    4174:	cf 91       	pop	r28
    4176:	df 91       	pop	r29
    4178:	08 95       	ret

0000417a <StringPort_static_shutdown>:



 void StringPort_static_shutdown()	{
    417a:	df 93       	push	r29
    417c:	cf 93       	push	r28
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62

return ;
}
    4182:	cf 91       	pop	r28
    4184:	df 91       	pop	r29
    4186:	08 95       	ret

00004188 <Port__Z8getValueEV>:


/* Fmi.vdmrt 29:12 */
 static  TVP Port__Z8getValueEV(PortCLASS base)	{
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	00 d0       	rcall	.+0      	; 0x418e <Port__Z8getValueEV+0x6>
    418e:	00 d0       	rcall	.+0      	; 0x4190 <Port__Z8getValueEV+0x8>
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62
    4194:	9c 83       	std	Y+4, r25	; 0x04
    4196:	8b 83       	std	Y+3, r24	; 0x03

StringPortCLASS this = CLASS_DOWNCAST(Port, StringPort, base)
;
    4198:	8b 81       	ldd	r24, Y+3	; 0x03
    419a:	9c 81       	ldd	r25, Y+4	; 0x04
    419c:	9a 83       	std	Y+2, r25	; 0x02
    419e:	89 83       	std	Y+1, r24	; 0x01

return _Z8getValueEV(this);
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	0e 94 87 20 	call	0x410e	; 0x410e <_Z8getValueEV>
}
    41a8:	0f 90       	pop	r0
    41aa:	0f 90       	pop	r0
    41ac:	0f 90       	pop	r0
    41ae:	0f 90       	pop	r0
    41b0:	cf 91       	pop	r28
    41b2:	df 91       	pop	r29
    41b4:	08 95       	ret

000041b6 <StringPort_Constructor>:
 *
 --------------------------------- */
 
 
StringPortCLASS StringPort_Constructor(StringPortCLASS this_ptr)
{
    41b6:	df 93       	push	r29
    41b8:	cf 93       	push	r28
    41ba:	00 d0       	rcall	.+0      	; 0x41bc <StringPort_Constructor+0x6>
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	9a 83       	std	Y+2, r25	; 0x02
    41c2:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	9a 81       	ldd	r25, Y+2	; 0x02
    41c8:	00 97       	sbiw	r24, 0x00	; 0
    41ca:	31 f4       	brne	.+12     	; 0x41d8 <StringPort_Constructor+0x22>
	{
		this_ptr = (StringPortCLASS) malloc(sizeof(struct StringPort));
    41cc:	82 e1       	ldi	r24, 0x12	; 18
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    41d4:	9a 83       	std	Y+2, r25	; 0x02
    41d6:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	9a 81       	ldd	r25, Y+2	; 0x02
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	c9 f1       	breq	.+114    	; 0x4252 <StringPort_Constructor+0x9c>
	{
	
			
		/*  init base Port  */
		Port_Constructor((PortCLASS)CLASS_CAST(this_ptr,StringPort,Port));
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	9a 81       	ldd	r25, Y+2	; 0x02
    41e4:	0e 94 92 1a 	call	0x3524	; 0x3524 <Port_Constructor>

					if(! g_VTableArrayForStringPort_Override_Port[0].pFunc)
    41e8:	80 91 12 03 	lds	r24, 0x0312
    41ec:	90 91 13 03 	lds	r25, 0x0313
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	89 f4       	brne	.+34     	; 0x4216 <StringPort_Constructor+0x60>
			{
				/*  obtain original Port VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( g_VTableArrayForStringPort_Override_Port, this_ptr->_Port_pVTable, sizeof( struct VTable) * 3);
    41f4:	e9 81       	ldd	r30, Y+1	; 0x01
    41f6:	fa 81       	ldd	r31, Y+2	; 0x02
    41f8:	20 81       	ld	r18, Z
    41fa:	31 81       	ldd	r19, Z+1	; 0x01
    41fc:	8e e0       	ldi	r24, 0x0E	; 14
    41fe:	93 e0       	ldi	r25, 0x03	; 3
    4200:	b9 01       	movw	r22, r18
    4202:	42 e1       	ldi	r20, 0x12	; 18
    4204:	50 e0       	ldi	r21, 0x00	; 0
    4206:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <memcpy>
				
				/*  install overrides  */
									g_VTableArrayForStringPort_Override_Port[CLASS_Port__Z8getValueEV].pFunc = (VirtualFunctionPointer)Port__Z8getValueEV; /*  override  */
    420a:	84 ec       	ldi	r24, 0xC4	; 196
    420c:	90 e2       	ldi	r25, 0x20	; 32
    420e:	90 93 19 03 	sts	0x0319, r25
    4212:	80 93 18 03 	sts	0x0318, r24
					
							}
			this_ptr->_Port_pVTable = g_VTableArrayForStringPort_Override_Port;
    4216:	e9 81       	ldd	r30, Y+1	; 0x01
    4218:	fa 81       	ldd	r31, Y+2	; 0x02
    421a:	8e e0       	ldi	r24, 0x0E	; 14
    421c:	93 e0       	ldi	r25, 0x03	; 3
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	80 83       	st	Z, r24
				
		
		/*  StringPort init  */
		this_ptr->_StringPort_id = CLASS_ID_StringPort_ID;
    4222:	e9 81       	ldd	r30, Y+1	; 0x01
    4224:	fa 81       	ldd	r31, Y+2	; 0x02
    4226:	85 e0       	ldi	r24, 0x05	; 5
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	93 87       	std	Z+11, r25	; 0x0b
    422c:	82 87       	std	Z+10, r24	; 0x0a
		this_ptr->_StringPort_refs = 0;
    422e:	e9 81       	ldd	r30, Y+1	; 0x01
    4230:	fa 81       	ldd	r31, Y+2	; 0x02
    4232:	15 86       	std	Z+13, r1	; 0x0d
    4234:	14 86       	std	Z+12, r1	; 0x0c
		this_ptr->_StringPort_pVTable=VTableArrayForStringPort;
    4236:	e9 81       	ldd	r30, Y+1	; 0x01
    4238:	fa 81       	ldd	r31, Y+2	; 0x02
    423a:	8a e8       	ldi	r24, 0x8A	; 138
    423c:	92 e0       	ldi	r25, 0x02	; 2
    423e:	91 87       	std	Z+9, r25	; 0x09
    4240:	80 87       	std	Z+8, r24	; 0x08

				this_ptr->m_StringPort_value= _Z17fieldInitializer6EV(this_ptr);
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	9a 81       	ldd	r25, Y+2	; 0x02
    4246:	0e 94 2d 20 	call	0x405a	; 0x405a <_Z17fieldInitializer6EV>
    424a:	e9 81       	ldd	r30, Y+1	; 0x01
    424c:	fa 81       	ldd	r31, Y+2	; 0x02
    424e:	97 87       	std	Z+15, r25	; 0x0f
    4250:	86 87       	std	Z+14, r24	; 0x0e
			}

	return this_ptr;
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	08 95       	ret

00004260 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    4260:	df 93       	push	r29
    4262:	cf 93       	push	r28
    4264:	00 d0       	rcall	.+0      	; 0x4266 <new+0x6>
    4266:	00 d0       	rcall	.+0      	; 0x4268 <new+0x8>
    4268:	00 d0       	rcall	.+0      	; 0x426a <new+0xa>
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
	StringPortCLASS ptr=StringPort_Constructor(NULL);
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	0e 94 db 20 	call	0x41b6	; 0x41b6 <StringPort_Constructor>
    4276:	9a 83       	std	Y+2, r25	; 0x02
    4278:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_StringPort_id, &ptr->_StringPort_refs, (freeVdmClassFunction)&StringPort_free, ptr)});
    427a:	e9 81       	ldd	r30, Y+1	; 0x01
    427c:	fa 81       	ldd	r31, Y+2	; 0x02
    427e:	62 85       	ldd	r22, Z+10	; 0x0a
    4280:	73 85       	ldd	r23, Z+11	; 0x0b
    4282:	89 81       	ldd	r24, Y+1	; 0x01
    4284:	9a 81       	ldd	r25, Y+2	; 0x02
    4286:	9c 01       	movw	r18, r24
    4288:	24 5f       	subi	r18, 0xF4	; 244
    428a:	3f 4f       	sbci	r19, 0xFF	; 255
    428c:	4a e0       	ldi	r20, 0x0A	; 10
    428e:	50 e2       	ldi	r21, 0x20	; 32
    4290:	e9 81       	ldd	r30, Y+1	; 0x01
    4292:	fa 81       	ldd	r31, Y+2	; 0x02
    4294:	cb 01       	movw	r24, r22
    4296:	b9 01       	movw	r22, r18
    4298:	9f 01       	movw	r18, r30
    429a:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    429e:	1b 82       	std	Y+3, r1	; 0x03
    42a0:	1c 82       	std	Y+4, r1	; 0x04
    42a2:	1d 82       	std	Y+5, r1	; 0x05
    42a4:	1e 82       	std	Y+6, r1	; 0x06
    42a6:	9c 83       	std	Y+4, r25	; 0x04
    42a8:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	StringPortCLASS ptr=StringPort_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    42aa:	2b 81       	ldd	r18, Y+3	; 0x03
    42ac:	3c 81       	ldd	r19, Y+4	; 0x04
    42ae:	4d 81       	ldd	r20, Y+5	; 0x05
    42b0:	5e 81       	ldd	r21, Y+6	; 0x06
    42b2:	8b e0       	ldi	r24, 0x0B	; 11
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	ba 01       	movw	r22, r20
    42b8:	a9 01       	movw	r20, r18
    42ba:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_StringPort_id, &ptr->_StringPort_refs, (freeVdmClassFunction)&StringPort_free, ptr)});
}
    42be:	26 96       	adiw	r28, 0x06	; 6
    42c0:	0f b6       	in	r0, 0x3f	; 63
    42c2:	f8 94       	cli
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	0f be       	out	0x3f, r0	; 63
    42c8:	cd bf       	out	0x3d, r28	; 61
    42ca:	cf 91       	pop	r28
    42cc:	df 91       	pop	r29
    42ce:	08 95       	ret

000042d0 <_Z10StringPortE1QC>:
 *
 --------------------------------- */ 
 

    /* Fmi.vdmrt 91:12 */
 TVP _Z10StringPortE1QC(StringPortCLASS this, TVP v)	{
    42d0:	df 93       	push	r29
    42d2:	cf 93       	push	r28
    42d4:	00 d0       	rcall	.+0      	; 0x42d6 <_Z10StringPortE1QC+0x6>
    42d6:	00 d0       	rcall	.+0      	; 0x42d8 <_Z10StringPortE1QC+0x8>
    42d8:	00 d0       	rcall	.+0      	; 0x42da <_Z10StringPortE1QC+0xa>
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	9c 83       	std	Y+4, r25	; 0x04
    42e0:	8b 83       	std	Y+3, r24	; 0x03
    42e2:	7e 83       	std	Y+6, r23	; 0x06
    42e4:	6d 83       	std	Y+5, r22	; 0x05

TVP __buf = NULL
;
    42e6:	1a 82       	std	Y+2, r1	; 0x02
    42e8:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    42ea:	8b 81       	ldd	r24, Y+3	; 0x03
    42ec:	9c 81       	ldd	r25, Y+4	; 0x04
    42ee:	00 97       	sbiw	r24, 0x00	; 0
    42f0:	69 f4       	brne	.+26     	; 0x430c <_Z10StringPortE1QC+0x3c>
	
	{

__buf = new();
    42f2:	0e 94 30 21 	call	0x4260	; 0x4260 <new>
    42f6:	9a 83       	std	Y+2, r25	; 0x02
    42f8:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, StringPort);
    42fa:	e9 81       	ldd	r30, Y+1	; 0x01
    42fc:	fa 81       	ldd	r31, Y+2	; 0x02
    42fe:	84 81       	ldd	r24, Z+4	; 0x04
    4300:	95 81       	ldd	r25, Z+5	; 0x05
    4302:	fc 01       	movw	r30, r24
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	9c 83       	std	Y+4, r25	; 0x04
    430a:	8b 83       	std	Y+3, r24	; 0x03
}
;
/* Fmi.vdmrt 92:20 */
CALL_FUNC_PTR(StringPort, StringPort, this, CLASS_StringPort__Z8setValueE1QC, v);
    430c:	8b 81       	ldd	r24, Y+3	; 0x03
    430e:	9c 81       	ldd	r25, Y+4	; 0x04
    4310:	fc 01       	movw	r30, r24
    4312:	38 96       	adiw	r30, 0x08	; 8
    4314:	80 81       	ld	r24, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	fc 01       	movw	r30, r24
    431a:	36 96       	adiw	r30, 0x06	; 6
    431c:	84 81       	ldd	r24, Z+4	; 0x04
    431e:	95 81       	ldd	r25, Z+5	; 0x05
    4320:	fc 01       	movw	r30, r24
    4322:	8b 81       	ldd	r24, Y+3	; 0x03
    4324:	9c 81       	ldd	r25, Y+4	; 0x04
    4326:	2d 81       	ldd	r18, Y+5	; 0x05
    4328:	3e 81       	ldd	r19, Y+6	; 0x06
    432a:	b9 01       	movw	r22, r18
    432c:	09 95       	icall

return __buf;
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4332:	26 96       	adiw	r28, 0x06	; 6
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	08 95       	ret

00004344 <_Z10StringPortEV>:


    /* Fmi.vdmrt 85:7 */
 TVP _Z10StringPortEV(StringPortCLASS this)	{
    4344:	df 93       	push	r29
    4346:	cf 93       	push	r28
    4348:	00 d0       	rcall	.+0      	; 0x434a <_Z10StringPortEV+0x6>
    434a:	00 d0       	rcall	.+0      	; 0x434c <_Z10StringPortEV+0x8>
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	9c 83       	std	Y+4, r25	; 0x04
    4352:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    4354:	1a 82       	std	Y+2, r1	; 0x02
    4356:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    4358:	8b 81       	ldd	r24, Y+3	; 0x03
    435a:	9c 81       	ldd	r25, Y+4	; 0x04
    435c:	00 97       	sbiw	r24, 0x00	; 0
    435e:	69 f4       	brne	.+26     	; 0x437a <_Z10StringPortEV+0x36>
	
	{

__buf = new();
    4360:	0e 94 30 21 	call	0x4260	; 0x4260 <new>
    4364:	9a 83       	std	Y+2, r25	; 0x02
    4366:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, StringPort);
    4368:	e9 81       	ldd	r30, Y+1	; 0x01
    436a:	fa 81       	ldd	r31, Y+2	; 0x02
    436c:	84 81       	ldd	r24, Z+4	; 0x04
    436e:	95 81       	ldd	r25, Z+5	; 0x05
    4370:	fc 01       	movw	r30, r24
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	9c 83       	std	Y+4, r25	; 0x04
    4378:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    437a:	89 81       	ldd	r24, Y+1	; 0x01
    437c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	08 95       	ret

0000438c <System_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void System_free_fields(struct System *this)
{
    438c:	df 93       	push	r29
    438e:	cf 93       	push	r28
    4390:	00 d0       	rcall	.+0      	; 0x4392 <System_free_fields+0x6>
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	9a 83       	std	Y+2, r25	; 0x02
    4398:	89 83       	std	Y+1, r24	; 0x01
			}
    439a:	0f 90       	pop	r0
    439c:	0f 90       	pop	r0
    439e:	cf 91       	pop	r28
    43a0:	df 91       	pop	r29
    43a2:	08 95       	ret

000043a4 <System_free>:

static void System_free(struct System *this)
{
    43a4:	df 93       	push	r29
    43a6:	cf 93       	push	r28
    43a8:	00 d0       	rcall	.+0      	; 0x43aa <System_free+0x6>
    43aa:	cd b7       	in	r28, 0x3d	; 61
    43ac:	de b7       	in	r29, 0x3e	; 62
    43ae:	9a 83       	std	Y+2, r25	; 0x02
    43b0:	89 83       	std	Y+1, r24	; 0x01
	--this->_System_refs;
    43b2:	e9 81       	ldd	r30, Y+1	; 0x01
    43b4:	fa 81       	ldd	r31, Y+2	; 0x02
    43b6:	84 81       	ldd	r24, Z+4	; 0x04
    43b8:	95 81       	ldd	r25, Z+5	; 0x05
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	e9 81       	ldd	r30, Y+1	; 0x01
    43be:	fa 81       	ldd	r31, Y+2	; 0x02
    43c0:	95 83       	std	Z+5, r25	; 0x05
    43c2:	84 83       	std	Z+4, r24	; 0x04
	if (this->_System_refs < 1)
    43c4:	e9 81       	ldd	r30, Y+1	; 0x01
    43c6:	fa 81       	ldd	r31, Y+2	; 0x02
    43c8:	84 81       	ldd	r24, Z+4	; 0x04
    43ca:	95 81       	ldd	r25, Z+5	; 0x05
    43cc:	00 97       	sbiw	r24, 0x00	; 0
    43ce:	41 f4       	brne	.+16     	; 0x43e0 <System_free+0x3c>
	{
		System_free_fields(this);
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	9a 81       	ldd	r25, Y+2	; 0x02
    43d4:	0e 94 c6 21 	call	0x438c	; 0x438c <System_free_fields>
		free(this);
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	9a 81       	ldd	r25, Y+2	; 0x02
    43dc:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <_Z18fieldInitializer10EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer10EV()	{
    43ea:	df 93       	push	r29
    43ec:	cf 93       	push	r28
    43ee:	00 d0       	rcall	.+0      	; 0x43f0 <_Z18fieldInitializer10EV+0x6>
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
/* System.vdmrt 8:46 */
TVP ret_13 = NULL
;
    43f4:	1a 82       	std	Y+2, r1	; 0x02
    43f6:	19 82       	std	Y+1, r1	; 0x01

return ret_13;
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	cf 91       	pop	r28
    4402:	df 91       	pop	r29
    4404:	08 95       	ret

00004406 <_Z17fieldInitializer9EV>:



 static  TVP _Z17fieldInitializer9EV()	{
    4406:	df 93       	push	r29
    4408:	cf 93       	push	r28
    440a:	00 d0       	rcall	.+0      	; 0x440c <_Z17fieldInitializer9EV+0x6>
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
/* System.vdmrt 6:43 */
TVP ret_14 = _Z17HardwareInterfaceEV(NULL)
;
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	0e 94 23 18 	call	0x3046	; 0x3046 <_Z17HardwareInterfaceEV>
    4418:	9a 83       	std	Y+2, r25	; 0x02
    441a:	89 83       	std	Y+1, r24	; 0x01

return ret_14;
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	cf 91       	pop	r28
    4426:	df 91       	pop	r29
    4428:	08 95       	ret

0000442a <_Z17fieldInitializer8EV>:



 static  TVP _Z17fieldInitializer8EV()	{
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	00 d0       	rcall	.+0      	; 0x4430 <_Z17fieldInitializer8EV+0x6>
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62

TVP ret_15 = newInt(2)
;
    4434:	82 e0       	ldi	r24, 0x02	; 2
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    443c:	9a 83       	std	Y+2, r25	; 0x02
    443e:	89 83       	std	Y+1, r24	; 0x01

return ret_15;
    4440:	89 81       	ldd	r24, Y+1	; 0x01
    4442:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	cf 91       	pop	r28
    444a:	df 91       	pop	r29
    444c:	08 95       	ret

0000444e <System_const_init>:



 void System_const_init()	{
    444e:	df 93       	push	r29
    4450:	cf 93       	push	r28
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62

numFields_4 = _Z17fieldInitializer8EV();
    4456:	0e 94 15 22 	call	0x442a	; 0x442a <_Z17fieldInitializer8EV>
    445a:	90 93 21 03 	sts	0x0321, r25
    445e:	80 93 20 03 	sts	0x0320, r24

return ;
}
    4462:	cf 91       	pop	r28
    4464:	df 91       	pop	r29
    4466:	08 95       	ret

00004468 <System_const_shutdown>:



 void System_const_shutdown()	{
    4468:	df 93       	push	r29
    446a:	cf 93       	push	r28
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_4);
    4470:	80 91 20 03 	lds	r24, 0x0320
    4474:	90 91 21 03 	lds	r25, 0x0321
    4478:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    447c:	cf 91       	pop	r28
    447e:	df 91       	pop	r29
    4480:	08 95       	ret

00004482 <System_static_init>:



 void System_static_init()	{
    4482:	df 93       	push	r29
    4484:	cf 93       	push	r28
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62

g_System_hwi = _Z17fieldInitializer9EV();
    448a:	0e 94 03 22 	call	0x4406	; 0x4406 <_Z17fieldInitializer9EV>
    448e:	90 93 23 03 	sts	0x0323, r25
    4492:	80 93 22 03 	sts	0x0322, r24

g_System_controller = _Z18fieldInitializer10EV();
    4496:	0e 94 f5 21 	call	0x43ea	; 0x43ea <_Z18fieldInitializer10EV>
    449a:	90 93 25 03 	sts	0x0325, r25
    449e:	80 93 24 03 	sts	0x0324, r24

return ;
}
    44a2:	cf 91       	pop	r28
    44a4:	df 91       	pop	r29
    44a6:	08 95       	ret

000044a8 <System_static_shutdown>:



 void System_static_shutdown()	{
    44a8:	df 93       	push	r29
    44aa:	cf 93       	push	r28
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62

vdmFree(g_System_hwi);
    44b0:	80 91 22 03 	lds	r24, 0x0322
    44b4:	90 91 23 03 	lds	r25, 0x0323
    44b8:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

vdmFree(g_System_controller);
    44bc:	80 91 24 03 	lds	r24, 0x0324
    44c0:	90 91 25 03 	lds	r25, 0x0325
    44c4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	08 95       	ret

000044ce <System_Constructor>:
 *
 --------------------------------- */
 
 
SystemCLASS System_Constructor(SystemCLASS this_ptr)
{
    44ce:	df 93       	push	r29
    44d0:	cf 93       	push	r28
    44d2:	00 d0       	rcall	.+0      	; 0x44d4 <System_Constructor+0x6>
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	9a 83       	std	Y+2, r25	; 0x02
    44da:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
    44de:	9a 81       	ldd	r25, Y+2	; 0x02
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	31 f4       	brne	.+12     	; 0x44f0 <System_Constructor+0x22>
	{
		this_ptr = (SystemCLASS) malloc(sizeof(struct System));
    44e4:	88 e0       	ldi	r24, 0x08	; 8
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    44ec:	9a 83       	std	Y+2, r25	; 0x02
    44ee:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	9a 81       	ldd	r25, Y+2	; 0x02
    44f4:	00 97       	sbiw	r24, 0x00	; 0
    44f6:	81 f0       	breq	.+32     	; 0x4518 <System_Constructor+0x4a>
	{
	
			
		/*  System init  */
		this_ptr->_System_id = CLASS_ID_System_ID;
    44f8:	e9 81       	ldd	r30, Y+1	; 0x01
    44fa:	fa 81       	ldd	r31, Y+2	; 0x02
    44fc:	87 e0       	ldi	r24, 0x07	; 7
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	93 83       	std	Z+3, r25	; 0x03
    4502:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_System_refs = 0;
    4504:	e9 81       	ldd	r30, Y+1	; 0x01
    4506:	fa 81       	ldd	r31, Y+2	; 0x02
    4508:	15 82       	std	Z+5, r1	; 0x05
    450a:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_System_pVTable=VTableArrayForSystem;
    450c:	e9 81       	ldd	r30, Y+1	; 0x01
    450e:	fa 81       	ldd	r31, Y+2	; 0x02
    4510:	82 ea       	ldi	r24, 0xA2	; 162
    4512:	92 e0       	ldi	r25, 0x02	; 2
    4514:	91 83       	std	Z+1, r25	; 0x01
    4516:	80 83       	st	Z, r24

										}

	return this_ptr;
    4518:	89 81       	ldd	r24, Y+1	; 0x01
    451a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    451c:	0f 90       	pop	r0
    451e:	0f 90       	pop	r0
    4520:	cf 91       	pop	r28
    4522:	df 91       	pop	r29
    4524:	08 95       	ret

00004526 <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    4526:	df 93       	push	r29
    4528:	cf 93       	push	r28
    452a:	00 d0       	rcall	.+0      	; 0x452c <new+0x6>
    452c:	00 d0       	rcall	.+0      	; 0x452e <new+0x8>
    452e:	00 d0       	rcall	.+0      	; 0x4530 <new+0xa>
    4530:	cd b7       	in	r28, 0x3d	; 61
    4532:	de b7       	in	r29, 0x3e	; 62
	SystemCLASS ptr=System_Constructor(NULL);
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	0e 94 67 22 	call	0x44ce	; 0x44ce <System_Constructor>
    453c:	9a 83       	std	Y+2, r25	; 0x02
    453e:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_System_id, &ptr->_System_refs, (freeVdmClassFunction)&System_free, ptr)});
    4540:	e9 81       	ldd	r30, Y+1	; 0x01
    4542:	fa 81       	ldd	r31, Y+2	; 0x02
    4544:	62 81       	ldd	r22, Z+2	; 0x02
    4546:	73 81       	ldd	r23, Z+3	; 0x03
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	9a 81       	ldd	r25, Y+2	; 0x02
    454c:	9c 01       	movw	r18, r24
    454e:	2c 5f       	subi	r18, 0xFC	; 252
    4550:	3f 4f       	sbci	r19, 0xFF	; 255
    4552:	42 ed       	ldi	r20, 0xD2	; 210
    4554:	51 e2       	ldi	r21, 0x21	; 33
    4556:	e9 81       	ldd	r30, Y+1	; 0x01
    4558:	fa 81       	ldd	r31, Y+2	; 0x02
    455a:	cb 01       	movw	r24, r22
    455c:	b9 01       	movw	r22, r18
    455e:	9f 01       	movw	r18, r30
    4560:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    4564:	1b 82       	std	Y+3, r1	; 0x03
    4566:	1c 82       	std	Y+4, r1	; 0x04
    4568:	1d 82       	std	Y+5, r1	; 0x05
    456a:	1e 82       	std	Y+6, r1	; 0x06
    456c:	9c 83       	std	Y+4, r25	; 0x04
    456e:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	SystemCLASS ptr=System_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    4570:	2b 81       	ldd	r18, Y+3	; 0x03
    4572:	3c 81       	ldd	r19, Y+4	; 0x04
    4574:	4d 81       	ldd	r20, Y+5	; 0x05
    4576:	5e 81       	ldd	r21, Y+6	; 0x06
    4578:	8b e0       	ldi	r24, 0x0B	; 11
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	ba 01       	movw	r22, r20
    457e:	a9 01       	movw	r20, r18
    4580:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_System_id, &ptr->_System_refs, (freeVdmClassFunction)&System_free, ptr)});
}
    4584:	26 96       	adiw	r28, 0x06	; 6
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	f8 94       	cli
    458a:	de bf       	out	0x3e, r29	; 62
    458c:	0f be       	out	0x3f, r0	; 63
    458e:	cd bf       	out	0x3d, r28	; 61
    4590:	cf 91       	pop	r28
    4592:	df 91       	pop	r29
    4594:	08 95       	ret

00004596 <_Z6SystemEV>:
 *
 --------------------------------- */ 
 

    /* System.vdmrt 14:8 */
 TVP _Z6SystemEV(SystemCLASS this)	{
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	df 93       	push	r29
    459c:	cf 93       	push	r28
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	2c 97       	sbiw	r28, 0x0c	; 12
    45a4:	0f b6       	in	r0, 0x3f	; 63
    45a6:	f8 94       	cli
    45a8:	de bf       	out	0x3e, r29	; 62
    45aa:	0f be       	out	0x3f, r0	; 63
    45ac:	cd bf       	out	0x3d, r28	; 61
    45ae:	9c 87       	std	Y+12, r25	; 0x0c
    45b0:	8b 87       	std	Y+11, r24	; 0x0b

TVP __buf = NULL
;
    45b2:	1a 86       	std	Y+10, r1	; 0x0a
    45b4:	19 86       	std	Y+9, r1	; 0x09

if ( this == NULL )
    45b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    45b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    45ba:	00 97       	sbiw	r24, 0x00	; 0
    45bc:	69 f4       	brne	.+26     	; 0x45d8 <_Z6SystemEV+0x42>
	
	{

__buf = new();
    45be:	0e 94 93 22 	call	0x4526	; 0x4526 <new>
    45c2:	9a 87       	std	Y+10, r25	; 0x0a
    45c4:	89 87       	std	Y+9, r24	; 0x09

this = TO_CLASS_PTR(__buf, System);
    45c6:	e9 85       	ldd	r30, Y+9	; 0x09
    45c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    45ca:	84 81       	ldd	r24, Z+4	; 0x04
    45cc:	95 81       	ldd	r25, Z+5	; 0x05
    45ce:	fc 01       	movw	r30, r24
    45d0:	80 81       	ld	r24, Z
    45d2:	91 81       	ldd	r25, Z+1	; 0x01
    45d4:	9c 87       	std	Y+12, r25	; 0x0c
    45d6:	8b 87       	std	Y+11, r24	; 0x0b
}
;
/* System.vdmrt 16:9 */
TVP servoLeft = _Z10RobotServoE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), servo_left_out))
;
    45d8:	80 91 22 03 	lds	r24, 0x0322
    45dc:	90 91 23 03 	lds	r25, 0x0323
    45e0:	60 e0       	ldi	r22, 0x00	; 0
    45e2:	70 e0       	ldi	r23, 0x00	; 0
    45e4:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    45e8:	fc 01       	movw	r30, r24
    45ea:	84 81       	ldd	r24, Z+4	; 0x04
    45ec:	95 81       	ldd	r25, Z+5	; 0x05
    45ee:	fc 01       	movw	r30, r24
    45f0:	80 81       	ld	r24, Z
    45f2:	91 81       	ldd	r25, Z+1	; 0x01
    45f4:	fc 01       	movw	r30, r24
    45f6:	3e 96       	adiw	r30, 0x0e	; 14
    45f8:	80 81       	ld	r24, Z
    45fa:	91 81       	ldd	r25, Z+1	; 0x01
    45fc:	60 e0       	ldi	r22, 0x00	; 0
    45fe:	70 e0       	ldi	r23, 0x00	; 0
    4600:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    4604:	9c 01       	movw	r18, r24
    4606:	80 e0       	ldi	r24, 0x00	; 0
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	b9 01       	movw	r22, r18
    460c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_Z10RobotServoE8CRealPort>
    4610:	98 87       	std	Y+8, r25	; 0x08
    4612:	8f 83       	std	Y+7, r24	; 0x07
/* System.vdmrt 17:9 */
TVP servoRight = _Z10RobotServoE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), servo_right_out))
;
    4614:	80 91 22 03 	lds	r24, 0x0322
    4618:	90 91 23 03 	lds	r25, 0x0323
    461c:	60 e0       	ldi	r22, 0x00	; 0
    461e:	70 e0       	ldi	r23, 0x00	; 0
    4620:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    4624:	fc 01       	movw	r30, r24
    4626:	84 81       	ldd	r24, Z+4	; 0x04
    4628:	95 81       	ldd	r25, Z+5	; 0x05
    462a:	fc 01       	movw	r30, r24
    462c:	80 81       	ld	r24, Z
    462e:	91 81       	ldd	r25, Z+1	; 0x01
    4630:	fc 01       	movw	r30, r24
    4632:	3c 96       	adiw	r30, 0x0c	; 12
    4634:	80 81       	ld	r24, Z
    4636:	91 81       	ldd	r25, Z+1	; 0x01
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	70 e0       	ldi	r23, 0x00	; 0
    463c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    4640:	9c 01       	movw	r18, r24
    4642:	80 e0       	ldi	r24, 0x00	; 0
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	b9 01       	movw	r22, r18
    4648:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_Z10RobotServoE8CRealPort>
    464c:	9e 83       	std	Y+6, r25	; 0x06
    464e:	8d 83       	std	Y+5, r24	; 0x05
/* System.vdmrt 18:9 */
TVP sensorRightVal = _Z11RobotSensorE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), rightVal))
;
    4650:	80 91 22 03 	lds	r24, 0x0322
    4654:	90 91 23 03 	lds	r25, 0x0323
    4658:	60 e0       	ldi	r22, 0x00	; 0
    465a:	70 e0       	ldi	r23, 0x00	; 0
    465c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    4660:	fc 01       	movw	r30, r24
    4662:	84 81       	ldd	r24, Z+4	; 0x04
    4664:	95 81       	ldd	r25, Z+5	; 0x05
    4666:	fc 01       	movw	r30, r24
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	fc 01       	movw	r30, r24
    466e:	38 96       	adiw	r30, 0x08	; 8
    4670:	80 81       	ld	r24, Z
    4672:	91 81       	ldd	r25, Z+1	; 0x01
    4674:	60 e0       	ldi	r22, 0x00	; 0
    4676:	70 e0       	ldi	r23, 0x00	; 0
    4678:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    467c:	9c 01       	movw	r18, r24
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	b9 01       	movw	r22, r18
    4684:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <_Z11RobotSensorE8CRealPort>
    4688:	9c 83       	std	Y+4, r25	; 0x04
    468a:	8b 83       	std	Y+3, r24	; 0x03
/* System.vdmrt 19:9 */
TVP sensorLeftVal = _Z11RobotSensorE8CRealPort(NULL, GET_FIELD_GC(HardwareInterface, HardwareInterface, vdmCloneGC(g_System_hwi, NULL), leftVal))
;
    468c:	80 91 22 03 	lds	r24, 0x0322
    4690:	90 91 23 03 	lds	r25, 0x0323
    4694:	60 e0       	ldi	r22, 0x00	; 0
    4696:	70 e0       	ldi	r23, 0x00	; 0
    4698:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    469c:	fc 01       	movw	r30, r24
    469e:	84 81       	ldd	r24, Z+4	; 0x04
    46a0:	95 81       	ldd	r25, Z+5	; 0x05
    46a2:	fc 01       	movw	r30, r24
    46a4:	80 81       	ld	r24, Z
    46a6:	91 81       	ldd	r25, Z+1	; 0x01
    46a8:	fc 01       	movw	r30, r24
    46aa:	36 96       	adiw	r30, 0x06	; 6
    46ac:	80 81       	ld	r24, Z
    46ae:	91 81       	ldd	r25, Z+1	; 0x01
    46b0:	60 e0       	ldi	r22, 0x00	; 0
    46b2:	70 e0       	ldi	r23, 0x00	; 0
    46b4:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    46b8:	9c 01       	movw	r18, r24
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	b9 01       	movw	r22, r18
    46c0:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <_Z11RobotSensorE8CRealPort>
    46c4:	9a 83       	std	Y+2, r25	; 0x02
    46c6:	89 83       	std	Y+1, r24	; 0x01
/* System.vdmrt 21:13 */
g_System_controller = _Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor(NULL, servoLeft, servoRight, sensorRightVal, sensorLeftVal);
    46c8:	2f 81       	ldd	r18, Y+7	; 0x07
    46ca:	38 85       	ldd	r19, Y+8	; 0x08
    46cc:	4d 81       	ldd	r20, Y+5	; 0x05
    46ce:	5e 81       	ldd	r21, Y+6	; 0x06
    46d0:	eb 81       	ldd	r30, Y+3	; 0x03
    46d2:	fc 81       	ldd	r31, Y+4	; 0x04
    46d4:	a9 81       	ldd	r26, Y+1	; 0x01
    46d6:	ba 81       	ldd	r27, Y+2	; 0x02
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	b9 01       	movw	r22, r18
    46de:	9f 01       	movw	r18, r30
    46e0:	8d 01       	movw	r16, r26
    46e2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z10ControllerE10CRobotServo10CRobotServo11CRobotSensor11CRobotSensor>
    46e6:	90 93 25 03 	sts	0x0325, r25
    46ea:	80 93 24 03 	sts	0x0324, r24

return __buf;
    46ee:	89 85       	ldd	r24, Y+9	; 0x09
    46f0:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    46f2:	2c 96       	adiw	r28, 0x0c	; 12
    46f4:	0f b6       	in	r0, 0x3f	; 63
    46f6:	f8 94       	cli
    46f8:	de bf       	out	0x3e, r29	; 62
    46fa:	0f be       	out	0x3f, r0	; 63
    46fc:	cd bf       	out	0x3d, r28	; 61
    46fe:	cf 91       	pop	r28
    4700:	df 91       	pop	r29
    4702:	1f 91       	pop	r17
    4704:	0f 91       	pop	r16
    4706:	08 95       	ret

00004708 <World_free_fields>:
 * Memory management methods
 *
 --------------------------------- */

void World_free_fields(struct World *this)
{
    4708:	df 93       	push	r29
    470a:	cf 93       	push	r28
    470c:	00 d0       	rcall	.+0      	; 0x470e <World_free_fields+0x6>
    470e:	cd b7       	in	r28, 0x3d	; 61
    4710:	de b7       	in	r29, 0x3e	; 62
    4712:	9a 83       	std	Y+2, r25	; 0x02
    4714:	89 83       	std	Y+1, r24	; 0x01
	}
    4716:	0f 90       	pop	r0
    4718:	0f 90       	pop	r0
    471a:	cf 91       	pop	r28
    471c:	df 91       	pop	r29
    471e:	08 95       	ret

00004720 <World_free>:

static void World_free(struct World *this)
{
    4720:	df 93       	push	r29
    4722:	cf 93       	push	r28
    4724:	00 d0       	rcall	.+0      	; 0x4726 <World_free+0x6>
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
    472a:	9a 83       	std	Y+2, r25	; 0x02
    472c:	89 83       	std	Y+1, r24	; 0x01
	--this->_World_refs;
    472e:	e9 81       	ldd	r30, Y+1	; 0x01
    4730:	fa 81       	ldd	r31, Y+2	; 0x02
    4732:	84 81       	ldd	r24, Z+4	; 0x04
    4734:	95 81       	ldd	r25, Z+5	; 0x05
    4736:	01 97       	sbiw	r24, 0x01	; 1
    4738:	e9 81       	ldd	r30, Y+1	; 0x01
    473a:	fa 81       	ldd	r31, Y+2	; 0x02
    473c:	95 83       	std	Z+5, r25	; 0x05
    473e:	84 83       	std	Z+4, r24	; 0x04
	if (this->_World_refs < 1)
    4740:	e9 81       	ldd	r30, Y+1	; 0x01
    4742:	fa 81       	ldd	r31, Y+2	; 0x02
    4744:	84 81       	ldd	r24, Z+4	; 0x04
    4746:	95 81       	ldd	r25, Z+5	; 0x05
    4748:	00 97       	sbiw	r24, 0x00	; 0
    474a:	41 f4       	brne	.+16     	; 0x475c <World_free+0x3c>
	{
		World_free_fields(this);
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	9a 81       	ldd	r25, Y+2	; 0x02
    4750:	0e 94 84 23 	call	0x4708	; 0x4708 <World_free_fields>
		free(this);
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	}
}
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	cf 91       	pop	r28
    4762:	df 91       	pop	r29
    4764:	08 95       	ret

00004766 <_Z18fieldInitializer11EV>:
 * Member methods 
 *
 --------------------------------- */
 

 static  TVP _Z18fieldInitializer11EV()	{
    4766:	df 93       	push	r29
    4768:	cf 93       	push	r28
    476a:	00 d0       	rcall	.+0      	; 0x476c <_Z18fieldInitializer11EV+0x6>
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62

TVP ret_16 = newInt(0)
;
    4770:	80 e0       	ldi	r24, 0x00	; 0
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    4778:	9a 83       	std	Y+2, r25	; 0x02
    477a:	89 83       	std	Y+1, r24	; 0x01

return ret_16;
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	cf 91       	pop	r28
    4786:	df 91       	pop	r29
    4788:	08 95       	ret

0000478a <_Z3runEV>:


/* World.vdmrt 5:8 */
 static  void _Z3runEV(WorldCLASS this)	{
    478a:	df 93       	push	r29
    478c:	cf 93       	push	r28
    478e:	00 d0       	rcall	.+0      	; 0x4790 <_Z3runEV+0x6>
    4790:	cd b7       	in	r28, 0x3d	; 61
    4792:	de b7       	in	r29, 0x3e	; 62
    4794:	9a 83       	std	Y+2, r25	; 0x02
    4796:	89 83       	std	Y+1, r24	; 0x01
/* World.vdmrt 7:5 */
;
/* World.vdmrt 8:5 */
CALL_FUNC_PTR(World, World, this, CLASS_World__Z5blockEV);
    4798:	e9 81       	ldd	r30, Y+1	; 0x01
    479a:	fa 81       	ldd	r31, Y+2	; 0x02
    479c:	80 81       	ld	r24, Z
    479e:	91 81       	ldd	r25, Z+1	; 0x01
    47a0:	fc 01       	movw	r30, r24
    47a2:	36 96       	adiw	r30, 0x06	; 6
    47a4:	84 81       	ldd	r24, Z+4	; 0x04
    47a6:	95 81       	ldd	r25, Z+5	; 0x05
    47a8:	fc 01       	movw	r30, r24
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	9a 81       	ldd	r25, Y+2	; 0x02
    47ae:	09 95       	icall
}
    47b0:	0f 90       	pop	r0
    47b2:	0f 90       	pop	r0
    47b4:	cf 91       	pop	r28
    47b6:	df 91       	pop	r29
    47b8:	08 95       	ret

000047ba <_Z5blockEV>:


/* World.vdmrt 11:9 */
 static  void _Z5blockEV(WorldCLASS this)	{
    47ba:	df 93       	push	r29
    47bc:	cf 93       	push	r28
    47be:	00 d0       	rcall	.+0      	; 0x47c0 <_Z5blockEV+0x6>
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
    47c4:	9a 83       	std	Y+2, r25	; 0x02
    47c6:	89 83       	std	Y+1, r24	; 0x01
/* World.vdmrt 12:13 */
{
/*  Skip  */
}
;
}
    47c8:	0f 90       	pop	r0
    47ca:	0f 90       	pop	r0
    47cc:	cf 91       	pop	r28
    47ce:	df 91       	pop	r29
    47d0:	08 95       	ret

000047d2 <World_const_init>:



 void World_const_init()	{
    47d2:	df 93       	push	r29
    47d4:	cf 93       	push	r28
    47d6:	cd b7       	in	r28, 0x3d	; 61
    47d8:	de b7       	in	r29, 0x3e	; 62

numFields_5 = _Z18fieldInitializer11EV();
    47da:	0e 94 b3 23 	call	0x4766	; 0x4766 <_Z18fieldInitializer11EV>
    47de:	90 93 27 03 	sts	0x0327, r25
    47e2:	80 93 26 03 	sts	0x0326, r24

return ;
}
    47e6:	cf 91       	pop	r28
    47e8:	df 91       	pop	r29
    47ea:	08 95       	ret

000047ec <World_const_shutdown>:



 void World_const_shutdown()	{
    47ec:	df 93       	push	r29
    47ee:	cf 93       	push	r28
    47f0:	cd b7       	in	r28, 0x3d	; 61
    47f2:	de b7       	in	r29, 0x3e	; 62

vdmFree(numFields_5);
    47f4:	80 91 26 03 	lds	r24, 0x0326
    47f8:	90 91 27 03 	lds	r25, 0x0327
    47fc:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

return ;
}
    4800:	cf 91       	pop	r28
    4802:	df 91       	pop	r29
    4804:	08 95       	ret

00004806 <World_static_init>:



 void World_static_init()	{
    4806:	df 93       	push	r29
    4808:	cf 93       	push	r28
    480a:	cd b7       	in	r28, 0x3d	; 61
    480c:	de b7       	in	r29, 0x3e	; 62

return ;
}
    480e:	cf 91       	pop	r28
    4810:	df 91       	pop	r29
    4812:	08 95       	ret

00004814 <World_static_shutdown>:



 void World_static_shutdown()	{
    4814:	df 93       	push	r29
    4816:	cf 93       	push	r28
    4818:	cd b7       	in	r28, 0x3d	; 61
    481a:	de b7       	in	r29, 0x3e	; 62

return ;
}
    481c:	cf 91       	pop	r28
    481e:	df 91       	pop	r29
    4820:	08 95       	ret

00004822 <World_Constructor>:
 *
 --------------------------------- */
 
 
WorldCLASS World_Constructor(WorldCLASS this_ptr)
{
    4822:	df 93       	push	r29
    4824:	cf 93       	push	r28
    4826:	00 d0       	rcall	.+0      	; 0x4828 <World_Constructor+0x6>
    4828:	cd b7       	in	r28, 0x3d	; 61
    482a:	de b7       	in	r29, 0x3e	; 62
    482c:	9a 83       	std	Y+2, r25	; 0x02
    482e:	89 83       	std	Y+1, r24	; 0x01

	if(this_ptr==NULL)
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	9a 81       	ldd	r25, Y+2	; 0x02
    4834:	00 97       	sbiw	r24, 0x00	; 0
    4836:	31 f4       	brne	.+12     	; 0x4844 <World_Constructor+0x22>
	{
		this_ptr = (WorldCLASS) malloc(sizeof(struct World));
    4838:	88 e0       	ldi	r24, 0x08	; 8
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    4840:	9a 83       	std	Y+2, r25	; 0x02
    4842:	89 83       	std	Y+1, r24	; 0x01
	}

	if(this_ptr!=NULL)
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	9a 81       	ldd	r25, Y+2	; 0x02
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	81 f0       	breq	.+32     	; 0x486c <World_Constructor+0x4a>
	{
	
			
		/*  World init  */
		this_ptr->_World_id = CLASS_ID_World_ID;
    484c:	e9 81       	ldd	r30, Y+1	; 0x01
    484e:	fa 81       	ldd	r31, Y+2	; 0x02
    4850:	88 e0       	ldi	r24, 0x08	; 8
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	93 83       	std	Z+3, r25	; 0x03
    4856:	82 83       	std	Z+2, r24	; 0x02
		this_ptr->_World_refs = 0;
    4858:	e9 81       	ldd	r30, Y+1	; 0x01
    485a:	fa 81       	ldd	r31, Y+2	; 0x02
    485c:	15 82       	std	Z+5, r1	; 0x05
    485e:	14 82       	std	Z+4, r1	; 0x04
		this_ptr->_World_pVTable=VTableArrayForWorld;
    4860:	e9 81       	ldd	r30, Y+1	; 0x01
    4862:	fa 81       	ldd	r31, Y+2	; 0x02
    4864:	88 ea       	ldi	r24, 0xA8	; 168
    4866:	92 e0       	ldi	r25, 0x02	; 2
    4868:	91 83       	std	Z+1, r25	; 0x01
    486a:	80 83       	st	Z, r24

				}

	return this_ptr;
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4870:	0f 90       	pop	r0
    4872:	0f 90       	pop	r0
    4874:	cf 91       	pop	r28
    4876:	df 91       	pop	r29
    4878:	08 95       	ret

0000487a <new>:

/*  Method for creating new "class"  */
static TVP new()
{
    487a:	df 93       	push	r29
    487c:	cf 93       	push	r28
    487e:	00 d0       	rcall	.+0      	; 0x4880 <new+0x6>
    4880:	00 d0       	rcall	.+0      	; 0x4882 <new+0x8>
    4882:	00 d0       	rcall	.+0      	; 0x4884 <new+0xa>
    4884:	cd b7       	in	r28, 0x3d	; 61
    4886:	de b7       	in	r29, 0x3e	; 62
	WorldCLASS ptr=World_Constructor(NULL);
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	0e 94 11 24 	call	0x4822	; 0x4822 <World_Constructor>
    4890:	9a 83       	std	Y+2, r25	; 0x02
    4892:	89 83       	std	Y+1, r24	; 0x01

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_World_id, &ptr->_World_refs, (freeVdmClassFunction)&World_free, ptr)});
    4894:	e9 81       	ldd	r30, Y+1	; 0x01
    4896:	fa 81       	ldd	r31, Y+2	; 0x02
    4898:	62 81       	ldd	r22, Z+2	; 0x02
    489a:	73 81       	ldd	r23, Z+3	; 0x03
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	9a 81       	ldd	r25, Y+2	; 0x02
    48a0:	9c 01       	movw	r18, r24
    48a2:	2c 5f       	subi	r18, 0xFC	; 252
    48a4:	3f 4f       	sbci	r19, 0xFF	; 255
    48a6:	40 e9       	ldi	r20, 0x90	; 144
    48a8:	53 e2       	ldi	r21, 0x23	; 35
    48aa:	e9 81       	ldd	r30, Y+1	; 0x01
    48ac:	fa 81       	ldd	r31, Y+2	; 0x02
    48ae:	cb 01       	movw	r24, r22
    48b0:	b9 01       	movw	r22, r18
    48b2:	9f 01       	movw	r18, r30
    48b4:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    48b8:	1b 82       	std	Y+3, r1	; 0x03
    48ba:	1c 82       	std	Y+4, r1	; 0x04
    48bc:	1d 82       	std	Y+5, r1	; 0x05
    48be:	1e 82       	std	Y+6, r1	; 0x06
    48c0:	9c 83       	std	Y+4, r25	; 0x04
    48c2:	8b 83       	std	Y+3, r24	; 0x03
/*  Method for creating new "class"  */
static TVP new()
{
	WorldCLASS ptr=World_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
    48c4:	2b 81       	ldd	r18, Y+3	; 0x03
    48c6:	3c 81       	ldd	r19, Y+4	; 0x04
    48c8:	4d 81       	ldd	r20, Y+5	; 0x05
    48ca:	5e 81       	ldd	r21, Y+6	; 0x06
    48cc:	8b e0       	ldi	r24, 0x0B	; 11
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	ba 01       	movw	r22, r20
    48d2:	a9 01       	movw	r20, r18
    48d4:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
			{	.ptr=newClassValue(ptr->_World_id, &ptr->_World_refs, (freeVdmClassFunction)&World_free, ptr)});
}
    48d8:	26 96       	adiw	r28, 0x06	; 6
    48da:	0f b6       	in	r0, 0x3f	; 63
    48dc:	f8 94       	cli
    48de:	de bf       	out	0x3e, r29	; 62
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	cd bf       	out	0x3d, r28	; 61
    48e4:	cf 91       	pop	r28
    48e6:	df 91       	pop	r29
    48e8:	08 95       	ret

000048ea <_Z5WorldEV>:
 *
 --------------------------------- */ 
 

    /* World.vdmrt 1:7 */
 TVP _Z5WorldEV(WorldCLASS this)	{
    48ea:	df 93       	push	r29
    48ec:	cf 93       	push	r28
    48ee:	00 d0       	rcall	.+0      	; 0x48f0 <_Z5WorldEV+0x6>
    48f0:	00 d0       	rcall	.+0      	; 0x48f2 <_Z5WorldEV+0x8>
    48f2:	cd b7       	in	r28, 0x3d	; 61
    48f4:	de b7       	in	r29, 0x3e	; 62
    48f6:	9c 83       	std	Y+4, r25	; 0x04
    48f8:	8b 83       	std	Y+3, r24	; 0x03

TVP __buf = NULL
;
    48fa:	1a 82       	std	Y+2, r1	; 0x02
    48fc:	19 82       	std	Y+1, r1	; 0x01

if ( this == NULL )
    48fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4900:	9c 81       	ldd	r25, Y+4	; 0x04
    4902:	00 97       	sbiw	r24, 0x00	; 0
    4904:	69 f4       	brne	.+26     	; 0x4920 <_Z5WorldEV+0x36>
	
	{

__buf = new();
    4906:	0e 94 3d 24 	call	0x487a	; 0x487a <new>
    490a:	9a 83       	std	Y+2, r25	; 0x02
    490c:	89 83       	std	Y+1, r24	; 0x01

this = TO_CLASS_PTR(__buf, World);
    490e:	e9 81       	ldd	r30, Y+1	; 0x01
    4910:	fa 81       	ldd	r31, Y+2	; 0x02
    4912:	84 81       	ldd	r24, Z+4	; 0x04
    4914:	95 81       	ldd	r25, Z+5	; 0x05
    4916:	fc 01       	movw	r30, r24
    4918:	80 81       	ld	r24, Z
    491a:	91 81       	ldd	r25, Z+1	; 0x01
    491c:	9c 83       	std	Y+4, r25	; 0x04
    491e:	8b 83       	std	Y+3, r24	; 0x03
}
;

return __buf;
    4920:	89 81       	ldd	r24, Y+1	; 0x01
    4922:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	cf 91       	pop	r28
    492e:	df 91       	pop	r29
    4930:	08 95       	ret

00004932 <newTypeValue>:




TVP newTypeValue(vdmtype type, TypedValueType value)
{
    4932:	df 93       	push	r29
    4934:	cf 93       	push	r28
    4936:	cd b7       	in	r28, 0x3d	; 61
    4938:	de b7       	in	r29, 0x3e	; 62
    493a:	28 97       	sbiw	r28, 0x08	; 8
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	de bf       	out	0x3e, r29	; 62
    4942:	0f be       	out	0x3f, r0	; 63
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	9c 83       	std	Y+4, r25	; 0x04
    4948:	8b 83       	std	Y+3, r24	; 0x03
    494a:	4d 83       	std	Y+5, r20	; 0x05
    494c:	5e 83       	std	Y+6, r21	; 0x06
    494e:	6f 83       	std	Y+7, r22	; 0x07
    4950:	78 87       	std	Y+8, r23	; 0x08
	TVP ptr = malloc(sizeof(struct TypedValue));
    4952:	88 e0       	ldi	r24, 0x08	; 8
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    495a:	9a 83       	std	Y+2, r25	; 0x02
    495c:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    495e:	89 81       	ldd	r24, Y+1	; 0x01
    4960:	9a 81       	ldd	r25, Y+2	; 0x02
    4962:	00 97       	sbiw	r24, 0x00	; 0
    4964:	11 f4       	brne	.+4      	; 0x496a <newTypeValue+0x38>
    4966:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ptr->type = type;
    496a:	e9 81       	ldd	r30, Y+1	; 0x01
    496c:	fa 81       	ldd	r31, Y+2	; 0x02
    496e:	8b 81       	ldd	r24, Y+3	; 0x03
    4970:	9c 81       	ldd	r25, Y+4	; 0x04
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	80 83       	st	Z, r24
	ptr->value = value;
    4976:	e9 81       	ldd	r30, Y+1	; 0x01
    4978:	fa 81       	ldd	r31, Y+2	; 0x02
    497a:	8d 81       	ldd	r24, Y+5	; 0x05
    497c:	9e 81       	ldd	r25, Y+6	; 0x06
    497e:	af 81       	ldd	r26, Y+7	; 0x07
    4980:	b8 85       	ldd	r27, Y+8	; 0x08
    4982:	84 83       	std	Z+4, r24	; 0x04
    4984:	95 83       	std	Z+5, r25	; 0x05
    4986:	a6 83       	std	Z+6, r26	; 0x06
    4988:	b7 83       	std	Z+7, r27	; 0x07
	ptr->ref_from = NULL;
    498a:	e9 81       	ldd	r30, Y+1	; 0x01
    498c:	fa 81       	ldd	r31, Y+2	; 0x02
    498e:	13 82       	std	Z+3, r1	; 0x03
    4990:	12 82       	std	Z+2, r1	; 0x02

	return ptr;
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4996:	28 96       	adiw	r28, 0x08	; 8
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	f8 94       	cli
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	cd bf       	out	0x3d, r28	; 61
    49a2:	cf 91       	pop	r28
    49a4:	df 91       	pop	r29
    49a6:	08 95       	ret

000049a8 <newInt>:

/* #ifndef WITH_GC  */
/* / Basic  */
TVP newInt(int x)
{
    49a8:	df 93       	push	r29
    49aa:	cf 93       	push	r28
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <newInt+0x6>
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <newInt+0x8>
    49b0:	00 d0       	rcall	.+0      	; 0x49b2 <newInt+0xa>
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
    49b6:	9e 83       	std	Y+6, r25	; 0x06
    49b8:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_INT, (TypedValueType
	)
			{ .intVal = x });
    49ba:	19 82       	std	Y+1, r1	; 0x01
    49bc:	1a 82       	std	Y+2, r1	; 0x02
    49be:	1b 82       	std	Y+3, r1	; 0x03
    49c0:	1c 82       	std	Y+4, r1	; 0x04
    49c2:	8d 81       	ldd	r24, Y+5	; 0x05
    49c4:	9e 81       	ldd	r25, Y+6	; 0x06
    49c6:	9a 83       	std	Y+2, r25	; 0x02
    49c8:	89 83       	std	Y+1, r24	; 0x01

/* #ifndef WITH_GC  */
/* / Basic  */
TVP newInt(int x)
{
	return newTypeValue(VDM_INT, (TypedValueType
    49ca:	29 81       	ldd	r18, Y+1	; 0x01
    49cc:	3a 81       	ldd	r19, Y+2	; 0x02
    49ce:	4b 81       	ldd	r20, Y+3	; 0x03
    49d0:	5c 81       	ldd	r21, Y+4	; 0x04
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	ba 01       	movw	r22, r20
    49d8:	a9 01       	movw	r20, r18
    49da:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .intVal = x });
}
    49de:	26 96       	adiw	r28, 0x06	; 6
    49e0:	0f b6       	in	r0, 0x3f	; 63
    49e2:	f8 94       	cli
    49e4:	de bf       	out	0x3e, r29	; 62
    49e6:	0f be       	out	0x3f, r0	; 63
    49e8:	cd bf       	out	0x3d, r28	; 61
    49ea:	cf 91       	pop	r28
    49ec:	df 91       	pop	r29
    49ee:	08 95       	ret

000049f0 <newBool>:

TVP newBool(bool x)
{
    49f0:	df 93       	push	r29
    49f2:	cf 93       	push	r28
    49f4:	00 d0       	rcall	.+0      	; 0x49f6 <newBool+0x6>
    49f6:	00 d0       	rcall	.+0      	; 0x49f8 <newBool+0x8>
    49f8:	0f 92       	push	r0
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62
    49fe:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_BOOL, (TypedValueType
	)
			{ .boolVal = x });
    4a00:	19 82       	std	Y+1, r1	; 0x01
    4a02:	1a 82       	std	Y+2, r1	; 0x02
    4a04:	1b 82       	std	Y+3, r1	; 0x03
    4a06:	1c 82       	std	Y+4, r1	; 0x04
    4a08:	8d 81       	ldd	r24, Y+5	; 0x05
    4a0a:	89 83       	std	Y+1, r24	; 0x01
			{ .intVal = x });
}

TVP newBool(bool x)
{
	return newTypeValue(VDM_BOOL, (TypedValueType
    4a0c:	29 81       	ldd	r18, Y+1	; 0x01
    4a0e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a10:	4b 81       	ldd	r20, Y+3	; 0x03
    4a12:	5c 81       	ldd	r21, Y+4	; 0x04
    4a14:	83 e0       	ldi	r24, 0x03	; 3
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	ba 01       	movw	r22, r20
    4a1a:	a9 01       	movw	r20, r18
    4a1c:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .boolVal = x });
}
    4a20:	0f 90       	pop	r0
    4a22:	0f 90       	pop	r0
    4a24:	0f 90       	pop	r0
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	cf 91       	pop	r28
    4a2c:	df 91       	pop	r29
    4a2e:	08 95       	ret

00004a30 <newReal>:
TVP newReal(double x)
{
    4a30:	df 93       	push	r29
    4a32:	cf 93       	push	r28
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	28 97       	sbiw	r28, 0x08	; 8
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	f8 94       	cli
    4a3e:	de bf       	out	0x3e, r29	; 62
    4a40:	0f be       	out	0x3f, r0	; 63
    4a42:	cd bf       	out	0x3d, r28	; 61
    4a44:	6d 83       	std	Y+5, r22	; 0x05
    4a46:	7e 83       	std	Y+6, r23	; 0x06
    4a48:	8f 83       	std	Y+7, r24	; 0x07
    4a4a:	98 87       	std	Y+8, r25	; 0x08
	return newTypeValue(VDM_REAL, (TypedValueType
	)
			{ .doubleVal = x });
    4a4c:	19 82       	std	Y+1, r1	; 0x01
    4a4e:	1a 82       	std	Y+2, r1	; 0x02
    4a50:	1b 82       	std	Y+3, r1	; 0x03
    4a52:	1c 82       	std	Y+4, r1	; 0x04
    4a54:	8d 81       	ldd	r24, Y+5	; 0x05
    4a56:	9e 81       	ldd	r25, Y+6	; 0x06
    4a58:	af 81       	ldd	r26, Y+7	; 0x07
    4a5a:	b8 85       	ldd	r27, Y+8	; 0x08
    4a5c:	89 83       	std	Y+1, r24	; 0x01
    4a5e:	9a 83       	std	Y+2, r25	; 0x02
    4a60:	ab 83       	std	Y+3, r26	; 0x03
    4a62:	bc 83       	std	Y+4, r27	; 0x04
	)
			{ .boolVal = x });
}
TVP newReal(double x)
{
	return newTypeValue(VDM_REAL, (TypedValueType
    4a64:	29 81       	ldd	r18, Y+1	; 0x01
    4a66:	3a 81       	ldd	r19, Y+2	; 0x02
    4a68:	4b 81       	ldd	r20, Y+3	; 0x03
    4a6a:	5c 81       	ldd	r21, Y+4	; 0x04
    4a6c:	84 e0       	ldi	r24, 0x04	; 4
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	ba 01       	movw	r22, r20
    4a72:	a9 01       	movw	r20, r18
    4a74:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .doubleVal = x });
}
    4a78:	28 96       	adiw	r28, 0x08	; 8
    4a7a:	0f b6       	in	r0, 0x3f	; 63
    4a7c:	f8 94       	cli
    4a7e:	de bf       	out	0x3e, r29	; 62
    4a80:	0f be       	out	0x3f, r0	; 63
    4a82:	cd bf       	out	0x3d, r28	; 61
    4a84:	cf 91       	pop	r28
    4a86:	df 91       	pop	r29
    4a88:	08 95       	ret

00004a8a <newChar>:
TVP newChar(char x)
{
    4a8a:	df 93       	push	r29
    4a8c:	cf 93       	push	r28
    4a8e:	00 d0       	rcall	.+0      	; 0x4a90 <newChar+0x6>
    4a90:	00 d0       	rcall	.+0      	; 0x4a92 <newChar+0x8>
    4a92:	0f 92       	push	r0
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_CHAR, (TypedValueType
	)
			{ .charVal = x });
    4a9a:	19 82       	std	Y+1, r1	; 0x01
    4a9c:	1a 82       	std	Y+2, r1	; 0x02
    4a9e:	1b 82       	std	Y+3, r1	; 0x03
    4aa0:	1c 82       	std	Y+4, r1	; 0x04
    4aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa4:	89 83       	std	Y+1, r24	; 0x01
	)
			{ .doubleVal = x });
}
TVP newChar(char x)
{
	return newTypeValue(VDM_CHAR, (TypedValueType
    4aa6:	29 81       	ldd	r18, Y+1	; 0x01
    4aa8:	3a 81       	ldd	r19, Y+2	; 0x02
    4aaa:	4b 81       	ldd	r20, Y+3	; 0x03
    4aac:	5c 81       	ldd	r21, Y+4	; 0x04
    4aae:	86 e0       	ldi	r24, 0x06	; 6
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	ba 01       	movw	r22, r20
    4ab4:	a9 01       	movw	r20, r18
    4ab6:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .charVal = x });
}
    4aba:	0f 90       	pop	r0
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	cf 91       	pop	r28
    4ac6:	df 91       	pop	r29
    4ac8:	08 95       	ret

00004aca <newQuote>:
TVP newQuote(unsigned int x)
{
    4aca:	df 93       	push	r29
    4acc:	cf 93       	push	r28
    4ace:	00 d0       	rcall	.+0      	; 0x4ad0 <newQuote+0x6>
    4ad0:	00 d0       	rcall	.+0      	; 0x4ad2 <newQuote+0x8>
    4ad2:	00 d0       	rcall	.+0      	; 0x4ad4 <newQuote+0xa>
    4ad4:	cd b7       	in	r28, 0x3d	; 61
    4ad6:	de b7       	in	r29, 0x3e	; 62
    4ad8:	9e 83       	std	Y+6, r25	; 0x06
    4ada:	8d 83       	std	Y+5, r24	; 0x05
	return newTypeValue(VDM_QUOTE, (TypedValueType
	)
			{ .quoteVal = x });
    4adc:	19 82       	std	Y+1, r1	; 0x01
    4ade:	1a 82       	std	Y+2, r1	; 0x02
    4ae0:	1b 82       	std	Y+3, r1	; 0x03
    4ae2:	1c 82       	std	Y+4, r1	; 0x04
    4ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae8:	9a 83       	std	Y+2, r25	; 0x02
    4aea:	89 83       	std	Y+1, r24	; 0x01
	)
			{ .charVal = x });
}
TVP newQuote(unsigned int x)
{
	return newTypeValue(VDM_QUOTE, (TypedValueType
    4aec:	29 81       	ldd	r18, Y+1	; 0x01
    4aee:	3a 81       	ldd	r19, Y+2	; 0x02
    4af0:	4b 81       	ldd	r20, Y+3	; 0x03
    4af2:	5c 81       	ldd	r21, Y+4	; 0x04
    4af4:	89 e0       	ldi	r24, 0x09	; 9
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	ba 01       	movw	r22, r20
    4afa:	a9 01       	movw	r20, r18
    4afc:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .quoteVal = x });
}
    4b00:	26 96       	adiw	r28, 0x06	; 6
    4b02:	0f b6       	in	r0, 0x3f	; 63
    4b04:	f8 94       	cli
    4b06:	de bf       	out	0x3e, r29	; 62
    4b08:	0f be       	out	0x3f, r0	; 63
    4b0a:	cd bf       	out	0x3d, r28	; 61
    4b0c:	cf 91       	pop	r28
    4b0e:	df 91       	pop	r29
    4b10:	08 95       	ret

00004b12 <newToken>:

TVP newToken(TVP x)
{
    4b12:	df 93       	push	r29
    4b14:	cf 93       	push	r28
    4b16:	cd b7       	in	r28, 0x3d	; 61
    4b18:	de b7       	in	r29, 0x3e	; 62
    4b1a:	2f 97       	sbiw	r28, 0x0f	; 15
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	f8 94       	cli
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	9e 87       	std	Y+14, r25	; 0x0e
    4b28:	8d 87       	std	Y+13, r24	; 0x0d
	char *str = unpackString(x);
    4b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b2e:	0e 94 08 69 	call	0xd210	; 0xd210 <unpackString>
    4b32:	98 87       	std	Y+8, r25	; 0x08
    4b34:	8f 83       	std	Y+7, r24	; 0x07
	char *strTmp = str;
    4b36:	8f 81       	ldd	r24, Y+7	; 0x07
    4b38:	98 85       	ldd	r25, Y+8	; 0x08
    4b3a:	9e 83       	std	Y+6, r25	; 0x06
    4b3c:	8d 83       	std	Y+5, r24	; 0x05
	int hashVal = 5381;
    4b3e:	85 e0       	ldi	r24, 0x05	; 5
    4b40:	95 e1       	ldi	r25, 0x15	; 21
    4b42:	9c 83       	std	Y+4, r25	; 0x04
    4b44:	8b 83       	std	Y+3, r24	; 0x03
    4b46:	11 c0       	rjmp	.+34     	; 0x4b6a <newToken+0x58>
	int c;

	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;
    4b48:	8b 81       	ldd	r24, Y+3	; 0x03
    4b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b4c:	9c 01       	movw	r18, r24
    4b4e:	22 0f       	add	r18, r18
    4b50:	33 1f       	adc	r19, r19
    4b52:	22 0f       	add	r18, r18
    4b54:	33 1f       	adc	r19, r19
    4b56:	8b 81       	ldd	r24, Y+3	; 0x03
    4b58:	9c 81       	ldd	r25, Y+4	; 0x04
    4b5a:	28 0f       	add	r18, r24
    4b5c:	39 1f       	adc	r19, r25
    4b5e:	89 81       	ldd	r24, Y+1	; 0x01
    4b60:	9a 81       	ldd	r25, Y+2	; 0x02
    4b62:	82 0f       	add	r24, r18
    4b64:	93 1f       	adc	r25, r19
    4b66:	9c 83       	std	Y+4, r25	; 0x04
    4b68:	8b 83       	std	Y+3, r24	; 0x03
	char *str = unpackString(x);
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
    4b6a:	ef 81       	ldd	r30, Y+7	; 0x07
    4b6c:	f8 85       	ldd	r31, Y+8	; 0x08
    4b6e:	80 81       	ld	r24, Z
    4b70:	99 27       	eor	r25, r25
    4b72:	87 fd       	sbrc	r24, 7
    4b74:	90 95       	com	r25
    4b76:	9a 83       	std	Y+2, r25	; 0x02
    4b78:	89 83       	std	Y+1, r24	; 0x01
    4b7a:	1f 86       	std	Y+15, r1	; 0x0f
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	11 f0       	breq	.+4      	; 0x4b88 <newToken+0x76>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	8f 87       	std	Y+15, r24	; 0x0f
    4b88:	8f 81       	ldd	r24, Y+7	; 0x07
    4b8a:	98 85       	ldd	r25, Y+8	; 0x08
    4b8c:	01 96       	adiw	r24, 0x01	; 1
    4b8e:	98 87       	std	Y+8, r25	; 0x08
    4b90:	8f 83       	std	Y+7, r24	; 0x07
    4b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b94:	88 23       	and	r24, r24
    4b96:	c1 f6       	brne	.-80     	; 0x4b48 <newToken+0x36>
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);
    4b98:	8d 81       	ldd	r24, Y+5	; 0x05
    4b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b9c:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>

	return newTypeValue(VDM_TOKEN, (TypedValueType
	)
			{ .intVal = hashVal });
    4ba0:	19 86       	std	Y+9, r1	; 0x09
    4ba2:	1a 86       	std	Y+10, r1	; 0x0a
    4ba4:	1b 86       	std	Y+11, r1	; 0x0b
    4ba6:	1c 86       	std	Y+12, r1	; 0x0c
    4ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    4baa:	9c 81       	ldd	r25, Y+4	; 0x04
    4bac:	9a 87       	std	Y+10, r25	; 0x0a
    4bae:	89 87       	std	Y+9, r24	; 0x09
	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);

	return newTypeValue(VDM_TOKEN, (TypedValueType
    4bb0:	29 85       	ldd	r18, Y+9	; 0x09
    4bb2:	3a 85       	ldd	r19, Y+10	; 0x0a
    4bb4:	4b 85       	ldd	r20, Y+11	; 0x0b
    4bb6:	5c 85       	ldd	r21, Y+12	; 0x0c
    4bb8:	8a e0       	ldi	r24, 0x0A	; 10
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	ba 01       	movw	r22, r20
    4bbe:	a9 01       	movw	r20, r18
    4bc0:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .intVal = hashVal });
}
    4bc4:	2f 96       	adiw	r28, 0x0f	; 15
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	f8 94       	cli
    4bca:	de bf       	out	0x3e, r29	; 62
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	cd bf       	out	0x3d, r28	; 61
    4bd0:	cf 91       	pop	r28
    4bd2:	df 91       	pop	r29
    4bd4:	08 95       	ret

00004bd6 <newCollection>:

TVP newCollection(size_t size, vdmtype type)
{
    4bd6:	df 93       	push	r29
    4bd8:	cf 93       	push	r28
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
    4bde:	2c 97       	sbiw	r28, 0x0c	; 12
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0f be       	out	0x3f, r0	; 63
    4be8:	cd bf       	out	0x3d, r28	; 61
    4bea:	98 87       	std	Y+8, r25	; 0x08
    4bec:	8f 83       	std	Y+7, r24	; 0x07
    4bee:	7a 87       	std	Y+10, r23	; 0x0a
    4bf0:	69 87       	std	Y+9, r22	; 0x09
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4bf2:	84 e0       	ldi	r24, 0x04	; 4
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    4bfa:	9a 83       	std	Y+2, r25	; 0x02
    4bfc:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4bfe:	89 81       	ldd	r24, Y+1	; 0x01
    4c00:	9a 81       	ldd	r25, Y+2	; 0x02
    4c02:	00 97       	sbiw	r24, 0x00	; 0
    4c04:	11 f4       	brne	.+4      	; 0x4c0a <newCollection+0x34>
    4c06:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ptr->size = size;
    4c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c0c:	98 85       	ldd	r25, Y+8	; 0x08
    4c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    4c10:	fa 81       	ldd	r31, Y+2	; 0x02
    4c12:	93 83       	std	Z+3, r25	; 0x03
    4c14:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4c16:	8f 81       	ldd	r24, Y+7	; 0x07
    4c18:	98 85       	ldd	r25, Y+8	; 0x08
    4c1a:	00 97       	sbiw	r24, 0x00	; 0
    4c1c:	29 f0       	breq	.+10     	; 0x4c28 <newCollection+0x52>
    4c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    4c20:	98 85       	ldd	r25, Y+8	; 0x08
    4c22:	9c 87       	std	Y+12, r25	; 0x0c
    4c24:	8b 87       	std	Y+11, r24	; 0x0b
    4c26:	04 c0       	rjmp	.+8      	; 0x4c30 <newCollection+0x5a>
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	9c 87       	std	Y+12, r25	; 0x0c
    4c2e:	8b 87       	std	Y+11, r24	; 0x0b
    4c30:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c32:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c34:	62 e0       	ldi	r22, 0x02	; 2
    4c36:	70 e0       	ldi	r23, 0x00	; 0
    4c38:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    4c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c40:	91 83       	std	Z+1, r25	; 0x01
    4c42:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4c44:	e9 81       	ldd	r30, Y+1	; 0x01
    4c46:	fa 81       	ldd	r31, Y+2	; 0x02
    4c48:	80 81       	ld	r24, Z
    4c4a:	91 81       	ldd	r25, Z+1	; 0x01
    4c4c:	00 97       	sbiw	r24, 0x00	; 0
    4c4e:	11 f4       	brne	.+4      	; 0x4c54 <newCollection+0x7e>
    4c50:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newTypeValue(type, (TypedValueType
	)
			{ .ptr = ptr });
    4c54:	1b 82       	std	Y+3, r1	; 0x03
    4c56:	1c 82       	std	Y+4, r1	; 0x04
    4c58:	1d 82       	std	Y+5, r1	; 0x05
    4c5a:	1e 82       	std	Y+6, r1	; 0x06
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c60:	9c 83       	std	Y+4, r25	; 0x04
    4c62:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValue(type, (TypedValueType
    4c64:	89 85       	ldd	r24, Y+9	; 0x09
    4c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c68:	2b 81       	ldd	r18, Y+3	; 0x03
    4c6a:	3c 81       	ldd	r19, Y+4	; 0x04
    4c6c:	4d 81       	ldd	r20, Y+5	; 0x05
    4c6e:	5e 81       	ldd	r21, Y+6	; 0x06
    4c70:	ba 01       	movw	r22, r20
    4c72:	a9 01       	movw	r20, r18
    4c74:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .ptr = ptr });
}
    4c78:	2c 96       	adiw	r28, 0x0c	; 12
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	f8 94       	cli
    4c7e:	de bf       	out	0x3e, r29	; 62
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	cd bf       	out	0x3d, r28	; 61
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	08 95       	ret

00004c8a <newCollectionPrealloc>:

TVP newCollectionPrealloc(size_t size, size_t expected_size, vdmtype type)
{
    4c8a:	df 93       	push	r29
    4c8c:	cf 93       	push	r28
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
    4c92:	2c 97       	sbiw	r28, 0x0c	; 12
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	f8 94       	cli
    4c98:	de bf       	out	0x3e, r29	; 62
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	cd bf       	out	0x3d, r28	; 61
    4c9e:	98 87       	std	Y+8, r25	; 0x08
    4ca0:	8f 83       	std	Y+7, r24	; 0x07
    4ca2:	7a 87       	std	Y+10, r23	; 0x0a
    4ca4:	69 87       	std	Y+9, r22	; 0x09
    4ca6:	5c 87       	std	Y+12, r21	; 0x0c
    4ca8:	4b 87       	std	Y+11, r20	; 0x0b
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4caa:	84 e0       	ldi	r24, 0x04	; 4
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    4cb2:	9a 83       	std	Y+2, r25	; 0x02
    4cb4:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cba:	00 97       	sbiw	r24, 0x00	; 0
    4cbc:	11 f4       	brne	.+4      	; 0x4cc2 <newCollectionPrealloc+0x38>
    4cbe:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ptr->size = size;
    4cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    4cc4:	98 85       	ldd	r25, Y+8	; 0x08
    4cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    4cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    4cca:	93 83       	std	Z+3, r25	; 0x03
    4ccc:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4cce:	89 85       	ldd	r24, Y+9	; 0x09
    4cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd2:	62 e0       	ldi	r22, 0x02	; 2
    4cd4:	70 e0       	ldi	r23, 0x00	; 0
    4cd6:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    4cda:	e9 81       	ldd	r30, Y+1	; 0x01
    4cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    4cde:	91 83       	std	Z+1, r25	; 0x01
    4ce0:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ce6:	80 81       	ld	r24, Z
    4ce8:	91 81       	ldd	r25, Z+1	; 0x01
    4cea:	00 97       	sbiw	r24, 0x00	; 0
    4cec:	11 f4       	brne	.+4      	; 0x4cf2 <newCollectionPrealloc+0x68>
    4cee:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newTypeValue(type, (TypedValueType
	)
			{ .ptr = ptr });
    4cf2:	1b 82       	std	Y+3, r1	; 0x03
    4cf4:	1c 82       	std	Y+4, r1	; 0x04
    4cf6:	1d 82       	std	Y+5, r1	; 0x05
    4cf8:	1e 82       	std	Y+6, r1	; 0x06
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfe:	9c 83       	std	Y+4, r25	; 0x04
    4d00:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValue(type, (TypedValueType
    4d02:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d04:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d06:	2b 81       	ldd	r18, Y+3	; 0x03
    4d08:	3c 81       	ldd	r19, Y+4	; 0x04
    4d0a:	4d 81       	ldd	r20, Y+5	; 0x05
    4d0c:	5e 81       	ldd	r21, Y+6	; 0x06
    4d0e:	ba 01       	movw	r22, r20
    4d10:	a9 01       	movw	r20, r18
    4d12:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
	)
			{ .ptr = ptr });
}
    4d16:	2c 96       	adiw	r28, 0x0c	; 12
    4d18:	0f b6       	in	r0, 0x3f	; 63
    4d1a:	f8 94       	cli
    4d1c:	de bf       	out	0x3e, r29	; 62
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	cd bf       	out	0x3d, r28	; 61
    4d22:	cf 91       	pop	r28
    4d24:	df 91       	pop	r29
    4d26:	08 95       	ret

00004d28 <newCollectionGC>:

TVP newCollectionGC(size_t size, vdmtype type, TVP *from)
{
    4d28:	df 93       	push	r29
    4d2a:	cf 93       	push	r28
    4d2c:	cd b7       	in	r28, 0x3d	; 61
    4d2e:	de b7       	in	r29, 0x3e	; 62
    4d30:	2e 97       	sbiw	r28, 0x0e	; 14
    4d32:	0f b6       	in	r0, 0x3f	; 63
    4d34:	f8 94       	cli
    4d36:	de bf       	out	0x3e, r29	; 62
    4d38:	0f be       	out	0x3f, r0	; 63
    4d3a:	cd bf       	out	0x3d, r28	; 61
    4d3c:	98 87       	std	Y+8, r25	; 0x08
    4d3e:	8f 83       	std	Y+7, r24	; 0x07
    4d40:	7a 87       	std	Y+10, r23	; 0x0a
    4d42:	69 87       	std	Y+9, r22	; 0x09
    4d44:	5c 87       	std	Y+12, r21	; 0x0c
    4d46:	4b 87       	std	Y+11, r20	; 0x0b
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4d48:	84 e0       	ldi	r24, 0x04	; 4
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    4d50:	9a 83       	std	Y+2, r25	; 0x02
    4d52:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4d54:	89 81       	ldd	r24, Y+1	; 0x01
    4d56:	9a 81       	ldd	r25, Y+2	; 0x02
    4d58:	00 97       	sbiw	r24, 0x00	; 0
    4d5a:	11 f4       	brne	.+4      	; 0x4d60 <newCollectionGC+0x38>
    4d5c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ptr->size = size;
    4d60:	8f 81       	ldd	r24, Y+7	; 0x07
    4d62:	98 85       	ldd	r25, Y+8	; 0x08
    4d64:	e9 81       	ldd	r30, Y+1	; 0x01
    4d66:	fa 81       	ldd	r31, Y+2	; 0x02
    4d68:	93 83       	std	Z+3, r25	; 0x03
    4d6a:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4d6c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d6e:	98 85       	ldd	r25, Y+8	; 0x08
    4d70:	00 97       	sbiw	r24, 0x00	; 0
    4d72:	29 f0       	breq	.+10     	; 0x4d7e <newCollectionGC+0x56>
    4d74:	8f 81       	ldd	r24, Y+7	; 0x07
    4d76:	98 85       	ldd	r25, Y+8	; 0x08
    4d78:	9e 87       	std	Y+14, r25	; 0x0e
    4d7a:	8d 87       	std	Y+13, r24	; 0x0d
    4d7c:	04 c0       	rjmp	.+8      	; 0x4d86 <newCollectionGC+0x5e>
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	9e 87       	std	Y+14, r25	; 0x0e
    4d84:	8d 87       	std	Y+13, r24	; 0x0d
    4d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d8a:	62 e0       	ldi	r22, 0x02	; 2
    4d8c:	70 e0       	ldi	r23, 0x00	; 0
    4d8e:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    4d92:	e9 81       	ldd	r30, Y+1	; 0x01
    4d94:	fa 81       	ldd	r31, Y+2	; 0x02
    4d96:	91 83       	std	Z+1, r25	; 0x01
    4d98:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    4d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    4d9e:	80 81       	ld	r24, Z
    4da0:	91 81       	ldd	r25, Z+1	; 0x01
    4da2:	00 97       	sbiw	r24, 0x00	; 0
    4da4:	11 f4       	brne	.+4      	; 0x4daa <newCollectionGC+0x82>
    4da6:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newTypeValueGC(type, (TypedValueType
	)
			{ .ptr = ptr }, from);
    4daa:	1b 82       	std	Y+3, r1	; 0x03
    4dac:	1c 82       	std	Y+4, r1	; 0x04
    4dae:	1d 82       	std	Y+5, r1	; 0x05
    4db0:	1e 82       	std	Y+6, r1	; 0x06
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	9a 81       	ldd	r25, Y+2	; 0x02
    4db6:	9c 83       	std	Y+4, r25	; 0x04
    4db8:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(size != 0 ? size : 1, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValueGC(type, (TypedValueType
    4dba:	89 85       	ldd	r24, Y+9	; 0x09
    4dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    4dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    4dc2:	4d 81       	ldd	r20, Y+5	; 0x05
    4dc4:	5e 81       	ldd	r21, Y+6	; 0x06
    4dc6:	eb 85       	ldd	r30, Y+11	; 0x0b
    4dc8:	fc 85       	ldd	r31, Y+12	; 0x0c
    4dca:	ba 01       	movw	r22, r20
    4dcc:	a9 01       	movw	r20, r18
    4dce:	9f 01       	movw	r18, r30
    4dd0:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .ptr = ptr }, from);
}
    4dd4:	2e 96       	adiw	r28, 0x0e	; 14
    4dd6:	0f b6       	in	r0, 0x3f	; 63
    4dd8:	f8 94       	cli
    4dda:	de bf       	out	0x3e, r29	; 62
    4ddc:	0f be       	out	0x3f, r0	; 63
    4dde:	cd bf       	out	0x3d, r28	; 61
    4de0:	cf 91       	pop	r28
    4de2:	df 91       	pop	r29
    4de4:	08 95       	ret

00004de6 <newCollectionPreallocGC>:

TVP newCollectionPreallocGC(size_t size, size_t expected_size, vdmtype type, TVP *from)
{
    4de6:	df 93       	push	r29
    4de8:	cf 93       	push	r28
    4dea:	cd b7       	in	r28, 0x3d	; 61
    4dec:	de b7       	in	r29, 0x3e	; 62
    4dee:	2e 97       	sbiw	r28, 0x0e	; 14
    4df0:	0f b6       	in	r0, 0x3f	; 63
    4df2:	f8 94       	cli
    4df4:	de bf       	out	0x3e, r29	; 62
    4df6:	0f be       	out	0x3f, r0	; 63
    4df8:	cd bf       	out	0x3d, r28	; 61
    4dfa:	98 87       	std	Y+8, r25	; 0x08
    4dfc:	8f 83       	std	Y+7, r24	; 0x07
    4dfe:	7a 87       	std	Y+10, r23	; 0x0a
    4e00:	69 87       	std	Y+9, r22	; 0x09
    4e02:	5c 87       	std	Y+12, r21	; 0x0c
    4e04:	4b 87       	std	Y+11, r20	; 0x0b
    4e06:	3e 87       	std	Y+14, r19	; 0x0e
    4e08:	2d 87       	std	Y+13, r18	; 0x0d
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    4e0a:	84 e0       	ldi	r24, 0x04	; 4
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    4e12:	9a 83       	std	Y+2, r25	; 0x02
    4e14:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    4e16:	89 81       	ldd	r24, Y+1	; 0x01
    4e18:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1a:	00 97       	sbiw	r24, 0x00	; 0
    4e1c:	11 f4       	brne	.+4      	; 0x4e22 <newCollectionPreallocGC+0x3c>
    4e1e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ptr->size = size;
    4e22:	8f 81       	ldd	r24, Y+7	; 0x07
    4e24:	98 85       	ldd	r25, Y+8	; 0x08
    4e26:	e9 81       	ldd	r30, Y+1	; 0x01
    4e28:	fa 81       	ldd	r31, Y+2	; 0x02
    4e2a:	93 83       	std	Z+3, r25	; 0x03
    4e2c:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
    4e2e:	89 85       	ldd	r24, Y+9	; 0x09
    4e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e32:	62 e0       	ldi	r22, 0x02	; 2
    4e34:	70 e0       	ldi	r23, 0x00	; 0
    4e36:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    4e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e3e:	91 83       	std	Z+1, r25	; 0x01
    4e40:	80 83       	st	Z, r24
	assert(ptr->value != NULL);
    4e42:	e9 81       	ldd	r30, Y+1	; 0x01
    4e44:	fa 81       	ldd	r31, Y+2	; 0x02
    4e46:	80 81       	ld	r24, Z
    4e48:	91 81       	ldd	r25, Z+1	; 0x01
    4e4a:	00 97       	sbiw	r24, 0x00	; 0
    4e4c:	11 f4       	brne	.+4      	; 0x4e52 <newCollectionPreallocGC+0x6c>
    4e4e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newTypeValueGC(type, (TypedValueType
	)
			{ .ptr = ptr }, from);
    4e52:	1b 82       	std	Y+3, r1	; 0x03
    4e54:	1c 82       	std	Y+4, r1	; 0x04
    4e56:	1d 82       	std	Y+5, r1	; 0x05
    4e58:	1e 82       	std	Y+6, r1	; 0x06
    4e5a:	89 81       	ldd	r24, Y+1	; 0x01
    4e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e5e:	9c 83       	std	Y+4, r25	; 0x04
    4e60:	8b 83       	std	Y+3, r24	; 0x03
	struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
	assert(ptr != NULL);
	ptr->size = size;
	ptr->value = (TVP*) calloc(expected_size, sizeof(TVP)); /* I know this is slower than malloc but better for products  */
	assert(ptr->value != NULL);
	return newTypeValueGC(type, (TypedValueType
    4e62:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e64:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e66:	2b 81       	ldd	r18, Y+3	; 0x03
    4e68:	3c 81       	ldd	r19, Y+4	; 0x04
    4e6a:	4d 81       	ldd	r20, Y+5	; 0x05
    4e6c:	5e 81       	ldd	r21, Y+6	; 0x06
    4e6e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4e70:	fe 85       	ldd	r31, Y+14	; 0x0e
    4e72:	ba 01       	movw	r22, r20
    4e74:	a9 01       	movw	r20, r18
    4e76:	9f 01       	movw	r18, r30
    4e78:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .ptr = ptr }, from);
}
    4e7c:	2e 96       	adiw	r28, 0x0e	; 14
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	f8 94       	cli
    4e82:	de bf       	out	0x3e, r29	; 62
    4e84:	0f be       	out	0x3f, r0	; 63
    4e86:	cd bf       	out	0x3d, r28	; 61
    4e88:	cf 91       	pop	r28
    4e8a:	df 91       	pop	r29
    4e8c:	08 95       	ret

00004e8e <newCollectionWithValues>:

TVP newCollectionWithValues(size_t size, vdmtype type, TVP* elements)
{
    4e8e:	0f 93       	push	r16
    4e90:	1f 93       	push	r17
    4e92:	df 93       	push	r29
    4e94:	cf 93       	push	r28
    4e96:	cd b7       	in	r28, 0x3d	; 61
    4e98:	de b7       	in	r29, 0x3e	; 62
    4e9a:	2c 97       	sbiw	r28, 0x0c	; 12
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	f8 94       	cli
    4ea0:	de bf       	out	0x3e, r29	; 62
    4ea2:	0f be       	out	0x3f, r0	; 63
    4ea4:	cd bf       	out	0x3d, r28	; 61
    4ea6:	98 87       	std	Y+8, r25	; 0x08
    4ea8:	8f 83       	std	Y+7, r24	; 0x07
    4eaa:	7a 87       	std	Y+10, r23	; 0x0a
    4eac:	69 87       	std	Y+9, r22	; 0x09
    4eae:	5c 87       	std	Y+12, r21	; 0x0c
    4eb0:	4b 87       	std	Y+11, r20	; 0x0b
	int i;

	TVP product = newCollection(size,type);
    4eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    4eb4:	98 85       	ldd	r25, Y+8	; 0x08
    4eb6:	29 85       	ldd	r18, Y+9	; 0x09
    4eb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    4eba:	b9 01       	movw	r22, r18
    4ebc:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <newCollection>
    4ec0:	9c 83       	std	Y+4, r25	; 0x04
    4ec2:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,product);
    4ec4:	eb 81       	ldd	r30, Y+3	; 0x03
    4ec6:	fc 81       	ldd	r31, Y+4	; 0x04
    4ec8:	84 81       	ldd	r24, Z+4	; 0x04
    4eca:	95 81       	ldd	r25, Z+5	; 0x05
    4ecc:	9a 83       	std	Y+2, r25	; 0x02
    4ece:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < size; i++)
    4ed0:	1e 82       	std	Y+6, r1	; 0x06
    4ed2:	1d 82       	std	Y+5, r1	; 0x05
    4ed4:	21 c0       	rjmp	.+66     	; 0x4f18 <newCollectionWithValues+0x8a>
	{
		col->value[i]= vdmClone(elements[i]);
    4ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eda:	20 81       	ld	r18, Z
    4edc:	31 81       	ldd	r19, Z+1	; 0x01
    4ede:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee2:	88 0f       	add	r24, r24
    4ee4:	99 1f       	adc	r25, r25
    4ee6:	89 01       	movw	r16, r18
    4ee8:	08 0f       	add	r16, r24
    4eea:	19 1f       	adc	r17, r25
    4eec:	8d 81       	ldd	r24, Y+5	; 0x05
    4eee:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef0:	9c 01       	movw	r18, r24
    4ef2:	22 0f       	add	r18, r18
    4ef4:	33 1f       	adc	r19, r19
    4ef6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ef8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4efa:	fc 01       	movw	r30, r24
    4efc:	e2 0f       	add	r30, r18
    4efe:	f3 1f       	adc	r31, r19
    4f00:	80 81       	ld	r24, Z
    4f02:	91 81       	ldd	r25, Z+1	; 0x01
    4f04:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    4f08:	f8 01       	movw	r30, r16
    4f0a:	91 83       	std	Z+1, r25	; 0x01
    4f0c:	80 83       	st	Z, r24
	int i;

	TVP product = newCollection(size,type);
	UNWRAP_COLLECTION(col,product);

	for (i = 0; i < size; i++)
    4f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f10:	9e 81       	ldd	r25, Y+6	; 0x06
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	9e 83       	std	Y+6, r25	; 0x06
    4f16:	8d 83       	std	Y+5, r24	; 0x05
    4f18:	2d 81       	ldd	r18, Y+5	; 0x05
    4f1a:	3e 81       	ldd	r19, Y+6	; 0x06
    4f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f1e:	98 85       	ldd	r25, Y+8	; 0x08
    4f20:	28 17       	cp	r18, r24
    4f22:	39 07       	cpc	r19, r25
    4f24:	c0 f2       	brcs	.-80     	; 0x4ed6 <newCollectionWithValues+0x48>
	{
		col->value[i]= vdmClone(elements[i]);
	}
	return product;
    4f26:	8b 81       	ldd	r24, Y+3	; 0x03
    4f28:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4f2a:	2c 96       	adiw	r28, 0x0c	; 12
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	f8 94       	cli
    4f30:	de bf       	out	0x3e, r29	; 62
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	cd bf       	out	0x3d, r28	; 61
    4f36:	cf 91       	pop	r28
    4f38:	df 91       	pop	r29
    4f3a:	1f 91       	pop	r17
    4f3c:	0f 91       	pop	r16
    4f3e:	08 95       	ret

00004f40 <newCollectionWithValuesPrealloc>:

TVP newCollectionWithValuesPrealloc(size_t size, size_t expected_size, vdmtype type, TVP* elements)
{
    4f40:	0f 93       	push	r16
    4f42:	1f 93       	push	r17
    4f44:	df 93       	push	r29
    4f46:	cf 93       	push	r28
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	2e 97       	sbiw	r28, 0x0e	; 14
    4f4e:	0f b6       	in	r0, 0x3f	; 63
    4f50:	f8 94       	cli
    4f52:	de bf       	out	0x3e, r29	; 62
    4f54:	0f be       	out	0x3f, r0	; 63
    4f56:	cd bf       	out	0x3d, r28	; 61
    4f58:	98 87       	std	Y+8, r25	; 0x08
    4f5a:	8f 83       	std	Y+7, r24	; 0x07
    4f5c:	7a 87       	std	Y+10, r23	; 0x0a
    4f5e:	69 87       	std	Y+9, r22	; 0x09
    4f60:	5c 87       	std	Y+12, r21	; 0x0c
    4f62:	4b 87       	std	Y+11, r20	; 0x0b
    4f64:	3e 87       	std	Y+14, r19	; 0x0e
    4f66:	2d 87       	std	Y+13, r18	; 0x0d
	int i;

	TVP product = newCollectionPrealloc(size, expected_size, type);
    4f68:	8f 81       	ldd	r24, Y+7	; 0x07
    4f6a:	98 85       	ldd	r25, Y+8	; 0x08
    4f6c:	29 85       	ldd	r18, Y+9	; 0x09
    4f6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f70:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f72:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f74:	b9 01       	movw	r22, r18
    4f76:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <newCollectionPrealloc>
    4f7a:	9c 83       	std	Y+4, r25	; 0x04
    4f7c:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,product);
    4f7e:	eb 81       	ldd	r30, Y+3	; 0x03
    4f80:	fc 81       	ldd	r31, Y+4	; 0x04
    4f82:	84 81       	ldd	r24, Z+4	; 0x04
    4f84:	95 81       	ldd	r25, Z+5	; 0x05
    4f86:	9a 83       	std	Y+2, r25	; 0x02
    4f88:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < size; i++)
    4f8a:	1e 82       	std	Y+6, r1	; 0x06
    4f8c:	1d 82       	std	Y+5, r1	; 0x05
    4f8e:	21 c0       	rjmp	.+66     	; 0x4fd2 <newCollectionWithValuesPrealloc+0x92>
	{
		col->value[i]= vdmClone(elements[i]);
    4f90:	e9 81       	ldd	r30, Y+1	; 0x01
    4f92:	fa 81       	ldd	r31, Y+2	; 0x02
    4f94:	20 81       	ld	r18, Z
    4f96:	31 81       	ldd	r19, Z+1	; 0x01
    4f98:	8d 81       	ldd	r24, Y+5	; 0x05
    4f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f9c:	88 0f       	add	r24, r24
    4f9e:	99 1f       	adc	r25, r25
    4fa0:	89 01       	movw	r16, r18
    4fa2:	08 0f       	add	r16, r24
    4fa4:	19 1f       	adc	r17, r25
    4fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    4faa:	9c 01       	movw	r18, r24
    4fac:	22 0f       	add	r18, r18
    4fae:	33 1f       	adc	r19, r19
    4fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	e2 0f       	add	r30, r18
    4fb8:	f3 1f       	adc	r31, r19
    4fba:	80 81       	ld	r24, Z
    4fbc:	91 81       	ldd	r25, Z+1	; 0x01
    4fbe:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    4fc2:	f8 01       	movw	r30, r16
    4fc4:	91 83       	std	Z+1, r25	; 0x01
    4fc6:	80 83       	st	Z, r24
	int i;

	TVP product = newCollectionPrealloc(size, expected_size, type);
	UNWRAP_COLLECTION(col,product);

	for (i = 0; i < size; i++)
    4fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4fca:	9e 81       	ldd	r25, Y+6	; 0x06
    4fcc:	01 96       	adiw	r24, 0x01	; 1
    4fce:	9e 83       	std	Y+6, r25	; 0x06
    4fd0:	8d 83       	std	Y+5, r24	; 0x05
    4fd2:	2d 81       	ldd	r18, Y+5	; 0x05
    4fd4:	3e 81       	ldd	r19, Y+6	; 0x06
    4fd6:	8f 81       	ldd	r24, Y+7	; 0x07
    4fd8:	98 85       	ldd	r25, Y+8	; 0x08
    4fda:	28 17       	cp	r18, r24
    4fdc:	39 07       	cpc	r19, r25
    4fde:	c0 f2       	brcs	.-80     	; 0x4f90 <newCollectionWithValuesPrealloc+0x50>
	{
		col->value[i]= vdmClone(elements[i]);
	}
	return product;
    4fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4fe4:	2e 96       	adiw	r28, 0x0e	; 14
    4fe6:	0f b6       	in	r0, 0x3f	; 63
    4fe8:	f8 94       	cli
    4fea:	de bf       	out	0x3e, r29	; 62
    4fec:	0f be       	out	0x3f, r0	; 63
    4fee:	cd bf       	out	0x3d, r28	; 61
    4ff0:	cf 91       	pop	r28
    4ff2:	df 91       	pop	r29
    4ff4:	1f 91       	pop	r17
    4ff6:	0f 91       	pop	r16
    4ff8:	08 95       	ret

00004ffa <newCollectionWithValuesGC>:

TVP newCollectionWithValuesGC(size_t size, vdmtype type, TVP* elements, TVP *from)
{
    4ffa:	0f 93       	push	r16
    4ffc:	1f 93       	push	r17
    4ffe:	df 93       	push	r29
    5000:	cf 93       	push	r28
    5002:	cd b7       	in	r28, 0x3d	; 61
    5004:	de b7       	in	r29, 0x3e	; 62
    5006:	2e 97       	sbiw	r28, 0x0e	; 14
    5008:	0f b6       	in	r0, 0x3f	; 63
    500a:	f8 94       	cli
    500c:	de bf       	out	0x3e, r29	; 62
    500e:	0f be       	out	0x3f, r0	; 63
    5010:	cd bf       	out	0x3d, r28	; 61
    5012:	98 87       	std	Y+8, r25	; 0x08
    5014:	8f 83       	std	Y+7, r24	; 0x07
    5016:	7a 87       	std	Y+10, r23	; 0x0a
    5018:	69 87       	std	Y+9, r22	; 0x09
    501a:	5c 87       	std	Y+12, r21	; 0x0c
    501c:	4b 87       	std	Y+11, r20	; 0x0b
    501e:	3e 87       	std	Y+14, r19	; 0x0e
    5020:	2d 87       	std	Y+13, r18	; 0x0d
	int i;

	TVP product = newCollectionGC(size, type, from);
    5022:	8f 81       	ldd	r24, Y+7	; 0x07
    5024:	98 85       	ldd	r25, Y+8	; 0x08
    5026:	29 85       	ldd	r18, Y+9	; 0x09
    5028:	3a 85       	ldd	r19, Y+10	; 0x0a
    502a:	4d 85       	ldd	r20, Y+13	; 0x0d
    502c:	5e 85       	ldd	r21, Y+14	; 0x0e
    502e:	b9 01       	movw	r22, r18
    5030:	0e 94 94 26 	call	0x4d28	; 0x4d28 <newCollectionGC>
    5034:	9c 83       	std	Y+4, r25	; 0x04
    5036:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, product);
    5038:	eb 81       	ldd	r30, Y+3	; 0x03
    503a:	fc 81       	ldd	r31, Y+4	; 0x04
    503c:	84 81       	ldd	r24, Z+4	; 0x04
    503e:	95 81       	ldd	r25, Z+5	; 0x05
    5040:	9a 83       	std	Y+2, r25	; 0x02
    5042:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < size; i++)
    5044:	1e 82       	std	Y+6, r1	; 0x06
    5046:	1d 82       	std	Y+5, r1	; 0x05
    5048:	21 c0       	rjmp	.+66     	; 0x508c <newCollectionWithValuesGC+0x92>
	{
		col->value[i]= vdmClone(elements[i]);
    504a:	e9 81       	ldd	r30, Y+1	; 0x01
    504c:	fa 81       	ldd	r31, Y+2	; 0x02
    504e:	20 81       	ld	r18, Z
    5050:	31 81       	ldd	r19, Z+1	; 0x01
    5052:	8d 81       	ldd	r24, Y+5	; 0x05
    5054:	9e 81       	ldd	r25, Y+6	; 0x06
    5056:	88 0f       	add	r24, r24
    5058:	99 1f       	adc	r25, r25
    505a:	89 01       	movw	r16, r18
    505c:	08 0f       	add	r16, r24
    505e:	19 1f       	adc	r17, r25
    5060:	8d 81       	ldd	r24, Y+5	; 0x05
    5062:	9e 81       	ldd	r25, Y+6	; 0x06
    5064:	9c 01       	movw	r18, r24
    5066:	22 0f       	add	r18, r18
    5068:	33 1f       	adc	r19, r19
    506a:	8b 85       	ldd	r24, Y+11	; 0x0b
    506c:	9c 85       	ldd	r25, Y+12	; 0x0c
    506e:	fc 01       	movw	r30, r24
    5070:	e2 0f       	add	r30, r18
    5072:	f3 1f       	adc	r31, r19
    5074:	80 81       	ld	r24, Z
    5076:	91 81       	ldd	r25, Z+1	; 0x01
    5078:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    507c:	f8 01       	movw	r30, r16
    507e:	91 83       	std	Z+1, r25	; 0x01
    5080:	80 83       	st	Z, r24
	int i;

	TVP product = newCollectionGC(size, type, from);
	UNWRAP_COLLECTION(col, product);

	for (i = 0; i < size; i++)
    5082:	8d 81       	ldd	r24, Y+5	; 0x05
    5084:	9e 81       	ldd	r25, Y+6	; 0x06
    5086:	01 96       	adiw	r24, 0x01	; 1
    5088:	9e 83       	std	Y+6, r25	; 0x06
    508a:	8d 83       	std	Y+5, r24	; 0x05
    508c:	2d 81       	ldd	r18, Y+5	; 0x05
    508e:	3e 81       	ldd	r19, Y+6	; 0x06
    5090:	8f 81       	ldd	r24, Y+7	; 0x07
    5092:	98 85       	ldd	r25, Y+8	; 0x08
    5094:	28 17       	cp	r18, r24
    5096:	39 07       	cpc	r19, r25
    5098:	c0 f2       	brcs	.-80     	; 0x504a <newCollectionWithValuesGC+0x50>
	{
		col->value[i]= vdmClone(elements[i]);
	}

	return product;
    509a:	8b 81       	ldd	r24, Y+3	; 0x03
    509c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    509e:	2e 96       	adiw	r28, 0x0e	; 14
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	f8 94       	cli
    50a4:	de bf       	out	0x3e, r29	; 62
    50a6:	0f be       	out	0x3f, r0	; 63
    50a8:	cd bf       	out	0x3d, r28	; 61
    50aa:	cf 91       	pop	r28
    50ac:	df 91       	pop	r29
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	08 95       	ret

000050b4 <vdmCollectionSize>:

int vdmCollectionSize(TVP collection)
{
    50b4:	df 93       	push	r29
    50b6:	cf 93       	push	r28
    50b8:	00 d0       	rcall	.+0      	; 0x50ba <vdmCollectionSize+0x6>
    50ba:	00 d0       	rcall	.+0      	; 0x50bc <vdmCollectionSize+0x8>
    50bc:	cd b7       	in	r28, 0x3d	; 61
    50be:	de b7       	in	r29, 0x3e	; 62
    50c0:	9c 83       	std	Y+4, r25	; 0x04
    50c2:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK_COLLECTION(collection);
    50c4:	eb 81       	ldd	r30, Y+3	; 0x03
    50c6:	fc 81       	ldd	r31, Y+4	; 0x04
    50c8:	80 81       	ld	r24, Z
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	88 30       	cpi	r24, 0x08	; 8
    50ce:	91 05       	cpc	r25, r1
    50d0:	49 f0       	breq	.+18     	; 0x50e4 <vdmCollectionSize+0x30>
    50d2:	eb 81       	ldd	r30, Y+3	; 0x03
    50d4:	fc 81       	ldd	r31, Y+4	; 0x04
    50d6:	80 81       	ld	r24, Z
    50d8:	91 81       	ldd	r25, Z+1	; 0x01
    50da:	87 30       	cpi	r24, 0x07	; 7
    50dc:	91 05       	cpc	r25, r1
    50de:	11 f0       	breq	.+4      	; 0x50e4 <vdmCollectionSize+0x30>
    50e0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,collection);
    50e4:	eb 81       	ldd	r30, Y+3	; 0x03
    50e6:	fc 81       	ldd	r31, Y+4	; 0x04
    50e8:	84 81       	ldd	r24, Z+4	; 0x04
    50ea:	95 81       	ldd	r25, Z+5	; 0x05
    50ec:	9a 83       	std	Y+2, r25	; 0x02
    50ee:	89 83       	std	Y+1, r24	; 0x01
	return col->size;
    50f0:	e9 81       	ldd	r30, Y+1	; 0x01
    50f2:	fa 81       	ldd	r31, Y+2	; 0x02
    50f4:	82 81       	ldd	r24, Z+2	; 0x02
    50f6:	93 81       	ldd	r25, Z+3	; 0x03
}
    50f8:	0f 90       	pop	r0
    50fa:	0f 90       	pop	r0
    50fc:	0f 90       	pop	r0
    50fe:	0f 90       	pop	r0
    5100:	cf 91       	pop	r28
    5102:	df 91       	pop	r29
    5104:	08 95       	ret

00005106 <vdmCollectionIndex>:

TVP vdmCollectionIndex(TVP collection,int index)
{
    5106:	df 93       	push	r29
    5108:	cf 93       	push	r28
    510a:	00 d0       	rcall	.+0      	; 0x510c <vdmCollectionIndex+0x6>
    510c:	00 d0       	rcall	.+0      	; 0x510e <vdmCollectionIndex+0x8>
    510e:	00 d0       	rcall	.+0      	; 0x5110 <vdmCollectionIndex+0xa>
    5110:	cd b7       	in	r28, 0x3d	; 61
    5112:	de b7       	in	r29, 0x3e	; 62
    5114:	9c 83       	std	Y+4, r25	; 0x04
    5116:	8b 83       	std	Y+3, r24	; 0x03
    5118:	7e 83       	std	Y+6, r23	; 0x06
    511a:	6d 83       	std	Y+5, r22	; 0x05

	ASSERT_CHECK_COLLECTION(collection);
    511c:	eb 81       	ldd	r30, Y+3	; 0x03
    511e:	fc 81       	ldd	r31, Y+4	; 0x04
    5120:	80 81       	ld	r24, Z
    5122:	91 81       	ldd	r25, Z+1	; 0x01
    5124:	88 30       	cpi	r24, 0x08	; 8
    5126:	91 05       	cpc	r25, r1
    5128:	49 f0       	breq	.+18     	; 0x513c <vdmCollectionIndex+0x36>
    512a:	eb 81       	ldd	r30, Y+3	; 0x03
    512c:	fc 81       	ldd	r31, Y+4	; 0x04
    512e:	80 81       	ld	r24, Z
    5130:	91 81       	ldd	r25, Z+1	; 0x01
    5132:	87 30       	cpi	r24, 0x07	; 7
    5134:	91 05       	cpc	r25, r1
    5136:	11 f0       	breq	.+4      	; 0x513c <vdmCollectionIndex+0x36>
    5138:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col,collection);
    513c:	eb 81       	ldd	r30, Y+3	; 0x03
    513e:	fc 81       	ldd	r31, Y+4	; 0x04
    5140:	84 81       	ldd	r24, Z+4	; 0x04
    5142:	95 81       	ldd	r25, Z+5	; 0x05
    5144:	9a 83       	std	Y+2, r25	; 0x02
    5146:	89 83       	std	Y+1, r24	; 0x01

	assert(index>=0 && index<col->size && "invalid index");
    5148:	8d 81       	ldd	r24, Y+5	; 0x05
    514a:	9e 81       	ldd	r25, Y+6	; 0x06
    514c:	99 23       	and	r25, r25
    514e:	4c f0       	brlt	.+18     	; 0x5162 <vdmCollectionIndex+0x5c>
    5150:	e9 81       	ldd	r30, Y+1	; 0x01
    5152:	fa 81       	ldd	r31, Y+2	; 0x02
    5154:	22 81       	ldd	r18, Z+2	; 0x02
    5156:	33 81       	ldd	r19, Z+3	; 0x03
    5158:	8d 81       	ldd	r24, Y+5	; 0x05
    515a:	9e 81       	ldd	r25, Y+6	; 0x06
    515c:	82 17       	cp	r24, r18
    515e:	93 07       	cpc	r25, r19
    5160:	14 f0       	brlt	.+4      	; 0x5166 <vdmCollectionIndex+0x60>
    5162:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return vdmClone(col->value[index]);
    5166:	e9 81       	ldd	r30, Y+1	; 0x01
    5168:	fa 81       	ldd	r31, Y+2	; 0x02
    516a:	20 81       	ld	r18, Z
    516c:	31 81       	ldd	r19, Z+1	; 0x01
    516e:	8d 81       	ldd	r24, Y+5	; 0x05
    5170:	9e 81       	ldd	r25, Y+6	; 0x06
    5172:	88 0f       	add	r24, r24
    5174:	99 1f       	adc	r25, r25
    5176:	f9 01       	movw	r30, r18
    5178:	e8 0f       	add	r30, r24
    517a:	f9 1f       	adc	r31, r25
    517c:	80 81       	ld	r24, Z
    517e:	91 81       	ldd	r25, Z+1	; 0x01
    5180:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>

}
    5184:	26 96       	adiw	r28, 0x06	; 6
    5186:	0f b6       	in	r0, 0x3f	; 63
    5188:	f8 94       	cli
    518a:	de bf       	out	0x3e, r29	; 62
    518c:	0f be       	out	0x3f, r0	; 63
    518e:	cd bf       	out	0x3d, r28	; 61
    5190:	cf 91       	pop	r28
    5192:	df 91       	pop	r29
    5194:	08 95       	ret

00005196 <vdmClone>:

TVP vdmClone(TVP x)
{
    5196:	0f 93       	push	r16
    5198:	1f 93       	push	r17
    519a:	df 93       	push	r29
    519c:	cf 93       	push	r28
    519e:	cd b7       	in	r28, 0x3d	; 61
    51a0:	de b7       	in	r29, 0x3e	; 62
    51a2:	66 97       	sbiw	r28, 0x16	; 22
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	f8 94       	cli
    51a8:	de bf       	out	0x3e, r29	; 62
    51aa:	0f be       	out	0x3f, r0	; 63
    51ac:	cd bf       	out	0x3d, r28	; 61
    51ae:	9a 8b       	std	Y+18, r25	; 0x12
    51b0:	89 8b       	std	Y+17, r24	; 0x11
	TVP tmp;

	if(x == NULL)
    51b2:	89 89       	ldd	r24, Y+17	; 0x11
    51b4:	9a 89       	ldd	r25, Y+18	; 0x12
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	19 f4       	brne	.+6      	; 0x51c0 <vdmClone+0x2a>
	{
		return NULL;
    51ba:	1e 8a       	std	Y+22, r1	; 0x16
    51bc:	1d 8a       	std	Y+21, r1	; 0x15
    51be:	22 c1       	rjmp	.+580    	; 0x5404 <vdmClone+0x26e>
	}

	tmp = newTypeValue(x->type, x->value);
    51c0:	e9 89       	ldd	r30, Y+17	; 0x11
    51c2:	fa 89       	ldd	r31, Y+18	; 0x12
    51c4:	80 81       	ld	r24, Z
    51c6:	91 81       	ldd	r25, Z+1	; 0x01
    51c8:	e9 89       	ldd	r30, Y+17	; 0x11
    51ca:	fa 89       	ldd	r31, Y+18	; 0x12
    51cc:	24 81       	ldd	r18, Z+4	; 0x04
    51ce:	35 81       	ldd	r19, Z+5	; 0x05
    51d0:	46 81       	ldd	r20, Z+6	; 0x06
    51d2:	57 81       	ldd	r21, Z+7	; 0x07
    51d4:	ba 01       	movw	r22, r20
    51d6:	a9 01       	movw	r20, r18
    51d8:	0e 94 99 24 	call	0x4932	; 0x4932 <newTypeValue>
    51dc:	98 8b       	std	Y+16, r25	; 0x10
    51de:	8f 87       	std	Y+15, r24	; 0x0f

	/* FIXME vdmClone any pointers  */
	switch (tmp->type)
    51e0:	ef 85       	ldd	r30, Y+15	; 0x0f
    51e2:	f8 89       	ldd	r31, Y+16	; 0x10
    51e4:	80 81       	ld	r24, Z
    51e6:	91 81       	ldd	r25, Z+1	; 0x01
    51e8:	9c 8b       	std	Y+20, r25	; 0x14
    51ea:	8b 8b       	std	Y+19, r24	; 0x13
    51ec:	eb 89       	ldd	r30, Y+19	; 0x13
    51ee:	fc 89       	ldd	r31, Y+20	; 0x14
    51f0:	e8 30       	cpi	r30, 0x08	; 8
    51f2:	f1 05       	cpc	r31, r1
    51f4:	c9 f0       	breq	.+50     	; 0x5228 <vdmClone+0x92>
    51f6:	8b 89       	ldd	r24, Y+19	; 0x13
    51f8:	9c 89       	ldd	r25, Y+20	; 0x14
    51fa:	89 30       	cpi	r24, 0x09	; 9
    51fc:	91 05       	cpc	r25, r1
    51fe:	38 f4       	brcc	.+14     	; 0x520e <vdmClone+0x78>
    5200:	eb 89       	ldd	r30, Y+19	; 0x13
    5202:	fc 89       	ldd	r31, Y+20	; 0x14
    5204:	e7 30       	cpi	r30, 0x07	; 7
    5206:	f1 05       	cpc	r31, r1
    5208:	08 f4       	brcc	.+2      	; 0x520c <vdmClone+0x76>
    520a:	f8 c0       	rjmp	.+496    	; 0x53fc <vdmClone+0x266>
    520c:	74 c0       	rjmp	.+232    	; 0x52f6 <vdmClone+0x160>
    520e:	8b 89       	ldd	r24, Y+19	; 0x13
    5210:	9c 89       	ldd	r25, Y+20	; 0x14
    5212:	8b 30       	cpi	r24, 0x0B	; 11
    5214:	91 05       	cpc	r25, r1
    5216:	08 f4       	brcc	.+2      	; 0x521a <vdmClone+0x84>
    5218:	f1 c0       	rjmp	.+482    	; 0x53fc <vdmClone+0x266>
    521a:	eb 89       	ldd	r30, Y+19	; 0x13
    521c:	fc 89       	ldd	r31, Y+20	; 0x14
    521e:	eb 30       	cpi	r30, 0x0B	; 11
    5220:	f1 05       	cpc	r31, r1
    5222:	09 f4       	brne	.+2      	; 0x5226 <vdmClone+0x90>
    5224:	cf c0       	rjmp	.+414    	; 0x53c4 <vdmClone+0x22e>
    5226:	ea c0       	rjmp	.+468    	; 0x53fc <vdmClone+0x266>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    5228:	ef 85       	ldd	r30, Y+15	; 0x0f
    522a:	f8 89       	ldd	r31, Y+16	; 0x10
    522c:	84 81       	ldd	r24, Z+4	; 0x04
    522e:	95 81       	ldd	r25, Z+5	; 0x05
    5230:	9c 87       	std	Y+12, r25	; 0x0c
    5232:	8b 87       	std	Y+11, r24	; 0x0b

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    5234:	84 e0       	ldi	r24, 0x04	; 4
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    523c:	9a 87       	std	Y+10, r25	; 0x0a
    523e:	89 87       	std	Y+9, r24	; 0x09
		assert(ptr != NULL);
    5240:	89 85       	ldd	r24, Y+9	; 0x09
    5242:	9a 85       	ldd	r25, Y+10	; 0x0a
    5244:	00 97       	sbiw	r24, 0x00	; 0
    5246:	11 f4       	brne	.+4      	; 0x524c <vdmClone+0xb6>
    5248:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    524c:	eb 85       	ldd	r30, Y+11	; 0x0b
    524e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5250:	80 81       	ld	r24, Z
    5252:	91 81       	ldd	r25, Z+1	; 0x01
    5254:	a2 81       	ldd	r26, Z+2	; 0x02
    5256:	b3 81       	ldd	r27, Z+3	; 0x03
    5258:	e9 85       	ldd	r30, Y+9	; 0x09
    525a:	fa 85       	ldd	r31, Y+10	; 0x0a
    525c:	80 83       	st	Z, r24
    525e:	91 83       	std	Z+1, r25	; 0x01
    5260:	a2 83       	std	Z+2, r26	; 0x02
    5262:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    5264:	e9 85       	ldd	r30, Y+9	; 0x09
    5266:	fa 85       	ldd	r31, Y+10	; 0x0a
    5268:	82 81       	ldd	r24, Z+2	; 0x02
    526a:	93 81       	ldd	r25, Z+3	; 0x03
    526c:	88 0f       	add	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    5274:	e9 85       	ldd	r30, Y+9	; 0x09
    5276:	fa 85       	ldd	r31, Y+10	; 0x0a
    5278:	91 83       	std	Z+1, r25	; 0x01
    527a:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    527c:	e9 85       	ldd	r30, Y+9	; 0x09
    527e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5280:	80 81       	ld	r24, Z
    5282:	91 81       	ldd	r25, Z+1	; 0x01
    5284:	00 97       	sbiw	r24, 0x00	; 0
    5286:	11 f4       	brne	.+4      	; 0x528c <vdmClone+0xf6>
    5288:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		for (i = 0; i < cptr->size; i++)
    528c:	1e 86       	std	Y+14, r1	; 0x0e
    528e:	1d 86       	std	Y+13, r1	; 0x0d
    5290:	22 c0       	rjmp	.+68     	; 0x52d6 <vdmClone+0x140>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    5292:	e9 85       	ldd	r30, Y+9	; 0x09
    5294:	fa 85       	ldd	r31, Y+10	; 0x0a
    5296:	20 81       	ld	r18, Z
    5298:	31 81       	ldd	r19, Z+1	; 0x01
    529a:	8d 85       	ldd	r24, Y+13	; 0x0d
    529c:	9e 85       	ldd	r25, Y+14	; 0x0e
    529e:	88 0f       	add	r24, r24
    52a0:	99 1f       	adc	r25, r25
    52a2:	89 01       	movw	r16, r18
    52a4:	08 0f       	add	r16, r24
    52a6:	19 1f       	adc	r17, r25
    52a8:	eb 85       	ldd	r30, Y+11	; 0x0b
    52aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    52ac:	20 81       	ld	r18, Z
    52ae:	31 81       	ldd	r19, Z+1	; 0x01
    52b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    52b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    52b4:	88 0f       	add	r24, r24
    52b6:	99 1f       	adc	r25, r25
    52b8:	f9 01       	movw	r30, r18
    52ba:	e8 0f       	add	r30, r24
    52bc:	f9 1f       	adc	r31, r25
    52be:	80 81       	ld	r24, Z
    52c0:	91 81       	ldd	r25, Z+1	; 0x01
    52c2:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    52c6:	f8 01       	movw	r30, r16
    52c8:	91 83       	std	Z+1, r25	; 0x01
    52ca:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    52cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    52d0:	01 96       	adiw	r24, 0x01	; 1
    52d2:	9e 87       	std	Y+14, r25	; 0x0e
    52d4:	8d 87       	std	Y+13, r24	; 0x0d
    52d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    52d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    52da:	22 81       	ldd	r18, Z+2	; 0x02
    52dc:	33 81       	ldd	r19, Z+3	; 0x03
    52de:	8d 85       	ldd	r24, Y+13	; 0x0d
    52e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    52e2:	82 17       	cp	r24, r18
    52e4:	93 07       	cpc	r25, r19
    52e6:	ac f2       	brlt	.-86     	; 0x5292 <vdmClone+0xfc>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    52e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    52ea:	f8 89       	ldd	r31, Y+16	; 0x10
    52ec:	89 85       	ldd	r24, Y+9	; 0x09
    52ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    52f0:	95 83       	std	Z+5, r25	; 0x05
    52f2:	84 83       	std	Z+4, r24	; 0x04
    52f4:	83 c0       	rjmp	.+262    	; 0x53fc <vdmClone+0x266>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    52f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    52f8:	f8 89       	ldd	r31, Y+16	; 0x10
    52fa:	84 81       	ldd	r24, Z+4	; 0x04
    52fc:	95 81       	ldd	r25, Z+5	; 0x05
    52fe:	9e 83       	std	Y+6, r25	; 0x06
    5300:	8d 83       	std	Y+5, r24	; 0x05

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    5302:	84 e0       	ldi	r24, 0x04	; 4
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    530a:	9c 83       	std	Y+4, r25	; 0x04
    530c:	8b 83       	std	Y+3, r24	; 0x03
		assert(ptr != NULL);
    530e:	8b 81       	ldd	r24, Y+3	; 0x03
    5310:	9c 81       	ldd	r25, Y+4	; 0x04
    5312:	00 97       	sbiw	r24, 0x00	; 0
    5314:	11 f4       	brne	.+4      	; 0x531a <vdmClone+0x184>
    5316:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    531a:	ed 81       	ldd	r30, Y+5	; 0x05
    531c:	fe 81       	ldd	r31, Y+6	; 0x06
    531e:	80 81       	ld	r24, Z
    5320:	91 81       	ldd	r25, Z+1	; 0x01
    5322:	a2 81       	ldd	r26, Z+2	; 0x02
    5324:	b3 81       	ldd	r27, Z+3	; 0x03
    5326:	eb 81       	ldd	r30, Y+3	; 0x03
    5328:	fc 81       	ldd	r31, Y+4	; 0x04
    532a:	80 83       	st	Z, r24
    532c:	91 83       	std	Z+1, r25	; 0x01
    532e:	a2 83       	std	Z+2, r26	; 0x02
    5330:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    5332:	eb 81       	ldd	r30, Y+3	; 0x03
    5334:	fc 81       	ldd	r31, Y+4	; 0x04
    5336:	82 81       	ldd	r24, Z+2	; 0x02
    5338:	93 81       	ldd	r25, Z+3	; 0x03
    533a:	88 0f       	add	r24, r24
    533c:	99 1f       	adc	r25, r25
    533e:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    5342:	eb 81       	ldd	r30, Y+3	; 0x03
    5344:	fc 81       	ldd	r31, Y+4	; 0x04
    5346:	91 83       	std	Z+1, r25	; 0x01
    5348:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    534a:	eb 81       	ldd	r30, Y+3	; 0x03
    534c:	fc 81       	ldd	r31, Y+4	; 0x04
    534e:	80 81       	ld	r24, Z
    5350:	91 81       	ldd	r25, Z+1	; 0x01
    5352:	00 97       	sbiw	r24, 0x00	; 0
    5354:	11 f4       	brne	.+4      	; 0x535a <vdmClone+0x1c4>
    5356:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		for (i = 0; i < cptr->size; i++)
    535a:	18 86       	std	Y+8, r1	; 0x08
    535c:	1f 82       	std	Y+7, r1	; 0x07
    535e:	22 c0       	rjmp	.+68     	; 0x53a4 <vdmClone+0x20e>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    5360:	eb 81       	ldd	r30, Y+3	; 0x03
    5362:	fc 81       	ldd	r31, Y+4	; 0x04
    5364:	20 81       	ld	r18, Z
    5366:	31 81       	ldd	r19, Z+1	; 0x01
    5368:	8f 81       	ldd	r24, Y+7	; 0x07
    536a:	98 85       	ldd	r25, Y+8	; 0x08
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	89 01       	movw	r16, r18
    5372:	08 0f       	add	r16, r24
    5374:	19 1f       	adc	r17, r25
    5376:	ed 81       	ldd	r30, Y+5	; 0x05
    5378:	fe 81       	ldd	r31, Y+6	; 0x06
    537a:	20 81       	ld	r18, Z
    537c:	31 81       	ldd	r19, Z+1	; 0x01
    537e:	8f 81       	ldd	r24, Y+7	; 0x07
    5380:	98 85       	ldd	r25, Y+8	; 0x08
    5382:	88 0f       	add	r24, r24
    5384:	99 1f       	adc	r25, r25
    5386:	f9 01       	movw	r30, r18
    5388:	e8 0f       	add	r30, r24
    538a:	f9 1f       	adc	r31, r25
    538c:	80 81       	ld	r24, Z
    538e:	91 81       	ldd	r25, Z+1	; 0x01
    5390:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    5394:	f8 01       	movw	r30, r16
    5396:	91 83       	std	Z+1, r25	; 0x01
    5398:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    539a:	8f 81       	ldd	r24, Y+7	; 0x07
    539c:	98 85       	ldd	r25, Y+8	; 0x08
    539e:	01 96       	adiw	r24, 0x01	; 1
    53a0:	98 87       	std	Y+8, r25	; 0x08
    53a2:	8f 83       	std	Y+7, r24	; 0x07
    53a4:	ed 81       	ldd	r30, Y+5	; 0x05
    53a6:	fe 81       	ldd	r31, Y+6	; 0x06
    53a8:	22 81       	ldd	r18, Z+2	; 0x02
    53aa:	33 81       	ldd	r19, Z+3	; 0x03
    53ac:	8f 81       	ldd	r24, Y+7	; 0x07
    53ae:	98 85       	ldd	r25, Y+8	; 0x08
    53b0:	82 17       	cp	r24, r18
    53b2:	93 07       	cpc	r25, r19
    53b4:	ac f2       	brlt	.-86     	; 0x5360 <vdmClone+0x1ca>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    53b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    53b8:	f8 89       	ldd	r31, Y+16	; 0x10
    53ba:	8b 81       	ldd	r24, Y+3	; 0x03
    53bc:	9c 81       	ldd	r25, Y+4	; 0x04
    53be:	95 83       	std	Z+5, r25	; 0x05
    53c0:	84 83       	std	Z+4, r24	; 0x04
    53c2:	1c c0       	rjmp	.+56     	; 0x53fc <vdmClone+0x266>
	}
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) tmp->value.ptr;
    53c4:	ef 85       	ldd	r30, Y+15	; 0x0f
    53c6:	f8 89       	ldd	r31, Y+16	; 0x10
    53c8:	84 81       	ldd	r24, Z+4	; 0x04
    53ca:	95 81       	ldd	r25, Z+5	; 0x05
    53cc:	9a 83       	std	Y+2, r25	; 0x02
    53ce:	89 83       	std	Y+1, r24	; 0x01

		/* improve using memcpy  */
		tmp->value.ptr = newClassValue(classTptr->classId, classTptr->refs, classTptr->freeClass, classTptr->value);
    53d0:	e9 81       	ldd	r30, Y+1	; 0x01
    53d2:	fa 81       	ldd	r31, Y+2	; 0x02
    53d4:	82 81       	ldd	r24, Z+2	; 0x02
    53d6:	93 81       	ldd	r25, Z+3	; 0x03
    53d8:	e9 81       	ldd	r30, Y+1	; 0x01
    53da:	fa 81       	ldd	r31, Y+2	; 0x02
    53dc:	64 81       	ldd	r22, Z+4	; 0x04
    53de:	75 81       	ldd	r23, Z+5	; 0x05
    53e0:	e9 81       	ldd	r30, Y+1	; 0x01
    53e2:	fa 81       	ldd	r31, Y+2	; 0x02
    53e4:	46 81       	ldd	r20, Z+6	; 0x06
    53e6:	57 81       	ldd	r21, Z+7	; 0x07
    53e8:	e9 81       	ldd	r30, Y+1	; 0x01
    53ea:	fa 81       	ldd	r31, Y+2	; 0x02
    53ec:	20 81       	ld	r18, Z
    53ee:	31 81       	ldd	r19, Z+1	; 0x01
    53f0:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    53f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    53f6:	f8 89       	ldd	r31, Y+16	; 0x10
    53f8:	95 83       	std	Z+5, r25	; 0x05
    53fa:	84 83       	std	Z+4, r24	; 0x04
		break;
	}
	}

	return tmp;
    53fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    53fe:	98 89       	ldd	r25, Y+16	; 0x10
    5400:	9e 8b       	std	Y+22, r25	; 0x16
    5402:	8d 8b       	std	Y+21, r24	; 0x15
    5404:	8d 89       	ldd	r24, Y+21	; 0x15
    5406:	9e 89       	ldd	r25, Y+22	; 0x16
}
    5408:	66 96       	adiw	r28, 0x16	; 22
    540a:	0f b6       	in	r0, 0x3f	; 63
    540c:	f8 94       	cli
    540e:	de bf       	out	0x3e, r29	; 62
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	cd bf       	out	0x3d, r28	; 61
    5414:	cf 91       	pop	r28
    5416:	df 91       	pop	r29
    5418:	1f 91       	pop	r17
    541a:	0f 91       	pop	r16
    541c:	08 95       	ret

0000541e <equals>:



bool equals(TVP a, TVP b)
{
    541e:	ef 92       	push	r14
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	df 93       	push	r29
    5428:	cf 93       	push	r28
    542a:	cd b7       	in	r28, 0x3d	; 61
    542c:	de b7       	in	r29, 0x3e	; 62
    542e:	2e 97       	sbiw	r28, 0x0e	; 14
    5430:	0f b6       	in	r0, 0x3f	; 63
    5432:	f8 94       	cli
    5434:	de bf       	out	0x3e, r29	; 62
    5436:	0f be       	out	0x3f, r0	; 63
    5438:	cd bf       	out	0x3d, r28	; 61
    543a:	99 87       	std	Y+9, r25	; 0x09
    543c:	88 87       	std	Y+8, r24	; 0x08
    543e:	7b 87       	std	Y+11, r23	; 0x0b
    5440:	6a 87       	std	Y+10, r22	; 0x0a
	if(isNumber(a)&& isNumber(b))
    5442:	88 85       	ldd	r24, Y+8	; 0x08
    5444:	99 85       	ldd	r25, Y+9	; 0x09
    5446:	0e 94 b9 31 	call	0x6372	; 0x6372 <isNumber>
    544a:	88 23       	and	r24, r24
    544c:	e9 f0       	breq	.+58     	; 0x5488 <equals+0x6a>
    544e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5450:	9b 85       	ldd	r25, Y+11	; 0x0b
    5452:	0e 94 b9 31 	call	0x6372	; 0x6372 <isNumber>
    5456:	88 23       	and	r24, r24
    5458:	b9 f0       	breq	.+46     	; 0x5488 <equals+0x6a>
	{
		return toDouble(a)==toDouble(b);
    545a:	88 85       	ldd	r24, Y+8	; 0x08
    545c:	99 85       	ldd	r25, Y+9	; 0x09
    545e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    5462:	7b 01       	movw	r14, r22
    5464:	8c 01       	movw	r16, r24
    5466:	8a 85       	ldd	r24, Y+10	; 0x0a
    5468:	9b 85       	ldd	r25, Y+11	; 0x0b
    546a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    546e:	9b 01       	movw	r18, r22
    5470:	ac 01       	movw	r20, r24
    5472:	1e 86       	std	Y+14, r1	; 0x0e
    5474:	c8 01       	movw	r24, r16
    5476:	b7 01       	movw	r22, r14
    5478:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    547c:	88 23       	and	r24, r24
    547e:	09 f0       	breq	.+2      	; 0x5482 <equals+0x64>
    5480:	db c0       	rjmp	.+438    	; 0x5638 <equals+0x21a>
    5482:	81 e0       	ldi	r24, 0x01	; 1
    5484:	8e 87       	std	Y+14, r24	; 0x0e
    5486:	d8 c0       	rjmp	.+432    	; 0x5638 <equals+0x21a>
	}
	if (a->type != b->type) /* is this correct for optional types too  */
    5488:	e8 85       	ldd	r30, Y+8	; 0x08
    548a:	f9 85       	ldd	r31, Y+9	; 0x09
    548c:	20 81       	ld	r18, Z
    548e:	31 81       	ldd	r19, Z+1	; 0x01
    5490:	ea 85       	ldd	r30, Y+10	; 0x0a
    5492:	fb 85       	ldd	r31, Y+11	; 0x0b
    5494:	80 81       	ld	r24, Z
    5496:	91 81       	ldd	r25, Z+1	; 0x01
    5498:	28 17       	cp	r18, r24
    549a:	39 07       	cpc	r19, r25
    549c:	11 f0       	breq	.+4      	; 0x54a2 <equals+0x84>
	{
		return false;
    549e:	1e 86       	std	Y+14, r1	; 0x0e
    54a0:	cb c0       	rjmp	.+406    	; 0x5638 <equals+0x21a>
	}

	switch (a->type)
    54a2:	e8 85       	ldd	r30, Y+8	; 0x08
    54a4:	f9 85       	ldd	r31, Y+9	; 0x09
    54a6:	80 81       	ld	r24, Z
    54a8:	91 81       	ldd	r25, Z+1	; 0x01
    54aa:	9d 87       	std	Y+13, r25	; 0x0d
    54ac:	8c 87       	std	Y+12, r24	; 0x0c
    54ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    54b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    54b2:	86 30       	cpi	r24, 0x06	; 6
    54b4:	91 05       	cpc	r25, r1
    54b6:	09 f4       	brne	.+2      	; 0x54ba <equals+0x9c>
    54b8:	42 c0       	rjmp	.+132    	; 0x553e <equals+0x120>
    54ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    54bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    54be:	87 30       	cpi	r24, 0x07	; 7
    54c0:	91 05       	cpc	r25, r1
    54c2:	60 f4       	brcc	.+24     	; 0x54dc <equals+0xbe>
    54c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    54c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    54c8:	83 30       	cpi	r24, 0x03	; 3
    54ca:	91 05       	cpc	r25, r1
    54cc:	59 f1       	breq	.+86     	; 0x5524 <equals+0x106>
    54ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    54d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    54d2:	84 30       	cpi	r24, 0x04	; 4
    54d4:	91 05       	cpc	r25, r1
    54d6:	08 f0       	brcs	.+2      	; 0x54da <equals+0xbc>
    54d8:	4f c0       	rjmp	.+158    	; 0x5578 <equals+0x15a>
    54da:	3e c0       	rjmp	.+124    	; 0x5558 <equals+0x13a>
    54dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    54de:	9d 85       	ldd	r25, Y+13	; 0x0d
    54e0:	89 30       	cpi	r24, 0x09	; 9
    54e2:	91 05       	cpc	r25, r1
    54e4:	09 f4       	brne	.+2      	; 0x54e8 <equals+0xca>
    54e6:	5f c0       	rjmp	.+190    	; 0x55a6 <equals+0x188>
    54e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    54ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    54ec:	8a 30       	cpi	r24, 0x0A	; 10
    54ee:	91 05       	cpc	r25, r1
    54f0:	68 f4       	brcc	.+26     	; 0x550c <equals+0xee>
    54f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    54f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    54f6:	87 30       	cpi	r24, 0x07	; 7
    54f8:	91 05       	cpc	r25, r1
    54fa:	09 f4       	brne	.+2      	; 0x54fe <equals+0xe0>
    54fc:	6c c0       	rjmp	.+216    	; 0x55d6 <equals+0x1b8>
    54fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    5500:	9d 85       	ldd	r25, Y+13	; 0x0d
    5502:	88 30       	cpi	r24, 0x08	; 8
    5504:	91 05       	cpc	r25, r1
    5506:	09 f4       	brne	.+2      	; 0x550a <equals+0xec>
    5508:	5d c0       	rjmp	.+186    	; 0x55c4 <equals+0x1a6>
    550a:	95 c0       	rjmp	.+298    	; 0x5636 <equals+0x218>
    550c:	8c 85       	ldd	r24, Y+12	; 0x0c
    550e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5510:	8a 30       	cpi	r24, 0x0A	; 10
    5512:	91 05       	cpc	r25, r1
    5514:	09 f1       	breq	.+66     	; 0x5558 <equals+0x13a>
    5516:	8c 85       	ldd	r24, Y+12	; 0x0c
    5518:	9d 85       	ldd	r25, Y+13	; 0x0d
    551a:	8b 30       	cpi	r24, 0x0B	; 11
    551c:	91 05       	cpc	r25, r1
    551e:	09 f4       	brne	.+2      	; 0x5522 <equals+0x104>
    5520:	6f c0       	rjmp	.+222    	; 0x5600 <equals+0x1e2>
    5522:	89 c0       	rjmp	.+274    	; 0x5636 <equals+0x218>
	{
	case VDM_BOOL:
	{
		return a->value.boolVal == b->value.boolVal;
    5524:	e8 85       	ldd	r30, Y+8	; 0x08
    5526:	f9 85       	ldd	r31, Y+9	; 0x09
    5528:	94 81       	ldd	r25, Z+4	; 0x04
    552a:	ea 85       	ldd	r30, Y+10	; 0x0a
    552c:	fb 85       	ldd	r31, Y+11	; 0x0b
    552e:	84 81       	ldd	r24, Z+4	; 0x04
    5530:	1e 86       	std	Y+14, r1	; 0x0e
    5532:	98 17       	cp	r25, r24
    5534:	09 f0       	breq	.+2      	; 0x5538 <equals+0x11a>
    5536:	80 c0       	rjmp	.+256    	; 0x5638 <equals+0x21a>
    5538:	91 e0       	ldi	r25, 0x01	; 1
    553a:	9e 87       	std	Y+14, r25	; 0x0e
    553c:	7d c0       	rjmp	.+250    	; 0x5638 <equals+0x21a>
	}
	case VDM_CHAR:
	{
		return a->value.charVal == b->value.charVal;
    553e:	e8 85       	ldd	r30, Y+8	; 0x08
    5540:	f9 85       	ldd	r31, Y+9	; 0x09
    5542:	94 81       	ldd	r25, Z+4	; 0x04
    5544:	ea 85       	ldd	r30, Y+10	; 0x0a
    5546:	fb 85       	ldd	r31, Y+11	; 0x0b
    5548:	84 81       	ldd	r24, Z+4	; 0x04
    554a:	1e 86       	std	Y+14, r1	; 0x0e
    554c:	98 17       	cp	r25, r24
    554e:	09 f0       	breq	.+2      	; 0x5552 <equals+0x134>
    5550:	73 c0       	rjmp	.+230    	; 0x5638 <equals+0x21a>
    5552:	81 e0       	ldi	r24, 0x01	; 1
    5554:	8e 87       	std	Y+14, r24	; 0x0e
    5556:	70 c0       	rjmp	.+224    	; 0x5638 <equals+0x21a>
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
	case VDM_TOKEN:
	{
		return a->value.intVal == b->value.intVal;
    5558:	e8 85       	ldd	r30, Y+8	; 0x08
    555a:	f9 85       	ldd	r31, Y+9	; 0x09
    555c:	24 81       	ldd	r18, Z+4	; 0x04
    555e:	35 81       	ldd	r19, Z+5	; 0x05
    5560:	ea 85       	ldd	r30, Y+10	; 0x0a
    5562:	fb 85       	ldd	r31, Y+11	; 0x0b
    5564:	84 81       	ldd	r24, Z+4	; 0x04
    5566:	95 81       	ldd	r25, Z+5	; 0x05
    5568:	1e 86       	std	Y+14, r1	; 0x0e
    556a:	28 17       	cp	r18, r24
    556c:	39 07       	cpc	r19, r25
    556e:	09 f0       	breq	.+2      	; 0x5572 <equals+0x154>
    5570:	63 c0       	rjmp	.+198    	; 0x5638 <equals+0x21a>
    5572:	91 e0       	ldi	r25, 0x01	; 1
    5574:	9e 87       	std	Y+14, r25	; 0x0e
    5576:	60 c0       	rjmp	.+192    	; 0x5638 <equals+0x21a>
	}
	case VDM_RAT:
	case VDM_REAL:
	{
		return a->value.doubleVal == b->value.doubleVal;
    5578:	e8 85       	ldd	r30, Y+8	; 0x08
    557a:	f9 85       	ldd	r31, Y+9	; 0x09
    557c:	84 81       	ldd	r24, Z+4	; 0x04
    557e:	95 81       	ldd	r25, Z+5	; 0x05
    5580:	a6 81       	ldd	r26, Z+6	; 0x06
    5582:	b7 81       	ldd	r27, Z+7	; 0x07
    5584:	ea 85       	ldd	r30, Y+10	; 0x0a
    5586:	fb 85       	ldd	r31, Y+11	; 0x0b
    5588:	24 81       	ldd	r18, Z+4	; 0x04
    558a:	35 81       	ldd	r19, Z+5	; 0x05
    558c:	46 81       	ldd	r20, Z+6	; 0x06
    558e:	57 81       	ldd	r21, Z+7	; 0x07
    5590:	1e 86       	std	Y+14, r1	; 0x0e
    5592:	bc 01       	movw	r22, r24
    5594:	cd 01       	movw	r24, r26
    5596:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    559a:	88 23       	and	r24, r24
    559c:	09 f0       	breq	.+2      	; 0x55a0 <equals+0x182>
    559e:	4c c0       	rjmp	.+152    	; 0x5638 <equals+0x21a>
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	8e 87       	std	Y+14, r24	; 0x0e
    55a4:	49 c0       	rjmp	.+146    	; 0x5638 <equals+0x21a>
	}
	case VDM_QUOTE:
	{
		return a->value.quoteVal == b->value.quoteVal;
    55a6:	e8 85       	ldd	r30, Y+8	; 0x08
    55a8:	f9 85       	ldd	r31, Y+9	; 0x09
    55aa:	24 81       	ldd	r18, Z+4	; 0x04
    55ac:	35 81       	ldd	r19, Z+5	; 0x05
    55ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    55b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    55b2:	84 81       	ldd	r24, Z+4	; 0x04
    55b4:	95 81       	ldd	r25, Z+5	; 0x05
    55b6:	1e 86       	std	Y+14, r1	; 0x0e
    55b8:	28 17       	cp	r18, r24
    55ba:	39 07       	cpc	r19, r25
    55bc:	e9 f5       	brne	.+122    	; 0x5638 <equals+0x21a>
    55be:	91 e0       	ldi	r25, 0x01	; 1
    55c0:	9e 87       	std	Y+14, r25	; 0x0e
    55c2:	3a c0       	rjmp	.+116    	; 0x5638 <equals+0x21a>
	}
#endif
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		return collectionEqual(a, b);
    55c4:	88 85       	ldd	r24, Y+8	; 0x08
    55c6:	99 85       	ldd	r25, Y+9	; 0x09
    55c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    55ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    55cc:	b9 01       	movw	r22, r18
    55ce:	0e 94 2a 2b 	call	0x5654	; 0x5654 <collectionEqual>
    55d2:	8e 87       	std	Y+14, r24	; 0x0e
    55d4:	31 c0       	rjmp	.+98     	; 0x5638 <equals+0x21a>
	}
#endif
#ifndef NO_SETS
	case VDM_SET:
	{
		TVP r0 = vdmSetEquals(a, b);
    55d6:	88 85       	ldd	r24, Y+8	; 0x08
    55d8:	99 85       	ldd	r25, Y+9	; 0x09
    55da:	2a 85       	ldd	r18, Y+10	; 0x0a
    55dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    55de:	b9 01       	movw	r22, r18
    55e0:	0e 94 b1 63 	call	0xc762	; 0xc762 <vdmSetEquals>
    55e4:	9f 83       	std	Y+7, r25	; 0x07
    55e6:	8e 83       	std	Y+6, r24	; 0x06
		bool r = toBool(r0);
    55e8:	8e 81       	ldd	r24, Y+6	; 0x06
    55ea:	9f 81       	ldd	r25, Y+7	; 0x07
    55ec:	0e 94 5f 33 	call	0x66be	; 0x66be <toBool>
    55f0:	8d 83       	std	Y+5, r24	; 0x05
		vdmFree(r0);
    55f2:	8e 81       	ldd	r24, Y+6	; 0x06
    55f4:	9f 81       	ldd	r25, Y+7	; 0x07
    55f6:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		return r;
    55fa:	8d 81       	ldd	r24, Y+5	; 0x05
    55fc:	8e 87       	std	Y+14, r24	; 0x0e
    55fe:	1c c0       	rjmp	.+56     	; 0x5638 <equals+0x21a>

	}
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		struct ClassType* ac = a->value.ptr;
    5600:	e8 85       	ldd	r30, Y+8	; 0x08
    5602:	f9 85       	ldd	r31, Y+9	; 0x09
    5604:	84 81       	ldd	r24, Z+4	; 0x04
    5606:	95 81       	ldd	r25, Z+5	; 0x05
    5608:	9c 83       	std	Y+4, r25	; 0x04
    560a:	8b 83       	std	Y+3, r24	; 0x03
		struct ClassType* bc = b->value.ptr;
    560c:	ea 85       	ldd	r30, Y+10	; 0x0a
    560e:	fb 85       	ldd	r31, Y+11	; 0x0b
    5610:	84 81       	ldd	r24, Z+4	; 0x04
    5612:	95 81       	ldd	r25, Z+5	; 0x05
    5614:	9a 83       	std	Y+2, r25	; 0x02
    5616:	89 83       	std	Y+1, r24	; 0x01

		/* reference compare does the pointer point to the same instance  */
		return ac->value == bc->value;
    5618:	eb 81       	ldd	r30, Y+3	; 0x03
    561a:	fc 81       	ldd	r31, Y+4	; 0x04
    561c:	20 81       	ld	r18, Z
    561e:	31 81       	ldd	r19, Z+1	; 0x01
    5620:	e9 81       	ldd	r30, Y+1	; 0x01
    5622:	fa 81       	ldd	r31, Y+2	; 0x02
    5624:	80 81       	ld	r24, Z
    5626:	91 81       	ldd	r25, Z+1	; 0x01
    5628:	1e 86       	std	Y+14, r1	; 0x0e
    562a:	28 17       	cp	r18, r24
    562c:	39 07       	cpc	r19, r25
    562e:	21 f4       	brne	.+8      	; 0x5638 <equals+0x21a>
    5630:	91 e0       	ldi	r25, 0x01	; 1
    5632:	9e 87       	std	Y+14, r25	; 0x0e
    5634:	01 c0       	rjmp	.+2      	; 0x5638 <equals+0x21a>
	}

	}
	return false;
    5636:	1e 86       	std	Y+14, r1	; 0x0e
    5638:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    563a:	2e 96       	adiw	r28, 0x0e	; 14
    563c:	0f b6       	in	r0, 0x3f	; 63
    563e:	f8 94       	cli
    5640:	de bf       	out	0x3e, r29	; 62
    5642:	0f be       	out	0x3f, r0	; 63
    5644:	cd bf       	out	0x3d, r28	; 61
    5646:	cf 91       	pop	r28
    5648:	df 91       	pop	r29
    564a:	1f 91       	pop	r17
    564c:	0f 91       	pop	r16
    564e:	ff 90       	pop	r15
    5650:	ef 90       	pop	r14
    5652:	08 95       	ret

00005654 <collectionEqual>:

bool collectionEqual(TVP col1,TVP col2)
{
    5654:	0f 93       	push	r16
    5656:	1f 93       	push	r17
    5658:	df 93       	push	r29
    565a:	cf 93       	push	r28
    565c:	cd b7       	in	r28, 0x3d	; 61
    565e:	de b7       	in	r29, 0x3e	; 62
    5660:	2c 97       	sbiw	r28, 0x0c	; 12
    5662:	0f b6       	in	r0, 0x3f	; 63
    5664:	f8 94       	cli
    5666:	de bf       	out	0x3e, r29	; 62
    5668:	0f be       	out	0x3f, r0	; 63
    566a:	cd bf       	out	0x3d, r28	; 61
    566c:	99 87       	std	Y+9, r25	; 0x09
    566e:	88 87       	std	Y+8, r24	; 0x08
    5670:	7b 87       	std	Y+11, r23	; 0x0b
    5672:	6a 87       	std	Y+10, r22	; 0x0a
	/* internal function do not call except if args points to a collection  */

	int i;

	UNWRAP_COLLECTION(aCol,col1);
    5674:	e8 85       	ldd	r30, Y+8	; 0x08
    5676:	f9 85       	ldd	r31, Y+9	; 0x09
    5678:	84 81       	ldd	r24, Z+4	; 0x04
    567a:	95 81       	ldd	r25, Z+5	; 0x05
    567c:	9d 83       	std	Y+5, r25	; 0x05
    567e:	8c 83       	std	Y+4, r24	; 0x04
	UNWRAP_COLLECTION(bCol,col2);
    5680:	ea 85       	ldd	r30, Y+10	; 0x0a
    5682:	fb 85       	ldd	r31, Y+11	; 0x0b
    5684:	84 81       	ldd	r24, Z+4	; 0x04
    5686:	95 81       	ldd	r25, Z+5	; 0x05
    5688:	9b 83       	std	Y+3, r25	; 0x03
    568a:	8a 83       	std	Y+2, r24	; 0x02

	if(aCol->size!=bCol->size)
    568c:	ec 81       	ldd	r30, Y+4	; 0x04
    568e:	fd 81       	ldd	r31, Y+5	; 0x05
    5690:	22 81       	ldd	r18, Z+2	; 0x02
    5692:	33 81       	ldd	r19, Z+3	; 0x03
    5694:	ea 81       	ldd	r30, Y+2	; 0x02
    5696:	fb 81       	ldd	r31, Y+3	; 0x03
    5698:	82 81       	ldd	r24, Z+2	; 0x02
    569a:	93 81       	ldd	r25, Z+3	; 0x03
    569c:	28 17       	cp	r18, r24
    569e:	39 07       	cpc	r19, r25
    56a0:	11 f0       	breq	.+4      	; 0x56a6 <collectionEqual+0x52>
	{
		/* wrong sizes  */
		return false;
    56a2:	1c 86       	std	Y+12, r1	; 0x0c
    56a4:	3f c0       	rjmp	.+126    	; 0x5724 <collectionEqual+0xd0>
	}

	bool match = true;
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < aCol->size; i++)
    56aa:	1f 82       	std	Y+7, r1	; 0x07
    56ac:	1e 82       	std	Y+6, r1	; 0x06
    56ae:	2f c0       	rjmp	.+94     	; 0x570e <collectionEqual+0xba>
	{
		match &= equals(aCol->value[i],bCol->value[i]);
    56b0:	89 81       	ldd	r24, Y+1	; 0x01
    56b2:	08 2f       	mov	r16, r24
    56b4:	10 e0       	ldi	r17, 0x00	; 0
    56b6:	ec 81       	ldd	r30, Y+4	; 0x04
    56b8:	fd 81       	ldd	r31, Y+5	; 0x05
    56ba:	20 81       	ld	r18, Z
    56bc:	31 81       	ldd	r19, Z+1	; 0x01
    56be:	8e 81       	ldd	r24, Y+6	; 0x06
    56c0:	9f 81       	ldd	r25, Y+7	; 0x07
    56c2:	88 0f       	add	r24, r24
    56c4:	99 1f       	adc	r25, r25
    56c6:	f9 01       	movw	r30, r18
    56c8:	e8 0f       	add	r30, r24
    56ca:	f9 1f       	adc	r31, r25
    56cc:	40 81       	ld	r20, Z
    56ce:	51 81       	ldd	r21, Z+1	; 0x01
    56d0:	ea 81       	ldd	r30, Y+2	; 0x02
    56d2:	fb 81       	ldd	r31, Y+3	; 0x03
    56d4:	20 81       	ld	r18, Z
    56d6:	31 81       	ldd	r19, Z+1	; 0x01
    56d8:	8e 81       	ldd	r24, Y+6	; 0x06
    56da:	9f 81       	ldd	r25, Y+7	; 0x07
    56dc:	88 0f       	add	r24, r24
    56de:	99 1f       	adc	r25, r25
    56e0:	f9 01       	movw	r30, r18
    56e2:	e8 0f       	add	r30, r24
    56e4:	f9 1f       	adc	r31, r25
    56e6:	20 81       	ld	r18, Z
    56e8:	31 81       	ldd	r19, Z+1	; 0x01
    56ea:	ca 01       	movw	r24, r20
    56ec:	b9 01       	movw	r22, r18
    56ee:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    56f2:	88 2f       	mov	r24, r24
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	80 23       	and	r24, r16
    56f8:	91 23       	and	r25, r17
    56fa:	19 82       	std	Y+1, r1	; 0x01
    56fc:	00 97       	sbiw	r24, 0x00	; 0
    56fe:	11 f0       	breq	.+4      	; 0x5704 <collectionEqual+0xb0>
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	89 83       	std	Y+1, r24	; 0x01
		return false;
	}

	bool match = true;

	for (i = 0; i < aCol->size; i++)
    5704:	8e 81       	ldd	r24, Y+6	; 0x06
    5706:	9f 81       	ldd	r25, Y+7	; 0x07
    5708:	01 96       	adiw	r24, 0x01	; 1
    570a:	9f 83       	std	Y+7, r25	; 0x07
    570c:	8e 83       	std	Y+6, r24	; 0x06
    570e:	ec 81       	ldd	r30, Y+4	; 0x04
    5710:	fd 81       	ldd	r31, Y+5	; 0x05
    5712:	22 81       	ldd	r18, Z+2	; 0x02
    5714:	33 81       	ldd	r19, Z+3	; 0x03
    5716:	8e 81       	ldd	r24, Y+6	; 0x06
    5718:	9f 81       	ldd	r25, Y+7	; 0x07
    571a:	82 17       	cp	r24, r18
    571c:	93 07       	cpc	r25, r19
    571e:	44 f2       	brlt	.-112    	; 0x56b0 <collectionEqual+0x5c>
	{
		match &= equals(aCol->value[i],bCol->value[i]);
	}
	return match;
    5720:	89 81       	ldd	r24, Y+1	; 0x01
    5722:	8c 87       	std	Y+12, r24	; 0x0c
    5724:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    5726:	2c 96       	adiw	r28, 0x0c	; 12
    5728:	0f b6       	in	r0, 0x3f	; 63
    572a:	f8 94       	cli
    572c:	de bf       	out	0x3e, r29	; 62
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	cd bf       	out	0x3d, r28	; 61
    5732:	cf 91       	pop	r28
    5734:	df 91       	pop	r29
    5736:	1f 91       	pop	r17
    5738:	0f 91       	pop	r16
    573a:	08 95       	ret

0000573c <vdmFree_GCInternal>:


void vdmFree_GCInternal(TVP ptr)
{
    573c:	df 93       	push	r29
    573e:	cf 93       	push	r28
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
    5744:	2e 97       	sbiw	r28, 0x0e	; 14
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	f8 94       	cli
    574a:	de bf       	out	0x3e, r29	; 62
    574c:	0f be       	out	0x3f, r0	; 63
    574e:	cd bf       	out	0x3d, r28	; 61
    5750:	9c 87       	std	Y+12, r25	; 0x0c
    5752:	8b 87       	std	Y+11, r24	; 0x0b
	if (ptr == NULL)
    5754:	8b 85       	ldd	r24, Y+11	; 0x0b
    5756:	9c 85       	ldd	r25, Y+12	; 0x0c
    5758:	00 97       	sbiw	r24, 0x00	; 0
    575a:	09 f4       	brne	.+2      	; 0x575e <vdmFree_GCInternal+0x22>
    575c:	d0 c0       	rjmp	.+416    	; 0x58fe <vdmFree_GCInternal+0x1c2>
		return;

	switch (ptr->type)
    575e:	eb 85       	ldd	r30, Y+11	; 0x0b
    5760:	fc 85       	ldd	r31, Y+12	; 0x0c
    5762:	80 81       	ld	r24, Z
    5764:	91 81       	ldd	r25, Z+1	; 0x01
    5766:	9e 87       	std	Y+14, r25	; 0x0e
    5768:	8d 87       	std	Y+13, r24	; 0x0d
    576a:	8d 85       	ldd	r24, Y+13	; 0x0d
    576c:	9e 85       	ldd	r25, Y+14	; 0x0e
    576e:	88 30       	cpi	r24, 0x08	; 8
    5770:	91 05       	cpc	r25, r1
    5772:	c9 f0       	breq	.+50     	; 0x57a6 <vdmFree_GCInternal+0x6a>
    5774:	8d 85       	ldd	r24, Y+13	; 0x0d
    5776:	9e 85       	ldd	r25, Y+14	; 0x0e
    5778:	89 30       	cpi	r24, 0x09	; 9
    577a:	91 05       	cpc	r25, r1
    577c:	38 f4       	brcc	.+14     	; 0x578c <vdmFree_GCInternal+0x50>
    577e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5780:	9e 85       	ldd	r25, Y+14	; 0x0e
    5782:	87 30       	cpi	r24, 0x07	; 7
    5784:	91 05       	cpc	r25, r1
    5786:	08 f4       	brcc	.+2      	; 0x578a <vdmFree_GCInternal+0x4e>
    5788:	b6 c0       	rjmp	.+364    	; 0x58f6 <vdmFree_GCInternal+0x1ba>
    578a:	51 c0       	rjmp	.+162    	; 0x582e <vdmFree_GCInternal+0xf2>
    578c:	8d 85       	ldd	r24, Y+13	; 0x0d
    578e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5790:	8b 30       	cpi	r24, 0x0B	; 11
    5792:	91 05       	cpc	r25, r1
    5794:	08 f4       	brcc	.+2      	; 0x5798 <vdmFree_GCInternal+0x5c>
    5796:	af c0       	rjmp	.+350    	; 0x58f6 <vdmFree_GCInternal+0x1ba>
    5798:	8d 85       	ldd	r24, Y+13	; 0x0d
    579a:	9e 85       	ldd	r25, Y+14	; 0x0e
    579c:	8b 30       	cpi	r24, 0x0B	; 11
    579e:	91 05       	cpc	r25, r1
    57a0:	09 f4       	brne	.+2      	; 0x57a4 <vdmFree_GCInternal+0x68>
    57a2:	89 c0       	rjmp	.+274    	; 0x58b6 <vdmFree_GCInternal+0x17a>
    57a4:	a8 c0       	rjmp	.+336    	; 0x58f6 <vdmFree_GCInternal+0x1ba>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    57a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    57a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    57aa:	84 81       	ldd	r24, Z+4	; 0x04
    57ac:	95 81       	ldd	r25, Z+5	; 0x05
    57ae:	98 87       	std	Y+8, r25	; 0x08
    57b0:	8f 83       	std	Y+7, r24	; 0x07
		for (i = 0; i < cptr->size; i++)
    57b2:	1a 86       	std	Y+10, r1	; 0x0a
    57b4:	19 86       	std	Y+9, r1	; 0x09
    57b6:	23 c0       	rjmp	.+70     	; 0x57fe <vdmFree_GCInternal+0xc2>
		{
			if (cptr->value[i] != NULL)
    57b8:	ef 81       	ldd	r30, Y+7	; 0x07
    57ba:	f8 85       	ldd	r31, Y+8	; 0x08
    57bc:	20 81       	ld	r18, Z
    57be:	31 81       	ldd	r19, Z+1	; 0x01
    57c0:	89 85       	ldd	r24, Y+9	; 0x09
    57c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	f9 01       	movw	r30, r18
    57ca:	e8 0f       	add	r30, r24
    57cc:	f9 1f       	adc	r31, r25
    57ce:	80 81       	ld	r24, Z
    57d0:	91 81       	ldd	r25, Z+1	; 0x01
    57d2:	00 97       	sbiw	r24, 0x00	; 0
    57d4:	79 f0       	breq	.+30     	; 0x57f4 <vdmFree_GCInternal+0xb8>
			{
				vdmFree_GCInternal(cptr->value[i]);
    57d6:	ef 81       	ldd	r30, Y+7	; 0x07
    57d8:	f8 85       	ldd	r31, Y+8	; 0x08
    57da:	20 81       	ld	r18, Z
    57dc:	31 81       	ldd	r19, Z+1	; 0x01
    57de:	89 85       	ldd	r24, Y+9	; 0x09
    57e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e2:	88 0f       	add	r24, r24
    57e4:	99 1f       	adc	r25, r25
    57e6:	f9 01       	movw	r30, r18
    57e8:	e8 0f       	add	r30, r24
    57ea:	f9 1f       	adc	r31, r25
    57ec:	80 81       	ld	r24, Z
    57ee:	91 81       	ldd	r25, Z+1	; 0x01
    57f0:	0e 94 9e 2b 	call	0x573c	; 0x573c <vdmFree_GCInternal>
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    57f4:	89 85       	ldd	r24, Y+9	; 0x09
    57f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57f8:	01 96       	adiw	r24, 0x01	; 1
    57fa:	9a 87       	std	Y+10, r25	; 0x0a
    57fc:	89 87       	std	Y+9, r24	; 0x09
    57fe:	ef 81       	ldd	r30, Y+7	; 0x07
    5800:	f8 85       	ldd	r31, Y+8	; 0x08
    5802:	22 81       	ldd	r18, Z+2	; 0x02
    5804:	33 81       	ldd	r19, Z+3	; 0x03
    5806:	89 85       	ldd	r24, Y+9	; 0x09
    5808:	9a 85       	ldd	r25, Y+10	; 0x0a
    580a:	82 17       	cp	r24, r18
    580c:	93 07       	cpc	r25, r19
    580e:	a4 f2       	brlt	.-88     	; 0x57b8 <vdmFree_GCInternal+0x7c>
			if (cptr->value[i] != NULL)
			{
				vdmFree_GCInternal(cptr->value[i]);
			}
		}
		free(cptr->value);
    5810:	ef 81       	ldd	r30, Y+7	; 0x07
    5812:	f8 85       	ldd	r31, Y+8	; 0x08
    5814:	80 81       	ld	r24, Z
    5816:	91 81       	ldd	r25, Z+1	; 0x01
    5818:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		free(cptr);
    581c:	8f 81       	ldd	r24, Y+7	; 0x07
    581e:	98 85       	ldd	r25, Y+8	; 0x08
    5820:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		ptr->value.ptr = NULL;
    5824:	eb 85       	ldd	r30, Y+11	; 0x0b
    5826:	fc 85       	ldd	r31, Y+12	; 0x0c
    5828:	15 82       	std	Z+5, r1	; 0x05
    582a:	14 82       	std	Z+4, r1	; 0x04
    582c:	64 c0       	rjmp	.+200    	; 0x58f6 <vdmFree_GCInternal+0x1ba>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    582e:	eb 85       	ldd	r30, Y+11	; 0x0b
    5830:	fc 85       	ldd	r31, Y+12	; 0x0c
    5832:	84 81       	ldd	r24, Z+4	; 0x04
    5834:	95 81       	ldd	r25, Z+5	; 0x05
    5836:	9c 83       	std	Y+4, r25	; 0x04
    5838:	8b 83       	std	Y+3, r24	; 0x03
		for (i = 0; i < cptr->size; i++)
    583a:	1e 82       	std	Y+6, r1	; 0x06
    583c:	1d 82       	std	Y+5, r1	; 0x05
    583e:	23 c0       	rjmp	.+70     	; 0x5886 <vdmFree_GCInternal+0x14a>
		{
			if (cptr->value[i] != NULL)
    5840:	eb 81       	ldd	r30, Y+3	; 0x03
    5842:	fc 81       	ldd	r31, Y+4	; 0x04
    5844:	20 81       	ld	r18, Z
    5846:	31 81       	ldd	r19, Z+1	; 0x01
    5848:	8d 81       	ldd	r24, Y+5	; 0x05
    584a:	9e 81       	ldd	r25, Y+6	; 0x06
    584c:	88 0f       	add	r24, r24
    584e:	99 1f       	adc	r25, r25
    5850:	f9 01       	movw	r30, r18
    5852:	e8 0f       	add	r30, r24
    5854:	f9 1f       	adc	r31, r25
    5856:	80 81       	ld	r24, Z
    5858:	91 81       	ldd	r25, Z+1	; 0x01
    585a:	00 97       	sbiw	r24, 0x00	; 0
    585c:	79 f0       	breq	.+30     	; 0x587c <vdmFree_GCInternal+0x140>
			{
				vdmFree_GCInternal(cptr->value[i]);
    585e:	eb 81       	ldd	r30, Y+3	; 0x03
    5860:	fc 81       	ldd	r31, Y+4	; 0x04
    5862:	20 81       	ld	r18, Z
    5864:	31 81       	ldd	r19, Z+1	; 0x01
    5866:	8d 81       	ldd	r24, Y+5	; 0x05
    5868:	9e 81       	ldd	r25, Y+6	; 0x06
    586a:	88 0f       	add	r24, r24
    586c:	99 1f       	adc	r25, r25
    586e:	f9 01       	movw	r30, r18
    5870:	e8 0f       	add	r30, r24
    5872:	f9 1f       	adc	r31, r25
    5874:	80 81       	ld	r24, Z
    5876:	91 81       	ldd	r25, Z+1	; 0x01
    5878:	0e 94 9e 2b 	call	0x573c	; 0x573c <vdmFree_GCInternal>
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    587c:	8d 81       	ldd	r24, Y+5	; 0x05
    587e:	9e 81       	ldd	r25, Y+6	; 0x06
    5880:	01 96       	adiw	r24, 0x01	; 1
    5882:	9e 83       	std	Y+6, r25	; 0x06
    5884:	8d 83       	std	Y+5, r24	; 0x05
    5886:	eb 81       	ldd	r30, Y+3	; 0x03
    5888:	fc 81       	ldd	r31, Y+4	; 0x04
    588a:	22 81       	ldd	r18, Z+2	; 0x02
    588c:	33 81       	ldd	r19, Z+3	; 0x03
    588e:	8d 81       	ldd	r24, Y+5	; 0x05
    5890:	9e 81       	ldd	r25, Y+6	; 0x06
    5892:	82 17       	cp	r24, r18
    5894:	93 07       	cpc	r25, r19
    5896:	a4 f2       	brlt	.-88     	; 0x5840 <vdmFree_GCInternal+0x104>
			if (cptr->value[i] != NULL)
			{
				vdmFree_GCInternal(cptr->value[i]);
			}
		}
		free(cptr->value);
    5898:	eb 81       	ldd	r30, Y+3	; 0x03
    589a:	fc 81       	ldd	r31, Y+4	; 0x04
    589c:	80 81       	ld	r24, Z
    589e:	91 81       	ldd	r25, Z+1	; 0x01
    58a0:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		free(cptr);
    58a4:	8b 81       	ldd	r24, Y+3	; 0x03
    58a6:	9c 81       	ldd	r25, Y+4	; 0x04
    58a8:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		ptr->value.ptr = NULL;
    58ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    58ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    58b0:	15 82       	std	Z+5, r1	; 0x05
    58b2:	14 82       	std	Z+4, r1	; 0x04
    58b4:	20 c0       	rjmp	.+64     	; 0x58f6 <vdmFree_GCInternal+0x1ba>
		break;
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) ptr->value.ptr;
    58b6:	eb 85       	ldd	r30, Y+11	; 0x0b
    58b8:	fc 85       	ldd	r31, Y+12	; 0x0c
    58ba:	84 81       	ldd	r24, Z+4	; 0x04
    58bc:	95 81       	ldd	r25, Z+5	; 0x05
    58be:	9a 83       	std	Y+2, r25	; 0x02
    58c0:	89 83       	std	Y+1, r24	; 0x01
		classTptr->freeClass(classTptr->value);
    58c2:	e9 81       	ldd	r30, Y+1	; 0x01
    58c4:	fa 81       	ldd	r31, Y+2	; 0x02
    58c6:	26 81       	ldd	r18, Z+6	; 0x06
    58c8:	37 81       	ldd	r19, Z+7	; 0x07
    58ca:	e9 81       	ldd	r30, Y+1	; 0x01
    58cc:	fa 81       	ldd	r31, Y+2	; 0x02
    58ce:	80 81       	ld	r24, Z
    58d0:	91 81       	ldd	r25, Z+1	; 0x01
    58d2:	f9 01       	movw	r30, r18
    58d4:	09 95       	icall
		classTptr->value = NULL;
    58d6:	e9 81       	ldd	r30, Y+1	; 0x01
    58d8:	fa 81       	ldd	r31, Y+2	; 0x02
    58da:	11 82       	std	Z+1, r1	; 0x01
    58dc:	10 82       	st	Z, r1
		classTptr->freeClass = NULL;
    58de:	e9 81       	ldd	r30, Y+1	; 0x01
    58e0:	fa 81       	ldd	r31, Y+2	; 0x02
    58e2:	17 82       	std	Z+7, r1	; 0x07
    58e4:	16 82       	std	Z+6, r1	; 0x06

		/* free classtype  */
		free(classTptr);
    58e6:	89 81       	ldd	r24, Y+1	; 0x01
    58e8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ea:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		ptr->value.ptr = NULL;
    58ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    58f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    58f2:	15 82       	std	Z+5, r1	; 0x05
    58f4:	14 82       	std	Z+4, r1	; 0x04
		break;
	}
	}

	/* free typedvalue  */
	free(ptr);
    58f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    58f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    58fa:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
}
    58fe:	2e 96       	adiw	r28, 0x0e	; 14
    5900:	0f b6       	in	r0, 0x3f	; 63
    5902:	f8 94       	cli
    5904:	de bf       	out	0x3e, r29	; 62
    5906:	0f be       	out	0x3f, r0	; 63
    5908:	cd bf       	out	0x3d, r28	; 61
    590a:	cf 91       	pop	r28
    590c:	df 91       	pop	r29
    590e:	08 95       	ret

00005910 <vdmFree>:



void vdmFree(TVP ptr)
{
    5910:	df 93       	push	r29
    5912:	cf 93       	push	r28
    5914:	cd b7       	in	r28, 0x3d	; 61
    5916:	de b7       	in	r29, 0x3e	; 62
    5918:	60 97       	sbiw	r28, 0x10	; 16
    591a:	0f b6       	in	r0, 0x3f	; 63
    591c:	f8 94       	cli
    591e:	de bf       	out	0x3e, r29	; 62
    5920:	0f be       	out	0x3f, r0	; 63
    5922:	cd bf       	out	0x3d, r28	; 61
    5924:	9e 87       	std	Y+14, r25	; 0x0e
    5926:	8d 87       	std	Y+13, r24	; 0x0d
	TVP *tmp;

	if (ptr == NULL)
    5928:	8d 85       	ldd	r24, Y+13	; 0x0d
    592a:	9e 85       	ldd	r25, Y+14	; 0x0e
    592c:	00 97       	sbiw	r24, 0x00	; 0
    592e:	09 f4       	brne	.+2      	; 0x5932 <vdmFree+0x22>
    5930:	e2 c0       	rjmp	.+452    	; 0x5af6 <vdmFree+0x1e6>
		return;

	switch (ptr->type)
    5932:	ed 85       	ldd	r30, Y+13	; 0x0d
    5934:	fe 85       	ldd	r31, Y+14	; 0x0e
    5936:	80 81       	ld	r24, Z
    5938:	91 81       	ldd	r25, Z+1	; 0x01
    593a:	98 8b       	std	Y+16, r25	; 0x10
    593c:	8f 87       	std	Y+15, r24	; 0x0f
    593e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5940:	98 89       	ldd	r25, Y+16	; 0x10
    5942:	88 30       	cpi	r24, 0x08	; 8
    5944:	91 05       	cpc	r25, r1
    5946:	c9 f0       	breq	.+50     	; 0x597a <vdmFree+0x6a>
    5948:	8f 85       	ldd	r24, Y+15	; 0x0f
    594a:	98 89       	ldd	r25, Y+16	; 0x10
    594c:	89 30       	cpi	r24, 0x09	; 9
    594e:	91 05       	cpc	r25, r1
    5950:	38 f4       	brcc	.+14     	; 0x5960 <vdmFree+0x50>
    5952:	8f 85       	ldd	r24, Y+15	; 0x0f
    5954:	98 89       	ldd	r25, Y+16	; 0x10
    5956:	87 30       	cpi	r24, 0x07	; 7
    5958:	91 05       	cpc	r25, r1
    595a:	08 f4       	brcc	.+2      	; 0x595e <vdmFree+0x4e>
    595c:	b6 c0       	rjmp	.+364    	; 0x5aca <vdmFree+0x1ba>
    595e:	51 c0       	rjmp	.+162    	; 0x5a02 <vdmFree+0xf2>
    5960:	8f 85       	ldd	r24, Y+15	; 0x0f
    5962:	98 89       	ldd	r25, Y+16	; 0x10
    5964:	8b 30       	cpi	r24, 0x0B	; 11
    5966:	91 05       	cpc	r25, r1
    5968:	08 f4       	brcc	.+2      	; 0x596c <vdmFree+0x5c>
    596a:	af c0       	rjmp	.+350    	; 0x5aca <vdmFree+0x1ba>
    596c:	8f 85       	ldd	r24, Y+15	; 0x0f
    596e:	98 89       	ldd	r25, Y+16	; 0x10
    5970:	8b 30       	cpi	r24, 0x0B	; 11
    5972:	91 05       	cpc	r25, r1
    5974:	09 f4       	brne	.+2      	; 0x5978 <vdmFree+0x68>
    5976:	89 c0       	rjmp	.+274    	; 0x5a8a <vdmFree+0x17a>
    5978:	a8 c0       	rjmp	.+336    	; 0x5aca <vdmFree+0x1ba>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    597a:	ed 85       	ldd	r30, Y+13	; 0x0d
    597c:	fe 85       	ldd	r31, Y+14	; 0x0e
    597e:	84 81       	ldd	r24, Z+4	; 0x04
    5980:	95 81       	ldd	r25, Z+5	; 0x05
    5982:	98 87       	std	Y+8, r25	; 0x08
    5984:	8f 83       	std	Y+7, r24	; 0x07
		for (i = 0; i < cptr->size; i++)
    5986:	1a 86       	std	Y+10, r1	; 0x0a
    5988:	19 86       	std	Y+9, r1	; 0x09
    598a:	23 c0       	rjmp	.+70     	; 0x59d2 <vdmFree+0xc2>
		{
			if (cptr->value[i] != NULL)
    598c:	ef 81       	ldd	r30, Y+7	; 0x07
    598e:	f8 85       	ldd	r31, Y+8	; 0x08
    5990:	20 81       	ld	r18, Z
    5992:	31 81       	ldd	r19, Z+1	; 0x01
    5994:	89 85       	ldd	r24, Y+9	; 0x09
    5996:	9a 85       	ldd	r25, Y+10	; 0x0a
    5998:	88 0f       	add	r24, r24
    599a:	99 1f       	adc	r25, r25
    599c:	f9 01       	movw	r30, r18
    599e:	e8 0f       	add	r30, r24
    59a0:	f9 1f       	adc	r31, r25
    59a2:	80 81       	ld	r24, Z
    59a4:	91 81       	ldd	r25, Z+1	; 0x01
    59a6:	00 97       	sbiw	r24, 0x00	; 0
    59a8:	79 f0       	breq	.+30     	; 0x59c8 <vdmFree+0xb8>
			{
				vdmFree(cptr->value[i]);
    59aa:	ef 81       	ldd	r30, Y+7	; 0x07
    59ac:	f8 85       	ldd	r31, Y+8	; 0x08
    59ae:	20 81       	ld	r18, Z
    59b0:	31 81       	ldd	r19, Z+1	; 0x01
    59b2:	89 85       	ldd	r24, Y+9	; 0x09
    59b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59b6:	88 0f       	add	r24, r24
    59b8:	99 1f       	adc	r25, r25
    59ba:	f9 01       	movw	r30, r18
    59bc:	e8 0f       	add	r30, r24
    59be:	f9 1f       	adc	r31, r25
    59c0:	80 81       	ld	r24, Z
    59c2:	91 81       	ldd	r25, Z+1	; 0x01
    59c4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    59c8:	89 85       	ldd	r24, Y+9	; 0x09
    59ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    59cc:	01 96       	adiw	r24, 0x01	; 1
    59ce:	9a 87       	std	Y+10, r25	; 0x0a
    59d0:	89 87       	std	Y+9, r24	; 0x09
    59d2:	ef 81       	ldd	r30, Y+7	; 0x07
    59d4:	f8 85       	ldd	r31, Y+8	; 0x08
    59d6:	22 81       	ldd	r18, Z+2	; 0x02
    59d8:	33 81       	ldd	r19, Z+3	; 0x03
    59da:	89 85       	ldd	r24, Y+9	; 0x09
    59dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    59de:	82 17       	cp	r24, r18
    59e0:	93 07       	cpc	r25, r19
    59e2:	a4 f2       	brlt	.-88     	; 0x598c <vdmFree+0x7c>
			if (cptr->value[i] != NULL)
			{
				vdmFree(cptr->value[i]);
			}
		}
		free(cptr->value);
    59e4:	ef 81       	ldd	r30, Y+7	; 0x07
    59e6:	f8 85       	ldd	r31, Y+8	; 0x08
    59e8:	80 81       	ld	r24, Z
    59ea:	91 81       	ldd	r25, Z+1	; 0x01
    59ec:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		free(cptr);
    59f0:	8f 81       	ldd	r24, Y+7	; 0x07
    59f2:	98 85       	ldd	r25, Y+8	; 0x08
    59f4:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		ptr->value.ptr = NULL;
    59f8:	ed 85       	ldd	r30, Y+13	; 0x0d
    59fa:	fe 85       	ldd	r31, Y+14	; 0x0e
    59fc:	15 82       	std	Z+5, r1	; 0x05
    59fe:	14 82       	std	Z+4, r1	; 0x04
    5a00:	64 c0       	rjmp	.+200    	; 0x5aca <vdmFree+0x1ba>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
    5a02:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a04:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a06:	84 81       	ldd	r24, Z+4	; 0x04
    5a08:	95 81       	ldd	r25, Z+5	; 0x05
    5a0a:	9c 83       	std	Y+4, r25	; 0x04
    5a0c:	8b 83       	std	Y+3, r24	; 0x03
		for (i = 0; i < cptr->size; i++)
    5a0e:	1e 82       	std	Y+6, r1	; 0x06
    5a10:	1d 82       	std	Y+5, r1	; 0x05
    5a12:	23 c0       	rjmp	.+70     	; 0x5a5a <vdmFree+0x14a>
		{
			if (cptr->value[i] != NULL)
    5a14:	eb 81       	ldd	r30, Y+3	; 0x03
    5a16:	fc 81       	ldd	r31, Y+4	; 0x04
    5a18:	20 81       	ld	r18, Z
    5a1a:	31 81       	ldd	r19, Z+1	; 0x01
    5a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a20:	88 0f       	add	r24, r24
    5a22:	99 1f       	adc	r25, r25
    5a24:	f9 01       	movw	r30, r18
    5a26:	e8 0f       	add	r30, r24
    5a28:	f9 1f       	adc	r31, r25
    5a2a:	80 81       	ld	r24, Z
    5a2c:	91 81       	ldd	r25, Z+1	; 0x01
    5a2e:	00 97       	sbiw	r24, 0x00	; 0
    5a30:	79 f0       	breq	.+30     	; 0x5a50 <vdmFree+0x140>
			{
				vdmFree(cptr->value[i]);
    5a32:	eb 81       	ldd	r30, Y+3	; 0x03
    5a34:	fc 81       	ldd	r31, Y+4	; 0x04
    5a36:	20 81       	ld	r18, Z
    5a38:	31 81       	ldd	r19, Z+1	; 0x01
    5a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a3e:	88 0f       	add	r24, r24
    5a40:	99 1f       	adc	r25, r25
    5a42:	f9 01       	movw	r30, r18
    5a44:	e8 0f       	add	r30, r24
    5a46:	f9 1f       	adc	r31, r25
    5a48:	80 81       	ld	r24, Z
    5a4a:	91 81       	ldd	r25, Z+1	; 0x01
    5a4c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, ptr);
		for (i = 0; i < cptr->size; i++)
    5a50:	8d 81       	ldd	r24, Y+5	; 0x05
    5a52:	9e 81       	ldd	r25, Y+6	; 0x06
    5a54:	01 96       	adiw	r24, 0x01	; 1
    5a56:	9e 83       	std	Y+6, r25	; 0x06
    5a58:	8d 83       	std	Y+5, r24	; 0x05
    5a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    5a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    5a5e:	22 81       	ldd	r18, Z+2	; 0x02
    5a60:	33 81       	ldd	r19, Z+3	; 0x03
    5a62:	8d 81       	ldd	r24, Y+5	; 0x05
    5a64:	9e 81       	ldd	r25, Y+6	; 0x06
    5a66:	82 17       	cp	r24, r18
    5a68:	93 07       	cpc	r25, r19
    5a6a:	a4 f2       	brlt	.-88     	; 0x5a14 <vdmFree+0x104>
			if (cptr->value[i] != NULL)
			{
				vdmFree(cptr->value[i]);
			}
		}
		free(cptr->value);
    5a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    5a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    5a70:	80 81       	ld	r24, Z
    5a72:	91 81       	ldd	r25, Z+1	; 0x01
    5a74:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		free(cptr);
    5a78:	8b 81       	ldd	r24, Y+3	; 0x03
    5a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a7c:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		ptr->value.ptr = NULL;
    5a80:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a82:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a84:	15 82       	std	Z+5, r1	; 0x05
    5a86:	14 82       	std	Z+4, r1	; 0x04
    5a88:	20 c0       	rjmp	.+64     	; 0x5aca <vdmFree+0x1ba>
		break;
#endif /* NO_RECORDS */
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) ptr->value.ptr;
    5a8a:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a8c:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a8e:	84 81       	ldd	r24, Z+4	; 0x04
    5a90:	95 81       	ldd	r25, Z+5	; 0x05
    5a92:	9a 83       	std	Y+2, r25	; 0x02
    5a94:	89 83       	std	Y+1, r24	; 0x01
		classTptr->freeClass(classTptr->value);
    5a96:	e9 81       	ldd	r30, Y+1	; 0x01
    5a98:	fa 81       	ldd	r31, Y+2	; 0x02
    5a9a:	26 81       	ldd	r18, Z+6	; 0x06
    5a9c:	37 81       	ldd	r19, Z+7	; 0x07
    5a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    5aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    5aa2:	80 81       	ld	r24, Z
    5aa4:	91 81       	ldd	r25, Z+1	; 0x01
    5aa6:	f9 01       	movw	r30, r18
    5aa8:	09 95       	icall
		classTptr->value = NULL;
    5aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    5aac:	fa 81       	ldd	r31, Y+2	; 0x02
    5aae:	11 82       	std	Z+1, r1	; 0x01
    5ab0:	10 82       	st	Z, r1
		classTptr->freeClass = NULL;
    5ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    5ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    5ab6:	17 82       	std	Z+7, r1	; 0x07
    5ab8:	16 82       	std	Z+6, r1	; 0x06

		/* free classtype  */
		free(classTptr);
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	9a 81       	ldd	r25, Y+2	; 0x02
    5abe:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		ptr->value.ptr = NULL;
    5ac2:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ac4:	fe 85       	ldd	r31, Y+14	; 0x0e
    5ac6:	15 82       	std	Z+5, r1	; 0x05
    5ac8:	14 82       	std	Z+4, r1	; 0x04
		break;
	}
	}

	/* free typedvalue  */
	remove_allocd_mem_node_by_location(ptr);
    5aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    5acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ace:	0e 94 91 48 	call	0x9122	; 0x9122 <remove_allocd_mem_node_by_location>
	tmp = ptr->ref_from;
    5ad2:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ad4:	fe 85       	ldd	r31, Y+14	; 0x0e
    5ad6:	82 81       	ldd	r24, Z+2	; 0x02
    5ad8:	93 81       	ldd	r25, Z+3	; 0x03
    5ada:	9c 87       	std	Y+12, r25	; 0x0c
    5adc:	8b 87       	std	Y+11, r24	; 0x0b
	free(ptr);
    5ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ae2:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	if(tmp != NULL)
    5ae6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ae8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5aea:	00 97       	sbiw	r24, 0x00	; 0
    5aec:	21 f0       	breq	.+8      	; 0x5af6 <vdmFree+0x1e6>
	{
		*tmp = NULL;
    5aee:	eb 85       	ldd	r30, Y+11	; 0x0b
    5af0:	fc 85       	ldd	r31, Y+12	; 0x0c
    5af2:	11 82       	std	Z+1, r1	; 0x01
    5af4:	10 82       	st	Z, r1
	}
}
    5af6:	60 96       	adiw	r28, 0x10	; 16
    5af8:	0f b6       	in	r0, 0x3f	; 63
    5afa:	f8 94       	cli
    5afc:	de bf       	out	0x3e, r29	; 62
    5afe:	0f be       	out	0x3f, r0	; 63
    5b00:	cd bf       	out	0x3d, r28	; 61
    5b02:	cf 91       	pop	r28
    5b04:	df 91       	pop	r29
    5b06:	08 95       	ret

00005b08 <vdmEquals>:

TVP vdmEquals(TVP a, TVP b)
{	return newBool(equals(a,b));}
    5b08:	df 93       	push	r29
    5b0a:	cf 93       	push	r28
    5b0c:	00 d0       	rcall	.+0      	; 0x5b0e <vdmEquals+0x6>
    5b0e:	00 d0       	rcall	.+0      	; 0x5b10 <vdmEquals+0x8>
    5b10:	cd b7       	in	r28, 0x3d	; 61
    5b12:	de b7       	in	r29, 0x3e	; 62
    5b14:	9a 83       	std	Y+2, r25	; 0x02
    5b16:	89 83       	std	Y+1, r24	; 0x01
    5b18:	7c 83       	std	Y+4, r23	; 0x04
    5b1a:	6b 83       	std	Y+3, r22	; 0x03
    5b1c:	89 81       	ldd	r24, Y+1	; 0x01
    5b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b20:	2b 81       	ldd	r18, Y+3	; 0x03
    5b22:	3c 81       	ldd	r19, Y+4	; 0x04
    5b24:	b9 01       	movw	r22, r18
    5b26:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    5b2a:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5b2e:	0f 90       	pop	r0
    5b30:	0f 90       	pop	r0
    5b32:	0f 90       	pop	r0
    5b34:	0f 90       	pop	r0
    5b36:	cf 91       	pop	r28
    5b38:	df 91       	pop	r29
    5b3a:	08 95       	ret

00005b3c <vdmEqualsGC>:

TVP vdmEqualsGC(TVP a, TVP b, TVP *from)
{	return newBoolGC(equals(a,b), from);}
    5b3c:	df 93       	push	r29
    5b3e:	cf 93       	push	r28
    5b40:	00 d0       	rcall	.+0      	; 0x5b42 <vdmEqualsGC+0x6>
    5b42:	00 d0       	rcall	.+0      	; 0x5b44 <vdmEqualsGC+0x8>
    5b44:	00 d0       	rcall	.+0      	; 0x5b46 <vdmEqualsGC+0xa>
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	9a 83       	std	Y+2, r25	; 0x02
    5b4c:	89 83       	std	Y+1, r24	; 0x01
    5b4e:	7c 83       	std	Y+4, r23	; 0x04
    5b50:	6b 83       	std	Y+3, r22	; 0x03
    5b52:	5e 83       	std	Y+6, r21	; 0x06
    5b54:	4d 83       	std	Y+5, r20	; 0x05
    5b56:	89 81       	ldd	r24, Y+1	; 0x01
    5b58:	9a 81       	ldd	r25, Y+2	; 0x02
    5b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    5b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    5b5e:	b9 01       	movw	r22, r18
    5b60:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    5b64:	2d 81       	ldd	r18, Y+5	; 0x05
    5b66:	3e 81       	ldd	r19, Y+6	; 0x06
    5b68:	b9 01       	movw	r22, r18
    5b6a:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    5b6e:	26 96       	adiw	r28, 0x06	; 6
    5b70:	0f b6       	in	r0, 0x3f	; 63
    5b72:	f8 94       	cli
    5b74:	de bf       	out	0x3e, r29	; 62
    5b76:	0f be       	out	0x3f, r0	; 63
    5b78:	cd bf       	out	0x3d, r28	; 61
    5b7a:	cf 91       	pop	r28
    5b7c:	df 91       	pop	r29
    5b7e:	08 95       	ret

00005b80 <vdmInEquals>:

TVP vdmInEquals(TVP a, TVP b)
{	return newBool(!equals(a,b));}
    5b80:	df 93       	push	r29
    5b82:	cf 93       	push	r28
    5b84:	00 d0       	rcall	.+0      	; 0x5b86 <vdmInEquals+0x6>
    5b86:	00 d0       	rcall	.+0      	; 0x5b88 <vdmInEquals+0x8>
    5b88:	cd b7       	in	r28, 0x3d	; 61
    5b8a:	de b7       	in	r29, 0x3e	; 62
    5b8c:	9a 83       	std	Y+2, r25	; 0x02
    5b8e:	89 83       	std	Y+1, r24	; 0x01
    5b90:	7c 83       	std	Y+4, r23	; 0x04
    5b92:	6b 83       	std	Y+3, r22	; 0x03
    5b94:	89 81       	ldd	r24, Y+1	; 0x01
    5b96:	9a 81       	ldd	r25, Y+2	; 0x02
    5b98:	2b 81       	ldd	r18, Y+3	; 0x03
    5b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    5b9c:	b9 01       	movw	r22, r18
    5b9e:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    5ba2:	98 2f       	mov	r25, r24
    5ba4:	81 e0       	ldi	r24, 0x01	; 1
    5ba6:	89 27       	eor	r24, r25
    5ba8:	88 2f       	mov	r24, r24
    5baa:	90 e0       	ldi	r25, 0x00	; 0
    5bac:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5bb0:	0f 90       	pop	r0
    5bb2:	0f 90       	pop	r0
    5bb4:	0f 90       	pop	r0
    5bb6:	0f 90       	pop	r0
    5bb8:	cf 91       	pop	r28
    5bba:	df 91       	pop	r29
    5bbc:	08 95       	ret

00005bbe <vdmInEqualsGC>:

TVP vdmInEqualsGC(TVP a, TVP b, TVP *from)
{	return newBoolGC(!equals(a,b), from);}
    5bbe:	df 93       	push	r29
    5bc0:	cf 93       	push	r28
    5bc2:	00 d0       	rcall	.+0      	; 0x5bc4 <vdmInEqualsGC+0x6>
    5bc4:	00 d0       	rcall	.+0      	; 0x5bc6 <vdmInEqualsGC+0x8>
    5bc6:	00 d0       	rcall	.+0      	; 0x5bc8 <vdmInEqualsGC+0xa>
    5bc8:	cd b7       	in	r28, 0x3d	; 61
    5bca:	de b7       	in	r29, 0x3e	; 62
    5bcc:	9a 83       	std	Y+2, r25	; 0x02
    5bce:	89 83       	std	Y+1, r24	; 0x01
    5bd0:	7c 83       	std	Y+4, r23	; 0x04
    5bd2:	6b 83       	std	Y+3, r22	; 0x03
    5bd4:	5e 83       	std	Y+6, r21	; 0x06
    5bd6:	4d 83       	std	Y+5, r20	; 0x05
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
    5bda:	9a 81       	ldd	r25, Y+2	; 0x02
    5bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    5bde:	3c 81       	ldd	r19, Y+4	; 0x04
    5be0:	b9 01       	movw	r22, r18
    5be2:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    5be6:	98 2f       	mov	r25, r24
    5be8:	81 e0       	ldi	r24, 0x01	; 1
    5bea:	89 27       	eor	r24, r25
    5bec:	88 2f       	mov	r24, r24
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	2d 81       	ldd	r18, Y+5	; 0x05
    5bf2:	3e 81       	ldd	r19, Y+6	; 0x06
    5bf4:	b9 01       	movw	r22, r18
    5bf6:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    5bfa:	26 96       	adiw	r28, 0x06	; 6
    5bfc:	0f b6       	in	r0, 0x3f	; 63
    5bfe:	f8 94       	cli
    5c00:	de bf       	out	0x3e, r29	; 62
    5c02:	0f be       	out	0x3f, r0	; 63
    5c04:	cd bf       	out	0x3d, r28	; 61
    5c06:	cf 91       	pop	r28
    5c08:	df 91       	pop	r29
    5c0a:	08 95       	ret

00005c0c <vdmNot>:
/*
 * Boolean
 */

TVP vdmNot(TVP arg)
{
    5c0c:	df 93       	push	r29
    5c0e:	cf 93       	push	r28
    5c10:	00 d0       	rcall	.+0      	; 0x5c12 <vdmNot+0x6>
    5c12:	00 d0       	rcall	.+0      	; 0x5c14 <vdmNot+0x8>
    5c14:	cd b7       	in	r28, 0x3d	; 61
    5c16:	de b7       	in	r29, 0x3e	; 62
    5c18:	9a 83       	std	Y+2, r25	; 0x02
    5c1a:	89 83       	std	Y+1, r24	; 0x01
	if(arg == NULL)
    5c1c:	89 81       	ldd	r24, Y+1	; 0x01
    5c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c20:	00 97       	sbiw	r24, 0x00	; 0
    5c22:	19 f4       	brne	.+6      	; 0x5c2a <vdmNot+0x1e>
		return NULL;
    5c24:	1c 82       	std	Y+4, r1	; 0x04
    5c26:	1b 82       	std	Y+3, r1	; 0x03
    5c28:	14 c0       	rjmp	.+40     	; 0x5c52 <vdmNot+0x46>

	ASSERT_CHECK_BOOL(arg);
    5c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    5c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    5c2e:	80 81       	ld	r24, Z
    5c30:	91 81       	ldd	r25, Z+1	; 0x01
    5c32:	83 30       	cpi	r24, 0x03	; 3
    5c34:	91 05       	cpc	r25, r1
    5c36:	11 f0       	breq	.+4      	; 0x5c3c <vdmNot+0x30>
    5c38:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	return newBool(!arg->value.boolVal);
    5c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    5c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    5c40:	94 81       	ldd	r25, Z+4	; 0x04
    5c42:	81 e0       	ldi	r24, 0x01	; 1
    5c44:	89 27       	eor	r24, r25
    5c46:	88 2f       	mov	r24, r24
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5c4e:	9c 83       	std	Y+4, r25	; 0x04
    5c50:	8b 83       	std	Y+3, r24	; 0x03
    5c52:	8b 81       	ldd	r24, Y+3	; 0x03
    5c54:	9c 81       	ldd	r25, Y+4	; 0x04
}
    5c56:	0f 90       	pop	r0
    5c58:	0f 90       	pop	r0
    5c5a:	0f 90       	pop	r0
    5c5c:	0f 90       	pop	r0
    5c5e:	cf 91       	pop	r28
    5c60:	df 91       	pop	r29
    5c62:	08 95       	ret

00005c64 <vdmNotGC>:

TVP vdmNotGC(TVP arg, TVP *from)
{
    5c64:	df 93       	push	r29
    5c66:	cf 93       	push	r28
    5c68:	00 d0       	rcall	.+0      	; 0x5c6a <vdmNotGC+0x6>
    5c6a:	00 d0       	rcall	.+0      	; 0x5c6c <vdmNotGC+0x8>
    5c6c:	00 d0       	rcall	.+0      	; 0x5c6e <vdmNotGC+0xa>
    5c6e:	cd b7       	in	r28, 0x3d	; 61
    5c70:	de b7       	in	r29, 0x3e	; 62
    5c72:	9a 83       	std	Y+2, r25	; 0x02
    5c74:	89 83       	std	Y+1, r24	; 0x01
    5c76:	7c 83       	std	Y+4, r23	; 0x04
    5c78:	6b 83       	std	Y+3, r22	; 0x03
	if(arg == NULL)
    5c7a:	89 81       	ldd	r24, Y+1	; 0x01
    5c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c7e:	00 97       	sbiw	r24, 0x00	; 0
    5c80:	19 f4       	brne	.+6      	; 0x5c88 <vdmNotGC+0x24>
		return NULL;
    5c82:	1e 82       	std	Y+6, r1	; 0x06
    5c84:	1d 82       	std	Y+5, r1	; 0x05
    5c86:	17 c0       	rjmp	.+46     	; 0x5cb6 <vdmNotGC+0x52>

	ASSERT_CHECK_BOOL(arg);
    5c88:	e9 81       	ldd	r30, Y+1	; 0x01
    5c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    5c8c:	80 81       	ld	r24, Z
    5c8e:	91 81       	ldd	r25, Z+1	; 0x01
    5c90:	83 30       	cpi	r24, 0x03	; 3
    5c92:	91 05       	cpc	r25, r1
    5c94:	11 f0       	breq	.+4      	; 0x5c9a <vdmNotGC+0x36>
    5c96:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	return newBoolGC(!arg->value.boolVal, from);
    5c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    5c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    5c9e:	94 81       	ldd	r25, Z+4	; 0x04
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	89 27       	eor	r24, r25
    5ca4:	88 2f       	mov	r24, r24
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	2b 81       	ldd	r18, Y+3	; 0x03
    5caa:	3c 81       	ldd	r19, Y+4	; 0x04
    5cac:	b9 01       	movw	r22, r18
    5cae:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    5cb2:	9e 83       	std	Y+6, r25	; 0x06
    5cb4:	8d 83       	std	Y+5, r24	; 0x05
    5cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    5cb8:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5cba:	26 96       	adiw	r28, 0x06	; 6
    5cbc:	0f b6       	in	r0, 0x3f	; 63
    5cbe:	f8 94       	cli
    5cc0:	de bf       	out	0x3e, r29	; 62
    5cc2:	0f be       	out	0x3f, r0	; 63
    5cc4:	cd bf       	out	0x3d, r28	; 61
    5cc6:	cf 91       	pop	r28
    5cc8:	df 91       	pop	r29
    5cca:	08 95       	ret

00005ccc <vdmAnd>:

TVP vdmAnd(TVP a,TVP b)
{
    5ccc:	df 93       	push	r29
    5cce:	cf 93       	push	r28
    5cd0:	00 d0       	rcall	.+0      	; 0x5cd2 <vdmAnd+0x6>
    5cd2:	00 d0       	rcall	.+0      	; 0x5cd4 <vdmAnd+0x8>
    5cd4:	00 d0       	rcall	.+0      	; 0x5cd6 <vdmAnd+0xa>
    5cd6:	cd b7       	in	r28, 0x3d	; 61
    5cd8:	de b7       	in	r29, 0x3e	; 62
    5cda:	9a 83       	std	Y+2, r25	; 0x02
    5cdc:	89 83       	std	Y+1, r24	; 0x01
    5cde:	7c 83       	std	Y+4, r23	; 0x04
    5ce0:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL)
    5ce2:	89 81       	ldd	r24, Y+1	; 0x01
    5ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce6:	00 97       	sbiw	r24, 0x00	; 0
    5ce8:	19 f4       	brne	.+6      	; 0x5cf0 <vdmAnd+0x24>
		return NULL;
    5cea:	1e 82       	std	Y+6, r1	; 0x06
    5cec:	1d 82       	std	Y+5, r1	; 0x05
    5cee:	2d c0       	rjmp	.+90     	; 0x5d4a <vdmAnd+0x7e>

	ASSERT_CHECK_BOOL(a);
    5cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    5cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    5cf4:	80 81       	ld	r24, Z
    5cf6:	91 81       	ldd	r25, Z+1	; 0x01
    5cf8:	83 30       	cpi	r24, 0x03	; 3
    5cfa:	91 05       	cpc	r25, r1
    5cfc:	11 f0       	breq	.+4      	; 0x5d02 <vdmAnd+0x36>
    5cfe:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	if(!a->value.boolVal)
    5d02:	e9 81       	ldd	r30, Y+1	; 0x01
    5d04:	fa 81       	ldd	r31, Y+2	; 0x02
    5d06:	94 81       	ldd	r25, Z+4	; 0x04
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	89 27       	eor	r24, r25
    5d0c:	88 23       	and	r24, r24
    5d0e:	31 f0       	breq	.+12     	; 0x5d1c <vdmAnd+0x50>
		return newBool(false);
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5d16:	9e 83       	std	Y+6, r25	; 0x06
    5d18:	8d 83       	std	Y+5, r24	; 0x05
    5d1a:	17 c0       	rjmp	.+46     	; 0x5d4a <vdmAnd+0x7e>

	if(b == NULL)
    5d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d20:	00 97       	sbiw	r24, 0x00	; 0
    5d22:	19 f4       	brne	.+6      	; 0x5d2a <vdmAnd+0x5e>
		return NULL;
    5d24:	1e 82       	std	Y+6, r1	; 0x06
    5d26:	1d 82       	std	Y+5, r1	; 0x05
    5d28:	10 c0       	rjmp	.+32     	; 0x5d4a <vdmAnd+0x7e>

	ASSERT_CHECK_BOOL(b);
    5d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    5d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    5d2e:	80 81       	ld	r24, Z
    5d30:	91 81       	ldd	r25, Z+1	; 0x01
    5d32:	83 30       	cpi	r24, 0x03	; 3
    5d34:	91 05       	cpc	r25, r1
    5d36:	11 f0       	breq	.+4      	; 0x5d3c <vdmAnd+0x70>
    5d38:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBool(b->value.boolVal);
    5d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    5d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    5d40:	84 81       	ldd	r24, Z+4	; 0x04
    5d42:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5d46:	9e 83       	std	Y+6, r25	; 0x06
    5d48:	8d 83       	std	Y+5, r24	; 0x05
    5d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d4c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5d4e:	26 96       	adiw	r28, 0x06	; 6
    5d50:	0f b6       	in	r0, 0x3f	; 63
    5d52:	f8 94       	cli
    5d54:	de bf       	out	0x3e, r29	; 62
    5d56:	0f be       	out	0x3f, r0	; 63
    5d58:	cd bf       	out	0x3d, r28	; 61
    5d5a:	cf 91       	pop	r28
    5d5c:	df 91       	pop	r29
    5d5e:	08 95       	ret

00005d60 <vdmAndGC>:

TVP vdmAndGC(TVP a, TVP b, TVP *from)
{
    5d60:	df 93       	push	r29
    5d62:	cf 93       	push	r28
    5d64:	cd b7       	in	r28, 0x3d	; 61
    5d66:	de b7       	in	r29, 0x3e	; 62
    5d68:	28 97       	sbiw	r28, 0x08	; 8
    5d6a:	0f b6       	in	r0, 0x3f	; 63
    5d6c:	f8 94       	cli
    5d6e:	de bf       	out	0x3e, r29	; 62
    5d70:	0f be       	out	0x3f, r0	; 63
    5d72:	cd bf       	out	0x3d, r28	; 61
    5d74:	9a 83       	std	Y+2, r25	; 0x02
    5d76:	89 83       	std	Y+1, r24	; 0x01
    5d78:	7c 83       	std	Y+4, r23	; 0x04
    5d7a:	6b 83       	std	Y+3, r22	; 0x03
    5d7c:	5e 83       	std	Y+6, r21	; 0x06
    5d7e:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL)
    5d80:	89 81       	ldd	r24, Y+1	; 0x01
    5d82:	9a 81       	ldd	r25, Y+2	; 0x02
    5d84:	00 97       	sbiw	r24, 0x00	; 0
    5d86:	19 f4       	brne	.+6      	; 0x5d8e <vdmAndGC+0x2e>
		return NULL;
    5d88:	18 86       	std	Y+8, r1	; 0x08
    5d8a:	1f 82       	std	Y+7, r1	; 0x07
    5d8c:	33 c0       	rjmp	.+102    	; 0x5df4 <vdmAndGC+0x94>

	ASSERT_CHECK_BOOL(a);
    5d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    5d90:	fa 81       	ldd	r31, Y+2	; 0x02
    5d92:	80 81       	ld	r24, Z
    5d94:	91 81       	ldd	r25, Z+1	; 0x01
    5d96:	83 30       	cpi	r24, 0x03	; 3
    5d98:	91 05       	cpc	r25, r1
    5d9a:	11 f0       	breq	.+4      	; 0x5da0 <vdmAndGC+0x40>
    5d9c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	if(!a->value.boolVal)
    5da0:	e9 81       	ldd	r30, Y+1	; 0x01
    5da2:	fa 81       	ldd	r31, Y+2	; 0x02
    5da4:	94 81       	ldd	r25, Z+4	; 0x04
    5da6:	81 e0       	ldi	r24, 0x01	; 1
    5da8:	89 27       	eor	r24, r25
    5daa:	88 23       	and	r24, r24
    5dac:	49 f0       	breq	.+18     	; 0x5dc0 <vdmAndGC+0x60>
		return newBoolGC(false, from);
    5dae:	2d 81       	ldd	r18, Y+5	; 0x05
    5db0:	3e 81       	ldd	r19, Y+6	; 0x06
    5db2:	80 e0       	ldi	r24, 0x00	; 0
    5db4:	b9 01       	movw	r22, r18
    5db6:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    5dba:	98 87       	std	Y+8, r25	; 0x08
    5dbc:	8f 83       	std	Y+7, r24	; 0x07
    5dbe:	1a c0       	rjmp	.+52     	; 0x5df4 <vdmAndGC+0x94>

	if(b == NULL)
    5dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    5dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    5dc4:	00 97       	sbiw	r24, 0x00	; 0
    5dc6:	19 f4       	brne	.+6      	; 0x5dce <vdmAndGC+0x6e>
		return NULL;
    5dc8:	18 86       	std	Y+8, r1	; 0x08
    5dca:	1f 82       	std	Y+7, r1	; 0x07
    5dcc:	13 c0       	rjmp	.+38     	; 0x5df4 <vdmAndGC+0x94>

	ASSERT_CHECK_BOOL(b);
    5dce:	eb 81       	ldd	r30, Y+3	; 0x03
    5dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    5dd2:	80 81       	ld	r24, Z
    5dd4:	91 81       	ldd	r25, Z+1	; 0x01
    5dd6:	83 30       	cpi	r24, 0x03	; 3
    5dd8:	91 05       	cpc	r25, r1
    5dda:	11 f0       	breq	.+4      	; 0x5de0 <vdmAndGC+0x80>
    5ddc:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBoolGC(b->value.boolVal, from);
    5de0:	eb 81       	ldd	r30, Y+3	; 0x03
    5de2:	fc 81       	ldd	r31, Y+4	; 0x04
    5de4:	84 81       	ldd	r24, Z+4	; 0x04
    5de6:	2d 81       	ldd	r18, Y+5	; 0x05
    5de8:	3e 81       	ldd	r19, Y+6	; 0x06
    5dea:	b9 01       	movw	r22, r18
    5dec:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    5df0:	98 87       	std	Y+8, r25	; 0x08
    5df2:	8f 83       	std	Y+7, r24	; 0x07
    5df4:	8f 81       	ldd	r24, Y+7	; 0x07
    5df6:	98 85       	ldd	r25, Y+8	; 0x08
}
    5df8:	28 96       	adiw	r28, 0x08	; 8
    5dfa:	0f b6       	in	r0, 0x3f	; 63
    5dfc:	f8 94       	cli
    5dfe:	de bf       	out	0x3e, r29	; 62
    5e00:	0f be       	out	0x3f, r0	; 63
    5e02:	cd bf       	out	0x3d, r28	; 61
    5e04:	cf 91       	pop	r28
    5e06:	df 91       	pop	r29
    5e08:	08 95       	ret

00005e0a <vdmOr>:

TVP vdmOr(TVP a,TVP b)
{
    5e0a:	df 93       	push	r29
    5e0c:	cf 93       	push	r28
    5e0e:	00 d0       	rcall	.+0      	; 0x5e10 <vdmOr+0x6>
    5e10:	00 d0       	rcall	.+0      	; 0x5e12 <vdmOr+0x8>
    5e12:	00 d0       	rcall	.+0      	; 0x5e14 <vdmOr+0xa>
    5e14:	cd b7       	in	r28, 0x3d	; 61
    5e16:	de b7       	in	r29, 0x3e	; 62
    5e18:	9a 83       	std	Y+2, r25	; 0x02
    5e1a:	89 83       	std	Y+1, r24	; 0x01
    5e1c:	7c 83       	std	Y+4, r23	; 0x04
    5e1e:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL)
    5e20:	89 81       	ldd	r24, Y+1	; 0x01
    5e22:	9a 81       	ldd	r25, Y+2	; 0x02
    5e24:	00 97       	sbiw	r24, 0x00	; 0
    5e26:	19 f4       	brne	.+6      	; 0x5e2e <vdmOr+0x24>
		return NULL;
    5e28:	1e 82       	std	Y+6, r1	; 0x06
    5e2a:	1d 82       	std	Y+5, r1	; 0x05
    5e2c:	2b c0       	rjmp	.+86     	; 0x5e84 <vdmOr+0x7a>

	ASSERT_CHECK_BOOL(a);
    5e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    5e30:	fa 81       	ldd	r31, Y+2	; 0x02
    5e32:	80 81       	ld	r24, Z
    5e34:	91 81       	ldd	r25, Z+1	; 0x01
    5e36:	83 30       	cpi	r24, 0x03	; 3
    5e38:	91 05       	cpc	r25, r1
    5e3a:	11 f0       	breq	.+4      	; 0x5e40 <vdmOr+0x36>
    5e3c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	if(a->value.boolVal)
    5e40:	e9 81       	ldd	r30, Y+1	; 0x01
    5e42:	fa 81       	ldd	r31, Y+2	; 0x02
    5e44:	84 81       	ldd	r24, Z+4	; 0x04
    5e46:	88 23       	and	r24, r24
    5e48:	31 f0       	breq	.+12     	; 0x5e56 <vdmOr+0x4c>
		return newBool(true);
    5e4a:	81 e0       	ldi	r24, 0x01	; 1
    5e4c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5e50:	9e 83       	std	Y+6, r25	; 0x06
    5e52:	8d 83       	std	Y+5, r24	; 0x05
    5e54:	17 c0       	rjmp	.+46     	; 0x5e84 <vdmOr+0x7a>

	if(b == NULL)
    5e56:	8b 81       	ldd	r24, Y+3	; 0x03
    5e58:	9c 81       	ldd	r25, Y+4	; 0x04
    5e5a:	00 97       	sbiw	r24, 0x00	; 0
    5e5c:	19 f4       	brne	.+6      	; 0x5e64 <vdmOr+0x5a>
		return NULL;
    5e5e:	1e 82       	std	Y+6, r1	; 0x06
    5e60:	1d 82       	std	Y+5, r1	; 0x05
    5e62:	10 c0       	rjmp	.+32     	; 0x5e84 <vdmOr+0x7a>

	ASSERT_CHECK_BOOL(b);
    5e64:	eb 81       	ldd	r30, Y+3	; 0x03
    5e66:	fc 81       	ldd	r31, Y+4	; 0x04
    5e68:	80 81       	ld	r24, Z
    5e6a:	91 81       	ldd	r25, Z+1	; 0x01
    5e6c:	83 30       	cpi	r24, 0x03	; 3
    5e6e:	91 05       	cpc	r25, r1
    5e70:	11 f0       	breq	.+4      	; 0x5e76 <vdmOr+0x6c>
    5e72:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBool(b->value.boolVal);
    5e76:	eb 81       	ldd	r30, Y+3	; 0x03
    5e78:	fc 81       	ldd	r31, Y+4	; 0x04
    5e7a:	84 81       	ldd	r24, Z+4	; 0x04
    5e7c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5e80:	9e 83       	std	Y+6, r25	; 0x06
    5e82:	8d 83       	std	Y+5, r24	; 0x05
    5e84:	8d 81       	ldd	r24, Y+5	; 0x05
    5e86:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5e88:	26 96       	adiw	r28, 0x06	; 6
    5e8a:	0f b6       	in	r0, 0x3f	; 63
    5e8c:	f8 94       	cli
    5e8e:	de bf       	out	0x3e, r29	; 62
    5e90:	0f be       	out	0x3f, r0	; 63
    5e92:	cd bf       	out	0x3d, r28	; 61
    5e94:	cf 91       	pop	r28
    5e96:	df 91       	pop	r29
    5e98:	08 95       	ret

00005e9a <vdmOrGC>:

TVP vdmOrGC(TVP a, TVP b, TVP *from)
{
    5e9a:	df 93       	push	r29
    5e9c:	cf 93       	push	r28
    5e9e:	cd b7       	in	r28, 0x3d	; 61
    5ea0:	de b7       	in	r29, 0x3e	; 62
    5ea2:	28 97       	sbiw	r28, 0x08	; 8
    5ea4:	0f b6       	in	r0, 0x3f	; 63
    5ea6:	f8 94       	cli
    5ea8:	de bf       	out	0x3e, r29	; 62
    5eaa:	0f be       	out	0x3f, r0	; 63
    5eac:	cd bf       	out	0x3d, r28	; 61
    5eae:	9a 83       	std	Y+2, r25	; 0x02
    5eb0:	89 83       	std	Y+1, r24	; 0x01
    5eb2:	7c 83       	std	Y+4, r23	; 0x04
    5eb4:	6b 83       	std	Y+3, r22	; 0x03
    5eb6:	5e 83       	std	Y+6, r21	; 0x06
    5eb8:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL)
    5eba:	89 81       	ldd	r24, Y+1	; 0x01
    5ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ebe:	00 97       	sbiw	r24, 0x00	; 0
    5ec0:	19 f4       	brne	.+6      	; 0x5ec8 <vdmOrGC+0x2e>
		return NULL;
    5ec2:	18 86       	std	Y+8, r1	; 0x08
    5ec4:	1f 82       	std	Y+7, r1	; 0x07
    5ec6:	31 c0       	rjmp	.+98     	; 0x5f2a <vdmOrGC+0x90>

	ASSERT_CHECK_BOOL(a);
    5ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    5eca:	fa 81       	ldd	r31, Y+2	; 0x02
    5ecc:	80 81       	ld	r24, Z
    5ece:	91 81       	ldd	r25, Z+1	; 0x01
    5ed0:	83 30       	cpi	r24, 0x03	; 3
    5ed2:	91 05       	cpc	r25, r1
    5ed4:	11 f0       	breq	.+4      	; 0x5eda <vdmOrGC+0x40>
    5ed6:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	if(a->value.boolVal)
    5eda:	e9 81       	ldd	r30, Y+1	; 0x01
    5edc:	fa 81       	ldd	r31, Y+2	; 0x02
    5ede:	84 81       	ldd	r24, Z+4	; 0x04
    5ee0:	88 23       	and	r24, r24
    5ee2:	49 f0       	breq	.+18     	; 0x5ef6 <vdmOrGC+0x5c>
		return newBoolGC(true, from);
    5ee4:	2d 81       	ldd	r18, Y+5	; 0x05
    5ee6:	3e 81       	ldd	r19, Y+6	; 0x06
    5ee8:	81 e0       	ldi	r24, 0x01	; 1
    5eea:	b9 01       	movw	r22, r18
    5eec:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    5ef0:	98 87       	std	Y+8, r25	; 0x08
    5ef2:	8f 83       	std	Y+7, r24	; 0x07
    5ef4:	1a c0       	rjmp	.+52     	; 0x5f2a <vdmOrGC+0x90>

	if(b == NULL)
    5ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    5efa:	00 97       	sbiw	r24, 0x00	; 0
    5efc:	19 f4       	brne	.+6      	; 0x5f04 <vdmOrGC+0x6a>
		return NULL;
    5efe:	18 86       	std	Y+8, r1	; 0x08
    5f00:	1f 82       	std	Y+7, r1	; 0x07
    5f02:	13 c0       	rjmp	.+38     	; 0x5f2a <vdmOrGC+0x90>

	ASSERT_CHECK_BOOL(b);
    5f04:	eb 81       	ldd	r30, Y+3	; 0x03
    5f06:	fc 81       	ldd	r31, Y+4	; 0x04
    5f08:	80 81       	ld	r24, Z
    5f0a:	91 81       	ldd	r25, Z+1	; 0x01
    5f0c:	83 30       	cpi	r24, 0x03	; 3
    5f0e:	91 05       	cpc	r25, r1
    5f10:	11 f0       	breq	.+4      	; 0x5f16 <vdmOrGC+0x7c>
    5f12:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBoolGC(b->value.boolVal, from);
    5f16:	eb 81       	ldd	r30, Y+3	; 0x03
    5f18:	fc 81       	ldd	r31, Y+4	; 0x04
    5f1a:	84 81       	ldd	r24, Z+4	; 0x04
    5f1c:	2d 81       	ldd	r18, Y+5	; 0x05
    5f1e:	3e 81       	ldd	r19, Y+6	; 0x06
    5f20:	b9 01       	movw	r22, r18
    5f22:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    5f26:	98 87       	std	Y+8, r25	; 0x08
    5f28:	8f 83       	std	Y+7, r24	; 0x07
    5f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    5f2c:	98 85       	ldd	r25, Y+8	; 0x08
}
    5f2e:	28 96       	adiw	r28, 0x08	; 8
    5f30:	0f b6       	in	r0, 0x3f	; 63
    5f32:	f8 94       	cli
    5f34:	de bf       	out	0x3e, r29	; 62
    5f36:	0f be       	out	0x3f, r0	; 63
    5f38:	cd bf       	out	0x3d, r28	; 61
    5f3a:	cf 91       	pop	r28
    5f3c:	df 91       	pop	r29
    5f3e:	08 95       	ret

00005f40 <vdmXor>:

TVP vdmXor(TVP a,TVP b)
{
    5f40:	df 93       	push	r29
    5f42:	cf 93       	push	r28
    5f44:	cd b7       	in	r28, 0x3d	; 61
    5f46:	de b7       	in	r29, 0x3e	; 62
    5f48:	28 97       	sbiw	r28, 0x08	; 8
    5f4a:	0f b6       	in	r0, 0x3f	; 63
    5f4c:	f8 94       	cli
    5f4e:	de bf       	out	0x3e, r29	; 62
    5f50:	0f be       	out	0x3f, r0	; 63
    5f52:	cd bf       	out	0x3d, r28	; 61
    5f54:	9a 83       	std	Y+2, r25	; 0x02
    5f56:	89 83       	std	Y+1, r24	; 0x01
    5f58:	7c 83       	std	Y+4, r23	; 0x04
    5f5a:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL || b == NULL)
    5f5c:	89 81       	ldd	r24, Y+1	; 0x01
    5f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f60:	00 97       	sbiw	r24, 0x00	; 0
    5f62:	21 f0       	breq	.+8      	; 0x5f6c <vdmXor+0x2c>
    5f64:	8b 81       	ldd	r24, Y+3	; 0x03
    5f66:	9c 81       	ldd	r25, Y+4	; 0x04
    5f68:	00 97       	sbiw	r24, 0x00	; 0
    5f6a:	19 f4       	brne	.+6      	; 0x5f72 <vdmXor+0x32>
		return NULL;
    5f6c:	18 86       	std	Y+8, r1	; 0x08
    5f6e:	1f 82       	std	Y+7, r1	; 0x07
    5f70:	3a c0       	rjmp	.+116    	; 0x5fe6 <vdmXor+0xa6>

	ASSERT_CHECK_BOOL(a);
    5f72:	e9 81       	ldd	r30, Y+1	; 0x01
    5f74:	fa 81       	ldd	r31, Y+2	; 0x02
    5f76:	80 81       	ld	r24, Z
    5f78:	91 81       	ldd	r25, Z+1	; 0x01
    5f7a:	83 30       	cpi	r24, 0x03	; 3
    5f7c:	91 05       	cpc	r25, r1
    5f7e:	11 f0       	breq	.+4      	; 0x5f84 <vdmXor+0x44>
    5f80:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_BOOL(b);
    5f84:	eb 81       	ldd	r30, Y+3	; 0x03
    5f86:	fc 81       	ldd	r31, Y+4	; 0x04
    5f88:	80 81       	ld	r24, Z
    5f8a:	91 81       	ldd	r25, Z+1	; 0x01
    5f8c:	83 30       	cpi	r24, 0x03	; 3
    5f8e:	91 05       	cpc	r25, r1
    5f90:	11 f0       	breq	.+4      	; 0x5f96 <vdmXor+0x56>
    5f92:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBool((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)));
    5f96:	e9 81       	ldd	r30, Y+1	; 0x01
    5f98:	fa 81       	ldd	r31, Y+2	; 0x02
    5f9a:	94 81       	ldd	r25, Z+4	; 0x04
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
    5f9e:	98 27       	eor	r25, r24
    5fa0:	81 e0       	ldi	r24, 0x01	; 1
    5fa2:	89 27       	eor	r24, r25
    5fa4:	88 23       	and	r24, r24
    5fa6:	29 f4       	brne	.+10     	; 0x5fb2 <vdmXor+0x72>
    5fa8:	eb 81       	ldd	r30, Y+3	; 0x03
    5faa:	fc 81       	ldd	r31, Y+4	; 0x04
    5fac:	84 81       	ldd	r24, Z+4	; 0x04
    5fae:	88 23       	and	r24, r24
    5fb0:	71 f4       	brne	.+28     	; 0x5fce <vdmXor+0x8e>
    5fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    5fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    5fb6:	94 81       	ldd	r25, Z+4	; 0x04
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	89 27       	eor	r24, r25
    5fbc:	88 23       	and	r24, r24
    5fbe:	61 f4       	brne	.+24     	; 0x5fd8 <vdmXor+0x98>
    5fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    5fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    5fc4:	94 81       	ldd	r25, Z+4	; 0x04
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	89 27       	eor	r24, r25
    5fca:	88 23       	and	r24, r24
    5fcc:	29 f0       	breq	.+10     	; 0x5fd8 <vdmXor+0x98>
    5fce:	81 e0       	ldi	r24, 0x01	; 1
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	9e 83       	std	Y+6, r25	; 0x06
    5fd4:	8d 83       	std	Y+5, r24	; 0x05
    5fd6:	02 c0       	rjmp	.+4      	; 0x5fdc <vdmXor+0x9c>
    5fd8:	1e 82       	std	Y+6, r1	; 0x06
    5fda:	1d 82       	std	Y+5, r1	; 0x05
    5fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    5fde:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    5fe2:	98 87       	std	Y+8, r25	; 0x08
    5fe4:	8f 83       	std	Y+7, r24	; 0x07
    5fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    5fe8:	98 85       	ldd	r25, Y+8	; 0x08
}
    5fea:	28 96       	adiw	r28, 0x08	; 8
    5fec:	0f b6       	in	r0, 0x3f	; 63
    5fee:	f8 94       	cli
    5ff0:	de bf       	out	0x3e, r29	; 62
    5ff2:	0f be       	out	0x3f, r0	; 63
    5ff4:	cd bf       	out	0x3d, r28	; 61
    5ff6:	cf 91       	pop	r28
    5ff8:	df 91       	pop	r29
    5ffa:	08 95       	ret

00005ffc <vdmXorGC>:

TVP vdmXorGC(TVP a, TVP b, TVP *from)
{
    5ffc:	df 93       	push	r29
    5ffe:	cf 93       	push	r28
    6000:	cd b7       	in	r28, 0x3d	; 61
    6002:	de b7       	in	r29, 0x3e	; 62
    6004:	2a 97       	sbiw	r28, 0x0a	; 10
    6006:	0f b6       	in	r0, 0x3f	; 63
    6008:	f8 94       	cli
    600a:	de bf       	out	0x3e, r29	; 62
    600c:	0f be       	out	0x3f, r0	; 63
    600e:	cd bf       	out	0x3d, r28	; 61
    6010:	9a 83       	std	Y+2, r25	; 0x02
    6012:	89 83       	std	Y+1, r24	; 0x01
    6014:	7c 83       	std	Y+4, r23	; 0x04
    6016:	6b 83       	std	Y+3, r22	; 0x03
    6018:	5e 83       	std	Y+6, r21	; 0x06
    601a:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL || b == NULL)
    601c:	89 81       	ldd	r24, Y+1	; 0x01
    601e:	9a 81       	ldd	r25, Y+2	; 0x02
    6020:	00 97       	sbiw	r24, 0x00	; 0
    6022:	21 f0       	breq	.+8      	; 0x602c <vdmXorGC+0x30>
    6024:	8b 81       	ldd	r24, Y+3	; 0x03
    6026:	9c 81       	ldd	r25, Y+4	; 0x04
    6028:	00 97       	sbiw	r24, 0x00	; 0
    602a:	19 f4       	brne	.+6      	; 0x6032 <vdmXorGC+0x36>
		return NULL;
    602c:	1a 86       	std	Y+10, r1	; 0x0a
    602e:	19 86       	std	Y+9, r1	; 0x09
    6030:	3d c0       	rjmp	.+122    	; 0x60ac <vdmXorGC+0xb0>

	ASSERT_CHECK_BOOL(a);
    6032:	e9 81       	ldd	r30, Y+1	; 0x01
    6034:	fa 81       	ldd	r31, Y+2	; 0x02
    6036:	80 81       	ld	r24, Z
    6038:	91 81       	ldd	r25, Z+1	; 0x01
    603a:	83 30       	cpi	r24, 0x03	; 3
    603c:	91 05       	cpc	r25, r1
    603e:	11 f0       	breq	.+4      	; 0x6044 <vdmXorGC+0x48>
    6040:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_BOOL(b);
    6044:	eb 81       	ldd	r30, Y+3	; 0x03
    6046:	fc 81       	ldd	r31, Y+4	; 0x04
    6048:	80 81       	ld	r24, Z
    604a:	91 81       	ldd	r25, Z+1	; 0x01
    604c:	83 30       	cpi	r24, 0x03	; 3
    604e:	91 05       	cpc	r25, r1
    6050:	11 f0       	breq	.+4      	; 0x6056 <vdmXorGC+0x5a>
    6052:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBoolGC((!(a->value.boolVal) && b->value.boolVal) || ((a->value.boolVal) && !(b->value.boolVal)), from);
    6056:	e9 81       	ldd	r30, Y+1	; 0x01
    6058:	fa 81       	ldd	r31, Y+2	; 0x02
    605a:	94 81       	ldd	r25, Z+4	; 0x04
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	98 27       	eor	r25, r24
    6060:	81 e0       	ldi	r24, 0x01	; 1
    6062:	89 27       	eor	r24, r25
    6064:	88 23       	and	r24, r24
    6066:	29 f4       	brne	.+10     	; 0x6072 <vdmXorGC+0x76>
    6068:	eb 81       	ldd	r30, Y+3	; 0x03
    606a:	fc 81       	ldd	r31, Y+4	; 0x04
    606c:	84 81       	ldd	r24, Z+4	; 0x04
    606e:	88 23       	and	r24, r24
    6070:	71 f4       	brne	.+28     	; 0x608e <vdmXorGC+0x92>
    6072:	e9 81       	ldd	r30, Y+1	; 0x01
    6074:	fa 81       	ldd	r31, Y+2	; 0x02
    6076:	94 81       	ldd	r25, Z+4	; 0x04
    6078:	81 e0       	ldi	r24, 0x01	; 1
    607a:	89 27       	eor	r24, r25
    607c:	88 23       	and	r24, r24
    607e:	61 f4       	brne	.+24     	; 0x6098 <vdmXorGC+0x9c>
    6080:	eb 81       	ldd	r30, Y+3	; 0x03
    6082:	fc 81       	ldd	r31, Y+4	; 0x04
    6084:	94 81       	ldd	r25, Z+4	; 0x04
    6086:	81 e0       	ldi	r24, 0x01	; 1
    6088:	89 27       	eor	r24, r25
    608a:	88 23       	and	r24, r24
    608c:	29 f0       	breq	.+10     	; 0x6098 <vdmXorGC+0x9c>
    608e:	81 e0       	ldi	r24, 0x01	; 1
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	98 87       	std	Y+8, r25	; 0x08
    6094:	8f 83       	std	Y+7, r24	; 0x07
    6096:	02 c0       	rjmp	.+4      	; 0x609c <vdmXorGC+0xa0>
    6098:	18 86       	std	Y+8, r1	; 0x08
    609a:	1f 82       	std	Y+7, r1	; 0x07
    609c:	8f 81       	ldd	r24, Y+7	; 0x07
    609e:	2d 81       	ldd	r18, Y+5	; 0x05
    60a0:	3e 81       	ldd	r19, Y+6	; 0x06
    60a2:	b9 01       	movw	r22, r18
    60a4:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    60a8:	9a 87       	std	Y+10, r25	; 0x0a
    60aa:	89 87       	std	Y+9, r24	; 0x09
    60ac:	89 85       	ldd	r24, Y+9	; 0x09
    60ae:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    60b0:	2a 96       	adiw	r28, 0x0a	; 10
    60b2:	0f b6       	in	r0, 0x3f	; 63
    60b4:	f8 94       	cli
    60b6:	de bf       	out	0x3e, r29	; 62
    60b8:	0f be       	out	0x3f, r0	; 63
    60ba:	cd bf       	out	0x3d, r28	; 61
    60bc:	cf 91       	pop	r28
    60be:	df 91       	pop	r29
    60c0:	08 95       	ret

000060c2 <vdmImplies>:

TVP vdmImplies(TVP a,TVP b)
{
    60c2:	df 93       	push	r29
    60c4:	cf 93       	push	r28
    60c6:	00 d0       	rcall	.+0      	; 0x60c8 <vdmImplies+0x6>
    60c8:	00 d0       	rcall	.+0      	; 0x60ca <vdmImplies+0x8>
    60ca:	00 d0       	rcall	.+0      	; 0x60cc <vdmImplies+0xa>
    60cc:	cd b7       	in	r28, 0x3d	; 61
    60ce:	de b7       	in	r29, 0x3e	; 62
    60d0:	9a 83       	std	Y+2, r25	; 0x02
    60d2:	89 83       	std	Y+1, r24	; 0x01
    60d4:	7c 83       	std	Y+4, r23	; 0x04
    60d6:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL)
    60d8:	89 81       	ldd	r24, Y+1	; 0x01
    60da:	9a 81       	ldd	r25, Y+2	; 0x02
    60dc:	00 97       	sbiw	r24, 0x00	; 0
    60de:	19 f4       	brne	.+6      	; 0x60e6 <vdmImplies+0x24>
		return NULL;
    60e0:	1e 82       	std	Y+6, r1	; 0x06
    60e2:	1d 82       	std	Y+5, r1	; 0x05
    60e4:	2d c0       	rjmp	.+90     	; 0x6140 <vdmImplies+0x7e>

	ASSERT_CHECK_BOOL(a);
    60e6:	e9 81       	ldd	r30, Y+1	; 0x01
    60e8:	fa 81       	ldd	r31, Y+2	; 0x02
    60ea:	80 81       	ld	r24, Z
    60ec:	91 81       	ldd	r25, Z+1	; 0x01
    60ee:	83 30       	cpi	r24, 0x03	; 3
    60f0:	91 05       	cpc	r25, r1
    60f2:	11 f0       	breq	.+4      	; 0x60f8 <vdmImplies+0x36>
    60f4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	if(!a->value.boolVal)
    60f8:	e9 81       	ldd	r30, Y+1	; 0x01
    60fa:	fa 81       	ldd	r31, Y+2	; 0x02
    60fc:	94 81       	ldd	r25, Z+4	; 0x04
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	89 27       	eor	r24, r25
    6102:	88 23       	and	r24, r24
    6104:	31 f0       	breq	.+12     	; 0x6112 <vdmImplies+0x50>
		return newBool(true);
    6106:	81 e0       	ldi	r24, 0x01	; 1
    6108:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    610c:	9e 83       	std	Y+6, r25	; 0x06
    610e:	8d 83       	std	Y+5, r24	; 0x05
    6110:	17 c0       	rjmp	.+46     	; 0x6140 <vdmImplies+0x7e>

	if(b == NULL)
    6112:	8b 81       	ldd	r24, Y+3	; 0x03
    6114:	9c 81       	ldd	r25, Y+4	; 0x04
    6116:	00 97       	sbiw	r24, 0x00	; 0
    6118:	19 f4       	brne	.+6      	; 0x6120 <vdmImplies+0x5e>
		return NULL;
    611a:	1e 82       	std	Y+6, r1	; 0x06
    611c:	1d 82       	std	Y+5, r1	; 0x05
    611e:	10 c0       	rjmp	.+32     	; 0x6140 <vdmImplies+0x7e>

	ASSERT_CHECK_BOOL(b);
    6120:	eb 81       	ldd	r30, Y+3	; 0x03
    6122:	fc 81       	ldd	r31, Y+4	; 0x04
    6124:	80 81       	ld	r24, Z
    6126:	91 81       	ldd	r25, Z+1	; 0x01
    6128:	83 30       	cpi	r24, 0x03	; 3
    612a:	91 05       	cpc	r25, r1
    612c:	11 f0       	breq	.+4      	; 0x6132 <vdmImplies+0x70>
    612e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBool(b->value.boolVal);
    6132:	eb 81       	ldd	r30, Y+3	; 0x03
    6134:	fc 81       	ldd	r31, Y+4	; 0x04
    6136:	84 81       	ldd	r24, Z+4	; 0x04
    6138:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    613c:	9e 83       	std	Y+6, r25	; 0x06
    613e:	8d 83       	std	Y+5, r24	; 0x05
    6140:	8d 81       	ldd	r24, Y+5	; 0x05
    6142:	9e 81       	ldd	r25, Y+6	; 0x06
}
    6144:	26 96       	adiw	r28, 0x06	; 6
    6146:	0f b6       	in	r0, 0x3f	; 63
    6148:	f8 94       	cli
    614a:	de bf       	out	0x3e, r29	; 62
    614c:	0f be       	out	0x3f, r0	; 63
    614e:	cd bf       	out	0x3d, r28	; 61
    6150:	cf 91       	pop	r28
    6152:	df 91       	pop	r29
    6154:	08 95       	ret

00006156 <vdmImpliesGC>:

TVP vdmImpliesGC(TVP a, TVP b, TVP *from)
{
    6156:	df 93       	push	r29
    6158:	cf 93       	push	r28
    615a:	cd b7       	in	r28, 0x3d	; 61
    615c:	de b7       	in	r29, 0x3e	; 62
    615e:	28 97       	sbiw	r28, 0x08	; 8
    6160:	0f b6       	in	r0, 0x3f	; 63
    6162:	f8 94       	cli
    6164:	de bf       	out	0x3e, r29	; 62
    6166:	0f be       	out	0x3f, r0	; 63
    6168:	cd bf       	out	0x3d, r28	; 61
    616a:	9a 83       	std	Y+2, r25	; 0x02
    616c:	89 83       	std	Y+1, r24	; 0x01
    616e:	7c 83       	std	Y+4, r23	; 0x04
    6170:	6b 83       	std	Y+3, r22	; 0x03
    6172:	5e 83       	std	Y+6, r21	; 0x06
    6174:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL)
    6176:	89 81       	ldd	r24, Y+1	; 0x01
    6178:	9a 81       	ldd	r25, Y+2	; 0x02
    617a:	00 97       	sbiw	r24, 0x00	; 0
    617c:	19 f4       	brne	.+6      	; 0x6184 <vdmImpliesGC+0x2e>
		return NULL;
    617e:	18 86       	std	Y+8, r1	; 0x08
    6180:	1f 82       	std	Y+7, r1	; 0x07
    6182:	33 c0       	rjmp	.+102    	; 0x61ea <vdmImpliesGC+0x94>

	ASSERT_CHECK_BOOL(a);
    6184:	e9 81       	ldd	r30, Y+1	; 0x01
    6186:	fa 81       	ldd	r31, Y+2	; 0x02
    6188:	80 81       	ld	r24, Z
    618a:	91 81       	ldd	r25, Z+1	; 0x01
    618c:	83 30       	cpi	r24, 0x03	; 3
    618e:	91 05       	cpc	r25, r1
    6190:	11 f0       	breq	.+4      	; 0x6196 <vdmImpliesGC+0x40>
    6192:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	if(!a->value.boolVal)
    6196:	e9 81       	ldd	r30, Y+1	; 0x01
    6198:	fa 81       	ldd	r31, Y+2	; 0x02
    619a:	94 81       	ldd	r25, Z+4	; 0x04
    619c:	81 e0       	ldi	r24, 0x01	; 1
    619e:	89 27       	eor	r24, r25
    61a0:	88 23       	and	r24, r24
    61a2:	49 f0       	breq	.+18     	; 0x61b6 <vdmImpliesGC+0x60>
		return newBoolGC(true, from);
    61a4:	2d 81       	ldd	r18, Y+5	; 0x05
    61a6:	3e 81       	ldd	r19, Y+6	; 0x06
    61a8:	81 e0       	ldi	r24, 0x01	; 1
    61aa:	b9 01       	movw	r22, r18
    61ac:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    61b0:	98 87       	std	Y+8, r25	; 0x08
    61b2:	8f 83       	std	Y+7, r24	; 0x07
    61b4:	1a c0       	rjmp	.+52     	; 0x61ea <vdmImpliesGC+0x94>

	if(b == NULL)
    61b6:	8b 81       	ldd	r24, Y+3	; 0x03
    61b8:	9c 81       	ldd	r25, Y+4	; 0x04
    61ba:	00 97       	sbiw	r24, 0x00	; 0
    61bc:	19 f4       	brne	.+6      	; 0x61c4 <vdmImpliesGC+0x6e>
		return NULL;
    61be:	18 86       	std	Y+8, r1	; 0x08
    61c0:	1f 82       	std	Y+7, r1	; 0x07
    61c2:	13 c0       	rjmp	.+38     	; 0x61ea <vdmImpliesGC+0x94>

	ASSERT_CHECK_BOOL(b);
    61c4:	eb 81       	ldd	r30, Y+3	; 0x03
    61c6:	fc 81       	ldd	r31, Y+4	; 0x04
    61c8:	80 81       	ld	r24, Z
    61ca:	91 81       	ldd	r25, Z+1	; 0x01
    61cc:	83 30       	cpi	r24, 0x03	; 3
    61ce:	91 05       	cpc	r25, r1
    61d0:	11 f0       	breq	.+4      	; 0x61d6 <vdmImpliesGC+0x80>
    61d2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBoolGC(b->value.boolVal, from);
    61d6:	eb 81       	ldd	r30, Y+3	; 0x03
    61d8:	fc 81       	ldd	r31, Y+4	; 0x04
    61da:	84 81       	ldd	r24, Z+4	; 0x04
    61dc:	2d 81       	ldd	r18, Y+5	; 0x05
    61de:	3e 81       	ldd	r19, Y+6	; 0x06
    61e0:	b9 01       	movw	r22, r18
    61e2:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    61e6:	98 87       	std	Y+8, r25	; 0x08
    61e8:	8f 83       	std	Y+7, r24	; 0x07
    61ea:	8f 81       	ldd	r24, Y+7	; 0x07
    61ec:	98 85       	ldd	r25, Y+8	; 0x08
}
    61ee:	28 96       	adiw	r28, 0x08	; 8
    61f0:	0f b6       	in	r0, 0x3f	; 63
    61f2:	f8 94       	cli
    61f4:	de bf       	out	0x3e, r29	; 62
    61f6:	0f be       	out	0x3f, r0	; 63
    61f8:	cd bf       	out	0x3d, r28	; 61
    61fa:	cf 91       	pop	r28
    61fc:	df 91       	pop	r29
    61fe:	08 95       	ret

00006200 <vdmBiimplication>:

TVP vdmBiimplication(TVP a,TVP b)
{
    6200:	df 93       	push	r29
    6202:	cf 93       	push	r28
    6204:	cd b7       	in	r28, 0x3d	; 61
    6206:	de b7       	in	r29, 0x3e	; 62
    6208:	28 97       	sbiw	r28, 0x08	; 8
    620a:	0f b6       	in	r0, 0x3f	; 63
    620c:	f8 94       	cli
    620e:	de bf       	out	0x3e, r29	; 62
    6210:	0f be       	out	0x3f, r0	; 63
    6212:	cd bf       	out	0x3d, r28	; 61
    6214:	9a 83       	std	Y+2, r25	; 0x02
    6216:	89 83       	std	Y+1, r24	; 0x01
    6218:	7c 83       	std	Y+4, r23	; 0x04
    621a:	6b 83       	std	Y+3, r22	; 0x03
	if(a == NULL || b == NULL)
    621c:	89 81       	ldd	r24, Y+1	; 0x01
    621e:	9a 81       	ldd	r25, Y+2	; 0x02
    6220:	00 97       	sbiw	r24, 0x00	; 0
    6222:	21 f0       	breq	.+8      	; 0x622c <vdmBiimplication+0x2c>
    6224:	8b 81       	ldd	r24, Y+3	; 0x03
    6226:	9c 81       	ldd	r25, Y+4	; 0x04
    6228:	00 97       	sbiw	r24, 0x00	; 0
    622a:	19 f4       	brne	.+6      	; 0x6232 <vdmBiimplication+0x32>
		return NULL;
    622c:	18 86       	std	Y+8, r1	; 0x08
    622e:	1f 82       	std	Y+7, r1	; 0x07
    6230:	36 c0       	rjmp	.+108    	; 0x629e <vdmBiimplication+0x9e>

	ASSERT_CHECK_BOOL(a);
    6232:	e9 81       	ldd	r30, Y+1	; 0x01
    6234:	fa 81       	ldd	r31, Y+2	; 0x02
    6236:	80 81       	ld	r24, Z
    6238:	91 81       	ldd	r25, Z+1	; 0x01
    623a:	83 30       	cpi	r24, 0x03	; 3
    623c:	91 05       	cpc	r25, r1
    623e:	11 f0       	breq	.+4      	; 0x6244 <vdmBiimplication+0x44>
    6240:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_BOOL(b);
    6244:	eb 81       	ldd	r30, Y+3	; 0x03
    6246:	fc 81       	ldd	r31, Y+4	; 0x04
    6248:	80 81       	ld	r24, Z
    624a:	91 81       	ldd	r25, Z+1	; 0x01
    624c:	83 30       	cpi	r24, 0x03	; 3
    624e:	91 05       	cpc	r25, r1
    6250:	11 f0       	breq	.+4      	; 0x6256 <vdmBiimplication+0x56>
    6252:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBool((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal));
    6256:	e9 81       	ldd	r30, Y+1	; 0x01
    6258:	fa 81       	ldd	r31, Y+2	; 0x02
    625a:	94 81       	ldd	r25, Z+4	; 0x04
    625c:	81 e0       	ldi	r24, 0x01	; 1
    625e:	89 27       	eor	r24, r25
    6260:	88 23       	and	r24, r24
    6262:	29 f4       	brne	.+10     	; 0x626e <vdmBiimplication+0x6e>
    6264:	eb 81       	ldd	r30, Y+3	; 0x03
    6266:	fc 81       	ldd	r31, Y+4	; 0x04
    6268:	84 81       	ldd	r24, Z+4	; 0x04
    626a:	88 23       	and	r24, r24
    626c:	89 f0       	breq	.+34     	; 0x6290 <vdmBiimplication+0x90>
    626e:	eb 81       	ldd	r30, Y+3	; 0x03
    6270:	fc 81       	ldd	r31, Y+4	; 0x04
    6272:	94 81       	ldd	r25, Z+4	; 0x04
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	89 27       	eor	r24, r25
    6278:	88 23       	and	r24, r24
    627a:	29 f4       	brne	.+10     	; 0x6286 <vdmBiimplication+0x86>
    627c:	e9 81       	ldd	r30, Y+1	; 0x01
    627e:	fa 81       	ldd	r31, Y+2	; 0x02
    6280:	84 81       	ldd	r24, Z+4	; 0x04
    6282:	88 23       	and	r24, r24
    6284:	29 f0       	breq	.+10     	; 0x6290 <vdmBiimplication+0x90>
    6286:	81 e0       	ldi	r24, 0x01	; 1
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	9e 83       	std	Y+6, r25	; 0x06
    628c:	8d 83       	std	Y+5, r24	; 0x05
    628e:	02 c0       	rjmp	.+4      	; 0x6294 <vdmBiimplication+0x94>
    6290:	1e 82       	std	Y+6, r1	; 0x06
    6292:	1d 82       	std	Y+5, r1	; 0x05
    6294:	8d 81       	ldd	r24, Y+5	; 0x05
    6296:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    629a:	98 87       	std	Y+8, r25	; 0x08
    629c:	8f 83       	std	Y+7, r24	; 0x07
    629e:	8f 81       	ldd	r24, Y+7	; 0x07
    62a0:	98 85       	ldd	r25, Y+8	; 0x08
}
    62a2:	28 96       	adiw	r28, 0x08	; 8
    62a4:	0f b6       	in	r0, 0x3f	; 63
    62a6:	f8 94       	cli
    62a8:	de bf       	out	0x3e, r29	; 62
    62aa:	0f be       	out	0x3f, r0	; 63
    62ac:	cd bf       	out	0x3d, r28	; 61
    62ae:	cf 91       	pop	r28
    62b0:	df 91       	pop	r29
    62b2:	08 95       	ret

000062b4 <vdmBiimplicationGC>:

TVP vdmBiimplicationGC(TVP a, TVP b, TVP *from)
{
    62b4:	df 93       	push	r29
    62b6:	cf 93       	push	r28
    62b8:	cd b7       	in	r28, 0x3d	; 61
    62ba:	de b7       	in	r29, 0x3e	; 62
    62bc:	2a 97       	sbiw	r28, 0x0a	; 10
    62be:	0f b6       	in	r0, 0x3f	; 63
    62c0:	f8 94       	cli
    62c2:	de bf       	out	0x3e, r29	; 62
    62c4:	0f be       	out	0x3f, r0	; 63
    62c6:	cd bf       	out	0x3d, r28	; 61
    62c8:	9a 83       	std	Y+2, r25	; 0x02
    62ca:	89 83       	std	Y+1, r24	; 0x01
    62cc:	7c 83       	std	Y+4, r23	; 0x04
    62ce:	6b 83       	std	Y+3, r22	; 0x03
    62d0:	5e 83       	std	Y+6, r21	; 0x06
    62d2:	4d 83       	std	Y+5, r20	; 0x05
	if(a == NULL || b == NULL)
    62d4:	89 81       	ldd	r24, Y+1	; 0x01
    62d6:	9a 81       	ldd	r25, Y+2	; 0x02
    62d8:	00 97       	sbiw	r24, 0x00	; 0
    62da:	21 f0       	breq	.+8      	; 0x62e4 <vdmBiimplicationGC+0x30>
    62dc:	8b 81       	ldd	r24, Y+3	; 0x03
    62de:	9c 81       	ldd	r25, Y+4	; 0x04
    62e0:	00 97       	sbiw	r24, 0x00	; 0
    62e2:	19 f4       	brne	.+6      	; 0x62ea <vdmBiimplicationGC+0x36>
		return NULL;
    62e4:	1a 86       	std	Y+10, r1	; 0x0a
    62e6:	19 86       	std	Y+9, r1	; 0x09
    62e8:	39 c0       	rjmp	.+114    	; 0x635c <vdmBiimplicationGC+0xa8>

	ASSERT_CHECK_BOOL(a);
    62ea:	e9 81       	ldd	r30, Y+1	; 0x01
    62ec:	fa 81       	ldd	r31, Y+2	; 0x02
    62ee:	80 81       	ld	r24, Z
    62f0:	91 81       	ldd	r25, Z+1	; 0x01
    62f2:	83 30       	cpi	r24, 0x03	; 3
    62f4:	91 05       	cpc	r25, r1
    62f6:	11 f0       	breq	.+4      	; 0x62fc <vdmBiimplicationGC+0x48>
    62f8:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_BOOL(b);
    62fc:	eb 81       	ldd	r30, Y+3	; 0x03
    62fe:	fc 81       	ldd	r31, Y+4	; 0x04
    6300:	80 81       	ld	r24, Z
    6302:	91 81       	ldd	r25, Z+1	; 0x01
    6304:	83 30       	cpi	r24, 0x03	; 3
    6306:	91 05       	cpc	r25, r1
    6308:	11 f0       	breq	.+4      	; 0x630e <vdmBiimplicationGC+0x5a>
    630a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return newBoolGC((!a->value.boolVal || b->value.boolVal) && (!b->value.boolVal || a->value.boolVal), from);
    630e:	e9 81       	ldd	r30, Y+1	; 0x01
    6310:	fa 81       	ldd	r31, Y+2	; 0x02
    6312:	94 81       	ldd	r25, Z+4	; 0x04
    6314:	81 e0       	ldi	r24, 0x01	; 1
    6316:	89 27       	eor	r24, r25
    6318:	88 23       	and	r24, r24
    631a:	29 f4       	brne	.+10     	; 0x6326 <vdmBiimplicationGC+0x72>
    631c:	eb 81       	ldd	r30, Y+3	; 0x03
    631e:	fc 81       	ldd	r31, Y+4	; 0x04
    6320:	84 81       	ldd	r24, Z+4	; 0x04
    6322:	88 23       	and	r24, r24
    6324:	89 f0       	breq	.+34     	; 0x6348 <vdmBiimplicationGC+0x94>
    6326:	eb 81       	ldd	r30, Y+3	; 0x03
    6328:	fc 81       	ldd	r31, Y+4	; 0x04
    632a:	94 81       	ldd	r25, Z+4	; 0x04
    632c:	81 e0       	ldi	r24, 0x01	; 1
    632e:	89 27       	eor	r24, r25
    6330:	88 23       	and	r24, r24
    6332:	29 f4       	brne	.+10     	; 0x633e <vdmBiimplicationGC+0x8a>
    6334:	e9 81       	ldd	r30, Y+1	; 0x01
    6336:	fa 81       	ldd	r31, Y+2	; 0x02
    6338:	84 81       	ldd	r24, Z+4	; 0x04
    633a:	88 23       	and	r24, r24
    633c:	29 f0       	breq	.+10     	; 0x6348 <vdmBiimplicationGC+0x94>
    633e:	81 e0       	ldi	r24, 0x01	; 1
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	98 87       	std	Y+8, r25	; 0x08
    6344:	8f 83       	std	Y+7, r24	; 0x07
    6346:	02 c0       	rjmp	.+4      	; 0x634c <vdmBiimplicationGC+0x98>
    6348:	18 86       	std	Y+8, r1	; 0x08
    634a:	1f 82       	std	Y+7, r1	; 0x07
    634c:	8f 81       	ldd	r24, Y+7	; 0x07
    634e:	2d 81       	ldd	r18, Y+5	; 0x05
    6350:	3e 81       	ldd	r19, Y+6	; 0x06
    6352:	b9 01       	movw	r22, r18
    6354:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    6358:	9a 87       	std	Y+10, r25	; 0x0a
    635a:	89 87       	std	Y+9, r24	; 0x09
    635c:	89 85       	ldd	r24, Y+9	; 0x09
    635e:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    6360:	2a 96       	adiw	r28, 0x0a	; 10
    6362:	0f b6       	in	r0, 0x3f	; 63
    6364:	f8 94       	cli
    6366:	de bf       	out	0x3e, r29	; 62
    6368:	0f be       	out	0x3f, r0	; 63
    636a:	cd bf       	out	0x3d, r28	; 61
    636c:	cf 91       	pop	r28
    636e:	df 91       	pop	r29
    6370:	08 95       	ret

00006372 <isNumber>:

bool isNumber(TVP val)
{
    6372:	df 93       	push	r29
    6374:	cf 93       	push	r28
    6376:	00 d0       	rcall	.+0      	; 0x6378 <isNumber+0x6>
    6378:	00 d0       	rcall	.+0      	; 0x637a <isNumber+0x8>
    637a:	0f 92       	push	r0
    637c:	cd b7       	in	r28, 0x3d	; 61
    637e:	de b7       	in	r29, 0x3e	; 62
    6380:	9a 83       	std	Y+2, r25	; 0x02
    6382:	89 83       	std	Y+1, r24	; 0x01
	switch(val->type)
    6384:	e9 81       	ldd	r30, Y+1	; 0x01
    6386:	fa 81       	ldd	r31, Y+2	; 0x02
    6388:	80 81       	ld	r24, Z
    638a:	91 81       	ldd	r25, Z+1	; 0x01
    638c:	9d 83       	std	Y+5, r25	; 0x05
    638e:	8c 83       	std	Y+4, r24	; 0x04
    6390:	8c 81       	ldd	r24, Y+4	; 0x04
    6392:	9d 81       	ldd	r25, Y+5	; 0x05
    6394:	83 30       	cpi	r24, 0x03	; 3
    6396:	91 05       	cpc	r25, r1
    6398:	30 f0       	brcs	.+12     	; 0x63a6 <isNumber+0x34>
    639a:	8c 81       	ldd	r24, Y+4	; 0x04
    639c:	9d 81       	ldd	r25, Y+5	; 0x05
    639e:	04 97       	sbiw	r24, 0x04	; 4
    63a0:	82 30       	cpi	r24, 0x02	; 2
    63a2:	91 05       	cpc	r25, r1
    63a4:	18 f4       	brcc	.+6      	; 0x63ac <isNumber+0x3a>
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
	case VDM_REAL:
	case VDM_RAT:
		return true;
    63a6:	91 e0       	ldi	r25, 0x01	; 1
    63a8:	9b 83       	std	Y+3, r25	; 0x03
    63aa:	01 c0       	rjmp	.+2      	; 0x63ae <isNumber+0x3c>
	default:
		return false;
    63ac:	1b 82       	std	Y+3, r1	; 0x03
    63ae:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    63b0:	0f 90       	pop	r0
    63b2:	0f 90       	pop	r0
    63b4:	0f 90       	pop	r0
    63b6:	0f 90       	pop	r0
    63b8:	0f 90       	pop	r0
    63ba:	cf 91       	pop	r28
    63bc:	df 91       	pop	r29
    63be:	08 95       	ret

000063c0 <isInt>:

TVP isInt(TVP v)
{
    63c0:	df 93       	push	r29
    63c2:	cf 93       	push	r28
    63c4:	00 d0       	rcall	.+0      	; 0x63c6 <isInt+0x6>
    63c6:	00 d0       	rcall	.+0      	; 0x63c8 <isInt+0x8>
    63c8:	cd b7       	in	r28, 0x3d	; 61
    63ca:	de b7       	in	r29, 0x3e	; 62
    63cc:	9a 83       	std	Y+2, r25	; 0x02
    63ce:	89 83       	std	Y+1, r24	; 0x01
	if(v->type == VDM_INT)
    63d0:	e9 81       	ldd	r30, Y+1	; 0x01
    63d2:	fa 81       	ldd	r31, Y+2	; 0x02
    63d4:	80 81       	ld	r24, Z
    63d6:	91 81       	ldd	r25, Z+1	; 0x01
    63d8:	00 97       	sbiw	r24, 0x00	; 0
    63da:	31 f4       	brne	.+12     	; 0x63e8 <isInt+0x28>
		return newBool(true);
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    63e2:	9c 83       	std	Y+4, r25	; 0x04
    63e4:	8b 83       	std	Y+3, r24	; 0x03
    63e6:	05 c0       	rjmp	.+10     	; 0x63f2 <isInt+0x32>
	return newBool(false);
    63e8:	80 e0       	ldi	r24, 0x00	; 0
    63ea:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    63ee:	9c 83       	std	Y+4, r25	; 0x04
    63f0:	8b 83       	std	Y+3, r24	; 0x03
    63f2:	8b 81       	ldd	r24, Y+3	; 0x03
    63f4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    63f6:	0f 90       	pop	r0
    63f8:	0f 90       	pop	r0
    63fa:	0f 90       	pop	r0
    63fc:	0f 90       	pop	r0
    63fe:	cf 91       	pop	r28
    6400:	df 91       	pop	r29
    6402:	08 95       	ret

00006404 <isIntGC>:

TVP isIntGC(TVP v, TVP *from)
{
    6404:	df 93       	push	r29
    6406:	cf 93       	push	r28
    6408:	00 d0       	rcall	.+0      	; 0x640a <isIntGC+0x6>
    640a:	00 d0       	rcall	.+0      	; 0x640c <isIntGC+0x8>
    640c:	00 d0       	rcall	.+0      	; 0x640e <isIntGC+0xa>
    640e:	cd b7       	in	r28, 0x3d	; 61
    6410:	de b7       	in	r29, 0x3e	; 62
    6412:	9a 83       	std	Y+2, r25	; 0x02
    6414:	89 83       	std	Y+1, r24	; 0x01
    6416:	7c 83       	std	Y+4, r23	; 0x04
    6418:	6b 83       	std	Y+3, r22	; 0x03
	if(v->type == VDM_INT)
    641a:	e9 81       	ldd	r30, Y+1	; 0x01
    641c:	fa 81       	ldd	r31, Y+2	; 0x02
    641e:	80 81       	ld	r24, Z
    6420:	91 81       	ldd	r25, Z+1	; 0x01
    6422:	00 97       	sbiw	r24, 0x00	; 0
    6424:	49 f4       	brne	.+18     	; 0x6438 <isIntGC+0x34>
		return newBoolGC(true, from);
    6426:	2b 81       	ldd	r18, Y+3	; 0x03
    6428:	3c 81       	ldd	r19, Y+4	; 0x04
    642a:	81 e0       	ldi	r24, 0x01	; 1
    642c:	b9 01       	movw	r22, r18
    642e:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    6432:	9e 83       	std	Y+6, r25	; 0x06
    6434:	8d 83       	std	Y+5, r24	; 0x05
    6436:	08 c0       	rjmp	.+16     	; 0x6448 <isIntGC+0x44>
	return newBoolGC(false, from);
    6438:	2b 81       	ldd	r18, Y+3	; 0x03
    643a:	3c 81       	ldd	r19, Y+4	; 0x04
    643c:	80 e0       	ldi	r24, 0x00	; 0
    643e:	b9 01       	movw	r22, r18
    6440:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    6444:	9e 83       	std	Y+6, r25	; 0x06
    6446:	8d 83       	std	Y+5, r24	; 0x05
    6448:	8d 81       	ldd	r24, Y+5	; 0x05
    644a:	9e 81       	ldd	r25, Y+6	; 0x06
}
    644c:	26 96       	adiw	r28, 0x06	; 6
    644e:	0f b6       	in	r0, 0x3f	; 63
    6450:	f8 94       	cli
    6452:	de bf       	out	0x3e, r29	; 62
    6454:	0f be       	out	0x3f, r0	; 63
    6456:	cd bf       	out	0x3d, r28	; 61
    6458:	cf 91       	pop	r28
    645a:	df 91       	pop	r29
    645c:	08 95       	ret

0000645e <isReal>:

TVP isReal(TVP v)
{
    645e:	df 93       	push	r29
    6460:	cf 93       	push	r28
    6462:	00 d0       	rcall	.+0      	; 0x6464 <isReal+0x6>
    6464:	00 d0       	rcall	.+0      	; 0x6466 <isReal+0x8>
    6466:	cd b7       	in	r28, 0x3d	; 61
    6468:	de b7       	in	r29, 0x3e	; 62
    646a:	9a 83       	std	Y+2, r25	; 0x02
    646c:	89 83       	std	Y+1, r24	; 0x01
	if(v->type == VDM_REAL)
    646e:	e9 81       	ldd	r30, Y+1	; 0x01
    6470:	fa 81       	ldd	r31, Y+2	; 0x02
    6472:	80 81       	ld	r24, Z
    6474:	91 81       	ldd	r25, Z+1	; 0x01
    6476:	84 30       	cpi	r24, 0x04	; 4
    6478:	91 05       	cpc	r25, r1
    647a:	31 f4       	brne	.+12     	; 0x6488 <isReal+0x2a>
		return newBool(true);
    647c:	81 e0       	ldi	r24, 0x01	; 1
    647e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    6482:	9c 83       	std	Y+4, r25	; 0x04
    6484:	8b 83       	std	Y+3, r24	; 0x03
    6486:	05 c0       	rjmp	.+10     	; 0x6492 <isReal+0x34>
	return newBool(false);
    6488:	80 e0       	ldi	r24, 0x00	; 0
    648a:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    648e:	9c 83       	std	Y+4, r25	; 0x04
    6490:	8b 83       	std	Y+3, r24	; 0x03
    6492:	8b 81       	ldd	r24, Y+3	; 0x03
    6494:	9c 81       	ldd	r25, Y+4	; 0x04
}
    6496:	0f 90       	pop	r0
    6498:	0f 90       	pop	r0
    649a:	0f 90       	pop	r0
    649c:	0f 90       	pop	r0
    649e:	cf 91       	pop	r28
    64a0:	df 91       	pop	r29
    64a2:	08 95       	ret

000064a4 <isRealGC>:

TVP isRealGC(TVP v, TVP *from)
{
    64a4:	df 93       	push	r29
    64a6:	cf 93       	push	r28
    64a8:	00 d0       	rcall	.+0      	; 0x64aa <isRealGC+0x6>
    64aa:	00 d0       	rcall	.+0      	; 0x64ac <isRealGC+0x8>
    64ac:	00 d0       	rcall	.+0      	; 0x64ae <isRealGC+0xa>
    64ae:	cd b7       	in	r28, 0x3d	; 61
    64b0:	de b7       	in	r29, 0x3e	; 62
    64b2:	9a 83       	std	Y+2, r25	; 0x02
    64b4:	89 83       	std	Y+1, r24	; 0x01
    64b6:	7c 83       	std	Y+4, r23	; 0x04
    64b8:	6b 83       	std	Y+3, r22	; 0x03
	if(v->type == VDM_REAL)
    64ba:	e9 81       	ldd	r30, Y+1	; 0x01
    64bc:	fa 81       	ldd	r31, Y+2	; 0x02
    64be:	80 81       	ld	r24, Z
    64c0:	91 81       	ldd	r25, Z+1	; 0x01
    64c2:	84 30       	cpi	r24, 0x04	; 4
    64c4:	91 05       	cpc	r25, r1
    64c6:	49 f4       	brne	.+18     	; 0x64da <isRealGC+0x36>
		return newBoolGC(true, from);
    64c8:	2b 81       	ldd	r18, Y+3	; 0x03
    64ca:	3c 81       	ldd	r19, Y+4	; 0x04
    64cc:	81 e0       	ldi	r24, 0x01	; 1
    64ce:	b9 01       	movw	r22, r18
    64d0:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    64d4:	9e 83       	std	Y+6, r25	; 0x06
    64d6:	8d 83       	std	Y+5, r24	; 0x05
    64d8:	08 c0       	rjmp	.+16     	; 0x64ea <isRealGC+0x46>
	return newBoolGC(false, from);
    64da:	2b 81       	ldd	r18, Y+3	; 0x03
    64dc:	3c 81       	ldd	r19, Y+4	; 0x04
    64de:	80 e0       	ldi	r24, 0x00	; 0
    64e0:	b9 01       	movw	r22, r18
    64e2:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    64e6:	9e 83       	std	Y+6, r25	; 0x06
    64e8:	8d 83       	std	Y+5, r24	; 0x05
    64ea:	8d 81       	ldd	r24, Y+5	; 0x05
    64ec:	9e 81       	ldd	r25, Y+6	; 0x06
}
    64ee:	26 96       	adiw	r28, 0x06	; 6
    64f0:	0f b6       	in	r0, 0x3f	; 63
    64f2:	f8 94       	cli
    64f4:	de bf       	out	0x3e, r29	; 62
    64f6:	0f be       	out	0x3f, r0	; 63
    64f8:	cd bf       	out	0x3d, r28	; 61
    64fa:	cf 91       	pop	r28
    64fc:	df 91       	pop	r29
    64fe:	08 95       	ret

00006500 <isBool>:

TVP isBool(TVP v)
{
    6500:	df 93       	push	r29
    6502:	cf 93       	push	r28
    6504:	00 d0       	rcall	.+0      	; 0x6506 <isBool+0x6>
    6506:	00 d0       	rcall	.+0      	; 0x6508 <isBool+0x8>
    6508:	cd b7       	in	r28, 0x3d	; 61
    650a:	de b7       	in	r29, 0x3e	; 62
    650c:	9a 83       	std	Y+2, r25	; 0x02
    650e:	89 83       	std	Y+1, r24	; 0x01
	if(v->type == VDM_BOOL)
    6510:	e9 81       	ldd	r30, Y+1	; 0x01
    6512:	fa 81       	ldd	r31, Y+2	; 0x02
    6514:	80 81       	ld	r24, Z
    6516:	91 81       	ldd	r25, Z+1	; 0x01
    6518:	83 30       	cpi	r24, 0x03	; 3
    651a:	91 05       	cpc	r25, r1
    651c:	31 f4       	brne	.+12     	; 0x652a <isBool+0x2a>
		return newBool(true);
    651e:	81 e0       	ldi	r24, 0x01	; 1
    6520:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    6524:	9c 83       	std	Y+4, r25	; 0x04
    6526:	8b 83       	std	Y+3, r24	; 0x03
    6528:	05 c0       	rjmp	.+10     	; 0x6534 <isBool+0x34>
	return newBool(false);
    652a:	80 e0       	ldi	r24, 0x00	; 0
    652c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    6530:	9c 83       	std	Y+4, r25	; 0x04
    6532:	8b 83       	std	Y+3, r24	; 0x03
    6534:	8b 81       	ldd	r24, Y+3	; 0x03
    6536:	9c 81       	ldd	r25, Y+4	; 0x04
}
    6538:	0f 90       	pop	r0
    653a:	0f 90       	pop	r0
    653c:	0f 90       	pop	r0
    653e:	0f 90       	pop	r0
    6540:	cf 91       	pop	r28
    6542:	df 91       	pop	r29
    6544:	08 95       	ret

00006546 <isBoolGC>:

TVP isBoolGC(TVP v, TVP *from)
{
    6546:	df 93       	push	r29
    6548:	cf 93       	push	r28
    654a:	00 d0       	rcall	.+0      	; 0x654c <isBoolGC+0x6>
    654c:	00 d0       	rcall	.+0      	; 0x654e <isBoolGC+0x8>
    654e:	00 d0       	rcall	.+0      	; 0x6550 <isBoolGC+0xa>
    6550:	cd b7       	in	r28, 0x3d	; 61
    6552:	de b7       	in	r29, 0x3e	; 62
    6554:	9a 83       	std	Y+2, r25	; 0x02
    6556:	89 83       	std	Y+1, r24	; 0x01
    6558:	7c 83       	std	Y+4, r23	; 0x04
    655a:	6b 83       	std	Y+3, r22	; 0x03
	if(v->type == VDM_BOOL)
    655c:	e9 81       	ldd	r30, Y+1	; 0x01
    655e:	fa 81       	ldd	r31, Y+2	; 0x02
    6560:	80 81       	ld	r24, Z
    6562:	91 81       	ldd	r25, Z+1	; 0x01
    6564:	83 30       	cpi	r24, 0x03	; 3
    6566:	91 05       	cpc	r25, r1
    6568:	49 f4       	brne	.+18     	; 0x657c <isBoolGC+0x36>
		return newBoolGC(true, from);
    656a:	2b 81       	ldd	r18, Y+3	; 0x03
    656c:	3c 81       	ldd	r19, Y+4	; 0x04
    656e:	81 e0       	ldi	r24, 0x01	; 1
    6570:	b9 01       	movw	r22, r18
    6572:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    6576:	9e 83       	std	Y+6, r25	; 0x06
    6578:	8d 83       	std	Y+5, r24	; 0x05
    657a:	08 c0       	rjmp	.+16     	; 0x658c <isBoolGC+0x46>
	return newBoolGC(false, from);
    657c:	2b 81       	ldd	r18, Y+3	; 0x03
    657e:	3c 81       	ldd	r19, Y+4	; 0x04
    6580:	80 e0       	ldi	r24, 0x00	; 0
    6582:	b9 01       	movw	r22, r18
    6584:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    6588:	9e 83       	std	Y+6, r25	; 0x06
    658a:	8d 83       	std	Y+5, r24	; 0x05
    658c:	8d 81       	ldd	r24, Y+5	; 0x05
    658e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    6590:	26 96       	adiw	r28, 0x06	; 6
    6592:	0f b6       	in	r0, 0x3f	; 63
    6594:	f8 94       	cli
    6596:	de bf       	out	0x3e, r29	; 62
    6598:	0f be       	out	0x3f, r0	; 63
    659a:	cd bf       	out	0x3d, r28	; 61
    659c:	cf 91       	pop	r28
    659e:	df 91       	pop	r29
    65a0:	08 95       	ret

000065a2 <toDouble>:
 *
 * Note that the following functions are defined for all numbers
 */

double toDouble(TVP a)
{
    65a2:	df 93       	push	r29
    65a4:	cf 93       	push	r28
    65a6:	cd b7       	in	r28, 0x3d	; 61
    65a8:	de b7       	in	r29, 0x3e	; 62
    65aa:	28 97       	sbiw	r28, 0x08	; 8
    65ac:	0f b6       	in	r0, 0x3f	; 63
    65ae:	f8 94       	cli
    65b0:	de bf       	out	0x3e, r29	; 62
    65b2:	0f be       	out	0x3f, r0	; 63
    65b4:	cd bf       	out	0x3d, r28	; 61
    65b6:	9a 83       	std	Y+2, r25	; 0x02
    65b8:	89 83       	std	Y+1, r24	; 0x01
	switch(a->type)
    65ba:	e9 81       	ldd	r30, Y+1	; 0x01
    65bc:	fa 81       	ldd	r31, Y+2	; 0x02
    65be:	80 81       	ld	r24, Z
    65c0:	91 81       	ldd	r25, Z+1	; 0x01
    65c2:	98 87       	std	Y+8, r25	; 0x08
    65c4:	8f 83       	std	Y+7, r24	; 0x07
    65c6:	af 81       	ldd	r26, Y+7	; 0x07
    65c8:	b8 85       	ldd	r27, Y+8	; 0x08
    65ca:	a3 30       	cpi	r26, 0x03	; 3
    65cc:	b1 05       	cpc	r27, r1
    65ce:	38 f0       	brcs	.+14     	; 0x65de <toDouble+0x3c>
    65d0:	8f 81       	ldd	r24, Y+7	; 0x07
    65d2:	98 85       	ldd	r25, Y+8	; 0x08
    65d4:	04 97       	sbiw	r24, 0x04	; 4
    65d6:	82 30       	cpi	r24, 0x02	; 2
    65d8:	91 05       	cpc	r25, r1
    65da:	e8 f4       	brcc	.+58     	; 0x6616 <toDouble+0x74>
    65dc:	11 c0       	rjmp	.+34     	; 0x6600 <toDouble+0x5e>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return (double) a->value.intVal;
    65de:	e9 81       	ldd	r30, Y+1	; 0x01
    65e0:	fa 81       	ldd	r31, Y+2	; 0x02
    65e2:	84 81       	ldd	r24, Z+4	; 0x04
    65e4:	95 81       	ldd	r25, Z+5	; 0x05
    65e6:	aa 27       	eor	r26, r26
    65e8:	97 fd       	sbrc	r25, 7
    65ea:	a0 95       	com	r26
    65ec:	ba 2f       	mov	r27, r26
    65ee:	bc 01       	movw	r22, r24
    65f0:	cd 01       	movw	r24, r26
    65f2:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    65f6:	6b 83       	std	Y+3, r22	; 0x03
    65f8:	7c 83       	std	Y+4, r23	; 0x04
    65fa:	8d 83       	std	Y+5, r24	; 0x05
    65fc:	9e 83       	std	Y+6, r25	; 0x06
    65fe:	13 c0       	rjmp	.+38     	; 0x6626 <toDouble+0x84>
	case VDM_REAL:
	case VDM_RAT:
		return a->value.doubleVal;
    6600:	e9 81       	ldd	r30, Y+1	; 0x01
    6602:	fa 81       	ldd	r31, Y+2	; 0x02
    6604:	84 81       	ldd	r24, Z+4	; 0x04
    6606:	95 81       	ldd	r25, Z+5	; 0x05
    6608:	a6 81       	ldd	r26, Z+6	; 0x06
    660a:	b7 81       	ldd	r27, Z+7	; 0x07
    660c:	8b 83       	std	Y+3, r24	; 0x03
    660e:	9c 83       	std	Y+4, r25	; 0x04
    6610:	ad 83       	std	Y+5, r26	; 0x05
    6612:	be 83       	std	Y+6, r27	; 0x06
    6614:	08 c0       	rjmp	.+16     	; 0x6626 <toDouble+0x84>
	default:
		FATAL_ERROR("Invalid type");
		return 0;
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	a0 e0       	ldi	r26, 0x00	; 0
    661c:	b0 e0       	ldi	r27, 0x00	; 0
    661e:	8b 83       	std	Y+3, r24	; 0x03
    6620:	9c 83       	std	Y+4, r25	; 0x04
    6622:	ad 83       	std	Y+5, r26	; 0x05
    6624:	be 83       	std	Y+6, r27	; 0x06
    6626:	8b 81       	ldd	r24, Y+3	; 0x03
    6628:	9c 81       	ldd	r25, Y+4	; 0x04
    662a:	ad 81       	ldd	r26, Y+5	; 0x05
    662c:	be 81       	ldd	r27, Y+6	; 0x06
	}
}
    662e:	bc 01       	movw	r22, r24
    6630:	cd 01       	movw	r24, r26
    6632:	28 96       	adiw	r28, 0x08	; 8
    6634:	0f b6       	in	r0, 0x3f	; 63
    6636:	f8 94       	cli
    6638:	de bf       	out	0x3e, r29	; 62
    663a:	0f be       	out	0x3f, r0	; 63
    663c:	cd bf       	out	0x3d, r28	; 61
    663e:	cf 91       	pop	r28
    6640:	df 91       	pop	r29
    6642:	08 95       	ret

00006644 <toInteger>:

int toInteger(TVP a)
{
    6644:	df 93       	push	r29
    6646:	cf 93       	push	r28
    6648:	00 d0       	rcall	.+0      	; 0x664a <toInteger+0x6>
    664a:	00 d0       	rcall	.+0      	; 0x664c <toInteger+0x8>
    664c:	00 d0       	rcall	.+0      	; 0x664e <toInteger+0xa>
    664e:	cd b7       	in	r28, 0x3d	; 61
    6650:	de b7       	in	r29, 0x3e	; 62
    6652:	9a 83       	std	Y+2, r25	; 0x02
    6654:	89 83       	std	Y+1, r24	; 0x01
	switch(a->type)
    6656:	e9 81       	ldd	r30, Y+1	; 0x01
    6658:	fa 81       	ldd	r31, Y+2	; 0x02
    665a:	80 81       	ld	r24, Z
    665c:	91 81       	ldd	r25, Z+1	; 0x01
    665e:	9e 83       	std	Y+6, r25	; 0x06
    6660:	8d 83       	std	Y+5, r24	; 0x05
    6662:	8d 81       	ldd	r24, Y+5	; 0x05
    6664:	9e 81       	ldd	r25, Y+6	; 0x06
    6666:	83 30       	cpi	r24, 0x03	; 3
    6668:	91 05       	cpc	r25, r1
    666a:	30 f0       	brcs	.+12     	; 0x6678 <toInteger+0x34>
    666c:	8d 81       	ldd	r24, Y+5	; 0x05
    666e:	9e 81       	ldd	r25, Y+6	; 0x06
    6670:	84 30       	cpi	r24, 0x04	; 4
    6672:	91 05       	cpc	r25, r1
    6674:	41 f0       	breq	.+16     	; 0x6686 <toInteger+0x42>
    6676:	16 c0       	rjmp	.+44     	; 0x66a4 <toInteger+0x60>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return a->value.intVal;
    6678:	e9 81       	ldd	r30, Y+1	; 0x01
    667a:	fa 81       	ldd	r31, Y+2	; 0x02
    667c:	84 81       	ldd	r24, Z+4	; 0x04
    667e:	95 81       	ldd	r25, Z+5	; 0x05
    6680:	9c 83       	std	Y+4, r25	; 0x04
    6682:	8b 83       	std	Y+3, r24	; 0x03
    6684:	11 c0       	rjmp	.+34     	; 0x66a8 <toInteger+0x64>
	case VDM_REAL:
		return a->value.doubleVal;
    6686:	e9 81       	ldd	r30, Y+1	; 0x01
    6688:	fa 81       	ldd	r31, Y+2	; 0x02
    668a:	84 81       	ldd	r24, Z+4	; 0x04
    668c:	95 81       	ldd	r25, Z+5	; 0x05
    668e:	a6 81       	ldd	r26, Z+6	; 0x06
    6690:	b7 81       	ldd	r27, Z+7	; 0x07
    6692:	bc 01       	movw	r22, r24
    6694:	cd 01       	movw	r24, r26
    6696:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    669a:	dc 01       	movw	r26, r24
    669c:	cb 01       	movw	r24, r22
    669e:	9c 83       	std	Y+4, r25	; 0x04
    66a0:	8b 83       	std	Y+3, r24	; 0x03
    66a2:	02 c0       	rjmp	.+4      	; 0x66a8 <toInteger+0x64>
	default:
		FATAL_ERROR("Invalid type");
		return 0;
    66a4:	1c 82       	std	Y+4, r1	; 0x04
    66a6:	1b 82       	std	Y+3, r1	; 0x03
    66a8:	8b 81       	ldd	r24, Y+3	; 0x03
    66aa:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    66ac:	26 96       	adiw	r28, 0x06	; 6
    66ae:	0f b6       	in	r0, 0x3f	; 63
    66b0:	f8 94       	cli
    66b2:	de bf       	out	0x3e, r29	; 62
    66b4:	0f be       	out	0x3f, r0	; 63
    66b6:	cd bf       	out	0x3d, r28	; 61
    66b8:	cf 91       	pop	r28
    66ba:	df 91       	pop	r29
    66bc:	08 95       	ret

000066be <toBool>:

bool toBool(TVP a)
{
    66be:	df 93       	push	r29
    66c0:	cf 93       	push	r28
    66c2:	00 d0       	rcall	.+0      	; 0x66c4 <toBool+0x6>
    66c4:	cd b7       	in	r28, 0x3d	; 61
    66c6:	de b7       	in	r29, 0x3e	; 62
    66c8:	9a 83       	std	Y+2, r25	; 0x02
    66ca:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_BOOL(a);
    66cc:	e9 81       	ldd	r30, Y+1	; 0x01
    66ce:	fa 81       	ldd	r31, Y+2	; 0x02
    66d0:	80 81       	ld	r24, Z
    66d2:	91 81       	ldd	r25, Z+1	; 0x01
    66d4:	83 30       	cpi	r24, 0x03	; 3
    66d6:	91 05       	cpc	r25, r1
    66d8:	11 f0       	breq	.+4      	; 0x66de <toBool+0x20>
    66da:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return a->value.boolVal;
    66de:	e9 81       	ldd	r30, Y+1	; 0x01
    66e0:	fa 81       	ldd	r31, Y+2	; 0x02
    66e2:	84 81       	ldd	r24, Z+4	; 0x04
}
    66e4:	0f 90       	pop	r0
    66e6:	0f 90       	pop	r0
    66e8:	cf 91       	pop	r28
    66ea:	df 91       	pop	r29
    66ec:	08 95       	ret

000066ee <vdmMinus>:

TVP vdmMinus(TVP arg)
{
    66ee:	df 93       	push	r29
    66f0:	cf 93       	push	r28
    66f2:	00 d0       	rcall	.+0      	; 0x66f4 <vdmMinus+0x6>
    66f4:	00 d0       	rcall	.+0      	; 0x66f6 <vdmMinus+0x8>
    66f6:	00 d0       	rcall	.+0      	; 0x66f8 <vdmMinus+0xa>
    66f8:	cd b7       	in	r28, 0x3d	; 61
    66fa:	de b7       	in	r29, 0x3e	; 62
    66fc:	9a 83       	std	Y+2, r25	; 0x02
    66fe:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_NUMERIC(arg);
    6700:	e9 81       	ldd	r30, Y+1	; 0x01
    6702:	fa 81       	ldd	r31, Y+2	; 0x02
    6704:	80 81       	ld	r24, Z
    6706:	91 81       	ldd	r25, Z+1	; 0x01
    6708:	00 97       	sbiw	r24, 0x00	; 0
    670a:	f1 f0       	breq	.+60     	; 0x6748 <vdmMinus+0x5a>
    670c:	e9 81       	ldd	r30, Y+1	; 0x01
    670e:	fa 81       	ldd	r31, Y+2	; 0x02
    6710:	80 81       	ld	r24, Z
    6712:	91 81       	ldd	r25, Z+1	; 0x01
    6714:	81 30       	cpi	r24, 0x01	; 1
    6716:	91 05       	cpc	r25, r1
    6718:	b9 f0       	breq	.+46     	; 0x6748 <vdmMinus+0x5a>
    671a:	e9 81       	ldd	r30, Y+1	; 0x01
    671c:	fa 81       	ldd	r31, Y+2	; 0x02
    671e:	80 81       	ld	r24, Z
    6720:	91 81       	ldd	r25, Z+1	; 0x01
    6722:	82 30       	cpi	r24, 0x02	; 2
    6724:	91 05       	cpc	r25, r1
    6726:	81 f0       	breq	.+32     	; 0x6748 <vdmMinus+0x5a>
    6728:	e9 81       	ldd	r30, Y+1	; 0x01
    672a:	fa 81       	ldd	r31, Y+2	; 0x02
    672c:	80 81       	ld	r24, Z
    672e:	91 81       	ldd	r25, Z+1	; 0x01
    6730:	84 30       	cpi	r24, 0x04	; 4
    6732:	91 05       	cpc	r25, r1
    6734:	49 f0       	breq	.+18     	; 0x6748 <vdmMinus+0x5a>
    6736:	e9 81       	ldd	r30, Y+1	; 0x01
    6738:	fa 81       	ldd	r31, Y+2	; 0x02
    673a:	80 81       	ld	r24, Z
    673c:	91 81       	ldd	r25, Z+1	; 0x01
    673e:	85 30       	cpi	r24, 0x05	; 5
    6740:	91 05       	cpc	r25, r1
    6742:	11 f0       	breq	.+4      	; 0x6748 <vdmMinus+0x5a>
    6744:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	switch(arg->type)
    6748:	e9 81       	ldd	r30, Y+1	; 0x01
    674a:	fa 81       	ldd	r31, Y+2	; 0x02
    674c:	80 81       	ld	r24, Z
    674e:	91 81       	ldd	r25, Z+1	; 0x01
    6750:	9e 83       	std	Y+6, r25	; 0x06
    6752:	8d 83       	std	Y+5, r24	; 0x05
    6754:	8d 81       	ldd	r24, Y+5	; 0x05
    6756:	9e 81       	ldd	r25, Y+6	; 0x06
    6758:	83 30       	cpi	r24, 0x03	; 3
    675a:	91 05       	cpc	r25, r1
    675c:	30 f0       	brcs	.+12     	; 0x676a <vdmMinus+0x7c>
    675e:	8d 81       	ldd	r24, Y+5	; 0x05
    6760:	9e 81       	ldd	r25, Y+6	; 0x06
    6762:	84 30       	cpi	r24, 0x04	; 4
    6764:	91 05       	cpc	r25, r1
    6766:	69 f0       	breq	.+26     	; 0x6782 <vdmMinus+0x94>
    6768:	1a c0       	rjmp	.+52     	; 0x679e <vdmMinus+0xb0>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newInt(-arg->value.intVal);
    676a:	e9 81       	ldd	r30, Y+1	; 0x01
    676c:	fa 81       	ldd	r31, Y+2	; 0x02
    676e:	84 81       	ldd	r24, Z+4	; 0x04
    6770:	95 81       	ldd	r25, Z+5	; 0x05
    6772:	90 95       	com	r25
    6774:	81 95       	neg	r24
    6776:	9f 4f       	sbci	r25, 0xFF	; 255
    6778:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    677c:	9c 83       	std	Y+4, r25	; 0x04
    677e:	8b 83       	std	Y+3, r24	; 0x03
    6780:	10 c0       	rjmp	.+32     	; 0x67a2 <vdmMinus+0xb4>
	case VDM_REAL:
		return newReal(-arg->value.doubleVal);
    6782:	e9 81       	ldd	r30, Y+1	; 0x01
    6784:	fa 81       	ldd	r31, Y+2	; 0x02
    6786:	84 81       	ldd	r24, Z+4	; 0x04
    6788:	95 81       	ldd	r25, Z+5	; 0x05
    678a:	a6 81       	ldd	r26, Z+6	; 0x06
    678c:	b7 81       	ldd	r27, Z+7	; 0x07
    678e:	b0 58       	subi	r27, 0x80	; 128
    6790:	bc 01       	movw	r22, r24
    6792:	cd 01       	movw	r24, r26
    6794:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    6798:	9c 83       	std	Y+4, r25	; 0x04
    679a:	8b 83       	std	Y+3, r24	; 0x03
    679c:	02 c0       	rjmp	.+4      	; 0x67a2 <vdmMinus+0xb4>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    679e:	1c 82       	std	Y+4, r1	; 0x04
    67a0:	1b 82       	std	Y+3, r1	; 0x03
    67a2:	8b 81       	ldd	r24, Y+3	; 0x03
    67a4:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    67a6:	26 96       	adiw	r28, 0x06	; 6
    67a8:	0f b6       	in	r0, 0x3f	; 63
    67aa:	f8 94       	cli
    67ac:	de bf       	out	0x3e, r29	; 62
    67ae:	0f be       	out	0x3f, r0	; 63
    67b0:	cd bf       	out	0x3d, r28	; 61
    67b2:	cf 91       	pop	r28
    67b4:	df 91       	pop	r29
    67b6:	08 95       	ret

000067b8 <vdmMinusGC>:

TVP vdmMinusGC(TVP arg, TVP *from)
{
    67b8:	df 93       	push	r29
    67ba:	cf 93       	push	r28
    67bc:	cd b7       	in	r28, 0x3d	; 61
    67be:	de b7       	in	r29, 0x3e	; 62
    67c0:	28 97       	sbiw	r28, 0x08	; 8
    67c2:	0f b6       	in	r0, 0x3f	; 63
    67c4:	f8 94       	cli
    67c6:	de bf       	out	0x3e, r29	; 62
    67c8:	0f be       	out	0x3f, r0	; 63
    67ca:	cd bf       	out	0x3d, r28	; 61
    67cc:	9a 83       	std	Y+2, r25	; 0x02
    67ce:	89 83       	std	Y+1, r24	; 0x01
    67d0:	7c 83       	std	Y+4, r23	; 0x04
    67d2:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK_NUMERIC(arg);
    67d4:	e9 81       	ldd	r30, Y+1	; 0x01
    67d6:	fa 81       	ldd	r31, Y+2	; 0x02
    67d8:	80 81       	ld	r24, Z
    67da:	91 81       	ldd	r25, Z+1	; 0x01
    67dc:	00 97       	sbiw	r24, 0x00	; 0
    67de:	f1 f0       	breq	.+60     	; 0x681c <vdmMinusGC+0x64>
    67e0:	e9 81       	ldd	r30, Y+1	; 0x01
    67e2:	fa 81       	ldd	r31, Y+2	; 0x02
    67e4:	80 81       	ld	r24, Z
    67e6:	91 81       	ldd	r25, Z+1	; 0x01
    67e8:	81 30       	cpi	r24, 0x01	; 1
    67ea:	91 05       	cpc	r25, r1
    67ec:	b9 f0       	breq	.+46     	; 0x681c <vdmMinusGC+0x64>
    67ee:	e9 81       	ldd	r30, Y+1	; 0x01
    67f0:	fa 81       	ldd	r31, Y+2	; 0x02
    67f2:	80 81       	ld	r24, Z
    67f4:	91 81       	ldd	r25, Z+1	; 0x01
    67f6:	82 30       	cpi	r24, 0x02	; 2
    67f8:	91 05       	cpc	r25, r1
    67fa:	81 f0       	breq	.+32     	; 0x681c <vdmMinusGC+0x64>
    67fc:	e9 81       	ldd	r30, Y+1	; 0x01
    67fe:	fa 81       	ldd	r31, Y+2	; 0x02
    6800:	80 81       	ld	r24, Z
    6802:	91 81       	ldd	r25, Z+1	; 0x01
    6804:	84 30       	cpi	r24, 0x04	; 4
    6806:	91 05       	cpc	r25, r1
    6808:	49 f0       	breq	.+18     	; 0x681c <vdmMinusGC+0x64>
    680a:	e9 81       	ldd	r30, Y+1	; 0x01
    680c:	fa 81       	ldd	r31, Y+2	; 0x02
    680e:	80 81       	ld	r24, Z
    6810:	91 81       	ldd	r25, Z+1	; 0x01
    6812:	85 30       	cpi	r24, 0x05	; 5
    6814:	91 05       	cpc	r25, r1
    6816:	11 f0       	breq	.+4      	; 0x681c <vdmMinusGC+0x64>
    6818:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	switch(arg->type)
    681c:	e9 81       	ldd	r30, Y+1	; 0x01
    681e:	fa 81       	ldd	r31, Y+2	; 0x02
    6820:	80 81       	ld	r24, Z
    6822:	91 81       	ldd	r25, Z+1	; 0x01
    6824:	98 87       	std	Y+8, r25	; 0x08
    6826:	8f 83       	std	Y+7, r24	; 0x07
    6828:	8f 81       	ldd	r24, Y+7	; 0x07
    682a:	98 85       	ldd	r25, Y+8	; 0x08
    682c:	83 30       	cpi	r24, 0x03	; 3
    682e:	91 05       	cpc	r25, r1
    6830:	30 f0       	brcs	.+12     	; 0x683e <vdmMinusGC+0x86>
    6832:	8f 81       	ldd	r24, Y+7	; 0x07
    6834:	98 85       	ldd	r25, Y+8	; 0x08
    6836:	84 30       	cpi	r24, 0x04	; 4
    6838:	91 05       	cpc	r25, r1
    683a:	81 f0       	breq	.+32     	; 0x685c <vdmMinusGC+0xa4>
    683c:	20 c0       	rjmp	.+64     	; 0x687e <vdmMinusGC+0xc6>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newIntGC(-arg->value.intVal, from);
    683e:	e9 81       	ldd	r30, Y+1	; 0x01
    6840:	fa 81       	ldd	r31, Y+2	; 0x02
    6842:	84 81       	ldd	r24, Z+4	; 0x04
    6844:	95 81       	ldd	r25, Z+5	; 0x05
    6846:	90 95       	com	r25
    6848:	81 95       	neg	r24
    684a:	9f 4f       	sbci	r25, 0xFF	; 255
    684c:	2b 81       	ldd	r18, Y+3	; 0x03
    684e:	3c 81       	ldd	r19, Y+4	; 0x04
    6850:	b9 01       	movw	r22, r18
    6852:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    6856:	9e 83       	std	Y+6, r25	; 0x06
    6858:	8d 83       	std	Y+5, r24	; 0x05
    685a:	13 c0       	rjmp	.+38     	; 0x6882 <vdmMinusGC+0xca>
	case VDM_REAL:
		return newRealGC(-arg->value.doubleVal, from);
    685c:	e9 81       	ldd	r30, Y+1	; 0x01
    685e:	fa 81       	ldd	r31, Y+2	; 0x02
    6860:	84 81       	ldd	r24, Z+4	; 0x04
    6862:	95 81       	ldd	r25, Z+5	; 0x05
    6864:	a6 81       	ldd	r26, Z+6	; 0x06
    6866:	b7 81       	ldd	r27, Z+7	; 0x07
    6868:	b0 58       	subi	r27, 0x80	; 128
    686a:	2b 81       	ldd	r18, Y+3	; 0x03
    686c:	3c 81       	ldd	r19, Y+4	; 0x04
    686e:	bc 01       	movw	r22, r24
    6870:	cd 01       	movw	r24, r26
    6872:	a9 01       	movw	r20, r18
    6874:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
    6878:	9e 83       	std	Y+6, r25	; 0x06
    687a:	8d 83       	std	Y+5, r24	; 0x05
    687c:	02 c0       	rjmp	.+4      	; 0x6882 <vdmMinusGC+0xca>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    687e:	1e 82       	std	Y+6, r1	; 0x06
    6880:	1d 82       	std	Y+5, r1	; 0x05
    6882:	8d 81       	ldd	r24, Y+5	; 0x05
    6884:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    6886:	28 96       	adiw	r28, 0x08	; 8
    6888:	0f b6       	in	r0, 0x3f	; 63
    688a:	f8 94       	cli
    688c:	de bf       	out	0x3e, r29	; 62
    688e:	0f be       	out	0x3f, r0	; 63
    6890:	cd bf       	out	0x3d, r28	; 61
    6892:	cf 91       	pop	r28
    6894:	df 91       	pop	r29
    6896:	08 95       	ret

00006898 <vdmAbs>:

TVP vdmAbs(TVP arg)
{
    6898:	df 93       	push	r29
    689a:	cf 93       	push	r28
    689c:	cd b7       	in	r28, 0x3d	; 61
    689e:	de b7       	in	r29, 0x3e	; 62
    68a0:	28 97       	sbiw	r28, 0x08	; 8
    68a2:	0f b6       	in	r0, 0x3f	; 63
    68a4:	f8 94       	cli
    68a6:	de bf       	out	0x3e, r29	; 62
    68a8:	0f be       	out	0x3f, r0	; 63
    68aa:	cd bf       	out	0x3d, r28	; 61
    68ac:	9a 83       	std	Y+2, r25	; 0x02
    68ae:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_NUMERIC(arg);
    68b0:	e9 81       	ldd	r30, Y+1	; 0x01
    68b2:	fa 81       	ldd	r31, Y+2	; 0x02
    68b4:	80 81       	ld	r24, Z
    68b6:	91 81       	ldd	r25, Z+1	; 0x01
    68b8:	00 97       	sbiw	r24, 0x00	; 0
    68ba:	f1 f0       	breq	.+60     	; 0x68f8 <vdmAbs+0x60>
    68bc:	e9 81       	ldd	r30, Y+1	; 0x01
    68be:	fa 81       	ldd	r31, Y+2	; 0x02
    68c0:	80 81       	ld	r24, Z
    68c2:	91 81       	ldd	r25, Z+1	; 0x01
    68c4:	81 30       	cpi	r24, 0x01	; 1
    68c6:	91 05       	cpc	r25, r1
    68c8:	b9 f0       	breq	.+46     	; 0x68f8 <vdmAbs+0x60>
    68ca:	e9 81       	ldd	r30, Y+1	; 0x01
    68cc:	fa 81       	ldd	r31, Y+2	; 0x02
    68ce:	80 81       	ld	r24, Z
    68d0:	91 81       	ldd	r25, Z+1	; 0x01
    68d2:	82 30       	cpi	r24, 0x02	; 2
    68d4:	91 05       	cpc	r25, r1
    68d6:	81 f0       	breq	.+32     	; 0x68f8 <vdmAbs+0x60>
    68d8:	e9 81       	ldd	r30, Y+1	; 0x01
    68da:	fa 81       	ldd	r31, Y+2	; 0x02
    68dc:	80 81       	ld	r24, Z
    68de:	91 81       	ldd	r25, Z+1	; 0x01
    68e0:	84 30       	cpi	r24, 0x04	; 4
    68e2:	91 05       	cpc	r25, r1
    68e4:	49 f0       	breq	.+18     	; 0x68f8 <vdmAbs+0x60>
    68e6:	e9 81       	ldd	r30, Y+1	; 0x01
    68e8:	fa 81       	ldd	r31, Y+2	; 0x02
    68ea:	80 81       	ld	r24, Z
    68ec:	91 81       	ldd	r25, Z+1	; 0x01
    68ee:	85 30       	cpi	r24, 0x05	; 5
    68f0:	91 05       	cpc	r25, r1
    68f2:	11 f0       	breq	.+4      	; 0x68f8 <vdmAbs+0x60>
    68f4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	switch(arg->type)
    68f8:	e9 81       	ldd	r30, Y+1	; 0x01
    68fa:	fa 81       	ldd	r31, Y+2	; 0x02
    68fc:	80 81       	ld	r24, Z
    68fe:	91 81       	ldd	r25, Z+1	; 0x01
    6900:	98 87       	std	Y+8, r25	; 0x08
    6902:	8f 83       	std	Y+7, r24	; 0x07
    6904:	8f 81       	ldd	r24, Y+7	; 0x07
    6906:	98 85       	ldd	r25, Y+8	; 0x08
    6908:	83 30       	cpi	r24, 0x03	; 3
    690a:	91 05       	cpc	r25, r1
    690c:	30 f0       	brcs	.+12     	; 0x691a <vdmAbs+0x82>
    690e:	8f 81       	ldd	r24, Y+7	; 0x07
    6910:	98 85       	ldd	r25, Y+8	; 0x08
    6912:	84 30       	cpi	r24, 0x04	; 4
    6914:	91 05       	cpc	r25, r1
    6916:	c9 f0       	breq	.+50     	; 0x694a <vdmAbs+0xb2>
    6918:	26 c0       	rjmp	.+76     	; 0x6966 <vdmAbs+0xce>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newInt(abs(arg->value.intVal));
    691a:	e9 81       	ldd	r30, Y+1	; 0x01
    691c:	fa 81       	ldd	r31, Y+2	; 0x02
    691e:	84 81       	ldd	r24, Z+4	; 0x04
    6920:	95 81       	ldd	r25, Z+5	; 0x05
    6922:	9c 83       	std	Y+4, r25	; 0x04
    6924:	8b 83       	std	Y+3, r24	; 0x03
    6926:	8b 81       	ldd	r24, Y+3	; 0x03
    6928:	9c 81       	ldd	r25, Y+4	; 0x04
    692a:	99 23       	and	r25, r25
    692c:	3c f4       	brge	.+14     	; 0x693c <vdmAbs+0xa4>
    692e:	8b 81       	ldd	r24, Y+3	; 0x03
    6930:	9c 81       	ldd	r25, Y+4	; 0x04
    6932:	90 95       	com	r25
    6934:	81 95       	neg	r24
    6936:	9f 4f       	sbci	r25, 0xFF	; 255
    6938:	9c 83       	std	Y+4, r25	; 0x04
    693a:	8b 83       	std	Y+3, r24	; 0x03
    693c:	8b 81       	ldd	r24, Y+3	; 0x03
    693e:	9c 81       	ldd	r25, Y+4	; 0x04
    6940:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    6944:	9e 83       	std	Y+6, r25	; 0x06
    6946:	8d 83       	std	Y+5, r24	; 0x05
    6948:	10 c0       	rjmp	.+32     	; 0x696a <vdmAbs+0xd2>
	case VDM_REAL:
		return newReal(fabs(arg->value.doubleVal));
    694a:	e9 81       	ldd	r30, Y+1	; 0x01
    694c:	fa 81       	ldd	r31, Y+2	; 0x02
    694e:	84 81       	ldd	r24, Z+4	; 0x04
    6950:	95 81       	ldd	r25, Z+5	; 0x05
    6952:	a6 81       	ldd	r26, Z+6	; 0x06
    6954:	b7 81       	ldd	r27, Z+7	; 0x07
    6956:	bf 77       	andi	r27, 0x7F	; 127
    6958:	bc 01       	movw	r22, r24
    695a:	cd 01       	movw	r24, r26
    695c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    6960:	9e 83       	std	Y+6, r25	; 0x06
    6962:	8d 83       	std	Y+5, r24	; 0x05
    6964:	02 c0       	rjmp	.+4      	; 0x696a <vdmAbs+0xd2>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    6966:	1e 82       	std	Y+6, r1	; 0x06
    6968:	1d 82       	std	Y+5, r1	; 0x05
    696a:	8d 81       	ldd	r24, Y+5	; 0x05
    696c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    696e:	28 96       	adiw	r28, 0x08	; 8
    6970:	0f b6       	in	r0, 0x3f	; 63
    6972:	f8 94       	cli
    6974:	de bf       	out	0x3e, r29	; 62
    6976:	0f be       	out	0x3f, r0	; 63
    6978:	cd bf       	out	0x3d, r28	; 61
    697a:	cf 91       	pop	r28
    697c:	df 91       	pop	r29
    697e:	08 95       	ret

00006980 <vdmAbsGC>:

TVP vdmAbsGC(TVP arg, TVP *from)
{
    6980:	df 93       	push	r29
    6982:	cf 93       	push	r28
    6984:	cd b7       	in	r28, 0x3d	; 61
    6986:	de b7       	in	r29, 0x3e	; 62
    6988:	2a 97       	sbiw	r28, 0x0a	; 10
    698a:	0f b6       	in	r0, 0x3f	; 63
    698c:	f8 94       	cli
    698e:	de bf       	out	0x3e, r29	; 62
    6990:	0f be       	out	0x3f, r0	; 63
    6992:	cd bf       	out	0x3d, r28	; 61
    6994:	9a 83       	std	Y+2, r25	; 0x02
    6996:	89 83       	std	Y+1, r24	; 0x01
    6998:	7c 83       	std	Y+4, r23	; 0x04
    699a:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK_NUMERIC(arg);
    699c:	e9 81       	ldd	r30, Y+1	; 0x01
    699e:	fa 81       	ldd	r31, Y+2	; 0x02
    69a0:	80 81       	ld	r24, Z
    69a2:	91 81       	ldd	r25, Z+1	; 0x01
    69a4:	00 97       	sbiw	r24, 0x00	; 0
    69a6:	f1 f0       	breq	.+60     	; 0x69e4 <vdmAbsGC+0x64>
    69a8:	e9 81       	ldd	r30, Y+1	; 0x01
    69aa:	fa 81       	ldd	r31, Y+2	; 0x02
    69ac:	80 81       	ld	r24, Z
    69ae:	91 81       	ldd	r25, Z+1	; 0x01
    69b0:	81 30       	cpi	r24, 0x01	; 1
    69b2:	91 05       	cpc	r25, r1
    69b4:	b9 f0       	breq	.+46     	; 0x69e4 <vdmAbsGC+0x64>
    69b6:	e9 81       	ldd	r30, Y+1	; 0x01
    69b8:	fa 81       	ldd	r31, Y+2	; 0x02
    69ba:	80 81       	ld	r24, Z
    69bc:	91 81       	ldd	r25, Z+1	; 0x01
    69be:	82 30       	cpi	r24, 0x02	; 2
    69c0:	91 05       	cpc	r25, r1
    69c2:	81 f0       	breq	.+32     	; 0x69e4 <vdmAbsGC+0x64>
    69c4:	e9 81       	ldd	r30, Y+1	; 0x01
    69c6:	fa 81       	ldd	r31, Y+2	; 0x02
    69c8:	80 81       	ld	r24, Z
    69ca:	91 81       	ldd	r25, Z+1	; 0x01
    69cc:	84 30       	cpi	r24, 0x04	; 4
    69ce:	91 05       	cpc	r25, r1
    69d0:	49 f0       	breq	.+18     	; 0x69e4 <vdmAbsGC+0x64>
    69d2:	e9 81       	ldd	r30, Y+1	; 0x01
    69d4:	fa 81       	ldd	r31, Y+2	; 0x02
    69d6:	80 81       	ld	r24, Z
    69d8:	91 81       	ldd	r25, Z+1	; 0x01
    69da:	85 30       	cpi	r24, 0x05	; 5
    69dc:	91 05       	cpc	r25, r1
    69de:	11 f0       	breq	.+4      	; 0x69e4 <vdmAbsGC+0x64>
    69e0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	switch(arg->type)
    69e4:	e9 81       	ldd	r30, Y+1	; 0x01
    69e6:	fa 81       	ldd	r31, Y+2	; 0x02
    69e8:	80 81       	ld	r24, Z
    69ea:	91 81       	ldd	r25, Z+1	; 0x01
    69ec:	9a 87       	std	Y+10, r25	; 0x0a
    69ee:	89 87       	std	Y+9, r24	; 0x09
    69f0:	89 85       	ldd	r24, Y+9	; 0x09
    69f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69f4:	83 30       	cpi	r24, 0x03	; 3
    69f6:	91 05       	cpc	r25, r1
    69f8:	30 f0       	brcs	.+12     	; 0x6a06 <vdmAbsGC+0x86>
    69fa:	89 85       	ldd	r24, Y+9	; 0x09
    69fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    69fe:	84 30       	cpi	r24, 0x04	; 4
    6a00:	91 05       	cpc	r25, r1
    6a02:	e1 f0       	breq	.+56     	; 0x6a3c <vdmAbsGC+0xbc>
    6a04:	2c c0       	rjmp	.+88     	; 0x6a5e <vdmAbsGC+0xde>
	{
	case VDM_INT:
	case VDM_NAT:
	case VDM_NAT1:
		return newIntGC(abs(arg->value.intVal), from);
    6a06:	e9 81       	ldd	r30, Y+1	; 0x01
    6a08:	fa 81       	ldd	r31, Y+2	; 0x02
    6a0a:	84 81       	ldd	r24, Z+4	; 0x04
    6a0c:	95 81       	ldd	r25, Z+5	; 0x05
    6a0e:	9e 83       	std	Y+6, r25	; 0x06
    6a10:	8d 83       	std	Y+5, r24	; 0x05
    6a12:	8d 81       	ldd	r24, Y+5	; 0x05
    6a14:	9e 81       	ldd	r25, Y+6	; 0x06
    6a16:	99 23       	and	r25, r25
    6a18:	3c f4       	brge	.+14     	; 0x6a28 <vdmAbsGC+0xa8>
    6a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    6a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    6a1e:	90 95       	com	r25
    6a20:	81 95       	neg	r24
    6a22:	9f 4f       	sbci	r25, 0xFF	; 255
    6a24:	9e 83       	std	Y+6, r25	; 0x06
    6a26:	8d 83       	std	Y+5, r24	; 0x05
    6a28:	2b 81       	ldd	r18, Y+3	; 0x03
    6a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    6a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    6a30:	b9 01       	movw	r22, r18
    6a32:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    6a36:	98 87       	std	Y+8, r25	; 0x08
    6a38:	8f 83       	std	Y+7, r24	; 0x07
    6a3a:	13 c0       	rjmp	.+38     	; 0x6a62 <vdmAbsGC+0xe2>
	case VDM_REAL:
		return newRealGC(fabs(arg->value.doubleVal), from);
    6a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    6a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    6a40:	84 81       	ldd	r24, Z+4	; 0x04
    6a42:	95 81       	ldd	r25, Z+5	; 0x05
    6a44:	a6 81       	ldd	r26, Z+6	; 0x06
    6a46:	b7 81       	ldd	r27, Z+7	; 0x07
    6a48:	bf 77       	andi	r27, 0x7F	; 127
    6a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    6a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    6a4e:	bc 01       	movw	r22, r24
    6a50:	cd 01       	movw	r24, r26
    6a52:	a9 01       	movw	r20, r18
    6a54:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
    6a58:	98 87       	std	Y+8, r25	; 0x08
    6a5a:	8f 83       	std	Y+7, r24	; 0x07
    6a5c:	02 c0       	rjmp	.+4      	; 0x6a62 <vdmAbsGC+0xe2>
	default:
		FATAL_ERROR("Invalid type");
		return NULL;
    6a5e:	18 86       	std	Y+8, r1	; 0x08
    6a60:	1f 82       	std	Y+7, r1	; 0x07
    6a62:	8f 81       	ldd	r24, Y+7	; 0x07
    6a64:	98 85       	ldd	r25, Y+8	; 0x08
	}
}
    6a66:	2a 96       	adiw	r28, 0x0a	; 10
    6a68:	0f b6       	in	r0, 0x3f	; 63
    6a6a:	f8 94       	cli
    6a6c:	de bf       	out	0x3e, r29	; 62
    6a6e:	0f be       	out	0x3f, r0	; 63
    6a70:	cd bf       	out	0x3d, r28	; 61
    6a72:	cf 91       	pop	r28
    6a74:	df 91       	pop	r29
    6a76:	08 95       	ret

00006a78 <vdmFloor>:

TVP vdmFloor(TVP arg)
{
    6a78:	df 93       	push	r29
    6a7a:	cf 93       	push	r28
    6a7c:	00 d0       	rcall	.+0      	; 0x6a7e <vdmFloor+0x6>
    6a7e:	cd b7       	in	r28, 0x3d	; 61
    6a80:	de b7       	in	r29, 0x3e	; 62
    6a82:	9a 83       	std	Y+2, r25	; 0x02
    6a84:	89 83       	std	Y+1, r24	; 0x01
	ASSERT_CHECK_REAL(arg);
    6a86:	e9 81       	ldd	r30, Y+1	; 0x01
    6a88:	fa 81       	ldd	r31, Y+2	; 0x02
    6a8a:	80 81       	ld	r24, Z
    6a8c:	91 81       	ldd	r25, Z+1	; 0x01
    6a8e:	84 30       	cpi	r24, 0x04	; 4
    6a90:	91 05       	cpc	r25, r1
    6a92:	11 f0       	breq	.+4      	; 0x6a98 <vdmFloor+0x20>
    6a94:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	return newInt(floor(arg->value.doubleVal));
    6a98:	e9 81       	ldd	r30, Y+1	; 0x01
    6a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    6a9c:	84 81       	ldd	r24, Z+4	; 0x04
    6a9e:	95 81       	ldd	r25, Z+5	; 0x05
    6aa0:	a6 81       	ldd	r26, Z+6	; 0x06
    6aa2:	b7 81       	ldd	r27, Z+7	; 0x07
    6aa4:	bc 01       	movw	r22, r24
    6aa6:	cd 01       	movw	r24, r26
    6aa8:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    6aac:	dc 01       	movw	r26, r24
    6aae:	cb 01       	movw	r24, r22
    6ab0:	bc 01       	movw	r22, r24
    6ab2:	cd 01       	movw	r24, r26
    6ab4:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    6ab8:	dc 01       	movw	r26, r24
    6aba:	cb 01       	movw	r24, r22
    6abc:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
}
    6ac0:	0f 90       	pop	r0
    6ac2:	0f 90       	pop	r0
    6ac4:	cf 91       	pop	r28
    6ac6:	df 91       	pop	r29
    6ac8:	08 95       	ret

00006aca <vdmFloorGC>:

TVP vdmFloorGC(TVP arg, TVP *from)
{
    6aca:	df 93       	push	r29
    6acc:	cf 93       	push	r28
    6ace:	00 d0       	rcall	.+0      	; 0x6ad0 <vdmFloorGC+0x6>
    6ad0:	00 d0       	rcall	.+0      	; 0x6ad2 <vdmFloorGC+0x8>
    6ad2:	cd b7       	in	r28, 0x3d	; 61
    6ad4:	de b7       	in	r29, 0x3e	; 62
    6ad6:	9a 83       	std	Y+2, r25	; 0x02
    6ad8:	89 83       	std	Y+1, r24	; 0x01
    6ada:	7c 83       	std	Y+4, r23	; 0x04
    6adc:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK_REAL(arg);
    6ade:	e9 81       	ldd	r30, Y+1	; 0x01
    6ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    6ae2:	80 81       	ld	r24, Z
    6ae4:	91 81       	ldd	r25, Z+1	; 0x01
    6ae6:	84 30       	cpi	r24, 0x04	; 4
    6ae8:	91 05       	cpc	r25, r1
    6aea:	11 f0       	breq	.+4      	; 0x6af0 <vdmFloorGC+0x26>
    6aec:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* TODO: Why do we return a Real, when floor is int in VDM?  */
	return newIntGC(floor(arg->value.doubleVal), from);
    6af0:	e9 81       	ldd	r30, Y+1	; 0x01
    6af2:	fa 81       	ldd	r31, Y+2	; 0x02
    6af4:	84 81       	ldd	r24, Z+4	; 0x04
    6af6:	95 81       	ldd	r25, Z+5	; 0x05
    6af8:	a6 81       	ldd	r26, Z+6	; 0x06
    6afa:	b7 81       	ldd	r27, Z+7	; 0x07
    6afc:	bc 01       	movw	r22, r24
    6afe:	cd 01       	movw	r24, r26
    6b00:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    6b04:	dc 01       	movw	r26, r24
    6b06:	cb 01       	movw	r24, r22
    6b08:	bc 01       	movw	r22, r24
    6b0a:	cd 01       	movw	r24, r26
    6b0c:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    6b10:	dc 01       	movw	r26, r24
    6b12:	cb 01       	movw	r24, r22
    6b14:	2b 81       	ldd	r18, Y+3	; 0x03
    6b16:	3c 81       	ldd	r19, Y+4	; 0x04
    6b18:	b9 01       	movw	r22, r18
    6b1a:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
}
    6b1e:	0f 90       	pop	r0
    6b20:	0f 90       	pop	r0
    6b22:	0f 90       	pop	r0
    6b24:	0f 90       	pop	r0
    6b26:	cf 91       	pop	r28
    6b28:	df 91       	pop	r29
    6b2a:	08 95       	ret

00006b2c <vdmSum>:

TVP vdmSum(TVP a,TVP b)
{
    6b2c:	df 93       	push	r29
    6b2e:	cf 93       	push	r28
    6b30:	cd b7       	in	r28, 0x3d	; 61
    6b32:	de b7       	in	r29, 0x3e	; 62
    6b34:	2e 97       	sbiw	r28, 0x0e	; 14
    6b36:	0f b6       	in	r0, 0x3f	; 63
    6b38:	f8 94       	cli
    6b3a:	de bf       	out	0x3e, r29	; 62
    6b3c:	0f be       	out	0x3f, r0	; 63
    6b3e:	cd bf       	out	0x3d, r28	; 61
    6b40:	9a 87       	std	Y+10, r25	; 0x0a
    6b42:	89 87       	std	Y+9, r24	; 0x09
    6b44:	7c 87       	std	Y+12, r23	; 0x0c
    6b46:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    6b48:	e9 85       	ldd	r30, Y+9	; 0x09
    6b4a:	fa 85       	ldd	r31, Y+10	; 0x0a
    6b4c:	80 81       	ld	r24, Z
    6b4e:	91 81       	ldd	r25, Z+1	; 0x01
    6b50:	00 97       	sbiw	r24, 0x00	; 0
    6b52:	f1 f0       	breq	.+60     	; 0x6b90 <vdmSum+0x64>
    6b54:	e9 85       	ldd	r30, Y+9	; 0x09
    6b56:	fa 85       	ldd	r31, Y+10	; 0x0a
    6b58:	80 81       	ld	r24, Z
    6b5a:	91 81       	ldd	r25, Z+1	; 0x01
    6b5c:	81 30       	cpi	r24, 0x01	; 1
    6b5e:	91 05       	cpc	r25, r1
    6b60:	b9 f0       	breq	.+46     	; 0x6b90 <vdmSum+0x64>
    6b62:	e9 85       	ldd	r30, Y+9	; 0x09
    6b64:	fa 85       	ldd	r31, Y+10	; 0x0a
    6b66:	80 81       	ld	r24, Z
    6b68:	91 81       	ldd	r25, Z+1	; 0x01
    6b6a:	82 30       	cpi	r24, 0x02	; 2
    6b6c:	91 05       	cpc	r25, r1
    6b6e:	81 f0       	breq	.+32     	; 0x6b90 <vdmSum+0x64>
    6b70:	e9 85       	ldd	r30, Y+9	; 0x09
    6b72:	fa 85       	ldd	r31, Y+10	; 0x0a
    6b74:	80 81       	ld	r24, Z
    6b76:	91 81       	ldd	r25, Z+1	; 0x01
    6b78:	84 30       	cpi	r24, 0x04	; 4
    6b7a:	91 05       	cpc	r25, r1
    6b7c:	49 f0       	breq	.+18     	; 0x6b90 <vdmSum+0x64>
    6b7e:	e9 85       	ldd	r30, Y+9	; 0x09
    6b80:	fa 85       	ldd	r31, Y+10	; 0x0a
    6b82:	80 81       	ld	r24, Z
    6b84:	91 81       	ldd	r25, Z+1	; 0x01
    6b86:	85 30       	cpi	r24, 0x05	; 5
    6b88:	91 05       	cpc	r25, r1
    6b8a:	11 f0       	breq	.+4      	; 0x6b90 <vdmSum+0x64>
    6b8c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    6b90:	eb 85       	ldd	r30, Y+11	; 0x0b
    6b92:	fc 85       	ldd	r31, Y+12	; 0x0c
    6b94:	80 81       	ld	r24, Z
    6b96:	91 81       	ldd	r25, Z+1	; 0x01
    6b98:	00 97       	sbiw	r24, 0x00	; 0
    6b9a:	f1 f0       	breq	.+60     	; 0x6bd8 <vdmSum+0xac>
    6b9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    6b9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6ba0:	80 81       	ld	r24, Z
    6ba2:	91 81       	ldd	r25, Z+1	; 0x01
    6ba4:	81 30       	cpi	r24, 0x01	; 1
    6ba6:	91 05       	cpc	r25, r1
    6ba8:	b9 f0       	breq	.+46     	; 0x6bd8 <vdmSum+0xac>
    6baa:	eb 85       	ldd	r30, Y+11	; 0x0b
    6bac:	fc 85       	ldd	r31, Y+12	; 0x0c
    6bae:	80 81       	ld	r24, Z
    6bb0:	91 81       	ldd	r25, Z+1	; 0x01
    6bb2:	82 30       	cpi	r24, 0x02	; 2
    6bb4:	91 05       	cpc	r25, r1
    6bb6:	81 f0       	breq	.+32     	; 0x6bd8 <vdmSum+0xac>
    6bb8:	eb 85       	ldd	r30, Y+11	; 0x0b
    6bba:	fc 85       	ldd	r31, Y+12	; 0x0c
    6bbc:	80 81       	ld	r24, Z
    6bbe:	91 81       	ldd	r25, Z+1	; 0x01
    6bc0:	84 30       	cpi	r24, 0x04	; 4
    6bc2:	91 05       	cpc	r25, r1
    6bc4:	49 f0       	breq	.+18     	; 0x6bd8 <vdmSum+0xac>
    6bc6:	eb 85       	ldd	r30, Y+11	; 0x0b
    6bc8:	fc 85       	ldd	r31, Y+12	; 0x0c
    6bca:	80 81       	ld	r24, Z
    6bcc:	91 81       	ldd	r25, Z+1	; 0x01
    6bce:	85 30       	cpi	r24, 0x05	; 5
    6bd0:	91 05       	cpc	r25, r1
    6bd2:	11 f0       	breq	.+4      	; 0x6bd8 <vdmSum+0xac>
    6bd4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    6bd8:	89 85       	ldd	r24, Y+9	; 0x09
    6bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bdc:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    6be0:	dc 01       	movw	r26, r24
    6be2:	cb 01       	movw	r24, r22
    6be4:	8d 83       	std	Y+5, r24	; 0x05
    6be6:	9e 83       	std	Y+6, r25	; 0x06
    6be8:	af 83       	std	Y+7, r26	; 0x07
    6bea:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    6bec:	8b 85       	ldd	r24, Y+11	; 0x0b
    6bee:	9c 85       	ldd	r25, Y+12	; 0x0c
    6bf0:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    6bf4:	dc 01       	movw	r26, r24
    6bf6:	cb 01       	movw	r24, r22
    6bf8:	89 83       	std	Y+1, r24	; 0x01
    6bfa:	9a 83       	std	Y+2, r25	; 0x02
    6bfc:	ab 83       	std	Y+3, r26	; 0x03
    6bfe:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    6c00:	e9 85       	ldd	r30, Y+9	; 0x09
    6c02:	fa 85       	ldd	r31, Y+10	; 0x0a
    6c04:	80 81       	ld	r24, Z
    6c06:	91 81       	ldd	r25, Z+1	; 0x01
    6c08:	00 97       	sbiw	r24, 0x00	; 0
    6c0a:	71 f0       	breq	.+28     	; 0x6c28 <vdmSum+0xfc>
    6c0c:	e9 85       	ldd	r30, Y+9	; 0x09
    6c0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    6c10:	80 81       	ld	r24, Z
    6c12:	91 81       	ldd	r25, Z+1	; 0x01
    6c14:	81 30       	cpi	r24, 0x01	; 1
    6c16:	91 05       	cpc	r25, r1
    6c18:	39 f0       	breq	.+14     	; 0x6c28 <vdmSum+0xfc>
    6c1a:	e9 85       	ldd	r30, Y+9	; 0x09
    6c1c:	fa 85       	ldd	r31, Y+10	; 0x0a
    6c1e:	80 81       	ld	r24, Z
    6c20:	91 81       	ldd	r25, Z+1	; 0x01
    6c22:	82 30       	cpi	r24, 0x02	; 2
    6c24:	91 05       	cpc	r25, r1
    6c26:	59 f5       	brne	.+86     	; 0x6c7e <vdmSum+0x152>
    6c28:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c2c:	80 81       	ld	r24, Z
    6c2e:	91 81       	ldd	r25, Z+1	; 0x01
    6c30:	00 97       	sbiw	r24, 0x00	; 0
    6c32:	71 f0       	breq	.+28     	; 0x6c50 <vdmSum+0x124>
    6c34:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c36:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c38:	80 81       	ld	r24, Z
    6c3a:	91 81       	ldd	r25, Z+1	; 0x01
    6c3c:	81 30       	cpi	r24, 0x01	; 1
    6c3e:	91 05       	cpc	r25, r1
    6c40:	39 f0       	breq	.+14     	; 0x6c50 <vdmSum+0x124>
    6c42:	eb 85       	ldd	r30, Y+11	; 0x0b
    6c44:	fc 85       	ldd	r31, Y+12	; 0x0c
    6c46:	80 81       	ld	r24, Z
    6c48:	91 81       	ldd	r25, Z+1	; 0x01
    6c4a:	82 30       	cpi	r24, 0x02	; 2
    6c4c:	91 05       	cpc	r25, r1
    6c4e:	b9 f4       	brne	.+46     	; 0x6c7e <vdmSum+0x152>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av + bv));
    6c50:	6d 81       	ldd	r22, Y+5	; 0x05
    6c52:	7e 81       	ldd	r23, Y+6	; 0x06
    6c54:	8f 81       	ldd	r24, Y+7	; 0x07
    6c56:	98 85       	ldd	r25, Y+8	; 0x08
    6c58:	29 81       	ldd	r18, Y+1	; 0x01
    6c5a:	3a 81       	ldd	r19, Y+2	; 0x02
    6c5c:	4b 81       	ldd	r20, Y+3	; 0x03
    6c5e:	5c 81       	ldd	r21, Y+4	; 0x04
    6c60:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    6c64:	dc 01       	movw	r26, r24
    6c66:	cb 01       	movw	r24, r22
    6c68:	bc 01       	movw	r22, r24
    6c6a:	cd 01       	movw	r24, r26
    6c6c:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    6c70:	dc 01       	movw	r26, r24
    6c72:	cb 01       	movw	r24, r22
    6c74:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    6c78:	9e 87       	std	Y+14, r25	; 0x0e
    6c7a:	8d 87       	std	Y+13, r24	; 0x0d
    6c7c:	12 c0       	rjmp	.+36     	; 0x6ca2 <vdmSum+0x176>

	return newReal(av+bv);
    6c7e:	6d 81       	ldd	r22, Y+5	; 0x05
    6c80:	7e 81       	ldd	r23, Y+6	; 0x06
    6c82:	8f 81       	ldd	r24, Y+7	; 0x07
    6c84:	98 85       	ldd	r25, Y+8	; 0x08
    6c86:	29 81       	ldd	r18, Y+1	; 0x01
    6c88:	3a 81       	ldd	r19, Y+2	; 0x02
    6c8a:	4b 81       	ldd	r20, Y+3	; 0x03
    6c8c:	5c 81       	ldd	r21, Y+4	; 0x04
    6c8e:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    6c92:	dc 01       	movw	r26, r24
    6c94:	cb 01       	movw	r24, r22
    6c96:	bc 01       	movw	r22, r24
    6c98:	cd 01       	movw	r24, r26
    6c9a:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    6c9e:	9e 87       	std	Y+14, r25	; 0x0e
    6ca0:	8d 87       	std	Y+13, r24	; 0x0d
    6ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    6ca6:	2e 96       	adiw	r28, 0x0e	; 14
    6ca8:	0f b6       	in	r0, 0x3f	; 63
    6caa:	f8 94       	cli
    6cac:	de bf       	out	0x3e, r29	; 62
    6cae:	0f be       	out	0x3f, r0	; 63
    6cb0:	cd bf       	out	0x3d, r28	; 61
    6cb2:	cf 91       	pop	r28
    6cb4:	df 91       	pop	r29
    6cb6:	08 95       	ret

00006cb8 <vdmSumGC>:

TVP vdmSumGC(TVP a,TVP b, TVP *from)
{
    6cb8:	df 93       	push	r29
    6cba:	cf 93       	push	r28
    6cbc:	cd b7       	in	r28, 0x3d	; 61
    6cbe:	de b7       	in	r29, 0x3e	; 62
    6cc0:	60 97       	sbiw	r28, 0x10	; 16
    6cc2:	0f b6       	in	r0, 0x3f	; 63
    6cc4:	f8 94       	cli
    6cc6:	de bf       	out	0x3e, r29	; 62
    6cc8:	0f be       	out	0x3f, r0	; 63
    6cca:	cd bf       	out	0x3d, r28	; 61
    6ccc:	9a 87       	std	Y+10, r25	; 0x0a
    6cce:	89 87       	std	Y+9, r24	; 0x09
    6cd0:	7c 87       	std	Y+12, r23	; 0x0c
    6cd2:	6b 87       	std	Y+11, r22	; 0x0b
    6cd4:	5e 87       	std	Y+14, r21	; 0x0e
    6cd6:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    6cd8:	e9 85       	ldd	r30, Y+9	; 0x09
    6cda:	fa 85       	ldd	r31, Y+10	; 0x0a
    6cdc:	80 81       	ld	r24, Z
    6cde:	91 81       	ldd	r25, Z+1	; 0x01
    6ce0:	00 97       	sbiw	r24, 0x00	; 0
    6ce2:	f1 f0       	breq	.+60     	; 0x6d20 <vdmSumGC+0x68>
    6ce4:	e9 85       	ldd	r30, Y+9	; 0x09
    6ce6:	fa 85       	ldd	r31, Y+10	; 0x0a
    6ce8:	80 81       	ld	r24, Z
    6cea:	91 81       	ldd	r25, Z+1	; 0x01
    6cec:	81 30       	cpi	r24, 0x01	; 1
    6cee:	91 05       	cpc	r25, r1
    6cf0:	b9 f0       	breq	.+46     	; 0x6d20 <vdmSumGC+0x68>
    6cf2:	e9 85       	ldd	r30, Y+9	; 0x09
    6cf4:	fa 85       	ldd	r31, Y+10	; 0x0a
    6cf6:	80 81       	ld	r24, Z
    6cf8:	91 81       	ldd	r25, Z+1	; 0x01
    6cfa:	82 30       	cpi	r24, 0x02	; 2
    6cfc:	91 05       	cpc	r25, r1
    6cfe:	81 f0       	breq	.+32     	; 0x6d20 <vdmSumGC+0x68>
    6d00:	e9 85       	ldd	r30, Y+9	; 0x09
    6d02:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d04:	80 81       	ld	r24, Z
    6d06:	91 81       	ldd	r25, Z+1	; 0x01
    6d08:	84 30       	cpi	r24, 0x04	; 4
    6d0a:	91 05       	cpc	r25, r1
    6d0c:	49 f0       	breq	.+18     	; 0x6d20 <vdmSumGC+0x68>
    6d0e:	e9 85       	ldd	r30, Y+9	; 0x09
    6d10:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d12:	80 81       	ld	r24, Z
    6d14:	91 81       	ldd	r25, Z+1	; 0x01
    6d16:	85 30       	cpi	r24, 0x05	; 5
    6d18:	91 05       	cpc	r25, r1
    6d1a:	11 f0       	breq	.+4      	; 0x6d20 <vdmSumGC+0x68>
    6d1c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    6d20:	eb 85       	ldd	r30, Y+11	; 0x0b
    6d22:	fc 85       	ldd	r31, Y+12	; 0x0c
    6d24:	80 81       	ld	r24, Z
    6d26:	91 81       	ldd	r25, Z+1	; 0x01
    6d28:	00 97       	sbiw	r24, 0x00	; 0
    6d2a:	f1 f0       	breq	.+60     	; 0x6d68 <vdmSumGC+0xb0>
    6d2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    6d2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6d30:	80 81       	ld	r24, Z
    6d32:	91 81       	ldd	r25, Z+1	; 0x01
    6d34:	81 30       	cpi	r24, 0x01	; 1
    6d36:	91 05       	cpc	r25, r1
    6d38:	b9 f0       	breq	.+46     	; 0x6d68 <vdmSumGC+0xb0>
    6d3a:	eb 85       	ldd	r30, Y+11	; 0x0b
    6d3c:	fc 85       	ldd	r31, Y+12	; 0x0c
    6d3e:	80 81       	ld	r24, Z
    6d40:	91 81       	ldd	r25, Z+1	; 0x01
    6d42:	82 30       	cpi	r24, 0x02	; 2
    6d44:	91 05       	cpc	r25, r1
    6d46:	81 f0       	breq	.+32     	; 0x6d68 <vdmSumGC+0xb0>
    6d48:	eb 85       	ldd	r30, Y+11	; 0x0b
    6d4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    6d4c:	80 81       	ld	r24, Z
    6d4e:	91 81       	ldd	r25, Z+1	; 0x01
    6d50:	84 30       	cpi	r24, 0x04	; 4
    6d52:	91 05       	cpc	r25, r1
    6d54:	49 f0       	breq	.+18     	; 0x6d68 <vdmSumGC+0xb0>
    6d56:	eb 85       	ldd	r30, Y+11	; 0x0b
    6d58:	fc 85       	ldd	r31, Y+12	; 0x0c
    6d5a:	80 81       	ld	r24, Z
    6d5c:	91 81       	ldd	r25, Z+1	; 0x01
    6d5e:	85 30       	cpi	r24, 0x05	; 5
    6d60:	91 05       	cpc	r25, r1
    6d62:	11 f0       	breq	.+4      	; 0x6d68 <vdmSumGC+0xb0>
    6d64:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    6d68:	89 85       	ldd	r24, Y+9	; 0x09
    6d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d6c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    6d70:	dc 01       	movw	r26, r24
    6d72:	cb 01       	movw	r24, r22
    6d74:	8d 83       	std	Y+5, r24	; 0x05
    6d76:	9e 83       	std	Y+6, r25	; 0x06
    6d78:	af 83       	std	Y+7, r26	; 0x07
    6d7a:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    6d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d80:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    6d84:	dc 01       	movw	r26, r24
    6d86:	cb 01       	movw	r24, r22
    6d88:	89 83       	std	Y+1, r24	; 0x01
    6d8a:	9a 83       	std	Y+2, r25	; 0x02
    6d8c:	ab 83       	std	Y+3, r26	; 0x03
    6d8e:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    6d90:	e9 85       	ldd	r30, Y+9	; 0x09
    6d92:	fa 85       	ldd	r31, Y+10	; 0x0a
    6d94:	80 81       	ld	r24, Z
    6d96:	91 81       	ldd	r25, Z+1	; 0x01
    6d98:	00 97       	sbiw	r24, 0x00	; 0
    6d9a:	71 f0       	breq	.+28     	; 0x6db8 <vdmSumGC+0x100>
    6d9c:	e9 85       	ldd	r30, Y+9	; 0x09
    6d9e:	fa 85       	ldd	r31, Y+10	; 0x0a
    6da0:	80 81       	ld	r24, Z
    6da2:	91 81       	ldd	r25, Z+1	; 0x01
    6da4:	81 30       	cpi	r24, 0x01	; 1
    6da6:	91 05       	cpc	r25, r1
    6da8:	39 f0       	breq	.+14     	; 0x6db8 <vdmSumGC+0x100>
    6daa:	e9 85       	ldd	r30, Y+9	; 0x09
    6dac:	fa 85       	ldd	r31, Y+10	; 0x0a
    6dae:	80 81       	ld	r24, Z
    6db0:	91 81       	ldd	r25, Z+1	; 0x01
    6db2:	82 30       	cpi	r24, 0x02	; 2
    6db4:	91 05       	cpc	r25, r1
    6db6:	71 f5       	brne	.+92     	; 0x6e14 <vdmSumGC+0x15c>
    6db8:	eb 85       	ldd	r30, Y+11	; 0x0b
    6dba:	fc 85       	ldd	r31, Y+12	; 0x0c
    6dbc:	80 81       	ld	r24, Z
    6dbe:	91 81       	ldd	r25, Z+1	; 0x01
    6dc0:	00 97       	sbiw	r24, 0x00	; 0
    6dc2:	71 f0       	breq	.+28     	; 0x6de0 <vdmSumGC+0x128>
    6dc4:	eb 85       	ldd	r30, Y+11	; 0x0b
    6dc6:	fc 85       	ldd	r31, Y+12	; 0x0c
    6dc8:	80 81       	ld	r24, Z
    6dca:	91 81       	ldd	r25, Z+1	; 0x01
    6dcc:	81 30       	cpi	r24, 0x01	; 1
    6dce:	91 05       	cpc	r25, r1
    6dd0:	39 f0       	breq	.+14     	; 0x6de0 <vdmSumGC+0x128>
    6dd2:	eb 85       	ldd	r30, Y+11	; 0x0b
    6dd4:	fc 85       	ldd	r31, Y+12	; 0x0c
    6dd6:	80 81       	ld	r24, Z
    6dd8:	91 81       	ldd	r25, Z+1	; 0x01
    6dda:	82 30       	cpi	r24, 0x02	; 2
    6ddc:	91 05       	cpc	r25, r1
    6dde:	d1 f4       	brne	.+52     	; 0x6e14 <vdmSumGC+0x15c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av + bv), from);
    6de0:	6d 81       	ldd	r22, Y+5	; 0x05
    6de2:	7e 81       	ldd	r23, Y+6	; 0x06
    6de4:	8f 81       	ldd	r24, Y+7	; 0x07
    6de6:	98 85       	ldd	r25, Y+8	; 0x08
    6de8:	29 81       	ldd	r18, Y+1	; 0x01
    6dea:	3a 81       	ldd	r19, Y+2	; 0x02
    6dec:	4b 81       	ldd	r20, Y+3	; 0x03
    6dee:	5c 81       	ldd	r21, Y+4	; 0x04
    6df0:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    6df4:	dc 01       	movw	r26, r24
    6df6:	cb 01       	movw	r24, r22
    6df8:	bc 01       	movw	r22, r24
    6dfa:	cd 01       	movw	r24, r26
    6dfc:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    6e00:	dc 01       	movw	r26, r24
    6e02:	cb 01       	movw	r24, r22
    6e04:	2d 85       	ldd	r18, Y+13	; 0x0d
    6e06:	3e 85       	ldd	r19, Y+14	; 0x0e
    6e08:	b9 01       	movw	r22, r18
    6e0a:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    6e0e:	98 8b       	std	Y+16, r25	; 0x10
    6e10:	8f 87       	std	Y+15, r24	; 0x0f
    6e12:	15 c0       	rjmp	.+42     	; 0x6e3e <vdmSumGC+0x186>

		return newRealGC(av+bv, from);
    6e14:	6d 81       	ldd	r22, Y+5	; 0x05
    6e16:	7e 81       	ldd	r23, Y+6	; 0x06
    6e18:	8f 81       	ldd	r24, Y+7	; 0x07
    6e1a:	98 85       	ldd	r25, Y+8	; 0x08
    6e1c:	29 81       	ldd	r18, Y+1	; 0x01
    6e1e:	3a 81       	ldd	r19, Y+2	; 0x02
    6e20:	4b 81       	ldd	r20, Y+3	; 0x03
    6e22:	5c 81       	ldd	r21, Y+4	; 0x04
    6e24:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <__addsf3>
    6e28:	dc 01       	movw	r26, r24
    6e2a:	cb 01       	movw	r24, r22
    6e2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    6e2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    6e30:	bc 01       	movw	r22, r24
    6e32:	cd 01       	movw	r24, r26
    6e34:	a9 01       	movw	r20, r18
    6e36:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
    6e3a:	98 8b       	std	Y+16, r25	; 0x10
    6e3c:	8f 87       	std	Y+15, r24	; 0x0f
    6e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e40:	98 89       	ldd	r25, Y+16	; 0x10
}
    6e42:	60 96       	adiw	r28, 0x10	; 16
    6e44:	0f b6       	in	r0, 0x3f	; 63
    6e46:	f8 94       	cli
    6e48:	de bf       	out	0x3e, r29	; 62
    6e4a:	0f be       	out	0x3f, r0	; 63
    6e4c:	cd bf       	out	0x3d, r28	; 61
    6e4e:	cf 91       	pop	r28
    6e50:	df 91       	pop	r29
    6e52:	08 95       	ret

00006e54 <vdmDifference>:

TVP vdmDifference(TVP a,TVP b)
{
    6e54:	df 93       	push	r29
    6e56:	cf 93       	push	r28
    6e58:	cd b7       	in	r28, 0x3d	; 61
    6e5a:	de b7       	in	r29, 0x3e	; 62
    6e5c:	2e 97       	sbiw	r28, 0x0e	; 14
    6e5e:	0f b6       	in	r0, 0x3f	; 63
    6e60:	f8 94       	cli
    6e62:	de bf       	out	0x3e, r29	; 62
    6e64:	0f be       	out	0x3f, r0	; 63
    6e66:	cd bf       	out	0x3d, r28	; 61
    6e68:	9a 87       	std	Y+10, r25	; 0x0a
    6e6a:	89 87       	std	Y+9, r24	; 0x09
    6e6c:	7c 87       	std	Y+12, r23	; 0x0c
    6e6e:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    6e70:	e9 85       	ldd	r30, Y+9	; 0x09
    6e72:	fa 85       	ldd	r31, Y+10	; 0x0a
    6e74:	80 81       	ld	r24, Z
    6e76:	91 81       	ldd	r25, Z+1	; 0x01
    6e78:	00 97       	sbiw	r24, 0x00	; 0
    6e7a:	f1 f0       	breq	.+60     	; 0x6eb8 <vdmDifference+0x64>
    6e7c:	e9 85       	ldd	r30, Y+9	; 0x09
    6e7e:	fa 85       	ldd	r31, Y+10	; 0x0a
    6e80:	80 81       	ld	r24, Z
    6e82:	91 81       	ldd	r25, Z+1	; 0x01
    6e84:	81 30       	cpi	r24, 0x01	; 1
    6e86:	91 05       	cpc	r25, r1
    6e88:	b9 f0       	breq	.+46     	; 0x6eb8 <vdmDifference+0x64>
    6e8a:	e9 85       	ldd	r30, Y+9	; 0x09
    6e8c:	fa 85       	ldd	r31, Y+10	; 0x0a
    6e8e:	80 81       	ld	r24, Z
    6e90:	91 81       	ldd	r25, Z+1	; 0x01
    6e92:	82 30       	cpi	r24, 0x02	; 2
    6e94:	91 05       	cpc	r25, r1
    6e96:	81 f0       	breq	.+32     	; 0x6eb8 <vdmDifference+0x64>
    6e98:	e9 85       	ldd	r30, Y+9	; 0x09
    6e9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    6e9c:	80 81       	ld	r24, Z
    6e9e:	91 81       	ldd	r25, Z+1	; 0x01
    6ea0:	84 30       	cpi	r24, 0x04	; 4
    6ea2:	91 05       	cpc	r25, r1
    6ea4:	49 f0       	breq	.+18     	; 0x6eb8 <vdmDifference+0x64>
    6ea6:	e9 85       	ldd	r30, Y+9	; 0x09
    6ea8:	fa 85       	ldd	r31, Y+10	; 0x0a
    6eaa:	80 81       	ld	r24, Z
    6eac:	91 81       	ldd	r25, Z+1	; 0x01
    6eae:	85 30       	cpi	r24, 0x05	; 5
    6eb0:	91 05       	cpc	r25, r1
    6eb2:	11 f0       	breq	.+4      	; 0x6eb8 <vdmDifference+0x64>
    6eb4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    6eb8:	eb 85       	ldd	r30, Y+11	; 0x0b
    6eba:	fc 85       	ldd	r31, Y+12	; 0x0c
    6ebc:	80 81       	ld	r24, Z
    6ebe:	91 81       	ldd	r25, Z+1	; 0x01
    6ec0:	00 97       	sbiw	r24, 0x00	; 0
    6ec2:	f1 f0       	breq	.+60     	; 0x6f00 <vdmDifference+0xac>
    6ec4:	eb 85       	ldd	r30, Y+11	; 0x0b
    6ec6:	fc 85       	ldd	r31, Y+12	; 0x0c
    6ec8:	80 81       	ld	r24, Z
    6eca:	91 81       	ldd	r25, Z+1	; 0x01
    6ecc:	81 30       	cpi	r24, 0x01	; 1
    6ece:	91 05       	cpc	r25, r1
    6ed0:	b9 f0       	breq	.+46     	; 0x6f00 <vdmDifference+0xac>
    6ed2:	eb 85       	ldd	r30, Y+11	; 0x0b
    6ed4:	fc 85       	ldd	r31, Y+12	; 0x0c
    6ed6:	80 81       	ld	r24, Z
    6ed8:	91 81       	ldd	r25, Z+1	; 0x01
    6eda:	82 30       	cpi	r24, 0x02	; 2
    6edc:	91 05       	cpc	r25, r1
    6ede:	81 f0       	breq	.+32     	; 0x6f00 <vdmDifference+0xac>
    6ee0:	eb 85       	ldd	r30, Y+11	; 0x0b
    6ee2:	fc 85       	ldd	r31, Y+12	; 0x0c
    6ee4:	80 81       	ld	r24, Z
    6ee6:	91 81       	ldd	r25, Z+1	; 0x01
    6ee8:	84 30       	cpi	r24, 0x04	; 4
    6eea:	91 05       	cpc	r25, r1
    6eec:	49 f0       	breq	.+18     	; 0x6f00 <vdmDifference+0xac>
    6eee:	eb 85       	ldd	r30, Y+11	; 0x0b
    6ef0:	fc 85       	ldd	r31, Y+12	; 0x0c
    6ef2:	80 81       	ld	r24, Z
    6ef4:	91 81       	ldd	r25, Z+1	; 0x01
    6ef6:	85 30       	cpi	r24, 0x05	; 5
    6ef8:	91 05       	cpc	r25, r1
    6efa:	11 f0       	breq	.+4      	; 0x6f00 <vdmDifference+0xac>
    6efc:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    6f00:	89 85       	ldd	r24, Y+9	; 0x09
    6f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f04:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    6f08:	dc 01       	movw	r26, r24
    6f0a:	cb 01       	movw	r24, r22
    6f0c:	8d 83       	std	Y+5, r24	; 0x05
    6f0e:	9e 83       	std	Y+6, r25	; 0x06
    6f10:	af 83       	std	Y+7, r26	; 0x07
    6f12:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    6f14:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f16:	9c 85       	ldd	r25, Y+12	; 0x0c
    6f18:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    6f1c:	dc 01       	movw	r26, r24
    6f1e:	cb 01       	movw	r24, r22
    6f20:	89 83       	std	Y+1, r24	; 0x01
    6f22:	9a 83       	std	Y+2, r25	; 0x02
    6f24:	ab 83       	std	Y+3, r26	; 0x03
    6f26:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    6f28:	e9 85       	ldd	r30, Y+9	; 0x09
    6f2a:	fa 85       	ldd	r31, Y+10	; 0x0a
    6f2c:	80 81       	ld	r24, Z
    6f2e:	91 81       	ldd	r25, Z+1	; 0x01
    6f30:	00 97       	sbiw	r24, 0x00	; 0
    6f32:	71 f0       	breq	.+28     	; 0x6f50 <vdmDifference+0xfc>
    6f34:	e9 85       	ldd	r30, Y+9	; 0x09
    6f36:	fa 85       	ldd	r31, Y+10	; 0x0a
    6f38:	80 81       	ld	r24, Z
    6f3a:	91 81       	ldd	r25, Z+1	; 0x01
    6f3c:	81 30       	cpi	r24, 0x01	; 1
    6f3e:	91 05       	cpc	r25, r1
    6f40:	39 f0       	breq	.+14     	; 0x6f50 <vdmDifference+0xfc>
    6f42:	e9 85       	ldd	r30, Y+9	; 0x09
    6f44:	fa 85       	ldd	r31, Y+10	; 0x0a
    6f46:	80 81       	ld	r24, Z
    6f48:	91 81       	ldd	r25, Z+1	; 0x01
    6f4a:	82 30       	cpi	r24, 0x02	; 2
    6f4c:	91 05       	cpc	r25, r1
    6f4e:	59 f5       	brne	.+86     	; 0x6fa6 <vdmDifference+0x152>
    6f50:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f52:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f54:	80 81       	ld	r24, Z
    6f56:	91 81       	ldd	r25, Z+1	; 0x01
    6f58:	00 97       	sbiw	r24, 0x00	; 0
    6f5a:	71 f0       	breq	.+28     	; 0x6f78 <vdmDifference+0x124>
    6f5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f60:	80 81       	ld	r24, Z
    6f62:	91 81       	ldd	r25, Z+1	; 0x01
    6f64:	81 30       	cpi	r24, 0x01	; 1
    6f66:	91 05       	cpc	r25, r1
    6f68:	39 f0       	breq	.+14     	; 0x6f78 <vdmDifference+0x124>
    6f6a:	eb 85       	ldd	r30, Y+11	; 0x0b
    6f6c:	fc 85       	ldd	r31, Y+12	; 0x0c
    6f6e:	80 81       	ld	r24, Z
    6f70:	91 81       	ldd	r25, Z+1	; 0x01
    6f72:	82 30       	cpi	r24, 0x02	; 2
    6f74:	91 05       	cpc	r25, r1
    6f76:	b9 f4       	brne	.+46     	; 0x6fa6 <vdmDifference+0x152>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av - bv));
    6f78:	6d 81       	ldd	r22, Y+5	; 0x05
    6f7a:	7e 81       	ldd	r23, Y+6	; 0x06
    6f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    6f7e:	98 85       	ldd	r25, Y+8	; 0x08
    6f80:	29 81       	ldd	r18, Y+1	; 0x01
    6f82:	3a 81       	ldd	r19, Y+2	; 0x02
    6f84:	4b 81       	ldd	r20, Y+3	; 0x03
    6f86:	5c 81       	ldd	r21, Y+4	; 0x04
    6f88:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    6f8c:	dc 01       	movw	r26, r24
    6f8e:	cb 01       	movw	r24, r22
    6f90:	bc 01       	movw	r22, r24
    6f92:	cd 01       	movw	r24, r26
    6f94:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    6f98:	dc 01       	movw	r26, r24
    6f9a:	cb 01       	movw	r24, r22
    6f9c:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    6fa0:	9e 87       	std	Y+14, r25	; 0x0e
    6fa2:	8d 87       	std	Y+13, r24	; 0x0d
    6fa4:	12 c0       	rjmp	.+36     	; 0x6fca <vdmDifference+0x176>

	return newReal(av - bv);
    6fa6:	6d 81       	ldd	r22, Y+5	; 0x05
    6fa8:	7e 81       	ldd	r23, Y+6	; 0x06
    6faa:	8f 81       	ldd	r24, Y+7	; 0x07
    6fac:	98 85       	ldd	r25, Y+8	; 0x08
    6fae:	29 81       	ldd	r18, Y+1	; 0x01
    6fb0:	3a 81       	ldd	r19, Y+2	; 0x02
    6fb2:	4b 81       	ldd	r20, Y+3	; 0x03
    6fb4:	5c 81       	ldd	r21, Y+4	; 0x04
    6fb6:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    6fba:	dc 01       	movw	r26, r24
    6fbc:	cb 01       	movw	r24, r22
    6fbe:	bc 01       	movw	r22, r24
    6fc0:	cd 01       	movw	r24, r26
    6fc2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    6fc6:	9e 87       	std	Y+14, r25	; 0x0e
    6fc8:	8d 87       	std	Y+13, r24	; 0x0d
    6fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    6fce:	2e 96       	adiw	r28, 0x0e	; 14
    6fd0:	0f b6       	in	r0, 0x3f	; 63
    6fd2:	f8 94       	cli
    6fd4:	de bf       	out	0x3e, r29	; 62
    6fd6:	0f be       	out	0x3f, r0	; 63
    6fd8:	cd bf       	out	0x3d, r28	; 61
    6fda:	cf 91       	pop	r28
    6fdc:	df 91       	pop	r29
    6fde:	08 95       	ret

00006fe0 <vdmDifferenceGC>:

TVP vdmDifferenceGC(TVP a,TVP b, TVP *from)
{
    6fe0:	df 93       	push	r29
    6fe2:	cf 93       	push	r28
    6fe4:	cd b7       	in	r28, 0x3d	; 61
    6fe6:	de b7       	in	r29, 0x3e	; 62
    6fe8:	60 97       	sbiw	r28, 0x10	; 16
    6fea:	0f b6       	in	r0, 0x3f	; 63
    6fec:	f8 94       	cli
    6fee:	de bf       	out	0x3e, r29	; 62
    6ff0:	0f be       	out	0x3f, r0	; 63
    6ff2:	cd bf       	out	0x3d, r28	; 61
    6ff4:	9a 87       	std	Y+10, r25	; 0x0a
    6ff6:	89 87       	std	Y+9, r24	; 0x09
    6ff8:	7c 87       	std	Y+12, r23	; 0x0c
    6ffa:	6b 87       	std	Y+11, r22	; 0x0b
    6ffc:	5e 87       	std	Y+14, r21	; 0x0e
    6ffe:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    7000:	e9 85       	ldd	r30, Y+9	; 0x09
    7002:	fa 85       	ldd	r31, Y+10	; 0x0a
    7004:	80 81       	ld	r24, Z
    7006:	91 81       	ldd	r25, Z+1	; 0x01
    7008:	00 97       	sbiw	r24, 0x00	; 0
    700a:	f1 f0       	breq	.+60     	; 0x7048 <vdmDifferenceGC+0x68>
    700c:	e9 85       	ldd	r30, Y+9	; 0x09
    700e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7010:	80 81       	ld	r24, Z
    7012:	91 81       	ldd	r25, Z+1	; 0x01
    7014:	81 30       	cpi	r24, 0x01	; 1
    7016:	91 05       	cpc	r25, r1
    7018:	b9 f0       	breq	.+46     	; 0x7048 <vdmDifferenceGC+0x68>
    701a:	e9 85       	ldd	r30, Y+9	; 0x09
    701c:	fa 85       	ldd	r31, Y+10	; 0x0a
    701e:	80 81       	ld	r24, Z
    7020:	91 81       	ldd	r25, Z+1	; 0x01
    7022:	82 30       	cpi	r24, 0x02	; 2
    7024:	91 05       	cpc	r25, r1
    7026:	81 f0       	breq	.+32     	; 0x7048 <vdmDifferenceGC+0x68>
    7028:	e9 85       	ldd	r30, Y+9	; 0x09
    702a:	fa 85       	ldd	r31, Y+10	; 0x0a
    702c:	80 81       	ld	r24, Z
    702e:	91 81       	ldd	r25, Z+1	; 0x01
    7030:	84 30       	cpi	r24, 0x04	; 4
    7032:	91 05       	cpc	r25, r1
    7034:	49 f0       	breq	.+18     	; 0x7048 <vdmDifferenceGC+0x68>
    7036:	e9 85       	ldd	r30, Y+9	; 0x09
    7038:	fa 85       	ldd	r31, Y+10	; 0x0a
    703a:	80 81       	ld	r24, Z
    703c:	91 81       	ldd	r25, Z+1	; 0x01
    703e:	85 30       	cpi	r24, 0x05	; 5
    7040:	91 05       	cpc	r25, r1
    7042:	11 f0       	breq	.+4      	; 0x7048 <vdmDifferenceGC+0x68>
    7044:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7048:	eb 85       	ldd	r30, Y+11	; 0x0b
    704a:	fc 85       	ldd	r31, Y+12	; 0x0c
    704c:	80 81       	ld	r24, Z
    704e:	91 81       	ldd	r25, Z+1	; 0x01
    7050:	00 97       	sbiw	r24, 0x00	; 0
    7052:	f1 f0       	breq	.+60     	; 0x7090 <vdmDifferenceGC+0xb0>
    7054:	eb 85       	ldd	r30, Y+11	; 0x0b
    7056:	fc 85       	ldd	r31, Y+12	; 0x0c
    7058:	80 81       	ld	r24, Z
    705a:	91 81       	ldd	r25, Z+1	; 0x01
    705c:	81 30       	cpi	r24, 0x01	; 1
    705e:	91 05       	cpc	r25, r1
    7060:	b9 f0       	breq	.+46     	; 0x7090 <vdmDifferenceGC+0xb0>
    7062:	eb 85       	ldd	r30, Y+11	; 0x0b
    7064:	fc 85       	ldd	r31, Y+12	; 0x0c
    7066:	80 81       	ld	r24, Z
    7068:	91 81       	ldd	r25, Z+1	; 0x01
    706a:	82 30       	cpi	r24, 0x02	; 2
    706c:	91 05       	cpc	r25, r1
    706e:	81 f0       	breq	.+32     	; 0x7090 <vdmDifferenceGC+0xb0>
    7070:	eb 85       	ldd	r30, Y+11	; 0x0b
    7072:	fc 85       	ldd	r31, Y+12	; 0x0c
    7074:	80 81       	ld	r24, Z
    7076:	91 81       	ldd	r25, Z+1	; 0x01
    7078:	84 30       	cpi	r24, 0x04	; 4
    707a:	91 05       	cpc	r25, r1
    707c:	49 f0       	breq	.+18     	; 0x7090 <vdmDifferenceGC+0xb0>
    707e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7080:	fc 85       	ldd	r31, Y+12	; 0x0c
    7082:	80 81       	ld	r24, Z
    7084:	91 81       	ldd	r25, Z+1	; 0x01
    7086:	85 30       	cpi	r24, 0x05	; 5
    7088:	91 05       	cpc	r25, r1
    708a:	11 f0       	breq	.+4      	; 0x7090 <vdmDifferenceGC+0xb0>
    708c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    7090:	89 85       	ldd	r24, Y+9	; 0x09
    7092:	9a 85       	ldd	r25, Y+10	; 0x0a
    7094:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7098:	dc 01       	movw	r26, r24
    709a:	cb 01       	movw	r24, r22
    709c:	8d 83       	std	Y+5, r24	; 0x05
    709e:	9e 83       	std	Y+6, r25	; 0x06
    70a0:	af 83       	std	Y+7, r26	; 0x07
    70a2:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    70a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    70a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    70a8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    70ac:	dc 01       	movw	r26, r24
    70ae:	cb 01       	movw	r24, r22
    70b0:	89 83       	std	Y+1, r24	; 0x01
    70b2:	9a 83       	std	Y+2, r25	; 0x02
    70b4:	ab 83       	std	Y+3, r26	; 0x03
    70b6:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    70b8:	e9 85       	ldd	r30, Y+9	; 0x09
    70ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    70bc:	80 81       	ld	r24, Z
    70be:	91 81       	ldd	r25, Z+1	; 0x01
    70c0:	00 97       	sbiw	r24, 0x00	; 0
    70c2:	71 f0       	breq	.+28     	; 0x70e0 <vdmDifferenceGC+0x100>
    70c4:	e9 85       	ldd	r30, Y+9	; 0x09
    70c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    70c8:	80 81       	ld	r24, Z
    70ca:	91 81       	ldd	r25, Z+1	; 0x01
    70cc:	81 30       	cpi	r24, 0x01	; 1
    70ce:	91 05       	cpc	r25, r1
    70d0:	39 f0       	breq	.+14     	; 0x70e0 <vdmDifferenceGC+0x100>
    70d2:	e9 85       	ldd	r30, Y+9	; 0x09
    70d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    70d6:	80 81       	ld	r24, Z
    70d8:	91 81       	ldd	r25, Z+1	; 0x01
    70da:	82 30       	cpi	r24, 0x02	; 2
    70dc:	91 05       	cpc	r25, r1
    70de:	71 f5       	brne	.+92     	; 0x713c <vdmDifferenceGC+0x15c>
    70e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    70e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    70e4:	80 81       	ld	r24, Z
    70e6:	91 81       	ldd	r25, Z+1	; 0x01
    70e8:	00 97       	sbiw	r24, 0x00	; 0
    70ea:	71 f0       	breq	.+28     	; 0x7108 <vdmDifferenceGC+0x128>
    70ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    70ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    70f0:	80 81       	ld	r24, Z
    70f2:	91 81       	ldd	r25, Z+1	; 0x01
    70f4:	81 30       	cpi	r24, 0x01	; 1
    70f6:	91 05       	cpc	r25, r1
    70f8:	39 f0       	breq	.+14     	; 0x7108 <vdmDifferenceGC+0x128>
    70fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    70fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    70fe:	80 81       	ld	r24, Z
    7100:	91 81       	ldd	r25, Z+1	; 0x01
    7102:	82 30       	cpi	r24, 0x02	; 2
    7104:	91 05       	cpc	r25, r1
    7106:	d1 f4       	brne	.+52     	; 0x713c <vdmDifferenceGC+0x15c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av - bv), from);
    7108:	6d 81       	ldd	r22, Y+5	; 0x05
    710a:	7e 81       	ldd	r23, Y+6	; 0x06
    710c:	8f 81       	ldd	r24, Y+7	; 0x07
    710e:	98 85       	ldd	r25, Y+8	; 0x08
    7110:	29 81       	ldd	r18, Y+1	; 0x01
    7112:	3a 81       	ldd	r19, Y+2	; 0x02
    7114:	4b 81       	ldd	r20, Y+3	; 0x03
    7116:	5c 81       	ldd	r21, Y+4	; 0x04
    7118:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    711c:	dc 01       	movw	r26, r24
    711e:	cb 01       	movw	r24, r22
    7120:	bc 01       	movw	r22, r24
    7122:	cd 01       	movw	r24, r26
    7124:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7128:	dc 01       	movw	r26, r24
    712a:	cb 01       	movw	r24, r22
    712c:	2d 85       	ldd	r18, Y+13	; 0x0d
    712e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7130:	b9 01       	movw	r22, r18
    7132:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    7136:	98 8b       	std	Y+16, r25	; 0x10
    7138:	8f 87       	std	Y+15, r24	; 0x0f
    713a:	15 c0       	rjmp	.+42     	; 0x7166 <vdmDifferenceGC+0x186>

		return newRealGC(av - bv, from);
    713c:	6d 81       	ldd	r22, Y+5	; 0x05
    713e:	7e 81       	ldd	r23, Y+6	; 0x06
    7140:	8f 81       	ldd	r24, Y+7	; 0x07
    7142:	98 85       	ldd	r25, Y+8	; 0x08
    7144:	29 81       	ldd	r18, Y+1	; 0x01
    7146:	3a 81       	ldd	r19, Y+2	; 0x02
    7148:	4b 81       	ldd	r20, Y+3	; 0x03
    714a:	5c 81       	ldd	r21, Y+4	; 0x04
    714c:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    7150:	dc 01       	movw	r26, r24
    7152:	cb 01       	movw	r24, r22
    7154:	2d 85       	ldd	r18, Y+13	; 0x0d
    7156:	3e 85       	ldd	r19, Y+14	; 0x0e
    7158:	bc 01       	movw	r22, r24
    715a:	cd 01       	movw	r24, r26
    715c:	a9 01       	movw	r20, r18
    715e:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
    7162:	98 8b       	std	Y+16, r25	; 0x10
    7164:	8f 87       	std	Y+15, r24	; 0x0f
    7166:	8f 85       	ldd	r24, Y+15	; 0x0f
    7168:	98 89       	ldd	r25, Y+16	; 0x10
}
    716a:	60 96       	adiw	r28, 0x10	; 16
    716c:	0f b6       	in	r0, 0x3f	; 63
    716e:	f8 94       	cli
    7170:	de bf       	out	0x3e, r29	; 62
    7172:	0f be       	out	0x3f, r0	; 63
    7174:	cd bf       	out	0x3d, r28	; 61
    7176:	cf 91       	pop	r28
    7178:	df 91       	pop	r29
    717a:	08 95       	ret

0000717c <vdmProduct>:

TVP vdmProduct(TVP a,TVP b)
{
    717c:	df 93       	push	r29
    717e:	cf 93       	push	r28
    7180:	cd b7       	in	r28, 0x3d	; 61
    7182:	de b7       	in	r29, 0x3e	; 62
    7184:	2e 97       	sbiw	r28, 0x0e	; 14
    7186:	0f b6       	in	r0, 0x3f	; 63
    7188:	f8 94       	cli
    718a:	de bf       	out	0x3e, r29	; 62
    718c:	0f be       	out	0x3f, r0	; 63
    718e:	cd bf       	out	0x3d, r28	; 61
    7190:	9a 87       	std	Y+10, r25	; 0x0a
    7192:	89 87       	std	Y+9, r24	; 0x09
    7194:	7c 87       	std	Y+12, r23	; 0x0c
    7196:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    7198:	e9 85       	ldd	r30, Y+9	; 0x09
    719a:	fa 85       	ldd	r31, Y+10	; 0x0a
    719c:	80 81       	ld	r24, Z
    719e:	91 81       	ldd	r25, Z+1	; 0x01
    71a0:	00 97       	sbiw	r24, 0x00	; 0
    71a2:	f1 f0       	breq	.+60     	; 0x71e0 <vdmProduct+0x64>
    71a4:	e9 85       	ldd	r30, Y+9	; 0x09
    71a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    71a8:	80 81       	ld	r24, Z
    71aa:	91 81       	ldd	r25, Z+1	; 0x01
    71ac:	81 30       	cpi	r24, 0x01	; 1
    71ae:	91 05       	cpc	r25, r1
    71b0:	b9 f0       	breq	.+46     	; 0x71e0 <vdmProduct+0x64>
    71b2:	e9 85       	ldd	r30, Y+9	; 0x09
    71b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    71b6:	80 81       	ld	r24, Z
    71b8:	91 81       	ldd	r25, Z+1	; 0x01
    71ba:	82 30       	cpi	r24, 0x02	; 2
    71bc:	91 05       	cpc	r25, r1
    71be:	81 f0       	breq	.+32     	; 0x71e0 <vdmProduct+0x64>
    71c0:	e9 85       	ldd	r30, Y+9	; 0x09
    71c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    71c4:	80 81       	ld	r24, Z
    71c6:	91 81       	ldd	r25, Z+1	; 0x01
    71c8:	84 30       	cpi	r24, 0x04	; 4
    71ca:	91 05       	cpc	r25, r1
    71cc:	49 f0       	breq	.+18     	; 0x71e0 <vdmProduct+0x64>
    71ce:	e9 85       	ldd	r30, Y+9	; 0x09
    71d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    71d2:	80 81       	ld	r24, Z
    71d4:	91 81       	ldd	r25, Z+1	; 0x01
    71d6:	85 30       	cpi	r24, 0x05	; 5
    71d8:	91 05       	cpc	r25, r1
    71da:	11 f0       	breq	.+4      	; 0x71e0 <vdmProduct+0x64>
    71dc:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    71e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    71e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    71e4:	80 81       	ld	r24, Z
    71e6:	91 81       	ldd	r25, Z+1	; 0x01
    71e8:	00 97       	sbiw	r24, 0x00	; 0
    71ea:	f1 f0       	breq	.+60     	; 0x7228 <vdmProduct+0xac>
    71ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    71ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    71f0:	80 81       	ld	r24, Z
    71f2:	91 81       	ldd	r25, Z+1	; 0x01
    71f4:	81 30       	cpi	r24, 0x01	; 1
    71f6:	91 05       	cpc	r25, r1
    71f8:	b9 f0       	breq	.+46     	; 0x7228 <vdmProduct+0xac>
    71fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    71fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    71fe:	80 81       	ld	r24, Z
    7200:	91 81       	ldd	r25, Z+1	; 0x01
    7202:	82 30       	cpi	r24, 0x02	; 2
    7204:	91 05       	cpc	r25, r1
    7206:	81 f0       	breq	.+32     	; 0x7228 <vdmProduct+0xac>
    7208:	eb 85       	ldd	r30, Y+11	; 0x0b
    720a:	fc 85       	ldd	r31, Y+12	; 0x0c
    720c:	80 81       	ld	r24, Z
    720e:	91 81       	ldd	r25, Z+1	; 0x01
    7210:	84 30       	cpi	r24, 0x04	; 4
    7212:	91 05       	cpc	r25, r1
    7214:	49 f0       	breq	.+18     	; 0x7228 <vdmProduct+0xac>
    7216:	eb 85       	ldd	r30, Y+11	; 0x0b
    7218:	fc 85       	ldd	r31, Y+12	; 0x0c
    721a:	80 81       	ld	r24, Z
    721c:	91 81       	ldd	r25, Z+1	; 0x01
    721e:	85 30       	cpi	r24, 0x05	; 5
    7220:	91 05       	cpc	r25, r1
    7222:	11 f0       	breq	.+4      	; 0x7228 <vdmProduct+0xac>
    7224:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    7228:	89 85       	ldd	r24, Y+9	; 0x09
    722a:	9a 85       	ldd	r25, Y+10	; 0x0a
    722c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7230:	dc 01       	movw	r26, r24
    7232:	cb 01       	movw	r24, r22
    7234:	8d 83       	std	Y+5, r24	; 0x05
    7236:	9e 83       	std	Y+6, r25	; 0x06
    7238:	af 83       	std	Y+7, r26	; 0x07
    723a:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    723c:	8b 85       	ldd	r24, Y+11	; 0x0b
    723e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7240:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7244:	dc 01       	movw	r26, r24
    7246:	cb 01       	movw	r24, r22
    7248:	89 83       	std	Y+1, r24	; 0x01
    724a:	9a 83       	std	Y+2, r25	; 0x02
    724c:	ab 83       	std	Y+3, r26	; 0x03
    724e:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    7250:	e9 85       	ldd	r30, Y+9	; 0x09
    7252:	fa 85       	ldd	r31, Y+10	; 0x0a
    7254:	80 81       	ld	r24, Z
    7256:	91 81       	ldd	r25, Z+1	; 0x01
    7258:	00 97       	sbiw	r24, 0x00	; 0
    725a:	71 f0       	breq	.+28     	; 0x7278 <vdmProduct+0xfc>
    725c:	e9 85       	ldd	r30, Y+9	; 0x09
    725e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7260:	80 81       	ld	r24, Z
    7262:	91 81       	ldd	r25, Z+1	; 0x01
    7264:	81 30       	cpi	r24, 0x01	; 1
    7266:	91 05       	cpc	r25, r1
    7268:	39 f0       	breq	.+14     	; 0x7278 <vdmProduct+0xfc>
    726a:	e9 85       	ldd	r30, Y+9	; 0x09
    726c:	fa 85       	ldd	r31, Y+10	; 0x0a
    726e:	80 81       	ld	r24, Z
    7270:	91 81       	ldd	r25, Z+1	; 0x01
    7272:	82 30       	cpi	r24, 0x02	; 2
    7274:	91 05       	cpc	r25, r1
    7276:	59 f5       	brne	.+86     	; 0x72ce <vdmProduct+0x152>
    7278:	eb 85       	ldd	r30, Y+11	; 0x0b
    727a:	fc 85       	ldd	r31, Y+12	; 0x0c
    727c:	80 81       	ld	r24, Z
    727e:	91 81       	ldd	r25, Z+1	; 0x01
    7280:	00 97       	sbiw	r24, 0x00	; 0
    7282:	71 f0       	breq	.+28     	; 0x72a0 <vdmProduct+0x124>
    7284:	eb 85       	ldd	r30, Y+11	; 0x0b
    7286:	fc 85       	ldd	r31, Y+12	; 0x0c
    7288:	80 81       	ld	r24, Z
    728a:	91 81       	ldd	r25, Z+1	; 0x01
    728c:	81 30       	cpi	r24, 0x01	; 1
    728e:	91 05       	cpc	r25, r1
    7290:	39 f0       	breq	.+14     	; 0x72a0 <vdmProduct+0x124>
    7292:	eb 85       	ldd	r30, Y+11	; 0x0b
    7294:	fc 85       	ldd	r31, Y+12	; 0x0c
    7296:	80 81       	ld	r24, Z
    7298:	91 81       	ldd	r25, Z+1	; 0x01
    729a:	82 30       	cpi	r24, 0x02	; 2
    729c:	91 05       	cpc	r25, r1
    729e:	b9 f4       	brne	.+46     	; 0x72ce <vdmProduct+0x152>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(av * bv));
    72a0:	6d 81       	ldd	r22, Y+5	; 0x05
    72a2:	7e 81       	ldd	r23, Y+6	; 0x06
    72a4:	8f 81       	ldd	r24, Y+7	; 0x07
    72a6:	98 85       	ldd	r25, Y+8	; 0x08
    72a8:	29 81       	ldd	r18, Y+1	; 0x01
    72aa:	3a 81       	ldd	r19, Y+2	; 0x02
    72ac:	4b 81       	ldd	r20, Y+3	; 0x03
    72ae:	5c 81       	ldd	r21, Y+4	; 0x04
    72b0:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    72b4:	dc 01       	movw	r26, r24
    72b6:	cb 01       	movw	r24, r22
    72b8:	bc 01       	movw	r22, r24
    72ba:	cd 01       	movw	r24, r26
    72bc:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    72c0:	dc 01       	movw	r26, r24
    72c2:	cb 01       	movw	r24, r22
    72c4:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    72c8:	9e 87       	std	Y+14, r25	; 0x0e
    72ca:	8d 87       	std	Y+13, r24	; 0x0d
    72cc:	12 c0       	rjmp	.+36     	; 0x72f2 <vdmProduct+0x176>

	return newReal(av * bv);
    72ce:	6d 81       	ldd	r22, Y+5	; 0x05
    72d0:	7e 81       	ldd	r23, Y+6	; 0x06
    72d2:	8f 81       	ldd	r24, Y+7	; 0x07
    72d4:	98 85       	ldd	r25, Y+8	; 0x08
    72d6:	29 81       	ldd	r18, Y+1	; 0x01
    72d8:	3a 81       	ldd	r19, Y+2	; 0x02
    72da:	4b 81       	ldd	r20, Y+3	; 0x03
    72dc:	5c 81       	ldd	r21, Y+4	; 0x04
    72de:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    72e2:	dc 01       	movw	r26, r24
    72e4:	cb 01       	movw	r24, r22
    72e6:	bc 01       	movw	r22, r24
    72e8:	cd 01       	movw	r24, r26
    72ea:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    72ee:	9e 87       	std	Y+14, r25	; 0x0e
    72f0:	8d 87       	std	Y+13, r24	; 0x0d
    72f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    72f4:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    72f6:	2e 96       	adiw	r28, 0x0e	; 14
    72f8:	0f b6       	in	r0, 0x3f	; 63
    72fa:	f8 94       	cli
    72fc:	de bf       	out	0x3e, r29	; 62
    72fe:	0f be       	out	0x3f, r0	; 63
    7300:	cd bf       	out	0x3d, r28	; 61
    7302:	cf 91       	pop	r28
    7304:	df 91       	pop	r29
    7306:	08 95       	ret

00007308 <vdmProductGC>:

TVP vdmProductGC(TVP a, TVP b, TVP *from)
{
    7308:	df 93       	push	r29
    730a:	cf 93       	push	r28
    730c:	cd b7       	in	r28, 0x3d	; 61
    730e:	de b7       	in	r29, 0x3e	; 62
    7310:	60 97       	sbiw	r28, 0x10	; 16
    7312:	0f b6       	in	r0, 0x3f	; 63
    7314:	f8 94       	cli
    7316:	de bf       	out	0x3e, r29	; 62
    7318:	0f be       	out	0x3f, r0	; 63
    731a:	cd bf       	out	0x3d, r28	; 61
    731c:	9a 87       	std	Y+10, r25	; 0x0a
    731e:	89 87       	std	Y+9, r24	; 0x09
    7320:	7c 87       	std	Y+12, r23	; 0x0c
    7322:	6b 87       	std	Y+11, r22	; 0x0b
    7324:	5e 87       	std	Y+14, r21	; 0x0e
    7326:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    7328:	e9 85       	ldd	r30, Y+9	; 0x09
    732a:	fa 85       	ldd	r31, Y+10	; 0x0a
    732c:	80 81       	ld	r24, Z
    732e:	91 81       	ldd	r25, Z+1	; 0x01
    7330:	00 97       	sbiw	r24, 0x00	; 0
    7332:	f1 f0       	breq	.+60     	; 0x7370 <vdmProductGC+0x68>
    7334:	e9 85       	ldd	r30, Y+9	; 0x09
    7336:	fa 85       	ldd	r31, Y+10	; 0x0a
    7338:	80 81       	ld	r24, Z
    733a:	91 81       	ldd	r25, Z+1	; 0x01
    733c:	81 30       	cpi	r24, 0x01	; 1
    733e:	91 05       	cpc	r25, r1
    7340:	b9 f0       	breq	.+46     	; 0x7370 <vdmProductGC+0x68>
    7342:	e9 85       	ldd	r30, Y+9	; 0x09
    7344:	fa 85       	ldd	r31, Y+10	; 0x0a
    7346:	80 81       	ld	r24, Z
    7348:	91 81       	ldd	r25, Z+1	; 0x01
    734a:	82 30       	cpi	r24, 0x02	; 2
    734c:	91 05       	cpc	r25, r1
    734e:	81 f0       	breq	.+32     	; 0x7370 <vdmProductGC+0x68>
    7350:	e9 85       	ldd	r30, Y+9	; 0x09
    7352:	fa 85       	ldd	r31, Y+10	; 0x0a
    7354:	80 81       	ld	r24, Z
    7356:	91 81       	ldd	r25, Z+1	; 0x01
    7358:	84 30       	cpi	r24, 0x04	; 4
    735a:	91 05       	cpc	r25, r1
    735c:	49 f0       	breq	.+18     	; 0x7370 <vdmProductGC+0x68>
    735e:	e9 85       	ldd	r30, Y+9	; 0x09
    7360:	fa 85       	ldd	r31, Y+10	; 0x0a
    7362:	80 81       	ld	r24, Z
    7364:	91 81       	ldd	r25, Z+1	; 0x01
    7366:	85 30       	cpi	r24, 0x05	; 5
    7368:	91 05       	cpc	r25, r1
    736a:	11 f0       	breq	.+4      	; 0x7370 <vdmProductGC+0x68>
    736c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7370:	eb 85       	ldd	r30, Y+11	; 0x0b
    7372:	fc 85       	ldd	r31, Y+12	; 0x0c
    7374:	80 81       	ld	r24, Z
    7376:	91 81       	ldd	r25, Z+1	; 0x01
    7378:	00 97       	sbiw	r24, 0x00	; 0
    737a:	f1 f0       	breq	.+60     	; 0x73b8 <vdmProductGC+0xb0>
    737c:	eb 85       	ldd	r30, Y+11	; 0x0b
    737e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7380:	80 81       	ld	r24, Z
    7382:	91 81       	ldd	r25, Z+1	; 0x01
    7384:	81 30       	cpi	r24, 0x01	; 1
    7386:	91 05       	cpc	r25, r1
    7388:	b9 f0       	breq	.+46     	; 0x73b8 <vdmProductGC+0xb0>
    738a:	eb 85       	ldd	r30, Y+11	; 0x0b
    738c:	fc 85       	ldd	r31, Y+12	; 0x0c
    738e:	80 81       	ld	r24, Z
    7390:	91 81       	ldd	r25, Z+1	; 0x01
    7392:	82 30       	cpi	r24, 0x02	; 2
    7394:	91 05       	cpc	r25, r1
    7396:	81 f0       	breq	.+32     	; 0x73b8 <vdmProductGC+0xb0>
    7398:	eb 85       	ldd	r30, Y+11	; 0x0b
    739a:	fc 85       	ldd	r31, Y+12	; 0x0c
    739c:	80 81       	ld	r24, Z
    739e:	91 81       	ldd	r25, Z+1	; 0x01
    73a0:	84 30       	cpi	r24, 0x04	; 4
    73a2:	91 05       	cpc	r25, r1
    73a4:	49 f0       	breq	.+18     	; 0x73b8 <vdmProductGC+0xb0>
    73a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    73a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    73aa:	80 81       	ld	r24, Z
    73ac:	91 81       	ldd	r25, Z+1	; 0x01
    73ae:	85 30       	cpi	r24, 0x05	; 5
    73b0:	91 05       	cpc	r25, r1
    73b2:	11 f0       	breq	.+4      	; 0x73b8 <vdmProductGC+0xb0>
    73b4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    73b8:	89 85       	ldd	r24, Y+9	; 0x09
    73ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    73bc:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    73c0:	dc 01       	movw	r26, r24
    73c2:	cb 01       	movw	r24, r22
    73c4:	8d 83       	std	Y+5, r24	; 0x05
    73c6:	9e 83       	std	Y+6, r25	; 0x06
    73c8:	af 83       	std	Y+7, r26	; 0x07
    73ca:	b8 87       	std	Y+8, r27	; 0x08
	double bv=toDouble(b);
    73cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    73ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    73d0:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    73d4:	dc 01       	movw	r26, r24
    73d6:	cb 01       	movw	r24, r22
    73d8:	89 83       	std	Y+1, r24	; 0x01
    73da:	9a 83       	std	Y+2, r25	; 0x02
    73dc:	ab 83       	std	Y+3, r26	; 0x03
    73de:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    73e0:	e9 85       	ldd	r30, Y+9	; 0x09
    73e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    73e4:	80 81       	ld	r24, Z
    73e6:	91 81       	ldd	r25, Z+1	; 0x01
    73e8:	00 97       	sbiw	r24, 0x00	; 0
    73ea:	71 f0       	breq	.+28     	; 0x7408 <vdmProductGC+0x100>
    73ec:	e9 85       	ldd	r30, Y+9	; 0x09
    73ee:	fa 85       	ldd	r31, Y+10	; 0x0a
    73f0:	80 81       	ld	r24, Z
    73f2:	91 81       	ldd	r25, Z+1	; 0x01
    73f4:	81 30       	cpi	r24, 0x01	; 1
    73f6:	91 05       	cpc	r25, r1
    73f8:	39 f0       	breq	.+14     	; 0x7408 <vdmProductGC+0x100>
    73fa:	e9 85       	ldd	r30, Y+9	; 0x09
    73fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    73fe:	80 81       	ld	r24, Z
    7400:	91 81       	ldd	r25, Z+1	; 0x01
    7402:	82 30       	cpi	r24, 0x02	; 2
    7404:	91 05       	cpc	r25, r1
    7406:	71 f5       	brne	.+92     	; 0x7464 <vdmProductGC+0x15c>
    7408:	eb 85       	ldd	r30, Y+11	; 0x0b
    740a:	fc 85       	ldd	r31, Y+12	; 0x0c
    740c:	80 81       	ld	r24, Z
    740e:	91 81       	ldd	r25, Z+1	; 0x01
    7410:	00 97       	sbiw	r24, 0x00	; 0
    7412:	71 f0       	breq	.+28     	; 0x7430 <vdmProductGC+0x128>
    7414:	eb 85       	ldd	r30, Y+11	; 0x0b
    7416:	fc 85       	ldd	r31, Y+12	; 0x0c
    7418:	80 81       	ld	r24, Z
    741a:	91 81       	ldd	r25, Z+1	; 0x01
    741c:	81 30       	cpi	r24, 0x01	; 1
    741e:	91 05       	cpc	r25, r1
    7420:	39 f0       	breq	.+14     	; 0x7430 <vdmProductGC+0x128>
    7422:	eb 85       	ldd	r30, Y+11	; 0x0b
    7424:	fc 85       	ldd	r31, Y+12	; 0x0c
    7426:	80 81       	ld	r24, Z
    7428:	91 81       	ldd	r25, Z+1	; 0x01
    742a:	82 30       	cpi	r24, 0x02	; 2
    742c:	91 05       	cpc	r25, r1
    742e:	d1 f4       	brne	.+52     	; 0x7464 <vdmProductGC+0x15c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(av * bv), from);
    7430:	6d 81       	ldd	r22, Y+5	; 0x05
    7432:	7e 81       	ldd	r23, Y+6	; 0x06
    7434:	8f 81       	ldd	r24, Y+7	; 0x07
    7436:	98 85       	ldd	r25, Y+8	; 0x08
    7438:	29 81       	ldd	r18, Y+1	; 0x01
    743a:	3a 81       	ldd	r19, Y+2	; 0x02
    743c:	4b 81       	ldd	r20, Y+3	; 0x03
    743e:	5c 81       	ldd	r21, Y+4	; 0x04
    7440:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    7444:	dc 01       	movw	r26, r24
    7446:	cb 01       	movw	r24, r22
    7448:	bc 01       	movw	r22, r24
    744a:	cd 01       	movw	r24, r26
    744c:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7450:	dc 01       	movw	r26, r24
    7452:	cb 01       	movw	r24, r22
    7454:	2d 85       	ldd	r18, Y+13	; 0x0d
    7456:	3e 85       	ldd	r19, Y+14	; 0x0e
    7458:	b9 01       	movw	r22, r18
    745a:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    745e:	98 8b       	std	Y+16, r25	; 0x10
    7460:	8f 87       	std	Y+15, r24	; 0x0f
    7462:	15 c0       	rjmp	.+42     	; 0x748e <vdmProductGC+0x186>

		return newRealGC(av * bv, from);
    7464:	6d 81       	ldd	r22, Y+5	; 0x05
    7466:	7e 81       	ldd	r23, Y+6	; 0x06
    7468:	8f 81       	ldd	r24, Y+7	; 0x07
    746a:	98 85       	ldd	r25, Y+8	; 0x08
    746c:	29 81       	ldd	r18, Y+1	; 0x01
    746e:	3a 81       	ldd	r19, Y+2	; 0x02
    7470:	4b 81       	ldd	r20, Y+3	; 0x03
    7472:	5c 81       	ldd	r21, Y+4	; 0x04
    7474:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    7478:	dc 01       	movw	r26, r24
    747a:	cb 01       	movw	r24, r22
    747c:	2d 85       	ldd	r18, Y+13	; 0x0d
    747e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7480:	bc 01       	movw	r22, r24
    7482:	cd 01       	movw	r24, r26
    7484:	a9 01       	movw	r20, r18
    7486:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
    748a:	98 8b       	std	Y+16, r25	; 0x10
    748c:	8f 87       	std	Y+15, r24	; 0x0f
    748e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7490:	98 89       	ldd	r25, Y+16	; 0x10
}
    7492:	60 96       	adiw	r28, 0x10	; 16
    7494:	0f b6       	in	r0, 0x3f	; 63
    7496:	f8 94       	cli
    7498:	de bf       	out	0x3e, r29	; 62
    749a:	0f be       	out	0x3f, r0	; 63
    749c:	cd bf       	out	0x3d, r28	; 61
    749e:	cf 91       	pop	r28
    74a0:	df 91       	pop	r29
    74a2:	08 95       	ret

000074a4 <vdmDivision>:

TVP vdmDivision(TVP a,TVP b)
{
    74a4:	df 93       	push	r29
    74a6:	cf 93       	push	r28
    74a8:	cd b7       	in	r28, 0x3d	; 61
    74aa:	de b7       	in	r29, 0x3e	; 62
    74ac:	2c 97       	sbiw	r28, 0x0c	; 12
    74ae:	0f b6       	in	r0, 0x3f	; 63
    74b0:	f8 94       	cli
    74b2:	de bf       	out	0x3e, r29	; 62
    74b4:	0f be       	out	0x3f, r0	; 63
    74b6:	cd bf       	out	0x3d, r28	; 61
    74b8:	9a 87       	std	Y+10, r25	; 0x0a
    74ba:	89 87       	std	Y+9, r24	; 0x09
    74bc:	7c 87       	std	Y+12, r23	; 0x0c
    74be:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    74c0:	e9 85       	ldd	r30, Y+9	; 0x09
    74c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    74c4:	80 81       	ld	r24, Z
    74c6:	91 81       	ldd	r25, Z+1	; 0x01
    74c8:	00 97       	sbiw	r24, 0x00	; 0
    74ca:	f1 f0       	breq	.+60     	; 0x7508 <vdmDivision+0x64>
    74cc:	e9 85       	ldd	r30, Y+9	; 0x09
    74ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    74d0:	80 81       	ld	r24, Z
    74d2:	91 81       	ldd	r25, Z+1	; 0x01
    74d4:	81 30       	cpi	r24, 0x01	; 1
    74d6:	91 05       	cpc	r25, r1
    74d8:	b9 f0       	breq	.+46     	; 0x7508 <vdmDivision+0x64>
    74da:	e9 85       	ldd	r30, Y+9	; 0x09
    74dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    74de:	80 81       	ld	r24, Z
    74e0:	91 81       	ldd	r25, Z+1	; 0x01
    74e2:	82 30       	cpi	r24, 0x02	; 2
    74e4:	91 05       	cpc	r25, r1
    74e6:	81 f0       	breq	.+32     	; 0x7508 <vdmDivision+0x64>
    74e8:	e9 85       	ldd	r30, Y+9	; 0x09
    74ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    74ec:	80 81       	ld	r24, Z
    74ee:	91 81       	ldd	r25, Z+1	; 0x01
    74f0:	84 30       	cpi	r24, 0x04	; 4
    74f2:	91 05       	cpc	r25, r1
    74f4:	49 f0       	breq	.+18     	; 0x7508 <vdmDivision+0x64>
    74f6:	e9 85       	ldd	r30, Y+9	; 0x09
    74f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    74fa:	80 81       	ld	r24, Z
    74fc:	91 81       	ldd	r25, Z+1	; 0x01
    74fe:	85 30       	cpi	r24, 0x05	; 5
    7500:	91 05       	cpc	r25, r1
    7502:	11 f0       	breq	.+4      	; 0x7508 <vdmDivision+0x64>
    7504:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7508:	eb 85       	ldd	r30, Y+11	; 0x0b
    750a:	fc 85       	ldd	r31, Y+12	; 0x0c
    750c:	80 81       	ld	r24, Z
    750e:	91 81       	ldd	r25, Z+1	; 0x01
    7510:	00 97       	sbiw	r24, 0x00	; 0
    7512:	f1 f0       	breq	.+60     	; 0x7550 <vdmDivision+0xac>
    7514:	eb 85       	ldd	r30, Y+11	; 0x0b
    7516:	fc 85       	ldd	r31, Y+12	; 0x0c
    7518:	80 81       	ld	r24, Z
    751a:	91 81       	ldd	r25, Z+1	; 0x01
    751c:	81 30       	cpi	r24, 0x01	; 1
    751e:	91 05       	cpc	r25, r1
    7520:	b9 f0       	breq	.+46     	; 0x7550 <vdmDivision+0xac>
    7522:	eb 85       	ldd	r30, Y+11	; 0x0b
    7524:	fc 85       	ldd	r31, Y+12	; 0x0c
    7526:	80 81       	ld	r24, Z
    7528:	91 81       	ldd	r25, Z+1	; 0x01
    752a:	82 30       	cpi	r24, 0x02	; 2
    752c:	91 05       	cpc	r25, r1
    752e:	81 f0       	breq	.+32     	; 0x7550 <vdmDivision+0xac>
    7530:	eb 85       	ldd	r30, Y+11	; 0x0b
    7532:	fc 85       	ldd	r31, Y+12	; 0x0c
    7534:	80 81       	ld	r24, Z
    7536:	91 81       	ldd	r25, Z+1	; 0x01
    7538:	84 30       	cpi	r24, 0x04	; 4
    753a:	91 05       	cpc	r25, r1
    753c:	49 f0       	breq	.+18     	; 0x7550 <vdmDivision+0xac>
    753e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7540:	fc 85       	ldd	r31, Y+12	; 0x0c
    7542:	80 81       	ld	r24, Z
    7544:	91 81       	ldd	r25, Z+1	; 0x01
    7546:	85 30       	cpi	r24, 0x05	; 5
    7548:	91 05       	cpc	r25, r1
    754a:	11 f0       	breq	.+4      	; 0x7550 <vdmDivision+0xac>
    754c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    7550:	89 85       	ldd	r24, Y+9	; 0x09
    7552:	9a 85       	ldd	r25, Y+10	; 0x0a
    7554:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7558:	dc 01       	movw	r26, r24
    755a:	cb 01       	movw	r24, r22
    755c:	8d 83       	std	Y+5, r24	; 0x05
    755e:	9e 83       	std	Y+6, r25	; 0x06
    7560:	af 83       	std	Y+7, r26	; 0x07
    7562:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    7564:	8b 85       	ldd	r24, Y+11	; 0x0b
    7566:	9c 85       	ldd	r25, Y+12	; 0x0c
    7568:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    756c:	dc 01       	movw	r26, r24
    756e:	cb 01       	movw	r24, r22
    7570:	89 83       	std	Y+1, r24	; 0x01
    7572:	9a 83       	std	Y+2, r25	; 0x02
    7574:	ab 83       	std	Y+3, r26	; 0x03
    7576:	bc 83       	std	Y+4, r27	; 0x04

	return newReal(av/bv);
    7578:	6d 81       	ldd	r22, Y+5	; 0x05
    757a:	7e 81       	ldd	r23, Y+6	; 0x06
    757c:	8f 81       	ldd	r24, Y+7	; 0x07
    757e:	98 85       	ldd	r25, Y+8	; 0x08
    7580:	29 81       	ldd	r18, Y+1	; 0x01
    7582:	3a 81       	ldd	r19, Y+2	; 0x02
    7584:	4b 81       	ldd	r20, Y+3	; 0x03
    7586:	5c 81       	ldd	r21, Y+4	; 0x04
    7588:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    758c:	dc 01       	movw	r26, r24
    758e:	cb 01       	movw	r24, r22
    7590:	bc 01       	movw	r22, r24
    7592:	cd 01       	movw	r24, r26
    7594:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
}
    7598:	2c 96       	adiw	r28, 0x0c	; 12
    759a:	0f b6       	in	r0, 0x3f	; 63
    759c:	f8 94       	cli
    759e:	de bf       	out	0x3e, r29	; 62
    75a0:	0f be       	out	0x3f, r0	; 63
    75a2:	cd bf       	out	0x3d, r28	; 61
    75a4:	cf 91       	pop	r28
    75a6:	df 91       	pop	r29
    75a8:	08 95       	ret

000075aa <vdmDivisionGC>:

TVP vdmDivisionGC(TVP a,TVP b, TVP *from)
{
    75aa:	df 93       	push	r29
    75ac:	cf 93       	push	r28
    75ae:	cd b7       	in	r28, 0x3d	; 61
    75b0:	de b7       	in	r29, 0x3e	; 62
    75b2:	2e 97       	sbiw	r28, 0x0e	; 14
    75b4:	0f b6       	in	r0, 0x3f	; 63
    75b6:	f8 94       	cli
    75b8:	de bf       	out	0x3e, r29	; 62
    75ba:	0f be       	out	0x3f, r0	; 63
    75bc:	cd bf       	out	0x3d, r28	; 61
    75be:	9a 87       	std	Y+10, r25	; 0x0a
    75c0:	89 87       	std	Y+9, r24	; 0x09
    75c2:	7c 87       	std	Y+12, r23	; 0x0c
    75c4:	6b 87       	std	Y+11, r22	; 0x0b
    75c6:	5e 87       	std	Y+14, r21	; 0x0e
    75c8:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    75ca:	e9 85       	ldd	r30, Y+9	; 0x09
    75cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    75ce:	80 81       	ld	r24, Z
    75d0:	91 81       	ldd	r25, Z+1	; 0x01
    75d2:	00 97       	sbiw	r24, 0x00	; 0
    75d4:	f1 f0       	breq	.+60     	; 0x7612 <vdmDivisionGC+0x68>
    75d6:	e9 85       	ldd	r30, Y+9	; 0x09
    75d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    75da:	80 81       	ld	r24, Z
    75dc:	91 81       	ldd	r25, Z+1	; 0x01
    75de:	81 30       	cpi	r24, 0x01	; 1
    75e0:	91 05       	cpc	r25, r1
    75e2:	b9 f0       	breq	.+46     	; 0x7612 <vdmDivisionGC+0x68>
    75e4:	e9 85       	ldd	r30, Y+9	; 0x09
    75e6:	fa 85       	ldd	r31, Y+10	; 0x0a
    75e8:	80 81       	ld	r24, Z
    75ea:	91 81       	ldd	r25, Z+1	; 0x01
    75ec:	82 30       	cpi	r24, 0x02	; 2
    75ee:	91 05       	cpc	r25, r1
    75f0:	81 f0       	breq	.+32     	; 0x7612 <vdmDivisionGC+0x68>
    75f2:	e9 85       	ldd	r30, Y+9	; 0x09
    75f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    75f6:	80 81       	ld	r24, Z
    75f8:	91 81       	ldd	r25, Z+1	; 0x01
    75fa:	84 30       	cpi	r24, 0x04	; 4
    75fc:	91 05       	cpc	r25, r1
    75fe:	49 f0       	breq	.+18     	; 0x7612 <vdmDivisionGC+0x68>
    7600:	e9 85       	ldd	r30, Y+9	; 0x09
    7602:	fa 85       	ldd	r31, Y+10	; 0x0a
    7604:	80 81       	ld	r24, Z
    7606:	91 81       	ldd	r25, Z+1	; 0x01
    7608:	85 30       	cpi	r24, 0x05	; 5
    760a:	91 05       	cpc	r25, r1
    760c:	11 f0       	breq	.+4      	; 0x7612 <vdmDivisionGC+0x68>
    760e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7612:	eb 85       	ldd	r30, Y+11	; 0x0b
    7614:	fc 85       	ldd	r31, Y+12	; 0x0c
    7616:	80 81       	ld	r24, Z
    7618:	91 81       	ldd	r25, Z+1	; 0x01
    761a:	00 97       	sbiw	r24, 0x00	; 0
    761c:	f1 f0       	breq	.+60     	; 0x765a <vdmDivisionGC+0xb0>
    761e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7620:	fc 85       	ldd	r31, Y+12	; 0x0c
    7622:	80 81       	ld	r24, Z
    7624:	91 81       	ldd	r25, Z+1	; 0x01
    7626:	81 30       	cpi	r24, 0x01	; 1
    7628:	91 05       	cpc	r25, r1
    762a:	b9 f0       	breq	.+46     	; 0x765a <vdmDivisionGC+0xb0>
    762c:	eb 85       	ldd	r30, Y+11	; 0x0b
    762e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7630:	80 81       	ld	r24, Z
    7632:	91 81       	ldd	r25, Z+1	; 0x01
    7634:	82 30       	cpi	r24, 0x02	; 2
    7636:	91 05       	cpc	r25, r1
    7638:	81 f0       	breq	.+32     	; 0x765a <vdmDivisionGC+0xb0>
    763a:	eb 85       	ldd	r30, Y+11	; 0x0b
    763c:	fc 85       	ldd	r31, Y+12	; 0x0c
    763e:	80 81       	ld	r24, Z
    7640:	91 81       	ldd	r25, Z+1	; 0x01
    7642:	84 30       	cpi	r24, 0x04	; 4
    7644:	91 05       	cpc	r25, r1
    7646:	49 f0       	breq	.+18     	; 0x765a <vdmDivisionGC+0xb0>
    7648:	eb 85       	ldd	r30, Y+11	; 0x0b
    764a:	fc 85       	ldd	r31, Y+12	; 0x0c
    764c:	80 81       	ld	r24, Z
    764e:	91 81       	ldd	r25, Z+1	; 0x01
    7650:	85 30       	cpi	r24, 0x05	; 5
    7652:	91 05       	cpc	r25, r1
    7654:	11 f0       	breq	.+4      	; 0x765a <vdmDivisionGC+0xb0>
    7656:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    765a:	89 85       	ldd	r24, Y+9	; 0x09
    765c:	9a 85       	ldd	r25, Y+10	; 0x0a
    765e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7662:	dc 01       	movw	r26, r24
    7664:	cb 01       	movw	r24, r22
    7666:	8d 83       	std	Y+5, r24	; 0x05
    7668:	9e 83       	std	Y+6, r25	; 0x06
    766a:	af 83       	std	Y+7, r26	; 0x07
    766c:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    766e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7670:	9c 85       	ldd	r25, Y+12	; 0x0c
    7672:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7676:	dc 01       	movw	r26, r24
    7678:	cb 01       	movw	r24, r22
    767a:	89 83       	std	Y+1, r24	; 0x01
    767c:	9a 83       	std	Y+2, r25	; 0x02
    767e:	ab 83       	std	Y+3, r26	; 0x03
    7680:	bc 83       	std	Y+4, r27	; 0x04

	return newRealGC(av/bv, from);
    7682:	6d 81       	ldd	r22, Y+5	; 0x05
    7684:	7e 81       	ldd	r23, Y+6	; 0x06
    7686:	8f 81       	ldd	r24, Y+7	; 0x07
    7688:	98 85       	ldd	r25, Y+8	; 0x08
    768a:	29 81       	ldd	r18, Y+1	; 0x01
    768c:	3a 81       	ldd	r19, Y+2	; 0x02
    768e:	4b 81       	ldd	r20, Y+3	; 0x03
    7690:	5c 81       	ldd	r21, Y+4	; 0x04
    7692:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    7696:	dc 01       	movw	r26, r24
    7698:	cb 01       	movw	r24, r22
    769a:	2d 85       	ldd	r18, Y+13	; 0x0d
    769c:	3e 85       	ldd	r19, Y+14	; 0x0e
    769e:	bc 01       	movw	r22, r24
    76a0:	cd 01       	movw	r24, r26
    76a2:	a9 01       	movw	r20, r18
    76a4:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
}
    76a8:	2e 96       	adiw	r28, 0x0e	; 14
    76aa:	0f b6       	in	r0, 0x3f	; 63
    76ac:	f8 94       	cli
    76ae:	de bf       	out	0x3e, r29	; 62
    76b0:	0f be       	out	0x3f, r0	; 63
    76b2:	cd bf       	out	0x3d, r28	; 61
    76b4:	cf 91       	pop	r28
    76b6:	df 91       	pop	r29
    76b8:	08 95       	ret

000076ba <divi>:

static long divi(double lv, double rv)
{
    76ba:	df 93       	push	r29
    76bc:	cf 93       	push	r28
    76be:	cd b7       	in	r28, 0x3d	; 61
    76c0:	de b7       	in	r29, 0x3e	; 62
    76c2:	2c 97       	sbiw	r28, 0x0c	; 12
    76c4:	0f b6       	in	r0, 0x3f	; 63
    76c6:	f8 94       	cli
    76c8:	de bf       	out	0x3e, r29	; 62
    76ca:	0f be       	out	0x3f, r0	; 63
    76cc:	cd bf       	out	0x3d, r28	; 61
    76ce:	69 83       	std	Y+1, r22	; 0x01
    76d0:	7a 83       	std	Y+2, r23	; 0x02
    76d2:	8b 83       	std	Y+3, r24	; 0x03
    76d4:	9c 83       	std	Y+4, r25	; 0x04
    76d6:	2d 83       	std	Y+5, r18	; 0x05
    76d8:	3e 83       	std	Y+6, r19	; 0x06
    76da:	4f 83       	std	Y+7, r20	; 0x07
    76dc:	58 87       	std	Y+8, r21	; 0x08
	 * div y = floor(abs(x/y)) Note that the order of floor and abs on the right-hand side makes a difference, the
	 * above example would yield -5 if we changed the order. This is because floor always yields a smaller (or
	 * equal) integer, e.g. floor (14/3) is 4 while floor (-14/3) is -5.
	 */

	if (lv / rv < 0)
    76de:	69 81       	ldd	r22, Y+1	; 0x01
    76e0:	7a 81       	ldd	r23, Y+2	; 0x02
    76e2:	8b 81       	ldd	r24, Y+3	; 0x03
    76e4:	9c 81       	ldd	r25, Y+4	; 0x04
    76e6:	2d 81       	ldd	r18, Y+5	; 0x05
    76e8:	3e 81       	ldd	r19, Y+6	; 0x06
    76ea:	4f 81       	ldd	r20, Y+7	; 0x07
    76ec:	58 85       	ldd	r21, Y+8	; 0x08
    76ee:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    76f2:	dc 01       	movw	r26, r24
    76f4:	cb 01       	movw	r24, r22
    76f6:	bc 01       	movw	r22, r24
    76f8:	cd 01       	movw	r24, r26
    76fa:	20 e0       	ldi	r18, 0x00	; 0
    76fc:	30 e0       	ldi	r19, 0x00	; 0
    76fe:	40 e0       	ldi	r20, 0x00	; 0
    7700:	50 e0       	ldi	r21, 0x00	; 0
    7702:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    7706:	88 23       	and	r24, r24
    7708:	ec f4       	brge	.+58     	; 0x7744 <divi+0x8a>
	{
		return (long) -floor(fabs(lv / rv));
    770a:	69 81       	ldd	r22, Y+1	; 0x01
    770c:	7a 81       	ldd	r23, Y+2	; 0x02
    770e:	8b 81       	ldd	r24, Y+3	; 0x03
    7710:	9c 81       	ldd	r25, Y+4	; 0x04
    7712:	2d 81       	ldd	r18, Y+5	; 0x05
    7714:	3e 81       	ldd	r19, Y+6	; 0x06
    7716:	4f 81       	ldd	r20, Y+7	; 0x07
    7718:	58 85       	ldd	r21, Y+8	; 0x08
    771a:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    771e:	dc 01       	movw	r26, r24
    7720:	cb 01       	movw	r24, r22
    7722:	bf 77       	andi	r27, 0x7F	; 127
    7724:	bc 01       	movw	r22, r24
    7726:	cd 01       	movw	r24, r26
    7728:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    772c:	dc 01       	movw	r26, r24
    772e:	cb 01       	movw	r24, r22
    7730:	b0 58       	subi	r27, 0x80	; 128
    7732:	bc 01       	movw	r22, r24
    7734:	cd 01       	movw	r24, r26
    7736:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    773a:	69 87       	std	Y+9, r22	; 0x09
    773c:	7a 87       	std	Y+10, r23	; 0x0a
    773e:	8b 87       	std	Y+11, r24	; 0x0b
    7740:	9c 87       	std	Y+12, r25	; 0x0c
    7742:	1b c0       	rjmp	.+54     	; 0x777a <divi+0xc0>
	} else
	{
		return (long) floor(fabs(-lv / rv));
    7744:	69 81       	ldd	r22, Y+1	; 0x01
    7746:	7a 81       	ldd	r23, Y+2	; 0x02
    7748:	8b 81       	ldd	r24, Y+3	; 0x03
    774a:	9c 81       	ldd	r25, Y+4	; 0x04
    774c:	2d 81       	ldd	r18, Y+5	; 0x05
    774e:	3e 81       	ldd	r19, Y+6	; 0x06
    7750:	4f 81       	ldd	r20, Y+7	; 0x07
    7752:	58 85       	ldd	r21, Y+8	; 0x08
    7754:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    7758:	dc 01       	movw	r26, r24
    775a:	cb 01       	movw	r24, r22
    775c:	bf 77       	andi	r27, 0x7F	; 127
    775e:	bc 01       	movw	r22, r24
    7760:	cd 01       	movw	r24, r26
    7762:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    7766:	dc 01       	movw	r26, r24
    7768:	cb 01       	movw	r24, r22
    776a:	bc 01       	movw	r22, r24
    776c:	cd 01       	movw	r24, r26
    776e:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7772:	69 87       	std	Y+9, r22	; 0x09
    7774:	7a 87       	std	Y+10, r23	; 0x0a
    7776:	8b 87       	std	Y+11, r24	; 0x0b
    7778:	9c 87       	std	Y+12, r25	; 0x0c
    777a:	89 85       	ldd	r24, Y+9	; 0x09
    777c:	9a 85       	ldd	r25, Y+10	; 0x0a
    777e:	ab 85       	ldd	r26, Y+11	; 0x0b
    7780:	bc 85       	ldd	r27, Y+12	; 0x0c
	}
}
    7782:	bc 01       	movw	r22, r24
    7784:	cd 01       	movw	r24, r26
    7786:	2c 96       	adiw	r28, 0x0c	; 12
    7788:	0f b6       	in	r0, 0x3f	; 63
    778a:	f8 94       	cli
    778c:	de bf       	out	0x3e, r29	; 62
    778e:	0f be       	out	0x3f, r0	; 63
    7790:	cd bf       	out	0x3d, r28	; 61
    7792:	cf 91       	pop	r28
    7794:	df 91       	pop	r29
    7796:	08 95       	ret

00007798 <vdmDiv>:

TVP vdmDiv(TVP a, TVP b)
{
    7798:	ef 92       	push	r14
    779a:	ff 92       	push	r15
    779c:	0f 93       	push	r16
    779e:	1f 93       	push	r17
    77a0:	df 93       	push	r29
    77a2:	cf 93       	push	r28
    77a4:	cd b7       	in	r28, 0x3d	; 61
    77a6:	de b7       	in	r29, 0x3e	; 62
    77a8:	28 97       	sbiw	r28, 0x08	; 8
    77aa:	0f b6       	in	r0, 0x3f	; 63
    77ac:	f8 94       	cli
    77ae:	de bf       	out	0x3e, r29	; 62
    77b0:	0f be       	out	0x3f, r0	; 63
    77b2:	cd bf       	out	0x3d, r28	; 61
    77b4:	9e 83       	std	Y+6, r25	; 0x06
    77b6:	8d 83       	std	Y+5, r24	; 0x05
    77b8:	78 87       	std	Y+8, r23	; 0x08
    77ba:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK_NUMERIC(a);
    77bc:	ed 81       	ldd	r30, Y+5	; 0x05
    77be:	fe 81       	ldd	r31, Y+6	; 0x06
    77c0:	80 81       	ld	r24, Z
    77c2:	91 81       	ldd	r25, Z+1	; 0x01
    77c4:	00 97       	sbiw	r24, 0x00	; 0
    77c6:	f1 f0       	breq	.+60     	; 0x7804 <vdmDiv+0x6c>
    77c8:	ed 81       	ldd	r30, Y+5	; 0x05
    77ca:	fe 81       	ldd	r31, Y+6	; 0x06
    77cc:	80 81       	ld	r24, Z
    77ce:	91 81       	ldd	r25, Z+1	; 0x01
    77d0:	81 30       	cpi	r24, 0x01	; 1
    77d2:	91 05       	cpc	r25, r1
    77d4:	b9 f0       	breq	.+46     	; 0x7804 <vdmDiv+0x6c>
    77d6:	ed 81       	ldd	r30, Y+5	; 0x05
    77d8:	fe 81       	ldd	r31, Y+6	; 0x06
    77da:	80 81       	ld	r24, Z
    77dc:	91 81       	ldd	r25, Z+1	; 0x01
    77de:	82 30       	cpi	r24, 0x02	; 2
    77e0:	91 05       	cpc	r25, r1
    77e2:	81 f0       	breq	.+32     	; 0x7804 <vdmDiv+0x6c>
    77e4:	ed 81       	ldd	r30, Y+5	; 0x05
    77e6:	fe 81       	ldd	r31, Y+6	; 0x06
    77e8:	80 81       	ld	r24, Z
    77ea:	91 81       	ldd	r25, Z+1	; 0x01
    77ec:	84 30       	cpi	r24, 0x04	; 4
    77ee:	91 05       	cpc	r25, r1
    77f0:	49 f0       	breq	.+18     	; 0x7804 <vdmDiv+0x6c>
    77f2:	ed 81       	ldd	r30, Y+5	; 0x05
    77f4:	fe 81       	ldd	r31, Y+6	; 0x06
    77f6:	80 81       	ld	r24, Z
    77f8:	91 81       	ldd	r25, Z+1	; 0x01
    77fa:	85 30       	cpi	r24, 0x05	; 5
    77fc:	91 05       	cpc	r25, r1
    77fe:	11 f0       	breq	.+4      	; 0x7804 <vdmDiv+0x6c>
    7800:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7804:	ef 81       	ldd	r30, Y+7	; 0x07
    7806:	f8 85       	ldd	r31, Y+8	; 0x08
    7808:	80 81       	ld	r24, Z
    780a:	91 81       	ldd	r25, Z+1	; 0x01
    780c:	00 97       	sbiw	r24, 0x00	; 0
    780e:	f1 f0       	breq	.+60     	; 0x784c <vdmDiv+0xb4>
    7810:	ef 81       	ldd	r30, Y+7	; 0x07
    7812:	f8 85       	ldd	r31, Y+8	; 0x08
    7814:	80 81       	ld	r24, Z
    7816:	91 81       	ldd	r25, Z+1	; 0x01
    7818:	81 30       	cpi	r24, 0x01	; 1
    781a:	91 05       	cpc	r25, r1
    781c:	b9 f0       	breq	.+46     	; 0x784c <vdmDiv+0xb4>
    781e:	ef 81       	ldd	r30, Y+7	; 0x07
    7820:	f8 85       	ldd	r31, Y+8	; 0x08
    7822:	80 81       	ld	r24, Z
    7824:	91 81       	ldd	r25, Z+1	; 0x01
    7826:	82 30       	cpi	r24, 0x02	; 2
    7828:	91 05       	cpc	r25, r1
    782a:	81 f0       	breq	.+32     	; 0x784c <vdmDiv+0xb4>
    782c:	ef 81       	ldd	r30, Y+7	; 0x07
    782e:	f8 85       	ldd	r31, Y+8	; 0x08
    7830:	80 81       	ld	r24, Z
    7832:	91 81       	ldd	r25, Z+1	; 0x01
    7834:	84 30       	cpi	r24, 0x04	; 4
    7836:	91 05       	cpc	r25, r1
    7838:	49 f0       	breq	.+18     	; 0x784c <vdmDiv+0xb4>
    783a:	ef 81       	ldd	r30, Y+7	; 0x07
    783c:	f8 85       	ldd	r31, Y+8	; 0x08
    783e:	80 81       	ld	r24, Z
    7840:	91 81       	ldd	r25, Z+1	; 0x01
    7842:	85 30       	cpi	r24, 0x05	; 5
    7844:	91 05       	cpc	r25, r1
    7846:	11 f0       	breq	.+4      	; 0x784c <vdmDiv+0xb4>
    7848:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L444  */

	ASSERT_CHECK_INT(a);
    784c:	ed 81       	ldd	r30, Y+5	; 0x05
    784e:	fe 81       	ldd	r31, Y+6	; 0x06
    7850:	80 81       	ld	r24, Z
    7852:	91 81       	ldd	r25, Z+1	; 0x01
    7854:	00 97       	sbiw	r24, 0x00	; 0
    7856:	11 f0       	breq	.+4      	; 0x785c <vdmDiv+0xc4>
    7858:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_INT(b);
    785c:	ef 81       	ldd	r30, Y+7	; 0x07
    785e:	f8 85       	ldd	r31, Y+8	; 0x08
    7860:	80 81       	ld	r24, Z
    7862:	91 81       	ldd	r25, Z+1	; 0x01
    7864:	00 97       	sbiw	r24, 0x00	; 0
    7866:	11 f0       	breq	.+4      	; 0x786c <vdmDiv+0xd4>
    7868:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	int av = toDouble(a);
    786c:	8d 81       	ldd	r24, Y+5	; 0x05
    786e:	9e 81       	ldd	r25, Y+6	; 0x06
    7870:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7874:	dc 01       	movw	r26, r24
    7876:	cb 01       	movw	r24, r22
    7878:	bc 01       	movw	r22, r24
    787a:	cd 01       	movw	r24, r26
    787c:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7880:	dc 01       	movw	r26, r24
    7882:	cb 01       	movw	r24, r22
    7884:	9c 83       	std	Y+4, r25	; 0x04
    7886:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    7888:	8f 81       	ldd	r24, Y+7	; 0x07
    788a:	98 85       	ldd	r25, Y+8	; 0x08
    788c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7890:	dc 01       	movw	r26, r24
    7892:	cb 01       	movw	r24, r22
    7894:	bc 01       	movw	r22, r24
    7896:	cd 01       	movw	r24, r26
    7898:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    789c:	dc 01       	movw	r26, r24
    789e:	cb 01       	movw	r24, r22
    78a0:	9a 83       	std	Y+2, r25	; 0x02
    78a2:	89 83       	std	Y+1, r24	; 0x01

	return newInt(divi(av,bv));
    78a4:	8b 81       	ldd	r24, Y+3	; 0x03
    78a6:	9c 81       	ldd	r25, Y+4	; 0x04
    78a8:	aa 27       	eor	r26, r26
    78aa:	97 fd       	sbrc	r25, 7
    78ac:	a0 95       	com	r26
    78ae:	ba 2f       	mov	r27, r26
    78b0:	bc 01       	movw	r22, r24
    78b2:	cd 01       	movw	r24, r26
    78b4:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    78b8:	7b 01       	movw	r14, r22
    78ba:	8c 01       	movw	r16, r24
    78bc:	89 81       	ldd	r24, Y+1	; 0x01
    78be:	9a 81       	ldd	r25, Y+2	; 0x02
    78c0:	aa 27       	eor	r26, r26
    78c2:	97 fd       	sbrc	r25, 7
    78c4:	a0 95       	com	r26
    78c6:	ba 2f       	mov	r27, r26
    78c8:	bc 01       	movw	r22, r24
    78ca:	cd 01       	movw	r24, r26
    78cc:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    78d0:	9b 01       	movw	r18, r22
    78d2:	ac 01       	movw	r20, r24
    78d4:	c8 01       	movw	r24, r16
    78d6:	b7 01       	movw	r22, r14
    78d8:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <divi>
    78dc:	dc 01       	movw	r26, r24
    78de:	cb 01       	movw	r24, r22
    78e0:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
}
    78e4:	28 96       	adiw	r28, 0x08	; 8
    78e6:	0f b6       	in	r0, 0x3f	; 63
    78e8:	f8 94       	cli
    78ea:	de bf       	out	0x3e, r29	; 62
    78ec:	0f be       	out	0x3f, r0	; 63
    78ee:	cd bf       	out	0x3d, r28	; 61
    78f0:	cf 91       	pop	r28
    78f2:	df 91       	pop	r29
    78f4:	1f 91       	pop	r17
    78f6:	0f 91       	pop	r16
    78f8:	ff 90       	pop	r15
    78fa:	ef 90       	pop	r14
    78fc:	08 95       	ret

000078fe <vdmDivGC>:

TVP vdmDivGC(TVP a, TVP b, TVP *from)
{
    78fe:	ef 92       	push	r14
    7900:	ff 92       	push	r15
    7902:	0f 93       	push	r16
    7904:	1f 93       	push	r17
    7906:	df 93       	push	r29
    7908:	cf 93       	push	r28
    790a:	cd b7       	in	r28, 0x3d	; 61
    790c:	de b7       	in	r29, 0x3e	; 62
    790e:	2a 97       	sbiw	r28, 0x0a	; 10
    7910:	0f b6       	in	r0, 0x3f	; 63
    7912:	f8 94       	cli
    7914:	de bf       	out	0x3e, r29	; 62
    7916:	0f be       	out	0x3f, r0	; 63
    7918:	cd bf       	out	0x3d, r28	; 61
    791a:	9e 83       	std	Y+6, r25	; 0x06
    791c:	8d 83       	std	Y+5, r24	; 0x05
    791e:	78 87       	std	Y+8, r23	; 0x08
    7920:	6f 83       	std	Y+7, r22	; 0x07
    7922:	5a 87       	std	Y+10, r21	; 0x0a
    7924:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK_NUMERIC(a);
    7926:	ed 81       	ldd	r30, Y+5	; 0x05
    7928:	fe 81       	ldd	r31, Y+6	; 0x06
    792a:	80 81       	ld	r24, Z
    792c:	91 81       	ldd	r25, Z+1	; 0x01
    792e:	00 97       	sbiw	r24, 0x00	; 0
    7930:	f1 f0       	breq	.+60     	; 0x796e <vdmDivGC+0x70>
    7932:	ed 81       	ldd	r30, Y+5	; 0x05
    7934:	fe 81       	ldd	r31, Y+6	; 0x06
    7936:	80 81       	ld	r24, Z
    7938:	91 81       	ldd	r25, Z+1	; 0x01
    793a:	81 30       	cpi	r24, 0x01	; 1
    793c:	91 05       	cpc	r25, r1
    793e:	b9 f0       	breq	.+46     	; 0x796e <vdmDivGC+0x70>
    7940:	ed 81       	ldd	r30, Y+5	; 0x05
    7942:	fe 81       	ldd	r31, Y+6	; 0x06
    7944:	80 81       	ld	r24, Z
    7946:	91 81       	ldd	r25, Z+1	; 0x01
    7948:	82 30       	cpi	r24, 0x02	; 2
    794a:	91 05       	cpc	r25, r1
    794c:	81 f0       	breq	.+32     	; 0x796e <vdmDivGC+0x70>
    794e:	ed 81       	ldd	r30, Y+5	; 0x05
    7950:	fe 81       	ldd	r31, Y+6	; 0x06
    7952:	80 81       	ld	r24, Z
    7954:	91 81       	ldd	r25, Z+1	; 0x01
    7956:	84 30       	cpi	r24, 0x04	; 4
    7958:	91 05       	cpc	r25, r1
    795a:	49 f0       	breq	.+18     	; 0x796e <vdmDivGC+0x70>
    795c:	ed 81       	ldd	r30, Y+5	; 0x05
    795e:	fe 81       	ldd	r31, Y+6	; 0x06
    7960:	80 81       	ld	r24, Z
    7962:	91 81       	ldd	r25, Z+1	; 0x01
    7964:	85 30       	cpi	r24, 0x05	; 5
    7966:	91 05       	cpc	r25, r1
    7968:	11 f0       	breq	.+4      	; 0x796e <vdmDivGC+0x70>
    796a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    796e:	ef 81       	ldd	r30, Y+7	; 0x07
    7970:	f8 85       	ldd	r31, Y+8	; 0x08
    7972:	80 81       	ld	r24, Z
    7974:	91 81       	ldd	r25, Z+1	; 0x01
    7976:	00 97       	sbiw	r24, 0x00	; 0
    7978:	f1 f0       	breq	.+60     	; 0x79b6 <vdmDivGC+0xb8>
    797a:	ef 81       	ldd	r30, Y+7	; 0x07
    797c:	f8 85       	ldd	r31, Y+8	; 0x08
    797e:	80 81       	ld	r24, Z
    7980:	91 81       	ldd	r25, Z+1	; 0x01
    7982:	81 30       	cpi	r24, 0x01	; 1
    7984:	91 05       	cpc	r25, r1
    7986:	b9 f0       	breq	.+46     	; 0x79b6 <vdmDivGC+0xb8>
    7988:	ef 81       	ldd	r30, Y+7	; 0x07
    798a:	f8 85       	ldd	r31, Y+8	; 0x08
    798c:	80 81       	ld	r24, Z
    798e:	91 81       	ldd	r25, Z+1	; 0x01
    7990:	82 30       	cpi	r24, 0x02	; 2
    7992:	91 05       	cpc	r25, r1
    7994:	81 f0       	breq	.+32     	; 0x79b6 <vdmDivGC+0xb8>
    7996:	ef 81       	ldd	r30, Y+7	; 0x07
    7998:	f8 85       	ldd	r31, Y+8	; 0x08
    799a:	80 81       	ld	r24, Z
    799c:	91 81       	ldd	r25, Z+1	; 0x01
    799e:	84 30       	cpi	r24, 0x04	; 4
    79a0:	91 05       	cpc	r25, r1
    79a2:	49 f0       	breq	.+18     	; 0x79b6 <vdmDivGC+0xb8>
    79a4:	ef 81       	ldd	r30, Y+7	; 0x07
    79a6:	f8 85       	ldd	r31, Y+8	; 0x08
    79a8:	80 81       	ld	r24, Z
    79aa:	91 81       	ldd	r25, Z+1	; 0x01
    79ac:	85 30       	cpi	r24, 0x05	; 5
    79ae:	91 05       	cpc	r25, r1
    79b0:	11 f0       	breq	.+4      	; 0x79b6 <vdmDivGC+0xb8>
    79b2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L444  */

	ASSERT_CHECK_INT(a);
    79b6:	ed 81       	ldd	r30, Y+5	; 0x05
    79b8:	fe 81       	ldd	r31, Y+6	; 0x06
    79ba:	80 81       	ld	r24, Z
    79bc:	91 81       	ldd	r25, Z+1	; 0x01
    79be:	00 97       	sbiw	r24, 0x00	; 0
    79c0:	11 f0       	breq	.+4      	; 0x79c6 <vdmDivGC+0xc8>
    79c2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_INT(b);
    79c6:	ef 81       	ldd	r30, Y+7	; 0x07
    79c8:	f8 85       	ldd	r31, Y+8	; 0x08
    79ca:	80 81       	ld	r24, Z
    79cc:	91 81       	ldd	r25, Z+1	; 0x01
    79ce:	00 97       	sbiw	r24, 0x00	; 0
    79d0:	11 f0       	breq	.+4      	; 0x79d6 <vdmDivGC+0xd8>
    79d2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	int av = toDouble(a);
    79d6:	8d 81       	ldd	r24, Y+5	; 0x05
    79d8:	9e 81       	ldd	r25, Y+6	; 0x06
    79da:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    79de:	dc 01       	movw	r26, r24
    79e0:	cb 01       	movw	r24, r22
    79e2:	bc 01       	movw	r22, r24
    79e4:	cd 01       	movw	r24, r26
    79e6:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    79ea:	dc 01       	movw	r26, r24
    79ec:	cb 01       	movw	r24, r22
    79ee:	9c 83       	std	Y+4, r25	; 0x04
    79f0:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    79f2:	8f 81       	ldd	r24, Y+7	; 0x07
    79f4:	98 85       	ldd	r25, Y+8	; 0x08
    79f6:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    79fa:	dc 01       	movw	r26, r24
    79fc:	cb 01       	movw	r24, r22
    79fe:	bc 01       	movw	r22, r24
    7a00:	cd 01       	movw	r24, r26
    7a02:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7a06:	dc 01       	movw	r26, r24
    7a08:	cb 01       	movw	r24, r22
    7a0a:	9a 83       	std	Y+2, r25	; 0x02
    7a0c:	89 83       	std	Y+1, r24	; 0x01

	return newIntGC(divi(av,bv), from);
    7a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    7a10:	9c 81       	ldd	r25, Y+4	; 0x04
    7a12:	aa 27       	eor	r26, r26
    7a14:	97 fd       	sbrc	r25, 7
    7a16:	a0 95       	com	r26
    7a18:	ba 2f       	mov	r27, r26
    7a1a:	bc 01       	movw	r22, r24
    7a1c:	cd 01       	movw	r24, r26
    7a1e:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7a22:	7b 01       	movw	r14, r22
    7a24:	8c 01       	movw	r16, r24
    7a26:	89 81       	ldd	r24, Y+1	; 0x01
    7a28:	9a 81       	ldd	r25, Y+2	; 0x02
    7a2a:	aa 27       	eor	r26, r26
    7a2c:	97 fd       	sbrc	r25, 7
    7a2e:	a0 95       	com	r26
    7a30:	ba 2f       	mov	r27, r26
    7a32:	bc 01       	movw	r22, r24
    7a34:	cd 01       	movw	r24, r26
    7a36:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7a3a:	9b 01       	movw	r18, r22
    7a3c:	ac 01       	movw	r20, r24
    7a3e:	c8 01       	movw	r24, r16
    7a40:	b7 01       	movw	r22, r14
    7a42:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <divi>
    7a46:	dc 01       	movw	r26, r24
    7a48:	cb 01       	movw	r24, r22
    7a4a:	29 85       	ldd	r18, Y+9	; 0x09
    7a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    7a4e:	b9 01       	movw	r22, r18
    7a50:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
}
    7a54:	2a 96       	adiw	r28, 0x0a	; 10
    7a56:	0f b6       	in	r0, 0x3f	; 63
    7a58:	f8 94       	cli
    7a5a:	de bf       	out	0x3e, r29	; 62
    7a5c:	0f be       	out	0x3f, r0	; 63
    7a5e:	cd bf       	out	0x3d, r28	; 61
    7a60:	cf 91       	pop	r28
    7a62:	df 91       	pop	r29
    7a64:	1f 91       	pop	r17
    7a66:	0f 91       	pop	r16
    7a68:	ff 90       	pop	r15
    7a6a:	ef 90       	pop	r14
    7a6c:	08 95       	ret

00007a6e <vdmRem>:

TVP vdmRem(TVP a,TVP b)
{
    7a6e:	8f 92       	push	r8
    7a70:	9f 92       	push	r9
    7a72:	af 92       	push	r10
    7a74:	bf 92       	push	r11
    7a76:	cf 92       	push	r12
    7a78:	df 92       	push	r13
    7a7a:	ef 92       	push	r14
    7a7c:	ff 92       	push	r15
    7a7e:	0f 93       	push	r16
    7a80:	1f 93       	push	r17
    7a82:	df 93       	push	r29
    7a84:	cf 93       	push	r28
    7a86:	cd b7       	in	r28, 0x3d	; 61
    7a88:	de b7       	in	r29, 0x3e	; 62
    7a8a:	28 97       	sbiw	r28, 0x08	; 8
    7a8c:	0f b6       	in	r0, 0x3f	; 63
    7a8e:	f8 94       	cli
    7a90:	de bf       	out	0x3e, r29	; 62
    7a92:	0f be       	out	0x3f, r0	; 63
    7a94:	cd bf       	out	0x3d, r28	; 61
    7a96:	9e 83       	std	Y+6, r25	; 0x06
    7a98:	8d 83       	std	Y+5, r24	; 0x05
    7a9a:	78 87       	std	Y+8, r23	; 0x08
    7a9c:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK_NUMERIC(a);
    7a9e:	ed 81       	ldd	r30, Y+5	; 0x05
    7aa0:	fe 81       	ldd	r31, Y+6	; 0x06
    7aa2:	80 81       	ld	r24, Z
    7aa4:	91 81       	ldd	r25, Z+1	; 0x01
    7aa6:	00 97       	sbiw	r24, 0x00	; 0
    7aa8:	f1 f0       	breq	.+60     	; 0x7ae6 <vdmRem+0x78>
    7aaa:	ed 81       	ldd	r30, Y+5	; 0x05
    7aac:	fe 81       	ldd	r31, Y+6	; 0x06
    7aae:	80 81       	ld	r24, Z
    7ab0:	91 81       	ldd	r25, Z+1	; 0x01
    7ab2:	81 30       	cpi	r24, 0x01	; 1
    7ab4:	91 05       	cpc	r25, r1
    7ab6:	b9 f0       	breq	.+46     	; 0x7ae6 <vdmRem+0x78>
    7ab8:	ed 81       	ldd	r30, Y+5	; 0x05
    7aba:	fe 81       	ldd	r31, Y+6	; 0x06
    7abc:	80 81       	ld	r24, Z
    7abe:	91 81       	ldd	r25, Z+1	; 0x01
    7ac0:	82 30       	cpi	r24, 0x02	; 2
    7ac2:	91 05       	cpc	r25, r1
    7ac4:	81 f0       	breq	.+32     	; 0x7ae6 <vdmRem+0x78>
    7ac6:	ed 81       	ldd	r30, Y+5	; 0x05
    7ac8:	fe 81       	ldd	r31, Y+6	; 0x06
    7aca:	80 81       	ld	r24, Z
    7acc:	91 81       	ldd	r25, Z+1	; 0x01
    7ace:	84 30       	cpi	r24, 0x04	; 4
    7ad0:	91 05       	cpc	r25, r1
    7ad2:	49 f0       	breq	.+18     	; 0x7ae6 <vdmRem+0x78>
    7ad4:	ed 81       	ldd	r30, Y+5	; 0x05
    7ad6:	fe 81       	ldd	r31, Y+6	; 0x06
    7ad8:	80 81       	ld	r24, Z
    7ada:	91 81       	ldd	r25, Z+1	; 0x01
    7adc:	85 30       	cpi	r24, 0x05	; 5
    7ade:	91 05       	cpc	r25, r1
    7ae0:	11 f0       	breq	.+4      	; 0x7ae6 <vdmRem+0x78>
    7ae2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7ae6:	ef 81       	ldd	r30, Y+7	; 0x07
    7ae8:	f8 85       	ldd	r31, Y+8	; 0x08
    7aea:	80 81       	ld	r24, Z
    7aec:	91 81       	ldd	r25, Z+1	; 0x01
    7aee:	00 97       	sbiw	r24, 0x00	; 0
    7af0:	f1 f0       	breq	.+60     	; 0x7b2e <vdmRem+0xc0>
    7af2:	ef 81       	ldd	r30, Y+7	; 0x07
    7af4:	f8 85       	ldd	r31, Y+8	; 0x08
    7af6:	80 81       	ld	r24, Z
    7af8:	91 81       	ldd	r25, Z+1	; 0x01
    7afa:	81 30       	cpi	r24, 0x01	; 1
    7afc:	91 05       	cpc	r25, r1
    7afe:	b9 f0       	breq	.+46     	; 0x7b2e <vdmRem+0xc0>
    7b00:	ef 81       	ldd	r30, Y+7	; 0x07
    7b02:	f8 85       	ldd	r31, Y+8	; 0x08
    7b04:	80 81       	ld	r24, Z
    7b06:	91 81       	ldd	r25, Z+1	; 0x01
    7b08:	82 30       	cpi	r24, 0x02	; 2
    7b0a:	91 05       	cpc	r25, r1
    7b0c:	81 f0       	breq	.+32     	; 0x7b2e <vdmRem+0xc0>
    7b0e:	ef 81       	ldd	r30, Y+7	; 0x07
    7b10:	f8 85       	ldd	r31, Y+8	; 0x08
    7b12:	80 81       	ld	r24, Z
    7b14:	91 81       	ldd	r25, Z+1	; 0x01
    7b16:	84 30       	cpi	r24, 0x04	; 4
    7b18:	91 05       	cpc	r25, r1
    7b1a:	49 f0       	breq	.+18     	; 0x7b2e <vdmRem+0xc0>
    7b1c:	ef 81       	ldd	r30, Y+7	; 0x07
    7b1e:	f8 85       	ldd	r31, Y+8	; 0x08
    7b20:	80 81       	ld	r24, Z
    7b22:	91 81       	ldd	r25, Z+1	; 0x01
    7b24:	85 30       	cpi	r24, 0x05	; 5
    7b26:	91 05       	cpc	r25, r1
    7b28:	11 f0       	breq	.+4      	; 0x7b2e <vdmRem+0xc0>
    7b2a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L628  */
	ASSERT_CHECK_INT(a);
    7b2e:	ed 81       	ldd	r30, Y+5	; 0x05
    7b30:	fe 81       	ldd	r31, Y+6	; 0x06
    7b32:	80 81       	ld	r24, Z
    7b34:	91 81       	ldd	r25, Z+1	; 0x01
    7b36:	00 97       	sbiw	r24, 0x00	; 0
    7b38:	11 f0       	breq	.+4      	; 0x7b3e <vdmRem+0xd0>
    7b3a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_INT(b);
    7b3e:	ef 81       	ldd	r30, Y+7	; 0x07
    7b40:	f8 85       	ldd	r31, Y+8	; 0x08
    7b42:	80 81       	ld	r24, Z
    7b44:	91 81       	ldd	r25, Z+1	; 0x01
    7b46:	00 97       	sbiw	r24, 0x00	; 0
    7b48:	11 f0       	breq	.+4      	; 0x7b4e <vdmRem+0xe0>
    7b4a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	int av = toDouble(a);
    7b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    7b50:	9e 81       	ldd	r25, Y+6	; 0x06
    7b52:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7b56:	dc 01       	movw	r26, r24
    7b58:	cb 01       	movw	r24, r22
    7b5a:	bc 01       	movw	r22, r24
    7b5c:	cd 01       	movw	r24, r26
    7b5e:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7b62:	dc 01       	movw	r26, r24
    7b64:	cb 01       	movw	r24, r22
    7b66:	9c 83       	std	Y+4, r25	; 0x04
    7b68:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    7b6a:	8f 81       	ldd	r24, Y+7	; 0x07
    7b6c:	98 85       	ldd	r25, Y+8	; 0x08
    7b6e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7b72:	dc 01       	movw	r26, r24
    7b74:	cb 01       	movw	r24, r22
    7b76:	bc 01       	movw	r22, r24
    7b78:	cd 01       	movw	r24, r26
    7b7a:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7b7e:	dc 01       	movw	r26, r24
    7b80:	cb 01       	movw	r24, r22
    7b82:	9a 83       	std	Y+2, r25	; 0x02
    7b84:	89 83       	std	Y+1, r24	; 0x01

	return newInt(av-bv*divi(av,bv));
    7b86:	8b 80       	ldd	r8, Y+3	; 0x03
    7b88:	9c 80       	ldd	r9, Y+4	; 0x04
    7b8a:	89 81       	ldd	r24, Y+1	; 0x01
    7b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    7b8e:	5c 01       	movw	r10, r24
    7b90:	cc 24       	eor	r12, r12
    7b92:	b7 fc       	sbrc	r11, 7
    7b94:	c0 94       	com	r12
    7b96:	dc 2c       	mov	r13, r12
    7b98:	8b 81       	ldd	r24, Y+3	; 0x03
    7b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    7b9c:	aa 27       	eor	r26, r26
    7b9e:	97 fd       	sbrc	r25, 7
    7ba0:	a0 95       	com	r26
    7ba2:	ba 2f       	mov	r27, r26
    7ba4:	bc 01       	movw	r22, r24
    7ba6:	cd 01       	movw	r24, r26
    7ba8:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7bac:	7b 01       	movw	r14, r22
    7bae:	8c 01       	movw	r16, r24
    7bb0:	89 81       	ldd	r24, Y+1	; 0x01
    7bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    7bb4:	aa 27       	eor	r26, r26
    7bb6:	97 fd       	sbrc	r25, 7
    7bb8:	a0 95       	com	r26
    7bba:	ba 2f       	mov	r27, r26
    7bbc:	bc 01       	movw	r22, r24
    7bbe:	cd 01       	movw	r24, r26
    7bc0:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7bc4:	9b 01       	movw	r18, r22
    7bc6:	ac 01       	movw	r20, r24
    7bc8:	c8 01       	movw	r24, r16
    7bca:	b7 01       	movw	r22, r14
    7bcc:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <divi>
    7bd0:	9b 01       	movw	r18, r22
    7bd2:	ac 01       	movw	r20, r24
    7bd4:	c6 01       	movw	r24, r12
    7bd6:	b5 01       	movw	r22, r10
    7bd8:	0e 94 90 72 	call	0xe520	; 0xe520 <__mulsi3>
    7bdc:	dc 01       	movw	r26, r24
    7bde:	cb 01       	movw	r24, r22
    7be0:	94 01       	movw	r18, r8
    7be2:	28 1b       	sub	r18, r24
    7be4:	39 0b       	sbc	r19, r25
    7be6:	c9 01       	movw	r24, r18
    7be8:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
}
    7bec:	28 96       	adiw	r28, 0x08	; 8
    7bee:	0f b6       	in	r0, 0x3f	; 63
    7bf0:	f8 94       	cli
    7bf2:	de bf       	out	0x3e, r29	; 62
    7bf4:	0f be       	out	0x3f, r0	; 63
    7bf6:	cd bf       	out	0x3d, r28	; 61
    7bf8:	cf 91       	pop	r28
    7bfa:	df 91       	pop	r29
    7bfc:	1f 91       	pop	r17
    7bfe:	0f 91       	pop	r16
    7c00:	ff 90       	pop	r15
    7c02:	ef 90       	pop	r14
    7c04:	df 90       	pop	r13
    7c06:	cf 90       	pop	r12
    7c08:	bf 90       	pop	r11
    7c0a:	af 90       	pop	r10
    7c0c:	9f 90       	pop	r9
    7c0e:	8f 90       	pop	r8
    7c10:	08 95       	ret

00007c12 <vdmRemGC>:

TVP vdmRemGC(TVP a, TVP b, TVP *from)
{
    7c12:	8f 92       	push	r8
    7c14:	9f 92       	push	r9
    7c16:	af 92       	push	r10
    7c18:	bf 92       	push	r11
    7c1a:	cf 92       	push	r12
    7c1c:	df 92       	push	r13
    7c1e:	ef 92       	push	r14
    7c20:	ff 92       	push	r15
    7c22:	0f 93       	push	r16
    7c24:	1f 93       	push	r17
    7c26:	df 93       	push	r29
    7c28:	cf 93       	push	r28
    7c2a:	cd b7       	in	r28, 0x3d	; 61
    7c2c:	de b7       	in	r29, 0x3e	; 62
    7c2e:	2a 97       	sbiw	r28, 0x0a	; 10
    7c30:	0f b6       	in	r0, 0x3f	; 63
    7c32:	f8 94       	cli
    7c34:	de bf       	out	0x3e, r29	; 62
    7c36:	0f be       	out	0x3f, r0	; 63
    7c38:	cd bf       	out	0x3d, r28	; 61
    7c3a:	9e 83       	std	Y+6, r25	; 0x06
    7c3c:	8d 83       	std	Y+5, r24	; 0x05
    7c3e:	78 87       	std	Y+8, r23	; 0x08
    7c40:	6f 83       	std	Y+7, r22	; 0x07
    7c42:	5a 87       	std	Y+10, r21	; 0x0a
    7c44:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK_NUMERIC(a);
    7c46:	ed 81       	ldd	r30, Y+5	; 0x05
    7c48:	fe 81       	ldd	r31, Y+6	; 0x06
    7c4a:	80 81       	ld	r24, Z
    7c4c:	91 81       	ldd	r25, Z+1	; 0x01
    7c4e:	00 97       	sbiw	r24, 0x00	; 0
    7c50:	f1 f0       	breq	.+60     	; 0x7c8e <vdmRemGC+0x7c>
    7c52:	ed 81       	ldd	r30, Y+5	; 0x05
    7c54:	fe 81       	ldd	r31, Y+6	; 0x06
    7c56:	80 81       	ld	r24, Z
    7c58:	91 81       	ldd	r25, Z+1	; 0x01
    7c5a:	81 30       	cpi	r24, 0x01	; 1
    7c5c:	91 05       	cpc	r25, r1
    7c5e:	b9 f0       	breq	.+46     	; 0x7c8e <vdmRemGC+0x7c>
    7c60:	ed 81       	ldd	r30, Y+5	; 0x05
    7c62:	fe 81       	ldd	r31, Y+6	; 0x06
    7c64:	80 81       	ld	r24, Z
    7c66:	91 81       	ldd	r25, Z+1	; 0x01
    7c68:	82 30       	cpi	r24, 0x02	; 2
    7c6a:	91 05       	cpc	r25, r1
    7c6c:	81 f0       	breq	.+32     	; 0x7c8e <vdmRemGC+0x7c>
    7c6e:	ed 81       	ldd	r30, Y+5	; 0x05
    7c70:	fe 81       	ldd	r31, Y+6	; 0x06
    7c72:	80 81       	ld	r24, Z
    7c74:	91 81       	ldd	r25, Z+1	; 0x01
    7c76:	84 30       	cpi	r24, 0x04	; 4
    7c78:	91 05       	cpc	r25, r1
    7c7a:	49 f0       	breq	.+18     	; 0x7c8e <vdmRemGC+0x7c>
    7c7c:	ed 81       	ldd	r30, Y+5	; 0x05
    7c7e:	fe 81       	ldd	r31, Y+6	; 0x06
    7c80:	80 81       	ld	r24, Z
    7c82:	91 81       	ldd	r25, Z+1	; 0x01
    7c84:	85 30       	cpi	r24, 0x05	; 5
    7c86:	91 05       	cpc	r25, r1
    7c88:	11 f0       	breq	.+4      	; 0x7c8e <vdmRemGC+0x7c>
    7c8a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7c8e:	ef 81       	ldd	r30, Y+7	; 0x07
    7c90:	f8 85       	ldd	r31, Y+8	; 0x08
    7c92:	80 81       	ld	r24, Z
    7c94:	91 81       	ldd	r25, Z+1	; 0x01
    7c96:	00 97       	sbiw	r24, 0x00	; 0
    7c98:	f1 f0       	breq	.+60     	; 0x7cd6 <vdmRemGC+0xc4>
    7c9a:	ef 81       	ldd	r30, Y+7	; 0x07
    7c9c:	f8 85       	ldd	r31, Y+8	; 0x08
    7c9e:	80 81       	ld	r24, Z
    7ca0:	91 81       	ldd	r25, Z+1	; 0x01
    7ca2:	81 30       	cpi	r24, 0x01	; 1
    7ca4:	91 05       	cpc	r25, r1
    7ca6:	b9 f0       	breq	.+46     	; 0x7cd6 <vdmRemGC+0xc4>
    7ca8:	ef 81       	ldd	r30, Y+7	; 0x07
    7caa:	f8 85       	ldd	r31, Y+8	; 0x08
    7cac:	80 81       	ld	r24, Z
    7cae:	91 81       	ldd	r25, Z+1	; 0x01
    7cb0:	82 30       	cpi	r24, 0x02	; 2
    7cb2:	91 05       	cpc	r25, r1
    7cb4:	81 f0       	breq	.+32     	; 0x7cd6 <vdmRemGC+0xc4>
    7cb6:	ef 81       	ldd	r30, Y+7	; 0x07
    7cb8:	f8 85       	ldd	r31, Y+8	; 0x08
    7cba:	80 81       	ld	r24, Z
    7cbc:	91 81       	ldd	r25, Z+1	; 0x01
    7cbe:	84 30       	cpi	r24, 0x04	; 4
    7cc0:	91 05       	cpc	r25, r1
    7cc2:	49 f0       	breq	.+18     	; 0x7cd6 <vdmRemGC+0xc4>
    7cc4:	ef 81       	ldd	r30, Y+7	; 0x07
    7cc6:	f8 85       	ldd	r31, Y+8	; 0x08
    7cc8:	80 81       	ld	r24, Z
    7cca:	91 81       	ldd	r25, Z+1	; 0x01
    7ccc:	85 30       	cpi	r24, 0x05	; 5
    7cce:	91 05       	cpc	r25, r1
    7cd0:	11 f0       	breq	.+4      	; 0x7cd6 <vdmRemGC+0xc4>
    7cd2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L628  */
	ASSERT_CHECK_INT(a);
    7cd6:	ed 81       	ldd	r30, Y+5	; 0x05
    7cd8:	fe 81       	ldd	r31, Y+6	; 0x06
    7cda:	80 81       	ld	r24, Z
    7cdc:	91 81       	ldd	r25, Z+1	; 0x01
    7cde:	00 97       	sbiw	r24, 0x00	; 0
    7ce0:	11 f0       	breq	.+4      	; 0x7ce6 <vdmRemGC+0xd4>
    7ce2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_INT(b);
    7ce6:	ef 81       	ldd	r30, Y+7	; 0x07
    7ce8:	f8 85       	ldd	r31, Y+8	; 0x08
    7cea:	80 81       	ld	r24, Z
    7cec:	91 81       	ldd	r25, Z+1	; 0x01
    7cee:	00 97       	sbiw	r24, 0x00	; 0
    7cf0:	11 f0       	breq	.+4      	; 0x7cf6 <vdmRemGC+0xe4>
    7cf2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	int av = toDouble(a);
    7cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    7cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    7cfa:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7cfe:	dc 01       	movw	r26, r24
    7d00:	cb 01       	movw	r24, r22
    7d02:	bc 01       	movw	r22, r24
    7d04:	cd 01       	movw	r24, r26
    7d06:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7d0a:	dc 01       	movw	r26, r24
    7d0c:	cb 01       	movw	r24, r22
    7d0e:	9c 83       	std	Y+4, r25	; 0x04
    7d10:	8b 83       	std	Y+3, r24	; 0x03
	int bv = toDouble(b);
    7d12:	8f 81       	ldd	r24, Y+7	; 0x07
    7d14:	98 85       	ldd	r25, Y+8	; 0x08
    7d16:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7d1a:	dc 01       	movw	r26, r24
    7d1c:	cb 01       	movw	r24, r22
    7d1e:	bc 01       	movw	r22, r24
    7d20:	cd 01       	movw	r24, r26
    7d22:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7d26:	dc 01       	movw	r26, r24
    7d28:	cb 01       	movw	r24, r22
    7d2a:	9a 83       	std	Y+2, r25	; 0x02
    7d2c:	89 83       	std	Y+1, r24	; 0x01

	return newIntGC(av-bv*divi(av,bv), from);
    7d2e:	8b 80       	ldd	r8, Y+3	; 0x03
    7d30:	9c 80       	ldd	r9, Y+4	; 0x04
    7d32:	89 81       	ldd	r24, Y+1	; 0x01
    7d34:	9a 81       	ldd	r25, Y+2	; 0x02
    7d36:	5c 01       	movw	r10, r24
    7d38:	cc 24       	eor	r12, r12
    7d3a:	b7 fc       	sbrc	r11, 7
    7d3c:	c0 94       	com	r12
    7d3e:	dc 2c       	mov	r13, r12
    7d40:	8b 81       	ldd	r24, Y+3	; 0x03
    7d42:	9c 81       	ldd	r25, Y+4	; 0x04
    7d44:	aa 27       	eor	r26, r26
    7d46:	97 fd       	sbrc	r25, 7
    7d48:	a0 95       	com	r26
    7d4a:	ba 2f       	mov	r27, r26
    7d4c:	bc 01       	movw	r22, r24
    7d4e:	cd 01       	movw	r24, r26
    7d50:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7d54:	7b 01       	movw	r14, r22
    7d56:	8c 01       	movw	r16, r24
    7d58:	89 81       	ldd	r24, Y+1	; 0x01
    7d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    7d5c:	aa 27       	eor	r26, r26
    7d5e:	97 fd       	sbrc	r25, 7
    7d60:	a0 95       	com	r26
    7d62:	ba 2f       	mov	r27, r26
    7d64:	bc 01       	movw	r22, r24
    7d66:	cd 01       	movw	r24, r26
    7d68:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7d6c:	9b 01       	movw	r18, r22
    7d6e:	ac 01       	movw	r20, r24
    7d70:	c8 01       	movw	r24, r16
    7d72:	b7 01       	movw	r22, r14
    7d74:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <divi>
    7d78:	9b 01       	movw	r18, r22
    7d7a:	ac 01       	movw	r20, r24
    7d7c:	c6 01       	movw	r24, r12
    7d7e:	b5 01       	movw	r22, r10
    7d80:	0e 94 90 72 	call	0xe520	; 0xe520 <__mulsi3>
    7d84:	dc 01       	movw	r26, r24
    7d86:	cb 01       	movw	r24, r22
    7d88:	94 01       	movw	r18, r8
    7d8a:	28 1b       	sub	r18, r24
    7d8c:	39 0b       	sbc	r19, r25
    7d8e:	c9 01       	movw	r24, r18
    7d90:	29 85       	ldd	r18, Y+9	; 0x09
    7d92:	3a 85       	ldd	r19, Y+10	; 0x0a
    7d94:	b9 01       	movw	r22, r18
    7d96:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
}
    7d9a:	2a 96       	adiw	r28, 0x0a	; 10
    7d9c:	0f b6       	in	r0, 0x3f	; 63
    7d9e:	f8 94       	cli
    7da0:	de bf       	out	0x3e, r29	; 62
    7da2:	0f be       	out	0x3f, r0	; 63
    7da4:	cd bf       	out	0x3d, r28	; 61
    7da6:	cf 91       	pop	r28
    7da8:	df 91       	pop	r29
    7daa:	1f 91       	pop	r17
    7dac:	0f 91       	pop	r16
    7dae:	ff 90       	pop	r15
    7db0:	ef 90       	pop	r14
    7db2:	df 90       	pop	r13
    7db4:	cf 90       	pop	r12
    7db6:	bf 90       	pop	r11
    7db8:	af 90       	pop	r10
    7dba:	9f 90       	pop	r9
    7dbc:	8f 90       	pop	r8
    7dbe:	08 95       	ret

00007dc0 <vdmMod>:

TVP vdmMod(TVP a,TVP b)
{
    7dc0:	df 93       	push	r29
    7dc2:	cf 93       	push	r28
    7dc4:	cd b7       	in	r28, 0x3d	; 61
    7dc6:	de b7       	in	r29, 0x3e	; 62
    7dc8:	2e 97       	sbiw	r28, 0x0e	; 14
    7dca:	0f b6       	in	r0, 0x3f	; 63
    7dcc:	f8 94       	cli
    7dce:	de bf       	out	0x3e, r29	; 62
    7dd0:	0f be       	out	0x3f, r0	; 63
    7dd2:	cd bf       	out	0x3d, r28	; 61
    7dd4:	9a 87       	std	Y+10, r25	; 0x0a
    7dd6:	89 87       	std	Y+9, r24	; 0x09
    7dd8:	7c 87       	std	Y+12, r23	; 0x0c
    7dda:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    7ddc:	e9 85       	ldd	r30, Y+9	; 0x09
    7dde:	fa 85       	ldd	r31, Y+10	; 0x0a
    7de0:	80 81       	ld	r24, Z
    7de2:	91 81       	ldd	r25, Z+1	; 0x01
    7de4:	00 97       	sbiw	r24, 0x00	; 0
    7de6:	f1 f0       	breq	.+60     	; 0x7e24 <vdmMod+0x64>
    7de8:	e9 85       	ldd	r30, Y+9	; 0x09
    7dea:	fa 85       	ldd	r31, Y+10	; 0x0a
    7dec:	80 81       	ld	r24, Z
    7dee:	91 81       	ldd	r25, Z+1	; 0x01
    7df0:	81 30       	cpi	r24, 0x01	; 1
    7df2:	91 05       	cpc	r25, r1
    7df4:	b9 f0       	breq	.+46     	; 0x7e24 <vdmMod+0x64>
    7df6:	e9 85       	ldd	r30, Y+9	; 0x09
    7df8:	fa 85       	ldd	r31, Y+10	; 0x0a
    7dfa:	80 81       	ld	r24, Z
    7dfc:	91 81       	ldd	r25, Z+1	; 0x01
    7dfe:	82 30       	cpi	r24, 0x02	; 2
    7e00:	91 05       	cpc	r25, r1
    7e02:	81 f0       	breq	.+32     	; 0x7e24 <vdmMod+0x64>
    7e04:	e9 85       	ldd	r30, Y+9	; 0x09
    7e06:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e08:	80 81       	ld	r24, Z
    7e0a:	91 81       	ldd	r25, Z+1	; 0x01
    7e0c:	84 30       	cpi	r24, 0x04	; 4
    7e0e:	91 05       	cpc	r25, r1
    7e10:	49 f0       	breq	.+18     	; 0x7e24 <vdmMod+0x64>
    7e12:	e9 85       	ldd	r30, Y+9	; 0x09
    7e14:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e16:	80 81       	ld	r24, Z
    7e18:	91 81       	ldd	r25, Z+1	; 0x01
    7e1a:	85 30       	cpi	r24, 0x05	; 5
    7e1c:	91 05       	cpc	r25, r1
    7e1e:	11 f0       	breq	.+4      	; 0x7e24 <vdmMod+0x64>
    7e20:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    7e24:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e26:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e28:	80 81       	ld	r24, Z
    7e2a:	91 81       	ldd	r25, Z+1	; 0x01
    7e2c:	00 97       	sbiw	r24, 0x00	; 0
    7e2e:	f1 f0       	breq	.+60     	; 0x7e6c <vdmMod+0xac>
    7e30:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e32:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e34:	80 81       	ld	r24, Z
    7e36:	91 81       	ldd	r25, Z+1	; 0x01
    7e38:	81 30       	cpi	r24, 0x01	; 1
    7e3a:	91 05       	cpc	r25, r1
    7e3c:	b9 f0       	breq	.+46     	; 0x7e6c <vdmMod+0xac>
    7e3e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e40:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e42:	80 81       	ld	r24, Z
    7e44:	91 81       	ldd	r25, Z+1	; 0x01
    7e46:	82 30       	cpi	r24, 0x02	; 2
    7e48:	91 05       	cpc	r25, r1
    7e4a:	81 f0       	breq	.+32     	; 0x7e6c <vdmMod+0xac>
    7e4c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e4e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e50:	80 81       	ld	r24, Z
    7e52:	91 81       	ldd	r25, Z+1	; 0x01
    7e54:	84 30       	cpi	r24, 0x04	; 4
    7e56:	91 05       	cpc	r25, r1
    7e58:	49 f0       	breq	.+18     	; 0x7e6c <vdmMod+0xac>
    7e5a:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e5c:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e5e:	80 81       	ld	r24, Z
    7e60:	91 81       	ldd	r25, Z+1	; 0x01
    7e62:	85 30       	cpi	r24, 0x05	; 5
    7e64:	91 05       	cpc	r25, r1
    7e66:	11 f0       	breq	.+4      	; 0x7e6c <vdmMod+0xac>
    7e68:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L575  */
	ASSERT_CHECK_INT(a);
    7e6c:	e9 85       	ldd	r30, Y+9	; 0x09
    7e6e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e70:	80 81       	ld	r24, Z
    7e72:	91 81       	ldd	r25, Z+1	; 0x01
    7e74:	00 97       	sbiw	r24, 0x00	; 0
    7e76:	11 f0       	breq	.+4      	; 0x7e7c <vdmMod+0xbc>
    7e78:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_INT(b);
    7e7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7e7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e80:	80 81       	ld	r24, Z
    7e82:	91 81       	ldd	r25, Z+1	; 0x01
    7e84:	00 97       	sbiw	r24, 0x00	; 0
    7e86:	11 f0       	breq	.+4      	; 0x7e8c <vdmMod+0xcc>
    7e88:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double lv =(int) toDouble(a);
    7e8c:	89 85       	ldd	r24, Y+9	; 0x09
    7e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e90:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7e94:	dc 01       	movw	r26, r24
    7e96:	cb 01       	movw	r24, r22
    7e98:	bc 01       	movw	r22, r24
    7e9a:	cd 01       	movw	r24, r26
    7e9c:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7ea0:	dc 01       	movw	r26, r24
    7ea2:	cb 01       	movw	r24, r22
    7ea4:	aa 27       	eor	r26, r26
    7ea6:	97 fd       	sbrc	r25, 7
    7ea8:	a0 95       	com	r26
    7eaa:	ba 2f       	mov	r27, r26
    7eac:	bc 01       	movw	r22, r24
    7eae:	cd 01       	movw	r24, r26
    7eb0:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7eb4:	dc 01       	movw	r26, r24
    7eb6:	cb 01       	movw	r24, r22
    7eb8:	8d 83       	std	Y+5, r24	; 0x05
    7eba:	9e 83       	std	Y+6, r25	; 0x06
    7ebc:	af 83       	std	Y+7, r26	; 0x07
    7ebe:	b8 87       	std	Y+8, r27	; 0x08
	double rv = (int)toDouble(b);
    7ec0:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ec2:	9c 85       	ldd	r25, Y+12	; 0x0c
    7ec4:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    7ec8:	dc 01       	movw	r26, r24
    7eca:	cb 01       	movw	r24, r22
    7ecc:	bc 01       	movw	r22, r24
    7ece:	cd 01       	movw	r24, r26
    7ed0:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7ed4:	dc 01       	movw	r26, r24
    7ed6:	cb 01       	movw	r24, r22
    7ed8:	aa 27       	eor	r26, r26
    7eda:	97 fd       	sbrc	r25, 7
    7edc:	a0 95       	com	r26
    7ede:	ba 2f       	mov	r27, r26
    7ee0:	bc 01       	movw	r22, r24
    7ee2:	cd 01       	movw	r24, r26
    7ee4:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7ee8:	dc 01       	movw	r26, r24
    7eea:	cb 01       	movw	r24, r22
    7eec:	89 83       	std	Y+1, r24	; 0x01
    7eee:	9a 83       	std	Y+2, r25	; 0x02
    7ef0:	ab 83       	std	Y+3, r26	; 0x03
    7ef2:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    7ef4:	e9 85       	ldd	r30, Y+9	; 0x09
    7ef6:	fa 85       	ldd	r31, Y+10	; 0x0a
    7ef8:	80 81       	ld	r24, Z
    7efa:	91 81       	ldd	r25, Z+1	; 0x01
    7efc:	00 97       	sbiw	r24, 0x00	; 0
    7efe:	79 f0       	breq	.+30     	; 0x7f1e <vdmMod+0x15e>
    7f00:	e9 85       	ldd	r30, Y+9	; 0x09
    7f02:	fa 85       	ldd	r31, Y+10	; 0x0a
    7f04:	80 81       	ld	r24, Z
    7f06:	91 81       	ldd	r25, Z+1	; 0x01
    7f08:	81 30       	cpi	r24, 0x01	; 1
    7f0a:	91 05       	cpc	r25, r1
    7f0c:	41 f0       	breq	.+16     	; 0x7f1e <vdmMod+0x15e>
    7f0e:	e9 85       	ldd	r30, Y+9	; 0x09
    7f10:	fa 85       	ldd	r31, Y+10	; 0x0a
    7f12:	80 81       	ld	r24, Z
    7f14:	91 81       	ldd	r25, Z+1	; 0x01
    7f16:	82 30       	cpi	r24, 0x02	; 2
    7f18:	91 05       	cpc	r25, r1
    7f1a:	09 f0       	breq	.+2      	; 0x7f1e <vdmMod+0x15e>
    7f1c:	51 c0       	rjmp	.+162    	; 0x7fc0 <vdmMod+0x200>
    7f1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f20:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f22:	80 81       	ld	r24, Z
    7f24:	91 81       	ldd	r25, Z+1	; 0x01
    7f26:	00 97       	sbiw	r24, 0x00	; 0
    7f28:	71 f0       	breq	.+28     	; 0x7f46 <vdmMod+0x186>
    7f2a:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f2c:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f2e:	80 81       	ld	r24, Z
    7f30:	91 81       	ldd	r25, Z+1	; 0x01
    7f32:	81 30       	cpi	r24, 0x01	; 1
    7f34:	91 05       	cpc	r25, r1
    7f36:	39 f0       	breq	.+14     	; 0x7f46 <vdmMod+0x186>
    7f38:	eb 85       	ldd	r30, Y+11	; 0x0b
    7f3a:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f3c:	80 81       	ld	r24, Z
    7f3e:	91 81       	ldd	r25, Z+1	; 0x01
    7f40:	82 30       	cpi	r24, 0x02	; 2
    7f42:	91 05       	cpc	r25, r1
    7f44:	e9 f5       	brne	.+122    	; 0x7fc0 <vdmMod+0x200>
			(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
		return newInt((int)(lv-rv*(long) floor(lv/rv)));
    7f46:	6d 81       	ldd	r22, Y+5	; 0x05
    7f48:	7e 81       	ldd	r23, Y+6	; 0x06
    7f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    7f4c:	98 85       	ldd	r25, Y+8	; 0x08
    7f4e:	29 81       	ldd	r18, Y+1	; 0x01
    7f50:	3a 81       	ldd	r19, Y+2	; 0x02
    7f52:	4b 81       	ldd	r20, Y+3	; 0x03
    7f54:	5c 81       	ldd	r21, Y+4	; 0x04
    7f56:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    7f5a:	dc 01       	movw	r26, r24
    7f5c:	cb 01       	movw	r24, r22
    7f5e:	bc 01       	movw	r22, r24
    7f60:	cd 01       	movw	r24, r26
    7f62:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    7f66:	dc 01       	movw	r26, r24
    7f68:	cb 01       	movw	r24, r22
    7f6a:	bc 01       	movw	r22, r24
    7f6c:	cd 01       	movw	r24, r26
    7f6e:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7f72:	dc 01       	movw	r26, r24
    7f74:	cb 01       	movw	r24, r22
    7f76:	bc 01       	movw	r22, r24
    7f78:	cd 01       	movw	r24, r26
    7f7a:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7f7e:	dc 01       	movw	r26, r24
    7f80:	cb 01       	movw	r24, r22
    7f82:	bc 01       	movw	r22, r24
    7f84:	cd 01       	movw	r24, r26
    7f86:	29 81       	ldd	r18, Y+1	; 0x01
    7f88:	3a 81       	ldd	r19, Y+2	; 0x02
    7f8a:	4b 81       	ldd	r20, Y+3	; 0x03
    7f8c:	5c 81       	ldd	r21, Y+4	; 0x04
    7f8e:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    7f92:	dc 01       	movw	r26, r24
    7f94:	cb 01       	movw	r24, r22
    7f96:	9c 01       	movw	r18, r24
    7f98:	ad 01       	movw	r20, r26
    7f9a:	6d 81       	ldd	r22, Y+5	; 0x05
    7f9c:	7e 81       	ldd	r23, Y+6	; 0x06
    7f9e:	8f 81       	ldd	r24, Y+7	; 0x07
    7fa0:	98 85       	ldd	r25, Y+8	; 0x08
    7fa2:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    7fa6:	dc 01       	movw	r26, r24
    7fa8:	cb 01       	movw	r24, r22
    7faa:	bc 01       	movw	r22, r24
    7fac:	cd 01       	movw	r24, r26
    7fae:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7fb2:	dc 01       	movw	r26, r24
    7fb4:	cb 01       	movw	r24, r22
    7fb6:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    7fba:	9e 87       	std	Y+14, r25	; 0x0e
    7fbc:	8d 87       	std	Y+13, r24	; 0x0d
    7fbe:	38 c0       	rjmp	.+112    	; 0x8030 <vdmMod+0x270>

	return newReal(lv-rv*(long) floor(lv/rv));
    7fc0:	6d 81       	ldd	r22, Y+5	; 0x05
    7fc2:	7e 81       	ldd	r23, Y+6	; 0x06
    7fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    7fc6:	98 85       	ldd	r25, Y+8	; 0x08
    7fc8:	29 81       	ldd	r18, Y+1	; 0x01
    7fca:	3a 81       	ldd	r19, Y+2	; 0x02
    7fcc:	4b 81       	ldd	r20, Y+3	; 0x03
    7fce:	5c 81       	ldd	r21, Y+4	; 0x04
    7fd0:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    7fd4:	dc 01       	movw	r26, r24
    7fd6:	cb 01       	movw	r24, r22
    7fd8:	bc 01       	movw	r22, r24
    7fda:	cd 01       	movw	r24, r26
    7fdc:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    7fe0:	dc 01       	movw	r26, r24
    7fe2:	cb 01       	movw	r24, r22
    7fe4:	bc 01       	movw	r22, r24
    7fe6:	cd 01       	movw	r24, r26
    7fe8:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    7fec:	dc 01       	movw	r26, r24
    7fee:	cb 01       	movw	r24, r22
    7ff0:	bc 01       	movw	r22, r24
    7ff2:	cd 01       	movw	r24, r26
    7ff4:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    7ff8:	dc 01       	movw	r26, r24
    7ffa:	cb 01       	movw	r24, r22
    7ffc:	bc 01       	movw	r22, r24
    7ffe:	cd 01       	movw	r24, r26
    8000:	29 81       	ldd	r18, Y+1	; 0x01
    8002:	3a 81       	ldd	r19, Y+2	; 0x02
    8004:	4b 81       	ldd	r20, Y+3	; 0x03
    8006:	5c 81       	ldd	r21, Y+4	; 0x04
    8008:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    800c:	dc 01       	movw	r26, r24
    800e:	cb 01       	movw	r24, r22
    8010:	9c 01       	movw	r18, r24
    8012:	ad 01       	movw	r20, r26
    8014:	6d 81       	ldd	r22, Y+5	; 0x05
    8016:	7e 81       	ldd	r23, Y+6	; 0x06
    8018:	8f 81       	ldd	r24, Y+7	; 0x07
    801a:	98 85       	ldd	r25, Y+8	; 0x08
    801c:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    8020:	dc 01       	movw	r26, r24
    8022:	cb 01       	movw	r24, r22
    8024:	bc 01       	movw	r22, r24
    8026:	cd 01       	movw	r24, r26
    8028:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
    802c:	9e 87       	std	Y+14, r25	; 0x0e
    802e:	8d 87       	std	Y+13, r24	; 0x0d
    8030:	8d 85       	ldd	r24, Y+13	; 0x0d
    8032:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    8034:	2e 96       	adiw	r28, 0x0e	; 14
    8036:	0f b6       	in	r0, 0x3f	; 63
    8038:	f8 94       	cli
    803a:	de bf       	out	0x3e, r29	; 62
    803c:	0f be       	out	0x3f, r0	; 63
    803e:	cd bf       	out	0x3d, r28	; 61
    8040:	cf 91       	pop	r28
    8042:	df 91       	pop	r29
    8044:	08 95       	ret

00008046 <vdmModGC>:

TVP vdmModGC(TVP a, TVP b, TVP *from)
{
    8046:	df 93       	push	r29
    8048:	cf 93       	push	r28
    804a:	cd b7       	in	r28, 0x3d	; 61
    804c:	de b7       	in	r29, 0x3e	; 62
    804e:	60 97       	sbiw	r28, 0x10	; 16
    8050:	0f b6       	in	r0, 0x3f	; 63
    8052:	f8 94       	cli
    8054:	de bf       	out	0x3e, r29	; 62
    8056:	0f be       	out	0x3f, r0	; 63
    8058:	cd bf       	out	0x3d, r28	; 61
    805a:	9a 87       	std	Y+10, r25	; 0x0a
    805c:	89 87       	std	Y+9, r24	; 0x09
    805e:	7c 87       	std	Y+12, r23	; 0x0c
    8060:	6b 87       	std	Y+11, r22	; 0x0b
    8062:	5e 87       	std	Y+14, r21	; 0x0e
    8064:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8066:	e9 85       	ldd	r30, Y+9	; 0x09
    8068:	fa 85       	ldd	r31, Y+10	; 0x0a
    806a:	80 81       	ld	r24, Z
    806c:	91 81       	ldd	r25, Z+1	; 0x01
    806e:	00 97       	sbiw	r24, 0x00	; 0
    8070:	f1 f0       	breq	.+60     	; 0x80ae <vdmModGC+0x68>
    8072:	e9 85       	ldd	r30, Y+9	; 0x09
    8074:	fa 85       	ldd	r31, Y+10	; 0x0a
    8076:	80 81       	ld	r24, Z
    8078:	91 81       	ldd	r25, Z+1	; 0x01
    807a:	81 30       	cpi	r24, 0x01	; 1
    807c:	91 05       	cpc	r25, r1
    807e:	b9 f0       	breq	.+46     	; 0x80ae <vdmModGC+0x68>
    8080:	e9 85       	ldd	r30, Y+9	; 0x09
    8082:	fa 85       	ldd	r31, Y+10	; 0x0a
    8084:	80 81       	ld	r24, Z
    8086:	91 81       	ldd	r25, Z+1	; 0x01
    8088:	82 30       	cpi	r24, 0x02	; 2
    808a:	91 05       	cpc	r25, r1
    808c:	81 f0       	breq	.+32     	; 0x80ae <vdmModGC+0x68>
    808e:	e9 85       	ldd	r30, Y+9	; 0x09
    8090:	fa 85       	ldd	r31, Y+10	; 0x0a
    8092:	80 81       	ld	r24, Z
    8094:	91 81       	ldd	r25, Z+1	; 0x01
    8096:	84 30       	cpi	r24, 0x04	; 4
    8098:	91 05       	cpc	r25, r1
    809a:	49 f0       	breq	.+18     	; 0x80ae <vdmModGC+0x68>
    809c:	e9 85       	ldd	r30, Y+9	; 0x09
    809e:	fa 85       	ldd	r31, Y+10	; 0x0a
    80a0:	80 81       	ld	r24, Z
    80a2:	91 81       	ldd	r25, Z+1	; 0x01
    80a4:	85 30       	cpi	r24, 0x05	; 5
    80a6:	91 05       	cpc	r25, r1
    80a8:	11 f0       	breq	.+4      	; 0x80ae <vdmModGC+0x68>
    80aa:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    80ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    80b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    80b2:	80 81       	ld	r24, Z
    80b4:	91 81       	ldd	r25, Z+1	; 0x01
    80b6:	00 97       	sbiw	r24, 0x00	; 0
    80b8:	f1 f0       	breq	.+60     	; 0x80f6 <vdmModGC+0xb0>
    80ba:	eb 85       	ldd	r30, Y+11	; 0x0b
    80bc:	fc 85       	ldd	r31, Y+12	; 0x0c
    80be:	80 81       	ld	r24, Z
    80c0:	91 81       	ldd	r25, Z+1	; 0x01
    80c2:	81 30       	cpi	r24, 0x01	; 1
    80c4:	91 05       	cpc	r25, r1
    80c6:	b9 f0       	breq	.+46     	; 0x80f6 <vdmModGC+0xb0>
    80c8:	eb 85       	ldd	r30, Y+11	; 0x0b
    80ca:	fc 85       	ldd	r31, Y+12	; 0x0c
    80cc:	80 81       	ld	r24, Z
    80ce:	91 81       	ldd	r25, Z+1	; 0x01
    80d0:	82 30       	cpi	r24, 0x02	; 2
    80d2:	91 05       	cpc	r25, r1
    80d4:	81 f0       	breq	.+32     	; 0x80f6 <vdmModGC+0xb0>
    80d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    80d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    80da:	80 81       	ld	r24, Z
    80dc:	91 81       	ldd	r25, Z+1	; 0x01
    80de:	84 30       	cpi	r24, 0x04	; 4
    80e0:	91 05       	cpc	r25, r1
    80e2:	49 f0       	breq	.+18     	; 0x80f6 <vdmModGC+0xb0>
    80e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    80e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    80e8:	80 81       	ld	r24, Z
    80ea:	91 81       	ldd	r25, Z+1	; 0x01
    80ec:	85 30       	cpi	r24, 0x05	; 5
    80ee:	91 05       	cpc	r25, r1
    80f0:	11 f0       	breq	.+4      	; 0x80f6 <vdmModGC+0xb0>
    80f2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* See https://github.com/overturetool/overture/blob/development/core/interpreter/src/main/java/org/overture/interpreter/eval/BinaryExpressionEvaluator.java#L575  */
	ASSERT_CHECK_INT(a);
    80f6:	e9 85       	ldd	r30, Y+9	; 0x09
    80f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    80fa:	80 81       	ld	r24, Z
    80fc:	91 81       	ldd	r25, Z+1	; 0x01
    80fe:	00 97       	sbiw	r24, 0x00	; 0
    8100:	11 f0       	breq	.+4      	; 0x8106 <vdmModGC+0xc0>
    8102:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_INT(b);
    8106:	eb 85       	ldd	r30, Y+11	; 0x0b
    8108:	fc 85       	ldd	r31, Y+12	; 0x0c
    810a:	80 81       	ld	r24, Z
    810c:	91 81       	ldd	r25, Z+1	; 0x01
    810e:	00 97       	sbiw	r24, 0x00	; 0
    8110:	11 f0       	breq	.+4      	; 0x8116 <vdmModGC+0xd0>
    8112:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double lv =(int) toDouble(a);
    8116:	89 85       	ldd	r24, Y+9	; 0x09
    8118:	9a 85       	ldd	r25, Y+10	; 0x0a
    811a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    811e:	dc 01       	movw	r26, r24
    8120:	cb 01       	movw	r24, r22
    8122:	bc 01       	movw	r22, r24
    8124:	cd 01       	movw	r24, r26
    8126:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    812a:	dc 01       	movw	r26, r24
    812c:	cb 01       	movw	r24, r22
    812e:	aa 27       	eor	r26, r26
    8130:	97 fd       	sbrc	r25, 7
    8132:	a0 95       	com	r26
    8134:	ba 2f       	mov	r27, r26
    8136:	bc 01       	movw	r22, r24
    8138:	cd 01       	movw	r24, r26
    813a:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    813e:	dc 01       	movw	r26, r24
    8140:	cb 01       	movw	r24, r22
    8142:	8d 83       	std	Y+5, r24	; 0x05
    8144:	9e 83       	std	Y+6, r25	; 0x06
    8146:	af 83       	std	Y+7, r26	; 0x07
    8148:	b8 87       	std	Y+8, r27	; 0x08
	double rv = (int)toDouble(b);
    814a:	8b 85       	ldd	r24, Y+11	; 0x0b
    814c:	9c 85       	ldd	r25, Y+12	; 0x0c
    814e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8152:	dc 01       	movw	r26, r24
    8154:	cb 01       	movw	r24, r22
    8156:	bc 01       	movw	r22, r24
    8158:	cd 01       	movw	r24, r26
    815a:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    815e:	dc 01       	movw	r26, r24
    8160:	cb 01       	movw	r24, r22
    8162:	aa 27       	eor	r26, r26
    8164:	97 fd       	sbrc	r25, 7
    8166:	a0 95       	com	r26
    8168:	ba 2f       	mov	r27, r26
    816a:	bc 01       	movw	r22, r24
    816c:	cd 01       	movw	r24, r26
    816e:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    8172:	dc 01       	movw	r26, r24
    8174:	cb 01       	movw	r24, r22
    8176:	89 83       	std	Y+1, r24	; 0x01
    8178:	9a 83       	std	Y+2, r25	; 0x02
    817a:	ab 83       	std	Y+3, r26	; 0x03
    817c:	bc 83       	std	Y+4, r27	; 0x04

	if((a->type == VDM_INT || a->type == VDM_NAT || a->type == VDM_NAT1) &&
    817e:	e9 85       	ldd	r30, Y+9	; 0x09
    8180:	fa 85       	ldd	r31, Y+10	; 0x0a
    8182:	80 81       	ld	r24, Z
    8184:	91 81       	ldd	r25, Z+1	; 0x01
    8186:	00 97       	sbiw	r24, 0x00	; 0
    8188:	79 f0       	breq	.+30     	; 0x81a8 <vdmModGC+0x162>
    818a:	e9 85       	ldd	r30, Y+9	; 0x09
    818c:	fa 85       	ldd	r31, Y+10	; 0x0a
    818e:	80 81       	ld	r24, Z
    8190:	91 81       	ldd	r25, Z+1	; 0x01
    8192:	81 30       	cpi	r24, 0x01	; 1
    8194:	91 05       	cpc	r25, r1
    8196:	41 f0       	breq	.+16     	; 0x81a8 <vdmModGC+0x162>
    8198:	e9 85       	ldd	r30, Y+9	; 0x09
    819a:	fa 85       	ldd	r31, Y+10	; 0x0a
    819c:	80 81       	ld	r24, Z
    819e:	91 81       	ldd	r25, Z+1	; 0x01
    81a0:	82 30       	cpi	r24, 0x02	; 2
    81a2:	91 05       	cpc	r25, r1
    81a4:	09 f0       	breq	.+2      	; 0x81a8 <vdmModGC+0x162>
    81a6:	55 c0       	rjmp	.+170    	; 0x8252 <vdmModGC+0x20c>
    81a8:	eb 85       	ldd	r30, Y+11	; 0x0b
    81aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    81ac:	80 81       	ld	r24, Z
    81ae:	91 81       	ldd	r25, Z+1	; 0x01
    81b0:	00 97       	sbiw	r24, 0x00	; 0
    81b2:	79 f0       	breq	.+30     	; 0x81d2 <vdmModGC+0x18c>
    81b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    81b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    81b8:	80 81       	ld	r24, Z
    81ba:	91 81       	ldd	r25, Z+1	; 0x01
    81bc:	81 30       	cpi	r24, 0x01	; 1
    81be:	91 05       	cpc	r25, r1
    81c0:	41 f0       	breq	.+16     	; 0x81d2 <vdmModGC+0x18c>
    81c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    81c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    81c6:	80 81       	ld	r24, Z
    81c8:	91 81       	ldd	r25, Z+1	; 0x01
    81ca:	82 30       	cpi	r24, 0x02	; 2
    81cc:	91 05       	cpc	r25, r1
    81ce:	09 f0       	breq	.+2      	; 0x81d2 <vdmModGC+0x18c>
    81d0:	40 c0       	rjmp	.+128    	; 0x8252 <vdmModGC+0x20c>
				(b->type == VDM_INT || b->type == VDM_NAT || b->type == VDM_NAT1))
			return newIntGC((int)(lv-rv*(long) floor(lv/rv)), from);
    81d2:	6d 81       	ldd	r22, Y+5	; 0x05
    81d4:	7e 81       	ldd	r23, Y+6	; 0x06
    81d6:	8f 81       	ldd	r24, Y+7	; 0x07
    81d8:	98 85       	ldd	r25, Y+8	; 0x08
    81da:	29 81       	ldd	r18, Y+1	; 0x01
    81dc:	3a 81       	ldd	r19, Y+2	; 0x02
    81de:	4b 81       	ldd	r20, Y+3	; 0x03
    81e0:	5c 81       	ldd	r21, Y+4	; 0x04
    81e2:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    81e6:	dc 01       	movw	r26, r24
    81e8:	cb 01       	movw	r24, r22
    81ea:	bc 01       	movw	r22, r24
    81ec:	cd 01       	movw	r24, r26
    81ee:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    81f2:	dc 01       	movw	r26, r24
    81f4:	cb 01       	movw	r24, r22
    81f6:	bc 01       	movw	r22, r24
    81f8:	cd 01       	movw	r24, r26
    81fa:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    81fe:	dc 01       	movw	r26, r24
    8200:	cb 01       	movw	r24, r22
    8202:	bc 01       	movw	r22, r24
    8204:	cd 01       	movw	r24, r26
    8206:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    820a:	dc 01       	movw	r26, r24
    820c:	cb 01       	movw	r24, r22
    820e:	bc 01       	movw	r22, r24
    8210:	cd 01       	movw	r24, r26
    8212:	29 81       	ldd	r18, Y+1	; 0x01
    8214:	3a 81       	ldd	r19, Y+2	; 0x02
    8216:	4b 81       	ldd	r20, Y+3	; 0x03
    8218:	5c 81       	ldd	r21, Y+4	; 0x04
    821a:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    821e:	dc 01       	movw	r26, r24
    8220:	cb 01       	movw	r24, r22
    8222:	9c 01       	movw	r18, r24
    8224:	ad 01       	movw	r20, r26
    8226:	6d 81       	ldd	r22, Y+5	; 0x05
    8228:	7e 81       	ldd	r23, Y+6	; 0x06
    822a:	8f 81       	ldd	r24, Y+7	; 0x07
    822c:	98 85       	ldd	r25, Y+8	; 0x08
    822e:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    8232:	dc 01       	movw	r26, r24
    8234:	cb 01       	movw	r24, r22
    8236:	bc 01       	movw	r22, r24
    8238:	cd 01       	movw	r24, r26
    823a:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    823e:	dc 01       	movw	r26, r24
    8240:	cb 01       	movw	r24, r22
    8242:	2d 85       	ldd	r18, Y+13	; 0x0d
    8244:	3e 85       	ldd	r19, Y+14	; 0x0e
    8246:	b9 01       	movw	r22, r18
    8248:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
    824c:	98 8b       	std	Y+16, r25	; 0x10
    824e:	8f 87       	std	Y+15, r24	; 0x0f
    8250:	3b c0       	rjmp	.+118    	; 0x82c8 <vdmModGC+0x282>

		return newRealGC(lv-rv*(long) floor(lv/rv), from);
    8252:	6d 81       	ldd	r22, Y+5	; 0x05
    8254:	7e 81       	ldd	r23, Y+6	; 0x06
    8256:	8f 81       	ldd	r24, Y+7	; 0x07
    8258:	98 85       	ldd	r25, Y+8	; 0x08
    825a:	29 81       	ldd	r18, Y+1	; 0x01
    825c:	3a 81       	ldd	r19, Y+2	; 0x02
    825e:	4b 81       	ldd	r20, Y+3	; 0x03
    8260:	5c 81       	ldd	r21, Y+4	; 0x04
    8262:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divsf3>
    8266:	dc 01       	movw	r26, r24
    8268:	cb 01       	movw	r24, r22
    826a:	bc 01       	movw	r22, r24
    826c:	cd 01       	movw	r24, r26
    826e:	0e 94 fa 6f 	call	0xdff4	; 0xdff4 <floor>
    8272:	dc 01       	movw	r26, r24
    8274:	cb 01       	movw	r24, r22
    8276:	bc 01       	movw	r22, r24
    8278:	cd 01       	movw	r24, r26
    827a:	0e 94 8c 6f 	call	0xdf18	; 0xdf18 <__fixsfsi>
    827e:	dc 01       	movw	r26, r24
    8280:	cb 01       	movw	r24, r22
    8282:	bc 01       	movw	r22, r24
    8284:	cd 01       	movw	r24, r26
    8286:	0e 94 bf 6f 	call	0xdf7e	; 0xdf7e <__floatsisf>
    828a:	dc 01       	movw	r26, r24
    828c:	cb 01       	movw	r24, r22
    828e:	bc 01       	movw	r22, r24
    8290:	cd 01       	movw	r24, r26
    8292:	29 81       	ldd	r18, Y+1	; 0x01
    8294:	3a 81       	ldd	r19, Y+2	; 0x02
    8296:	4b 81       	ldd	r20, Y+3	; 0x03
    8298:	5c 81       	ldd	r21, Y+4	; 0x04
    829a:	0e 94 c6 70 	call	0xe18c	; 0xe18c <__mulsf3>
    829e:	dc 01       	movw	r26, r24
    82a0:	cb 01       	movw	r24, r22
    82a2:	9c 01       	movw	r18, r24
    82a4:	ad 01       	movw	r20, r26
    82a6:	6d 81       	ldd	r22, Y+5	; 0x05
    82a8:	7e 81       	ldd	r23, Y+6	; 0x06
    82aa:	8f 81       	ldd	r24, Y+7	; 0x07
    82ac:	98 85       	ldd	r25, Y+8	; 0x08
    82ae:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <__subsf3>
    82b2:	dc 01       	movw	r26, r24
    82b4:	cb 01       	movw	r24, r22
    82b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    82b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    82ba:	bc 01       	movw	r22, r24
    82bc:	cd 01       	movw	r24, r26
    82be:	a9 01       	movw	r20, r18
    82c0:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
    82c4:	98 8b       	std	Y+16, r25	; 0x10
    82c6:	8f 87       	std	Y+15, r24	; 0x0f
    82c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    82ca:	98 89       	ldd	r25, Y+16	; 0x10
}
    82cc:	60 96       	adiw	r28, 0x10	; 16
    82ce:	0f b6       	in	r0, 0x3f	; 63
    82d0:	f8 94       	cli
    82d2:	de bf       	out	0x3e, r29	; 62
    82d4:	0f be       	out	0x3f, r0	; 63
    82d6:	cd bf       	out	0x3d, r28	; 61
    82d8:	cf 91       	pop	r28
    82da:	df 91       	pop	r29
    82dc:	08 95       	ret

000082de <vdmPower>:

TVP vdmPower(TVP a,TVP b)
{
    82de:	df 93       	push	r29
    82e0:	cf 93       	push	r28
    82e2:	cd b7       	in	r28, 0x3d	; 61
    82e4:	de b7       	in	r29, 0x3e	; 62
    82e6:	2c 97       	sbiw	r28, 0x0c	; 12
    82e8:	0f b6       	in	r0, 0x3f	; 63
    82ea:	f8 94       	cli
    82ec:	de bf       	out	0x3e, r29	; 62
    82ee:	0f be       	out	0x3f, r0	; 63
    82f0:	cd bf       	out	0x3d, r28	; 61
    82f2:	9a 87       	std	Y+10, r25	; 0x0a
    82f4:	89 87       	std	Y+9, r24	; 0x09
    82f6:	7c 87       	std	Y+12, r23	; 0x0c
    82f8:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    82fa:	e9 85       	ldd	r30, Y+9	; 0x09
    82fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    82fe:	80 81       	ld	r24, Z
    8300:	91 81       	ldd	r25, Z+1	; 0x01
    8302:	00 97       	sbiw	r24, 0x00	; 0
    8304:	f1 f0       	breq	.+60     	; 0x8342 <vdmPower+0x64>
    8306:	e9 85       	ldd	r30, Y+9	; 0x09
    8308:	fa 85       	ldd	r31, Y+10	; 0x0a
    830a:	80 81       	ld	r24, Z
    830c:	91 81       	ldd	r25, Z+1	; 0x01
    830e:	81 30       	cpi	r24, 0x01	; 1
    8310:	91 05       	cpc	r25, r1
    8312:	b9 f0       	breq	.+46     	; 0x8342 <vdmPower+0x64>
    8314:	e9 85       	ldd	r30, Y+9	; 0x09
    8316:	fa 85       	ldd	r31, Y+10	; 0x0a
    8318:	80 81       	ld	r24, Z
    831a:	91 81       	ldd	r25, Z+1	; 0x01
    831c:	82 30       	cpi	r24, 0x02	; 2
    831e:	91 05       	cpc	r25, r1
    8320:	81 f0       	breq	.+32     	; 0x8342 <vdmPower+0x64>
    8322:	e9 85       	ldd	r30, Y+9	; 0x09
    8324:	fa 85       	ldd	r31, Y+10	; 0x0a
    8326:	80 81       	ld	r24, Z
    8328:	91 81       	ldd	r25, Z+1	; 0x01
    832a:	84 30       	cpi	r24, 0x04	; 4
    832c:	91 05       	cpc	r25, r1
    832e:	49 f0       	breq	.+18     	; 0x8342 <vdmPower+0x64>
    8330:	e9 85       	ldd	r30, Y+9	; 0x09
    8332:	fa 85       	ldd	r31, Y+10	; 0x0a
    8334:	80 81       	ld	r24, Z
    8336:	91 81       	ldd	r25, Z+1	; 0x01
    8338:	85 30       	cpi	r24, 0x05	; 5
    833a:	91 05       	cpc	r25, r1
    833c:	11 f0       	breq	.+4      	; 0x8342 <vdmPower+0x64>
    833e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8342:	eb 85       	ldd	r30, Y+11	; 0x0b
    8344:	fc 85       	ldd	r31, Y+12	; 0x0c
    8346:	80 81       	ld	r24, Z
    8348:	91 81       	ldd	r25, Z+1	; 0x01
    834a:	00 97       	sbiw	r24, 0x00	; 0
    834c:	f1 f0       	breq	.+60     	; 0x838a <vdmPower+0xac>
    834e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8350:	fc 85       	ldd	r31, Y+12	; 0x0c
    8352:	80 81       	ld	r24, Z
    8354:	91 81       	ldd	r25, Z+1	; 0x01
    8356:	81 30       	cpi	r24, 0x01	; 1
    8358:	91 05       	cpc	r25, r1
    835a:	b9 f0       	breq	.+46     	; 0x838a <vdmPower+0xac>
    835c:	eb 85       	ldd	r30, Y+11	; 0x0b
    835e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8360:	80 81       	ld	r24, Z
    8362:	91 81       	ldd	r25, Z+1	; 0x01
    8364:	82 30       	cpi	r24, 0x02	; 2
    8366:	91 05       	cpc	r25, r1
    8368:	81 f0       	breq	.+32     	; 0x838a <vdmPower+0xac>
    836a:	eb 85       	ldd	r30, Y+11	; 0x0b
    836c:	fc 85       	ldd	r31, Y+12	; 0x0c
    836e:	80 81       	ld	r24, Z
    8370:	91 81       	ldd	r25, Z+1	; 0x01
    8372:	84 30       	cpi	r24, 0x04	; 4
    8374:	91 05       	cpc	r25, r1
    8376:	49 f0       	breq	.+18     	; 0x838a <vdmPower+0xac>
    8378:	eb 85       	ldd	r30, Y+11	; 0x0b
    837a:	fc 85       	ldd	r31, Y+12	; 0x0c
    837c:	80 81       	ld	r24, Z
    837e:	91 81       	ldd	r25, Z+1	; 0x01
    8380:	85 30       	cpi	r24, 0x05	; 5
    8382:	91 05       	cpc	r25, r1
    8384:	11 f0       	breq	.+4      	; 0x838a <vdmPower+0xac>
    8386:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    838a:	89 85       	ldd	r24, Y+9	; 0x09
    838c:	9a 85       	ldd	r25, Y+10	; 0x0a
    838e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8392:	dc 01       	movw	r26, r24
    8394:	cb 01       	movw	r24, r22
    8396:	8d 83       	std	Y+5, r24	; 0x05
    8398:	9e 83       	std	Y+6, r25	; 0x06
    839a:	af 83       	std	Y+7, r26	; 0x07
    839c:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    839e:	8b 85       	ldd	r24, Y+11	; 0x0b
    83a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    83a2:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    83a6:	dc 01       	movw	r26, r24
    83a8:	cb 01       	movw	r24, r22
    83aa:	89 83       	std	Y+1, r24	; 0x01
    83ac:	9a 83       	std	Y+2, r25	; 0x02
    83ae:	ab 83       	std	Y+3, r26	; 0x03
    83b0:	bc 83       	std	Y+4, r27	; 0x04

	return newReal(pow(av,bv));
    83b2:	8d 81       	ldd	r24, Y+5	; 0x05
    83b4:	9e 81       	ldd	r25, Y+6	; 0x06
    83b6:	af 81       	ldd	r26, Y+7	; 0x07
    83b8:	b8 85       	ldd	r27, Y+8	; 0x08
    83ba:	29 81       	ldd	r18, Y+1	; 0x01
    83bc:	3a 81       	ldd	r19, Y+2	; 0x02
    83be:	4b 81       	ldd	r20, Y+3	; 0x03
    83c0:	5c 81       	ldd	r21, Y+4	; 0x04
    83c2:	bc 01       	movw	r22, r24
    83c4:	cd 01       	movw	r24, r26
    83c6:	0e 94 29 71 	call	0xe252	; 0xe252 <pow>
    83ca:	dc 01       	movw	r26, r24
    83cc:	cb 01       	movw	r24, r22
    83ce:	bc 01       	movw	r22, r24
    83d0:	cd 01       	movw	r24, r26
    83d2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <newReal>
}
    83d6:	2c 96       	adiw	r28, 0x0c	; 12
    83d8:	0f b6       	in	r0, 0x3f	; 63
    83da:	f8 94       	cli
    83dc:	de bf       	out	0x3e, r29	; 62
    83de:	0f be       	out	0x3f, r0	; 63
    83e0:	cd bf       	out	0x3d, r28	; 61
    83e2:	cf 91       	pop	r28
    83e4:	df 91       	pop	r29
    83e6:	08 95       	ret

000083e8 <vdmPowerGC>:

TVP vdmPowerGC(TVP a, TVP b, TVP *from)
{
    83e8:	df 93       	push	r29
    83ea:	cf 93       	push	r28
    83ec:	cd b7       	in	r28, 0x3d	; 61
    83ee:	de b7       	in	r29, 0x3e	; 62
    83f0:	2e 97       	sbiw	r28, 0x0e	; 14
    83f2:	0f b6       	in	r0, 0x3f	; 63
    83f4:	f8 94       	cli
    83f6:	de bf       	out	0x3e, r29	; 62
    83f8:	0f be       	out	0x3f, r0	; 63
    83fa:	cd bf       	out	0x3d, r28	; 61
    83fc:	9a 87       	std	Y+10, r25	; 0x0a
    83fe:	89 87       	std	Y+9, r24	; 0x09
    8400:	7c 87       	std	Y+12, r23	; 0x0c
    8402:	6b 87       	std	Y+11, r22	; 0x0b
    8404:	5e 87       	std	Y+14, r21	; 0x0e
    8406:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8408:	e9 85       	ldd	r30, Y+9	; 0x09
    840a:	fa 85       	ldd	r31, Y+10	; 0x0a
    840c:	80 81       	ld	r24, Z
    840e:	91 81       	ldd	r25, Z+1	; 0x01
    8410:	00 97       	sbiw	r24, 0x00	; 0
    8412:	f1 f0       	breq	.+60     	; 0x8450 <vdmPowerGC+0x68>
    8414:	e9 85       	ldd	r30, Y+9	; 0x09
    8416:	fa 85       	ldd	r31, Y+10	; 0x0a
    8418:	80 81       	ld	r24, Z
    841a:	91 81       	ldd	r25, Z+1	; 0x01
    841c:	81 30       	cpi	r24, 0x01	; 1
    841e:	91 05       	cpc	r25, r1
    8420:	b9 f0       	breq	.+46     	; 0x8450 <vdmPowerGC+0x68>
    8422:	e9 85       	ldd	r30, Y+9	; 0x09
    8424:	fa 85       	ldd	r31, Y+10	; 0x0a
    8426:	80 81       	ld	r24, Z
    8428:	91 81       	ldd	r25, Z+1	; 0x01
    842a:	82 30       	cpi	r24, 0x02	; 2
    842c:	91 05       	cpc	r25, r1
    842e:	81 f0       	breq	.+32     	; 0x8450 <vdmPowerGC+0x68>
    8430:	e9 85       	ldd	r30, Y+9	; 0x09
    8432:	fa 85       	ldd	r31, Y+10	; 0x0a
    8434:	80 81       	ld	r24, Z
    8436:	91 81       	ldd	r25, Z+1	; 0x01
    8438:	84 30       	cpi	r24, 0x04	; 4
    843a:	91 05       	cpc	r25, r1
    843c:	49 f0       	breq	.+18     	; 0x8450 <vdmPowerGC+0x68>
    843e:	e9 85       	ldd	r30, Y+9	; 0x09
    8440:	fa 85       	ldd	r31, Y+10	; 0x0a
    8442:	80 81       	ld	r24, Z
    8444:	91 81       	ldd	r25, Z+1	; 0x01
    8446:	85 30       	cpi	r24, 0x05	; 5
    8448:	91 05       	cpc	r25, r1
    844a:	11 f0       	breq	.+4      	; 0x8450 <vdmPowerGC+0x68>
    844c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8450:	eb 85       	ldd	r30, Y+11	; 0x0b
    8452:	fc 85       	ldd	r31, Y+12	; 0x0c
    8454:	80 81       	ld	r24, Z
    8456:	91 81       	ldd	r25, Z+1	; 0x01
    8458:	00 97       	sbiw	r24, 0x00	; 0
    845a:	f1 f0       	breq	.+60     	; 0x8498 <vdmPowerGC+0xb0>
    845c:	eb 85       	ldd	r30, Y+11	; 0x0b
    845e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8460:	80 81       	ld	r24, Z
    8462:	91 81       	ldd	r25, Z+1	; 0x01
    8464:	81 30       	cpi	r24, 0x01	; 1
    8466:	91 05       	cpc	r25, r1
    8468:	b9 f0       	breq	.+46     	; 0x8498 <vdmPowerGC+0xb0>
    846a:	eb 85       	ldd	r30, Y+11	; 0x0b
    846c:	fc 85       	ldd	r31, Y+12	; 0x0c
    846e:	80 81       	ld	r24, Z
    8470:	91 81       	ldd	r25, Z+1	; 0x01
    8472:	82 30       	cpi	r24, 0x02	; 2
    8474:	91 05       	cpc	r25, r1
    8476:	81 f0       	breq	.+32     	; 0x8498 <vdmPowerGC+0xb0>
    8478:	eb 85       	ldd	r30, Y+11	; 0x0b
    847a:	fc 85       	ldd	r31, Y+12	; 0x0c
    847c:	80 81       	ld	r24, Z
    847e:	91 81       	ldd	r25, Z+1	; 0x01
    8480:	84 30       	cpi	r24, 0x04	; 4
    8482:	91 05       	cpc	r25, r1
    8484:	49 f0       	breq	.+18     	; 0x8498 <vdmPowerGC+0xb0>
    8486:	eb 85       	ldd	r30, Y+11	; 0x0b
    8488:	fc 85       	ldd	r31, Y+12	; 0x0c
    848a:	80 81       	ld	r24, Z
    848c:	91 81       	ldd	r25, Z+1	; 0x01
    848e:	85 30       	cpi	r24, 0x05	; 5
    8490:	91 05       	cpc	r25, r1
    8492:	11 f0       	breq	.+4      	; 0x8498 <vdmPowerGC+0xb0>
    8494:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    8498:	89 85       	ldd	r24, Y+9	; 0x09
    849a:	9a 85       	ldd	r25, Y+10	; 0x0a
    849c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    84a0:	dc 01       	movw	r26, r24
    84a2:	cb 01       	movw	r24, r22
    84a4:	8d 83       	std	Y+5, r24	; 0x05
    84a6:	9e 83       	std	Y+6, r25	; 0x06
    84a8:	af 83       	std	Y+7, r26	; 0x07
    84aa:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    84ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    84ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    84b0:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    84b4:	dc 01       	movw	r26, r24
    84b6:	cb 01       	movw	r24, r22
    84b8:	89 83       	std	Y+1, r24	; 0x01
    84ba:	9a 83       	std	Y+2, r25	; 0x02
    84bc:	ab 83       	std	Y+3, r26	; 0x03
    84be:	bc 83       	std	Y+4, r27	; 0x04

	return newRealGC(pow(av,bv), from);
    84c0:	8d 81       	ldd	r24, Y+5	; 0x05
    84c2:	9e 81       	ldd	r25, Y+6	; 0x06
    84c4:	af 81       	ldd	r26, Y+7	; 0x07
    84c6:	b8 85       	ldd	r27, Y+8	; 0x08
    84c8:	29 81       	ldd	r18, Y+1	; 0x01
    84ca:	3a 81       	ldd	r19, Y+2	; 0x02
    84cc:	4b 81       	ldd	r20, Y+3	; 0x03
    84ce:	5c 81       	ldd	r21, Y+4	; 0x04
    84d0:	bc 01       	movw	r22, r24
    84d2:	cd 01       	movw	r24, r26
    84d4:	0e 94 29 71 	call	0xe252	; 0xe252 <pow>
    84d8:	dc 01       	movw	r26, r24
    84da:	cb 01       	movw	r24, r22
    84dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    84de:	3e 85       	ldd	r19, Y+14	; 0x0e
    84e0:	bc 01       	movw	r22, r24
    84e2:	cd 01       	movw	r24, r26
    84e4:	a9 01       	movw	r20, r18
    84e6:	0e 94 06 4b 	call	0x960c	; 0x960c <newRealGC>
}
    84ea:	2e 96       	adiw	r28, 0x0e	; 14
    84ec:	0f b6       	in	r0, 0x3f	; 63
    84ee:	f8 94       	cli
    84f0:	de bf       	out	0x3e, r29	; 62
    84f2:	0f be       	out	0x3f, r0	; 63
    84f4:	cd bf       	out	0x3d, r28	; 61
    84f6:	cf 91       	pop	r28
    84f8:	df 91       	pop	r29
    84fa:	08 95       	ret

000084fc <vdmNumericEqual>:

TVP vdmNumericEqual(TVP a,TVP b)
{
    84fc:	df 93       	push	r29
    84fe:	cf 93       	push	r28
    8500:	cd b7       	in	r28, 0x3d	; 61
    8502:	de b7       	in	r29, 0x3e	; 62
    8504:	2d 97       	sbiw	r28, 0x0d	; 13
    8506:	0f b6       	in	r0, 0x3f	; 63
    8508:	f8 94       	cli
    850a:	de bf       	out	0x3e, r29	; 62
    850c:	0f be       	out	0x3f, r0	; 63
    850e:	cd bf       	out	0x3d, r28	; 61
    8510:	9a 87       	std	Y+10, r25	; 0x0a
    8512:	89 87       	std	Y+9, r24	; 0x09
    8514:	7c 87       	std	Y+12, r23	; 0x0c
    8516:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    8518:	e9 85       	ldd	r30, Y+9	; 0x09
    851a:	fa 85       	ldd	r31, Y+10	; 0x0a
    851c:	80 81       	ld	r24, Z
    851e:	91 81       	ldd	r25, Z+1	; 0x01
    8520:	00 97       	sbiw	r24, 0x00	; 0
    8522:	f1 f0       	breq	.+60     	; 0x8560 <vdmNumericEqual+0x64>
    8524:	e9 85       	ldd	r30, Y+9	; 0x09
    8526:	fa 85       	ldd	r31, Y+10	; 0x0a
    8528:	80 81       	ld	r24, Z
    852a:	91 81       	ldd	r25, Z+1	; 0x01
    852c:	81 30       	cpi	r24, 0x01	; 1
    852e:	91 05       	cpc	r25, r1
    8530:	b9 f0       	breq	.+46     	; 0x8560 <vdmNumericEqual+0x64>
    8532:	e9 85       	ldd	r30, Y+9	; 0x09
    8534:	fa 85       	ldd	r31, Y+10	; 0x0a
    8536:	80 81       	ld	r24, Z
    8538:	91 81       	ldd	r25, Z+1	; 0x01
    853a:	82 30       	cpi	r24, 0x02	; 2
    853c:	91 05       	cpc	r25, r1
    853e:	81 f0       	breq	.+32     	; 0x8560 <vdmNumericEqual+0x64>
    8540:	e9 85       	ldd	r30, Y+9	; 0x09
    8542:	fa 85       	ldd	r31, Y+10	; 0x0a
    8544:	80 81       	ld	r24, Z
    8546:	91 81       	ldd	r25, Z+1	; 0x01
    8548:	84 30       	cpi	r24, 0x04	; 4
    854a:	91 05       	cpc	r25, r1
    854c:	49 f0       	breq	.+18     	; 0x8560 <vdmNumericEqual+0x64>
    854e:	e9 85       	ldd	r30, Y+9	; 0x09
    8550:	fa 85       	ldd	r31, Y+10	; 0x0a
    8552:	80 81       	ld	r24, Z
    8554:	91 81       	ldd	r25, Z+1	; 0x01
    8556:	85 30       	cpi	r24, 0x05	; 5
    8558:	91 05       	cpc	r25, r1
    855a:	11 f0       	breq	.+4      	; 0x8560 <vdmNumericEqual+0x64>
    855c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8560:	eb 85       	ldd	r30, Y+11	; 0x0b
    8562:	fc 85       	ldd	r31, Y+12	; 0x0c
    8564:	80 81       	ld	r24, Z
    8566:	91 81       	ldd	r25, Z+1	; 0x01
    8568:	00 97       	sbiw	r24, 0x00	; 0
    856a:	f1 f0       	breq	.+60     	; 0x85a8 <vdmNumericEqual+0xac>
    856c:	eb 85       	ldd	r30, Y+11	; 0x0b
    856e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8570:	80 81       	ld	r24, Z
    8572:	91 81       	ldd	r25, Z+1	; 0x01
    8574:	81 30       	cpi	r24, 0x01	; 1
    8576:	91 05       	cpc	r25, r1
    8578:	b9 f0       	breq	.+46     	; 0x85a8 <vdmNumericEqual+0xac>
    857a:	eb 85       	ldd	r30, Y+11	; 0x0b
    857c:	fc 85       	ldd	r31, Y+12	; 0x0c
    857e:	80 81       	ld	r24, Z
    8580:	91 81       	ldd	r25, Z+1	; 0x01
    8582:	82 30       	cpi	r24, 0x02	; 2
    8584:	91 05       	cpc	r25, r1
    8586:	81 f0       	breq	.+32     	; 0x85a8 <vdmNumericEqual+0xac>
    8588:	eb 85       	ldd	r30, Y+11	; 0x0b
    858a:	fc 85       	ldd	r31, Y+12	; 0x0c
    858c:	80 81       	ld	r24, Z
    858e:	91 81       	ldd	r25, Z+1	; 0x01
    8590:	84 30       	cpi	r24, 0x04	; 4
    8592:	91 05       	cpc	r25, r1
    8594:	49 f0       	breq	.+18     	; 0x85a8 <vdmNumericEqual+0xac>
    8596:	eb 85       	ldd	r30, Y+11	; 0x0b
    8598:	fc 85       	ldd	r31, Y+12	; 0x0c
    859a:	80 81       	ld	r24, Z
    859c:	91 81       	ldd	r25, Z+1	; 0x01
    859e:	85 30       	cpi	r24, 0x05	; 5
    85a0:	91 05       	cpc	r25, r1
    85a2:	11 f0       	breq	.+4      	; 0x85a8 <vdmNumericEqual+0xac>
    85a4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    85a8:	89 85       	ldd	r24, Y+9	; 0x09
    85aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    85ac:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    85b0:	dc 01       	movw	r26, r24
    85b2:	cb 01       	movw	r24, r22
    85b4:	8d 83       	std	Y+5, r24	; 0x05
    85b6:	9e 83       	std	Y+6, r25	; 0x06
    85b8:	af 83       	std	Y+7, r26	; 0x07
    85ba:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    85bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    85be:	9c 85       	ldd	r25, Y+12	; 0x0c
    85c0:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    85c4:	dc 01       	movw	r26, r24
    85c6:	cb 01       	movw	r24, r22
    85c8:	89 83       	std	Y+1, r24	; 0x01
    85ca:	9a 83       	std	Y+2, r25	; 0x02
    85cc:	ab 83       	std	Y+3, r26	; 0x03
    85ce:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av==bv);
    85d0:	1d 86       	std	Y+13, r1	; 0x0d
    85d2:	6d 81       	ldd	r22, Y+5	; 0x05
    85d4:	7e 81       	ldd	r23, Y+6	; 0x06
    85d6:	8f 81       	ldd	r24, Y+7	; 0x07
    85d8:	98 85       	ldd	r25, Y+8	; 0x08
    85da:	29 81       	ldd	r18, Y+1	; 0x01
    85dc:	3a 81       	ldd	r19, Y+2	; 0x02
    85de:	4b 81       	ldd	r20, Y+3	; 0x03
    85e0:	5c 81       	ldd	r21, Y+4	; 0x04
    85e2:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    85e6:	88 23       	and	r24, r24
    85e8:	11 f4       	brne	.+4      	; 0x85ee <vdmNumericEqual+0xf2>
    85ea:	81 e0       	ldi	r24, 0x01	; 1
    85ec:	8d 87       	std	Y+13, r24	; 0x0d
    85ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    85f0:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    85f4:	2d 96       	adiw	r28, 0x0d	; 13
    85f6:	0f b6       	in	r0, 0x3f	; 63
    85f8:	f8 94       	cli
    85fa:	de bf       	out	0x3e, r29	; 62
    85fc:	0f be       	out	0x3f, r0	; 63
    85fe:	cd bf       	out	0x3d, r28	; 61
    8600:	cf 91       	pop	r28
    8602:	df 91       	pop	r29
    8604:	08 95       	ret

00008606 <vdmNumericEqualGC>:

TVP vdmNumericEqualGC(TVP a, TVP b, TVP *from)
{
    8606:	df 93       	push	r29
    8608:	cf 93       	push	r28
    860a:	cd b7       	in	r28, 0x3d	; 61
    860c:	de b7       	in	r29, 0x3e	; 62
    860e:	2f 97       	sbiw	r28, 0x0f	; 15
    8610:	0f b6       	in	r0, 0x3f	; 63
    8612:	f8 94       	cli
    8614:	de bf       	out	0x3e, r29	; 62
    8616:	0f be       	out	0x3f, r0	; 63
    8618:	cd bf       	out	0x3d, r28	; 61
    861a:	9a 87       	std	Y+10, r25	; 0x0a
    861c:	89 87       	std	Y+9, r24	; 0x09
    861e:	7c 87       	std	Y+12, r23	; 0x0c
    8620:	6b 87       	std	Y+11, r22	; 0x0b
    8622:	5e 87       	std	Y+14, r21	; 0x0e
    8624:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8626:	e9 85       	ldd	r30, Y+9	; 0x09
    8628:	fa 85       	ldd	r31, Y+10	; 0x0a
    862a:	80 81       	ld	r24, Z
    862c:	91 81       	ldd	r25, Z+1	; 0x01
    862e:	00 97       	sbiw	r24, 0x00	; 0
    8630:	f1 f0       	breq	.+60     	; 0x866e <vdmNumericEqualGC+0x68>
    8632:	e9 85       	ldd	r30, Y+9	; 0x09
    8634:	fa 85       	ldd	r31, Y+10	; 0x0a
    8636:	80 81       	ld	r24, Z
    8638:	91 81       	ldd	r25, Z+1	; 0x01
    863a:	81 30       	cpi	r24, 0x01	; 1
    863c:	91 05       	cpc	r25, r1
    863e:	b9 f0       	breq	.+46     	; 0x866e <vdmNumericEqualGC+0x68>
    8640:	e9 85       	ldd	r30, Y+9	; 0x09
    8642:	fa 85       	ldd	r31, Y+10	; 0x0a
    8644:	80 81       	ld	r24, Z
    8646:	91 81       	ldd	r25, Z+1	; 0x01
    8648:	82 30       	cpi	r24, 0x02	; 2
    864a:	91 05       	cpc	r25, r1
    864c:	81 f0       	breq	.+32     	; 0x866e <vdmNumericEqualGC+0x68>
    864e:	e9 85       	ldd	r30, Y+9	; 0x09
    8650:	fa 85       	ldd	r31, Y+10	; 0x0a
    8652:	80 81       	ld	r24, Z
    8654:	91 81       	ldd	r25, Z+1	; 0x01
    8656:	84 30       	cpi	r24, 0x04	; 4
    8658:	91 05       	cpc	r25, r1
    865a:	49 f0       	breq	.+18     	; 0x866e <vdmNumericEqualGC+0x68>
    865c:	e9 85       	ldd	r30, Y+9	; 0x09
    865e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8660:	80 81       	ld	r24, Z
    8662:	91 81       	ldd	r25, Z+1	; 0x01
    8664:	85 30       	cpi	r24, 0x05	; 5
    8666:	91 05       	cpc	r25, r1
    8668:	11 f0       	breq	.+4      	; 0x866e <vdmNumericEqualGC+0x68>
    866a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    866e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8670:	fc 85       	ldd	r31, Y+12	; 0x0c
    8672:	80 81       	ld	r24, Z
    8674:	91 81       	ldd	r25, Z+1	; 0x01
    8676:	00 97       	sbiw	r24, 0x00	; 0
    8678:	f1 f0       	breq	.+60     	; 0x86b6 <vdmNumericEqualGC+0xb0>
    867a:	eb 85       	ldd	r30, Y+11	; 0x0b
    867c:	fc 85       	ldd	r31, Y+12	; 0x0c
    867e:	80 81       	ld	r24, Z
    8680:	91 81       	ldd	r25, Z+1	; 0x01
    8682:	81 30       	cpi	r24, 0x01	; 1
    8684:	91 05       	cpc	r25, r1
    8686:	b9 f0       	breq	.+46     	; 0x86b6 <vdmNumericEqualGC+0xb0>
    8688:	eb 85       	ldd	r30, Y+11	; 0x0b
    868a:	fc 85       	ldd	r31, Y+12	; 0x0c
    868c:	80 81       	ld	r24, Z
    868e:	91 81       	ldd	r25, Z+1	; 0x01
    8690:	82 30       	cpi	r24, 0x02	; 2
    8692:	91 05       	cpc	r25, r1
    8694:	81 f0       	breq	.+32     	; 0x86b6 <vdmNumericEqualGC+0xb0>
    8696:	eb 85       	ldd	r30, Y+11	; 0x0b
    8698:	fc 85       	ldd	r31, Y+12	; 0x0c
    869a:	80 81       	ld	r24, Z
    869c:	91 81       	ldd	r25, Z+1	; 0x01
    869e:	84 30       	cpi	r24, 0x04	; 4
    86a0:	91 05       	cpc	r25, r1
    86a2:	49 f0       	breq	.+18     	; 0x86b6 <vdmNumericEqualGC+0xb0>
    86a4:	eb 85       	ldd	r30, Y+11	; 0x0b
    86a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    86a8:	80 81       	ld	r24, Z
    86aa:	91 81       	ldd	r25, Z+1	; 0x01
    86ac:	85 30       	cpi	r24, 0x05	; 5
    86ae:	91 05       	cpc	r25, r1
    86b0:	11 f0       	breq	.+4      	; 0x86b6 <vdmNumericEqualGC+0xb0>
    86b2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    86b6:	89 85       	ldd	r24, Y+9	; 0x09
    86b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    86ba:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    86be:	dc 01       	movw	r26, r24
    86c0:	cb 01       	movw	r24, r22
    86c2:	8d 83       	std	Y+5, r24	; 0x05
    86c4:	9e 83       	std	Y+6, r25	; 0x06
    86c6:	af 83       	std	Y+7, r26	; 0x07
    86c8:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    86ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    86cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    86ce:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    86d2:	dc 01       	movw	r26, r24
    86d4:	cb 01       	movw	r24, r22
    86d6:	89 83       	std	Y+1, r24	; 0x01
    86d8:	9a 83       	std	Y+2, r25	; 0x02
    86da:	ab 83       	std	Y+3, r26	; 0x03
    86dc:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av==bv, from);
    86de:	1f 86       	std	Y+15, r1	; 0x0f
    86e0:	6d 81       	ldd	r22, Y+5	; 0x05
    86e2:	7e 81       	ldd	r23, Y+6	; 0x06
    86e4:	8f 81       	ldd	r24, Y+7	; 0x07
    86e6:	98 85       	ldd	r25, Y+8	; 0x08
    86e8:	29 81       	ldd	r18, Y+1	; 0x01
    86ea:	3a 81       	ldd	r19, Y+2	; 0x02
    86ec:	4b 81       	ldd	r20, Y+3	; 0x03
    86ee:	5c 81       	ldd	r21, Y+4	; 0x04
    86f0:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    86f4:	88 23       	and	r24, r24
    86f6:	11 f4       	brne	.+4      	; 0x86fc <vdmNumericEqualGC+0xf6>
    86f8:	81 e0       	ldi	r24, 0x01	; 1
    86fa:	8f 87       	std	Y+15, r24	; 0x0f
    86fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    86fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    8700:	8f 85       	ldd	r24, Y+15	; 0x0f
    8702:	b9 01       	movw	r22, r18
    8704:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
}
    8708:	2f 96       	adiw	r28, 0x0f	; 15
    870a:	0f b6       	in	r0, 0x3f	; 63
    870c:	f8 94       	cli
    870e:	de bf       	out	0x3e, r29	; 62
    8710:	0f be       	out	0x3f, r0	; 63
    8712:	cd bf       	out	0x3d, r28	; 61
    8714:	cf 91       	pop	r28
    8716:	df 91       	pop	r29
    8718:	08 95       	ret

0000871a <vdmGreaterThan>:

TVP vdmGreaterThan(TVP a,TVP b)
{
    871a:	df 93       	push	r29
    871c:	cf 93       	push	r28
    871e:	cd b7       	in	r28, 0x3d	; 61
    8720:	de b7       	in	r29, 0x3e	; 62
    8722:	2d 97       	sbiw	r28, 0x0d	; 13
    8724:	0f b6       	in	r0, 0x3f	; 63
    8726:	f8 94       	cli
    8728:	de bf       	out	0x3e, r29	; 62
    872a:	0f be       	out	0x3f, r0	; 63
    872c:	cd bf       	out	0x3d, r28	; 61
    872e:	9a 87       	std	Y+10, r25	; 0x0a
    8730:	89 87       	std	Y+9, r24	; 0x09
    8732:	7c 87       	std	Y+12, r23	; 0x0c
    8734:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    8736:	e9 85       	ldd	r30, Y+9	; 0x09
    8738:	fa 85       	ldd	r31, Y+10	; 0x0a
    873a:	80 81       	ld	r24, Z
    873c:	91 81       	ldd	r25, Z+1	; 0x01
    873e:	00 97       	sbiw	r24, 0x00	; 0
    8740:	f1 f0       	breq	.+60     	; 0x877e <vdmGreaterThan+0x64>
    8742:	e9 85       	ldd	r30, Y+9	; 0x09
    8744:	fa 85       	ldd	r31, Y+10	; 0x0a
    8746:	80 81       	ld	r24, Z
    8748:	91 81       	ldd	r25, Z+1	; 0x01
    874a:	81 30       	cpi	r24, 0x01	; 1
    874c:	91 05       	cpc	r25, r1
    874e:	b9 f0       	breq	.+46     	; 0x877e <vdmGreaterThan+0x64>
    8750:	e9 85       	ldd	r30, Y+9	; 0x09
    8752:	fa 85       	ldd	r31, Y+10	; 0x0a
    8754:	80 81       	ld	r24, Z
    8756:	91 81       	ldd	r25, Z+1	; 0x01
    8758:	82 30       	cpi	r24, 0x02	; 2
    875a:	91 05       	cpc	r25, r1
    875c:	81 f0       	breq	.+32     	; 0x877e <vdmGreaterThan+0x64>
    875e:	e9 85       	ldd	r30, Y+9	; 0x09
    8760:	fa 85       	ldd	r31, Y+10	; 0x0a
    8762:	80 81       	ld	r24, Z
    8764:	91 81       	ldd	r25, Z+1	; 0x01
    8766:	84 30       	cpi	r24, 0x04	; 4
    8768:	91 05       	cpc	r25, r1
    876a:	49 f0       	breq	.+18     	; 0x877e <vdmGreaterThan+0x64>
    876c:	e9 85       	ldd	r30, Y+9	; 0x09
    876e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8770:	80 81       	ld	r24, Z
    8772:	91 81       	ldd	r25, Z+1	; 0x01
    8774:	85 30       	cpi	r24, 0x05	; 5
    8776:	91 05       	cpc	r25, r1
    8778:	11 f0       	breq	.+4      	; 0x877e <vdmGreaterThan+0x64>
    877a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    877e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8780:	fc 85       	ldd	r31, Y+12	; 0x0c
    8782:	80 81       	ld	r24, Z
    8784:	91 81       	ldd	r25, Z+1	; 0x01
    8786:	00 97       	sbiw	r24, 0x00	; 0
    8788:	f1 f0       	breq	.+60     	; 0x87c6 <vdmGreaterThan+0xac>
    878a:	eb 85       	ldd	r30, Y+11	; 0x0b
    878c:	fc 85       	ldd	r31, Y+12	; 0x0c
    878e:	80 81       	ld	r24, Z
    8790:	91 81       	ldd	r25, Z+1	; 0x01
    8792:	81 30       	cpi	r24, 0x01	; 1
    8794:	91 05       	cpc	r25, r1
    8796:	b9 f0       	breq	.+46     	; 0x87c6 <vdmGreaterThan+0xac>
    8798:	eb 85       	ldd	r30, Y+11	; 0x0b
    879a:	fc 85       	ldd	r31, Y+12	; 0x0c
    879c:	80 81       	ld	r24, Z
    879e:	91 81       	ldd	r25, Z+1	; 0x01
    87a0:	82 30       	cpi	r24, 0x02	; 2
    87a2:	91 05       	cpc	r25, r1
    87a4:	81 f0       	breq	.+32     	; 0x87c6 <vdmGreaterThan+0xac>
    87a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    87a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    87aa:	80 81       	ld	r24, Z
    87ac:	91 81       	ldd	r25, Z+1	; 0x01
    87ae:	84 30       	cpi	r24, 0x04	; 4
    87b0:	91 05       	cpc	r25, r1
    87b2:	49 f0       	breq	.+18     	; 0x87c6 <vdmGreaterThan+0xac>
    87b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    87b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    87b8:	80 81       	ld	r24, Z
    87ba:	91 81       	ldd	r25, Z+1	; 0x01
    87bc:	85 30       	cpi	r24, 0x05	; 5
    87be:	91 05       	cpc	r25, r1
    87c0:	11 f0       	breq	.+4      	; 0x87c6 <vdmGreaterThan+0xac>
    87c2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    87c6:	89 85       	ldd	r24, Y+9	; 0x09
    87c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    87ca:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    87ce:	dc 01       	movw	r26, r24
    87d0:	cb 01       	movw	r24, r22
    87d2:	8d 83       	std	Y+5, r24	; 0x05
    87d4:	9e 83       	std	Y+6, r25	; 0x06
    87d6:	af 83       	std	Y+7, r26	; 0x07
    87d8:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    87da:	8b 85       	ldd	r24, Y+11	; 0x0b
    87dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    87de:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    87e2:	dc 01       	movw	r26, r24
    87e4:	cb 01       	movw	r24, r22
    87e6:	89 83       	std	Y+1, r24	; 0x01
    87e8:	9a 83       	std	Y+2, r25	; 0x02
    87ea:	ab 83       	std	Y+3, r26	; 0x03
    87ec:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av>bv);
    87ee:	1d 86       	std	Y+13, r1	; 0x0d
    87f0:	6d 81       	ldd	r22, Y+5	; 0x05
    87f2:	7e 81       	ldd	r23, Y+6	; 0x06
    87f4:	8f 81       	ldd	r24, Y+7	; 0x07
    87f6:	98 85       	ldd	r25, Y+8	; 0x08
    87f8:	29 81       	ldd	r18, Y+1	; 0x01
    87fa:	3a 81       	ldd	r19, Y+2	; 0x02
    87fc:	4b 81       	ldd	r20, Y+3	; 0x03
    87fe:	5c 81       	ldd	r21, Y+4	; 0x04
    8800:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
    8804:	18 16       	cp	r1, r24
    8806:	14 f4       	brge	.+4      	; 0x880c <vdmGreaterThan+0xf2>
    8808:	81 e0       	ldi	r24, 0x01	; 1
    880a:	8d 87       	std	Y+13, r24	; 0x0d
    880c:	8d 85       	ldd	r24, Y+13	; 0x0d
    880e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    8812:	2d 96       	adiw	r28, 0x0d	; 13
    8814:	0f b6       	in	r0, 0x3f	; 63
    8816:	f8 94       	cli
    8818:	de bf       	out	0x3e, r29	; 62
    881a:	0f be       	out	0x3f, r0	; 63
    881c:	cd bf       	out	0x3d, r28	; 61
    881e:	cf 91       	pop	r28
    8820:	df 91       	pop	r29
    8822:	08 95       	ret

00008824 <vdmGreaterThanGC>:

TVP vdmGreaterThanGC(TVP a,TVP b, TVP *from)
{
    8824:	df 93       	push	r29
    8826:	cf 93       	push	r28
    8828:	cd b7       	in	r28, 0x3d	; 61
    882a:	de b7       	in	r29, 0x3e	; 62
    882c:	2f 97       	sbiw	r28, 0x0f	; 15
    882e:	0f b6       	in	r0, 0x3f	; 63
    8830:	f8 94       	cli
    8832:	de bf       	out	0x3e, r29	; 62
    8834:	0f be       	out	0x3f, r0	; 63
    8836:	cd bf       	out	0x3d, r28	; 61
    8838:	9a 87       	std	Y+10, r25	; 0x0a
    883a:	89 87       	std	Y+9, r24	; 0x09
    883c:	7c 87       	std	Y+12, r23	; 0x0c
    883e:	6b 87       	std	Y+11, r22	; 0x0b
    8840:	5e 87       	std	Y+14, r21	; 0x0e
    8842:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8844:	e9 85       	ldd	r30, Y+9	; 0x09
    8846:	fa 85       	ldd	r31, Y+10	; 0x0a
    8848:	80 81       	ld	r24, Z
    884a:	91 81       	ldd	r25, Z+1	; 0x01
    884c:	00 97       	sbiw	r24, 0x00	; 0
    884e:	f1 f0       	breq	.+60     	; 0x888c <vdmGreaterThanGC+0x68>
    8850:	e9 85       	ldd	r30, Y+9	; 0x09
    8852:	fa 85       	ldd	r31, Y+10	; 0x0a
    8854:	80 81       	ld	r24, Z
    8856:	91 81       	ldd	r25, Z+1	; 0x01
    8858:	81 30       	cpi	r24, 0x01	; 1
    885a:	91 05       	cpc	r25, r1
    885c:	b9 f0       	breq	.+46     	; 0x888c <vdmGreaterThanGC+0x68>
    885e:	e9 85       	ldd	r30, Y+9	; 0x09
    8860:	fa 85       	ldd	r31, Y+10	; 0x0a
    8862:	80 81       	ld	r24, Z
    8864:	91 81       	ldd	r25, Z+1	; 0x01
    8866:	82 30       	cpi	r24, 0x02	; 2
    8868:	91 05       	cpc	r25, r1
    886a:	81 f0       	breq	.+32     	; 0x888c <vdmGreaterThanGC+0x68>
    886c:	e9 85       	ldd	r30, Y+9	; 0x09
    886e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8870:	80 81       	ld	r24, Z
    8872:	91 81       	ldd	r25, Z+1	; 0x01
    8874:	84 30       	cpi	r24, 0x04	; 4
    8876:	91 05       	cpc	r25, r1
    8878:	49 f0       	breq	.+18     	; 0x888c <vdmGreaterThanGC+0x68>
    887a:	e9 85       	ldd	r30, Y+9	; 0x09
    887c:	fa 85       	ldd	r31, Y+10	; 0x0a
    887e:	80 81       	ld	r24, Z
    8880:	91 81       	ldd	r25, Z+1	; 0x01
    8882:	85 30       	cpi	r24, 0x05	; 5
    8884:	91 05       	cpc	r25, r1
    8886:	11 f0       	breq	.+4      	; 0x888c <vdmGreaterThanGC+0x68>
    8888:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    888c:	eb 85       	ldd	r30, Y+11	; 0x0b
    888e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8890:	80 81       	ld	r24, Z
    8892:	91 81       	ldd	r25, Z+1	; 0x01
    8894:	00 97       	sbiw	r24, 0x00	; 0
    8896:	f1 f0       	breq	.+60     	; 0x88d4 <vdmGreaterThanGC+0xb0>
    8898:	eb 85       	ldd	r30, Y+11	; 0x0b
    889a:	fc 85       	ldd	r31, Y+12	; 0x0c
    889c:	80 81       	ld	r24, Z
    889e:	91 81       	ldd	r25, Z+1	; 0x01
    88a0:	81 30       	cpi	r24, 0x01	; 1
    88a2:	91 05       	cpc	r25, r1
    88a4:	b9 f0       	breq	.+46     	; 0x88d4 <vdmGreaterThanGC+0xb0>
    88a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    88a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    88aa:	80 81       	ld	r24, Z
    88ac:	91 81       	ldd	r25, Z+1	; 0x01
    88ae:	82 30       	cpi	r24, 0x02	; 2
    88b0:	91 05       	cpc	r25, r1
    88b2:	81 f0       	breq	.+32     	; 0x88d4 <vdmGreaterThanGC+0xb0>
    88b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    88b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    88b8:	80 81       	ld	r24, Z
    88ba:	91 81       	ldd	r25, Z+1	; 0x01
    88bc:	84 30       	cpi	r24, 0x04	; 4
    88be:	91 05       	cpc	r25, r1
    88c0:	49 f0       	breq	.+18     	; 0x88d4 <vdmGreaterThanGC+0xb0>
    88c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    88c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    88c6:	80 81       	ld	r24, Z
    88c8:	91 81       	ldd	r25, Z+1	; 0x01
    88ca:	85 30       	cpi	r24, 0x05	; 5
    88cc:	91 05       	cpc	r25, r1
    88ce:	11 f0       	breq	.+4      	; 0x88d4 <vdmGreaterThanGC+0xb0>
    88d0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    88d4:	89 85       	ldd	r24, Y+9	; 0x09
    88d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    88d8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    88dc:	dc 01       	movw	r26, r24
    88de:	cb 01       	movw	r24, r22
    88e0:	8d 83       	std	Y+5, r24	; 0x05
    88e2:	9e 83       	std	Y+6, r25	; 0x06
    88e4:	af 83       	std	Y+7, r26	; 0x07
    88e6:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    88e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    88ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    88ec:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    88f0:	dc 01       	movw	r26, r24
    88f2:	cb 01       	movw	r24, r22
    88f4:	89 83       	std	Y+1, r24	; 0x01
    88f6:	9a 83       	std	Y+2, r25	; 0x02
    88f8:	ab 83       	std	Y+3, r26	; 0x03
    88fa:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av>bv, from);
    88fc:	1f 86       	std	Y+15, r1	; 0x0f
    88fe:	6d 81       	ldd	r22, Y+5	; 0x05
    8900:	7e 81       	ldd	r23, Y+6	; 0x06
    8902:	8f 81       	ldd	r24, Y+7	; 0x07
    8904:	98 85       	ldd	r25, Y+8	; 0x08
    8906:	29 81       	ldd	r18, Y+1	; 0x01
    8908:	3a 81       	ldd	r19, Y+2	; 0x02
    890a:	4b 81       	ldd	r20, Y+3	; 0x03
    890c:	5c 81       	ldd	r21, Y+4	; 0x04
    890e:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
    8912:	18 16       	cp	r1, r24
    8914:	14 f4       	brge	.+4      	; 0x891a <vdmGreaterThanGC+0xf6>
    8916:	81 e0       	ldi	r24, 0x01	; 1
    8918:	8f 87       	std	Y+15, r24	; 0x0f
    891a:	2d 85       	ldd	r18, Y+13	; 0x0d
    891c:	3e 85       	ldd	r19, Y+14	; 0x0e
    891e:	8f 85       	ldd	r24, Y+15	; 0x0f
    8920:	b9 01       	movw	r22, r18
    8922:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
}
    8926:	2f 96       	adiw	r28, 0x0f	; 15
    8928:	0f b6       	in	r0, 0x3f	; 63
    892a:	f8 94       	cli
    892c:	de bf       	out	0x3e, r29	; 62
    892e:	0f be       	out	0x3f, r0	; 63
    8930:	cd bf       	out	0x3d, r28	; 61
    8932:	cf 91       	pop	r28
    8934:	df 91       	pop	r29
    8936:	08 95       	ret

00008938 <vdmGreaterOrEqual>:

TVP vdmGreaterOrEqual(TVP a,TVP b)
{
    8938:	df 93       	push	r29
    893a:	cf 93       	push	r28
    893c:	cd b7       	in	r28, 0x3d	; 61
    893e:	de b7       	in	r29, 0x3e	; 62
    8940:	2d 97       	sbiw	r28, 0x0d	; 13
    8942:	0f b6       	in	r0, 0x3f	; 63
    8944:	f8 94       	cli
    8946:	de bf       	out	0x3e, r29	; 62
    8948:	0f be       	out	0x3f, r0	; 63
    894a:	cd bf       	out	0x3d, r28	; 61
    894c:	9a 87       	std	Y+10, r25	; 0x0a
    894e:	89 87       	std	Y+9, r24	; 0x09
    8950:	7c 87       	std	Y+12, r23	; 0x0c
    8952:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    8954:	e9 85       	ldd	r30, Y+9	; 0x09
    8956:	fa 85       	ldd	r31, Y+10	; 0x0a
    8958:	80 81       	ld	r24, Z
    895a:	91 81       	ldd	r25, Z+1	; 0x01
    895c:	00 97       	sbiw	r24, 0x00	; 0
    895e:	f1 f0       	breq	.+60     	; 0x899c <vdmGreaterOrEqual+0x64>
    8960:	e9 85       	ldd	r30, Y+9	; 0x09
    8962:	fa 85       	ldd	r31, Y+10	; 0x0a
    8964:	80 81       	ld	r24, Z
    8966:	91 81       	ldd	r25, Z+1	; 0x01
    8968:	81 30       	cpi	r24, 0x01	; 1
    896a:	91 05       	cpc	r25, r1
    896c:	b9 f0       	breq	.+46     	; 0x899c <vdmGreaterOrEqual+0x64>
    896e:	e9 85       	ldd	r30, Y+9	; 0x09
    8970:	fa 85       	ldd	r31, Y+10	; 0x0a
    8972:	80 81       	ld	r24, Z
    8974:	91 81       	ldd	r25, Z+1	; 0x01
    8976:	82 30       	cpi	r24, 0x02	; 2
    8978:	91 05       	cpc	r25, r1
    897a:	81 f0       	breq	.+32     	; 0x899c <vdmGreaterOrEqual+0x64>
    897c:	e9 85       	ldd	r30, Y+9	; 0x09
    897e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8980:	80 81       	ld	r24, Z
    8982:	91 81       	ldd	r25, Z+1	; 0x01
    8984:	84 30       	cpi	r24, 0x04	; 4
    8986:	91 05       	cpc	r25, r1
    8988:	49 f0       	breq	.+18     	; 0x899c <vdmGreaterOrEqual+0x64>
    898a:	e9 85       	ldd	r30, Y+9	; 0x09
    898c:	fa 85       	ldd	r31, Y+10	; 0x0a
    898e:	80 81       	ld	r24, Z
    8990:	91 81       	ldd	r25, Z+1	; 0x01
    8992:	85 30       	cpi	r24, 0x05	; 5
    8994:	91 05       	cpc	r25, r1
    8996:	11 f0       	breq	.+4      	; 0x899c <vdmGreaterOrEqual+0x64>
    8998:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    899c:	eb 85       	ldd	r30, Y+11	; 0x0b
    899e:	fc 85       	ldd	r31, Y+12	; 0x0c
    89a0:	80 81       	ld	r24, Z
    89a2:	91 81       	ldd	r25, Z+1	; 0x01
    89a4:	00 97       	sbiw	r24, 0x00	; 0
    89a6:	f1 f0       	breq	.+60     	; 0x89e4 <vdmGreaterOrEqual+0xac>
    89a8:	eb 85       	ldd	r30, Y+11	; 0x0b
    89aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    89ac:	80 81       	ld	r24, Z
    89ae:	91 81       	ldd	r25, Z+1	; 0x01
    89b0:	81 30       	cpi	r24, 0x01	; 1
    89b2:	91 05       	cpc	r25, r1
    89b4:	b9 f0       	breq	.+46     	; 0x89e4 <vdmGreaterOrEqual+0xac>
    89b6:	eb 85       	ldd	r30, Y+11	; 0x0b
    89b8:	fc 85       	ldd	r31, Y+12	; 0x0c
    89ba:	80 81       	ld	r24, Z
    89bc:	91 81       	ldd	r25, Z+1	; 0x01
    89be:	82 30       	cpi	r24, 0x02	; 2
    89c0:	91 05       	cpc	r25, r1
    89c2:	81 f0       	breq	.+32     	; 0x89e4 <vdmGreaterOrEqual+0xac>
    89c4:	eb 85       	ldd	r30, Y+11	; 0x0b
    89c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    89c8:	80 81       	ld	r24, Z
    89ca:	91 81       	ldd	r25, Z+1	; 0x01
    89cc:	84 30       	cpi	r24, 0x04	; 4
    89ce:	91 05       	cpc	r25, r1
    89d0:	49 f0       	breq	.+18     	; 0x89e4 <vdmGreaterOrEqual+0xac>
    89d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    89d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    89d6:	80 81       	ld	r24, Z
    89d8:	91 81       	ldd	r25, Z+1	; 0x01
    89da:	85 30       	cpi	r24, 0x05	; 5
    89dc:	91 05       	cpc	r25, r1
    89de:	11 f0       	breq	.+4      	; 0x89e4 <vdmGreaterOrEqual+0xac>
    89e0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    89e4:	89 85       	ldd	r24, Y+9	; 0x09
    89e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    89e8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    89ec:	dc 01       	movw	r26, r24
    89ee:	cb 01       	movw	r24, r22
    89f0:	8d 83       	std	Y+5, r24	; 0x05
    89f2:	9e 83       	std	Y+6, r25	; 0x06
    89f4:	af 83       	std	Y+7, r26	; 0x07
    89f6:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    89f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    89fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    89fc:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8a00:	dc 01       	movw	r26, r24
    8a02:	cb 01       	movw	r24, r22
    8a04:	89 83       	std	Y+1, r24	; 0x01
    8a06:	9a 83       	std	Y+2, r25	; 0x02
    8a08:	ab 83       	std	Y+3, r26	; 0x03
    8a0a:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av>=bv);
    8a0c:	1d 86       	std	Y+13, r1	; 0x0d
    8a0e:	6d 81       	ldd	r22, Y+5	; 0x05
    8a10:	7e 81       	ldd	r23, Y+6	; 0x06
    8a12:	8f 81       	ldd	r24, Y+7	; 0x07
    8a14:	98 85       	ldd	r25, Y+8	; 0x08
    8a16:	29 81       	ldd	r18, Y+1	; 0x01
    8a18:	3a 81       	ldd	r19, Y+2	; 0x02
    8a1a:	4b 81       	ldd	r20, Y+3	; 0x03
    8a1c:	5c 81       	ldd	r21, Y+4	; 0x04
    8a1e:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
    8a22:	88 23       	and	r24, r24
    8a24:	14 f0       	brlt	.+4      	; 0x8a2a <vdmGreaterOrEqual+0xf2>
    8a26:	81 e0       	ldi	r24, 0x01	; 1
    8a28:	8d 87       	std	Y+13, r24	; 0x0d
    8a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a2c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    8a30:	2d 96       	adiw	r28, 0x0d	; 13
    8a32:	0f b6       	in	r0, 0x3f	; 63
    8a34:	f8 94       	cli
    8a36:	de bf       	out	0x3e, r29	; 62
    8a38:	0f be       	out	0x3f, r0	; 63
    8a3a:	cd bf       	out	0x3d, r28	; 61
    8a3c:	cf 91       	pop	r28
    8a3e:	df 91       	pop	r29
    8a40:	08 95       	ret

00008a42 <vdmGreaterOrEqualGC>:

TVP vdmGreaterOrEqualGC(TVP a, TVP b, TVP *from)
{
    8a42:	df 93       	push	r29
    8a44:	cf 93       	push	r28
    8a46:	cd b7       	in	r28, 0x3d	; 61
    8a48:	de b7       	in	r29, 0x3e	; 62
    8a4a:	2f 97       	sbiw	r28, 0x0f	; 15
    8a4c:	0f b6       	in	r0, 0x3f	; 63
    8a4e:	f8 94       	cli
    8a50:	de bf       	out	0x3e, r29	; 62
    8a52:	0f be       	out	0x3f, r0	; 63
    8a54:	cd bf       	out	0x3d, r28	; 61
    8a56:	9a 87       	std	Y+10, r25	; 0x0a
    8a58:	89 87       	std	Y+9, r24	; 0x09
    8a5a:	7c 87       	std	Y+12, r23	; 0x0c
    8a5c:	6b 87       	std	Y+11, r22	; 0x0b
    8a5e:	5e 87       	std	Y+14, r21	; 0x0e
    8a60:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8a62:	e9 85       	ldd	r30, Y+9	; 0x09
    8a64:	fa 85       	ldd	r31, Y+10	; 0x0a
    8a66:	80 81       	ld	r24, Z
    8a68:	91 81       	ldd	r25, Z+1	; 0x01
    8a6a:	00 97       	sbiw	r24, 0x00	; 0
    8a6c:	f1 f0       	breq	.+60     	; 0x8aaa <vdmGreaterOrEqualGC+0x68>
    8a6e:	e9 85       	ldd	r30, Y+9	; 0x09
    8a70:	fa 85       	ldd	r31, Y+10	; 0x0a
    8a72:	80 81       	ld	r24, Z
    8a74:	91 81       	ldd	r25, Z+1	; 0x01
    8a76:	81 30       	cpi	r24, 0x01	; 1
    8a78:	91 05       	cpc	r25, r1
    8a7a:	b9 f0       	breq	.+46     	; 0x8aaa <vdmGreaterOrEqualGC+0x68>
    8a7c:	e9 85       	ldd	r30, Y+9	; 0x09
    8a7e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8a80:	80 81       	ld	r24, Z
    8a82:	91 81       	ldd	r25, Z+1	; 0x01
    8a84:	82 30       	cpi	r24, 0x02	; 2
    8a86:	91 05       	cpc	r25, r1
    8a88:	81 f0       	breq	.+32     	; 0x8aaa <vdmGreaterOrEqualGC+0x68>
    8a8a:	e9 85       	ldd	r30, Y+9	; 0x09
    8a8c:	fa 85       	ldd	r31, Y+10	; 0x0a
    8a8e:	80 81       	ld	r24, Z
    8a90:	91 81       	ldd	r25, Z+1	; 0x01
    8a92:	84 30       	cpi	r24, 0x04	; 4
    8a94:	91 05       	cpc	r25, r1
    8a96:	49 f0       	breq	.+18     	; 0x8aaa <vdmGreaterOrEqualGC+0x68>
    8a98:	e9 85       	ldd	r30, Y+9	; 0x09
    8a9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    8a9c:	80 81       	ld	r24, Z
    8a9e:	91 81       	ldd	r25, Z+1	; 0x01
    8aa0:	85 30       	cpi	r24, 0x05	; 5
    8aa2:	91 05       	cpc	r25, r1
    8aa4:	11 f0       	breq	.+4      	; 0x8aaa <vdmGreaterOrEqualGC+0x68>
    8aa6:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8aaa:	eb 85       	ldd	r30, Y+11	; 0x0b
    8aac:	fc 85       	ldd	r31, Y+12	; 0x0c
    8aae:	80 81       	ld	r24, Z
    8ab0:	91 81       	ldd	r25, Z+1	; 0x01
    8ab2:	00 97       	sbiw	r24, 0x00	; 0
    8ab4:	f1 f0       	breq	.+60     	; 0x8af2 <vdmGreaterOrEqualGC+0xb0>
    8ab6:	eb 85       	ldd	r30, Y+11	; 0x0b
    8ab8:	fc 85       	ldd	r31, Y+12	; 0x0c
    8aba:	80 81       	ld	r24, Z
    8abc:	91 81       	ldd	r25, Z+1	; 0x01
    8abe:	81 30       	cpi	r24, 0x01	; 1
    8ac0:	91 05       	cpc	r25, r1
    8ac2:	b9 f0       	breq	.+46     	; 0x8af2 <vdmGreaterOrEqualGC+0xb0>
    8ac4:	eb 85       	ldd	r30, Y+11	; 0x0b
    8ac6:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ac8:	80 81       	ld	r24, Z
    8aca:	91 81       	ldd	r25, Z+1	; 0x01
    8acc:	82 30       	cpi	r24, 0x02	; 2
    8ace:	91 05       	cpc	r25, r1
    8ad0:	81 f0       	breq	.+32     	; 0x8af2 <vdmGreaterOrEqualGC+0xb0>
    8ad2:	eb 85       	ldd	r30, Y+11	; 0x0b
    8ad4:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ad6:	80 81       	ld	r24, Z
    8ad8:	91 81       	ldd	r25, Z+1	; 0x01
    8ada:	84 30       	cpi	r24, 0x04	; 4
    8adc:	91 05       	cpc	r25, r1
    8ade:	49 f0       	breq	.+18     	; 0x8af2 <vdmGreaterOrEqualGC+0xb0>
    8ae0:	eb 85       	ldd	r30, Y+11	; 0x0b
    8ae2:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ae4:	80 81       	ld	r24, Z
    8ae6:	91 81       	ldd	r25, Z+1	; 0x01
    8ae8:	85 30       	cpi	r24, 0x05	; 5
    8aea:	91 05       	cpc	r25, r1
    8aec:	11 f0       	breq	.+4      	; 0x8af2 <vdmGreaterOrEqualGC+0xb0>
    8aee:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    8af2:	89 85       	ldd	r24, Y+9	; 0x09
    8af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    8af6:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8afa:	dc 01       	movw	r26, r24
    8afc:	cb 01       	movw	r24, r22
    8afe:	8d 83       	std	Y+5, r24	; 0x05
    8b00:	9e 83       	std	Y+6, r25	; 0x06
    8b02:	af 83       	std	Y+7, r26	; 0x07
    8b04:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8b06:	8b 85       	ldd	r24, Y+11	; 0x0b
    8b08:	9c 85       	ldd	r25, Y+12	; 0x0c
    8b0a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8b0e:	dc 01       	movw	r26, r24
    8b10:	cb 01       	movw	r24, r22
    8b12:	89 83       	std	Y+1, r24	; 0x01
    8b14:	9a 83       	std	Y+2, r25	; 0x02
    8b16:	ab 83       	std	Y+3, r26	; 0x03
    8b18:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av>=bv, from);
    8b1a:	1f 86       	std	Y+15, r1	; 0x0f
    8b1c:	6d 81       	ldd	r22, Y+5	; 0x05
    8b1e:	7e 81       	ldd	r23, Y+6	; 0x06
    8b20:	8f 81       	ldd	r24, Y+7	; 0x07
    8b22:	98 85       	ldd	r25, Y+8	; 0x08
    8b24:	29 81       	ldd	r18, Y+1	; 0x01
    8b26:	3a 81       	ldd	r19, Y+2	; 0x02
    8b28:	4b 81       	ldd	r20, Y+3	; 0x03
    8b2a:	5c 81       	ldd	r21, Y+4	; 0x04
    8b2c:	0e 94 c2 70 	call	0xe184	; 0xe184 <__gesf2>
    8b30:	88 23       	and	r24, r24
    8b32:	14 f0       	brlt	.+4      	; 0x8b38 <vdmGreaterOrEqualGC+0xf6>
    8b34:	81 e0       	ldi	r24, 0x01	; 1
    8b36:	8f 87       	std	Y+15, r24	; 0x0f
    8b38:	2d 85       	ldd	r18, Y+13	; 0x0d
    8b3a:	3e 85       	ldd	r19, Y+14	; 0x0e
    8b3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    8b3e:	b9 01       	movw	r22, r18
    8b40:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
}
    8b44:	2f 96       	adiw	r28, 0x0f	; 15
    8b46:	0f b6       	in	r0, 0x3f	; 63
    8b48:	f8 94       	cli
    8b4a:	de bf       	out	0x3e, r29	; 62
    8b4c:	0f be       	out	0x3f, r0	; 63
    8b4e:	cd bf       	out	0x3d, r28	; 61
    8b50:	cf 91       	pop	r28
    8b52:	df 91       	pop	r29
    8b54:	08 95       	ret

00008b56 <vdmLessThan>:

TVP vdmLessThan(TVP a,TVP b)
{
    8b56:	df 93       	push	r29
    8b58:	cf 93       	push	r28
    8b5a:	cd b7       	in	r28, 0x3d	; 61
    8b5c:	de b7       	in	r29, 0x3e	; 62
    8b5e:	2d 97       	sbiw	r28, 0x0d	; 13
    8b60:	0f b6       	in	r0, 0x3f	; 63
    8b62:	f8 94       	cli
    8b64:	de bf       	out	0x3e, r29	; 62
    8b66:	0f be       	out	0x3f, r0	; 63
    8b68:	cd bf       	out	0x3d, r28	; 61
    8b6a:	9a 87       	std	Y+10, r25	; 0x0a
    8b6c:	89 87       	std	Y+9, r24	; 0x09
    8b6e:	7c 87       	std	Y+12, r23	; 0x0c
    8b70:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    8b72:	e9 85       	ldd	r30, Y+9	; 0x09
    8b74:	fa 85       	ldd	r31, Y+10	; 0x0a
    8b76:	80 81       	ld	r24, Z
    8b78:	91 81       	ldd	r25, Z+1	; 0x01
    8b7a:	00 97       	sbiw	r24, 0x00	; 0
    8b7c:	f1 f0       	breq	.+60     	; 0x8bba <vdmLessThan+0x64>
    8b7e:	e9 85       	ldd	r30, Y+9	; 0x09
    8b80:	fa 85       	ldd	r31, Y+10	; 0x0a
    8b82:	80 81       	ld	r24, Z
    8b84:	91 81       	ldd	r25, Z+1	; 0x01
    8b86:	81 30       	cpi	r24, 0x01	; 1
    8b88:	91 05       	cpc	r25, r1
    8b8a:	b9 f0       	breq	.+46     	; 0x8bba <vdmLessThan+0x64>
    8b8c:	e9 85       	ldd	r30, Y+9	; 0x09
    8b8e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8b90:	80 81       	ld	r24, Z
    8b92:	91 81       	ldd	r25, Z+1	; 0x01
    8b94:	82 30       	cpi	r24, 0x02	; 2
    8b96:	91 05       	cpc	r25, r1
    8b98:	81 f0       	breq	.+32     	; 0x8bba <vdmLessThan+0x64>
    8b9a:	e9 85       	ldd	r30, Y+9	; 0x09
    8b9c:	fa 85       	ldd	r31, Y+10	; 0x0a
    8b9e:	80 81       	ld	r24, Z
    8ba0:	91 81       	ldd	r25, Z+1	; 0x01
    8ba2:	84 30       	cpi	r24, 0x04	; 4
    8ba4:	91 05       	cpc	r25, r1
    8ba6:	49 f0       	breq	.+18     	; 0x8bba <vdmLessThan+0x64>
    8ba8:	e9 85       	ldd	r30, Y+9	; 0x09
    8baa:	fa 85       	ldd	r31, Y+10	; 0x0a
    8bac:	80 81       	ld	r24, Z
    8bae:	91 81       	ldd	r25, Z+1	; 0x01
    8bb0:	85 30       	cpi	r24, 0x05	; 5
    8bb2:	91 05       	cpc	r25, r1
    8bb4:	11 f0       	breq	.+4      	; 0x8bba <vdmLessThan+0x64>
    8bb6:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8bba:	eb 85       	ldd	r30, Y+11	; 0x0b
    8bbc:	fc 85       	ldd	r31, Y+12	; 0x0c
    8bbe:	80 81       	ld	r24, Z
    8bc0:	91 81       	ldd	r25, Z+1	; 0x01
    8bc2:	00 97       	sbiw	r24, 0x00	; 0
    8bc4:	f1 f0       	breq	.+60     	; 0x8c02 <vdmLessThan+0xac>
    8bc6:	eb 85       	ldd	r30, Y+11	; 0x0b
    8bc8:	fc 85       	ldd	r31, Y+12	; 0x0c
    8bca:	80 81       	ld	r24, Z
    8bcc:	91 81       	ldd	r25, Z+1	; 0x01
    8bce:	81 30       	cpi	r24, 0x01	; 1
    8bd0:	91 05       	cpc	r25, r1
    8bd2:	b9 f0       	breq	.+46     	; 0x8c02 <vdmLessThan+0xac>
    8bd4:	eb 85       	ldd	r30, Y+11	; 0x0b
    8bd6:	fc 85       	ldd	r31, Y+12	; 0x0c
    8bd8:	80 81       	ld	r24, Z
    8bda:	91 81       	ldd	r25, Z+1	; 0x01
    8bdc:	82 30       	cpi	r24, 0x02	; 2
    8bde:	91 05       	cpc	r25, r1
    8be0:	81 f0       	breq	.+32     	; 0x8c02 <vdmLessThan+0xac>
    8be2:	eb 85       	ldd	r30, Y+11	; 0x0b
    8be4:	fc 85       	ldd	r31, Y+12	; 0x0c
    8be6:	80 81       	ld	r24, Z
    8be8:	91 81       	ldd	r25, Z+1	; 0x01
    8bea:	84 30       	cpi	r24, 0x04	; 4
    8bec:	91 05       	cpc	r25, r1
    8bee:	49 f0       	breq	.+18     	; 0x8c02 <vdmLessThan+0xac>
    8bf0:	eb 85       	ldd	r30, Y+11	; 0x0b
    8bf2:	fc 85       	ldd	r31, Y+12	; 0x0c
    8bf4:	80 81       	ld	r24, Z
    8bf6:	91 81       	ldd	r25, Z+1	; 0x01
    8bf8:	85 30       	cpi	r24, 0x05	; 5
    8bfa:	91 05       	cpc	r25, r1
    8bfc:	11 f0       	breq	.+4      	; 0x8c02 <vdmLessThan+0xac>
    8bfe:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    8c02:	89 85       	ldd	r24, Y+9	; 0x09
    8c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    8c06:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8c0a:	dc 01       	movw	r26, r24
    8c0c:	cb 01       	movw	r24, r22
    8c0e:	8d 83       	std	Y+5, r24	; 0x05
    8c10:	9e 83       	std	Y+6, r25	; 0x06
    8c12:	af 83       	std	Y+7, r26	; 0x07
    8c14:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8c16:	8b 85       	ldd	r24, Y+11	; 0x0b
    8c18:	9c 85       	ldd	r25, Y+12	; 0x0c
    8c1a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8c1e:	dc 01       	movw	r26, r24
    8c20:	cb 01       	movw	r24, r22
    8c22:	89 83       	std	Y+1, r24	; 0x01
    8c24:	9a 83       	std	Y+2, r25	; 0x02
    8c26:	ab 83       	std	Y+3, r26	; 0x03
    8c28:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av<bv);
    8c2a:	1d 86       	std	Y+13, r1	; 0x0d
    8c2c:	6d 81       	ldd	r22, Y+5	; 0x05
    8c2e:	7e 81       	ldd	r23, Y+6	; 0x06
    8c30:	8f 81       	ldd	r24, Y+7	; 0x07
    8c32:	98 85       	ldd	r25, Y+8	; 0x08
    8c34:	29 81       	ldd	r18, Y+1	; 0x01
    8c36:	3a 81       	ldd	r19, Y+2	; 0x02
    8c38:	4b 81       	ldd	r20, Y+3	; 0x03
    8c3a:	5c 81       	ldd	r21, Y+4	; 0x04
    8c3c:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    8c40:	88 23       	and	r24, r24
    8c42:	14 f4       	brge	.+4      	; 0x8c48 <vdmLessThan+0xf2>
    8c44:	81 e0       	ldi	r24, 0x01	; 1
    8c46:	8d 87       	std	Y+13, r24	; 0x0d
    8c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c4a:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    8c4e:	2d 96       	adiw	r28, 0x0d	; 13
    8c50:	0f b6       	in	r0, 0x3f	; 63
    8c52:	f8 94       	cli
    8c54:	de bf       	out	0x3e, r29	; 62
    8c56:	0f be       	out	0x3f, r0	; 63
    8c58:	cd bf       	out	0x3d, r28	; 61
    8c5a:	cf 91       	pop	r28
    8c5c:	df 91       	pop	r29
    8c5e:	08 95       	ret

00008c60 <vdmLessThanGC>:

TVP vdmLessThanGC(TVP a, TVP b, TVP *from)
{
    8c60:	df 93       	push	r29
    8c62:	cf 93       	push	r28
    8c64:	cd b7       	in	r28, 0x3d	; 61
    8c66:	de b7       	in	r29, 0x3e	; 62
    8c68:	2f 97       	sbiw	r28, 0x0f	; 15
    8c6a:	0f b6       	in	r0, 0x3f	; 63
    8c6c:	f8 94       	cli
    8c6e:	de bf       	out	0x3e, r29	; 62
    8c70:	0f be       	out	0x3f, r0	; 63
    8c72:	cd bf       	out	0x3d, r28	; 61
    8c74:	9a 87       	std	Y+10, r25	; 0x0a
    8c76:	89 87       	std	Y+9, r24	; 0x09
    8c78:	7c 87       	std	Y+12, r23	; 0x0c
    8c7a:	6b 87       	std	Y+11, r22	; 0x0b
    8c7c:	5e 87       	std	Y+14, r21	; 0x0e
    8c7e:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8c80:	e9 85       	ldd	r30, Y+9	; 0x09
    8c82:	fa 85       	ldd	r31, Y+10	; 0x0a
    8c84:	80 81       	ld	r24, Z
    8c86:	91 81       	ldd	r25, Z+1	; 0x01
    8c88:	00 97       	sbiw	r24, 0x00	; 0
    8c8a:	f1 f0       	breq	.+60     	; 0x8cc8 <vdmLessThanGC+0x68>
    8c8c:	e9 85       	ldd	r30, Y+9	; 0x09
    8c8e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8c90:	80 81       	ld	r24, Z
    8c92:	91 81       	ldd	r25, Z+1	; 0x01
    8c94:	81 30       	cpi	r24, 0x01	; 1
    8c96:	91 05       	cpc	r25, r1
    8c98:	b9 f0       	breq	.+46     	; 0x8cc8 <vdmLessThanGC+0x68>
    8c9a:	e9 85       	ldd	r30, Y+9	; 0x09
    8c9c:	fa 85       	ldd	r31, Y+10	; 0x0a
    8c9e:	80 81       	ld	r24, Z
    8ca0:	91 81       	ldd	r25, Z+1	; 0x01
    8ca2:	82 30       	cpi	r24, 0x02	; 2
    8ca4:	91 05       	cpc	r25, r1
    8ca6:	81 f0       	breq	.+32     	; 0x8cc8 <vdmLessThanGC+0x68>
    8ca8:	e9 85       	ldd	r30, Y+9	; 0x09
    8caa:	fa 85       	ldd	r31, Y+10	; 0x0a
    8cac:	80 81       	ld	r24, Z
    8cae:	91 81       	ldd	r25, Z+1	; 0x01
    8cb0:	84 30       	cpi	r24, 0x04	; 4
    8cb2:	91 05       	cpc	r25, r1
    8cb4:	49 f0       	breq	.+18     	; 0x8cc8 <vdmLessThanGC+0x68>
    8cb6:	e9 85       	ldd	r30, Y+9	; 0x09
    8cb8:	fa 85       	ldd	r31, Y+10	; 0x0a
    8cba:	80 81       	ld	r24, Z
    8cbc:	91 81       	ldd	r25, Z+1	; 0x01
    8cbe:	85 30       	cpi	r24, 0x05	; 5
    8cc0:	91 05       	cpc	r25, r1
    8cc2:	11 f0       	breq	.+4      	; 0x8cc8 <vdmLessThanGC+0x68>
    8cc4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8cc8:	eb 85       	ldd	r30, Y+11	; 0x0b
    8cca:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ccc:	80 81       	ld	r24, Z
    8cce:	91 81       	ldd	r25, Z+1	; 0x01
    8cd0:	00 97       	sbiw	r24, 0x00	; 0
    8cd2:	f1 f0       	breq	.+60     	; 0x8d10 <vdmLessThanGC+0xb0>
    8cd4:	eb 85       	ldd	r30, Y+11	; 0x0b
    8cd6:	fc 85       	ldd	r31, Y+12	; 0x0c
    8cd8:	80 81       	ld	r24, Z
    8cda:	91 81       	ldd	r25, Z+1	; 0x01
    8cdc:	81 30       	cpi	r24, 0x01	; 1
    8cde:	91 05       	cpc	r25, r1
    8ce0:	b9 f0       	breq	.+46     	; 0x8d10 <vdmLessThanGC+0xb0>
    8ce2:	eb 85       	ldd	r30, Y+11	; 0x0b
    8ce4:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ce6:	80 81       	ld	r24, Z
    8ce8:	91 81       	ldd	r25, Z+1	; 0x01
    8cea:	82 30       	cpi	r24, 0x02	; 2
    8cec:	91 05       	cpc	r25, r1
    8cee:	81 f0       	breq	.+32     	; 0x8d10 <vdmLessThanGC+0xb0>
    8cf0:	eb 85       	ldd	r30, Y+11	; 0x0b
    8cf2:	fc 85       	ldd	r31, Y+12	; 0x0c
    8cf4:	80 81       	ld	r24, Z
    8cf6:	91 81       	ldd	r25, Z+1	; 0x01
    8cf8:	84 30       	cpi	r24, 0x04	; 4
    8cfa:	91 05       	cpc	r25, r1
    8cfc:	49 f0       	breq	.+18     	; 0x8d10 <vdmLessThanGC+0xb0>
    8cfe:	eb 85       	ldd	r30, Y+11	; 0x0b
    8d00:	fc 85       	ldd	r31, Y+12	; 0x0c
    8d02:	80 81       	ld	r24, Z
    8d04:	91 81       	ldd	r25, Z+1	; 0x01
    8d06:	85 30       	cpi	r24, 0x05	; 5
    8d08:	91 05       	cpc	r25, r1
    8d0a:	11 f0       	breq	.+4      	; 0x8d10 <vdmLessThanGC+0xb0>
    8d0c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    8d10:	89 85       	ldd	r24, Y+9	; 0x09
    8d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    8d14:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8d18:	dc 01       	movw	r26, r24
    8d1a:	cb 01       	movw	r24, r22
    8d1c:	8d 83       	std	Y+5, r24	; 0x05
    8d1e:	9e 83       	std	Y+6, r25	; 0x06
    8d20:	af 83       	std	Y+7, r26	; 0x07
    8d22:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8d24:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d26:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d28:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8d2c:	dc 01       	movw	r26, r24
    8d2e:	cb 01       	movw	r24, r22
    8d30:	89 83       	std	Y+1, r24	; 0x01
    8d32:	9a 83       	std	Y+2, r25	; 0x02
    8d34:	ab 83       	std	Y+3, r26	; 0x03
    8d36:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av<bv, from);
    8d38:	1f 86       	std	Y+15, r1	; 0x0f
    8d3a:	6d 81       	ldd	r22, Y+5	; 0x05
    8d3c:	7e 81       	ldd	r23, Y+6	; 0x06
    8d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    8d40:	98 85       	ldd	r25, Y+8	; 0x08
    8d42:	29 81       	ldd	r18, Y+1	; 0x01
    8d44:	3a 81       	ldd	r19, Y+2	; 0x02
    8d46:	4b 81       	ldd	r20, Y+3	; 0x03
    8d48:	5c 81       	ldd	r21, Y+4	; 0x04
    8d4a:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    8d4e:	88 23       	and	r24, r24
    8d50:	14 f4       	brge	.+4      	; 0x8d56 <vdmLessThanGC+0xf6>
    8d52:	81 e0       	ldi	r24, 0x01	; 1
    8d54:	8f 87       	std	Y+15, r24	; 0x0f
    8d56:	2d 85       	ldd	r18, Y+13	; 0x0d
    8d58:	3e 85       	ldd	r19, Y+14	; 0x0e
    8d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    8d5c:	b9 01       	movw	r22, r18
    8d5e:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
}
    8d62:	2f 96       	adiw	r28, 0x0f	; 15
    8d64:	0f b6       	in	r0, 0x3f	; 63
    8d66:	f8 94       	cli
    8d68:	de bf       	out	0x3e, r29	; 62
    8d6a:	0f be       	out	0x3f, r0	; 63
    8d6c:	cd bf       	out	0x3d, r28	; 61
    8d6e:	cf 91       	pop	r28
    8d70:	df 91       	pop	r29
    8d72:	08 95       	ret

00008d74 <vdmLessOrEqual>:

TVP vdmLessOrEqual(TVP a,TVP b)
{
    8d74:	df 93       	push	r29
    8d76:	cf 93       	push	r28
    8d78:	cd b7       	in	r28, 0x3d	; 61
    8d7a:	de b7       	in	r29, 0x3e	; 62
    8d7c:	2d 97       	sbiw	r28, 0x0d	; 13
    8d7e:	0f b6       	in	r0, 0x3f	; 63
    8d80:	f8 94       	cli
    8d82:	de bf       	out	0x3e, r29	; 62
    8d84:	0f be       	out	0x3f, r0	; 63
    8d86:	cd bf       	out	0x3d, r28	; 61
    8d88:	9a 87       	std	Y+10, r25	; 0x0a
    8d8a:	89 87       	std	Y+9, r24	; 0x09
    8d8c:	7c 87       	std	Y+12, r23	; 0x0c
    8d8e:	6b 87       	std	Y+11, r22	; 0x0b
	ASSERT_CHECK_NUMERIC(a);
    8d90:	e9 85       	ldd	r30, Y+9	; 0x09
    8d92:	fa 85       	ldd	r31, Y+10	; 0x0a
    8d94:	80 81       	ld	r24, Z
    8d96:	91 81       	ldd	r25, Z+1	; 0x01
    8d98:	00 97       	sbiw	r24, 0x00	; 0
    8d9a:	f1 f0       	breq	.+60     	; 0x8dd8 <vdmLessOrEqual+0x64>
    8d9c:	e9 85       	ldd	r30, Y+9	; 0x09
    8d9e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8da0:	80 81       	ld	r24, Z
    8da2:	91 81       	ldd	r25, Z+1	; 0x01
    8da4:	81 30       	cpi	r24, 0x01	; 1
    8da6:	91 05       	cpc	r25, r1
    8da8:	b9 f0       	breq	.+46     	; 0x8dd8 <vdmLessOrEqual+0x64>
    8daa:	e9 85       	ldd	r30, Y+9	; 0x09
    8dac:	fa 85       	ldd	r31, Y+10	; 0x0a
    8dae:	80 81       	ld	r24, Z
    8db0:	91 81       	ldd	r25, Z+1	; 0x01
    8db2:	82 30       	cpi	r24, 0x02	; 2
    8db4:	91 05       	cpc	r25, r1
    8db6:	81 f0       	breq	.+32     	; 0x8dd8 <vdmLessOrEqual+0x64>
    8db8:	e9 85       	ldd	r30, Y+9	; 0x09
    8dba:	fa 85       	ldd	r31, Y+10	; 0x0a
    8dbc:	80 81       	ld	r24, Z
    8dbe:	91 81       	ldd	r25, Z+1	; 0x01
    8dc0:	84 30       	cpi	r24, 0x04	; 4
    8dc2:	91 05       	cpc	r25, r1
    8dc4:	49 f0       	breq	.+18     	; 0x8dd8 <vdmLessOrEqual+0x64>
    8dc6:	e9 85       	ldd	r30, Y+9	; 0x09
    8dc8:	fa 85       	ldd	r31, Y+10	; 0x0a
    8dca:	80 81       	ld	r24, Z
    8dcc:	91 81       	ldd	r25, Z+1	; 0x01
    8dce:	85 30       	cpi	r24, 0x05	; 5
    8dd0:	91 05       	cpc	r25, r1
    8dd2:	11 f0       	breq	.+4      	; 0x8dd8 <vdmLessOrEqual+0x64>
    8dd4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8dd8:	eb 85       	ldd	r30, Y+11	; 0x0b
    8dda:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ddc:	80 81       	ld	r24, Z
    8dde:	91 81       	ldd	r25, Z+1	; 0x01
    8de0:	00 97       	sbiw	r24, 0x00	; 0
    8de2:	f1 f0       	breq	.+60     	; 0x8e20 <vdmLessOrEqual+0xac>
    8de4:	eb 85       	ldd	r30, Y+11	; 0x0b
    8de6:	fc 85       	ldd	r31, Y+12	; 0x0c
    8de8:	80 81       	ld	r24, Z
    8dea:	91 81       	ldd	r25, Z+1	; 0x01
    8dec:	81 30       	cpi	r24, 0x01	; 1
    8dee:	91 05       	cpc	r25, r1
    8df0:	b9 f0       	breq	.+46     	; 0x8e20 <vdmLessOrEqual+0xac>
    8df2:	eb 85       	ldd	r30, Y+11	; 0x0b
    8df4:	fc 85       	ldd	r31, Y+12	; 0x0c
    8df6:	80 81       	ld	r24, Z
    8df8:	91 81       	ldd	r25, Z+1	; 0x01
    8dfa:	82 30       	cpi	r24, 0x02	; 2
    8dfc:	91 05       	cpc	r25, r1
    8dfe:	81 f0       	breq	.+32     	; 0x8e20 <vdmLessOrEqual+0xac>
    8e00:	eb 85       	ldd	r30, Y+11	; 0x0b
    8e02:	fc 85       	ldd	r31, Y+12	; 0x0c
    8e04:	80 81       	ld	r24, Z
    8e06:	91 81       	ldd	r25, Z+1	; 0x01
    8e08:	84 30       	cpi	r24, 0x04	; 4
    8e0a:	91 05       	cpc	r25, r1
    8e0c:	49 f0       	breq	.+18     	; 0x8e20 <vdmLessOrEqual+0xac>
    8e0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8e10:	fc 85       	ldd	r31, Y+12	; 0x0c
    8e12:	80 81       	ld	r24, Z
    8e14:	91 81       	ldd	r25, Z+1	; 0x01
    8e16:	85 30       	cpi	r24, 0x05	; 5
    8e18:	91 05       	cpc	r25, r1
    8e1a:	11 f0       	breq	.+4      	; 0x8e20 <vdmLessOrEqual+0xac>
    8e1c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    8e20:	89 85       	ldd	r24, Y+9	; 0x09
    8e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    8e24:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8e28:	dc 01       	movw	r26, r24
    8e2a:	cb 01       	movw	r24, r22
    8e2c:	8d 83       	std	Y+5, r24	; 0x05
    8e2e:	9e 83       	std	Y+6, r25	; 0x06
    8e30:	af 83       	std	Y+7, r26	; 0x07
    8e32:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8e34:	8b 85       	ldd	r24, Y+11	; 0x0b
    8e36:	9c 85       	ldd	r25, Y+12	; 0x0c
    8e38:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8e3c:	dc 01       	movw	r26, r24
    8e3e:	cb 01       	movw	r24, r22
    8e40:	89 83       	std	Y+1, r24	; 0x01
    8e42:	9a 83       	std	Y+2, r25	; 0x02
    8e44:	ab 83       	std	Y+3, r26	; 0x03
    8e46:	bc 83       	std	Y+4, r27	; 0x04

	return newBool(av<=bv);
    8e48:	1d 86       	std	Y+13, r1	; 0x0d
    8e4a:	6d 81       	ldd	r22, Y+5	; 0x05
    8e4c:	7e 81       	ldd	r23, Y+6	; 0x06
    8e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    8e50:	98 85       	ldd	r25, Y+8	; 0x08
    8e52:	29 81       	ldd	r18, Y+1	; 0x01
    8e54:	3a 81       	ldd	r19, Y+2	; 0x02
    8e56:	4b 81       	ldd	r20, Y+3	; 0x03
    8e58:	5c 81       	ldd	r21, Y+4	; 0x04
    8e5a:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    8e5e:	18 16       	cp	r1, r24
    8e60:	14 f0       	brlt	.+4      	; 0x8e66 <vdmLessOrEqual+0xf2>
    8e62:	81 e0       	ldi	r24, 0x01	; 1
    8e64:	8d 87       	std	Y+13, r24	; 0x0d
    8e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e68:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    8e6c:	2d 96       	adiw	r28, 0x0d	; 13
    8e6e:	0f b6       	in	r0, 0x3f	; 63
    8e70:	f8 94       	cli
    8e72:	de bf       	out	0x3e, r29	; 62
    8e74:	0f be       	out	0x3f, r0	; 63
    8e76:	cd bf       	out	0x3d, r28	; 61
    8e78:	cf 91       	pop	r28
    8e7a:	df 91       	pop	r29
    8e7c:	08 95       	ret

00008e7e <vdmLessOrEqualGC>:

TVP vdmLessOrEqualGC(TVP a, TVP b, TVP *from)
{
    8e7e:	df 93       	push	r29
    8e80:	cf 93       	push	r28
    8e82:	cd b7       	in	r28, 0x3d	; 61
    8e84:	de b7       	in	r29, 0x3e	; 62
    8e86:	2f 97       	sbiw	r28, 0x0f	; 15
    8e88:	0f b6       	in	r0, 0x3f	; 63
    8e8a:	f8 94       	cli
    8e8c:	de bf       	out	0x3e, r29	; 62
    8e8e:	0f be       	out	0x3f, r0	; 63
    8e90:	cd bf       	out	0x3d, r28	; 61
    8e92:	9a 87       	std	Y+10, r25	; 0x0a
    8e94:	89 87       	std	Y+9, r24	; 0x09
    8e96:	7c 87       	std	Y+12, r23	; 0x0c
    8e98:	6b 87       	std	Y+11, r22	; 0x0b
    8e9a:	5e 87       	std	Y+14, r21	; 0x0e
    8e9c:	4d 87       	std	Y+13, r20	; 0x0d
	ASSERT_CHECK_NUMERIC(a);
    8e9e:	e9 85       	ldd	r30, Y+9	; 0x09
    8ea0:	fa 85       	ldd	r31, Y+10	; 0x0a
    8ea2:	80 81       	ld	r24, Z
    8ea4:	91 81       	ldd	r25, Z+1	; 0x01
    8ea6:	00 97       	sbiw	r24, 0x00	; 0
    8ea8:	f1 f0       	breq	.+60     	; 0x8ee6 <vdmLessOrEqualGC+0x68>
    8eaa:	e9 85       	ldd	r30, Y+9	; 0x09
    8eac:	fa 85       	ldd	r31, Y+10	; 0x0a
    8eae:	80 81       	ld	r24, Z
    8eb0:	91 81       	ldd	r25, Z+1	; 0x01
    8eb2:	81 30       	cpi	r24, 0x01	; 1
    8eb4:	91 05       	cpc	r25, r1
    8eb6:	b9 f0       	breq	.+46     	; 0x8ee6 <vdmLessOrEqualGC+0x68>
    8eb8:	e9 85       	ldd	r30, Y+9	; 0x09
    8eba:	fa 85       	ldd	r31, Y+10	; 0x0a
    8ebc:	80 81       	ld	r24, Z
    8ebe:	91 81       	ldd	r25, Z+1	; 0x01
    8ec0:	82 30       	cpi	r24, 0x02	; 2
    8ec2:	91 05       	cpc	r25, r1
    8ec4:	81 f0       	breq	.+32     	; 0x8ee6 <vdmLessOrEqualGC+0x68>
    8ec6:	e9 85       	ldd	r30, Y+9	; 0x09
    8ec8:	fa 85       	ldd	r31, Y+10	; 0x0a
    8eca:	80 81       	ld	r24, Z
    8ecc:	91 81       	ldd	r25, Z+1	; 0x01
    8ece:	84 30       	cpi	r24, 0x04	; 4
    8ed0:	91 05       	cpc	r25, r1
    8ed2:	49 f0       	breq	.+18     	; 0x8ee6 <vdmLessOrEqualGC+0x68>
    8ed4:	e9 85       	ldd	r30, Y+9	; 0x09
    8ed6:	fa 85       	ldd	r31, Y+10	; 0x0a
    8ed8:	80 81       	ld	r24, Z
    8eda:	91 81       	ldd	r25, Z+1	; 0x01
    8edc:	85 30       	cpi	r24, 0x05	; 5
    8ede:	91 05       	cpc	r25, r1
    8ee0:	11 f0       	breq	.+4      	; 0x8ee6 <vdmLessOrEqualGC+0x68>
    8ee2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK_NUMERIC(b);
    8ee6:	eb 85       	ldd	r30, Y+11	; 0x0b
    8ee8:	fc 85       	ldd	r31, Y+12	; 0x0c
    8eea:	80 81       	ld	r24, Z
    8eec:	91 81       	ldd	r25, Z+1	; 0x01
    8eee:	00 97       	sbiw	r24, 0x00	; 0
    8ef0:	f1 f0       	breq	.+60     	; 0x8f2e <vdmLessOrEqualGC+0xb0>
    8ef2:	eb 85       	ldd	r30, Y+11	; 0x0b
    8ef4:	fc 85       	ldd	r31, Y+12	; 0x0c
    8ef6:	80 81       	ld	r24, Z
    8ef8:	91 81       	ldd	r25, Z+1	; 0x01
    8efa:	81 30       	cpi	r24, 0x01	; 1
    8efc:	91 05       	cpc	r25, r1
    8efe:	b9 f0       	breq	.+46     	; 0x8f2e <vdmLessOrEqualGC+0xb0>
    8f00:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f02:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f04:	80 81       	ld	r24, Z
    8f06:	91 81       	ldd	r25, Z+1	; 0x01
    8f08:	82 30       	cpi	r24, 0x02	; 2
    8f0a:	91 05       	cpc	r25, r1
    8f0c:	81 f0       	breq	.+32     	; 0x8f2e <vdmLessOrEqualGC+0xb0>
    8f0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f10:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f12:	80 81       	ld	r24, Z
    8f14:	91 81       	ldd	r25, Z+1	; 0x01
    8f16:	84 30       	cpi	r24, 0x04	; 4
    8f18:	91 05       	cpc	r25, r1
    8f1a:	49 f0       	breq	.+18     	; 0x8f2e <vdmLessOrEqualGC+0xb0>
    8f1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    8f1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    8f20:	80 81       	ld	r24, Z
    8f22:	91 81       	ldd	r25, Z+1	; 0x01
    8f24:	85 30       	cpi	r24, 0x05	; 5
    8f26:	91 05       	cpc	r25, r1
    8f28:	11 f0       	breq	.+4      	; 0x8f2e <vdmLessOrEqualGC+0xb0>
    8f2a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	double av = toDouble(a);
    8f2e:	89 85       	ldd	r24, Y+9	; 0x09
    8f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    8f32:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8f36:	dc 01       	movw	r26, r24
    8f38:	cb 01       	movw	r24, r22
    8f3a:	8d 83       	std	Y+5, r24	; 0x05
    8f3c:	9e 83       	std	Y+6, r25	; 0x06
    8f3e:	af 83       	std	Y+7, r26	; 0x07
    8f40:	b8 87       	std	Y+8, r27	; 0x08
	double bv = toDouble(b);
    8f42:	8b 85       	ldd	r24, Y+11	; 0x0b
    8f44:	9c 85       	ldd	r25, Y+12	; 0x0c
    8f46:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <toDouble>
    8f4a:	dc 01       	movw	r26, r24
    8f4c:	cb 01       	movw	r24, r22
    8f4e:	89 83       	std	Y+1, r24	; 0x01
    8f50:	9a 83       	std	Y+2, r25	; 0x02
    8f52:	ab 83       	std	Y+3, r26	; 0x03
    8f54:	bc 83       	std	Y+4, r27	; 0x04

	return newBoolGC(av <= bv, from);
    8f56:	1f 86       	std	Y+15, r1	; 0x0f
    8f58:	6d 81       	ldd	r22, Y+5	; 0x05
    8f5a:	7e 81       	ldd	r23, Y+6	; 0x06
    8f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    8f5e:	98 85       	ldd	r25, Y+8	; 0x08
    8f60:	29 81       	ldd	r18, Y+1	; 0x01
    8f62:	3a 81       	ldd	r19, Y+2	; 0x02
    8f64:	4b 81       	ldd	r20, Y+3	; 0x03
    8f66:	5c 81       	ldd	r21, Y+4	; 0x04
    8f68:	0e 94 20 6f 	call	0xde40	; 0xde40 <__cmpsf2>
    8f6c:	18 16       	cp	r1, r24
    8f6e:	14 f0       	brlt	.+4      	; 0x8f74 <vdmLessOrEqualGC+0xf6>
    8f70:	81 e0       	ldi	r24, 0x01	; 1
    8f72:	8f 87       	std	Y+15, r24	; 0x0f
    8f74:	2d 85       	ldd	r18, Y+13	; 0x0d
    8f76:	3e 85       	ldd	r19, Y+14	; 0x0e
    8f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    8f7a:	b9 01       	movw	r22, r18
    8f7c:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
}
    8f80:	2f 96       	adiw	r28, 0x0f	; 15
    8f82:	0f b6       	in	r0, 0x3f	; 63
    8f84:	f8 94       	cli
    8f86:	de bf       	out	0x3e, r29	; 62
    8f88:	0f be       	out	0x3f, r0	; 63
    8f8a:	cd bf       	out	0x3d, r28	; 61
    8f8c:	cf 91       	pop	r28
    8f8e:	df 91       	pop	r29
    8f90:	08 95       	ret

00008f92 <newClassValue>:


#include "VdmClass.h"

struct ClassType* newClassValue(int id, unsigned int* refs, freeVdmClassFunction freeClass, void* value)
{
    8f92:	df 93       	push	r29
    8f94:	cf 93       	push	r28
    8f96:	cd b7       	in	r28, 0x3d	; 61
    8f98:	de b7       	in	r29, 0x3e	; 62
    8f9a:	2a 97       	sbiw	r28, 0x0a	; 10
    8f9c:	0f b6       	in	r0, 0x3f	; 63
    8f9e:	f8 94       	cli
    8fa0:	de bf       	out	0x3e, r29	; 62
    8fa2:	0f be       	out	0x3f, r0	; 63
    8fa4:	cd bf       	out	0x3d, r28	; 61
    8fa6:	9c 83       	std	Y+4, r25	; 0x04
    8fa8:	8b 83       	std	Y+3, r24	; 0x03
    8faa:	7e 83       	std	Y+6, r23	; 0x06
    8fac:	6d 83       	std	Y+5, r22	; 0x05
    8fae:	58 87       	std	Y+8, r21	; 0x08
    8fb0:	4f 83       	std	Y+7, r20	; 0x07
    8fb2:	3a 87       	std	Y+10, r19	; 0x0a
    8fb4:	29 87       	std	Y+9, r18	; 0x09
	struct ClassType* ptr = (struct ClassType*) malloc(sizeof(struct ClassType));
    8fb6:	88 e0       	ldi	r24, 0x08	; 8
    8fb8:	90 e0       	ldi	r25, 0x00	; 0
    8fba:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    8fbe:	9a 83       	std	Y+2, r25	; 0x02
    8fc0:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    8fc2:	89 81       	ldd	r24, Y+1	; 0x01
    8fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    8fc6:	00 97       	sbiw	r24, 0x00	; 0
    8fc8:	11 f4       	brne	.+4      	; 0x8fce <newClassValue+0x3c>
    8fca:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ptr->classId = id;
    8fce:	e9 81       	ldd	r30, Y+1	; 0x01
    8fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    8fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    8fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    8fd6:	93 83       	std	Z+3, r25	; 0x03
    8fd8:	82 83       	std	Z+2, r24	; 0x02
	ptr->value = value;
    8fda:	e9 81       	ldd	r30, Y+1	; 0x01
    8fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    8fde:	89 85       	ldd	r24, Y+9	; 0x09
    8fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    8fe2:	91 83       	std	Z+1, r25	; 0x01
    8fe4:	80 83       	st	Z, r24
	ptr->freeClass = freeClass;
    8fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    8fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    8fea:	8f 81       	ldd	r24, Y+7	; 0x07
    8fec:	98 85       	ldd	r25, Y+8	; 0x08
    8fee:	97 83       	std	Z+7, r25	; 0x07
    8ff0:	86 83       	std	Z+6, r24	; 0x06
	ptr->refs = refs;
    8ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    8ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    8ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    8ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    8ffa:	95 83       	std	Z+5, r25	; 0x05
    8ffc:	84 83       	std	Z+4, r24	; 0x04
	(*refs)++;
    8ffe:	ed 81       	ldd	r30, Y+5	; 0x05
    9000:	fe 81       	ldd	r31, Y+6	; 0x06
    9002:	80 81       	ld	r24, Z
    9004:	91 81       	ldd	r25, Z+1	; 0x01
    9006:	01 96       	adiw	r24, 0x01	; 1
    9008:	ed 81       	ldd	r30, Y+5	; 0x05
    900a:	fe 81       	ldd	r31, Y+6	; 0x06
    900c:	91 83       	std	Z+1, r25	; 0x01
    900e:	80 83       	st	Z, r24
	return ptr;
    9010:	89 81       	ldd	r24, Y+1	; 0x01
    9012:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9014:	2a 96       	adiw	r28, 0x0a	; 10
    9016:	0f b6       	in	r0, 0x3f	; 63
    9018:	f8 94       	cli
    901a:	de bf       	out	0x3e, r29	; 62
    901c:	0f be       	out	0x3f, r0	; 63
    901e:	cd bf       	out	0x3d, r28	; 61
    9020:	cf 91       	pop	r28
    9022:	df 91       	pop	r29
    9024:	08 95       	ret

00009026 <vdm_gc_init>:

struct alloc_list_node *allocd_mem_head = NULL;
struct alloc_list_node *allocd_mem_tail = NULL;

void vdm_gc_init()
{
    9026:	df 93       	push	r29
    9028:	cf 93       	push	r28
    902a:	cd b7       	in	r28, 0x3d	; 61
    902c:	de b7       	in	r29, 0x3e	; 62
	allocd_mem_head = (struct alloc_list_node*)malloc(sizeof (struct alloc_list_node));
    902e:	84 e0       	ldi	r24, 0x04	; 4
    9030:	90 e0       	ldi	r25, 0x00	; 0
    9032:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    9036:	90 93 2b 03 	sts	0x032B, r25
    903a:	80 93 2a 03 	sts	0x032A, r24
	assert(allocd_mem_head != NULL);
    903e:	80 91 2a 03 	lds	r24, 0x032A
    9042:	90 91 2b 03 	lds	r25, 0x032B
    9046:	00 97       	sbiw	r24, 0x00	; 0
    9048:	11 f4       	brne	.+4      	; 0x904e <vdm_gc_init+0x28>
    904a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	allocd_mem_head->loc = NULL;
    904e:	e0 91 2a 03 	lds	r30, 0x032A
    9052:	f0 91 2b 03 	lds	r31, 0x032B
    9056:	11 82       	std	Z+1, r1	; 0x01
    9058:	10 82       	st	Z, r1
	allocd_mem_head->next = NULL;
    905a:	e0 91 2a 03 	lds	r30, 0x032A
    905e:	f0 91 2b 03 	lds	r31, 0x032B
    9062:	13 82       	std	Z+3, r1	; 0x03
    9064:	12 82       	std	Z+2, r1	; 0x02

	allocd_mem_tail = allocd_mem_head;
    9066:	80 91 2a 03 	lds	r24, 0x032A
    906a:	90 91 2b 03 	lds	r25, 0x032B
    906e:	90 93 2d 03 	sts	0x032D, r25
    9072:	80 93 2c 03 	sts	0x032C, r24
}
    9076:	cf 91       	pop	r28
    9078:	df 91       	pop	r29
    907a:	08 95       	ret

0000907c <add_allocd_mem_node>:

void add_allocd_mem_node(TVP l, TVP *from)
{
    907c:	0f 93       	push	r16
    907e:	1f 93       	push	r17
    9080:	df 93       	push	r29
    9082:	cf 93       	push	r28
    9084:	00 d0       	rcall	.+0      	; 0x9086 <add_allocd_mem_node+0xa>
    9086:	00 d0       	rcall	.+0      	; 0x9088 <add_allocd_mem_node+0xc>
    9088:	cd b7       	in	r28, 0x3d	; 61
    908a:	de b7       	in	r29, 0x3e	; 62
    908c:	9a 83       	std	Y+2, r25	; 0x02
    908e:	89 83       	std	Y+1, r24	; 0x01
    9090:	7c 83       	std	Y+4, r23	; 0x04
    9092:	6b 83       	std	Y+3, r22	; 0x03
	allocd_mem_tail->loc = l;
    9094:	e0 91 2c 03 	lds	r30, 0x032C
    9098:	f0 91 2d 03 	lds	r31, 0x032D
    909c:	89 81       	ldd	r24, Y+1	; 0x01
    909e:	9a 81       	ldd	r25, Y+2	; 0x02
    90a0:	91 83       	std	Z+1, r25	; 0x01
    90a2:	80 83       	st	Z, r24
	allocd_mem_tail->loc->ref_from = from;
    90a4:	e0 91 2c 03 	lds	r30, 0x032C
    90a8:	f0 91 2d 03 	lds	r31, 0x032D
    90ac:	01 90       	ld	r0, Z+
    90ae:	f0 81       	ld	r31, Z
    90b0:	e0 2d       	mov	r30, r0
    90b2:	8b 81       	ldd	r24, Y+3	; 0x03
    90b4:	9c 81       	ldd	r25, Y+4	; 0x04
    90b6:	93 83       	std	Z+3, r25	; 0x03
    90b8:	82 83       	std	Z+2, r24	; 0x02

	allocd_mem_tail->next = (struct alloc_list_node*)malloc(sizeof(struct alloc_list_node));
    90ba:	00 91 2c 03 	lds	r16, 0x032C
    90be:	10 91 2d 03 	lds	r17, 0x032D
    90c2:	84 e0       	ldi	r24, 0x04	; 4
    90c4:	90 e0       	ldi	r25, 0x00	; 0
    90c6:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    90ca:	f8 01       	movw	r30, r16
    90cc:	93 83       	std	Z+3, r25	; 0x03
    90ce:	82 83       	std	Z+2, r24	; 0x02
	assert(allocd_mem_tail->next != NULL);
    90d0:	e0 91 2c 03 	lds	r30, 0x032C
    90d4:	f0 91 2d 03 	lds	r31, 0x032D
    90d8:	82 81       	ldd	r24, Z+2	; 0x02
    90da:	93 81       	ldd	r25, Z+3	; 0x03
    90dc:	00 97       	sbiw	r24, 0x00	; 0
    90de:	11 f4       	brne	.+4      	; 0x90e4 <add_allocd_mem_node+0x68>
    90e0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	allocd_mem_tail = allocd_mem_tail->next;
    90e4:	e0 91 2c 03 	lds	r30, 0x032C
    90e8:	f0 91 2d 03 	lds	r31, 0x032D
    90ec:	82 81       	ldd	r24, Z+2	; 0x02
    90ee:	93 81       	ldd	r25, Z+3	; 0x03
    90f0:	90 93 2d 03 	sts	0x032D, r25
    90f4:	80 93 2c 03 	sts	0x032C, r24

	allocd_mem_tail->loc = NULL;
    90f8:	e0 91 2c 03 	lds	r30, 0x032C
    90fc:	f0 91 2d 03 	lds	r31, 0x032D
    9100:	11 82       	std	Z+1, r1	; 0x01
    9102:	10 82       	st	Z, r1
	allocd_mem_tail->next = NULL;
    9104:	e0 91 2c 03 	lds	r30, 0x032C
    9108:	f0 91 2d 03 	lds	r31, 0x032D
    910c:	13 82       	std	Z+3, r1	; 0x03
    910e:	12 82       	std	Z+2, r1	; 0x02
}
    9110:	0f 90       	pop	r0
    9112:	0f 90       	pop	r0
    9114:	0f 90       	pop	r0
    9116:	0f 90       	pop	r0
    9118:	cf 91       	pop	r28
    911a:	df 91       	pop	r29
    911c:	1f 91       	pop	r17
    911e:	0f 91       	pop	r16
    9120:	08 95       	ret

00009122 <remove_allocd_mem_node_by_location>:



void remove_allocd_mem_node_by_location(TVP loc)
{
    9122:	df 93       	push	r29
    9124:	cf 93       	push	r28
    9126:	00 d0       	rcall	.+0      	; 0x9128 <remove_allocd_mem_node_by_location+0x6>
    9128:	00 d0       	rcall	.+0      	; 0x912a <remove_allocd_mem_node_by_location+0x8>
    912a:	00 d0       	rcall	.+0      	; 0x912c <remove_allocd_mem_node_by_location+0xa>
    912c:	cd b7       	in	r28, 0x3d	; 61
    912e:	de b7       	in	r29, 0x3e	; 62
    9130:	9e 83       	std	Y+6, r25	; 0x06
    9132:	8d 83       	std	Y+5, r24	; 0x05
	struct alloc_list_node *tmp, *prev;

	prev = NULL;
    9134:	1a 82       	std	Y+2, r1	; 0x02
    9136:	19 82       	std	Y+1, r1	; 0x01
	tmp = allocd_mem_head;
    9138:	80 91 2a 03 	lds	r24, 0x032A
    913c:	90 91 2b 03 	lds	r25, 0x032B
    9140:	9c 83       	std	Y+4, r25	; 0x04
    9142:	8b 83       	std	Y+3, r24	; 0x03

	if(tmp == NULL)
    9144:	8b 81       	ldd	r24, Y+3	; 0x03
    9146:	9c 81       	ldd	r25, Y+4	; 0x04
    9148:	00 97       	sbiw	r24, 0x00	; 0
    914a:	09 f4       	brne	.+2      	; 0x914e <remove_allocd_mem_node_by_location+0x2c>
    914c:	51 c0       	rjmp	.+162    	; 0x91f0 <remove_allocd_mem_node_by_location+0xce>
    914e:	0e c0       	rjmp	.+28     	; 0x916c <remove_allocd_mem_node_by_location+0x4a>
		return;
	}

	while(tmp->loc != loc)
	{
		prev = tmp;
    9150:	8b 81       	ldd	r24, Y+3	; 0x03
    9152:	9c 81       	ldd	r25, Y+4	; 0x04
    9154:	9a 83       	std	Y+2, r25	; 0x02
    9156:	89 83       	std	Y+1, r24	; 0x01
		tmp = tmp->next;
    9158:	eb 81       	ldd	r30, Y+3	; 0x03
    915a:	fc 81       	ldd	r31, Y+4	; 0x04
    915c:	82 81       	ldd	r24, Z+2	; 0x02
    915e:	93 81       	ldd	r25, Z+3	; 0x03
    9160:	9c 83       	std	Y+4, r25	; 0x04
    9162:	8b 83       	std	Y+3, r24	; 0x03

		if(tmp == NULL)
    9164:	8b 81       	ldd	r24, Y+3	; 0x03
    9166:	9c 81       	ldd	r25, Y+4	; 0x04
    9168:	00 97       	sbiw	r24, 0x00	; 0
    916a:	49 f0       	breq	.+18     	; 0x917e <remove_allocd_mem_node_by_location+0x5c>
	{
		/* GC list empty.  */
		return;
	}

	while(tmp->loc != loc)
    916c:	eb 81       	ldd	r30, Y+3	; 0x03
    916e:	fc 81       	ldd	r31, Y+4	; 0x04
    9170:	20 81       	ld	r18, Z
    9172:	31 81       	ldd	r19, Z+1	; 0x01
    9174:	8d 81       	ldd	r24, Y+5	; 0x05
    9176:	9e 81       	ldd	r25, Y+6	; 0x06
    9178:	28 17       	cp	r18, r24
    917a:	39 07       	cpc	r19, r25
    917c:	49 f7       	brne	.-46     	; 0x9150 <remove_allocd_mem_node_by_location+0x2e>
		{
			break;
		}
	}

	if(tmp == NULL)
    917e:	8b 81       	ldd	r24, Y+3	; 0x03
    9180:	9c 81       	ldd	r25, Y+4	; 0x04
    9182:	00 97       	sbiw	r24, 0x00	; 0
    9184:	a9 f1       	breq	.+106    	; 0x91f0 <remove_allocd_mem_node_by_location+0xce>
	{
		/* This memory is not under GC control.  */
		return;
	}
	else if(tmp == allocd_mem_head)
    9186:	20 91 2a 03 	lds	r18, 0x032A
    918a:	30 91 2b 03 	lds	r19, 0x032B
    918e:	8b 81       	ldd	r24, Y+3	; 0x03
    9190:	9c 81       	ldd	r25, Y+4	; 0x04
    9192:	82 17       	cp	r24, r18
    9194:	93 07       	cpc	r25, r19
    9196:	01 f5       	brne	.+64     	; 0x91d8 <remove_allocd_mem_node_by_location+0xb6>
	{
		allocd_mem_head = allocd_mem_head->next;
    9198:	e0 91 2a 03 	lds	r30, 0x032A
    919c:	f0 91 2b 03 	lds	r31, 0x032B
    91a0:	82 81       	ldd	r24, Z+2	; 0x02
    91a2:	93 81       	ldd	r25, Z+3	; 0x03
    91a4:	90 93 2b 03 	sts	0x032B, r25
    91a8:	80 93 2a 03 	sts	0x032A, r24
		if(allocd_mem_tail == tmp)
    91ac:	20 91 2c 03 	lds	r18, 0x032C
    91b0:	30 91 2d 03 	lds	r19, 0x032D
    91b4:	8b 81       	ldd	r24, Y+3	; 0x03
    91b6:	9c 81       	ldd	r25, Y+4	; 0x04
    91b8:	28 17       	cp	r18, r24
    91ba:	39 07       	cpc	r19, r25
    91bc:	41 f4       	brne	.+16     	; 0x91ce <remove_allocd_mem_node_by_location+0xac>
		{
			allocd_mem_tail = allocd_mem_head;
    91be:	80 91 2a 03 	lds	r24, 0x032A
    91c2:	90 91 2b 03 	lds	r25, 0x032B
    91c6:	90 93 2d 03 	sts	0x032D, r25
    91ca:	80 93 2c 03 	sts	0x032C, r24
		}

		free(tmp);
    91ce:	8b 81       	ldd	r24, Y+3	; 0x03
    91d0:	9c 81       	ldd	r25, Y+4	; 0x04
    91d2:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
    91d6:	0c c0       	rjmp	.+24     	; 0x91f0 <remove_allocd_mem_node_by_location+0xce>
		return;
	}
	else
	{
		prev->next = tmp->next;
    91d8:	eb 81       	ldd	r30, Y+3	; 0x03
    91da:	fc 81       	ldd	r31, Y+4	; 0x04
    91dc:	82 81       	ldd	r24, Z+2	; 0x02
    91de:	93 81       	ldd	r25, Z+3	; 0x03
    91e0:	e9 81       	ldd	r30, Y+1	; 0x01
    91e2:	fa 81       	ldd	r31, Y+2	; 0x02
    91e4:	93 83       	std	Z+3, r25	; 0x03
    91e6:	82 83       	std	Z+2, r24	; 0x02
		free(tmp);
    91e8:	8b 81       	ldd	r24, Y+3	; 0x03
    91ea:	9c 81       	ldd	r25, Y+4	; 0x04
    91ec:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		return;
	}
	return;
}
    91f0:	26 96       	adiw	r28, 0x06	; 6
    91f2:	0f b6       	in	r0, 0x3f	; 63
    91f4:	f8 94       	cli
    91f6:	de bf       	out	0x3e, r29	; 62
    91f8:	0f be       	out	0x3f, r0	; 63
    91fa:	cd bf       	out	0x3d, r28	; 61
    91fc:	cf 91       	pop	r28
    91fe:	df 91       	pop	r29
    9200:	08 95       	ret

00009202 <remove_allocd_mem_node>:



void remove_allocd_mem_node(struct alloc_list_node *node)
{
    9202:	df 93       	push	r29
    9204:	cf 93       	push	r28
    9206:	00 d0       	rcall	.+0      	; 0x9208 <remove_allocd_mem_node+0x6>
    9208:	00 d0       	rcall	.+0      	; 0x920a <remove_allocd_mem_node+0x8>
    920a:	00 d0       	rcall	.+0      	; 0x920c <remove_allocd_mem_node+0xa>
    920c:	cd b7       	in	r28, 0x3d	; 61
    920e:	de b7       	in	r29, 0x3e	; 62
    9210:	9e 83       	std	Y+6, r25	; 0x06
    9212:	8d 83       	std	Y+5, r24	; 0x05
	struct alloc_list_node *tmp, *prev;

	tmp = allocd_mem_head;
    9214:	80 91 2a 03 	lds	r24, 0x032A
    9218:	90 91 2b 03 	lds	r25, 0x032B
    921c:	9c 83       	std	Y+4, r25	; 0x04
    921e:	8b 83       	std	Y+3, r24	; 0x03
	prev = NULL;
    9220:	1a 82       	std	Y+2, r1	; 0x02
    9222:	19 82       	std	Y+1, r1	; 0x01

	if(tmp == NULL)
    9224:	8b 81       	ldd	r24, Y+3	; 0x03
    9226:	9c 81       	ldd	r25, Y+4	; 0x04
    9228:	00 97       	sbiw	r24, 0x00	; 0
    922a:	09 f4       	brne	.+2      	; 0x922e <remove_allocd_mem_node+0x2c>
    922c:	4b c0       	rjmp	.+150    	; 0x92c4 <remove_allocd_mem_node+0xc2>
    922e:	0e c0       	rjmp	.+28     	; 0x924c <remove_allocd_mem_node+0x4a>
		return;
	}

	while(tmp != node)
	{
		prev = tmp;
    9230:	8b 81       	ldd	r24, Y+3	; 0x03
    9232:	9c 81       	ldd	r25, Y+4	; 0x04
    9234:	9a 83       	std	Y+2, r25	; 0x02
    9236:	89 83       	std	Y+1, r24	; 0x01
		tmp = tmp->next;
    9238:	eb 81       	ldd	r30, Y+3	; 0x03
    923a:	fc 81       	ldd	r31, Y+4	; 0x04
    923c:	82 81       	ldd	r24, Z+2	; 0x02
    923e:	93 81       	ldd	r25, Z+3	; 0x03
    9240:	9c 83       	std	Y+4, r25	; 0x04
    9242:	8b 83       	std	Y+3, r24	; 0x03

		if(tmp == NULL)
    9244:	8b 81       	ldd	r24, Y+3	; 0x03
    9246:	9c 81       	ldd	r25, Y+4	; 0x04
    9248:	00 97       	sbiw	r24, 0x00	; 0
    924a:	e1 f1       	breq	.+120    	; 0x92c4 <remove_allocd_mem_node+0xc2>
	{
		/* GC list empty.  */
		return;
	}

	while(tmp != node)
    924c:	2b 81       	ldd	r18, Y+3	; 0x03
    924e:	3c 81       	ldd	r19, Y+4	; 0x04
    9250:	8d 81       	ldd	r24, Y+5	; 0x05
    9252:	9e 81       	ldd	r25, Y+6	; 0x06
    9254:	28 17       	cp	r18, r24
    9256:	39 07       	cpc	r19, r25
    9258:	59 f7       	brne	.-42     	; 0x9230 <remove_allocd_mem_node+0x2e>
		{
			return;
		}
	}

	if(tmp == allocd_mem_head)
    925a:	20 91 2a 03 	lds	r18, 0x032A
    925e:	30 91 2b 03 	lds	r19, 0x032B
    9262:	8b 81       	ldd	r24, Y+3	; 0x03
    9264:	9c 81       	ldd	r25, Y+4	; 0x04
    9266:	82 17       	cp	r24, r18
    9268:	93 07       	cpc	r25, r19
    926a:	01 f5       	brne	.+64     	; 0x92ac <remove_allocd_mem_node+0xaa>
	{
		allocd_mem_head = allocd_mem_head->next;
    926c:	e0 91 2a 03 	lds	r30, 0x032A
    9270:	f0 91 2b 03 	lds	r31, 0x032B
    9274:	82 81       	ldd	r24, Z+2	; 0x02
    9276:	93 81       	ldd	r25, Z+3	; 0x03
    9278:	90 93 2b 03 	sts	0x032B, r25
    927c:	80 93 2a 03 	sts	0x032A, r24
		if(allocd_mem_tail == tmp)
    9280:	20 91 2c 03 	lds	r18, 0x032C
    9284:	30 91 2d 03 	lds	r19, 0x032D
    9288:	8b 81       	ldd	r24, Y+3	; 0x03
    928a:	9c 81       	ldd	r25, Y+4	; 0x04
    928c:	28 17       	cp	r18, r24
    928e:	39 07       	cpc	r19, r25
    9290:	41 f4       	brne	.+16     	; 0x92a2 <remove_allocd_mem_node+0xa0>
		{
			allocd_mem_tail = allocd_mem_head;
    9292:	80 91 2a 03 	lds	r24, 0x032A
    9296:	90 91 2b 03 	lds	r25, 0x032B
    929a:	90 93 2d 03 	sts	0x032D, r25
    929e:	80 93 2c 03 	sts	0x032C, r24
		}

		free(node);
    92a2:	8d 81       	ldd	r24, Y+5	; 0x05
    92a4:	9e 81       	ldd	r25, Y+6	; 0x06
    92a6:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
    92aa:	0c c0       	rjmp	.+24     	; 0x92c4 <remove_allocd_mem_node+0xc2>
		return;
	}
	else
	{
		prev->next = tmp->next;
    92ac:	eb 81       	ldd	r30, Y+3	; 0x03
    92ae:	fc 81       	ldd	r31, Y+4	; 0x04
    92b0:	82 81       	ldd	r24, Z+2	; 0x02
    92b2:	93 81       	ldd	r25, Z+3	; 0x03
    92b4:	e9 81       	ldd	r30, Y+1	; 0x01
    92b6:	fa 81       	ldd	r31, Y+2	; 0x02
    92b8:	93 83       	std	Z+3, r25	; 0x03
    92ba:	82 83       	std	Z+2, r24	; 0x02
		free(tmp);
    92bc:	8b 81       	ldd	r24, Y+3	; 0x03
    92be:	9c 81       	ldd	r25, Y+4	; 0x04
    92c0:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
		return;
	}
	return;
}
    92c4:	26 96       	adiw	r28, 0x06	; 6
    92c6:	0f b6       	in	r0, 0x3f	; 63
    92c8:	f8 94       	cli
    92ca:	de bf       	out	0x3e, r29	; 62
    92cc:	0f be       	out	0x3f, r0	; 63
    92ce:	cd bf       	out	0x3d, r28	; 61
    92d0:	cf 91       	pop	r28
    92d2:	df 91       	pop	r29
    92d4:	08 95       	ret

000092d6 <vdm_gc_shutdown>:

void vdm_gc_shutdown()
{
    92d6:	df 93       	push	r29
    92d8:	cf 93       	push	r28
    92da:	00 d0       	rcall	.+0      	; 0x92dc <vdm_gc_shutdown+0x6>
    92dc:	00 d0       	rcall	.+0      	; 0x92de <vdm_gc_shutdown+0x8>
    92de:	cd b7       	in	r28, 0x3d	; 61
    92e0:	de b7       	in	r29, 0x3e	; 62
	struct alloc_list_node *tmp, *tmp2;

	tmp = allocd_mem_head;
    92e2:	80 91 2a 03 	lds	r24, 0x032A
    92e6:	90 91 2b 03 	lds	r25, 0x032B
    92ea:	9c 83       	std	Y+4, r25	; 0x04
    92ec:	8b 83       	std	Y+3, r24	; 0x03
    92ee:	1a c0       	rjmp	.+52     	; 0x9324 <vdm_gc_shutdown+0x4e>

	while(tmp != allocd_mem_tail)
	{
		tmp2 = tmp->next;
    92f0:	eb 81       	ldd	r30, Y+3	; 0x03
    92f2:	fc 81       	ldd	r31, Y+4	; 0x04
    92f4:	82 81       	ldd	r24, Z+2	; 0x02
    92f6:	93 81       	ldd	r25, Z+3	; 0x03
    92f8:	9a 83       	std	Y+2, r25	; 0x02
    92fa:	89 83       	std	Y+1, r24	; 0x01

		if(tmp->loc != NULL)
    92fc:	eb 81       	ldd	r30, Y+3	; 0x03
    92fe:	fc 81       	ldd	r31, Y+4	; 0x04
    9300:	80 81       	ld	r24, Z
    9302:	91 81       	ldd	r25, Z+1	; 0x01
    9304:	00 97       	sbiw	r24, 0x00	; 0
    9306:	51 f0       	breq	.+20     	; 0x931c <vdm_gc_shutdown+0x46>
		{
			vdmFree_GCInternal(tmp->loc);
    9308:	eb 81       	ldd	r30, Y+3	; 0x03
    930a:	fc 81       	ldd	r31, Y+4	; 0x04
    930c:	80 81       	ld	r24, Z
    930e:	91 81       	ldd	r25, Z+1	; 0x01
    9310:	0e 94 9e 2b 	call	0x573c	; 0x573c <vdmFree_GCInternal>
			remove_allocd_mem_node(tmp);
    9314:	8b 81       	ldd	r24, Y+3	; 0x03
    9316:	9c 81       	ldd	r25, Y+4	; 0x04
    9318:	0e 94 01 49 	call	0x9202	; 0x9202 <remove_allocd_mem_node>
		}
		tmp = tmp2;
    931c:	89 81       	ldd	r24, Y+1	; 0x01
    931e:	9a 81       	ldd	r25, Y+2	; 0x02
    9320:	9c 83       	std	Y+4, r25	; 0x04
    9322:	8b 83       	std	Y+3, r24	; 0x03
{
	struct alloc_list_node *tmp, *tmp2;

	tmp = allocd_mem_head;

	while(tmp != allocd_mem_tail)
    9324:	20 91 2c 03 	lds	r18, 0x032C
    9328:	30 91 2d 03 	lds	r19, 0x032D
    932c:	8b 81       	ldd	r24, Y+3	; 0x03
    932e:	9c 81       	ldd	r25, Y+4	; 0x04
    9330:	82 17       	cp	r24, r18
    9332:	93 07       	cpc	r25, r19
    9334:	e9 f6       	brne	.-70     	; 0x92f0 <vdm_gc_shutdown+0x1a>
			vdmFree_GCInternal(tmp->loc);
			remove_allocd_mem_node(tmp);
		}
		tmp = tmp2;
	}
	free(allocd_mem_tail);
    9336:	80 91 2c 03 	lds	r24, 0x032C
    933a:	90 91 2d 03 	lds	r25, 0x032D
    933e:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	allocd_mem_head = NULL;
    9342:	10 92 2b 03 	sts	0x032B, r1
    9346:	10 92 2a 03 	sts	0x032A, r1
	allocd_mem_tail = NULL;
    934a:	10 92 2d 03 	sts	0x032D, r1
    934e:	10 92 2c 03 	sts	0x032C, r1
}
    9352:	0f 90       	pop	r0
    9354:	0f 90       	pop	r0
    9356:	0f 90       	pop	r0
    9358:	0f 90       	pop	r0
    935a:	cf 91       	pop	r28
    935c:	df 91       	pop	r29
    935e:	08 95       	ret

00009360 <vdm_gc>:

void vdm_gc()
{
    9360:	df 93       	push	r29
    9362:	cf 93       	push	r28
    9364:	00 d0       	rcall	.+0      	; 0x9366 <vdm_gc+0x6>
    9366:	00 d0       	rcall	.+0      	; 0x9368 <vdm_gc+0x8>
    9368:	00 d0       	rcall	.+0      	; 0x936a <vdm_gc+0xa>
    936a:	cd b7       	in	r28, 0x3d	; 61
    936c:	de b7       	in	r29, 0x3e	; 62
	struct alloc_list_node *current, *tmp;
	TVP tmp_loc;

	current = allocd_mem_head;
    936e:	80 91 2a 03 	lds	r24, 0x032A
    9372:	90 91 2b 03 	lds	r25, 0x032B
    9376:	9a 83       	std	Y+2, r25	; 0x02
    9378:	89 83       	std	Y+1, r24	; 0x01

	/* Nothing to do if no memory currently allocated.  */
	if(current->loc == NULL && current->next == NULL)
    937a:	e9 81       	ldd	r30, Y+1	; 0x01
    937c:	fa 81       	ldd	r31, Y+2	; 0x02
    937e:	80 81       	ld	r24, Z
    9380:	91 81       	ldd	r25, Z+1	; 0x01
    9382:	00 97       	sbiw	r24, 0x00	; 0
    9384:	09 f0       	breq	.+2      	; 0x9388 <vdm_gc+0x28>
    9386:	9a c0       	rjmp	.+308    	; 0x94bc <vdm_gc+0x15c>
    9388:	e9 81       	ldd	r30, Y+1	; 0x01
    938a:	fa 81       	ldd	r31, Y+2	; 0x02
    938c:	82 81       	ldd	r24, Z+2	; 0x02
    938e:	93 81       	ldd	r25, Z+3	; 0x03
    9390:	00 97       	sbiw	r24, 0x00	; 0
    9392:	09 f4       	brne	.+2      	; 0x9396 <vdm_gc+0x36>
    9394:	9d c0       	rjmp	.+314    	; 0x94d0 <vdm_gc+0x170>
    9396:	92 c0       	rjmp	.+292    	; 0x94bc <vdm_gc+0x15c>
		return;

	while(current != allocd_mem_tail)
	{
		tmp = current->next;
    9398:	e9 81       	ldd	r30, Y+1	; 0x01
    939a:	fa 81       	ldd	r31, Y+2	; 0x02
    939c:	82 81       	ldd	r24, Z+2	; 0x02
    939e:	93 81       	ldd	r25, Z+3	; 0x03
    93a0:	9c 83       	std	Y+4, r25	; 0x04
    93a2:	8b 83       	std	Y+3, r24	; 0x03
		tmp_loc = current->loc;
    93a4:	e9 81       	ldd	r30, Y+1	; 0x01
    93a6:	fa 81       	ldd	r31, Y+2	; 0x02
    93a8:	80 81       	ld	r24, Z
    93aa:	91 81       	ldd	r25, Z+1	; 0x01
    93ac:	9e 83       	std	Y+6, r25	; 0x06
    93ae:	8d 83       	std	Y+5, r24	; 0x05

		/* No information was passed about where the reference was assigned.  */
		/* This is the case when the value is created in-place or when freed using vdmFree().  */
		if(current->loc->ref_from == NULL)
    93b0:	e9 81       	ldd	r30, Y+1	; 0x01
    93b2:	fa 81       	ldd	r31, Y+2	; 0x02
    93b4:	01 90       	ld	r0, Z+
    93b6:	f0 81       	ld	r31, Z
    93b8:	e0 2d       	mov	r30, r0
    93ba:	82 81       	ldd	r24, Z+2	; 0x02
    93bc:	93 81       	ldd	r25, Z+3	; 0x03
    93be:	00 97       	sbiw	r24, 0x00	; 0
    93c0:	49 f4       	brne	.+18     	; 0x93d4 <vdm_gc+0x74>
		{
			remove_allocd_mem_node(current);
    93c2:	89 81       	ldd	r24, Y+1	; 0x01
    93c4:	9a 81       	ldd	r25, Y+2	; 0x02
    93c6:	0e 94 01 49 	call	0x9202	; 0x9202 <remove_allocd_mem_node>
			vdmFree_GCInternal(tmp_loc);
    93ca:	8d 81       	ldd	r24, Y+5	; 0x05
    93cc:	9e 81       	ldd	r25, Y+6	; 0x06
    93ce:	0e 94 9e 2b 	call	0x573c	; 0x573c <vdmFree_GCInternal>
    93d2:	70 c0       	rjmp	.+224    	; 0x94b4 <vdm_gc+0x154>
		}
		else if(*(current->loc->ref_from) != current->loc)
    93d4:	e9 81       	ldd	r30, Y+1	; 0x01
    93d6:	fa 81       	ldd	r31, Y+2	; 0x02
    93d8:	01 90       	ld	r0, Z+
    93da:	f0 81       	ld	r31, Z
    93dc:	e0 2d       	mov	r30, r0
    93de:	02 80       	ldd	r0, Z+2	; 0x02
    93e0:	f3 81       	ldd	r31, Z+3	; 0x03
    93e2:	e0 2d       	mov	r30, r0
    93e4:	20 81       	ld	r18, Z
    93e6:	31 81       	ldd	r19, Z+1	; 0x01
    93e8:	e9 81       	ldd	r30, Y+1	; 0x01
    93ea:	fa 81       	ldd	r31, Y+2	; 0x02
    93ec:	80 81       	ld	r24, Z
    93ee:	91 81       	ldd	r25, Z+1	; 0x01
    93f0:	28 17       	cp	r18, r24
    93f2:	39 07       	cpc	r19, r25
    93f4:	09 f4       	brne	.+2      	; 0x93f8 <vdm_gc+0x98>
    93f6:	5e c0       	rjmp	.+188    	; 0x94b4 <vdm_gc+0x154>
		{
			/* For compatibility with vdmFree().  */
			/* Check that there is no interference between this call's stack  */
			/* variables and the reference to the memory we are freeing  */
			/* Before NULLing the referencing location for vdmFree.  */
			if(!((((void *)&tmp) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&tmp + 1))) ||
    93f8:	e9 81       	ldd	r30, Y+1	; 0x01
    93fa:	fa 81       	ldd	r31, Y+2	; 0x02
    93fc:	01 90       	ld	r0, Z+
    93fe:	f0 81       	ld	r31, Z
    9400:	e0 2d       	mov	r30, r0
    9402:	22 81       	ldd	r18, Z+2	; 0x02
    9404:	33 81       	ldd	r19, Z+3	; 0x03
    9406:	ce 01       	movw	r24, r28
    9408:	03 96       	adiw	r24, 0x03	; 3
    940a:	28 17       	cp	r18, r24
    940c:	39 07       	cpc	r19, r25
    940e:	68 f0       	brcs	.+26     	; 0x942a <vdm_gc+0xca>
    9410:	e9 81       	ldd	r30, Y+1	; 0x01
    9412:	fa 81       	ldd	r31, Y+2	; 0x02
    9414:	01 90       	ld	r0, Z+
    9416:	f0 81       	ld	r31, Z
    9418:	e0 2d       	mov	r30, r0
    941a:	22 81       	ldd	r18, Z+2	; 0x02
    941c:	33 81       	ldd	r19, Z+3	; 0x03
    941e:	ce 01       	movw	r24, r28
    9420:	03 96       	adiw	r24, 0x03	; 3
    9422:	02 96       	adiw	r24, 0x02	; 2
    9424:	82 17       	cp	r24, r18
    9426:	93 07       	cpc	r25, r19
    9428:	d8 f5       	brcc	.+118    	; 0x94a0 <vdm_gc+0x140>
    942a:	e9 81       	ldd	r30, Y+1	; 0x01
    942c:	fa 81       	ldd	r31, Y+2	; 0x02
    942e:	01 90       	ld	r0, Z+
    9430:	f0 81       	ld	r31, Z
    9432:	e0 2d       	mov	r30, r0
    9434:	22 81       	ldd	r18, Z+2	; 0x02
    9436:	33 81       	ldd	r19, Z+3	; 0x03
    9438:	ce 01       	movw	r24, r28
    943a:	01 96       	adiw	r24, 0x01	; 1
    943c:	28 17       	cp	r18, r24
    943e:	39 07       	cpc	r19, r25
    9440:	60 f0       	brcs	.+24     	; 0x945a <vdm_gc+0xfa>
    9442:	e9 81       	ldd	r30, Y+1	; 0x01
    9444:	fa 81       	ldd	r31, Y+2	; 0x02
    9446:	01 90       	ld	r0, Z+
    9448:	f0 81       	ld	r31, Z
    944a:	e0 2d       	mov	r30, r0
    944c:	22 81       	ldd	r18, Z+2	; 0x02
    944e:	33 81       	ldd	r19, Z+3	; 0x03
    9450:	ce 01       	movw	r24, r28
    9452:	03 96       	adiw	r24, 0x03	; 3
    9454:	82 17       	cp	r24, r18
    9456:	93 07       	cpc	r25, r19
    9458:	18 f5       	brcc	.+70     	; 0x94a0 <vdm_gc+0x140>
    945a:	e9 81       	ldd	r30, Y+1	; 0x01
    945c:	fa 81       	ldd	r31, Y+2	; 0x02
    945e:	01 90       	ld	r0, Z+
    9460:	f0 81       	ld	r31, Z
    9462:	e0 2d       	mov	r30, r0
    9464:	22 81       	ldd	r18, Z+2	; 0x02
    9466:	33 81       	ldd	r19, Z+3	; 0x03
    9468:	ce 01       	movw	r24, r28
    946a:	05 96       	adiw	r24, 0x05	; 5
    946c:	28 17       	cp	r18, r24
    946e:	39 07       	cpc	r19, r25
    9470:	68 f0       	brcs	.+26     	; 0x948c <vdm_gc+0x12c>
    9472:	e9 81       	ldd	r30, Y+1	; 0x01
    9474:	fa 81       	ldd	r31, Y+2	; 0x02
    9476:	01 90       	ld	r0, Z+
    9478:	f0 81       	ld	r31, Z
    947a:	e0 2d       	mov	r30, r0
    947c:	22 81       	ldd	r18, Z+2	; 0x02
    947e:	33 81       	ldd	r19, Z+3	; 0x03
    9480:	ce 01       	movw	r24, r28
    9482:	05 96       	adiw	r24, 0x05	; 5
    9484:	02 96       	adiw	r24, 0x02	; 2
    9486:	82 17       	cp	r24, r18
    9488:	93 07       	cpc	r25, r19
    948a:	50 f4       	brcc	.+20     	; 0x94a0 <vdm_gc+0x140>
					(((void *)&current) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&current + 1))) ||
					(((void *)&tmp_loc) <= ((void *)current->loc->ref_from) && ((void *)current->loc->ref_from) <= ((void *)(&tmp_loc + 1)))))
				*(current->loc->ref_from) = NULL;
    948c:	e9 81       	ldd	r30, Y+1	; 0x01
    948e:	fa 81       	ldd	r31, Y+2	; 0x02
    9490:	01 90       	ld	r0, Z+
    9492:	f0 81       	ld	r31, Z
    9494:	e0 2d       	mov	r30, r0
    9496:	02 80       	ldd	r0, Z+2	; 0x02
    9498:	f3 81       	ldd	r31, Z+3	; 0x03
    949a:	e0 2d       	mov	r30, r0
    949c:	11 82       	std	Z+1, r1	; 0x01
    949e:	10 82       	st	Z, r1


			vdmFree_GCInternal(current->loc);
    94a0:	e9 81       	ldd	r30, Y+1	; 0x01
    94a2:	fa 81       	ldd	r31, Y+2	; 0x02
    94a4:	80 81       	ld	r24, Z
    94a6:	91 81       	ldd	r25, Z+1	; 0x01
    94a8:	0e 94 9e 2b 	call	0x573c	; 0x573c <vdmFree_GCInternal>
			remove_allocd_mem_node(current);
    94ac:	89 81       	ldd	r24, Y+1	; 0x01
    94ae:	9a 81       	ldd	r25, Y+2	; 0x02
    94b0:	0e 94 01 49 	call	0x9202	; 0x9202 <remove_allocd_mem_node>
		}
		current = tmp;
    94b4:	8b 81       	ldd	r24, Y+3	; 0x03
    94b6:	9c 81       	ldd	r25, Y+4	; 0x04
    94b8:	9a 83       	std	Y+2, r25	; 0x02
    94ba:	89 83       	std	Y+1, r24	; 0x01

	/* Nothing to do if no memory currently allocated.  */
	if(current->loc == NULL && current->next == NULL)
		return;

	while(current != allocd_mem_tail)
    94bc:	29 81       	ldd	r18, Y+1	; 0x01
    94be:	3a 81       	ldd	r19, Y+2	; 0x02
    94c0:	80 91 2c 03 	lds	r24, 0x032C
    94c4:	90 91 2d 03 	lds	r25, 0x032D
    94c8:	28 17       	cp	r18, r24
    94ca:	39 07       	cpc	r19, r25
    94cc:	09 f0       	breq	.+2      	; 0x94d0 <vdm_gc+0x170>
    94ce:	64 cf       	rjmp	.-312    	; 0x9398 <vdm_gc+0x38>
			vdmFree_GCInternal(current->loc);
			remove_allocd_mem_node(current);
		}
		current = tmp;
	}
}
    94d0:	26 96       	adiw	r28, 0x06	; 6
    94d2:	0f b6       	in	r0, 0x3f	; 63
    94d4:	f8 94       	cli
    94d6:	de bf       	out	0x3e, r29	; 62
    94d8:	0f be       	out	0x3f, r0	; 63
    94da:	cd bf       	out	0x3d, r28	; 61
    94dc:	cf 91       	pop	r28
    94de:	df 91       	pop	r29
    94e0:	08 95       	ret

000094e2 <newTypeValueGC>:

/* #ifdef WITH_GC  */
/* ===============  Garbage collected versions  ==============  */
TVP newTypeValueGC(vdmtype type, TypedValueType value, TVP *ref_from)
{
    94e2:	df 93       	push	r29
    94e4:	cf 93       	push	r28
    94e6:	cd b7       	in	r28, 0x3d	; 61
    94e8:	de b7       	in	r29, 0x3e	; 62
    94ea:	2a 97       	sbiw	r28, 0x0a	; 10
    94ec:	0f b6       	in	r0, 0x3f	; 63
    94ee:	f8 94       	cli
    94f0:	de bf       	out	0x3e, r29	; 62
    94f2:	0f be       	out	0x3f, r0	; 63
    94f4:	cd bf       	out	0x3d, r28	; 61
    94f6:	9c 83       	std	Y+4, r25	; 0x04
    94f8:	8b 83       	std	Y+3, r24	; 0x03
    94fa:	4d 83       	std	Y+5, r20	; 0x05
    94fc:	5e 83       	std	Y+6, r21	; 0x06
    94fe:	6f 83       	std	Y+7, r22	; 0x07
    9500:	78 87       	std	Y+8, r23	; 0x08
    9502:	3a 87       	std	Y+10, r19	; 0x0a
    9504:	29 87       	std	Y+9, r18	; 0x09
	TVP ptr = (TVP) malloc(sizeof(struct TypedValue));
    9506:	88 e0       	ldi	r24, 0x08	; 8
    9508:	90 e0       	ldi	r25, 0x00	; 0
    950a:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    950e:	9a 83       	std	Y+2, r25	; 0x02
    9510:	89 83       	std	Y+1, r24	; 0x01
	assert(ptr != NULL);
    9512:	89 81       	ldd	r24, Y+1	; 0x01
    9514:	9a 81       	ldd	r25, Y+2	; 0x02
    9516:	00 97       	sbiw	r24, 0x00	; 0
    9518:	11 f4       	brne	.+4      	; 0x951e <newTypeValueGC+0x3c>
    951a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ptr->type = type;
    951e:	e9 81       	ldd	r30, Y+1	; 0x01
    9520:	fa 81       	ldd	r31, Y+2	; 0x02
    9522:	8b 81       	ldd	r24, Y+3	; 0x03
    9524:	9c 81       	ldd	r25, Y+4	; 0x04
    9526:	91 83       	std	Z+1, r25	; 0x01
    9528:	80 83       	st	Z, r24
	ptr->value = value;
    952a:	e9 81       	ldd	r30, Y+1	; 0x01
    952c:	fa 81       	ldd	r31, Y+2	; 0x02
    952e:	8d 81       	ldd	r24, Y+5	; 0x05
    9530:	9e 81       	ldd	r25, Y+6	; 0x06
    9532:	af 81       	ldd	r26, Y+7	; 0x07
    9534:	b8 85       	ldd	r27, Y+8	; 0x08
    9536:	84 83       	std	Z+4, r24	; 0x04
    9538:	95 83       	std	Z+5, r25	; 0x05
    953a:	a6 83       	std	Z+6, r26	; 0x06
    953c:	b7 83       	std	Z+7, r27	; 0x07
	add_allocd_mem_node(ptr, ref_from);
    953e:	89 81       	ldd	r24, Y+1	; 0x01
    9540:	9a 81       	ldd	r25, Y+2	; 0x02
    9542:	29 85       	ldd	r18, Y+9	; 0x09
    9544:	3a 85       	ldd	r19, Y+10	; 0x0a
    9546:	b9 01       	movw	r22, r18
    9548:	0e 94 3e 48 	call	0x907c	; 0x907c <add_allocd_mem_node>

	return ptr;
    954c:	89 81       	ldd	r24, Y+1	; 0x01
    954e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9550:	2a 96       	adiw	r28, 0x0a	; 10
    9552:	0f b6       	in	r0, 0x3f	; 63
    9554:	f8 94       	cli
    9556:	de bf       	out	0x3e, r29	; 62
    9558:	0f be       	out	0x3f, r0	; 63
    955a:	cd bf       	out	0x3d, r28	; 61
    955c:	cf 91       	pop	r28
    955e:	df 91       	pop	r29
    9560:	08 95       	ret

00009562 <newIntGC>:

/* / Basic  */
TVP newIntGC(int x, TVP *from)
{
    9562:	df 93       	push	r29
    9564:	cf 93       	push	r28
    9566:	cd b7       	in	r28, 0x3d	; 61
    9568:	de b7       	in	r29, 0x3e	; 62
    956a:	28 97       	sbiw	r28, 0x08	; 8
    956c:	0f b6       	in	r0, 0x3f	; 63
    956e:	f8 94       	cli
    9570:	de bf       	out	0x3e, r29	; 62
    9572:	0f be       	out	0x3f, r0	; 63
    9574:	cd bf       	out	0x3d, r28	; 61
    9576:	9e 83       	std	Y+6, r25	; 0x06
    9578:	8d 83       	std	Y+5, r24	; 0x05
    957a:	78 87       	std	Y+8, r23	; 0x08
    957c:	6f 83       	std	Y+7, r22	; 0x07
	return newTypeValueGC(VDM_INT, (TypedValueType
	)
			{ .intVal = x }, from);
    957e:	19 82       	std	Y+1, r1	; 0x01
    9580:	1a 82       	std	Y+2, r1	; 0x02
    9582:	1b 82       	std	Y+3, r1	; 0x03
    9584:	1c 82       	std	Y+4, r1	; 0x04
    9586:	8d 81       	ldd	r24, Y+5	; 0x05
    9588:	9e 81       	ldd	r25, Y+6	; 0x06
    958a:	9a 83       	std	Y+2, r25	; 0x02
    958c:	89 83       	std	Y+1, r24	; 0x01
}

/* / Basic  */
TVP newIntGC(int x, TVP *from)
{
	return newTypeValueGC(VDM_INT, (TypedValueType
    958e:	29 81       	ldd	r18, Y+1	; 0x01
    9590:	3a 81       	ldd	r19, Y+2	; 0x02
    9592:	4b 81       	ldd	r20, Y+3	; 0x03
    9594:	5c 81       	ldd	r21, Y+4	; 0x04
    9596:	ef 81       	ldd	r30, Y+7	; 0x07
    9598:	f8 85       	ldd	r31, Y+8	; 0x08
    959a:	80 e0       	ldi	r24, 0x00	; 0
    959c:	90 e0       	ldi	r25, 0x00	; 0
    959e:	ba 01       	movw	r22, r20
    95a0:	a9 01       	movw	r20, r18
    95a2:	9f 01       	movw	r18, r30
    95a4:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .intVal = x }, from);
}
    95a8:	28 96       	adiw	r28, 0x08	; 8
    95aa:	0f b6       	in	r0, 0x3f	; 63
    95ac:	f8 94       	cli
    95ae:	de bf       	out	0x3e, r29	; 62
    95b0:	0f be       	out	0x3f, r0	; 63
    95b2:	cd bf       	out	0x3d, r28	; 61
    95b4:	cf 91       	pop	r28
    95b6:	df 91       	pop	r29
    95b8:	08 95       	ret

000095ba <newBoolGC>:

TVP newBoolGC(bool x, TVP *from)
{
    95ba:	df 93       	push	r29
    95bc:	cf 93       	push	r28
    95be:	cd b7       	in	r28, 0x3d	; 61
    95c0:	de b7       	in	r29, 0x3e	; 62
    95c2:	27 97       	sbiw	r28, 0x07	; 7
    95c4:	0f b6       	in	r0, 0x3f	; 63
    95c6:	f8 94       	cli
    95c8:	de bf       	out	0x3e, r29	; 62
    95ca:	0f be       	out	0x3f, r0	; 63
    95cc:	cd bf       	out	0x3d, r28	; 61
    95ce:	8d 83       	std	Y+5, r24	; 0x05
    95d0:	7f 83       	std	Y+7, r23	; 0x07
    95d2:	6e 83       	std	Y+6, r22	; 0x06
	return newTypeValueGC(VDM_BOOL, (TypedValueType
	)
			{ .boolVal = x }, from);
    95d4:	19 82       	std	Y+1, r1	; 0x01
    95d6:	1a 82       	std	Y+2, r1	; 0x02
    95d8:	1b 82       	std	Y+3, r1	; 0x03
    95da:	1c 82       	std	Y+4, r1	; 0x04
    95dc:	8d 81       	ldd	r24, Y+5	; 0x05
    95de:	89 83       	std	Y+1, r24	; 0x01
			{ .intVal = x }, from);
}

TVP newBoolGC(bool x, TVP *from)
{
	return newTypeValueGC(VDM_BOOL, (TypedValueType
    95e0:	29 81       	ldd	r18, Y+1	; 0x01
    95e2:	3a 81       	ldd	r19, Y+2	; 0x02
    95e4:	4b 81       	ldd	r20, Y+3	; 0x03
    95e6:	5c 81       	ldd	r21, Y+4	; 0x04
    95e8:	ee 81       	ldd	r30, Y+6	; 0x06
    95ea:	ff 81       	ldd	r31, Y+7	; 0x07
    95ec:	83 e0       	ldi	r24, 0x03	; 3
    95ee:	90 e0       	ldi	r25, 0x00	; 0
    95f0:	ba 01       	movw	r22, r20
    95f2:	a9 01       	movw	r20, r18
    95f4:	9f 01       	movw	r18, r30
    95f6:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .boolVal = x }, from);
}
    95fa:	27 96       	adiw	r28, 0x07	; 7
    95fc:	0f b6       	in	r0, 0x3f	; 63
    95fe:	f8 94       	cli
    9600:	de bf       	out	0x3e, r29	; 62
    9602:	0f be       	out	0x3f, r0	; 63
    9604:	cd bf       	out	0x3d, r28	; 61
    9606:	cf 91       	pop	r28
    9608:	df 91       	pop	r29
    960a:	08 95       	ret

0000960c <newRealGC>:

TVP newRealGC(double x, TVP *from)
{
    960c:	df 93       	push	r29
    960e:	cf 93       	push	r28
    9610:	cd b7       	in	r28, 0x3d	; 61
    9612:	de b7       	in	r29, 0x3e	; 62
    9614:	2a 97       	sbiw	r28, 0x0a	; 10
    9616:	0f b6       	in	r0, 0x3f	; 63
    9618:	f8 94       	cli
    961a:	de bf       	out	0x3e, r29	; 62
    961c:	0f be       	out	0x3f, r0	; 63
    961e:	cd bf       	out	0x3d, r28	; 61
    9620:	6d 83       	std	Y+5, r22	; 0x05
    9622:	7e 83       	std	Y+6, r23	; 0x06
    9624:	8f 83       	std	Y+7, r24	; 0x07
    9626:	98 87       	std	Y+8, r25	; 0x08
    9628:	5a 87       	std	Y+10, r21	; 0x0a
    962a:	49 87       	std	Y+9, r20	; 0x09
	return newTypeValueGC(VDM_REAL, (TypedValueType
	)
			{ .doubleVal = x }, from);
    962c:	19 82       	std	Y+1, r1	; 0x01
    962e:	1a 82       	std	Y+2, r1	; 0x02
    9630:	1b 82       	std	Y+3, r1	; 0x03
    9632:	1c 82       	std	Y+4, r1	; 0x04
    9634:	8d 81       	ldd	r24, Y+5	; 0x05
    9636:	9e 81       	ldd	r25, Y+6	; 0x06
    9638:	af 81       	ldd	r26, Y+7	; 0x07
    963a:	b8 85       	ldd	r27, Y+8	; 0x08
    963c:	89 83       	std	Y+1, r24	; 0x01
    963e:	9a 83       	std	Y+2, r25	; 0x02
    9640:	ab 83       	std	Y+3, r26	; 0x03
    9642:	bc 83       	std	Y+4, r27	; 0x04
			{ .boolVal = x }, from);
}

TVP newRealGC(double x, TVP *from)
{
	return newTypeValueGC(VDM_REAL, (TypedValueType
    9644:	29 81       	ldd	r18, Y+1	; 0x01
    9646:	3a 81       	ldd	r19, Y+2	; 0x02
    9648:	4b 81       	ldd	r20, Y+3	; 0x03
    964a:	5c 81       	ldd	r21, Y+4	; 0x04
    964c:	e9 85       	ldd	r30, Y+9	; 0x09
    964e:	fa 85       	ldd	r31, Y+10	; 0x0a
    9650:	84 e0       	ldi	r24, 0x04	; 4
    9652:	90 e0       	ldi	r25, 0x00	; 0
    9654:	ba 01       	movw	r22, r20
    9656:	a9 01       	movw	r20, r18
    9658:	9f 01       	movw	r18, r30
    965a:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .doubleVal = x }, from);
}
    965e:	2a 96       	adiw	r28, 0x0a	; 10
    9660:	0f b6       	in	r0, 0x3f	; 63
    9662:	f8 94       	cli
    9664:	de bf       	out	0x3e, r29	; 62
    9666:	0f be       	out	0x3f, r0	; 63
    9668:	cd bf       	out	0x3d, r28	; 61
    966a:	cf 91       	pop	r28
    966c:	df 91       	pop	r29
    966e:	08 95       	ret

00009670 <newCharGC>:

TVP newCharGC(char x, TVP *from)
{
    9670:	df 93       	push	r29
    9672:	cf 93       	push	r28
    9674:	cd b7       	in	r28, 0x3d	; 61
    9676:	de b7       	in	r29, 0x3e	; 62
    9678:	27 97       	sbiw	r28, 0x07	; 7
    967a:	0f b6       	in	r0, 0x3f	; 63
    967c:	f8 94       	cli
    967e:	de bf       	out	0x3e, r29	; 62
    9680:	0f be       	out	0x3f, r0	; 63
    9682:	cd bf       	out	0x3d, r28	; 61
    9684:	8d 83       	std	Y+5, r24	; 0x05
    9686:	7f 83       	std	Y+7, r23	; 0x07
    9688:	6e 83       	std	Y+6, r22	; 0x06
	return newTypeValueGC(VDM_CHAR, (TypedValueType
	)
			{ .charVal = x }, from);
    968a:	19 82       	std	Y+1, r1	; 0x01
    968c:	1a 82       	std	Y+2, r1	; 0x02
    968e:	1b 82       	std	Y+3, r1	; 0x03
    9690:	1c 82       	std	Y+4, r1	; 0x04
    9692:	8d 81       	ldd	r24, Y+5	; 0x05
    9694:	89 83       	std	Y+1, r24	; 0x01
			{ .doubleVal = x }, from);
}

TVP newCharGC(char x, TVP *from)
{
	return newTypeValueGC(VDM_CHAR, (TypedValueType
    9696:	29 81       	ldd	r18, Y+1	; 0x01
    9698:	3a 81       	ldd	r19, Y+2	; 0x02
    969a:	4b 81       	ldd	r20, Y+3	; 0x03
    969c:	5c 81       	ldd	r21, Y+4	; 0x04
    969e:	ee 81       	ldd	r30, Y+6	; 0x06
    96a0:	ff 81       	ldd	r31, Y+7	; 0x07
    96a2:	86 e0       	ldi	r24, 0x06	; 6
    96a4:	90 e0       	ldi	r25, 0x00	; 0
    96a6:	ba 01       	movw	r22, r20
    96a8:	a9 01       	movw	r20, r18
    96aa:	9f 01       	movw	r18, r30
    96ac:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .charVal = x }, from);
}
    96b0:	27 96       	adiw	r28, 0x07	; 7
    96b2:	0f b6       	in	r0, 0x3f	; 63
    96b4:	f8 94       	cli
    96b6:	de bf       	out	0x3e, r29	; 62
    96b8:	0f be       	out	0x3f, r0	; 63
    96ba:	cd bf       	out	0x3d, r28	; 61
    96bc:	cf 91       	pop	r28
    96be:	df 91       	pop	r29
    96c0:	08 95       	ret

000096c2 <newQuoteGC>:

TVP newQuoteGC(unsigned int x, TVP *from)
{
    96c2:	df 93       	push	r29
    96c4:	cf 93       	push	r28
    96c6:	cd b7       	in	r28, 0x3d	; 61
    96c8:	de b7       	in	r29, 0x3e	; 62
    96ca:	28 97       	sbiw	r28, 0x08	; 8
    96cc:	0f b6       	in	r0, 0x3f	; 63
    96ce:	f8 94       	cli
    96d0:	de bf       	out	0x3e, r29	; 62
    96d2:	0f be       	out	0x3f, r0	; 63
    96d4:	cd bf       	out	0x3d, r28	; 61
    96d6:	9e 83       	std	Y+6, r25	; 0x06
    96d8:	8d 83       	std	Y+5, r24	; 0x05
    96da:	78 87       	std	Y+8, r23	; 0x08
    96dc:	6f 83       	std	Y+7, r22	; 0x07
	return newTypeValueGC(VDM_QUOTE, (TypedValueType
	)
			{ .quoteVal = x }, from);
    96de:	19 82       	std	Y+1, r1	; 0x01
    96e0:	1a 82       	std	Y+2, r1	; 0x02
    96e2:	1b 82       	std	Y+3, r1	; 0x03
    96e4:	1c 82       	std	Y+4, r1	; 0x04
    96e6:	8d 81       	ldd	r24, Y+5	; 0x05
    96e8:	9e 81       	ldd	r25, Y+6	; 0x06
    96ea:	9a 83       	std	Y+2, r25	; 0x02
    96ec:	89 83       	std	Y+1, r24	; 0x01
			{ .charVal = x }, from);
}

TVP newQuoteGC(unsigned int x, TVP *from)
{
	return newTypeValueGC(VDM_QUOTE, (TypedValueType
    96ee:	29 81       	ldd	r18, Y+1	; 0x01
    96f0:	3a 81       	ldd	r19, Y+2	; 0x02
    96f2:	4b 81       	ldd	r20, Y+3	; 0x03
    96f4:	5c 81       	ldd	r21, Y+4	; 0x04
    96f6:	ef 81       	ldd	r30, Y+7	; 0x07
    96f8:	f8 85       	ldd	r31, Y+8	; 0x08
    96fa:	89 e0       	ldi	r24, 0x09	; 9
    96fc:	90 e0       	ldi	r25, 0x00	; 0
    96fe:	ba 01       	movw	r22, r20
    9700:	a9 01       	movw	r20, r18
    9702:	9f 01       	movw	r18, r30
    9704:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .quoteVal = x }, from);
}
    9708:	28 96       	adiw	r28, 0x08	; 8
    970a:	0f b6       	in	r0, 0x3f	; 63
    970c:	f8 94       	cli
    970e:	de bf       	out	0x3e, r29	; 62
    9710:	0f be       	out	0x3f, r0	; 63
    9712:	cd bf       	out	0x3d, r28	; 61
    9714:	cf 91       	pop	r28
    9716:	df 91       	pop	r29
    9718:	08 95       	ret

0000971a <newTokenGC>:

TVP newTokenGC(TVP x, TVP *from)
{
    971a:	df 93       	push	r29
    971c:	cf 93       	push	r28
    971e:	cd b7       	in	r28, 0x3d	; 61
    9720:	de b7       	in	r29, 0x3e	; 62
    9722:	61 97       	sbiw	r28, 0x11	; 17
    9724:	0f b6       	in	r0, 0x3f	; 63
    9726:	f8 94       	cli
    9728:	de bf       	out	0x3e, r29	; 62
    972a:	0f be       	out	0x3f, r0	; 63
    972c:	cd bf       	out	0x3d, r28	; 61
    972e:	9e 87       	std	Y+14, r25	; 0x0e
    9730:	8d 87       	std	Y+13, r24	; 0x0d
    9732:	78 8b       	std	Y+16, r23	; 0x10
    9734:	6f 87       	std	Y+15, r22	; 0x0f
	char *str = unpackString(x);
    9736:	8d 85       	ldd	r24, Y+13	; 0x0d
    9738:	9e 85       	ldd	r25, Y+14	; 0x0e
    973a:	0e 94 08 69 	call	0xd210	; 0xd210 <unpackString>
    973e:	98 87       	std	Y+8, r25	; 0x08
    9740:	8f 83       	std	Y+7, r24	; 0x07
	char *strTmp = str;
    9742:	8f 81       	ldd	r24, Y+7	; 0x07
    9744:	98 85       	ldd	r25, Y+8	; 0x08
    9746:	9e 83       	std	Y+6, r25	; 0x06
    9748:	8d 83       	std	Y+5, r24	; 0x05
	int hashVal = 5381;
    974a:	85 e0       	ldi	r24, 0x05	; 5
    974c:	95 e1       	ldi	r25, 0x15	; 21
    974e:	9c 83       	std	Y+4, r25	; 0x04
    9750:	8b 83       	std	Y+3, r24	; 0x03
    9752:	11 c0       	rjmp	.+34     	; 0x9776 <newTokenGC+0x5c>
	int c;

	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;
    9754:	8b 81       	ldd	r24, Y+3	; 0x03
    9756:	9c 81       	ldd	r25, Y+4	; 0x04
    9758:	9c 01       	movw	r18, r24
    975a:	22 0f       	add	r18, r18
    975c:	33 1f       	adc	r19, r19
    975e:	22 0f       	add	r18, r18
    9760:	33 1f       	adc	r19, r19
    9762:	8b 81       	ldd	r24, Y+3	; 0x03
    9764:	9c 81       	ldd	r25, Y+4	; 0x04
    9766:	28 0f       	add	r18, r24
    9768:	39 1f       	adc	r19, r25
    976a:	89 81       	ldd	r24, Y+1	; 0x01
    976c:	9a 81       	ldd	r25, Y+2	; 0x02
    976e:	82 0f       	add	r24, r18
    9770:	93 1f       	adc	r25, r19
    9772:	9c 83       	std	Y+4, r25	; 0x04
    9774:	8b 83       	std	Y+3, r24	; 0x03
	char *str = unpackString(x);
	char *strTmp = str;
	int hashVal = 5381;
	int c;

	while ((c = *str++))
    9776:	ef 81       	ldd	r30, Y+7	; 0x07
    9778:	f8 85       	ldd	r31, Y+8	; 0x08
    977a:	80 81       	ld	r24, Z
    977c:	99 27       	eor	r25, r25
    977e:	87 fd       	sbrc	r24, 7
    9780:	90 95       	com	r25
    9782:	9a 83       	std	Y+2, r25	; 0x02
    9784:	89 83       	std	Y+1, r24	; 0x01
    9786:	19 8a       	std	Y+17, r1	; 0x11
    9788:	89 81       	ldd	r24, Y+1	; 0x01
    978a:	9a 81       	ldd	r25, Y+2	; 0x02
    978c:	00 97       	sbiw	r24, 0x00	; 0
    978e:	11 f0       	breq	.+4      	; 0x9794 <newTokenGC+0x7a>
    9790:	81 e0       	ldi	r24, 0x01	; 1
    9792:	89 8b       	std	Y+17, r24	; 0x11
    9794:	8f 81       	ldd	r24, Y+7	; 0x07
    9796:	98 85       	ldd	r25, Y+8	; 0x08
    9798:	01 96       	adiw	r24, 0x01	; 1
    979a:	98 87       	std	Y+8, r25	; 0x08
    979c:	8f 83       	std	Y+7, r24	; 0x07
    979e:	89 89       	ldd	r24, Y+17	; 0x11
    97a0:	88 23       	and	r24, r24
    97a2:	c1 f6       	brne	.-80     	; 0x9754 <newTokenGC+0x3a>
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);
    97a4:	8d 81       	ldd	r24, Y+5	; 0x05
    97a6:	9e 81       	ldd	r25, Y+6	; 0x06
    97a8:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>

	return newTypeValueGC(VDM_TOKEN, (TypedValueType
	)
			{ .intVal = hashVal }, from);
    97ac:	19 86       	std	Y+9, r1	; 0x09
    97ae:	1a 86       	std	Y+10, r1	; 0x0a
    97b0:	1b 86       	std	Y+11, r1	; 0x0b
    97b2:	1c 86       	std	Y+12, r1	; 0x0c
    97b4:	8b 81       	ldd	r24, Y+3	; 0x03
    97b6:	9c 81       	ldd	r25, Y+4	; 0x04
    97b8:	9a 87       	std	Y+10, r25	; 0x0a
    97ba:	89 87       	std	Y+9, r24	; 0x09
	while ((c = *str++))
		hashVal = ((hashVal << 2) + hashVal) + c;

	free(strTmp);

	return newTypeValueGC(VDM_TOKEN, (TypedValueType
    97bc:	29 85       	ldd	r18, Y+9	; 0x09
    97be:	3a 85       	ldd	r19, Y+10	; 0x0a
    97c0:	4b 85       	ldd	r20, Y+11	; 0x0b
    97c2:	5c 85       	ldd	r21, Y+12	; 0x0c
    97c4:	ef 85       	ldd	r30, Y+15	; 0x0f
    97c6:	f8 89       	ldd	r31, Y+16	; 0x10
    97c8:	8a e0       	ldi	r24, 0x0A	; 10
    97ca:	90 e0       	ldi	r25, 0x00	; 0
    97cc:	ba 01       	movw	r22, r20
    97ce:	a9 01       	movw	r20, r18
    97d0:	9f 01       	movw	r18, r30
    97d2:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
	)
			{ .intVal = hashVal }, from);
}
    97d6:	61 96       	adiw	r28, 0x11	; 17
    97d8:	0f b6       	in	r0, 0x3f	; 63
    97da:	f8 94       	cli
    97dc:	de bf       	out	0x3e, r29	; 62
    97de:	0f be       	out	0x3f, r0	; 63
    97e0:	cd bf       	out	0x3d, r28	; 61
    97e2:	cf 91       	pop	r28
    97e4:	df 91       	pop	r29
    97e6:	08 95       	ret

000097e8 <vdmCloneGC>:

TVP vdmCloneGC(TVP x, TVP *from)
{
    97e8:	0f 93       	push	r16
    97ea:	1f 93       	push	r17
    97ec:	df 93       	push	r29
    97ee:	cf 93       	push	r28
    97f0:	cd b7       	in	r28, 0x3d	; 61
    97f2:	de b7       	in	r29, 0x3e	; 62
    97f4:	68 97       	sbiw	r28, 0x18	; 24
    97f6:	0f b6       	in	r0, 0x3f	; 63
    97f8:	f8 94       	cli
    97fa:	de bf       	out	0x3e, r29	; 62
    97fc:	0f be       	out	0x3f, r0	; 63
    97fe:	cd bf       	out	0x3d, r28	; 61
    9800:	9a 8b       	std	Y+18, r25	; 0x12
    9802:	89 8b       	std	Y+17, r24	; 0x11
    9804:	7c 8b       	std	Y+20, r23	; 0x14
    9806:	6b 8b       	std	Y+19, r22	; 0x13
	TVP tmp;

	if(x == NULL)
    9808:	89 89       	ldd	r24, Y+17	; 0x11
    980a:	9a 89       	ldd	r25, Y+18	; 0x12
    980c:	00 97       	sbiw	r24, 0x00	; 0
    980e:	19 f4       	brne	.+6      	; 0x9816 <vdmCloneGC+0x2e>
	{
		return NULL;
    9810:	18 8e       	std	Y+24, r1	; 0x18
    9812:	1f 8a       	std	Y+23, r1	; 0x17
    9814:	25 c1       	rjmp	.+586    	; 0x9a60 <vdmCloneGC+0x278>
	}

	tmp = newTypeValueGC(x->type, x->value, from);
    9816:	e9 89       	ldd	r30, Y+17	; 0x11
    9818:	fa 89       	ldd	r31, Y+18	; 0x12
    981a:	80 81       	ld	r24, Z
    981c:	91 81       	ldd	r25, Z+1	; 0x01
    981e:	e9 89       	ldd	r30, Y+17	; 0x11
    9820:	fa 89       	ldd	r31, Y+18	; 0x12
    9822:	24 81       	ldd	r18, Z+4	; 0x04
    9824:	35 81       	ldd	r19, Z+5	; 0x05
    9826:	46 81       	ldd	r20, Z+6	; 0x06
    9828:	57 81       	ldd	r21, Z+7	; 0x07
    982a:	eb 89       	ldd	r30, Y+19	; 0x13
    982c:	fc 89       	ldd	r31, Y+20	; 0x14
    982e:	ba 01       	movw	r22, r20
    9830:	a9 01       	movw	r20, r18
    9832:	9f 01       	movw	r18, r30
    9834:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <newTypeValueGC>
    9838:	98 8b       	std	Y+16, r25	; 0x10
    983a:	8f 87       	std	Y+15, r24	; 0x0f

	/* FIXME vdmClone any pointers  */
	switch (tmp->type)
    983c:	ef 85       	ldd	r30, Y+15	; 0x0f
    983e:	f8 89       	ldd	r31, Y+16	; 0x10
    9840:	80 81       	ld	r24, Z
    9842:	91 81       	ldd	r25, Z+1	; 0x01
    9844:	9e 8b       	std	Y+22, r25	; 0x16
    9846:	8d 8b       	std	Y+21, r24	; 0x15
    9848:	ed 89       	ldd	r30, Y+21	; 0x15
    984a:	fe 89       	ldd	r31, Y+22	; 0x16
    984c:	e8 30       	cpi	r30, 0x08	; 8
    984e:	f1 05       	cpc	r31, r1
    9850:	c9 f0       	breq	.+50     	; 0x9884 <vdmCloneGC+0x9c>
    9852:	8d 89       	ldd	r24, Y+21	; 0x15
    9854:	9e 89       	ldd	r25, Y+22	; 0x16
    9856:	89 30       	cpi	r24, 0x09	; 9
    9858:	91 05       	cpc	r25, r1
    985a:	38 f4       	brcc	.+14     	; 0x986a <vdmCloneGC+0x82>
    985c:	ed 89       	ldd	r30, Y+21	; 0x15
    985e:	fe 89       	ldd	r31, Y+22	; 0x16
    9860:	e7 30       	cpi	r30, 0x07	; 7
    9862:	f1 05       	cpc	r31, r1
    9864:	08 f4       	brcc	.+2      	; 0x9868 <vdmCloneGC+0x80>
    9866:	f8 c0       	rjmp	.+496    	; 0x9a58 <vdmCloneGC+0x270>
    9868:	74 c0       	rjmp	.+232    	; 0x9952 <vdmCloneGC+0x16a>
    986a:	8d 89       	ldd	r24, Y+21	; 0x15
    986c:	9e 89       	ldd	r25, Y+22	; 0x16
    986e:	8b 30       	cpi	r24, 0x0B	; 11
    9870:	91 05       	cpc	r25, r1
    9872:	08 f4       	brcc	.+2      	; 0x9876 <vdmCloneGC+0x8e>
    9874:	f1 c0       	rjmp	.+482    	; 0x9a58 <vdmCloneGC+0x270>
    9876:	ed 89       	ldd	r30, Y+21	; 0x15
    9878:	fe 89       	ldd	r31, Y+22	; 0x16
    987a:	eb 30       	cpi	r30, 0x0B	; 11
    987c:	f1 05       	cpc	r31, r1
    987e:	09 f4       	brne	.+2      	; 0x9882 <vdmCloneGC+0x9a>
    9880:	cf c0       	rjmp	.+414    	; 0x9a20 <vdmCloneGC+0x238>
    9882:	ea c0       	rjmp	.+468    	; 0x9a58 <vdmCloneGC+0x270>
#ifndef NO_SEQS
	case VDM_SEQ:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    9884:	ef 85       	ldd	r30, Y+15	; 0x0f
    9886:	f8 89       	ldd	r31, Y+16	; 0x10
    9888:	84 81       	ldd	r24, Z+4	; 0x04
    988a:	95 81       	ldd	r25, Z+5	; 0x05
    988c:	9c 87       	std	Y+12, r25	; 0x0c
    988e:	8b 87       	std	Y+11, r24	; 0x0b

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    9890:	84 e0       	ldi	r24, 0x04	; 4
    9892:	90 e0       	ldi	r25, 0x00	; 0
    9894:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    9898:	9a 87       	std	Y+10, r25	; 0x0a
    989a:	89 87       	std	Y+9, r24	; 0x09
		assert(ptr != NULL);
    989c:	89 85       	ldd	r24, Y+9	; 0x09
    989e:	9a 85       	ldd	r25, Y+10	; 0x0a
    98a0:	00 97       	sbiw	r24, 0x00	; 0
    98a2:	11 f4       	brne	.+4      	; 0x98a8 <vdmCloneGC+0xc0>
    98a4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    98a8:	eb 85       	ldd	r30, Y+11	; 0x0b
    98aa:	fc 85       	ldd	r31, Y+12	; 0x0c
    98ac:	80 81       	ld	r24, Z
    98ae:	91 81       	ldd	r25, Z+1	; 0x01
    98b0:	a2 81       	ldd	r26, Z+2	; 0x02
    98b2:	b3 81       	ldd	r27, Z+3	; 0x03
    98b4:	e9 85       	ldd	r30, Y+9	; 0x09
    98b6:	fa 85       	ldd	r31, Y+10	; 0x0a
    98b8:	80 83       	st	Z, r24
    98ba:	91 83       	std	Z+1, r25	; 0x01
    98bc:	a2 83       	std	Z+2, r26	; 0x02
    98be:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    98c0:	e9 85       	ldd	r30, Y+9	; 0x09
    98c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    98c4:	82 81       	ldd	r24, Z+2	; 0x02
    98c6:	93 81       	ldd	r25, Z+3	; 0x03
    98c8:	88 0f       	add	r24, r24
    98ca:	99 1f       	adc	r25, r25
    98cc:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    98d0:	e9 85       	ldd	r30, Y+9	; 0x09
    98d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    98d4:	91 83       	std	Z+1, r25	; 0x01
    98d6:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    98d8:	e9 85       	ldd	r30, Y+9	; 0x09
    98da:	fa 85       	ldd	r31, Y+10	; 0x0a
    98dc:	80 81       	ld	r24, Z
    98de:	91 81       	ldd	r25, Z+1	; 0x01
    98e0:	00 97       	sbiw	r24, 0x00	; 0
    98e2:	11 f4       	brne	.+4      	; 0x98e8 <vdmCloneGC+0x100>
    98e4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		for (i = 0; i < cptr->size; i++)
    98e8:	1e 86       	std	Y+14, r1	; 0x0e
    98ea:	1d 86       	std	Y+13, r1	; 0x0d
    98ec:	22 c0       	rjmp	.+68     	; 0x9932 <vdmCloneGC+0x14a>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    98ee:	e9 85       	ldd	r30, Y+9	; 0x09
    98f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    98f2:	20 81       	ld	r18, Z
    98f4:	31 81       	ldd	r19, Z+1	; 0x01
    98f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    98f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    98fa:	88 0f       	add	r24, r24
    98fc:	99 1f       	adc	r25, r25
    98fe:	89 01       	movw	r16, r18
    9900:	08 0f       	add	r16, r24
    9902:	19 1f       	adc	r17, r25
    9904:	eb 85       	ldd	r30, Y+11	; 0x0b
    9906:	fc 85       	ldd	r31, Y+12	; 0x0c
    9908:	20 81       	ld	r18, Z
    990a:	31 81       	ldd	r19, Z+1	; 0x01
    990c:	8d 85       	ldd	r24, Y+13	; 0x0d
    990e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9910:	88 0f       	add	r24, r24
    9912:	99 1f       	adc	r25, r25
    9914:	f9 01       	movw	r30, r18
    9916:	e8 0f       	add	r30, r24
    9918:	f9 1f       	adc	r31, r25
    991a:	80 81       	ld	r24, Z
    991c:	91 81       	ldd	r25, Z+1	; 0x01
    991e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    9922:	f8 01       	movw	r30, r16
    9924:	91 83       	std	Z+1, r25	; 0x01
    9926:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    9928:	8d 85       	ldd	r24, Y+13	; 0x0d
    992a:	9e 85       	ldd	r25, Y+14	; 0x0e
    992c:	01 96       	adiw	r24, 0x01	; 1
    992e:	9e 87       	std	Y+14, r25	; 0x0e
    9930:	8d 87       	std	Y+13, r24	; 0x0d
    9932:	eb 85       	ldd	r30, Y+11	; 0x0b
    9934:	fc 85       	ldd	r31, Y+12	; 0x0c
    9936:	22 81       	ldd	r18, Z+2	; 0x02
    9938:	33 81       	ldd	r19, Z+3	; 0x03
    993a:	8d 85       	ldd	r24, Y+13	; 0x0d
    993c:	9e 85       	ldd	r25, Y+14	; 0x0e
    993e:	82 17       	cp	r24, r18
    9940:	93 07       	cpc	r25, r19
    9942:	ac f2       	brlt	.-86     	; 0x98ee <vdmCloneGC+0x106>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    9944:	ef 85       	ldd	r30, Y+15	; 0x0f
    9946:	f8 89       	ldd	r31, Y+16	; 0x10
    9948:	89 85       	ldd	r24, Y+9	; 0x09
    994a:	9a 85       	ldd	r25, Y+10	; 0x0a
    994c:	95 83       	std	Z+5, r25	; 0x05
    994e:	84 83       	std	Z+4, r24	; 0x04
    9950:	83 c0       	rjmp	.+262    	; 0x9a58 <vdmCloneGC+0x270>
#ifndef NO_SETS
	case VDM_SET:
	{
		int i;

		UNWRAP_COLLECTION(cptr, tmp);
    9952:	ef 85       	ldd	r30, Y+15	; 0x0f
    9954:	f8 89       	ldd	r31, Y+16	; 0x10
    9956:	84 81       	ldd	r24, Z+4	; 0x04
    9958:	95 81       	ldd	r25, Z+5	; 0x05
    995a:	9e 83       	std	Y+6, r25	; 0x06
    995c:	8d 83       	std	Y+5, r24	; 0x05

		struct Collection* ptr = (struct Collection*) malloc(sizeof(struct Collection));
    995e:	84 e0       	ldi	r24, 0x04	; 4
    9960:	90 e0       	ldi	r25, 0x00	; 0
    9962:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    9966:	9c 83       	std	Y+4, r25	; 0x04
    9968:	8b 83       	std	Y+3, r24	; 0x03
		assert(ptr != NULL);
    996a:	8b 81       	ldd	r24, Y+3	; 0x03
    996c:	9c 81       	ldd	r25, Y+4	; 0x04
    996e:	00 97       	sbiw	r24, 0x00	; 0
    9970:	11 f4       	brne	.+4      	; 0x9976 <vdmCloneGC+0x18e>
    9972:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		/* copy (size)  */
		*ptr = *cptr;
    9976:	ed 81       	ldd	r30, Y+5	; 0x05
    9978:	fe 81       	ldd	r31, Y+6	; 0x06
    997a:	80 81       	ld	r24, Z
    997c:	91 81       	ldd	r25, Z+1	; 0x01
    997e:	a2 81       	ldd	r26, Z+2	; 0x02
    9980:	b3 81       	ldd	r27, Z+3	; 0x03
    9982:	eb 81       	ldd	r30, Y+3	; 0x03
    9984:	fc 81       	ldd	r31, Y+4	; 0x04
    9986:	80 83       	st	Z, r24
    9988:	91 83       	std	Z+1, r25	; 0x01
    998a:	a2 83       	std	Z+2, r26	; 0x02
    998c:	b3 83       	std	Z+3, r27	; 0x03
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
    998e:	eb 81       	ldd	r30, Y+3	; 0x03
    9990:	fc 81       	ldd	r31, Y+4	; 0x04
    9992:	82 81       	ldd	r24, Z+2	; 0x02
    9994:	93 81       	ldd	r25, Z+3	; 0x03
    9996:	88 0f       	add	r24, r24
    9998:	99 1f       	adc	r25, r25
    999a:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    999e:	eb 81       	ldd	r30, Y+3	; 0x03
    99a0:	fc 81       	ldd	r31, Y+4	; 0x04
    99a2:	91 83       	std	Z+1, r25	; 0x01
    99a4:	80 83       	st	Z, r24
		assert(ptr->value != NULL);
    99a6:	eb 81       	ldd	r30, Y+3	; 0x03
    99a8:	fc 81       	ldd	r31, Y+4	; 0x04
    99aa:	80 81       	ld	r24, Z
    99ac:	91 81       	ldd	r25, Z+1	; 0x01
    99ae:	00 97       	sbiw	r24, 0x00	; 0
    99b0:	11 f4       	brne	.+4      	; 0x99b6 <vdmCloneGC+0x1ce>
    99b2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

		for (i = 0; i < cptr->size; i++)
    99b6:	18 86       	std	Y+8, r1	; 0x08
    99b8:	1f 82       	std	Y+7, r1	; 0x07
    99ba:	22 c0       	rjmp	.+68     	; 0x9a00 <vdmCloneGC+0x218>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
    99bc:	eb 81       	ldd	r30, Y+3	; 0x03
    99be:	fc 81       	ldd	r31, Y+4	; 0x04
    99c0:	20 81       	ld	r18, Z
    99c2:	31 81       	ldd	r19, Z+1	; 0x01
    99c4:	8f 81       	ldd	r24, Y+7	; 0x07
    99c6:	98 85       	ldd	r25, Y+8	; 0x08
    99c8:	88 0f       	add	r24, r24
    99ca:	99 1f       	adc	r25, r25
    99cc:	89 01       	movw	r16, r18
    99ce:	08 0f       	add	r16, r24
    99d0:	19 1f       	adc	r17, r25
    99d2:	ed 81       	ldd	r30, Y+5	; 0x05
    99d4:	fe 81       	ldd	r31, Y+6	; 0x06
    99d6:	20 81       	ld	r18, Z
    99d8:	31 81       	ldd	r19, Z+1	; 0x01
    99da:	8f 81       	ldd	r24, Y+7	; 0x07
    99dc:	98 85       	ldd	r25, Y+8	; 0x08
    99de:	88 0f       	add	r24, r24
    99e0:	99 1f       	adc	r25, r25
    99e2:	f9 01       	movw	r30, r18
    99e4:	e8 0f       	add	r30, r24
    99e6:	f9 1f       	adc	r31, r25
    99e8:	80 81       	ld	r24, Z
    99ea:	91 81       	ldd	r25, Z+1	; 0x01
    99ec:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    99f0:	f8 01       	movw	r30, r16
    99f2:	91 83       	std	Z+1, r25	; 0x01
    99f4:	80 83       	st	Z, r24
		/* copy (size)  */
		*ptr = *cptr;
		ptr->value = (TVP*) malloc(sizeof(TVP) * ptr->size);
		assert(ptr->value != NULL);

		for (i = 0; i < cptr->size; i++)
    99f6:	8f 81       	ldd	r24, Y+7	; 0x07
    99f8:	98 85       	ldd	r25, Y+8	; 0x08
    99fa:	01 96       	adiw	r24, 0x01	; 1
    99fc:	98 87       	std	Y+8, r25	; 0x08
    99fe:	8f 83       	std	Y+7, r24	; 0x07
    9a00:	ed 81       	ldd	r30, Y+5	; 0x05
    9a02:	fe 81       	ldd	r31, Y+6	; 0x06
    9a04:	22 81       	ldd	r18, Z+2	; 0x02
    9a06:	33 81       	ldd	r19, Z+3	; 0x03
    9a08:	8f 81       	ldd	r24, Y+7	; 0x07
    9a0a:	98 85       	ldd	r25, Y+8	; 0x08
    9a0c:	82 17       	cp	r24, r18
    9a0e:	93 07       	cpc	r25, r19
    9a10:	ac f2       	brlt	.-86     	; 0x99bc <vdmCloneGC+0x1d4>
		{
			ptr->value[i] = vdmClone(cptr->value[i]);
		}

		tmp->value.ptr = ptr;
    9a12:	ef 85       	ldd	r30, Y+15	; 0x0f
    9a14:	f8 89       	ldd	r31, Y+16	; 0x10
    9a16:	8b 81       	ldd	r24, Y+3	; 0x03
    9a18:	9c 81       	ldd	r25, Y+4	; 0x04
    9a1a:	95 83       	std	Z+5, r25	; 0x05
    9a1c:	84 83       	std	Z+4, r24	; 0x04
    9a1e:	1c c0       	rjmp	.+56     	; 0x9a58 <vdmCloneGC+0x270>
	}
#endif
	case VDM_CLASS:
	{
		/* handle smart pointer  */
		struct ClassType* classTptr = (struct ClassType*) tmp->value.ptr;
    9a20:	ef 85       	ldd	r30, Y+15	; 0x0f
    9a22:	f8 89       	ldd	r31, Y+16	; 0x10
    9a24:	84 81       	ldd	r24, Z+4	; 0x04
    9a26:	95 81       	ldd	r25, Z+5	; 0x05
    9a28:	9a 83       	std	Y+2, r25	; 0x02
    9a2a:	89 83       	std	Y+1, r24	; 0x01

		/* improve using memcpy  */
		tmp->value.ptr = newClassValue(classTptr->classId, classTptr->refs, classTptr->freeClass, classTptr->value);
    9a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    9a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    9a30:	82 81       	ldd	r24, Z+2	; 0x02
    9a32:	93 81       	ldd	r25, Z+3	; 0x03
    9a34:	e9 81       	ldd	r30, Y+1	; 0x01
    9a36:	fa 81       	ldd	r31, Y+2	; 0x02
    9a38:	64 81       	ldd	r22, Z+4	; 0x04
    9a3a:	75 81       	ldd	r23, Z+5	; 0x05
    9a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    9a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    9a40:	46 81       	ldd	r20, Z+6	; 0x06
    9a42:	57 81       	ldd	r21, Z+7	; 0x07
    9a44:	e9 81       	ldd	r30, Y+1	; 0x01
    9a46:	fa 81       	ldd	r31, Y+2	; 0x02
    9a48:	20 81       	ld	r18, Z
    9a4a:	31 81       	ldd	r19, Z+1	; 0x01
    9a4c:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <newClassValue>
    9a50:	ef 85       	ldd	r30, Y+15	; 0x0f
    9a52:	f8 89       	ldd	r31, Y+16	; 0x10
    9a54:	95 83       	std	Z+5, r25	; 0x05
    9a56:	84 83       	std	Z+4, r24	; 0x04
		break;
	}
	}

	return tmp;
    9a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    9a5a:	98 89       	ldd	r25, Y+16	; 0x10
    9a5c:	98 8f       	std	Y+24, r25	; 0x18
    9a5e:	8f 8b       	std	Y+23, r24	; 0x17
    9a60:	8f 89       	ldd	r24, Y+23	; 0x17
    9a62:	98 8d       	ldd	r25, Y+24	; 0x18
}
    9a64:	68 96       	adiw	r28, 0x18	; 24
    9a66:	0f b6       	in	r0, 0x3f	; 63
    9a68:	f8 94       	cli
    9a6a:	de bf       	out	0x3e, r29	; 62
    9a6c:	0f be       	out	0x3f, r0	; 63
    9a6e:	cd bf       	out	0x3d, r28	; 61
    9a70:	cf 91       	pop	r28
    9a72:	df 91       	pop	r29
    9a74:	1f 91       	pop	r17
    9a76:	0f 91       	pop	r16
    9a78:	08 95       	ret

00009a7a <vdmSeqAdd>:
#define DEFAULT_SEQ_COMP_BUFFER_STEPSIZE 10

/* Utility functions.  */
/* ------------------------------------------------  */
static void vdmSeqAdd(TVP* value, int* index, TVP newValue)
{
    9a7a:	df 93       	push	r29
    9a7c:	cf 93       	push	r28
    9a7e:	00 d0       	rcall	.+0      	; 0x9a80 <vdmSeqAdd+0x6>
    9a80:	00 d0       	rcall	.+0      	; 0x9a82 <vdmSeqAdd+0x8>
    9a82:	00 d0       	rcall	.+0      	; 0x9a84 <vdmSeqAdd+0xa>
    9a84:	cd b7       	in	r28, 0x3d	; 61
    9a86:	de b7       	in	r29, 0x3e	; 62
    9a88:	9a 83       	std	Y+2, r25	; 0x02
    9a8a:	89 83       	std	Y+1, r24	; 0x01
    9a8c:	7c 83       	std	Y+4, r23	; 0x04
    9a8e:	6b 83       	std	Y+3, r22	; 0x03
    9a90:	5e 83       	std	Y+6, r21	; 0x06
    9a92:	4d 83       	std	Y+5, r20	; 0x05
	value[*index] = newValue;
    9a94:	eb 81       	ldd	r30, Y+3	; 0x03
    9a96:	fc 81       	ldd	r31, Y+4	; 0x04
    9a98:	80 81       	ld	r24, Z
    9a9a:	91 81       	ldd	r25, Z+1	; 0x01
    9a9c:	9c 01       	movw	r18, r24
    9a9e:	22 0f       	add	r18, r18
    9aa0:	33 1f       	adc	r19, r19
    9aa2:	89 81       	ldd	r24, Y+1	; 0x01
    9aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    9aa6:	fc 01       	movw	r30, r24
    9aa8:	e2 0f       	add	r30, r18
    9aaa:	f3 1f       	adc	r31, r19
    9aac:	8d 81       	ldd	r24, Y+5	; 0x05
    9aae:	9e 81       	ldd	r25, Y+6	; 0x06
    9ab0:	91 83       	std	Z+1, r25	; 0x01
    9ab2:	80 83       	st	Z, r24
	*index = (*index) + 1;
    9ab4:	eb 81       	ldd	r30, Y+3	; 0x03
    9ab6:	fc 81       	ldd	r31, Y+4	; 0x04
    9ab8:	80 81       	ld	r24, Z
    9aba:	91 81       	ldd	r25, Z+1	; 0x01
    9abc:	01 96       	adiw	r24, 0x01	; 1
    9abe:	eb 81       	ldd	r30, Y+3	; 0x03
    9ac0:	fc 81       	ldd	r31, Y+4	; 0x04
    9ac2:	91 83       	std	Z+1, r25	; 0x01
    9ac4:	80 83       	st	Z, r24
}
    9ac6:	26 96       	adiw	r28, 0x06	; 6
    9ac8:	0f b6       	in	r0, 0x3f	; 63
    9aca:	f8 94       	cli
    9acc:	de bf       	out	0x3e, r29	; 62
    9ace:	0f be       	out	0x3f, r0	; 63
    9ad0:	cd bf       	out	0x3d, r28	; 61
    9ad2:	cf 91       	pop	r28
    9ad4:	df 91       	pop	r29
    9ad6:	08 95       	ret

00009ad8 <newSeq>:




TVP newSeq(size_t size)
{
    9ad8:	df 93       	push	r29
    9ada:	cf 93       	push	r28
    9adc:	00 d0       	rcall	.+0      	; 0x9ade <newSeq+0x6>
    9ade:	cd b7       	in	r28, 0x3d	; 61
    9ae0:	de b7       	in	r29, 0x3e	; 62
    9ae2:	9a 83       	std	Y+2, r25	; 0x02
    9ae4:	89 83       	std	Y+1, r24	; 0x01
	return newCollection(size, VDM_SEQ);
    9ae6:	89 81       	ldd	r24, Y+1	; 0x01
    9ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    9aea:	68 e0       	ldi	r22, 0x08	; 8
    9aec:	70 e0       	ldi	r23, 0x00	; 0
    9aee:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <newCollection>
}
    9af2:	0f 90       	pop	r0
    9af4:	0f 90       	pop	r0
    9af6:	cf 91       	pop	r28
    9af8:	df 91       	pop	r29
    9afa:	08 95       	ret

00009afc <newSeqGC>:

static TVP newSeqGC(size_t size, TVP *from)
{
    9afc:	df 93       	push	r29
    9afe:	cf 93       	push	r28
    9b00:	00 d0       	rcall	.+0      	; 0x9b02 <newSeqGC+0x6>
    9b02:	00 d0       	rcall	.+0      	; 0x9b04 <newSeqGC+0x8>
    9b04:	cd b7       	in	r28, 0x3d	; 61
    9b06:	de b7       	in	r29, 0x3e	; 62
    9b08:	9a 83       	std	Y+2, r25	; 0x02
    9b0a:	89 83       	std	Y+1, r24	; 0x01
    9b0c:	7c 83       	std	Y+4, r23	; 0x04
    9b0e:	6b 83       	std	Y+3, r22	; 0x03
	return newCollectionGC(size, VDM_SEQ, from);
    9b10:	89 81       	ldd	r24, Y+1	; 0x01
    9b12:	9a 81       	ldd	r25, Y+2	; 0x02
    9b14:	2b 81       	ldd	r18, Y+3	; 0x03
    9b16:	3c 81       	ldd	r19, Y+4	; 0x04
    9b18:	68 e0       	ldi	r22, 0x08	; 8
    9b1a:	70 e0       	ldi	r23, 0x00	; 0
    9b1c:	a9 01       	movw	r20, r18
    9b1e:	0e 94 94 26 	call	0x4d28	; 0x4d28 <newCollectionGC>
}
    9b22:	0f 90       	pop	r0
    9b24:	0f 90       	pop	r0
    9b26:	0f 90       	pop	r0
    9b28:	0f 90       	pop	r0
    9b2a:	cf 91       	pop	r28
    9b2c:	df 91       	pop	r29
    9b2e:	08 95       	ret

00009b30 <newSeqWithValues>:

TVP newSeqWithValues(size_t size, TVP* elements)
{
    9b30:	df 93       	push	r29
    9b32:	cf 93       	push	r28
    9b34:	00 d0       	rcall	.+0      	; 0x9b36 <newSeqWithValues+0x6>
    9b36:	00 d0       	rcall	.+0      	; 0x9b38 <newSeqWithValues+0x8>
    9b38:	cd b7       	in	r28, 0x3d	; 61
    9b3a:	de b7       	in	r29, 0x3e	; 62
    9b3c:	9a 83       	std	Y+2, r25	; 0x02
    9b3e:	89 83       	std	Y+1, r24	; 0x01
    9b40:	7c 83       	std	Y+4, r23	; 0x04
    9b42:	6b 83       	std	Y+3, r22	; 0x03
	return newCollectionWithValues(size, VDM_SEQ,elements);
    9b44:	89 81       	ldd	r24, Y+1	; 0x01
    9b46:	9a 81       	ldd	r25, Y+2	; 0x02
    9b48:	2b 81       	ldd	r18, Y+3	; 0x03
    9b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    9b4c:	68 e0       	ldi	r22, 0x08	; 8
    9b4e:	70 e0       	ldi	r23, 0x00	; 0
    9b50:	a9 01       	movw	r20, r18
    9b52:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <newCollectionWithValues>
}
    9b56:	0f 90       	pop	r0
    9b58:	0f 90       	pop	r0
    9b5a:	0f 90       	pop	r0
    9b5c:	0f 90       	pop	r0
    9b5e:	cf 91       	pop	r28
    9b60:	df 91       	pop	r29
    9b62:	08 95       	ret

00009b64 <newSeqVar>:

TVP newSeqVar(size_t size, ...)
{
    9b64:	df 93       	push	r29
    9b66:	cf 93       	push	r28
    9b68:	cd b7       	in	r28, 0x3d	; 61
    9b6a:	de b7       	in	r29, 0x3e	; 62
    9b6c:	2e 97       	sbiw	r28, 0x0e	; 14
    9b6e:	0f b6       	in	r0, 0x3f	; 63
    9b70:	f8 94       	cli
    9b72:	de bf       	out	0x3e, r29	; 62
    9b74:	0f be       	out	0x3f, r0	; 63
    9b76:	cd bf       	out	0x3d, r28	; 61
		elements[i]=arg;
	}
	va_end(ap);

	return newCollectionWithValues(size, VDM_SEQ, elements);
}
    9b78:	2d b7       	in	r18, 0x3d	; 61
    9b7a:	3e b7       	in	r19, 0x3e	; 62
    9b7c:	3e 87       	std	Y+14, r19	; 0x0e
    9b7e:	2d 87       	std	Y+13, r18	; 0x0d
{
	return newCollectionWithValues(size, VDM_SEQ,elements);
}

TVP newSeqVar(size_t size, ...)
{
    9b80:	8d b7       	in	r24, 0x3d	; 61
    9b82:	9e b7       	in	r25, 0x3e	; 62
    9b84:	9a 87       	std	Y+10, r25	; 0x0a
    9b86:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP elements[size];
    9b88:	8b 89       	ldd	r24, Y+19	; 0x13
    9b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    9b8c:	88 0f       	add	r24, r24
    9b8e:	99 1f       	adc	r25, r25
    9b90:	2d b7       	in	r18, 0x3d	; 61
    9b92:	3e b7       	in	r19, 0x3e	; 62
    9b94:	28 1b       	sub	r18, r24
    9b96:	39 0b       	sbc	r19, r25
    9b98:	0f b6       	in	r0, 0x3f	; 63
    9b9a:	f8 94       	cli
    9b9c:	3e bf       	out	0x3e, r19	; 62
    9b9e:	0f be       	out	0x3f, r0	; 63
    9ba0:	2d bf       	out	0x3d, r18	; 61
    9ba2:	8d b7       	in	r24, 0x3d	; 61
    9ba4:	9e b7       	in	r25, 0x3e	; 62
    9ba6:	01 96       	adiw	r24, 0x01	; 1
    9ba8:	9c 87       	std	Y+12, r25	; 0x0c
    9baa:	8b 87       	std	Y+11, r24	; 0x0b
    9bac:	8b 85       	ldd	r24, Y+11	; 0x0b
    9bae:	9c 85       	ldd	r25, Y+12	; 0x0c
    9bb0:	00 96       	adiw	r24, 0x00	; 0
    9bb2:	9c 87       	std	Y+12, r25	; 0x0c
    9bb4:	8b 87       	std	Y+11, r24	; 0x0b
    9bb6:	2b 85       	ldd	r18, Y+11	; 0x0b
    9bb8:	3c 85       	ldd	r19, Y+12	; 0x0c
    9bba:	3e 83       	std	Y+6, r19	; 0x06
    9bbc:	2d 83       	std	Y+5, r18	; 0x05

	va_list ap;
	va_start(ap, size);
    9bbe:	ce 01       	movw	r24, r28
    9bc0:	45 96       	adiw	r24, 0x15	; 21
    9bc2:	98 87       	std	Y+8, r25	; 0x08
    9bc4:	8f 83       	std	Y+7, r24	; 0x07

	for (i = 0; i < size; i++)
    9bc6:	1c 82       	std	Y+4, r1	; 0x04
    9bc8:	1b 82       	std	Y+3, r1	; 0x03
    9bca:	1d c0       	rjmp	.+58     	; 0x9c06 <newSeqVar+0xa2>
	{
		TVP arg = va_arg(ap, TVP);
    9bcc:	2f 81       	ldd	r18, Y+7	; 0x07
    9bce:	38 85       	ldd	r19, Y+8	; 0x08
    9bd0:	c9 01       	movw	r24, r18
    9bd2:	02 96       	adiw	r24, 0x02	; 2
    9bd4:	98 87       	std	Y+8, r25	; 0x08
    9bd6:	8f 83       	std	Y+7, r24	; 0x07
    9bd8:	f9 01       	movw	r30, r18
    9bda:	80 81       	ld	r24, Z
    9bdc:	91 81       	ldd	r25, Z+1	; 0x01
    9bde:	9a 83       	std	Y+2, r25	; 0x02
    9be0:	89 83       	std	Y+1, r24	; 0x01
		elements[i]=arg;
    9be2:	8b 81       	ldd	r24, Y+3	; 0x03
    9be4:	9c 81       	ldd	r25, Y+4	; 0x04
    9be6:	2d 81       	ldd	r18, Y+5	; 0x05
    9be8:	3e 81       	ldd	r19, Y+6	; 0x06
    9bea:	88 0f       	add	r24, r24
    9bec:	99 1f       	adc	r25, r25
    9bee:	f9 01       	movw	r30, r18
    9bf0:	e8 0f       	add	r30, r24
    9bf2:	f9 1f       	adc	r31, r25
    9bf4:	89 81       	ldd	r24, Y+1	; 0x01
    9bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    9bf8:	91 83       	std	Z+1, r25	; 0x01
    9bfa:	80 83       	st	Z, r24
	TVP elements[size];

	va_list ap;
	va_start(ap, size);

	for (i = 0; i < size; i++)
    9bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    9bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    9c00:	01 96       	adiw	r24, 0x01	; 1
    9c02:	9c 83       	std	Y+4, r25	; 0x04
    9c04:	8b 83       	std	Y+3, r24	; 0x03
    9c06:	2b 81       	ldd	r18, Y+3	; 0x03
    9c08:	3c 81       	ldd	r19, Y+4	; 0x04
    9c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    9c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    9c0e:	28 17       	cp	r18, r24
    9c10:	39 07       	cpc	r19, r25
    9c12:	e0 f2       	brcs	.-72     	; 0x9bcc <newSeqVar+0x68>
		TVP arg = va_arg(ap, TVP);
		elements[i]=arg;
	}
	va_end(ap);

	return newCollectionWithValues(size, VDM_SEQ, elements);
    9c14:	2d 81       	ldd	r18, Y+5	; 0x05
    9c16:	3e 81       	ldd	r19, Y+6	; 0x06
    9c18:	8b 89       	ldd	r24, Y+19	; 0x13
    9c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    9c1c:	68 e0       	ldi	r22, 0x08	; 8
    9c1e:	70 e0       	ldi	r23, 0x00	; 0
    9c20:	a9 01       	movw	r20, r18
    9c22:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <newCollectionWithValues>
    9c26:	29 85       	ldd	r18, Y+9	; 0x09
    9c28:	3a 85       	ldd	r19, Y+10	; 0x0a
    9c2a:	0f b6       	in	r0, 0x3f	; 63
    9c2c:	f8 94       	cli
    9c2e:	3e bf       	out	0x3e, r19	; 62
    9c30:	0f be       	out	0x3f, r0	; 63
    9c32:	2d bf       	out	0x3d, r18	; 61
}
    9c34:	2d 85       	ldd	r18, Y+13	; 0x0d
    9c36:	3e 85       	ldd	r19, Y+14	; 0x0e
    9c38:	0f b6       	in	r0, 0x3f	; 63
    9c3a:	f8 94       	cli
    9c3c:	3e bf       	out	0x3e, r19	; 62
    9c3e:	0f be       	out	0x3f, r0	; 63
    9c40:	2d bf       	out	0x3d, r18	; 61
    9c42:	2e 96       	adiw	r28, 0x0e	; 14
    9c44:	0f b6       	in	r0, 0x3f	; 63
    9c46:	f8 94       	cli
    9c48:	de bf       	out	0x3e, r29	; 62
    9c4a:	0f be       	out	0x3f, r0	; 63
    9c4c:	cd bf       	out	0x3d, r28	; 61
    9c4e:	cf 91       	pop	r28
    9c50:	df 91       	pop	r29
    9c52:	08 95       	ret

00009c54 <newSeqVarGC>:

TVP newSeqVarGC(size_t size, TVP *from, ...)
{
    9c54:	df 93       	push	r29
    9c56:	cf 93       	push	r28
    9c58:	cd b7       	in	r28, 0x3d	; 61
    9c5a:	de b7       	in	r29, 0x3e	; 62
    9c5c:	2e 97       	sbiw	r28, 0x0e	; 14
    9c5e:	0f b6       	in	r0, 0x3f	; 63
    9c60:	f8 94       	cli
    9c62:	de bf       	out	0x3e, r29	; 62
    9c64:	0f be       	out	0x3f, r0	; 63
    9c66:	cd bf       	out	0x3d, r28	; 61
		elements[i] = arg;
	}
	va_end(ap);

	return newCollectionWithValuesGC(size, VDM_SEQ, elements, from);
}
    9c68:	2d b7       	in	r18, 0x3d	; 61
    9c6a:	3e b7       	in	r19, 0x3e	; 62
    9c6c:	3e 87       	std	Y+14, r19	; 0x0e
    9c6e:	2d 87       	std	Y+13, r18	; 0x0d

	return newCollectionWithValues(size, VDM_SEQ, elements);
}

TVP newSeqVarGC(size_t size, TVP *from, ...)
{
    9c70:	8d b7       	in	r24, 0x3d	; 61
    9c72:	9e b7       	in	r25, 0x3e	; 62
    9c74:	9a 87       	std	Y+10, r25	; 0x0a
    9c76:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP elements[size];
    9c78:	8b 89       	ldd	r24, Y+19	; 0x13
    9c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    9c7c:	88 0f       	add	r24, r24
    9c7e:	99 1f       	adc	r25, r25
    9c80:	2d b7       	in	r18, 0x3d	; 61
    9c82:	3e b7       	in	r19, 0x3e	; 62
    9c84:	28 1b       	sub	r18, r24
    9c86:	39 0b       	sbc	r19, r25
    9c88:	0f b6       	in	r0, 0x3f	; 63
    9c8a:	f8 94       	cli
    9c8c:	3e bf       	out	0x3e, r19	; 62
    9c8e:	0f be       	out	0x3f, r0	; 63
    9c90:	2d bf       	out	0x3d, r18	; 61
    9c92:	8d b7       	in	r24, 0x3d	; 61
    9c94:	9e b7       	in	r25, 0x3e	; 62
    9c96:	01 96       	adiw	r24, 0x01	; 1
    9c98:	9c 87       	std	Y+12, r25	; 0x0c
    9c9a:	8b 87       	std	Y+11, r24	; 0x0b
    9c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    9c9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    9ca0:	00 96       	adiw	r24, 0x00	; 0
    9ca2:	9c 87       	std	Y+12, r25	; 0x0c
    9ca4:	8b 87       	std	Y+11, r24	; 0x0b
    9ca6:	2b 85       	ldd	r18, Y+11	; 0x0b
    9ca8:	3c 85       	ldd	r19, Y+12	; 0x0c
    9caa:	3e 83       	std	Y+6, r19	; 0x06
    9cac:	2d 83       	std	Y+5, r18	; 0x05

	va_list ap;
	va_start(ap, from);
    9cae:	ce 01       	movw	r24, r28
    9cb0:	47 96       	adiw	r24, 0x17	; 23
    9cb2:	98 87       	std	Y+8, r25	; 0x08
    9cb4:	8f 83       	std	Y+7, r24	; 0x07

	for (i = 0; i < size; i++)
    9cb6:	1c 82       	std	Y+4, r1	; 0x04
    9cb8:	1b 82       	std	Y+3, r1	; 0x03
    9cba:	1d c0       	rjmp	.+58     	; 0x9cf6 <newSeqVarGC+0xa2>
	{
		TVP arg = va_arg(ap, TVP);
    9cbc:	2f 81       	ldd	r18, Y+7	; 0x07
    9cbe:	38 85       	ldd	r19, Y+8	; 0x08
    9cc0:	c9 01       	movw	r24, r18
    9cc2:	02 96       	adiw	r24, 0x02	; 2
    9cc4:	98 87       	std	Y+8, r25	; 0x08
    9cc6:	8f 83       	std	Y+7, r24	; 0x07
    9cc8:	f9 01       	movw	r30, r18
    9cca:	80 81       	ld	r24, Z
    9ccc:	91 81       	ldd	r25, Z+1	; 0x01
    9cce:	9a 83       	std	Y+2, r25	; 0x02
    9cd0:	89 83       	std	Y+1, r24	; 0x01
		elements[i] = arg;
    9cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    9cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    9cd6:	2d 81       	ldd	r18, Y+5	; 0x05
    9cd8:	3e 81       	ldd	r19, Y+6	; 0x06
    9cda:	88 0f       	add	r24, r24
    9cdc:	99 1f       	adc	r25, r25
    9cde:	f9 01       	movw	r30, r18
    9ce0:	e8 0f       	add	r30, r24
    9ce2:	f9 1f       	adc	r31, r25
    9ce4:	89 81       	ldd	r24, Y+1	; 0x01
    9ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    9ce8:	91 83       	std	Z+1, r25	; 0x01
    9cea:	80 83       	st	Z, r24
	TVP elements[size];

	va_list ap;
	va_start(ap, from);

	for (i = 0; i < size; i++)
    9cec:	8b 81       	ldd	r24, Y+3	; 0x03
    9cee:	9c 81       	ldd	r25, Y+4	; 0x04
    9cf0:	01 96       	adiw	r24, 0x01	; 1
    9cf2:	9c 83       	std	Y+4, r25	; 0x04
    9cf4:	8b 83       	std	Y+3, r24	; 0x03
    9cf6:	2b 81       	ldd	r18, Y+3	; 0x03
    9cf8:	3c 81       	ldd	r19, Y+4	; 0x04
    9cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    9cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    9cfe:	28 17       	cp	r18, r24
    9d00:	39 07       	cpc	r19, r25
    9d02:	e0 f2       	brcs	.-72     	; 0x9cbc <newSeqVarGC+0x68>
		TVP arg = va_arg(ap, TVP);
		elements[i] = arg;
	}
	va_end(ap);

	return newCollectionWithValuesGC(size, VDM_SEQ, elements, from);
    9d04:	4d 81       	ldd	r20, Y+5	; 0x05
    9d06:	5e 81       	ldd	r21, Y+6	; 0x06
    9d08:	8b 89       	ldd	r24, Y+19	; 0x13
    9d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    9d0c:	2d 89       	ldd	r18, Y+21	; 0x15
    9d0e:	3e 89       	ldd	r19, Y+22	; 0x16
    9d10:	68 e0       	ldi	r22, 0x08	; 8
    9d12:	70 e0       	ldi	r23, 0x00	; 0
    9d14:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <newCollectionWithValuesGC>
    9d18:	29 85       	ldd	r18, Y+9	; 0x09
    9d1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    9d1c:	0f b6       	in	r0, 0x3f	; 63
    9d1e:	f8 94       	cli
    9d20:	3e bf       	out	0x3e, r19	; 62
    9d22:	0f be       	out	0x3f, r0	; 63
    9d24:	2d bf       	out	0x3d, r18	; 61
}
    9d26:	2d 85       	ldd	r18, Y+13	; 0x0d
    9d28:	3e 85       	ldd	r19, Y+14	; 0x0e
    9d2a:	0f b6       	in	r0, 0x3f	; 63
    9d2c:	f8 94       	cli
    9d2e:	3e bf       	out	0x3e, r19	; 62
    9d30:	0f be       	out	0x3f, r0	; 63
    9d32:	2d bf       	out	0x3d, r18	; 61
    9d34:	2e 96       	adiw	r28, 0x0e	; 14
    9d36:	0f b6       	in	r0, 0x3f	; 63
    9d38:	f8 94       	cli
    9d3a:	de bf       	out	0x3e, r29	; 62
    9d3c:	0f be       	out	0x3f, r0	; 63
    9d3e:	cd bf       	out	0x3d, r28	; 61
    9d40:	cf 91       	pop	r28
    9d42:	df 91       	pop	r29
    9d44:	08 95       	ret

00009d46 <newSeqVarToGrow>:

/* Just like newSeqVar, but with memory preallocated to an expected  */
/* result sequence length.  */
TVP newSeqVarToGrow(size_t size, size_t expected_size, ...)
{
    9d46:	df 93       	push	r29
    9d48:	cf 93       	push	r28
    9d4a:	cd b7       	in	r28, 0x3d	; 61
    9d4c:	de b7       	in	r29, 0x3e	; 62
    9d4e:	60 97       	sbiw	r28, 0x10	; 16
    9d50:	0f b6       	in	r0, 0x3f	; 63
    9d52:	f8 94       	cli
    9d54:	de bf       	out	0x3e, r29	; 62
    9d56:	0f be       	out	0x3f, r0	; 63
    9d58:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, expected_size);
    9d5a:	ce 01       	movw	r24, r28
    9d5c:	49 96       	adiw	r24, 0x19	; 25
    9d5e:	9e 87       	std	Y+14, r25	; 0x0e
    9d60:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    9d62:	18 8a       	std	Y+16, r1	; 0x10
    9d64:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = expected_size;  /* DEFAULT_SEQ_COMP_BUFFER;  */
    9d66:	8f 89       	ldd	r24, Y+23	; 0x17
    9d68:	98 8d       	ldd	r25, Y+24	; 0x18
    9d6a:	9a 87       	std	Y+10, r25	; 0x0a
    9d6c:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    9d6e:	89 85       	ldd	r24, Y+9	; 0x09
    9d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    9d72:	62 e0       	ldi	r22, 0x02	; 2
    9d74:	70 e0       	ldi	r23, 0x00	; 0
    9d76:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    9d7a:	98 87       	std	Y+8, r25	; 0x08
    9d7c:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    9d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    9d80:	98 85       	ldd	r25, Y+8	; 0x08
    9d82:	00 97       	sbiw	r24, 0x00	; 0
    9d84:	11 f4       	brne	.+4      	; 0x9d8a <newSeqVarToGrow+0x44>
    9d86:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	for(i = 0; i < size; i++)
    9d8a:	1c 86       	std	Y+12, r1	; 0x0c
    9d8c:	1b 86       	std	Y+11, r1	; 0x0b
    9d8e:	3e c0       	rjmp	.+124    	; 0x9e0c <newSeqVarToGrow+0xc6>
	{
		TVP arg = va_arg(ap, TVP);
    9d90:	2d 85       	ldd	r18, Y+13	; 0x0d
    9d92:	3e 85       	ldd	r19, Y+14	; 0x0e
    9d94:	c9 01       	movw	r24, r18
    9d96:	02 96       	adiw	r24, 0x02	; 2
    9d98:	9e 87       	std	Y+14, r25	; 0x0e
    9d9a:	8d 87       	std	Y+13, r24	; 0x0d
    9d9c:	f9 01       	movw	r30, r18
    9d9e:	80 81       	ld	r24, Z
    9da0:	91 81       	ldd	r25, Z+1	; 0x01
    9da2:	9c 83       	std	Y+4, r25	; 0x04
    9da4:	8b 83       	std	Y+3, r24	; 0x03
		TVP v= vdmClone(arg); /*  set binding  */
    9da6:	8b 81       	ldd	r24, Y+3	; 0x03
    9da8:	9c 81       	ldd	r25, Y+4	; 0x04
    9daa:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    9dae:	9a 83       	std	Y+2, r25	; 0x02
    9db0:	89 83       	std	Y+1, r24	; 0x01


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    9db2:	2f 85       	ldd	r18, Y+15	; 0x0f
    9db4:	38 89       	ldd	r19, Y+16	; 0x10
    9db6:	89 85       	ldd	r24, Y+9	; 0x09
    9db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    9dba:	28 17       	cp	r18, r24
    9dbc:	39 07       	cpc	r19, r25
    9dbe:	bc f0       	brlt	.+46     	; 0x9dee <newSeqVarToGrow+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SEQ_COMP_BUFFER_STEPSIZE;
    9dc0:	89 85       	ldd	r24, Y+9	; 0x09
    9dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9dc4:	0a 96       	adiw	r24, 0x0a	; 10
    9dc6:	9a 87       	std	Y+10, r25	; 0x0a
    9dc8:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    9dca:	89 85       	ldd	r24, Y+9	; 0x09
    9dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    9dce:	9c 01       	movw	r18, r24
    9dd0:	22 0f       	add	r18, r18
    9dd2:	33 1f       	adc	r19, r19
    9dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    9dd6:	98 85       	ldd	r25, Y+8	; 0x08
    9dd8:	b9 01       	movw	r22, r18
    9dda:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    9dde:	98 87       	std	Y+8, r25	; 0x08
    9de0:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    9de2:	8f 81       	ldd	r24, Y+7	; 0x07
    9de4:	98 85       	ldd	r25, Y+8	; 0x08
    9de6:	00 97       	sbiw	r24, 0x00	; 0
    9de8:	11 f4       	brne	.+4      	; 0x9dee <newSeqVarToGrow+0xa8>
    9dea:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		}
		vdmSeqAdd(value,&count,v);
    9dee:	8f 81       	ldd	r24, Y+7	; 0x07
    9df0:	98 85       	ldd	r25, Y+8	; 0x08
    9df2:	9e 01       	movw	r18, r28
    9df4:	21 5f       	subi	r18, 0xF1	; 241
    9df6:	3f 4f       	sbci	r19, 0xFF	; 255
    9df8:	49 81       	ldd	r20, Y+1	; 0x01
    9dfa:	5a 81       	ldd	r21, Y+2	; 0x02
    9dfc:	b9 01       	movw	r22, r18
    9dfe:	0e 94 3d 4d 	call	0x9a7a	; 0x9a7a <vdmSeqAdd>

	int bufsize = expected_size;  /* DEFAULT_SEQ_COMP_BUFFER;  */
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for(i = 0; i < size; i++)
    9e02:	8b 85       	ldd	r24, Y+11	; 0x0b
    9e04:	9c 85       	ldd	r25, Y+12	; 0x0c
    9e06:	01 96       	adiw	r24, 0x01	; 1
    9e08:	9c 87       	std	Y+12, r25	; 0x0c
    9e0a:	8b 87       	std	Y+11, r24	; 0x0b
    9e0c:	2b 85       	ldd	r18, Y+11	; 0x0b
    9e0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    9e10:	8d 89       	ldd	r24, Y+21	; 0x15
    9e12:	9e 89       	ldd	r25, Y+22	; 0x16
    9e14:	28 17       	cp	r18, r24
    9e16:	39 07       	cpc	r19, r25
    9e18:	08 f4       	brcc	.+2      	; 0x9e1c <newSeqVarToGrow+0xd6>
    9e1a:	ba cf       	rjmp	.-140    	; 0x9d90 <newSeqVarToGrow+0x4a>
		vdmSeqAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesPrealloc(count, expected_size, VDM_SEQ, value);
    9e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    9e1e:	98 89       	ldd	r25, Y+16	; 0x10
    9e20:	2f 89       	ldd	r18, Y+23	; 0x17
    9e22:	38 8d       	ldd	r19, Y+24	; 0x18
    9e24:	ef 81       	ldd	r30, Y+7	; 0x07
    9e26:	f8 85       	ldd	r31, Y+8	; 0x08
    9e28:	b9 01       	movw	r22, r18
    9e2a:	48 e0       	ldi	r20, 0x08	; 8
    9e2c:	50 e0       	ldi	r21, 0x00	; 0
    9e2e:	9f 01       	movw	r18, r30
    9e30:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <newCollectionWithValuesPrealloc>
    9e34:	9e 83       	std	Y+6, r25	; 0x06
    9e36:	8d 83       	std	Y+5, r24	; 0x05
	free(value);
    9e38:	8f 81       	ldd	r24, Y+7	; 0x07
    9e3a:	98 85       	ldd	r25, Y+8	; 0x08
    9e3c:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    9e40:	8d 81       	ldd	r24, Y+5	; 0x05
    9e42:	9e 81       	ldd	r25, Y+6	; 0x06
}
    9e44:	60 96       	adiw	r28, 0x10	; 16
    9e46:	0f b6       	in	r0, 0x3f	; 63
    9e48:	f8 94       	cli
    9e4a:	de bf       	out	0x3e, r29	; 62
    9e4c:	0f be       	out	0x3f, r0	; 63
    9e4e:	cd bf       	out	0x3d, r28	; 61
    9e50:	cf 91       	pop	r28
    9e52:	df 91       	pop	r29
    9e54:	08 95       	ret

00009e56 <vdmSeqGrow>:

void vdmSeqGrow(TVP seq, TVP element)
{
    9e56:	df 93       	push	r29
    9e58:	cf 93       	push	r28
    9e5a:	cd b7       	in	r28, 0x3d	; 61
    9e5c:	de b7       	in	r29, 0x3e	; 62
    9e5e:	28 97       	sbiw	r28, 0x08	; 8
    9e60:	0f b6       	in	r0, 0x3f	; 63
    9e62:	f8 94       	cli
    9e64:	de bf       	out	0x3e, r29	; 62
    9e66:	0f be       	out	0x3f, r0	; 63
    9e68:	cd bf       	out	0x3d, r28	; 61
    9e6a:	9e 83       	std	Y+6, r25	; 0x06
    9e6c:	8d 83       	std	Y+5, r24	; 0x05
    9e6e:	78 87       	std	Y+8, r23	; 0x08
    9e70:	6f 83       	std	Y+7, r22	; 0x07
	int bufsize = DEFAULT_SEQ_COMP_BUFFER;
    9e72:	82 e0       	ldi	r24, 0x02	; 2
    9e74:	90 e0       	ldi	r25, 0x00	; 0
    9e76:	9c 83       	std	Y+4, r25	; 0x04
    9e78:	8b 83       	std	Y+3, r24	; 0x03

	UNWRAP_COLLECTION(col, seq);
    9e7a:	ed 81       	ldd	r30, Y+5	; 0x05
    9e7c:	fe 81       	ldd	r31, Y+6	; 0x06
    9e7e:	84 81       	ldd	r24, Z+4	; 0x04
    9e80:	95 81       	ldd	r25, Z+5	; 0x05
    9e82:	9a 83       	std	Y+2, r25	; 0x02
    9e84:	89 83       	std	Y+1, r24	; 0x01

	if(col->size >= bufsize)
    9e86:	e9 81       	ldd	r30, Y+1	; 0x01
    9e88:	fa 81       	ldd	r31, Y+2	; 0x02
    9e8a:	22 81       	ldd	r18, Z+2	; 0x02
    9e8c:	33 81       	ldd	r19, Z+3	; 0x03
    9e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    9e90:	9c 81       	ldd	r25, Y+4	; 0x04
    9e92:	28 17       	cp	r18, r24
    9e94:	39 07       	cpc	r19, r25
    9e96:	f4 f0       	brlt	.+60     	; 0x9ed4 <vdmSeqGrow+0x7e>
	{
		/* buffer too small add memory chunk  */
		bufsize += DEFAULT_SEQ_COMP_BUFFER_STEPSIZE;
    9e98:	8b 81       	ldd	r24, Y+3	; 0x03
    9e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    9e9c:	0a 96       	adiw	r24, 0x0a	; 10
    9e9e:	9c 83       	std	Y+4, r25	; 0x04
    9ea0:	8b 83       	std	Y+3, r24	; 0x03
		col->value = (TVP*)realloc(col->value, bufsize * sizeof(TVP));
    9ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    9ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    9ea6:	40 81       	ld	r20, Z
    9ea8:	51 81       	ldd	r21, Z+1	; 0x01
    9eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    9eac:	9c 81       	ldd	r25, Y+4	; 0x04
    9eae:	9c 01       	movw	r18, r24
    9eb0:	22 0f       	add	r18, r18
    9eb2:	33 1f       	adc	r19, r19
    9eb4:	ca 01       	movw	r24, r20
    9eb6:	b9 01       	movw	r22, r18
    9eb8:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    9ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    9ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    9ec0:	91 83       	std	Z+1, r25	; 0x01
    9ec2:	80 83       	st	Z, r24
		assert(col->value != NULL);
    9ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    9ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    9ec8:	80 81       	ld	r24, Z
    9eca:	91 81       	ldd	r25, Z+1	; 0x01
    9ecc:	00 97       	sbiw	r24, 0x00	; 0
    9ece:	11 f4       	brne	.+4      	; 0x9ed4 <vdmSeqGrow+0x7e>
    9ed0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	}
	vdmSeqAdd(col->value, &(col->size), element);
    9ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    9ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    9ed8:	60 81       	ld	r22, Z
    9eda:	71 81       	ldd	r23, Z+1	; 0x01
    9edc:	89 81       	ldd	r24, Y+1	; 0x01
    9ede:	9a 81       	ldd	r25, Y+2	; 0x02
    9ee0:	9c 01       	movw	r18, r24
    9ee2:	2e 5f       	subi	r18, 0xFE	; 254
    9ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    9ee6:	4f 81       	ldd	r20, Y+7	; 0x07
    9ee8:	58 85       	ldd	r21, Y+8	; 0x08
    9eea:	cb 01       	movw	r24, r22
    9eec:	b9 01       	movw	r22, r18
    9eee:	0e 94 3d 4d 	call	0x9a7a	; 0x9a7a <vdmSeqAdd>
}
    9ef2:	28 96       	adiw	r28, 0x08	; 8
    9ef4:	0f b6       	in	r0, 0x3f	; 63
    9ef6:	f8 94       	cli
    9ef8:	de bf       	out	0x3e, r29	; 62
    9efa:	0f be       	out	0x3f, r0	; 63
    9efc:	cd bf       	out	0x3d, r28	; 61
    9efe:	cf 91       	pop	r28
    9f00:	df 91       	pop	r29
    9f02:	08 95       	ret

00009f04 <vdmSeqFit>:

void vdmSeqFit(TVP seq)
{
    9f04:	df 93       	push	r29
    9f06:	cf 93       	push	r28
    9f08:	00 d0       	rcall	.+0      	; 0x9f0a <vdmSeqFit+0x6>
    9f0a:	00 d0       	rcall	.+0      	; 0x9f0c <vdmSeqFit+0x8>
    9f0c:	cd b7       	in	r28, 0x3d	; 61
    9f0e:	de b7       	in	r29, 0x3e	; 62
    9f10:	9c 83       	std	Y+4, r25	; 0x04
    9f12:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, seq);
    9f14:	eb 81       	ldd	r30, Y+3	; 0x03
    9f16:	fc 81       	ldd	r31, Y+4	; 0x04
    9f18:	84 81       	ldd	r24, Z+4	; 0x04
    9f1a:	95 81       	ldd	r25, Z+5	; 0x05
    9f1c:	9a 83       	std	Y+2, r25	; 0x02
    9f1e:	89 83       	std	Y+1, r24	; 0x01

	/* Assumes that more memory is allocated in the col->value array than there are elements.  */
	col->value = (TVP*)realloc(col->value, col->size * sizeof(TVP));
    9f20:	e9 81       	ldd	r30, Y+1	; 0x01
    9f22:	fa 81       	ldd	r31, Y+2	; 0x02
    9f24:	40 81       	ld	r20, Z
    9f26:	51 81       	ldd	r21, Z+1	; 0x01
    9f28:	e9 81       	ldd	r30, Y+1	; 0x01
    9f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    9f2c:	82 81       	ldd	r24, Z+2	; 0x02
    9f2e:	93 81       	ldd	r25, Z+3	; 0x03
    9f30:	9c 01       	movw	r18, r24
    9f32:	22 0f       	add	r18, r18
    9f34:	33 1f       	adc	r19, r19
    9f36:	ca 01       	movw	r24, r20
    9f38:	b9 01       	movw	r22, r18
    9f3a:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    9f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    9f40:	fa 81       	ldd	r31, Y+2	; 0x02
    9f42:	91 83       	std	Z+1, r25	; 0x01
    9f44:	80 83       	st	Z, r24
	assert(col->value != NULL);
    9f46:	e9 81       	ldd	r30, Y+1	; 0x01
    9f48:	fa 81       	ldd	r31, Y+2	; 0x02
    9f4a:	80 81       	ld	r24, Z
    9f4c:	91 81       	ldd	r25, Z+1	; 0x01
    9f4e:	00 97       	sbiw	r24, 0x00	; 0
    9f50:	11 f4       	brne	.+4      	; 0x9f56 <vdmSeqFit+0x52>
    9f52:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
}
    9f56:	0f 90       	pop	r0
    9f58:	0f 90       	pop	r0
    9f5a:	0f 90       	pop	r0
    9f5c:	0f 90       	pop	r0
    9f5e:	cf 91       	pop	r28
    9f60:	df 91       	pop	r29
    9f62:	08 95       	ret

00009f64 <vdmSeqHd>:

TVP vdmSeqHd(TVP seq)
{
    9f64:	df 93       	push	r29
    9f66:	cf 93       	push	r28
    9f68:	00 d0       	rcall	.+0      	; 0x9f6a <vdmSeqHd+0x6>
    9f6a:	00 d0       	rcall	.+0      	; 0x9f6c <vdmSeqHd+0x8>
    9f6c:	cd b7       	in	r28, 0x3d	; 61
    9f6e:	de b7       	in	r29, 0x3e	; 62
    9f70:	9c 83       	std	Y+4, r25	; 0x04
    9f72:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK(seq);
    9f74:	eb 81       	ldd	r30, Y+3	; 0x03
    9f76:	fc 81       	ldd	r31, Y+4	; 0x04
    9f78:	80 81       	ld	r24, Z
    9f7a:	91 81       	ldd	r25, Z+1	; 0x01
    9f7c:	88 30       	cpi	r24, 0x08	; 8
    9f7e:	91 05       	cpc	r25, r1
    9f80:	11 f0       	breq	.+4      	; 0x9f86 <vdmSeqHd+0x22>
    9f82:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    9f86:	eb 81       	ldd	r30, Y+3	; 0x03
    9f88:	fc 81       	ldd	r31, Y+4	; 0x04
    9f8a:	84 81       	ldd	r24, Z+4	; 0x04
    9f8c:	95 81       	ldd	r25, Z+5	; 0x05
    9f8e:	9a 83       	std	Y+2, r25	; 0x02
    9f90:	89 83       	std	Y+1, r24	; 0x01
	return vdmClone(col->value[0]);
    9f92:	e9 81       	ldd	r30, Y+1	; 0x01
    9f94:	fa 81       	ldd	r31, Y+2	; 0x02
    9f96:	01 90       	ld	r0, Z+
    9f98:	f0 81       	ld	r31, Z
    9f9a:	e0 2d       	mov	r30, r0
    9f9c:	80 81       	ld	r24, Z
    9f9e:	91 81       	ldd	r25, Z+1	; 0x01
    9fa0:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
}
    9fa4:	0f 90       	pop	r0
    9fa6:	0f 90       	pop	r0
    9fa8:	0f 90       	pop	r0
    9faa:	0f 90       	pop	r0
    9fac:	cf 91       	pop	r28
    9fae:	df 91       	pop	r29
    9fb0:	08 95       	ret

00009fb2 <vdmSeqHdGC>:

TVP vdmSeqHdGC(TVP seq, TVP *from)
{
    9fb2:	df 93       	push	r29
    9fb4:	cf 93       	push	r28
    9fb6:	00 d0       	rcall	.+0      	; 0x9fb8 <vdmSeqHdGC+0x6>
    9fb8:	00 d0       	rcall	.+0      	; 0x9fba <vdmSeqHdGC+0x8>
    9fba:	00 d0       	rcall	.+0      	; 0x9fbc <vdmSeqHdGC+0xa>
    9fbc:	cd b7       	in	r28, 0x3d	; 61
    9fbe:	de b7       	in	r29, 0x3e	; 62
    9fc0:	9c 83       	std	Y+4, r25	; 0x04
    9fc2:	8b 83       	std	Y+3, r24	; 0x03
    9fc4:	7e 83       	std	Y+6, r23	; 0x06
    9fc6:	6d 83       	std	Y+5, r22	; 0x05
	ASSERT_CHECK(seq);
    9fc8:	eb 81       	ldd	r30, Y+3	; 0x03
    9fca:	fc 81       	ldd	r31, Y+4	; 0x04
    9fcc:	80 81       	ld	r24, Z
    9fce:	91 81       	ldd	r25, Z+1	; 0x01
    9fd0:	88 30       	cpi	r24, 0x08	; 8
    9fd2:	91 05       	cpc	r25, r1
    9fd4:	11 f0       	breq	.+4      	; 0x9fda <vdmSeqHdGC+0x28>
    9fd6:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    9fda:	eb 81       	ldd	r30, Y+3	; 0x03
    9fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    9fde:	84 81       	ldd	r24, Z+4	; 0x04
    9fe0:	95 81       	ldd	r25, Z+5	; 0x05
    9fe2:	9a 83       	std	Y+2, r25	; 0x02
    9fe4:	89 83       	std	Y+1, r24	; 0x01
	return vdmCloneGC(col->value[0], from);
    9fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    9fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    9fea:	01 90       	ld	r0, Z+
    9fec:	f0 81       	ld	r31, Z
    9fee:	e0 2d       	mov	r30, r0
    9ff0:	80 81       	ld	r24, Z
    9ff2:	91 81       	ldd	r25, Z+1	; 0x01
    9ff4:	2d 81       	ldd	r18, Y+5	; 0x05
    9ff6:	3e 81       	ldd	r19, Y+6	; 0x06
    9ff8:	b9 01       	movw	r22, r18
    9ffa:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
}
    9ffe:	26 96       	adiw	r28, 0x06	; 6
    a000:	0f b6       	in	r0, 0x3f	; 63
    a002:	f8 94       	cli
    a004:	de bf       	out	0x3e, r29	; 62
    a006:	0f be       	out	0x3f, r0	; 63
    a008:	cd bf       	out	0x3d, r28	; 61
    a00a:	cf 91       	pop	r28
    a00c:	df 91       	pop	r29
    a00e:	08 95       	ret

0000a010 <vdmSeqTl>:

TVP vdmSeqTl(TVP seq)
{
    a010:	0f 93       	push	r16
    a012:	1f 93       	push	r17
    a014:	df 93       	push	r29
    a016:	cf 93       	push	r28
    a018:	cd b7       	in	r28, 0x3d	; 61
    a01a:	de b7       	in	r29, 0x3e	; 62
    a01c:	2a 97       	sbiw	r28, 0x0a	; 10
    a01e:	0f b6       	in	r0, 0x3f	; 63
    a020:	f8 94       	cli
    a022:	de bf       	out	0x3e, r29	; 62
    a024:	0f be       	out	0x3f, r0	; 63
    a026:	cd bf       	out	0x3d, r28	; 61
    a028:	9a 87       	std	Y+10, r25	; 0x0a
    a02a:	89 87       	std	Y+9, r24	; 0x09
	int i;

	ASSERT_CHECK(seq);
    a02c:	e9 85       	ldd	r30, Y+9	; 0x09
    a02e:	fa 85       	ldd	r31, Y+10	; 0x0a
    a030:	80 81       	ld	r24, Z
    a032:	91 81       	ldd	r25, Z+1	; 0x01
    a034:	88 30       	cpi	r24, 0x08	; 8
    a036:	91 05       	cpc	r25, r1
    a038:	11 f0       	breq	.+4      	; 0xa03e <vdmSeqTl+0x2e>
    a03a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a03e:	e9 85       	ldd	r30, Y+9	; 0x09
    a040:	fa 85       	ldd	r31, Y+10	; 0x0a
    a042:	84 81       	ldd	r24, Z+4	; 0x04
    a044:	95 81       	ldd	r25, Z+5	; 0x05
    a046:	9e 83       	std	Y+6, r25	; 0x06
    a048:	8d 83       	std	Y+5, r24	; 0x05

	/* malloc  */
	TVP tailVal = newSeq(col->size-1);
    a04a:	ed 81       	ldd	r30, Y+5	; 0x05
    a04c:	fe 81       	ldd	r31, Y+6	; 0x06
    a04e:	82 81       	ldd	r24, Z+2	; 0x02
    a050:	93 81       	ldd	r25, Z+3	; 0x03
    a052:	01 97       	sbiw	r24, 0x01	; 1
    a054:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <newSeq>
    a058:	9c 83       	std	Y+4, r25	; 0x04
    a05a:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(tail,tailVal);
    a05c:	eb 81       	ldd	r30, Y+3	; 0x03
    a05e:	fc 81       	ldd	r31, Y+4	; 0x04
    a060:	84 81       	ldd	r24, Z+4	; 0x04
    a062:	95 81       	ldd	r25, Z+5	; 0x05
    a064:	9a 83       	std	Y+2, r25	; 0x02
    a066:	89 83       	std	Y+1, r24	; 0x01

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a068:	81 e0       	ldi	r24, 0x01	; 1
    a06a:	90 e0       	ldi	r25, 0x00	; 0
    a06c:	98 87       	std	Y+8, r25	; 0x08
    a06e:	8f 83       	std	Y+7, r24	; 0x07
    a070:	29 c0       	rjmp	.+82     	; 0xa0c4 <vdmSeqTl+0xb4>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
    a072:	e9 81       	ldd	r30, Y+1	; 0x01
    a074:	fa 81       	ldd	r31, Y+2	; 0x02
    a076:	40 81       	ld	r20, Z
    a078:	51 81       	ldd	r21, Z+1	; 0x01
    a07a:	2f 81       	ldd	r18, Y+7	; 0x07
    a07c:	38 85       	ldd	r19, Y+8	; 0x08
    a07e:	81 e0       	ldi	r24, 0x01	; 1
    a080:	90 e0       	ldi	r25, 0x00	; 0
    a082:	82 1b       	sub	r24, r18
    a084:	93 0b       	sbc	r25, r19
    a086:	88 0f       	add	r24, r24
    a088:	99 1f       	adc	r25, r25
    a08a:	90 95       	com	r25
    a08c:	81 95       	neg	r24
    a08e:	9f 4f       	sbci	r25, 0xFF	; 255
    a090:	8a 01       	movw	r16, r20
    a092:	08 0f       	add	r16, r24
    a094:	19 1f       	adc	r17, r25
    a096:	ed 81       	ldd	r30, Y+5	; 0x05
    a098:	fe 81       	ldd	r31, Y+6	; 0x06
    a09a:	20 81       	ld	r18, Z
    a09c:	31 81       	ldd	r19, Z+1	; 0x01
    a09e:	8f 81       	ldd	r24, Y+7	; 0x07
    a0a0:	98 85       	ldd	r25, Y+8	; 0x08
    a0a2:	88 0f       	add	r24, r24
    a0a4:	99 1f       	adc	r25, r25
    a0a6:	f9 01       	movw	r30, r18
    a0a8:	e8 0f       	add	r30, r24
    a0aa:	f9 1f       	adc	r31, r25
    a0ac:	80 81       	ld	r24, Z
    a0ae:	91 81       	ldd	r25, Z+1	; 0x01
    a0b0:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a0b4:	f8 01       	movw	r30, r16
    a0b6:	91 83       	std	Z+1, r25	; 0x01
    a0b8:	80 83       	st	Z, r24
	/* malloc  */
	TVP tailVal = newSeq(col->size-1);
	UNWRAP_COLLECTION(tail,tailVal);

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a0ba:	8f 81       	ldd	r24, Y+7	; 0x07
    a0bc:	98 85       	ldd	r25, Y+8	; 0x08
    a0be:	01 96       	adiw	r24, 0x01	; 1
    a0c0:	98 87       	std	Y+8, r25	; 0x08
    a0c2:	8f 83       	std	Y+7, r24	; 0x07
    a0c4:	ed 81       	ldd	r30, Y+5	; 0x05
    a0c6:	fe 81       	ldd	r31, Y+6	; 0x06
    a0c8:	22 81       	ldd	r18, Z+2	; 0x02
    a0ca:	33 81       	ldd	r19, Z+3	; 0x03
    a0cc:	8f 81       	ldd	r24, Y+7	; 0x07
    a0ce:	98 85       	ldd	r25, Y+8	; 0x08
    a0d0:	82 17       	cp	r24, r18
    a0d2:	93 07       	cpc	r25, r19
    a0d4:	74 f2       	brlt	.-100    	; 0xa072 <vdmSeqTl+0x62>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
	}

	return tailVal;
    a0d6:	8b 81       	ldd	r24, Y+3	; 0x03
    a0d8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    a0da:	2a 96       	adiw	r28, 0x0a	; 10
    a0dc:	0f b6       	in	r0, 0x3f	; 63
    a0de:	f8 94       	cli
    a0e0:	de bf       	out	0x3e, r29	; 62
    a0e2:	0f be       	out	0x3f, r0	; 63
    a0e4:	cd bf       	out	0x3d, r28	; 61
    a0e6:	cf 91       	pop	r28
    a0e8:	df 91       	pop	r29
    a0ea:	1f 91       	pop	r17
    a0ec:	0f 91       	pop	r16
    a0ee:	08 95       	ret

0000a0f0 <vdmSeqTlGC>:

TVP vdmSeqTlGC(TVP seq, TVP *from)
{
    a0f0:	0f 93       	push	r16
    a0f2:	1f 93       	push	r17
    a0f4:	df 93       	push	r29
    a0f6:	cf 93       	push	r28
    a0f8:	cd b7       	in	r28, 0x3d	; 61
    a0fa:	de b7       	in	r29, 0x3e	; 62
    a0fc:	2c 97       	sbiw	r28, 0x0c	; 12
    a0fe:	0f b6       	in	r0, 0x3f	; 63
    a100:	f8 94       	cli
    a102:	de bf       	out	0x3e, r29	; 62
    a104:	0f be       	out	0x3f, r0	; 63
    a106:	cd bf       	out	0x3d, r28	; 61
    a108:	9a 87       	std	Y+10, r25	; 0x0a
    a10a:	89 87       	std	Y+9, r24	; 0x09
    a10c:	7c 87       	std	Y+12, r23	; 0x0c
    a10e:	6b 87       	std	Y+11, r22	; 0x0b
	int i;

	ASSERT_CHECK(seq);
    a110:	e9 85       	ldd	r30, Y+9	; 0x09
    a112:	fa 85       	ldd	r31, Y+10	; 0x0a
    a114:	80 81       	ld	r24, Z
    a116:	91 81       	ldd	r25, Z+1	; 0x01
    a118:	88 30       	cpi	r24, 0x08	; 8
    a11a:	91 05       	cpc	r25, r1
    a11c:	11 f0       	breq	.+4      	; 0xa122 <vdmSeqTlGC+0x32>
    a11e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a122:	e9 85       	ldd	r30, Y+9	; 0x09
    a124:	fa 85       	ldd	r31, Y+10	; 0x0a
    a126:	84 81       	ldd	r24, Z+4	; 0x04
    a128:	95 81       	ldd	r25, Z+5	; 0x05
    a12a:	9e 83       	std	Y+6, r25	; 0x06
    a12c:	8d 83       	std	Y+5, r24	; 0x05

	/* malloc  */
	TVP tailVal = newSeqGC(col->size - 1, from);
    a12e:	ed 81       	ldd	r30, Y+5	; 0x05
    a130:	fe 81       	ldd	r31, Y+6	; 0x06
    a132:	82 81       	ldd	r24, Z+2	; 0x02
    a134:	93 81       	ldd	r25, Z+3	; 0x03
    a136:	01 97       	sbiw	r24, 0x01	; 1
    a138:	2b 85       	ldd	r18, Y+11	; 0x0b
    a13a:	3c 85       	ldd	r19, Y+12	; 0x0c
    a13c:	b9 01       	movw	r22, r18
    a13e:	0e 94 7e 4d 	call	0x9afc	; 0x9afc <newSeqGC>
    a142:	9c 83       	std	Y+4, r25	; 0x04
    a144:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(tail,tailVal);
    a146:	eb 81       	ldd	r30, Y+3	; 0x03
    a148:	fc 81       	ldd	r31, Y+4	; 0x04
    a14a:	84 81       	ldd	r24, Z+4	; 0x04
    a14c:	95 81       	ldd	r25, Z+5	; 0x05
    a14e:	9a 83       	std	Y+2, r25	; 0x02
    a150:	89 83       	std	Y+1, r24	; 0x01

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a152:	81 e0       	ldi	r24, 0x01	; 1
    a154:	90 e0       	ldi	r25, 0x00	; 0
    a156:	98 87       	std	Y+8, r25	; 0x08
    a158:	8f 83       	std	Y+7, r24	; 0x07
    a15a:	29 c0       	rjmp	.+82     	; 0xa1ae <vdmSeqTlGC+0xbe>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
    a15c:	e9 81       	ldd	r30, Y+1	; 0x01
    a15e:	fa 81       	ldd	r31, Y+2	; 0x02
    a160:	40 81       	ld	r20, Z
    a162:	51 81       	ldd	r21, Z+1	; 0x01
    a164:	2f 81       	ldd	r18, Y+7	; 0x07
    a166:	38 85       	ldd	r19, Y+8	; 0x08
    a168:	81 e0       	ldi	r24, 0x01	; 1
    a16a:	90 e0       	ldi	r25, 0x00	; 0
    a16c:	82 1b       	sub	r24, r18
    a16e:	93 0b       	sbc	r25, r19
    a170:	88 0f       	add	r24, r24
    a172:	99 1f       	adc	r25, r25
    a174:	90 95       	com	r25
    a176:	81 95       	neg	r24
    a178:	9f 4f       	sbci	r25, 0xFF	; 255
    a17a:	8a 01       	movw	r16, r20
    a17c:	08 0f       	add	r16, r24
    a17e:	19 1f       	adc	r17, r25
    a180:	ed 81       	ldd	r30, Y+5	; 0x05
    a182:	fe 81       	ldd	r31, Y+6	; 0x06
    a184:	20 81       	ld	r18, Z
    a186:	31 81       	ldd	r19, Z+1	; 0x01
    a188:	8f 81       	ldd	r24, Y+7	; 0x07
    a18a:	98 85       	ldd	r25, Y+8	; 0x08
    a18c:	88 0f       	add	r24, r24
    a18e:	99 1f       	adc	r25, r25
    a190:	f9 01       	movw	r30, r18
    a192:	e8 0f       	add	r30, r24
    a194:	f9 1f       	adc	r31, r25
    a196:	80 81       	ld	r24, Z
    a198:	91 81       	ldd	r25, Z+1	; 0x01
    a19a:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a19e:	f8 01       	movw	r30, r16
    a1a0:	91 83       	std	Z+1, r25	; 0x01
    a1a2:	80 83       	st	Z, r24
	/* malloc  */
	TVP tailVal = newSeqGC(col->size - 1, from);
	UNWRAP_COLLECTION(tail,tailVal);

	/* copy tail list  */
	for (i = 1; i < col->size; i++)
    a1a4:	8f 81       	ldd	r24, Y+7	; 0x07
    a1a6:	98 85       	ldd	r25, Y+8	; 0x08
    a1a8:	01 96       	adiw	r24, 0x01	; 1
    a1aa:	98 87       	std	Y+8, r25	; 0x08
    a1ac:	8f 83       	std	Y+7, r24	; 0x07
    a1ae:	ed 81       	ldd	r30, Y+5	; 0x05
    a1b0:	fe 81       	ldd	r31, Y+6	; 0x06
    a1b2:	22 81       	ldd	r18, Z+2	; 0x02
    a1b4:	33 81       	ldd	r19, Z+3	; 0x03
    a1b6:	8f 81       	ldd	r24, Y+7	; 0x07
    a1b8:	98 85       	ldd	r25, Y+8	; 0x08
    a1ba:	82 17       	cp	r24, r18
    a1bc:	93 07       	cpc	r25, r19
    a1be:	74 f2       	brlt	.-100    	; 0xa15c <vdmSeqTlGC+0x6c>
	{
		tail->value[i-1] = vdmClone(col->value[i]);
	}

	return tailVal;
    a1c0:	8b 81       	ldd	r24, Y+3	; 0x03
    a1c2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    a1c4:	2c 96       	adiw	r28, 0x0c	; 12
    a1c6:	0f b6       	in	r0, 0x3f	; 63
    a1c8:	f8 94       	cli
    a1ca:	de bf       	out	0x3e, r29	; 62
    a1cc:	0f be       	out	0x3f, r0	; 63
    a1ce:	cd bf       	out	0x3d, r28	; 61
    a1d0:	cf 91       	pop	r28
    a1d2:	df 91       	pop	r29
    a1d4:	1f 91       	pop	r17
    a1d6:	0f 91       	pop	r16
    a1d8:	08 95       	ret

0000a1da <vdmSeqLen>:

TVP vdmSeqLen(TVP seq)
{
    a1da:	df 93       	push	r29
    a1dc:	cf 93       	push	r28
    a1de:	00 d0       	rcall	.+0      	; 0xa1e0 <vdmSeqLen+0x6>
    a1e0:	00 d0       	rcall	.+0      	; 0xa1e2 <vdmSeqLen+0x8>
    a1e2:	cd b7       	in	r28, 0x3d	; 61
    a1e4:	de b7       	in	r29, 0x3e	; 62
    a1e6:	9c 83       	std	Y+4, r25	; 0x04
    a1e8:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK(seq);
    a1ea:	eb 81       	ldd	r30, Y+3	; 0x03
    a1ec:	fc 81       	ldd	r31, Y+4	; 0x04
    a1ee:	80 81       	ld	r24, Z
    a1f0:	91 81       	ldd	r25, Z+1	; 0x01
    a1f2:	88 30       	cpi	r24, 0x08	; 8
    a1f4:	91 05       	cpc	r25, r1
    a1f6:	11 f0       	breq	.+4      	; 0xa1fc <vdmSeqLen+0x22>
    a1f8:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a1fc:	eb 81       	ldd	r30, Y+3	; 0x03
    a1fe:	fc 81       	ldd	r31, Y+4	; 0x04
    a200:	84 81       	ldd	r24, Z+4	; 0x04
    a202:	95 81       	ldd	r25, Z+5	; 0x05
    a204:	9a 83       	std	Y+2, r25	; 0x02
    a206:	89 83       	std	Y+1, r24	; 0x01
	return newInt(col->size);
    a208:	e9 81       	ldd	r30, Y+1	; 0x01
    a20a:	fa 81       	ldd	r31, Y+2	; 0x02
    a20c:	82 81       	ldd	r24, Z+2	; 0x02
    a20e:	93 81       	ldd	r25, Z+3	; 0x03
    a210:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
}
    a214:	0f 90       	pop	r0
    a216:	0f 90       	pop	r0
    a218:	0f 90       	pop	r0
    a21a:	0f 90       	pop	r0
    a21c:	cf 91       	pop	r28
    a21e:	df 91       	pop	r29
    a220:	08 95       	ret

0000a222 <vdmSeqLenGC>:

TVP vdmSeqLenGC(TVP seq, TVP *from)
{
    a222:	df 93       	push	r29
    a224:	cf 93       	push	r28
    a226:	00 d0       	rcall	.+0      	; 0xa228 <vdmSeqLenGC+0x6>
    a228:	00 d0       	rcall	.+0      	; 0xa22a <vdmSeqLenGC+0x8>
    a22a:	00 d0       	rcall	.+0      	; 0xa22c <vdmSeqLenGC+0xa>
    a22c:	cd b7       	in	r28, 0x3d	; 61
    a22e:	de b7       	in	r29, 0x3e	; 62
    a230:	9c 83       	std	Y+4, r25	; 0x04
    a232:	8b 83       	std	Y+3, r24	; 0x03
    a234:	7e 83       	std	Y+6, r23	; 0x06
    a236:	6d 83       	std	Y+5, r22	; 0x05
	ASSERT_CHECK(seq);
    a238:	eb 81       	ldd	r30, Y+3	; 0x03
    a23a:	fc 81       	ldd	r31, Y+4	; 0x04
    a23c:	80 81       	ld	r24, Z
    a23e:	91 81       	ldd	r25, Z+1	; 0x01
    a240:	88 30       	cpi	r24, 0x08	; 8
    a242:	91 05       	cpc	r25, r1
    a244:	11 f0       	breq	.+4      	; 0xa24a <vdmSeqLenGC+0x28>
    a246:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a24a:	eb 81       	ldd	r30, Y+3	; 0x03
    a24c:	fc 81       	ldd	r31, Y+4	; 0x04
    a24e:	84 81       	ldd	r24, Z+4	; 0x04
    a250:	95 81       	ldd	r25, Z+5	; 0x05
    a252:	9a 83       	std	Y+2, r25	; 0x02
    a254:	89 83       	std	Y+1, r24	; 0x01
	return newIntGC(col->size, from);
    a256:	e9 81       	ldd	r30, Y+1	; 0x01
    a258:	fa 81       	ldd	r31, Y+2	; 0x02
    a25a:	82 81       	ldd	r24, Z+2	; 0x02
    a25c:	93 81       	ldd	r25, Z+3	; 0x03
    a25e:	2d 81       	ldd	r18, Y+5	; 0x05
    a260:	3e 81       	ldd	r19, Y+6	; 0x06
    a262:	b9 01       	movw	r22, r18
    a264:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
}
    a268:	26 96       	adiw	r28, 0x06	; 6
    a26a:	0f b6       	in	r0, 0x3f	; 63
    a26c:	f8 94       	cli
    a26e:	de bf       	out	0x3e, r29	; 62
    a270:	0f be       	out	0x3f, r0	; 63
    a272:	cd bf       	out	0x3d, r28	; 61
    a274:	cf 91       	pop	r28
    a276:	df 91       	pop	r29
    a278:	08 95       	ret

0000a27a <vdmSeqElems>:

#ifndef NO_SETS
TVP vdmSeqElems(TVP seq)
{
    a27a:	df 93       	push	r29
    a27c:	cf 93       	push	r28
    a27e:	00 d0       	rcall	.+0      	; 0xa280 <vdmSeqElems+0x6>
    a280:	00 d0       	rcall	.+0      	; 0xa282 <vdmSeqElems+0x8>
    a282:	00 d0       	rcall	.+0      	; 0xa284 <vdmSeqElems+0xa>
    a284:	cd b7       	in	r28, 0x3d	; 61
    a286:	de b7       	in	r29, 0x3e	; 62
    a288:	9e 83       	std	Y+6, r25	; 0x06
    a28a:	8d 83       	std	Y+5, r24	; 0x05
	ASSERT_CHECK(seq);
    a28c:	ed 81       	ldd	r30, Y+5	; 0x05
    a28e:	fe 81       	ldd	r31, Y+6	; 0x06
    a290:	80 81       	ld	r24, Z
    a292:	91 81       	ldd	r25, Z+1	; 0x01
    a294:	88 30       	cpi	r24, 0x08	; 8
    a296:	91 05       	cpc	r25, r1
    a298:	11 f0       	breq	.+4      	; 0xa29e <vdmSeqElems+0x24>
    a29a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a29e:	ed 81       	ldd	r30, Y+5	; 0x05
    a2a0:	fe 81       	ldd	r31, Y+6	; 0x06
    a2a2:	84 81       	ldd	r24, Z+4	; 0x04
    a2a4:	95 81       	ldd	r25, Z+5	; 0x05
    a2a6:	9c 83       	std	Y+4, r25	; 0x04
    a2a8:	8b 83       	std	Y+3, r24	; 0x03

	TVP elemsVal = newSetWithValues(col->size, col->value);
    a2aa:	eb 81       	ldd	r30, Y+3	; 0x03
    a2ac:	fc 81       	ldd	r31, Y+4	; 0x04
    a2ae:	82 81       	ldd	r24, Z+2	; 0x02
    a2b0:	93 81       	ldd	r25, Z+3	; 0x03
    a2b2:	eb 81       	ldd	r30, Y+3	; 0x03
    a2b4:	fc 81       	ldd	r31, Y+4	; 0x04
    a2b6:	20 81       	ld	r18, Z
    a2b8:	31 81       	ldd	r19, Z+1	; 0x01
    a2ba:	b9 01       	movw	r22, r18
    a2bc:	0e 94 90 56 	call	0xad20	; 0xad20 <newSetWithValues>
    a2c0:	9a 83       	std	Y+2, r25	; 0x02
    a2c2:	89 83       	std	Y+1, r24	; 0x01

	return elemsVal;
    a2c4:	89 81       	ldd	r24, Y+1	; 0x01
    a2c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a2c8:	26 96       	adiw	r28, 0x06	; 6
    a2ca:	0f b6       	in	r0, 0x3f	; 63
    a2cc:	f8 94       	cli
    a2ce:	de bf       	out	0x3e, r29	; 62
    a2d0:	0f be       	out	0x3f, r0	; 63
    a2d2:	cd bf       	out	0x3d, r28	; 61
    a2d4:	cf 91       	pop	r28
    a2d6:	df 91       	pop	r29
    a2d8:	08 95       	ret

0000a2da <vdmSeqElemsGC>:


TVP vdmSeqElemsGC(TVP seq, TVP *from)
{
    a2da:	df 93       	push	r29
    a2dc:	cf 93       	push	r28
    a2de:	cd b7       	in	r28, 0x3d	; 61
    a2e0:	de b7       	in	r29, 0x3e	; 62
    a2e2:	28 97       	sbiw	r28, 0x08	; 8
    a2e4:	0f b6       	in	r0, 0x3f	; 63
    a2e6:	f8 94       	cli
    a2e8:	de bf       	out	0x3e, r29	; 62
    a2ea:	0f be       	out	0x3f, r0	; 63
    a2ec:	cd bf       	out	0x3d, r28	; 61
    a2ee:	9e 83       	std	Y+6, r25	; 0x06
    a2f0:	8d 83       	std	Y+5, r24	; 0x05
    a2f2:	78 87       	std	Y+8, r23	; 0x08
    a2f4:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK(seq);
    a2f6:	ed 81       	ldd	r30, Y+5	; 0x05
    a2f8:	fe 81       	ldd	r31, Y+6	; 0x06
    a2fa:	80 81       	ld	r24, Z
    a2fc:	91 81       	ldd	r25, Z+1	; 0x01
    a2fe:	88 30       	cpi	r24, 0x08	; 8
    a300:	91 05       	cpc	r25, r1
    a302:	11 f0       	breq	.+4      	; 0xa308 <vdmSeqElemsGC+0x2e>
    a304:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a308:	ed 81       	ldd	r30, Y+5	; 0x05
    a30a:	fe 81       	ldd	r31, Y+6	; 0x06
    a30c:	84 81       	ldd	r24, Z+4	; 0x04
    a30e:	95 81       	ldd	r25, Z+5	; 0x05
    a310:	9c 83       	std	Y+4, r25	; 0x04
    a312:	8b 83       	std	Y+3, r24	; 0x03

	TVP elemsVal = newSetWithValuesGC(col->size, col->value, from);
    a314:	eb 81       	ldd	r30, Y+3	; 0x03
    a316:	fc 81       	ldd	r31, Y+4	; 0x04
    a318:	82 81       	ldd	r24, Z+2	; 0x02
    a31a:	93 81       	ldd	r25, Z+3	; 0x03
    a31c:	eb 81       	ldd	r30, Y+3	; 0x03
    a31e:	fc 81       	ldd	r31, Y+4	; 0x04
    a320:	20 81       	ld	r18, Z
    a322:	31 81       	ldd	r19, Z+1	; 0x01
    a324:	4f 81       	ldd	r20, Y+7	; 0x07
    a326:	58 85       	ldd	r21, Y+8	; 0x08
    a328:	b9 01       	movw	r22, r18
    a32a:	0e 94 31 57 	call	0xae62	; 0xae62 <newSetWithValuesGC>
    a32e:	9a 83       	std	Y+2, r25	; 0x02
    a330:	89 83       	std	Y+1, r24	; 0x01

	return elemsVal;
    a332:	89 81       	ldd	r24, Y+1	; 0x01
    a334:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a336:	28 96       	adiw	r28, 0x08	; 8
    a338:	0f b6       	in	r0, 0x3f	; 63
    a33a:	f8 94       	cli
    a33c:	de bf       	out	0x3e, r29	; 62
    a33e:	0f be       	out	0x3f, r0	; 63
    a340:	cd bf       	out	0x3d, r28	; 61
    a342:	cf 91       	pop	r28
    a344:	df 91       	pop	r29
    a346:	08 95       	ret

0000a348 <vdmSeqInds>:


TVP vdmSeqInds(TVP seq)
{
    a348:	0f 93       	push	r16
    a34a:	1f 93       	push	r17
    a34c:	df 93       	push	r29
    a34e:	cf 93       	push	r28
    a350:	cd b7       	in	r28, 0x3d	; 61
    a352:	de b7       	in	r29, 0x3e	; 62
    a354:	2a 97       	sbiw	r28, 0x0a	; 10
    a356:	0f b6       	in	r0, 0x3f	; 63
    a358:	f8 94       	cli
    a35a:	de bf       	out	0x3e, r29	; 62
    a35c:	0f be       	out	0x3f, r0	; 63
    a35e:	cd bf       	out	0x3d, r28	; 61
    a360:	9a 87       	std	Y+10, r25	; 0x0a
    a362:	89 87       	std	Y+9, r24	; 0x09
	int i;

	ASSERT_CHECK(seq);
    a364:	e9 85       	ldd	r30, Y+9	; 0x09
    a366:	fa 85       	ldd	r31, Y+10	; 0x0a
    a368:	80 81       	ld	r24, Z
    a36a:	91 81       	ldd	r25, Z+1	; 0x01
    a36c:	88 30       	cpi	r24, 0x08	; 8
    a36e:	91 05       	cpc	r25, r1
    a370:	11 f0       	breq	.+4      	; 0xa376 <vdmSeqInds+0x2e>
    a372:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a376:	e9 85       	ldd	r30, Y+9	; 0x09
    a378:	fa 85       	ldd	r31, Y+10	; 0x0a
    a37a:	84 81       	ldd	r24, Z+4	; 0x04
    a37c:	95 81       	ldd	r25, Z+5	; 0x05
    a37e:	9e 83       	std	Y+6, r25	; 0x06
    a380:	8d 83       	std	Y+5, r24	; 0x05

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
    a382:	ed 81       	ldd	r30, Y+5	; 0x05
    a384:	fe 81       	ldd	r31, Y+6	; 0x06
    a386:	82 81       	ldd	r24, Z+2	; 0x02
    a388:	93 81       	ldd	r25, Z+3	; 0x03
    a38a:	62 e0       	ldi	r22, 0x02	; 2
    a38c:	70 e0       	ldi	r23, 0x00	; 0
    a38e:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    a392:	9c 83       	std	Y+4, r25	; 0x04
    a394:	8b 83       	std	Y+3, r24	; 0x03
	assert(value != NULL);
    a396:	8b 81       	ldd	r24, Y+3	; 0x03
    a398:	9c 81       	ldd	r25, Y+4	; 0x04
    a39a:	00 97       	sbiw	r24, 0x00	; 0
    a39c:	11 f4       	brne	.+4      	; 0xa3a2 <vdmSeqInds+0x5a>
    a39e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a3a2:	18 86       	std	Y+8, r1	; 0x08
    a3a4:	1f 82       	std	Y+7, r1	; 0x07
    a3a6:	17 c0       	rjmp	.+46     	; 0xa3d6 <vdmSeqInds+0x8e>
	{
		value[i] = newInt(i+1);
    a3a8:	8f 81       	ldd	r24, Y+7	; 0x07
    a3aa:	98 85       	ldd	r25, Y+8	; 0x08
    a3ac:	9c 01       	movw	r18, r24
    a3ae:	22 0f       	add	r18, r18
    a3b0:	33 1f       	adc	r19, r19
    a3b2:	8b 81       	ldd	r24, Y+3	; 0x03
    a3b4:	9c 81       	ldd	r25, Y+4	; 0x04
    a3b6:	8c 01       	movw	r16, r24
    a3b8:	02 0f       	add	r16, r18
    a3ba:	13 1f       	adc	r17, r19
    a3bc:	8f 81       	ldd	r24, Y+7	; 0x07
    a3be:	98 85       	ldd	r25, Y+8	; 0x08
    a3c0:	01 96       	adiw	r24, 0x01	; 1
    a3c2:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    a3c6:	f8 01       	movw	r30, r16
    a3c8:	91 83       	std	Z+1, r25	; 0x01
    a3ca:	80 83       	st	Z, r24

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
	assert(value != NULL);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a3cc:	8f 81       	ldd	r24, Y+7	; 0x07
    a3ce:	98 85       	ldd	r25, Y+8	; 0x08
    a3d0:	01 96       	adiw	r24, 0x01	; 1
    a3d2:	98 87       	std	Y+8, r25	; 0x08
    a3d4:	8f 83       	std	Y+7, r24	; 0x07
    a3d6:	ed 81       	ldd	r30, Y+5	; 0x05
    a3d8:	fe 81       	ldd	r31, Y+6	; 0x06
    a3da:	22 81       	ldd	r18, Z+2	; 0x02
    a3dc:	33 81       	ldd	r19, Z+3	; 0x03
    a3de:	8f 81       	ldd	r24, Y+7	; 0x07
    a3e0:	98 85       	ldd	r25, Y+8	; 0x08
    a3e2:	82 17       	cp	r24, r18
    a3e4:	93 07       	cpc	r25, r19
    a3e6:	04 f3       	brlt	.-64     	; 0xa3a8 <vdmSeqInds+0x60>
	{
		value[i] = newInt(i+1);
	}

	TVP indsVal = newSetWithValues(col->size, value);
    a3e8:	ed 81       	ldd	r30, Y+5	; 0x05
    a3ea:	fe 81       	ldd	r31, Y+6	; 0x06
    a3ec:	82 81       	ldd	r24, Z+2	; 0x02
    a3ee:	93 81       	ldd	r25, Z+3	; 0x03
    a3f0:	2b 81       	ldd	r18, Y+3	; 0x03
    a3f2:	3c 81       	ldd	r19, Y+4	; 0x04
    a3f4:	b9 01       	movw	r22, r18
    a3f6:	0e 94 90 56 	call	0xad20	; 0xad20 <newSetWithValues>
    a3fa:	9a 83       	std	Y+2, r25	; 0x02
    a3fc:	89 83       	std	Y+1, r24	; 0x01

	return indsVal;
    a3fe:	89 81       	ldd	r24, Y+1	; 0x01
    a400:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a402:	2a 96       	adiw	r28, 0x0a	; 10
    a404:	0f b6       	in	r0, 0x3f	; 63
    a406:	f8 94       	cli
    a408:	de bf       	out	0x3e, r29	; 62
    a40a:	0f be       	out	0x3f, r0	; 63
    a40c:	cd bf       	out	0x3d, r28	; 61
    a40e:	cf 91       	pop	r28
    a410:	df 91       	pop	r29
    a412:	1f 91       	pop	r17
    a414:	0f 91       	pop	r16
    a416:	08 95       	ret

0000a418 <vdmSeqIndsGC>:


TVP vdmSeqIndsGC(TVP seq, TVP *from)
{
    a418:	0f 93       	push	r16
    a41a:	1f 93       	push	r17
    a41c:	df 93       	push	r29
    a41e:	cf 93       	push	r28
    a420:	cd b7       	in	r28, 0x3d	; 61
    a422:	de b7       	in	r29, 0x3e	; 62
    a424:	2c 97       	sbiw	r28, 0x0c	; 12
    a426:	0f b6       	in	r0, 0x3f	; 63
    a428:	f8 94       	cli
    a42a:	de bf       	out	0x3e, r29	; 62
    a42c:	0f be       	out	0x3f, r0	; 63
    a42e:	cd bf       	out	0x3d, r28	; 61
    a430:	9a 87       	std	Y+10, r25	; 0x0a
    a432:	89 87       	std	Y+9, r24	; 0x09
    a434:	7c 87       	std	Y+12, r23	; 0x0c
    a436:	6b 87       	std	Y+11, r22	; 0x0b
	int i;

	ASSERT_CHECK(seq);
    a438:	e9 85       	ldd	r30, Y+9	; 0x09
    a43a:	fa 85       	ldd	r31, Y+10	; 0x0a
    a43c:	80 81       	ld	r24, Z
    a43e:	91 81       	ldd	r25, Z+1	; 0x01
    a440:	88 30       	cpi	r24, 0x08	; 8
    a442:	91 05       	cpc	r25, r1
    a444:	11 f0       	breq	.+4      	; 0xa44a <vdmSeqIndsGC+0x32>
    a446:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a44a:	e9 85       	ldd	r30, Y+9	; 0x09
    a44c:	fa 85       	ldd	r31, Y+10	; 0x0a
    a44e:	84 81       	ldd	r24, Z+4	; 0x04
    a450:	95 81       	ldd	r25, Z+5	; 0x05
    a452:	9e 83       	std	Y+6, r25	; 0x06
    a454:	8d 83       	std	Y+5, r24	; 0x05

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
    a456:	ed 81       	ldd	r30, Y+5	; 0x05
    a458:	fe 81       	ldd	r31, Y+6	; 0x06
    a45a:	82 81       	ldd	r24, Z+2	; 0x02
    a45c:	93 81       	ldd	r25, Z+3	; 0x03
    a45e:	62 e0       	ldi	r22, 0x02	; 2
    a460:	70 e0       	ldi	r23, 0x00	; 0
    a462:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    a466:	9c 83       	std	Y+4, r25	; 0x04
    a468:	8b 83       	std	Y+3, r24	; 0x03
	assert(value != NULL);
    a46a:	8b 81       	ldd	r24, Y+3	; 0x03
    a46c:	9c 81       	ldd	r25, Y+4	; 0x04
    a46e:	00 97       	sbiw	r24, 0x00	; 0
    a470:	11 f4       	brne	.+4      	; 0xa476 <vdmSeqIndsGC+0x5e>
    a472:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a476:	18 86       	std	Y+8, r1	; 0x08
    a478:	1f 82       	std	Y+7, r1	; 0x07
    a47a:	17 c0       	rjmp	.+46     	; 0xa4aa <vdmSeqIndsGC+0x92>
	{
		value[i] = newInt(i+1);
    a47c:	8f 81       	ldd	r24, Y+7	; 0x07
    a47e:	98 85       	ldd	r25, Y+8	; 0x08
    a480:	9c 01       	movw	r18, r24
    a482:	22 0f       	add	r18, r18
    a484:	33 1f       	adc	r19, r19
    a486:	8b 81       	ldd	r24, Y+3	; 0x03
    a488:	9c 81       	ldd	r25, Y+4	; 0x04
    a48a:	8c 01       	movw	r16, r24
    a48c:	02 0f       	add	r16, r18
    a48e:	13 1f       	adc	r17, r19
    a490:	8f 81       	ldd	r24, Y+7	; 0x07
    a492:	98 85       	ldd	r25, Y+8	; 0x08
    a494:	01 96       	adiw	r24, 0x01	; 1
    a496:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    a49a:	f8 01       	movw	r30, r16
    a49c:	91 83       	std	Z+1, r25	; 0x01
    a49e:	80 83       	st	Z, r24

	TVP* value = (TVP*) calloc(col->size, sizeof(TVP));
	assert(value != NULL);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a4a0:	8f 81       	ldd	r24, Y+7	; 0x07
    a4a2:	98 85       	ldd	r25, Y+8	; 0x08
    a4a4:	01 96       	adiw	r24, 0x01	; 1
    a4a6:	98 87       	std	Y+8, r25	; 0x08
    a4a8:	8f 83       	std	Y+7, r24	; 0x07
    a4aa:	ed 81       	ldd	r30, Y+5	; 0x05
    a4ac:	fe 81       	ldd	r31, Y+6	; 0x06
    a4ae:	22 81       	ldd	r18, Z+2	; 0x02
    a4b0:	33 81       	ldd	r19, Z+3	; 0x03
    a4b2:	8f 81       	ldd	r24, Y+7	; 0x07
    a4b4:	98 85       	ldd	r25, Y+8	; 0x08
    a4b6:	82 17       	cp	r24, r18
    a4b8:	93 07       	cpc	r25, r19
    a4ba:	04 f3       	brlt	.-64     	; 0xa47c <vdmSeqIndsGC+0x64>
	{
		value[i] = newInt(i+1);
	}

	TVP indsVal = newSetWithValuesGC(col->size, value, from);
    a4bc:	ed 81       	ldd	r30, Y+5	; 0x05
    a4be:	fe 81       	ldd	r31, Y+6	; 0x06
    a4c0:	82 81       	ldd	r24, Z+2	; 0x02
    a4c2:	93 81       	ldd	r25, Z+3	; 0x03
    a4c4:	2b 81       	ldd	r18, Y+3	; 0x03
    a4c6:	3c 81       	ldd	r19, Y+4	; 0x04
    a4c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    a4ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    a4cc:	b9 01       	movw	r22, r18
    a4ce:	0e 94 31 57 	call	0xae62	; 0xae62 <newSetWithValuesGC>
    a4d2:	9a 83       	std	Y+2, r25	; 0x02
    a4d4:	89 83       	std	Y+1, r24	; 0x01

	return indsVal;
    a4d6:	89 81       	ldd	r24, Y+1	; 0x01
    a4d8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a4da:	2c 96       	adiw	r28, 0x0c	; 12
    a4dc:	0f b6       	in	r0, 0x3f	; 63
    a4de:	f8 94       	cli
    a4e0:	de bf       	out	0x3e, r29	; 62
    a4e2:	0f be       	out	0x3f, r0	; 63
    a4e4:	cd bf       	out	0x3d, r28	; 61
    a4e6:	cf 91       	pop	r28
    a4e8:	df 91       	pop	r29
    a4ea:	1f 91       	pop	r17
    a4ec:	0f 91       	pop	r16
    a4ee:	08 95       	ret

0000a4f0 <vdmSeqConc>:
#endif

TVP vdmSeqConc(TVP seq,TVP seq2)
{
    a4f0:	0f 93       	push	r16
    a4f2:	1f 93       	push	r17
    a4f4:	df 93       	push	r29
    a4f6:	cf 93       	push	r28
    a4f8:	cd b7       	in	r28, 0x3d	; 61
    a4fa:	de b7       	in	r29, 0x3e	; 62
    a4fc:	60 97       	sbiw	r28, 0x10	; 16
    a4fe:	0f b6       	in	r0, 0x3f	; 63
    a500:	f8 94       	cli
    a502:	de bf       	out	0x3e, r29	; 62
    a504:	0f be       	out	0x3f, r0	; 63
    a506:	cd bf       	out	0x3d, r28	; 61
    a508:	9e 87       	std	Y+14, r25	; 0x0e
    a50a:	8d 87       	std	Y+13, r24	; 0x0d
    a50c:	78 8b       	std	Y+16, r23	; 0x10
    a50e:	6f 87       	std	Y+15, r22	; 0x0f
	int i;

	ASSERT_CHECK(seq);
    a510:	ed 85       	ldd	r30, Y+13	; 0x0d
    a512:	fe 85       	ldd	r31, Y+14	; 0x0e
    a514:	80 81       	ld	r24, Z
    a516:	91 81       	ldd	r25, Z+1	; 0x01
    a518:	88 30       	cpi	r24, 0x08	; 8
    a51a:	91 05       	cpc	r25, r1
    a51c:	11 f0       	breq	.+4      	; 0xa522 <vdmSeqConc+0x32>
    a51e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(seq2);
    a522:	ef 85       	ldd	r30, Y+15	; 0x0f
    a524:	f8 89       	ldd	r31, Y+16	; 0x10
    a526:	80 81       	ld	r24, Z
    a528:	91 81       	ldd	r25, Z+1	; 0x01
    a52a:	88 30       	cpi	r24, 0x08	; 8
    a52c:	91 05       	cpc	r25, r1
    a52e:	11 f0       	breq	.+4      	; 0xa534 <vdmSeqConc+0x44>
    a530:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a534:	ed 85       	ldd	r30, Y+13	; 0x0d
    a536:	fe 85       	ldd	r31, Y+14	; 0x0e
    a538:	84 81       	ldd	r24, Z+4	; 0x04
    a53a:	95 81       	ldd	r25, Z+5	; 0x05
    a53c:	9a 87       	std	Y+10, r25	; 0x0a
    a53e:	89 87       	std	Y+9, r24	; 0x09
	UNWRAP_COLLECTION(col2,seq2);
    a540:	ef 85       	ldd	r30, Y+15	; 0x0f
    a542:	f8 89       	ldd	r31, Y+16	; 0x10
    a544:	84 81       	ldd	r24, Z+4	; 0x04
    a546:	95 81       	ldd	r25, Z+5	; 0x05
    a548:	98 87       	std	Y+8, r25	; 0x08
    a54a:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP concVal = newSeq(col->size+col2->size);
    a54c:	e9 85       	ldd	r30, Y+9	; 0x09
    a54e:	fa 85       	ldd	r31, Y+10	; 0x0a
    a550:	22 81       	ldd	r18, Z+2	; 0x02
    a552:	33 81       	ldd	r19, Z+3	; 0x03
    a554:	ef 81       	ldd	r30, Y+7	; 0x07
    a556:	f8 85       	ldd	r31, Y+8	; 0x08
    a558:	82 81       	ldd	r24, Z+2	; 0x02
    a55a:	93 81       	ldd	r25, Z+3	; 0x03
    a55c:	82 0f       	add	r24, r18
    a55e:	93 1f       	adc	r25, r19
    a560:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <newSeq>
    a564:	9e 83       	std	Y+6, r25	; 0x06
    a566:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(concSeq,concVal);
    a568:	ed 81       	ldd	r30, Y+5	; 0x05
    a56a:	fe 81       	ldd	r31, Y+6	; 0x06
    a56c:	84 81       	ldd	r24, Z+4	; 0x04
    a56e:	95 81       	ldd	r25, Z+5	; 0x05
    a570:	9c 83       	std	Y+4, r25	; 0x04
    a572:	8b 83       	std	Y+3, r24	; 0x03

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a574:	1c 86       	std	Y+12, r1	; 0x0c
    a576:	1b 86       	std	Y+11, r1	; 0x0b
    a578:	22 c0       	rjmp	.+68     	; 0xa5be <vdmSeqConc+0xce>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
    a57a:	eb 81       	ldd	r30, Y+3	; 0x03
    a57c:	fc 81       	ldd	r31, Y+4	; 0x04
    a57e:	20 81       	ld	r18, Z
    a580:	31 81       	ldd	r19, Z+1	; 0x01
    a582:	8b 85       	ldd	r24, Y+11	; 0x0b
    a584:	9c 85       	ldd	r25, Y+12	; 0x0c
    a586:	88 0f       	add	r24, r24
    a588:	99 1f       	adc	r25, r25
    a58a:	89 01       	movw	r16, r18
    a58c:	08 0f       	add	r16, r24
    a58e:	19 1f       	adc	r17, r25
    a590:	e9 85       	ldd	r30, Y+9	; 0x09
    a592:	fa 85       	ldd	r31, Y+10	; 0x0a
    a594:	20 81       	ld	r18, Z
    a596:	31 81       	ldd	r19, Z+1	; 0x01
    a598:	8b 85       	ldd	r24, Y+11	; 0x0b
    a59a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a59c:	88 0f       	add	r24, r24
    a59e:	99 1f       	adc	r25, r25
    a5a0:	f9 01       	movw	r30, r18
    a5a2:	e8 0f       	add	r30, r24
    a5a4:	f9 1f       	adc	r31, r25
    a5a6:	80 81       	ld	r24, Z
    a5a8:	91 81       	ldd	r25, Z+1	; 0x01
    a5aa:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a5ae:	f8 01       	movw	r30, r16
    a5b0:	91 83       	std	Z+1, r25	; 0x01
    a5b2:	80 83       	st	Z, r24
	/* malloc  */
	TVP concVal = newSeq(col->size+col2->size);
	UNWRAP_COLLECTION(concSeq,concVal);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a5b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    a5b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    a5b8:	01 96       	adiw	r24, 0x01	; 1
    a5ba:	9c 87       	std	Y+12, r25	; 0x0c
    a5bc:	8b 87       	std	Y+11, r24	; 0x0b
    a5be:	e9 85       	ldd	r30, Y+9	; 0x09
    a5c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    a5c2:	22 81       	ldd	r18, Z+2	; 0x02
    a5c4:	33 81       	ldd	r19, Z+3	; 0x03
    a5c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    a5c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    a5ca:	82 17       	cp	r24, r18
    a5cc:	93 07       	cpc	r25, r19
    a5ce:	ac f2       	brlt	.-86     	; 0xa57a <vdmSeqConc+0x8a>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
    a5d0:	e9 85       	ldd	r30, Y+9	; 0x09
    a5d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    a5d4:	82 81       	ldd	r24, Z+2	; 0x02
    a5d6:	93 81       	ldd	r25, Z+3	; 0x03
    a5d8:	9a 83       	std	Y+2, r25	; 0x02
    a5da:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0; i < col2->size; i++)
    a5dc:	1c 86       	std	Y+12, r1	; 0x0c
    a5de:	1b 86       	std	Y+11, r1	; 0x0b
    a5e0:	26 c0       	rjmp	.+76     	; 0xa62e <vdmSeqConc+0x13e>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
    a5e2:	eb 81       	ldd	r30, Y+3	; 0x03
    a5e4:	fc 81       	ldd	r31, Y+4	; 0x04
    a5e6:	40 81       	ld	r20, Z
    a5e8:	51 81       	ldd	r21, Z+1	; 0x01
    a5ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    a5ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    a5ee:	89 81       	ldd	r24, Y+1	; 0x01
    a5f0:	9a 81       	ldd	r25, Y+2	; 0x02
    a5f2:	82 0f       	add	r24, r18
    a5f4:	93 1f       	adc	r25, r19
    a5f6:	88 0f       	add	r24, r24
    a5f8:	99 1f       	adc	r25, r25
    a5fa:	8a 01       	movw	r16, r20
    a5fc:	08 0f       	add	r16, r24
    a5fe:	19 1f       	adc	r17, r25
    a600:	ef 81       	ldd	r30, Y+7	; 0x07
    a602:	f8 85       	ldd	r31, Y+8	; 0x08
    a604:	20 81       	ld	r18, Z
    a606:	31 81       	ldd	r19, Z+1	; 0x01
    a608:	8b 85       	ldd	r24, Y+11	; 0x0b
    a60a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a60c:	88 0f       	add	r24, r24
    a60e:	99 1f       	adc	r25, r25
    a610:	f9 01       	movw	r30, r18
    a612:	e8 0f       	add	r30, r24
    a614:	f9 1f       	adc	r31, r25
    a616:	80 81       	ld	r24, Z
    a618:	91 81       	ldd	r25, Z+1	; 0x01
    a61a:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a61e:	f8 01       	movw	r30, r16
    a620:	91 83       	std	Z+1, r25	; 0x01
    a622:	80 83       	st	Z, r24
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
    a624:	8b 85       	ldd	r24, Y+11	; 0x0b
    a626:	9c 85       	ldd	r25, Y+12	; 0x0c
    a628:	01 96       	adiw	r24, 0x01	; 1
    a62a:	9c 87       	std	Y+12, r25	; 0x0c
    a62c:	8b 87       	std	Y+11, r24	; 0x0b
    a62e:	ef 81       	ldd	r30, Y+7	; 0x07
    a630:	f8 85       	ldd	r31, Y+8	; 0x08
    a632:	22 81       	ldd	r18, Z+2	; 0x02
    a634:	33 81       	ldd	r19, Z+3	; 0x03
    a636:	8b 85       	ldd	r24, Y+11	; 0x0b
    a638:	9c 85       	ldd	r25, Y+12	; 0x0c
    a63a:	82 17       	cp	r24, r18
    a63c:	93 07       	cpc	r25, r19
    a63e:	8c f2       	brlt	.-94     	; 0xa5e2 <vdmSeqConc+0xf2>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
	}

	return concVal;
    a640:	8d 81       	ldd	r24, Y+5	; 0x05
    a642:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a644:	60 96       	adiw	r28, 0x10	; 16
    a646:	0f b6       	in	r0, 0x3f	; 63
    a648:	f8 94       	cli
    a64a:	de bf       	out	0x3e, r29	; 62
    a64c:	0f be       	out	0x3f, r0	; 63
    a64e:	cd bf       	out	0x3d, r28	; 61
    a650:	cf 91       	pop	r28
    a652:	df 91       	pop	r29
    a654:	1f 91       	pop	r17
    a656:	0f 91       	pop	r16
    a658:	08 95       	ret

0000a65a <vdmSeqConcGC>:

TVP vdmSeqConcGC(TVP seq, TVP seq2, TVP *from)
{
    a65a:	0f 93       	push	r16
    a65c:	1f 93       	push	r17
    a65e:	df 93       	push	r29
    a660:	cf 93       	push	r28
    a662:	cd b7       	in	r28, 0x3d	; 61
    a664:	de b7       	in	r29, 0x3e	; 62
    a666:	62 97       	sbiw	r28, 0x12	; 18
    a668:	0f b6       	in	r0, 0x3f	; 63
    a66a:	f8 94       	cli
    a66c:	de bf       	out	0x3e, r29	; 62
    a66e:	0f be       	out	0x3f, r0	; 63
    a670:	cd bf       	out	0x3d, r28	; 61
    a672:	9e 87       	std	Y+14, r25	; 0x0e
    a674:	8d 87       	std	Y+13, r24	; 0x0d
    a676:	78 8b       	std	Y+16, r23	; 0x10
    a678:	6f 87       	std	Y+15, r22	; 0x0f
    a67a:	5a 8b       	std	Y+18, r21	; 0x12
    a67c:	49 8b       	std	Y+17, r20	; 0x11
	int i;

	ASSERT_CHECK(seq);
    a67e:	ed 85       	ldd	r30, Y+13	; 0x0d
    a680:	fe 85       	ldd	r31, Y+14	; 0x0e
    a682:	80 81       	ld	r24, Z
    a684:	91 81       	ldd	r25, Z+1	; 0x01
    a686:	88 30       	cpi	r24, 0x08	; 8
    a688:	91 05       	cpc	r25, r1
    a68a:	11 f0       	breq	.+4      	; 0xa690 <vdmSeqConcGC+0x36>
    a68c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(seq2);
    a690:	ef 85       	ldd	r30, Y+15	; 0x0f
    a692:	f8 89       	ldd	r31, Y+16	; 0x10
    a694:	80 81       	ld	r24, Z
    a696:	91 81       	ldd	r25, Z+1	; 0x01
    a698:	88 30       	cpi	r24, 0x08	; 8
    a69a:	91 05       	cpc	r25, r1
    a69c:	11 f0       	breq	.+4      	; 0xa6a2 <vdmSeqConcGC+0x48>
    a69e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a6a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    a6a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    a6a6:	84 81       	ldd	r24, Z+4	; 0x04
    a6a8:	95 81       	ldd	r25, Z+5	; 0x05
    a6aa:	9a 87       	std	Y+10, r25	; 0x0a
    a6ac:	89 87       	std	Y+9, r24	; 0x09
	UNWRAP_COLLECTION(col2,seq2);
    a6ae:	ef 85       	ldd	r30, Y+15	; 0x0f
    a6b0:	f8 89       	ldd	r31, Y+16	; 0x10
    a6b2:	84 81       	ldd	r24, Z+4	; 0x04
    a6b4:	95 81       	ldd	r25, Z+5	; 0x05
    a6b6:	98 87       	std	Y+8, r25	; 0x08
    a6b8:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP concVal = newSeqGC(col->size+col2->size, from);
    a6ba:	e9 85       	ldd	r30, Y+9	; 0x09
    a6bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    a6be:	22 81       	ldd	r18, Z+2	; 0x02
    a6c0:	33 81       	ldd	r19, Z+3	; 0x03
    a6c2:	ef 81       	ldd	r30, Y+7	; 0x07
    a6c4:	f8 85       	ldd	r31, Y+8	; 0x08
    a6c6:	82 81       	ldd	r24, Z+2	; 0x02
    a6c8:	93 81       	ldd	r25, Z+3	; 0x03
    a6ca:	82 0f       	add	r24, r18
    a6cc:	93 1f       	adc	r25, r19
    a6ce:	29 89       	ldd	r18, Y+17	; 0x11
    a6d0:	3a 89       	ldd	r19, Y+18	; 0x12
    a6d2:	b9 01       	movw	r22, r18
    a6d4:	0e 94 7e 4d 	call	0x9afc	; 0x9afc <newSeqGC>
    a6d8:	9e 83       	std	Y+6, r25	; 0x06
    a6da:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(concSeq,concVal);
    a6dc:	ed 81       	ldd	r30, Y+5	; 0x05
    a6de:	fe 81       	ldd	r31, Y+6	; 0x06
    a6e0:	84 81       	ldd	r24, Z+4	; 0x04
    a6e2:	95 81       	ldd	r25, Z+5	; 0x05
    a6e4:	9c 83       	std	Y+4, r25	; 0x04
    a6e6:	8b 83       	std	Y+3, r24	; 0x03

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a6e8:	1c 86       	std	Y+12, r1	; 0x0c
    a6ea:	1b 86       	std	Y+11, r1	; 0x0b
    a6ec:	22 c0       	rjmp	.+68     	; 0xa732 <vdmSeqConcGC+0xd8>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
    a6ee:	eb 81       	ldd	r30, Y+3	; 0x03
    a6f0:	fc 81       	ldd	r31, Y+4	; 0x04
    a6f2:	20 81       	ld	r18, Z
    a6f4:	31 81       	ldd	r19, Z+1	; 0x01
    a6f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    a6f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    a6fa:	88 0f       	add	r24, r24
    a6fc:	99 1f       	adc	r25, r25
    a6fe:	89 01       	movw	r16, r18
    a700:	08 0f       	add	r16, r24
    a702:	19 1f       	adc	r17, r25
    a704:	e9 85       	ldd	r30, Y+9	; 0x09
    a706:	fa 85       	ldd	r31, Y+10	; 0x0a
    a708:	20 81       	ld	r18, Z
    a70a:	31 81       	ldd	r19, Z+1	; 0x01
    a70c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a70e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a710:	88 0f       	add	r24, r24
    a712:	99 1f       	adc	r25, r25
    a714:	f9 01       	movw	r30, r18
    a716:	e8 0f       	add	r30, r24
    a718:	f9 1f       	adc	r31, r25
    a71a:	80 81       	ld	r24, Z
    a71c:	91 81       	ldd	r25, Z+1	; 0x01
    a71e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a722:	f8 01       	movw	r30, r16
    a724:	91 83       	std	Z+1, r25	; 0x01
    a726:	80 83       	st	Z, r24
	/* malloc  */
	TVP concVal = newSeqGC(col->size+col2->size, from);
	UNWRAP_COLLECTION(concSeq,concVal);

	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a728:	8b 85       	ldd	r24, Y+11	; 0x0b
    a72a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a72c:	01 96       	adiw	r24, 0x01	; 1
    a72e:	9c 87       	std	Y+12, r25	; 0x0c
    a730:	8b 87       	std	Y+11, r24	; 0x0b
    a732:	e9 85       	ldd	r30, Y+9	; 0x09
    a734:	fa 85       	ldd	r31, Y+10	; 0x0a
    a736:	22 81       	ldd	r18, Z+2	; 0x02
    a738:	33 81       	ldd	r19, Z+3	; 0x03
    a73a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a73c:	9c 85       	ldd	r25, Y+12	; 0x0c
    a73e:	82 17       	cp	r24, r18
    a740:	93 07       	cpc	r25, r19
    a742:	ac f2       	brlt	.-86     	; 0xa6ee <vdmSeqConcGC+0x94>
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
    a744:	e9 85       	ldd	r30, Y+9	; 0x09
    a746:	fa 85       	ldd	r31, Y+10	; 0x0a
    a748:	82 81       	ldd	r24, Z+2	; 0x02
    a74a:	93 81       	ldd	r25, Z+3	; 0x03
    a74c:	9a 83       	std	Y+2, r25	; 0x02
    a74e:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0; i < col2->size; i++)
    a750:	1c 86       	std	Y+12, r1	; 0x0c
    a752:	1b 86       	std	Y+11, r1	; 0x0b
    a754:	26 c0       	rjmp	.+76     	; 0xa7a2 <vdmSeqConcGC+0x148>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
    a756:	eb 81       	ldd	r30, Y+3	; 0x03
    a758:	fc 81       	ldd	r31, Y+4	; 0x04
    a75a:	40 81       	ld	r20, Z
    a75c:	51 81       	ldd	r21, Z+1	; 0x01
    a75e:	2b 85       	ldd	r18, Y+11	; 0x0b
    a760:	3c 85       	ldd	r19, Y+12	; 0x0c
    a762:	89 81       	ldd	r24, Y+1	; 0x01
    a764:	9a 81       	ldd	r25, Y+2	; 0x02
    a766:	82 0f       	add	r24, r18
    a768:	93 1f       	adc	r25, r19
    a76a:	88 0f       	add	r24, r24
    a76c:	99 1f       	adc	r25, r25
    a76e:	8a 01       	movw	r16, r20
    a770:	08 0f       	add	r16, r24
    a772:	19 1f       	adc	r17, r25
    a774:	ef 81       	ldd	r30, Y+7	; 0x07
    a776:	f8 85       	ldd	r31, Y+8	; 0x08
    a778:	20 81       	ld	r18, Z
    a77a:	31 81       	ldd	r19, Z+1	; 0x01
    a77c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a77e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a780:	88 0f       	add	r24, r24
    a782:	99 1f       	adc	r25, r25
    a784:	f9 01       	movw	r30, r18
    a786:	e8 0f       	add	r30, r24
    a788:	f9 1f       	adc	r31, r25
    a78a:	80 81       	ld	r24, Z
    a78c:	91 81       	ldd	r25, Z+1	; 0x01
    a78e:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a792:	f8 01       	movw	r30, r16
    a794:	91 83       	std	Z+1, r25	; 0x01
    a796:	80 83       	st	Z, r24
	{
		concSeq->value[i] = vdmClone(col->value[i]);
	}

	int offset = col->size;
	for (i = 0; i < col2->size; i++)
    a798:	8b 85       	ldd	r24, Y+11	; 0x0b
    a79a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a79c:	01 96       	adiw	r24, 0x01	; 1
    a79e:	9c 87       	std	Y+12, r25	; 0x0c
    a7a0:	8b 87       	std	Y+11, r24	; 0x0b
    a7a2:	ef 81       	ldd	r30, Y+7	; 0x07
    a7a4:	f8 85       	ldd	r31, Y+8	; 0x08
    a7a6:	22 81       	ldd	r18, Z+2	; 0x02
    a7a8:	33 81       	ldd	r19, Z+3	; 0x03
    a7aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    a7ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    a7ae:	82 17       	cp	r24, r18
    a7b0:	93 07       	cpc	r25, r19
    a7b2:	8c f2       	brlt	.-94     	; 0xa756 <vdmSeqConcGC+0xfc>
	{
		concSeq->value[i+offset] = vdmClone(col2->value[i]);
	}

	return concVal;
    a7b4:	8d 81       	ldd	r24, Y+5	; 0x05
    a7b6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a7b8:	62 96       	adiw	r28, 0x12	; 18
    a7ba:	0f b6       	in	r0, 0x3f	; 63
    a7bc:	f8 94       	cli
    a7be:	de bf       	out	0x3e, r29	; 62
    a7c0:	0f be       	out	0x3f, r0	; 63
    a7c2:	cd bf       	out	0x3d, r28	; 61
    a7c4:	cf 91       	pop	r28
    a7c6:	df 91       	pop	r29
    a7c8:	1f 91       	pop	r17
    a7ca:	0f 91       	pop	r16
    a7cc:	08 95       	ret

0000a7ce <vdmSeqReverse>:

TVP vdmSeqReverse(TVP seq)
{
    a7ce:	0f 93       	push	r16
    a7d0:	1f 93       	push	r17
    a7d2:	df 93       	push	r29
    a7d4:	cf 93       	push	r28
    a7d6:	cd b7       	in	r28, 0x3d	; 61
    a7d8:	de b7       	in	r29, 0x3e	; 62
    a7da:	2c 97       	sbiw	r28, 0x0c	; 12
    a7dc:	0f b6       	in	r0, 0x3f	; 63
    a7de:	f8 94       	cli
    a7e0:	de bf       	out	0x3e, r29	; 62
    a7e2:	0f be       	out	0x3f, r0	; 63
    a7e4:	cd bf       	out	0x3d, r28	; 61
    a7e6:	9c 87       	std	Y+12, r25	; 0x0c
    a7e8:	8b 87       	std	Y+11, r24	; 0x0b
	int i;

	ASSERT_CHECK(seq);
    a7ea:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7ec:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7ee:	80 81       	ld	r24, Z
    a7f0:	91 81       	ldd	r25, Z+1	; 0x01
    a7f2:	88 30       	cpi	r24, 0x08	; 8
    a7f4:	91 05       	cpc	r25, r1
    a7f6:	11 f0       	breq	.+4      	; 0xa7fc <vdmSeqReverse+0x2e>
    a7f8:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a7fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    a800:	84 81       	ldd	r24, Z+4	; 0x04
    a802:	95 81       	ldd	r25, Z+5	; 0x05
    a804:	98 87       	std	Y+8, r25	; 0x08
    a806:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP elemsVal = newSeq(col->size);
    a808:	ef 81       	ldd	r30, Y+7	; 0x07
    a80a:	f8 85       	ldd	r31, Y+8	; 0x08
    a80c:	82 81       	ldd	r24, Z+2	; 0x02
    a80e:	93 81       	ldd	r25, Z+3	; 0x03
    a810:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <newSeq>
    a814:	9e 83       	std	Y+6, r25	; 0x06
    a816:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(elems,elemsVal);
    a818:	ed 81       	ldd	r30, Y+5	; 0x05
    a81a:	fe 81       	ldd	r31, Y+6	; 0x06
    a81c:	84 81       	ldd	r24, Z+4	; 0x04
    a81e:	95 81       	ldd	r25, Z+5	; 0x05
    a820:	9c 83       	std	Y+4, r25	; 0x04
    a822:	8b 83       	std	Y+3, r24	; 0x03

	int offset = col->size-1;
    a824:	ef 81       	ldd	r30, Y+7	; 0x07
    a826:	f8 85       	ldd	r31, Y+8	; 0x08
    a828:	82 81       	ldd	r24, Z+2	; 0x02
    a82a:	93 81       	ldd	r25, Z+3	; 0x03
    a82c:	01 97       	sbiw	r24, 0x01	; 1
    a82e:	9a 83       	std	Y+2, r25	; 0x02
    a830:	89 83       	std	Y+1, r24	; 0x01
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a832:	1a 86       	std	Y+10, r1	; 0x0a
    a834:	19 86       	std	Y+9, r1	; 0x09
    a836:	28 c0       	rjmp	.+80     	; 0xa888 <vdmSeqReverse+0xba>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
    a838:	eb 81       	ldd	r30, Y+3	; 0x03
    a83a:	fc 81       	ldd	r31, Y+4	; 0x04
    a83c:	20 81       	ld	r18, Z
    a83e:	31 81       	ldd	r19, Z+1	; 0x01
    a840:	89 85       	ldd	r24, Y+9	; 0x09
    a842:	9a 85       	ldd	r25, Y+10	; 0x0a
    a844:	88 0f       	add	r24, r24
    a846:	99 1f       	adc	r25, r25
    a848:	89 01       	movw	r16, r18
    a84a:	08 0f       	add	r16, r24
    a84c:	19 1f       	adc	r17, r25
    a84e:	ef 81       	ldd	r30, Y+7	; 0x07
    a850:	f8 85       	ldd	r31, Y+8	; 0x08
    a852:	40 81       	ld	r20, Z
    a854:	51 81       	ldd	r21, Z+1	; 0x01
    a856:	29 81       	ldd	r18, Y+1	; 0x01
    a858:	3a 81       	ldd	r19, Y+2	; 0x02
    a85a:	89 85       	ldd	r24, Y+9	; 0x09
    a85c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a85e:	b9 01       	movw	r22, r18
    a860:	68 1b       	sub	r22, r24
    a862:	79 0b       	sbc	r23, r25
    a864:	cb 01       	movw	r24, r22
    a866:	88 0f       	add	r24, r24
    a868:	99 1f       	adc	r25, r25
    a86a:	fa 01       	movw	r30, r20
    a86c:	e8 0f       	add	r30, r24
    a86e:	f9 1f       	adc	r31, r25
    a870:	80 81       	ld	r24, Z
    a872:	91 81       	ldd	r25, Z+1	; 0x01
    a874:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a878:	f8 01       	movw	r30, r16
    a87a:	91 83       	std	Z+1, r25	; 0x01
    a87c:	80 83       	st	Z, r24
	TVP elemsVal = newSeq(col->size);
	UNWRAP_COLLECTION(elems,elemsVal);

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a87e:	89 85       	ldd	r24, Y+9	; 0x09
    a880:	9a 85       	ldd	r25, Y+10	; 0x0a
    a882:	01 96       	adiw	r24, 0x01	; 1
    a884:	9a 87       	std	Y+10, r25	; 0x0a
    a886:	89 87       	std	Y+9, r24	; 0x09
    a888:	ef 81       	ldd	r30, Y+7	; 0x07
    a88a:	f8 85       	ldd	r31, Y+8	; 0x08
    a88c:	22 81       	ldd	r18, Z+2	; 0x02
    a88e:	33 81       	ldd	r19, Z+3	; 0x03
    a890:	89 85       	ldd	r24, Y+9	; 0x09
    a892:	9a 85       	ldd	r25, Y+10	; 0x0a
    a894:	82 17       	cp	r24, r18
    a896:	93 07       	cpc	r25, r19
    a898:	7c f2       	brlt	.-98     	; 0xa838 <vdmSeqReverse+0x6a>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
	}

	return elemsVal;
    a89a:	8d 81       	ldd	r24, Y+5	; 0x05
    a89c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a89e:	2c 96       	adiw	r28, 0x0c	; 12
    a8a0:	0f b6       	in	r0, 0x3f	; 63
    a8a2:	f8 94       	cli
    a8a4:	de bf       	out	0x3e, r29	; 62
    a8a6:	0f be       	out	0x3f, r0	; 63
    a8a8:	cd bf       	out	0x3d, r28	; 61
    a8aa:	cf 91       	pop	r28
    a8ac:	df 91       	pop	r29
    a8ae:	1f 91       	pop	r17
    a8b0:	0f 91       	pop	r16
    a8b2:	08 95       	ret

0000a8b4 <vdmSeqReverseGC>:

TVP vdmSeqReverseGC(TVP seq, TVP *from)
{
    a8b4:	0f 93       	push	r16
    a8b6:	1f 93       	push	r17
    a8b8:	df 93       	push	r29
    a8ba:	cf 93       	push	r28
    a8bc:	cd b7       	in	r28, 0x3d	; 61
    a8be:	de b7       	in	r29, 0x3e	; 62
    a8c0:	2e 97       	sbiw	r28, 0x0e	; 14
    a8c2:	0f b6       	in	r0, 0x3f	; 63
    a8c4:	f8 94       	cli
    a8c6:	de bf       	out	0x3e, r29	; 62
    a8c8:	0f be       	out	0x3f, r0	; 63
    a8ca:	cd bf       	out	0x3d, r28	; 61
    a8cc:	9c 87       	std	Y+12, r25	; 0x0c
    a8ce:	8b 87       	std	Y+11, r24	; 0x0b
    a8d0:	7e 87       	std	Y+14, r23	; 0x0e
    a8d2:	6d 87       	std	Y+13, r22	; 0x0d
	int i;

	ASSERT_CHECK(seq);
    a8d4:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8d6:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8d8:	80 81       	ld	r24, Z
    a8da:	91 81       	ldd	r25, Z+1	; 0x01
    a8dc:	88 30       	cpi	r24, 0x08	; 8
    a8de:	91 05       	cpc	r25, r1
    a8e0:	11 f0       	breq	.+4      	; 0xa8e6 <vdmSeqReverseGC+0x32>
    a8e2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col,seq);
    a8e6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8e8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8ea:	84 81       	ldd	r24, Z+4	; 0x04
    a8ec:	95 81       	ldd	r25, Z+5	; 0x05
    a8ee:	98 87       	std	Y+8, r25	; 0x08
    a8f0:	8f 83       	std	Y+7, r24	; 0x07

	/* malloc  */
	TVP elemsVal = newSeqGC(col->size, from);
    a8f2:	ef 81       	ldd	r30, Y+7	; 0x07
    a8f4:	f8 85       	ldd	r31, Y+8	; 0x08
    a8f6:	82 81       	ldd	r24, Z+2	; 0x02
    a8f8:	93 81       	ldd	r25, Z+3	; 0x03
    a8fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    a8fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    a8fe:	b9 01       	movw	r22, r18
    a900:	0e 94 7e 4d 	call	0x9afc	; 0x9afc <newSeqGC>
    a904:	9e 83       	std	Y+6, r25	; 0x06
    a906:	8d 83       	std	Y+5, r24	; 0x05
	UNWRAP_COLLECTION(elems,elemsVal);
    a908:	ed 81       	ldd	r30, Y+5	; 0x05
    a90a:	fe 81       	ldd	r31, Y+6	; 0x06
    a90c:	84 81       	ldd	r24, Z+4	; 0x04
    a90e:	95 81       	ldd	r25, Z+5	; 0x05
    a910:	9c 83       	std	Y+4, r25	; 0x04
    a912:	8b 83       	std	Y+3, r24	; 0x03

	int offset = col->size-1;
    a914:	ef 81       	ldd	r30, Y+7	; 0x07
    a916:	f8 85       	ldd	r31, Y+8	; 0x08
    a918:	82 81       	ldd	r24, Z+2	; 0x02
    a91a:	93 81       	ldd	r25, Z+3	; 0x03
    a91c:	01 97       	sbiw	r24, 0x01	; 1
    a91e:	9a 83       	std	Y+2, r25	; 0x02
    a920:	89 83       	std	Y+1, r24	; 0x01
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a922:	1a 86       	std	Y+10, r1	; 0x0a
    a924:	19 86       	std	Y+9, r1	; 0x09
    a926:	28 c0       	rjmp	.+80     	; 0xa978 <vdmSeqReverseGC+0xc4>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
    a928:	eb 81       	ldd	r30, Y+3	; 0x03
    a92a:	fc 81       	ldd	r31, Y+4	; 0x04
    a92c:	20 81       	ld	r18, Z
    a92e:	31 81       	ldd	r19, Z+1	; 0x01
    a930:	89 85       	ldd	r24, Y+9	; 0x09
    a932:	9a 85       	ldd	r25, Y+10	; 0x0a
    a934:	88 0f       	add	r24, r24
    a936:	99 1f       	adc	r25, r25
    a938:	89 01       	movw	r16, r18
    a93a:	08 0f       	add	r16, r24
    a93c:	19 1f       	adc	r17, r25
    a93e:	ef 81       	ldd	r30, Y+7	; 0x07
    a940:	f8 85       	ldd	r31, Y+8	; 0x08
    a942:	40 81       	ld	r20, Z
    a944:	51 81       	ldd	r21, Z+1	; 0x01
    a946:	29 81       	ldd	r18, Y+1	; 0x01
    a948:	3a 81       	ldd	r19, Y+2	; 0x02
    a94a:	89 85       	ldd	r24, Y+9	; 0x09
    a94c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a94e:	b9 01       	movw	r22, r18
    a950:	68 1b       	sub	r22, r24
    a952:	79 0b       	sbc	r23, r25
    a954:	cb 01       	movw	r24, r22
    a956:	88 0f       	add	r24, r24
    a958:	99 1f       	adc	r25, r25
    a95a:	fa 01       	movw	r30, r20
    a95c:	e8 0f       	add	r30, r24
    a95e:	f9 1f       	adc	r31, r25
    a960:	80 81       	ld	r24, Z
    a962:	91 81       	ldd	r25, Z+1	; 0x01
    a964:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    a968:	f8 01       	movw	r30, r16
    a96a:	91 83       	std	Z+1, r25	; 0x01
    a96c:	80 83       	st	Z, r24
	TVP elemsVal = newSeqGC(col->size, from);
	UNWRAP_COLLECTION(elems,elemsVal);

	int offset = col->size-1;
	/* copy  list  */
	for (i = 0; i < col->size; i++)
    a96e:	89 85       	ldd	r24, Y+9	; 0x09
    a970:	9a 85       	ldd	r25, Y+10	; 0x0a
    a972:	01 96       	adiw	r24, 0x01	; 1
    a974:	9a 87       	std	Y+10, r25	; 0x0a
    a976:	89 87       	std	Y+9, r24	; 0x09
    a978:	ef 81       	ldd	r30, Y+7	; 0x07
    a97a:	f8 85       	ldd	r31, Y+8	; 0x08
    a97c:	22 81       	ldd	r18, Z+2	; 0x02
    a97e:	33 81       	ldd	r19, Z+3	; 0x03
    a980:	89 85       	ldd	r24, Y+9	; 0x09
    a982:	9a 85       	ldd	r25, Y+10	; 0x0a
    a984:	82 17       	cp	r24, r18
    a986:	93 07       	cpc	r25, r19
    a988:	7c f2       	brlt	.-98     	; 0xa928 <vdmSeqReverseGC+0x74>
	{
		elems->value[i] = vdmClone(col->value[offset - i]);
	}

	return elemsVal;
    a98a:	8d 81       	ldd	r24, Y+5	; 0x05
    a98c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a98e:	2e 96       	adiw	r28, 0x0e	; 14
    a990:	0f b6       	in	r0, 0x3f	; 63
    a992:	f8 94       	cli
    a994:	de bf       	out	0x3e, r29	; 62
    a996:	0f be       	out	0x3f, r0	; 63
    a998:	cd bf       	out	0x3d, r28	; 61
    a99a:	cf 91       	pop	r28
    a99c:	df 91       	pop	r29
    a99e:	1f 91       	pop	r17
    a9a0:	0f 91       	pop	r16
    a9a2:	08 95       	ret

0000a9a4 <vdmSeqIndex>:

/* TVP seqMod(TVP seq,TVP seq);  */

TVP vdmSeqIndex(TVP seq, TVP indexVal) /* VDM uses 1 based index  */
{
    a9a4:	df 93       	push	r29
    a9a6:	cf 93       	push	r28
    a9a8:	cd b7       	in	r28, 0x3d	; 61
    a9aa:	de b7       	in	r29, 0x3e	; 62
    a9ac:	28 97       	sbiw	r28, 0x08	; 8
    a9ae:	0f b6       	in	r0, 0x3f	; 63
    a9b0:	f8 94       	cli
    a9b2:	de bf       	out	0x3e, r29	; 62
    a9b4:	0f be       	out	0x3f, r0	; 63
    a9b6:	cd bf       	out	0x3d, r28	; 61
    a9b8:	9e 83       	std	Y+6, r25	; 0x06
    a9ba:	8d 83       	std	Y+5, r24	; 0x05
    a9bc:	78 87       	std	Y+8, r23	; 0x08
    a9be:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK(seq);
    a9c0:	ed 81       	ldd	r30, Y+5	; 0x05
    a9c2:	fe 81       	ldd	r31, Y+6	; 0x06
    a9c4:	80 81       	ld	r24, Z
    a9c6:	91 81       	ldd	r25, Z+1	; 0x01
    a9c8:	88 30       	cpi	r24, 0x08	; 8
    a9ca:	91 05       	cpc	r25, r1
    a9cc:	11 f0       	breq	.+4      	; 0xa9d2 <vdmSeqIndex+0x2e>
    a9ce:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    a9d2:	ef 81       	ldd	r30, Y+7	; 0x07
    a9d4:	f8 85       	ldd	r31, Y+8	; 0x08
    a9d6:	80 81       	ld	r24, Z
    a9d8:	91 81       	ldd	r25, Z+1	; 0x01
    a9da:	00 97       	sbiw	r24, 0x00	; 0
    a9dc:	81 f0       	breq	.+32     	; 0xa9fe <vdmSeqIndex+0x5a>
    a9de:	ef 81       	ldd	r30, Y+7	; 0x07
    a9e0:	f8 85       	ldd	r31, Y+8	; 0x08
    a9e2:	80 81       	ld	r24, Z
    a9e4:	91 81       	ldd	r25, Z+1	; 0x01
    a9e6:	81 30       	cpi	r24, 0x01	; 1
    a9e8:	91 05       	cpc	r25, r1
    a9ea:	49 f0       	breq	.+18     	; 0xa9fe <vdmSeqIndex+0x5a>
    a9ec:	ef 81       	ldd	r30, Y+7	; 0x07
    a9ee:	f8 85       	ldd	r31, Y+8	; 0x08
    a9f0:	80 81       	ld	r24, Z
    a9f2:	91 81       	ldd	r25, Z+1	; 0x01
    a9f4:	82 30       	cpi	r24, 0x02	; 2
    a9f6:	91 05       	cpc	r25, r1
    a9f8:	11 f0       	breq	.+4      	; 0xa9fe <vdmSeqIndex+0x5a>
    a9fa:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	int index = indexVal->value.intVal;
    a9fe:	ef 81       	ldd	r30, Y+7	; 0x07
    aa00:	f8 85       	ldd	r31, Y+8	; 0x08
    aa02:	84 81       	ldd	r24, Z+4	; 0x04
    aa04:	95 81       	ldd	r25, Z+5	; 0x05
    aa06:	9c 83       	std	Y+4, r25	; 0x04
    aa08:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,seq);
    aa0a:	ed 81       	ldd	r30, Y+5	; 0x05
    aa0c:	fe 81       	ldd	r31, Y+6	; 0x06
    aa0e:	84 81       	ldd	r24, Z+4	; 0x04
    aa10:	95 81       	ldd	r25, Z+5	; 0x05
    aa12:	9a 83       	std	Y+2, r25	; 0x02
    aa14:	89 83       	std	Y+1, r24	; 0x01

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    aa16:	8b 81       	ldd	r24, Y+3	; 0x03
    aa18:	9c 81       	ldd	r25, Y+4	; 0x04
    aa1a:	01 97       	sbiw	r24, 0x01	; 1
    aa1c:	99 23       	and	r25, r25
    aa1e:	64 f0       	brlt	.+24     	; 0xaa38 <vdmSeqIndex+0x94>
    aa20:	8b 81       	ldd	r24, Y+3	; 0x03
    aa22:	9c 81       	ldd	r25, Y+4	; 0x04
    aa24:	9c 01       	movw	r18, r24
    aa26:	21 50       	subi	r18, 0x01	; 1
    aa28:	30 40       	sbci	r19, 0x00	; 0
    aa2a:	e9 81       	ldd	r30, Y+1	; 0x01
    aa2c:	fa 81       	ldd	r31, Y+2	; 0x02
    aa2e:	82 81       	ldd	r24, Z+2	; 0x02
    aa30:	93 81       	ldd	r25, Z+3	; 0x03
    aa32:	28 17       	cp	r18, r24
    aa34:	39 07       	cpc	r19, r25
    aa36:	14 f0       	brlt	.+4      	; 0xaa3c <vdmSeqIndex+0x98>
    aa38:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return vdmClone(col->value[index-1]);
    aa3c:	e9 81       	ldd	r30, Y+1	; 0x01
    aa3e:	fa 81       	ldd	r31, Y+2	; 0x02
    aa40:	40 81       	ld	r20, Z
    aa42:	51 81       	ldd	r21, Z+1	; 0x01
    aa44:	2b 81       	ldd	r18, Y+3	; 0x03
    aa46:	3c 81       	ldd	r19, Y+4	; 0x04
    aa48:	81 e0       	ldi	r24, 0x01	; 1
    aa4a:	90 e0       	ldi	r25, 0x00	; 0
    aa4c:	82 1b       	sub	r24, r18
    aa4e:	93 0b       	sbc	r25, r19
    aa50:	88 0f       	add	r24, r24
    aa52:	99 1f       	adc	r25, r25
    aa54:	90 95       	com	r25
    aa56:	81 95       	neg	r24
    aa58:	9f 4f       	sbci	r25, 0xFF	; 255
    aa5a:	fa 01       	movw	r30, r20
    aa5c:	e8 0f       	add	r30, r24
    aa5e:	f9 1f       	adc	r31, r25
    aa60:	80 81       	ld	r24, Z
    aa62:	91 81       	ldd	r25, Z+1	; 0x01
    aa64:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
}
    aa68:	28 96       	adiw	r28, 0x08	; 8
    aa6a:	0f b6       	in	r0, 0x3f	; 63
    aa6c:	f8 94       	cli
    aa6e:	de bf       	out	0x3e, r29	; 62
    aa70:	0f be       	out	0x3f, r0	; 63
    aa72:	cd bf       	out	0x3d, r28	; 61
    aa74:	cf 91       	pop	r28
    aa76:	df 91       	pop	r29
    aa78:	08 95       	ret

0000aa7a <vdmSeqIndexGC>:

TVP vdmSeqIndexGC(TVP seq, TVP indexVal, TVP *from) /* VDM uses 1 based index  */
{
    aa7a:	df 93       	push	r29
    aa7c:	cf 93       	push	r28
    aa7e:	cd b7       	in	r28, 0x3d	; 61
    aa80:	de b7       	in	r29, 0x3e	; 62
    aa82:	2a 97       	sbiw	r28, 0x0a	; 10
    aa84:	0f b6       	in	r0, 0x3f	; 63
    aa86:	f8 94       	cli
    aa88:	de bf       	out	0x3e, r29	; 62
    aa8a:	0f be       	out	0x3f, r0	; 63
    aa8c:	cd bf       	out	0x3d, r28	; 61
    aa8e:	9e 83       	std	Y+6, r25	; 0x06
    aa90:	8d 83       	std	Y+5, r24	; 0x05
    aa92:	78 87       	std	Y+8, r23	; 0x08
    aa94:	6f 83       	std	Y+7, r22	; 0x07
    aa96:	5a 87       	std	Y+10, r21	; 0x0a
    aa98:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK(seq);
    aa9a:	ed 81       	ldd	r30, Y+5	; 0x05
    aa9c:	fe 81       	ldd	r31, Y+6	; 0x06
    aa9e:	80 81       	ld	r24, Z
    aaa0:	91 81       	ldd	r25, Z+1	; 0x01
    aaa2:	88 30       	cpi	r24, 0x08	; 8
    aaa4:	91 05       	cpc	r25, r1
    aaa6:	11 f0       	breq	.+4      	; 0xaaac <vdmSeqIndexGC+0x32>
    aaa8:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    aaac:	ef 81       	ldd	r30, Y+7	; 0x07
    aaae:	f8 85       	ldd	r31, Y+8	; 0x08
    aab0:	80 81       	ld	r24, Z
    aab2:	91 81       	ldd	r25, Z+1	; 0x01
    aab4:	00 97       	sbiw	r24, 0x00	; 0
    aab6:	81 f0       	breq	.+32     	; 0xaad8 <vdmSeqIndexGC+0x5e>
    aab8:	ef 81       	ldd	r30, Y+7	; 0x07
    aaba:	f8 85       	ldd	r31, Y+8	; 0x08
    aabc:	80 81       	ld	r24, Z
    aabe:	91 81       	ldd	r25, Z+1	; 0x01
    aac0:	81 30       	cpi	r24, 0x01	; 1
    aac2:	91 05       	cpc	r25, r1
    aac4:	49 f0       	breq	.+18     	; 0xaad8 <vdmSeqIndexGC+0x5e>
    aac6:	ef 81       	ldd	r30, Y+7	; 0x07
    aac8:	f8 85       	ldd	r31, Y+8	; 0x08
    aaca:	80 81       	ld	r24, Z
    aacc:	91 81       	ldd	r25, Z+1	; 0x01
    aace:	82 30       	cpi	r24, 0x02	; 2
    aad0:	91 05       	cpc	r25, r1
    aad2:	11 f0       	breq	.+4      	; 0xaad8 <vdmSeqIndexGC+0x5e>
    aad4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	int index = indexVal->value.intVal;
    aad8:	ef 81       	ldd	r30, Y+7	; 0x07
    aada:	f8 85       	ldd	r31, Y+8	; 0x08
    aadc:	84 81       	ldd	r24, Z+4	; 0x04
    aade:	95 81       	ldd	r25, Z+5	; 0x05
    aae0:	9c 83       	std	Y+4, r25	; 0x04
    aae2:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col,seq);
    aae4:	ed 81       	ldd	r30, Y+5	; 0x05
    aae6:	fe 81       	ldd	r31, Y+6	; 0x06
    aae8:	84 81       	ldd	r24, Z+4	; 0x04
    aaea:	95 81       	ldd	r25, Z+5	; 0x05
    aaec:	9a 83       	std	Y+2, r25	; 0x02
    aaee:	89 83       	std	Y+1, r24	; 0x01

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    aaf0:	8b 81       	ldd	r24, Y+3	; 0x03
    aaf2:	9c 81       	ldd	r25, Y+4	; 0x04
    aaf4:	01 97       	sbiw	r24, 0x01	; 1
    aaf6:	99 23       	and	r25, r25
    aaf8:	64 f0       	brlt	.+24     	; 0xab12 <vdmSeqIndexGC+0x98>
    aafa:	8b 81       	ldd	r24, Y+3	; 0x03
    aafc:	9c 81       	ldd	r25, Y+4	; 0x04
    aafe:	9c 01       	movw	r18, r24
    ab00:	21 50       	subi	r18, 0x01	; 1
    ab02:	30 40       	sbci	r19, 0x00	; 0
    ab04:	e9 81       	ldd	r30, Y+1	; 0x01
    ab06:	fa 81       	ldd	r31, Y+2	; 0x02
    ab08:	82 81       	ldd	r24, Z+2	; 0x02
    ab0a:	93 81       	ldd	r25, Z+3	; 0x03
    ab0c:	28 17       	cp	r18, r24
    ab0e:	39 07       	cpc	r19, r25
    ab10:	14 f0       	brlt	.+4      	; 0xab16 <vdmSeqIndexGC+0x9c>
    ab12:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	return vdmCloneGC(col->value[index-1], from);
    ab16:	e9 81       	ldd	r30, Y+1	; 0x01
    ab18:	fa 81       	ldd	r31, Y+2	; 0x02
    ab1a:	40 81       	ld	r20, Z
    ab1c:	51 81       	ldd	r21, Z+1	; 0x01
    ab1e:	2b 81       	ldd	r18, Y+3	; 0x03
    ab20:	3c 81       	ldd	r19, Y+4	; 0x04
    ab22:	81 e0       	ldi	r24, 0x01	; 1
    ab24:	90 e0       	ldi	r25, 0x00	; 0
    ab26:	82 1b       	sub	r24, r18
    ab28:	93 0b       	sbc	r25, r19
    ab2a:	88 0f       	add	r24, r24
    ab2c:	99 1f       	adc	r25, r25
    ab2e:	90 95       	com	r25
    ab30:	81 95       	neg	r24
    ab32:	9f 4f       	sbci	r25, 0xFF	; 255
    ab34:	fa 01       	movw	r30, r20
    ab36:	e8 0f       	add	r30, r24
    ab38:	f9 1f       	adc	r31, r25
    ab3a:	80 81       	ld	r24, Z
    ab3c:	91 81       	ldd	r25, Z+1	; 0x01
    ab3e:	29 85       	ldd	r18, Y+9	; 0x09
    ab40:	3a 85       	ldd	r19, Y+10	; 0x0a
    ab42:	b9 01       	movw	r22, r18
    ab44:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
}
    ab48:	2a 96       	adiw	r28, 0x0a	; 10
    ab4a:	0f b6       	in	r0, 0x3f	; 63
    ab4c:	f8 94       	cli
    ab4e:	de bf       	out	0x3e, r29	; 62
    ab50:	0f be       	out	0x3f, r0	; 63
    ab52:	cd bf       	out	0x3d, r28	; 61
    ab54:	cf 91       	pop	r28
    ab56:	df 91       	pop	r29
    ab58:	08 95       	ret

0000ab5a <vdmSeqUpdate>:

void vdmSeqUpdate(TVP seq, TVP indexVal, TVP newValue)
{
    ab5a:	0f 93       	push	r16
    ab5c:	1f 93       	push	r17
    ab5e:	df 93       	push	r29
    ab60:	cf 93       	push	r28
    ab62:	cd b7       	in	r28, 0x3d	; 61
    ab64:	de b7       	in	r29, 0x3e	; 62
    ab66:	2a 97       	sbiw	r28, 0x0a	; 10
    ab68:	0f b6       	in	r0, 0x3f	; 63
    ab6a:	f8 94       	cli
    ab6c:	de bf       	out	0x3e, r29	; 62
    ab6e:	0f be       	out	0x3f, r0	; 63
    ab70:	cd bf       	out	0x3d, r28	; 61
    ab72:	9e 83       	std	Y+6, r25	; 0x06
    ab74:	8d 83       	std	Y+5, r24	; 0x05
    ab76:	78 87       	std	Y+8, r23	; 0x08
    ab78:	6f 83       	std	Y+7, r22	; 0x07
    ab7a:	5a 87       	std	Y+10, r21	; 0x0a
    ab7c:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK(seq);
    ab7e:	ed 81       	ldd	r30, Y+5	; 0x05
    ab80:	fe 81       	ldd	r31, Y+6	; 0x06
    ab82:	80 81       	ld	r24, Z
    ab84:	91 81       	ldd	r25, Z+1	; 0x01
    ab86:	88 30       	cpi	r24, 0x08	; 8
    ab88:	91 05       	cpc	r25, r1
    ab8a:	11 f0       	breq	.+4      	; 0xab90 <vdmSeqUpdate+0x36>
    ab8c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	assert((indexVal->type == VDM_INT||indexVal->type == VDM_NAT||indexVal->type == VDM_NAT1) && "index is not a int");
    ab90:	ef 81       	ldd	r30, Y+7	; 0x07
    ab92:	f8 85       	ldd	r31, Y+8	; 0x08
    ab94:	80 81       	ld	r24, Z
    ab96:	91 81       	ldd	r25, Z+1	; 0x01
    ab98:	00 97       	sbiw	r24, 0x00	; 0
    ab9a:	81 f0       	breq	.+32     	; 0xabbc <vdmSeqUpdate+0x62>
    ab9c:	ef 81       	ldd	r30, Y+7	; 0x07
    ab9e:	f8 85       	ldd	r31, Y+8	; 0x08
    aba0:	80 81       	ld	r24, Z
    aba2:	91 81       	ldd	r25, Z+1	; 0x01
    aba4:	81 30       	cpi	r24, 0x01	; 1
    aba6:	91 05       	cpc	r25, r1
    aba8:	49 f0       	breq	.+18     	; 0xabbc <vdmSeqUpdate+0x62>
    abaa:	ef 81       	ldd	r30, Y+7	; 0x07
    abac:	f8 85       	ldd	r31, Y+8	; 0x08
    abae:	80 81       	ld	r24, Z
    abb0:	91 81       	ldd	r25, Z+1	; 0x01
    abb2:	82 30       	cpi	r24, 0x02	; 2
    abb4:	91 05       	cpc	r25, r1
    abb6:	11 f0       	breq	.+4      	; 0xabbc <vdmSeqUpdate+0x62>
    abb8:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	int index = indexVal->value.intVal;
    abbc:	ef 81       	ldd	r30, Y+7	; 0x07
    abbe:	f8 85       	ldd	r31, Y+8	; 0x08
    abc0:	84 81       	ldd	r24, Z+4	; 0x04
    abc2:	95 81       	ldd	r25, Z+5	; 0x05
    abc4:	9c 83       	std	Y+4, r25	; 0x04
    abc6:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, seq);
    abc8:	ed 81       	ldd	r30, Y+5	; 0x05
    abca:	fe 81       	ldd	r31, Y+6	; 0x06
    abcc:	84 81       	ldd	r24, Z+4	; 0x04
    abce:	95 81       	ldd	r25, Z+5	; 0x05
    abd0:	9a 83       	std	Y+2, r25	; 0x02
    abd2:	89 83       	std	Y+1, r24	; 0x01

	assert(index - 1 >= 0 && index - 1 < col->size && "invalid index");
    abd4:	8b 81       	ldd	r24, Y+3	; 0x03
    abd6:	9c 81       	ldd	r25, Y+4	; 0x04
    abd8:	01 97       	sbiw	r24, 0x01	; 1
    abda:	99 23       	and	r25, r25
    abdc:	64 f0       	brlt	.+24     	; 0xabf6 <vdmSeqUpdate+0x9c>
    abde:	8b 81       	ldd	r24, Y+3	; 0x03
    abe0:	9c 81       	ldd	r25, Y+4	; 0x04
    abe2:	9c 01       	movw	r18, r24
    abe4:	21 50       	subi	r18, 0x01	; 1
    abe6:	30 40       	sbci	r19, 0x00	; 0
    abe8:	e9 81       	ldd	r30, Y+1	; 0x01
    abea:	fa 81       	ldd	r31, Y+2	; 0x02
    abec:	82 81       	ldd	r24, Z+2	; 0x02
    abee:	93 81       	ldd	r25, Z+3	; 0x03
    abf0:	28 17       	cp	r18, r24
    abf2:	39 07       	cpc	r19, r25
    abf4:	14 f0       	brlt	.+4      	; 0xabfa <vdmSeqUpdate+0xa0>
    abf6:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	col->value[index - 1] = vdmClone(newValue);
    abfa:	e9 81       	ldd	r30, Y+1	; 0x01
    abfc:	fa 81       	ldd	r31, Y+2	; 0x02
    abfe:	40 81       	ld	r20, Z
    ac00:	51 81       	ldd	r21, Z+1	; 0x01
    ac02:	2b 81       	ldd	r18, Y+3	; 0x03
    ac04:	3c 81       	ldd	r19, Y+4	; 0x04
    ac06:	81 e0       	ldi	r24, 0x01	; 1
    ac08:	90 e0       	ldi	r25, 0x00	; 0
    ac0a:	82 1b       	sub	r24, r18
    ac0c:	93 0b       	sbc	r25, r19
    ac0e:	88 0f       	add	r24, r24
    ac10:	99 1f       	adc	r25, r25
    ac12:	90 95       	com	r25
    ac14:	81 95       	neg	r24
    ac16:	9f 4f       	sbci	r25, 0xFF	; 255
    ac18:	8a 01       	movw	r16, r20
    ac1a:	08 0f       	add	r16, r24
    ac1c:	19 1f       	adc	r17, r25
    ac1e:	89 85       	ldd	r24, Y+9	; 0x09
    ac20:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac22:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    ac26:	f8 01       	movw	r30, r16
    ac28:	91 83       	std	Z+1, r25	; 0x01
    ac2a:	80 83       	st	Z, r24
}
    ac2c:	2a 96       	adiw	r28, 0x0a	; 10
    ac2e:	0f b6       	in	r0, 0x3f	; 63
    ac30:	f8 94       	cli
    ac32:	de bf       	out	0x3e, r29	; 62
    ac34:	0f be       	out	0x3f, r0	; 63
    ac36:	cd bf       	out	0x3d, r28	; 61
    ac38:	cf 91       	pop	r28
    ac3a:	df 91       	pop	r29
    ac3c:	1f 91       	pop	r17
    ac3e:	0f 91       	pop	r16
    ac40:	08 95       	ret

0000ac42 <vdmSetAdd>:


/* Utility functions.  */
/* ------------------------------------------------  */
static void vdmSetAdd(TVP* value, int* index, TVP newValue)
{
    ac42:	0f 93       	push	r16
    ac44:	1f 93       	push	r17
    ac46:	df 93       	push	r29
    ac48:	cf 93       	push	r28
    ac4a:	cd b7       	in	r28, 0x3d	; 61
    ac4c:	de b7       	in	r29, 0x3e	; 62
    ac4e:	29 97       	sbiw	r28, 0x09	; 9
    ac50:	0f b6       	in	r0, 0x3f	; 63
    ac52:	f8 94       	cli
    ac54:	de bf       	out	0x3e, r29	; 62
    ac56:	0f be       	out	0x3f, r0	; 63
    ac58:	cd bf       	out	0x3d, r28	; 61
    ac5a:	9d 83       	std	Y+5, r25	; 0x05
    ac5c:	8c 83       	std	Y+4, r24	; 0x04
    ac5e:	7f 83       	std	Y+7, r23	; 0x07
    ac60:	6e 83       	std	Y+6, r22	; 0x06
    ac62:	59 87       	std	Y+9, r21	; 0x09
    ac64:	48 87       	std	Y+8, r20	; 0x08
	int i;
	bool found = false;
    ac66:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < *index; i++)
    ac68:	1b 82       	std	Y+3, r1	; 0x03
    ac6a:	1a 82       	std	Y+2, r1	; 0x02
    ac6c:	22 c0       	rjmp	.+68     	; 0xacb2 <vdmSetAdd+0x70>
	{
		found |= equals(value[i],newValue);
    ac6e:	89 81       	ldd	r24, Y+1	; 0x01
    ac70:	08 2f       	mov	r16, r24
    ac72:	10 e0       	ldi	r17, 0x00	; 0
    ac74:	8a 81       	ldd	r24, Y+2	; 0x02
    ac76:	9b 81       	ldd	r25, Y+3	; 0x03
    ac78:	9c 01       	movw	r18, r24
    ac7a:	22 0f       	add	r18, r18
    ac7c:	33 1f       	adc	r19, r19
    ac7e:	8c 81       	ldd	r24, Y+4	; 0x04
    ac80:	9d 81       	ldd	r25, Y+5	; 0x05
    ac82:	fc 01       	movw	r30, r24
    ac84:	e2 0f       	add	r30, r18
    ac86:	f3 1f       	adc	r31, r19
    ac88:	80 81       	ld	r24, Z
    ac8a:	91 81       	ldd	r25, Z+1	; 0x01
    ac8c:	28 85       	ldd	r18, Y+8	; 0x08
    ac8e:	39 85       	ldd	r19, Y+9	; 0x09
    ac90:	b9 01       	movw	r22, r18
    ac92:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    ac96:	88 2f       	mov	r24, r24
    ac98:	90 e0       	ldi	r25, 0x00	; 0
    ac9a:	80 2b       	or	r24, r16
    ac9c:	91 2b       	or	r25, r17
    ac9e:	19 82       	std	Y+1, r1	; 0x01
    aca0:	00 97       	sbiw	r24, 0x00	; 0
    aca2:	11 f0       	breq	.+4      	; 0xaca8 <vdmSetAdd+0x66>
    aca4:	81 e0       	ldi	r24, 0x01	; 1
    aca6:	89 83       	std	Y+1, r24	; 0x01
static void vdmSetAdd(TVP* value, int* index, TVP newValue)
{
	int i;
	bool found = false;

	for (i = 0; i < *index; i++)
    aca8:	8a 81       	ldd	r24, Y+2	; 0x02
    acaa:	9b 81       	ldd	r25, Y+3	; 0x03
    acac:	01 96       	adiw	r24, 0x01	; 1
    acae:	9b 83       	std	Y+3, r25	; 0x03
    acb0:	8a 83       	std	Y+2, r24	; 0x02
    acb2:	ee 81       	ldd	r30, Y+6	; 0x06
    acb4:	ff 81       	ldd	r31, Y+7	; 0x07
    acb6:	20 81       	ld	r18, Z
    acb8:	31 81       	ldd	r19, Z+1	; 0x01
    acba:	8a 81       	ldd	r24, Y+2	; 0x02
    acbc:	9b 81       	ldd	r25, Y+3	; 0x03
    acbe:	82 17       	cp	r24, r18
    acc0:	93 07       	cpc	r25, r19
    acc2:	ac f2       	brlt	.-86     	; 0xac6e <vdmSetAdd+0x2c>
	{
		found |= equals(value[i],newValue);
	}

	if(!found)
    acc4:	89 81       	ldd	r24, Y+1	; 0x01
    acc6:	91 e0       	ldi	r25, 0x01	; 1
    acc8:	89 27       	eor	r24, r25
    acca:	88 23       	and	r24, r24
    accc:	d1 f0       	breq	.+52     	; 0xad02 <vdmSetAdd+0xc0>
	{
		value[*index] = newValue;
    acce:	ee 81       	ldd	r30, Y+6	; 0x06
    acd0:	ff 81       	ldd	r31, Y+7	; 0x07
    acd2:	80 81       	ld	r24, Z
    acd4:	91 81       	ldd	r25, Z+1	; 0x01
    acd6:	9c 01       	movw	r18, r24
    acd8:	22 0f       	add	r18, r18
    acda:	33 1f       	adc	r19, r19
    acdc:	8c 81       	ldd	r24, Y+4	; 0x04
    acde:	9d 81       	ldd	r25, Y+5	; 0x05
    ace0:	fc 01       	movw	r30, r24
    ace2:	e2 0f       	add	r30, r18
    ace4:	f3 1f       	adc	r31, r19
    ace6:	88 85       	ldd	r24, Y+8	; 0x08
    ace8:	99 85       	ldd	r25, Y+9	; 0x09
    acea:	91 83       	std	Z+1, r25	; 0x01
    acec:	80 83       	st	Z, r24
		*index = (*index) + 1;
    acee:	ee 81       	ldd	r30, Y+6	; 0x06
    acf0:	ff 81       	ldd	r31, Y+7	; 0x07
    acf2:	80 81       	ld	r24, Z
    acf4:	91 81       	ldd	r25, Z+1	; 0x01
    acf6:	01 96       	adiw	r24, 0x01	; 1
    acf8:	ee 81       	ldd	r30, Y+6	; 0x06
    acfa:	ff 81       	ldd	r31, Y+7	; 0x07
    acfc:	91 83       	std	Z+1, r25	; 0x01
    acfe:	80 83       	st	Z, r24
    ad00:	04 c0       	rjmp	.+8      	; 0xad0a <vdmSetAdd+0xc8>
	}
	/* This value is a duplicate, so must not leave it lying around.  */
	else
		vdmFree(newValue);
    ad02:	88 85       	ldd	r24, Y+8	; 0x08
    ad04:	99 85       	ldd	r25, Y+9	; 0x09
    ad06:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
}
    ad0a:	29 96       	adiw	r28, 0x09	; 9
    ad0c:	0f b6       	in	r0, 0x3f	; 63
    ad0e:	f8 94       	cli
    ad10:	de bf       	out	0x3e, r29	; 62
    ad12:	0f be       	out	0x3f, r0	; 63
    ad14:	cd bf       	out	0x3d, r28	; 61
    ad16:	cf 91       	pop	r28
    ad18:	df 91       	pop	r29
    ad1a:	1f 91       	pop	r17
    ad1c:	0f 91       	pop	r16
    ad1e:	08 95       	ret

0000ad20 <newSetWithValues>:
/* ------------------------------------------------  */



TVP newSetWithValues(size_t size, TVP* elements)
{
    ad20:	df 93       	push	r29
    ad22:	cf 93       	push	r28
    ad24:	cd b7       	in	r28, 0x3d	; 61
    ad26:	de b7       	in	r29, 0x3e	; 62
    ad28:	60 97       	sbiw	r28, 0x10	; 16
    ad2a:	0f b6       	in	r0, 0x3f	; 63
    ad2c:	f8 94       	cli
    ad2e:	de bf       	out	0x3e, r29	; 62
    ad30:	0f be       	out	0x3f, r0	; 63
    ad32:	cd bf       	out	0x3d, r28	; 61
    ad34:	9e 87       	std	Y+14, r25	; 0x0e
    ad36:	8d 87       	std	Y+13, r24	; 0x0d
    ad38:	78 8b       	std	Y+16, r23	; 0x10
    ad3a:	6f 87       	std	Y+15, r22	; 0x0f
	int i;
	int count = 0;
    ad3c:	1c 86       	std	Y+12, r1	; 0x0c
    ad3e:	1b 86       	std	Y+11, r1	; 0x0b
	int bufsize = DEFAULT_SET_COMP_BUFFER;
    ad40:	82 e0       	ldi	r24, 0x02	; 2
    ad42:	90 e0       	ldi	r25, 0x00	; 0
    ad44:	98 87       	std	Y+8, r25	; 0x08
    ad46:	8f 83       	std	Y+7, r24	; 0x07
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
    ad48:	8f 81       	ldd	r24, Y+7	; 0x07
    ad4a:	98 85       	ldd	r25, Y+8	; 0x08
    ad4c:	62 e0       	ldi	r22, 0x02	; 2
    ad4e:	70 e0       	ldi	r23, 0x00	; 0
    ad50:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    ad54:	9e 83       	std	Y+6, r25	; 0x06
    ad56:	8d 83       	std	Y+5, r24	; 0x05
	assert(value != NULL);
    ad58:	8d 81       	ldd	r24, Y+5	; 0x05
    ad5a:	9e 81       	ldd	r25, Y+6	; 0x06
    ad5c:	00 97       	sbiw	r24, 0x00	; 0
    ad5e:	11 f4       	brne	.+4      	; 0xad64 <newSetWithValues+0x44>
    ad60:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	for (i = 0; i < size; i++)
    ad64:	1a 86       	std	Y+10, r1	; 0x0a
    ad66:	19 86       	std	Y+9, r1	; 0x09
    ad68:	3d c0       	rjmp	.+122    	; 0xade4 <newSetWithValues+0xc4>
	{
		TVP v = vdmClone(elements[i]); /*  set binding  */
    ad6a:	89 85       	ldd	r24, Y+9	; 0x09
    ad6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ad6e:	9c 01       	movw	r18, r24
    ad70:	22 0f       	add	r18, r18
    ad72:	33 1f       	adc	r19, r19
    ad74:	8f 85       	ldd	r24, Y+15	; 0x0f
    ad76:	98 89       	ldd	r25, Y+16	; 0x10
    ad78:	fc 01       	movw	r30, r24
    ad7a:	e2 0f       	add	r30, r18
    ad7c:	f3 1f       	adc	r31, r19
    ad7e:	80 81       	ld	r24, Z
    ad80:	91 81       	ldd	r25, Z+1	; 0x01
    ad82:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    ad86:	9a 83       	std	Y+2, r25	; 0x02
    ad88:	89 83       	std	Y+1, r24	; 0x01

		if(count >= bufsize)
    ad8a:	2b 85       	ldd	r18, Y+11	; 0x0b
    ad8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    ad8e:	8f 81       	ldd	r24, Y+7	; 0x07
    ad90:	98 85       	ldd	r25, Y+8	; 0x08
    ad92:	28 17       	cp	r18, r24
    ad94:	39 07       	cpc	r19, r25
    ad96:	bc f0       	brlt	.+46     	; 0xadc6 <newSetWithValues+0xa6>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    ad98:	8f 81       	ldd	r24, Y+7	; 0x07
    ad9a:	98 85       	ldd	r25, Y+8	; 0x08
    ad9c:	0a 96       	adiw	r24, 0x0a	; 10
    ad9e:	98 87       	std	Y+8, r25	; 0x08
    ada0:	8f 83       	std	Y+7, r24	; 0x07
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    ada2:	8f 81       	ldd	r24, Y+7	; 0x07
    ada4:	98 85       	ldd	r25, Y+8	; 0x08
    ada6:	9c 01       	movw	r18, r24
    ada8:	22 0f       	add	r18, r18
    adaa:	33 1f       	adc	r19, r19
    adac:	8d 81       	ldd	r24, Y+5	; 0x05
    adae:	9e 81       	ldd	r25, Y+6	; 0x06
    adb0:	b9 01       	movw	r22, r18
    adb2:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    adb6:	9e 83       	std	Y+6, r25	; 0x06
    adb8:	8d 83       	std	Y+5, r24	; 0x05
			assert(value != NULL);
    adba:	8d 81       	ldd	r24, Y+5	; 0x05
    adbc:	9e 81       	ldd	r25, Y+6	; 0x06
    adbe:	00 97       	sbiw	r24, 0x00	; 0
    adc0:	11 f4       	brne	.+4      	; 0xadc6 <newSetWithValues+0xa6>
    adc2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		}
		vdmSetAdd(value, &count,v);
    adc6:	8d 81       	ldd	r24, Y+5	; 0x05
    adc8:	9e 81       	ldd	r25, Y+6	; 0x06
    adca:	9e 01       	movw	r18, r28
    adcc:	25 5f       	subi	r18, 0xF5	; 245
    adce:	3f 4f       	sbci	r19, 0xFF	; 255
    add0:	49 81       	ldd	r20, Y+1	; 0x01
    add2:	5a 81       	ldd	r21, Y+2	; 0x02
    add4:	b9 01       	movw	r22, r18
    add6:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>
	int count = 0;
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    adda:	89 85       	ldd	r24, Y+9	; 0x09
    addc:	9a 85       	ldd	r25, Y+10	; 0x0a
    adde:	01 96       	adiw	r24, 0x01	; 1
    ade0:	9a 87       	std	Y+10, r25	; 0x0a
    ade2:	89 87       	std	Y+9, r24	; 0x09
    ade4:	29 85       	ldd	r18, Y+9	; 0x09
    ade6:	3a 85       	ldd	r19, Y+10	; 0x0a
    ade8:	8d 85       	ldd	r24, Y+13	; 0x0d
    adea:	9e 85       	ldd	r25, Y+14	; 0x0e
    adec:	28 17       	cp	r18, r24
    adee:	39 07       	cpc	r19, r25
    adf0:	08 f4       	brcc	.+2      	; 0xadf4 <newSetWithValues+0xd4>
    adf2:	bb cf       	rjmp	.-138    	; 0xad6a <newSetWithValues+0x4a>
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    adf4:	8b 85       	ldd	r24, Y+11	; 0x0b
    adf6:	9c 85       	ldd	r25, Y+12	; 0x0c
    adf8:	2d 81       	ldd	r18, Y+5	; 0x05
    adfa:	3e 81       	ldd	r19, Y+6	; 0x06
    adfc:	67 e0       	ldi	r22, 0x07	; 7
    adfe:	70 e0       	ldi	r23, 0x00	; 0
    ae00:	a9 01       	movw	r20, r18
    ae02:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <newCollectionWithValues>
    ae06:	9c 83       	std	Y+4, r25	; 0x04
    ae08:	8b 83       	std	Y+3, r24	; 0x03

	for(i = 0; i < count; i++)
    ae0a:	1a 86       	std	Y+10, r1	; 0x0a
    ae0c:	19 86       	std	Y+9, r1	; 0x09
    ae0e:	13 c0       	rjmp	.+38     	; 0xae36 <newSetWithValues+0x116>
	{
		vdmFree(value[i]);
    ae10:	89 85       	ldd	r24, Y+9	; 0x09
    ae12:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae14:	9c 01       	movw	r18, r24
    ae16:	22 0f       	add	r18, r18
    ae18:	33 1f       	adc	r19, r19
    ae1a:	8d 81       	ldd	r24, Y+5	; 0x05
    ae1c:	9e 81       	ldd	r25, Y+6	; 0x06
    ae1e:	fc 01       	movw	r30, r24
    ae20:	e2 0f       	add	r30, r18
    ae22:	f3 1f       	adc	r31, r19
    ae24:	80 81       	ld	r24, Z
    ae26:	91 81       	ldd	r25, Z+1	; 0x01
    ae28:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValues(count, VDM_SET, value);

	for(i = 0; i < count; i++)
    ae2c:	89 85       	ldd	r24, Y+9	; 0x09
    ae2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae30:	01 96       	adiw	r24, 0x01	; 1
    ae32:	9a 87       	std	Y+10, r25	; 0x0a
    ae34:	89 87       	std	Y+9, r24	; 0x09
    ae36:	2b 85       	ldd	r18, Y+11	; 0x0b
    ae38:	3c 85       	ldd	r19, Y+12	; 0x0c
    ae3a:	89 85       	ldd	r24, Y+9	; 0x09
    ae3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae3e:	82 17       	cp	r24, r18
    ae40:	93 07       	cpc	r25, r19
    ae42:	34 f3       	brlt	.-52     	; 0xae10 <newSetWithValues+0xf0>
	{
		vdmFree(value[i]);
	}
	free(value);
    ae44:	8d 81       	ldd	r24, Y+5	; 0x05
    ae46:	9e 81       	ldd	r25, Y+6	; 0x06
    ae48:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    ae4c:	8b 81       	ldd	r24, Y+3	; 0x03
    ae4e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    ae50:	60 96       	adiw	r28, 0x10	; 16
    ae52:	0f b6       	in	r0, 0x3f	; 63
    ae54:	f8 94       	cli
    ae56:	de bf       	out	0x3e, r29	; 62
    ae58:	0f be       	out	0x3f, r0	; 63
    ae5a:	cd bf       	out	0x3d, r28	; 61
    ae5c:	cf 91       	pop	r28
    ae5e:	df 91       	pop	r29
    ae60:	08 95       	ret

0000ae62 <newSetWithValuesGC>:


TVP newSetWithValuesGC(size_t size, TVP* elements, TVP *from)
{
    ae62:	df 93       	push	r29
    ae64:	cf 93       	push	r28
    ae66:	cd b7       	in	r28, 0x3d	; 61
    ae68:	de b7       	in	r29, 0x3e	; 62
    ae6a:	62 97       	sbiw	r28, 0x12	; 18
    ae6c:	0f b6       	in	r0, 0x3f	; 63
    ae6e:	f8 94       	cli
    ae70:	de bf       	out	0x3e, r29	; 62
    ae72:	0f be       	out	0x3f, r0	; 63
    ae74:	cd bf       	out	0x3d, r28	; 61
    ae76:	9e 87       	std	Y+14, r25	; 0x0e
    ae78:	8d 87       	std	Y+13, r24	; 0x0d
    ae7a:	78 8b       	std	Y+16, r23	; 0x10
    ae7c:	6f 87       	std	Y+15, r22	; 0x0f
    ae7e:	5a 8b       	std	Y+18, r21	; 0x12
    ae80:	49 8b       	std	Y+17, r20	; 0x11
	int i;
	int count = 0;
    ae82:	1c 86       	std	Y+12, r1	; 0x0c
    ae84:	1b 86       	std	Y+11, r1	; 0x0b
	int bufsize = DEFAULT_SET_COMP_BUFFER;
    ae86:	82 e0       	ldi	r24, 0x02	; 2
    ae88:	90 e0       	ldi	r25, 0x00	; 0
    ae8a:	98 87       	std	Y+8, r25	; 0x08
    ae8c:	8f 83       	std	Y+7, r24	; 0x07
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
    ae8e:	8f 81       	ldd	r24, Y+7	; 0x07
    ae90:	98 85       	ldd	r25, Y+8	; 0x08
    ae92:	62 e0       	ldi	r22, 0x02	; 2
    ae94:	70 e0       	ldi	r23, 0x00	; 0
    ae96:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    ae9a:	9e 83       	std	Y+6, r25	; 0x06
    ae9c:	8d 83       	std	Y+5, r24	; 0x05
	assert(value != NULL);
    ae9e:	8d 81       	ldd	r24, Y+5	; 0x05
    aea0:	9e 81       	ldd	r25, Y+6	; 0x06
    aea2:	00 97       	sbiw	r24, 0x00	; 0
    aea4:	11 f4       	brne	.+4      	; 0xaeaa <newSetWithValuesGC+0x48>
    aea6:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	for (i = 0; i < size; i++)
    aeaa:	1a 86       	std	Y+10, r1	; 0x0a
    aeac:	19 86       	std	Y+9, r1	; 0x09
    aeae:	3d c0       	rjmp	.+122    	; 0xaf2a <newSetWithValuesGC+0xc8>
	{
		TVP v = vdmClone(elements[i]); /*  set binding  */
    aeb0:	89 85       	ldd	r24, Y+9	; 0x09
    aeb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    aeb4:	9c 01       	movw	r18, r24
    aeb6:	22 0f       	add	r18, r18
    aeb8:	33 1f       	adc	r19, r19
    aeba:	8f 85       	ldd	r24, Y+15	; 0x0f
    aebc:	98 89       	ldd	r25, Y+16	; 0x10
    aebe:	fc 01       	movw	r30, r24
    aec0:	e2 0f       	add	r30, r18
    aec2:	f3 1f       	adc	r31, r19
    aec4:	80 81       	ld	r24, Z
    aec6:	91 81       	ldd	r25, Z+1	; 0x01
    aec8:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    aecc:	9a 83       	std	Y+2, r25	; 0x02
    aece:	89 83       	std	Y+1, r24	; 0x01

		if(count >= bufsize)
    aed0:	2b 85       	ldd	r18, Y+11	; 0x0b
    aed2:	3c 85       	ldd	r19, Y+12	; 0x0c
    aed4:	8f 81       	ldd	r24, Y+7	; 0x07
    aed6:	98 85       	ldd	r25, Y+8	; 0x08
    aed8:	28 17       	cp	r18, r24
    aeda:	39 07       	cpc	r19, r25
    aedc:	bc f0       	brlt	.+46     	; 0xaf0c <newSetWithValuesGC+0xaa>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    aede:	8f 81       	ldd	r24, Y+7	; 0x07
    aee0:	98 85       	ldd	r25, Y+8	; 0x08
    aee2:	0a 96       	adiw	r24, 0x0a	; 10
    aee4:	98 87       	std	Y+8, r25	; 0x08
    aee6:	8f 83       	std	Y+7, r24	; 0x07
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    aee8:	8f 81       	ldd	r24, Y+7	; 0x07
    aeea:	98 85       	ldd	r25, Y+8	; 0x08
    aeec:	9c 01       	movw	r18, r24
    aeee:	22 0f       	add	r18, r18
    aef0:	33 1f       	adc	r19, r19
    aef2:	8d 81       	ldd	r24, Y+5	; 0x05
    aef4:	9e 81       	ldd	r25, Y+6	; 0x06
    aef6:	b9 01       	movw	r22, r18
    aef8:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    aefc:	9e 83       	std	Y+6, r25	; 0x06
    aefe:	8d 83       	std	Y+5, r24	; 0x05
			assert(value != NULL);
    af00:	8d 81       	ldd	r24, Y+5	; 0x05
    af02:	9e 81       	ldd	r25, Y+6	; 0x06
    af04:	00 97       	sbiw	r24, 0x00	; 0
    af06:	11 f4       	brne	.+4      	; 0xaf0c <newSetWithValuesGC+0xaa>
    af08:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		}
		vdmSetAdd(value, &count,v);
    af0c:	8d 81       	ldd	r24, Y+5	; 0x05
    af0e:	9e 81       	ldd	r25, Y+6	; 0x06
    af10:	9e 01       	movw	r18, r28
    af12:	25 5f       	subi	r18, 0xF5	; 245
    af14:	3f 4f       	sbci	r19, 0xFF	; 255
    af16:	49 81       	ldd	r20, Y+1	; 0x01
    af18:	5a 81       	ldd	r21, Y+2	; 0x02
    af1a:	b9 01       	movw	r22, r18
    af1c:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>
	int count = 0;
	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*)calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    af20:	89 85       	ldd	r24, Y+9	; 0x09
    af22:	9a 85       	ldd	r25, Y+10	; 0x0a
    af24:	01 96       	adiw	r24, 0x01	; 1
    af26:	9a 87       	std	Y+10, r25	; 0x0a
    af28:	89 87       	std	Y+9, r24	; 0x09
    af2a:	29 85       	ldd	r18, Y+9	; 0x09
    af2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    af2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    af30:	9e 85       	ldd	r25, Y+14	; 0x0e
    af32:	28 17       	cp	r18, r24
    af34:	39 07       	cpc	r19, r25
    af36:	08 f4       	brcc	.+2      	; 0xaf3a <newSetWithValuesGC+0xd8>
    af38:	bb cf       	rjmp	.-138    	; 0xaeb0 <newSetWithValuesGC+0x4e>
			assert(value != NULL);
		}
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    af3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    af3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    af3e:	2d 81       	ldd	r18, Y+5	; 0x05
    af40:	3e 81       	ldd	r19, Y+6	; 0x06
    af42:	e9 89       	ldd	r30, Y+17	; 0x11
    af44:	fa 89       	ldd	r31, Y+18	; 0x12
    af46:	67 e0       	ldi	r22, 0x07	; 7
    af48:	70 e0       	ldi	r23, 0x00	; 0
    af4a:	a9 01       	movw	r20, r18
    af4c:	9f 01       	movw	r18, r30
    af4e:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <newCollectionWithValuesGC>
    af52:	9c 83       	std	Y+4, r25	; 0x04
    af54:	8b 83       	std	Y+3, r24	; 0x03

	for(i = 0; i < count; i++)
    af56:	1a 86       	std	Y+10, r1	; 0x0a
    af58:	19 86       	std	Y+9, r1	; 0x09
    af5a:	13 c0       	rjmp	.+38     	; 0xaf82 <newSetWithValuesGC+0x120>
	{
		vdmFree(value[i]);
    af5c:	89 85       	ldd	r24, Y+9	; 0x09
    af5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    af60:	9c 01       	movw	r18, r24
    af62:	22 0f       	add	r18, r18
    af64:	33 1f       	adc	r19, r19
    af66:	8d 81       	ldd	r24, Y+5	; 0x05
    af68:	9e 81       	ldd	r25, Y+6	; 0x06
    af6a:	fc 01       	movw	r30, r24
    af6c:	e2 0f       	add	r30, r18
    af6e:	f3 1f       	adc	r31, r19
    af70:	80 81       	ld	r24, Z
    af72:	91 81       	ldd	r25, Z+1	; 0x01
    af74:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		vdmSetAdd(value, &count,v);
	}

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);

	for(i = 0; i < count; i++)
    af78:	89 85       	ldd	r24, Y+9	; 0x09
    af7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    af7c:	01 96       	adiw	r24, 0x01	; 1
    af7e:	9a 87       	std	Y+10, r25	; 0x0a
    af80:	89 87       	std	Y+9, r24	; 0x09
    af82:	2b 85       	ldd	r18, Y+11	; 0x0b
    af84:	3c 85       	ldd	r19, Y+12	; 0x0c
    af86:	89 85       	ldd	r24, Y+9	; 0x09
    af88:	9a 85       	ldd	r25, Y+10	; 0x0a
    af8a:	82 17       	cp	r24, r18
    af8c:	93 07       	cpc	r25, r19
    af8e:	34 f3       	brlt	.-52     	; 0xaf5c <newSetWithValuesGC+0xfa>
	{
		vdmFree(value[i]);
	}
	free(value);
    af90:	8d 81       	ldd	r24, Y+5	; 0x05
    af92:	9e 81       	ldd	r25, Y+6	; 0x06
    af94:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    af98:	8b 81       	ldd	r24, Y+3	; 0x03
    af9a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    af9c:	62 96       	adiw	r28, 0x12	; 18
    af9e:	0f b6       	in	r0, 0x3f	; 63
    afa0:	f8 94       	cli
    afa2:	de bf       	out	0x3e, r29	; 62
    afa4:	0f be       	out	0x3f, r0	; 63
    afa6:	cd bf       	out	0x3d, r28	; 61
    afa8:	cf 91       	pop	r28
    afaa:	df 91       	pop	r29
    afac:	08 95       	ret

0000afae <newSetVar>:



TVP newSetVar(size_t size, ...)
{
    afae:	df 93       	push	r29
    afb0:	cf 93       	push	r28
    afb2:	cd b7       	in	r28, 0x3d	; 61
    afb4:	de b7       	in	r29, 0x3e	; 62
    afb6:	60 97       	sbiw	r28, 0x10	; 16
    afb8:	0f b6       	in	r0, 0x3f	; 63
    afba:	f8 94       	cli
    afbc:	de bf       	out	0x3e, r29	; 62
    afbe:	0f be       	out	0x3f, r0	; 63
    afc0:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, size);
    afc2:	ce 01       	movw	r24, r28
    afc4:	47 96       	adiw	r24, 0x17	; 23
    afc6:	9e 87       	std	Y+14, r25	; 0x0e
    afc8:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    afca:	18 8a       	std	Y+16, r1	; 0x10
    afcc:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = DEFAULT_SET_COMP_BUFFER;
    afce:	82 e0       	ldi	r24, 0x02	; 2
    afd0:	90 e0       	ldi	r25, 0x00	; 0
    afd2:	9a 87       	std	Y+10, r25	; 0x0a
    afd4:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    afd6:	89 85       	ldd	r24, Y+9	; 0x09
    afd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    afda:	62 e0       	ldi	r22, 0x02	; 2
    afdc:	70 e0       	ldi	r23, 0x00	; 0
    afde:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    afe2:	98 87       	std	Y+8, r25	; 0x08
    afe4:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    afe6:	8f 81       	ldd	r24, Y+7	; 0x07
    afe8:	98 85       	ldd	r25, Y+8	; 0x08
    afea:	00 97       	sbiw	r24, 0x00	; 0
    afec:	11 f4       	brne	.+4      	; 0xaff2 <newSetVar+0x44>
    afee:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	for (i = 0; i < size; i++)
    aff2:	1c 86       	std	Y+12, r1	; 0x0c
    aff4:	1b 86       	std	Y+11, r1	; 0x0b
    aff6:	3e c0       	rjmp	.+124    	; 0xb074 <newSetVar+0xc6>
	{
		TVP arg = va_arg(ap, TVP);
    aff8:	2d 85       	ldd	r18, Y+13	; 0x0d
    affa:	3e 85       	ldd	r19, Y+14	; 0x0e
    affc:	c9 01       	movw	r24, r18
    affe:	02 96       	adiw	r24, 0x02	; 2
    b000:	9e 87       	std	Y+14, r25	; 0x0e
    b002:	8d 87       	std	Y+13, r24	; 0x0d
    b004:	f9 01       	movw	r30, r18
    b006:	80 81       	ld	r24, Z
    b008:	91 81       	ldd	r25, Z+1	; 0x01
    b00a:	9c 83       	std	Y+4, r25	; 0x04
    b00c:	8b 83       	std	Y+3, r24	; 0x03

		TVP v= vdmClone(arg);
    b00e:	8b 81       	ldd	r24, Y+3	; 0x03
    b010:	9c 81       	ldd	r25, Y+4	; 0x04
    b012:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    b016:	9a 83       	std	Y+2, r25	; 0x02
    b018:	89 83       	std	Y+1, r24	; 0x01

		/* TODO:  Check whether element exists.  */


		if(count>=bufsize)
    b01a:	2f 85       	ldd	r18, Y+15	; 0x0f
    b01c:	38 89       	ldd	r19, Y+16	; 0x10
    b01e:	89 85       	ldd	r24, Y+9	; 0x09
    b020:	9a 85       	ldd	r25, Y+10	; 0x0a
    b022:	28 17       	cp	r18, r24
    b024:	39 07       	cpc	r19, r25
    b026:	bc f0       	brlt	.+46     	; 0xb056 <newSetVar+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b028:	89 85       	ldd	r24, Y+9	; 0x09
    b02a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b02c:	0a 96       	adiw	r24, 0x0a	; 10
    b02e:	9a 87       	std	Y+10, r25	; 0x0a
    b030:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b032:	89 85       	ldd	r24, Y+9	; 0x09
    b034:	9a 85       	ldd	r25, Y+10	; 0x0a
    b036:	9c 01       	movw	r18, r24
    b038:	22 0f       	add	r18, r18
    b03a:	33 1f       	adc	r19, r19
    b03c:	8f 81       	ldd	r24, Y+7	; 0x07
    b03e:	98 85       	ldd	r25, Y+8	; 0x08
    b040:	b9 01       	movw	r22, r18
    b042:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    b046:	98 87       	std	Y+8, r25	; 0x08
    b048:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b04a:	8f 81       	ldd	r24, Y+7	; 0x07
    b04c:	98 85       	ldd	r25, Y+8	; 0x08
    b04e:	00 97       	sbiw	r24, 0x00	; 0
    b050:	11 f4       	brne	.+4      	; 0xb056 <newSetVar+0xa8>
    b052:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		}
		vdmSetAdd(value, &count, v);
    b056:	8f 81       	ldd	r24, Y+7	; 0x07
    b058:	98 85       	ldd	r25, Y+8	; 0x08
    b05a:	9e 01       	movw	r18, r28
    b05c:	21 5f       	subi	r18, 0xF1	; 241
    b05e:	3f 4f       	sbci	r19, 0xFF	; 255
    b060:	49 81       	ldd	r20, Y+1	; 0x01
    b062:	5a 81       	ldd	r21, Y+2	; 0x02
    b064:	b9 01       	movw	r22, r18
    b066:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    b06a:	8b 85       	ldd	r24, Y+11	; 0x0b
    b06c:	9c 85       	ldd	r25, Y+12	; 0x0c
    b06e:	01 96       	adiw	r24, 0x01	; 1
    b070:	9c 87       	std	Y+12, r25	; 0x0c
    b072:	8b 87       	std	Y+11, r24	; 0x0b
    b074:	2b 85       	ldd	r18, Y+11	; 0x0b
    b076:	3c 85       	ldd	r19, Y+12	; 0x0c
    b078:	8d 89       	ldd	r24, Y+21	; 0x15
    b07a:	9e 89       	ldd	r25, Y+22	; 0x16
    b07c:	28 17       	cp	r18, r24
    b07e:	39 07       	cpc	r19, r25
    b080:	08 f4       	brcc	.+2      	; 0xb084 <newSetVar+0xd6>
    b082:	ba cf       	rjmp	.-140    	; 0xaff8 <newSetVar+0x4a>
		vdmSetAdd(value, &count, v);
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    b084:	8f 85       	ldd	r24, Y+15	; 0x0f
    b086:	98 89       	ldd	r25, Y+16	; 0x10
    b088:	2f 81       	ldd	r18, Y+7	; 0x07
    b08a:	38 85       	ldd	r19, Y+8	; 0x08
    b08c:	67 e0       	ldi	r22, 0x07	; 7
    b08e:	70 e0       	ldi	r23, 0x00	; 0
    b090:	a9 01       	movw	r20, r18
    b092:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <newCollectionWithValues>
    b096:	9e 83       	std	Y+6, r25	; 0x06
    b098:	8d 83       	std	Y+5, r24	; 0x05
	for(i = 0; i < count; i++)
    b09a:	1c 86       	std	Y+12, r1	; 0x0c
    b09c:	1b 86       	std	Y+11, r1	; 0x0b
    b09e:	13 c0       	rjmp	.+38     	; 0xb0c6 <newSetVar+0x118>
		vdmFree(value[i]);
    b0a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    b0a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    b0a4:	9c 01       	movw	r18, r24
    b0a6:	22 0f       	add	r18, r18
    b0a8:	33 1f       	adc	r19, r19
    b0aa:	8f 81       	ldd	r24, Y+7	; 0x07
    b0ac:	98 85       	ldd	r25, Y+8	; 0x08
    b0ae:	fc 01       	movw	r30, r24
    b0b0:	e2 0f       	add	r30, r18
    b0b2:	f3 1f       	adc	r31, r19
    b0b4:	80 81       	ld	r24, Z
    b0b6:	91 81       	ldd	r25, Z+1	; 0x01
    b0b8:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
	for(i = 0; i < count; i++)
    b0bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    b0be:	9c 85       	ldd	r25, Y+12	; 0x0c
    b0c0:	01 96       	adiw	r24, 0x01	; 1
    b0c2:	9c 87       	std	Y+12, r25	; 0x0c
    b0c4:	8b 87       	std	Y+11, r24	; 0x0b
    b0c6:	2f 85       	ldd	r18, Y+15	; 0x0f
    b0c8:	38 89       	ldd	r19, Y+16	; 0x10
    b0ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    b0cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    b0ce:	82 17       	cp	r24, r18
    b0d0:	93 07       	cpc	r25, r19
    b0d2:	34 f3       	brlt	.-52     	; 0xb0a0 <newSetVar+0xf2>
		vdmFree(value[i]);
	free(value);
    b0d4:	8f 81       	ldd	r24, Y+7	; 0x07
    b0d6:	98 85       	ldd	r25, Y+8	; 0x08
    b0d8:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    b0dc:	8d 81       	ldd	r24, Y+5	; 0x05
    b0de:	9e 81       	ldd	r25, Y+6	; 0x06
}
    b0e0:	60 96       	adiw	r28, 0x10	; 16
    b0e2:	0f b6       	in	r0, 0x3f	; 63
    b0e4:	f8 94       	cli
    b0e6:	de bf       	out	0x3e, r29	; 62
    b0e8:	0f be       	out	0x3f, r0	; 63
    b0ea:	cd bf       	out	0x3d, r28	; 61
    b0ec:	cf 91       	pop	r28
    b0ee:	df 91       	pop	r29
    b0f0:	08 95       	ret

0000b0f2 <newSetVarGC>:


TVP newSetVarGC(size_t size, TVP *from, ...)
{
    b0f2:	df 93       	push	r29
    b0f4:	cf 93       	push	r28
    b0f6:	cd b7       	in	r28, 0x3d	; 61
    b0f8:	de b7       	in	r29, 0x3e	; 62
    b0fa:	60 97       	sbiw	r28, 0x10	; 16
    b0fc:	0f b6       	in	r0, 0x3f	; 63
    b0fe:	f8 94       	cli
    b100:	de bf       	out	0x3e, r29	; 62
    b102:	0f be       	out	0x3f, r0	; 63
    b104:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, from);
    b106:	ce 01       	movw	r24, r28
    b108:	49 96       	adiw	r24, 0x19	; 25
    b10a:	9e 87       	std	Y+14, r25	; 0x0e
    b10c:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    b10e:	18 8a       	std	Y+16, r1	; 0x10
    b110:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = DEFAULT_SET_COMP_BUFFER;
    b112:	82 e0       	ldi	r24, 0x02	; 2
    b114:	90 e0       	ldi	r25, 0x00	; 0
    b116:	9a 87       	std	Y+10, r25	; 0x0a
    b118:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    b11a:	89 85       	ldd	r24, Y+9	; 0x09
    b11c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b11e:	62 e0       	ldi	r22, 0x02	; 2
    b120:	70 e0       	ldi	r23, 0x00	; 0
    b122:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    b126:	98 87       	std	Y+8, r25	; 0x08
    b128:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    b12a:	8f 81       	ldd	r24, Y+7	; 0x07
    b12c:	98 85       	ldd	r25, Y+8	; 0x08
    b12e:	00 97       	sbiw	r24, 0x00	; 0
    b130:	11 f4       	brne	.+4      	; 0xb136 <newSetVarGC+0x44>
    b132:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	for (i = 0; i < size; i++)
    b136:	1c 86       	std	Y+12, r1	; 0x0c
    b138:	1b 86       	std	Y+11, r1	; 0x0b
    b13a:	3e c0       	rjmp	.+124    	; 0xb1b8 <newSetVarGC+0xc6>
	{
		TVP arg = va_arg(ap, TVP);
    b13c:	2d 85       	ldd	r18, Y+13	; 0x0d
    b13e:	3e 85       	ldd	r19, Y+14	; 0x0e
    b140:	c9 01       	movw	r24, r18
    b142:	02 96       	adiw	r24, 0x02	; 2
    b144:	9e 87       	std	Y+14, r25	; 0x0e
    b146:	8d 87       	std	Y+13, r24	; 0x0d
    b148:	f9 01       	movw	r30, r18
    b14a:	80 81       	ld	r24, Z
    b14c:	91 81       	ldd	r25, Z+1	; 0x01
    b14e:	9c 83       	std	Y+4, r25	; 0x04
    b150:	8b 83       	std	Y+3, r24	; 0x03
		TVP v = vdmClone(arg);
    b152:	8b 81       	ldd	r24, Y+3	; 0x03
    b154:	9c 81       	ldd	r25, Y+4	; 0x04
    b156:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    b15a:	9a 83       	std	Y+2, r25	; 0x02
    b15c:	89 83       	std	Y+1, r24	; 0x01

		if(count>=bufsize)
    b15e:	2f 85       	ldd	r18, Y+15	; 0x0f
    b160:	38 89       	ldd	r19, Y+16	; 0x10
    b162:	89 85       	ldd	r24, Y+9	; 0x09
    b164:	9a 85       	ldd	r25, Y+10	; 0x0a
    b166:	28 17       	cp	r18, r24
    b168:	39 07       	cpc	r19, r25
    b16a:	bc f0       	brlt	.+46     	; 0xb19a <newSetVarGC+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b16c:	89 85       	ldd	r24, Y+9	; 0x09
    b16e:	9a 85       	ldd	r25, Y+10	; 0x0a
    b170:	0a 96       	adiw	r24, 0x0a	; 10
    b172:	9a 87       	std	Y+10, r25	; 0x0a
    b174:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b176:	89 85       	ldd	r24, Y+9	; 0x09
    b178:	9a 85       	ldd	r25, Y+10	; 0x0a
    b17a:	9c 01       	movw	r18, r24
    b17c:	22 0f       	add	r18, r18
    b17e:	33 1f       	adc	r19, r19
    b180:	8f 81       	ldd	r24, Y+7	; 0x07
    b182:	98 85       	ldd	r25, Y+8	; 0x08
    b184:	b9 01       	movw	r22, r18
    b186:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    b18a:	98 87       	std	Y+8, r25	; 0x08
    b18c:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b18e:	8f 81       	ldd	r24, Y+7	; 0x07
    b190:	98 85       	ldd	r25, Y+8	; 0x08
    b192:	00 97       	sbiw	r24, 0x00	; 0
    b194:	11 f4       	brne	.+4      	; 0xb19a <newSetVarGC+0xa8>
    b196:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		}
		vdmSetAdd(value,&count,v);
    b19a:	8f 81       	ldd	r24, Y+7	; 0x07
    b19c:	98 85       	ldd	r25, Y+8	; 0x08
    b19e:	9e 01       	movw	r18, r28
    b1a0:	21 5f       	subi	r18, 0xF1	; 241
    b1a2:	3f 4f       	sbci	r19, 0xFF	; 255
    b1a4:	49 81       	ldd	r20, Y+1	; 0x01
    b1a6:	5a 81       	ldd	r21, Y+2	; 0x02
    b1a8:	b9 01       	movw	r22, r18
    b1aa:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>

	int bufsize = DEFAULT_SET_COMP_BUFFER;
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
	assert(value != NULL);

	for (i = 0; i < size; i++)
    b1ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    b1b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    b1b2:	01 96       	adiw	r24, 0x01	; 1
    b1b4:	9c 87       	std	Y+12, r25	; 0x0c
    b1b6:	8b 87       	std	Y+11, r24	; 0x0b
    b1b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    b1ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    b1bc:	8d 89       	ldd	r24, Y+21	; 0x15
    b1be:	9e 89       	ldd	r25, Y+22	; 0x16
    b1c0:	28 17       	cp	r18, r24
    b1c2:	39 07       	cpc	r19, r25
    b1c4:	08 f4       	brcc	.+2      	; 0xb1c8 <newSetVarGC+0xd6>
    b1c6:	ba cf       	rjmp	.-140    	; 0xb13c <newSetVarGC+0x4a>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    b1c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    b1ca:	98 89       	ldd	r25, Y+16	; 0x10
    b1cc:	2f 81       	ldd	r18, Y+7	; 0x07
    b1ce:	38 85       	ldd	r19, Y+8	; 0x08
    b1d0:	ef 89       	ldd	r30, Y+23	; 0x17
    b1d2:	f8 8d       	ldd	r31, Y+24	; 0x18
    b1d4:	67 e0       	ldi	r22, 0x07	; 7
    b1d6:	70 e0       	ldi	r23, 0x00	; 0
    b1d8:	a9 01       	movw	r20, r18
    b1da:	9f 01       	movw	r18, r30
    b1dc:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <newCollectionWithValuesGC>
    b1e0:	9e 83       	std	Y+6, r25	; 0x06
    b1e2:	8d 83       	std	Y+5, r24	; 0x05
	for(i = 0; i < count; i++)
    b1e4:	1c 86       	std	Y+12, r1	; 0x0c
    b1e6:	1b 86       	std	Y+11, r1	; 0x0b
    b1e8:	13 c0       	rjmp	.+38     	; 0xb210 <newSetVarGC+0x11e>
	{
		vdmFree(value[i]);
    b1ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    b1ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    b1ee:	9c 01       	movw	r18, r24
    b1f0:	22 0f       	add	r18, r18
    b1f2:	33 1f       	adc	r19, r19
    b1f4:	8f 81       	ldd	r24, Y+7	; 0x07
    b1f6:	98 85       	ldd	r25, Y+8	; 0x08
    b1f8:	fc 01       	movw	r30, r24
    b1fa:	e2 0f       	add	r30, r18
    b1fc:	f3 1f       	adc	r31, r19
    b1fe:	80 81       	ld	r24, Z
    b200:	91 81       	ldd	r25, Z+1	; 0x01
    b202:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
	for(i = 0; i < count; i++)
    b206:	8b 85       	ldd	r24, Y+11	; 0x0b
    b208:	9c 85       	ldd	r25, Y+12	; 0x0c
    b20a:	01 96       	adiw	r24, 0x01	; 1
    b20c:	9c 87       	std	Y+12, r25	; 0x0c
    b20e:	8b 87       	std	Y+11, r24	; 0x0b
    b210:	2f 85       	ldd	r18, Y+15	; 0x0f
    b212:	38 89       	ldd	r19, Y+16	; 0x10
    b214:	8b 85       	ldd	r24, Y+11	; 0x0b
    b216:	9c 85       	ldd	r25, Y+12	; 0x0c
    b218:	82 17       	cp	r24, r18
    b21a:	93 07       	cpc	r25, r19
    b21c:	34 f3       	brlt	.-52     	; 0xb1ea <newSetVarGC+0xf8>
	{
		vdmFree(value[i]);
	}
	free(value);
    b21e:	8f 81       	ldd	r24, Y+7	; 0x07
    b220:	98 85       	ldd	r25, Y+8	; 0x08
    b222:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    b226:	8d 81       	ldd	r24, Y+5	; 0x05
    b228:	9e 81       	ldd	r25, Y+6	; 0x06
}
    b22a:	60 96       	adiw	r28, 0x10	; 16
    b22c:	0f b6       	in	r0, 0x3f	; 63
    b22e:	f8 94       	cli
    b230:	de bf       	out	0x3e, r29	; 62
    b232:	0f be       	out	0x3f, r0	; 63
    b234:	cd bf       	out	0x3d, r28	; 61
    b236:	cf 91       	pop	r28
    b238:	df 91       	pop	r29
    b23a:	08 95       	ret

0000b23c <newSetVarToGrow>:


/* Just like newSetVar, but with memory preallocated to an expected  */
/* result set size.  */
TVP newSetVarToGrow(size_t size, size_t expected_size, ...)
{
    b23c:	df 93       	push	r29
    b23e:	cf 93       	push	r28
    b240:	cd b7       	in	r28, 0x3d	; 61
    b242:	de b7       	in	r29, 0x3e	; 62
    b244:	60 97       	sbiw	r28, 0x10	; 16
    b246:	0f b6       	in	r0, 0x3f	; 63
    b248:	f8 94       	cli
    b24a:	de bf       	out	0x3e, r29	; 62
    b24c:	0f be       	out	0x3f, r0	; 63
    b24e:	cd bf       	out	0x3d, r28	; 61
	int i;

	va_list ap;
	va_start(ap, expected_size);
    b250:	ce 01       	movw	r24, r28
    b252:	49 96       	adiw	r24, 0x19	; 25
    b254:	9e 87       	std	Y+14, r25	; 0x0e
    b256:	8d 87       	std	Y+13, r24	; 0x0d

	int count = 0;
    b258:	18 8a       	std	Y+16, r1	; 0x10
    b25a:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
    b25c:	8f 89       	ldd	r24, Y+23	; 0x17
    b25e:	98 8d       	ldd	r25, Y+24	; 0x18
    b260:	9a 87       	std	Y+10, r25	; 0x0a
    b262:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    b264:	89 85       	ldd	r24, Y+9	; 0x09
    b266:	9a 85       	ldd	r25, Y+10	; 0x0a
    b268:	62 e0       	ldi	r22, 0x02	; 2
    b26a:	70 e0       	ldi	r23, 0x00	; 0
    b26c:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    b270:	98 87       	std	Y+8, r25	; 0x08
    b272:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    b274:	8f 81       	ldd	r24, Y+7	; 0x07
    b276:	98 85       	ldd	r25, Y+8	; 0x08
    b278:	00 97       	sbiw	r24, 0x00	; 0
    b27a:	11 f4       	brne	.+4      	; 0xb280 <newSetVarToGrow+0x44>
    b27c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b280:	1c 86       	std	Y+12, r1	; 0x0c
    b282:	1b 86       	std	Y+11, r1	; 0x0b
    b284:	3e c0       	rjmp	.+124    	; 0xb302 <newSetVarToGrow+0xc6>
	{
		arg = va_arg(ap, TVP);
    b286:	2d 85       	ldd	r18, Y+13	; 0x0d
    b288:	3e 85       	ldd	r19, Y+14	; 0x0e
    b28a:	c9 01       	movw	r24, r18
    b28c:	02 96       	adiw	r24, 0x02	; 2
    b28e:	9e 87       	std	Y+14, r25	; 0x0e
    b290:	8d 87       	std	Y+13, r24	; 0x0d
    b292:	f9 01       	movw	r30, r18
    b294:	80 81       	ld	r24, Z
    b296:	91 81       	ldd	r25, Z+1	; 0x01
    b298:	9e 83       	std	Y+6, r25	; 0x06
    b29a:	8d 83       	std	Y+5, r24	; 0x05
		v = vdmClone(arg); /*  set binding  */
    b29c:	8d 81       	ldd	r24, Y+5	; 0x05
    b29e:	9e 81       	ldd	r25, Y+6	; 0x06
    b2a0:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    b2a4:	9c 83       	std	Y+4, r25	; 0x04
    b2a6:	8b 83       	std	Y+3, r24	; 0x03


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    b2a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    b2aa:	38 89       	ldd	r19, Y+16	; 0x10
    b2ac:	89 85       	ldd	r24, Y+9	; 0x09
    b2ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    b2b0:	28 17       	cp	r18, r24
    b2b2:	39 07       	cpc	r19, r25
    b2b4:	bc f0       	brlt	.+46     	; 0xb2e4 <newSetVarToGrow+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b2b6:	89 85       	ldd	r24, Y+9	; 0x09
    b2b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b2ba:	0a 96       	adiw	r24, 0x0a	; 10
    b2bc:	9a 87       	std	Y+10, r25	; 0x0a
    b2be:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b2c0:	89 85       	ldd	r24, Y+9	; 0x09
    b2c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b2c4:	9c 01       	movw	r18, r24
    b2c6:	22 0f       	add	r18, r18
    b2c8:	33 1f       	adc	r19, r19
    b2ca:	8f 81       	ldd	r24, Y+7	; 0x07
    b2cc:	98 85       	ldd	r25, Y+8	; 0x08
    b2ce:	b9 01       	movw	r22, r18
    b2d0:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    b2d4:	98 87       	std	Y+8, r25	; 0x08
    b2d6:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b2d8:	8f 81       	ldd	r24, Y+7	; 0x07
    b2da:	98 85       	ldd	r25, Y+8	; 0x08
    b2dc:	00 97       	sbiw	r24, 0x00	; 0
    b2de:	11 f4       	brne	.+4      	; 0xb2e4 <newSetVarToGrow+0xa8>
    b2e0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		}
		vdmSetAdd(value,&count,v);
    b2e4:	8f 81       	ldd	r24, Y+7	; 0x07
    b2e6:	98 85       	ldd	r25, Y+8	; 0x08
    b2e8:	9e 01       	movw	r18, r28
    b2ea:	21 5f       	subi	r18, 0xF1	; 241
    b2ec:	3f 4f       	sbci	r19, 0xFF	; 255
    b2ee:	4b 81       	ldd	r20, Y+3	; 0x03
    b2f0:	5c 81       	ldd	r21, Y+4	; 0x04
    b2f2:	b9 01       	movw	r22, r18
    b2f4:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>
	assert(value != NULL);

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b2f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    b2fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    b2fc:	01 96       	adiw	r24, 0x01	; 1
    b2fe:	9c 87       	std	Y+12, r25	; 0x0c
    b300:	8b 87       	std	Y+11, r24	; 0x0b
    b302:	2b 85       	ldd	r18, Y+11	; 0x0b
    b304:	3c 85       	ldd	r19, Y+12	; 0x0c
    b306:	8d 89       	ldd	r24, Y+21	; 0x15
    b308:	9e 89       	ldd	r25, Y+22	; 0x16
    b30a:	28 17       	cp	r18, r24
    b30c:	39 07       	cpc	r19, r25
    b30e:	08 f4       	brcc	.+2      	; 0xb312 <newSetVarToGrow+0xd6>
    b310:	ba cf       	rjmp	.-140    	; 0xb286 <newSetVarToGrow+0x4a>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValues(count, VDM_SET, value);
    b312:	8f 85       	ldd	r24, Y+15	; 0x0f
    b314:	98 89       	ldd	r25, Y+16	; 0x10
    b316:	2f 81       	ldd	r18, Y+7	; 0x07
    b318:	38 85       	ldd	r19, Y+8	; 0x08
    b31a:	67 e0       	ldi	r22, 0x07	; 7
    b31c:	70 e0       	ldi	r23, 0x00	; 0
    b31e:	a9 01       	movw	r20, r18
    b320:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <newCollectionWithValues>
    b324:	9a 83       	std	Y+2, r25	; 0x02
    b326:	89 83       	std	Y+1, r24	; 0x01
	free(value);
    b328:	8f 81       	ldd	r24, Y+7	; 0x07
    b32a:	98 85       	ldd	r25, Y+8	; 0x08
    b32c:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    b330:	89 81       	ldd	r24, Y+1	; 0x01
    b332:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b334:	60 96       	adiw	r28, 0x10	; 16
    b336:	0f b6       	in	r0, 0x3f	; 63
    b338:	f8 94       	cli
    b33a:	de bf       	out	0x3e, r29	; 62
    b33c:	0f be       	out	0x3f, r0	; 63
    b33e:	cd bf       	out	0x3d, r28	; 61
    b340:	cf 91       	pop	r28
    b342:	df 91       	pop	r29
    b344:	08 95       	ret

0000b346 <newSetVarToGrowGC>:

TVP newSetVarToGrowGC(size_t size, size_t expected_size, TVP *from, ...)
{
    b346:	df 93       	push	r29
    b348:	cf 93       	push	r28
    b34a:	cd b7       	in	r28, 0x3d	; 61
    b34c:	de b7       	in	r29, 0x3e	; 62
    b34e:	60 97       	sbiw	r28, 0x10	; 16
    b350:	0f b6       	in	r0, 0x3f	; 63
    b352:	f8 94       	cli
    b354:	de bf       	out	0x3e, r29	; 62
    b356:	0f be       	out	0x3f, r0	; 63
    b358:	cd bf       	out	0x3d, r28	; 61
	va_list ap;
	va_start(ap, from);
    b35a:	ce 01       	movw	r24, r28
    b35c:	4b 96       	adiw	r24, 0x1b	; 27
    b35e:	9e 87       	std	Y+14, r25	; 0x0e
    b360:	8d 87       	std	Y+13, r24	; 0x0d

	int i;
	int count = 0;
    b362:	18 8a       	std	Y+16, r1	; 0x10
    b364:	1f 86       	std	Y+15, r1	; 0x0f

	int bufsize = expected_size;  /* DEFAULT_SET_COMP_BUFFER;  */
    b366:	8f 89       	ldd	r24, Y+23	; 0x17
    b368:	98 8d       	ldd	r25, Y+24	; 0x18
    b36a:	9a 87       	std	Y+10, r25	; 0x0a
    b36c:	89 87       	std	Y+9, r24	; 0x09
	TVP* value = (TVP*) calloc(bufsize, sizeof(TVP));
    b36e:	89 85       	ldd	r24, Y+9	; 0x09
    b370:	9a 85       	ldd	r25, Y+10	; 0x0a
    b372:	62 e0       	ldi	r22, 0x02	; 2
    b374:	70 e0       	ldi	r23, 0x00	; 0
    b376:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    b37a:	98 87       	std	Y+8, r25	; 0x08
    b37c:	8f 83       	std	Y+7, r24	; 0x07
	assert(value != NULL);
    b37e:	8f 81       	ldd	r24, Y+7	; 0x07
    b380:	98 85       	ldd	r25, Y+8	; 0x08
    b382:	00 97       	sbiw	r24, 0x00	; 0
    b384:	11 f4       	brne	.+4      	; 0xb38a <newSetVarToGrowGC+0x44>
    b386:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b38a:	1c 86       	std	Y+12, r1	; 0x0c
    b38c:	1b 86       	std	Y+11, r1	; 0x0b
    b38e:	3e c0       	rjmp	.+124    	; 0xb40c <newSetVarToGrowGC+0xc6>
	{
		arg = va_arg(ap, TVP);
    b390:	2d 85       	ldd	r18, Y+13	; 0x0d
    b392:	3e 85       	ldd	r19, Y+14	; 0x0e
    b394:	c9 01       	movw	r24, r18
    b396:	02 96       	adiw	r24, 0x02	; 2
    b398:	9e 87       	std	Y+14, r25	; 0x0e
    b39a:	8d 87       	std	Y+13, r24	; 0x0d
    b39c:	f9 01       	movw	r30, r18
    b39e:	80 81       	ld	r24, Z
    b3a0:	91 81       	ldd	r25, Z+1	; 0x01
    b3a2:	9e 83       	std	Y+6, r25	; 0x06
    b3a4:	8d 83       	std	Y+5, r24	; 0x05
		v = vdmClone(arg); /*  set binding  */
    b3a6:	8d 81       	ldd	r24, Y+5	; 0x05
    b3a8:	9e 81       	ldd	r25, Y+6	; 0x06
    b3aa:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    b3ae:	9c 83       	std	Y+4, r25	; 0x04
    b3b0:	8b 83       	std	Y+3, r24	; 0x03


		/* Extra security measure.  Will only be true if size >= expected_size.  */
		if(count>=bufsize)
    b3b2:	2f 85       	ldd	r18, Y+15	; 0x0f
    b3b4:	38 89       	ldd	r19, Y+16	; 0x10
    b3b6:	89 85       	ldd	r24, Y+9	; 0x09
    b3b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3ba:	28 17       	cp	r18, r24
    b3bc:	39 07       	cpc	r19, r25
    b3be:	bc f0       	brlt	.+46     	; 0xb3ee <newSetVarToGrowGC+0xa8>
		{
			/* buffer too small add memory chunk  */
			bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;
    b3c0:	89 85       	ldd	r24, Y+9	; 0x09
    b3c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3c4:	0a 96       	adiw	r24, 0x0a	; 10
    b3c6:	9a 87       	std	Y+10, r25	; 0x0a
    b3c8:	89 87       	std	Y+9, r24	; 0x09
			value = (TVP*)realloc(value, bufsize * sizeof(TVP));
    b3ca:	89 85       	ldd	r24, Y+9	; 0x09
    b3cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3ce:	9c 01       	movw	r18, r24
    b3d0:	22 0f       	add	r18, r18
    b3d2:	33 1f       	adc	r19, r19
    b3d4:	8f 81       	ldd	r24, Y+7	; 0x07
    b3d6:	98 85       	ldd	r25, Y+8	; 0x08
    b3d8:	b9 01       	movw	r22, r18
    b3da:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    b3de:	98 87       	std	Y+8, r25	; 0x08
    b3e0:	8f 83       	std	Y+7, r24	; 0x07
			assert(value != NULL);
    b3e2:	8f 81       	ldd	r24, Y+7	; 0x07
    b3e4:	98 85       	ldd	r25, Y+8	; 0x08
    b3e6:	00 97       	sbiw	r24, 0x00	; 0
    b3e8:	11 f4       	brne	.+4      	; 0xb3ee <newSetVarToGrowGC+0xa8>
    b3ea:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		}
		vdmSetAdd(value,&count,v);
    b3ee:	8f 81       	ldd	r24, Y+7	; 0x07
    b3f0:	98 85       	ldd	r25, Y+8	; 0x08
    b3f2:	9e 01       	movw	r18, r28
    b3f4:	21 5f       	subi	r18, 0xF1	; 241
    b3f6:	3f 4f       	sbci	r19, 0xFF	; 255
    b3f8:	4b 81       	ldd	r20, Y+3	; 0x03
    b3fa:	5c 81       	ldd	r21, Y+4	; 0x04
    b3fc:	b9 01       	movw	r22, r18
    b3fe:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>
	assert(value != NULL);

	TVP arg;
	TVP v;

	for (i = 0; i < size; i++)
    b402:	8b 85       	ldd	r24, Y+11	; 0x0b
    b404:	9c 85       	ldd	r25, Y+12	; 0x0c
    b406:	01 96       	adiw	r24, 0x01	; 1
    b408:	9c 87       	std	Y+12, r25	; 0x0c
    b40a:	8b 87       	std	Y+11, r24	; 0x0b
    b40c:	2b 85       	ldd	r18, Y+11	; 0x0b
    b40e:	3c 85       	ldd	r19, Y+12	; 0x0c
    b410:	8d 89       	ldd	r24, Y+21	; 0x15
    b412:	9e 89       	ldd	r25, Y+22	; 0x16
    b414:	28 17       	cp	r18, r24
    b416:	39 07       	cpc	r19, r25
    b418:	08 f4       	brcc	.+2      	; 0xb41c <newSetVarToGrowGC+0xd6>
    b41a:	ba cf       	rjmp	.-140    	; 0xb390 <newSetVarToGrowGC+0x4a>
		vdmSetAdd(value,&count,v);
	}

	va_end(ap);

	TVP res = newCollectionWithValuesGC(count, VDM_SET, value, from);
    b41c:	8f 85       	ldd	r24, Y+15	; 0x0f
    b41e:	98 89       	ldd	r25, Y+16	; 0x10
    b420:	2f 81       	ldd	r18, Y+7	; 0x07
    b422:	38 85       	ldd	r19, Y+8	; 0x08
    b424:	e9 8d       	ldd	r30, Y+25	; 0x19
    b426:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b428:	67 e0       	ldi	r22, 0x07	; 7
    b42a:	70 e0       	ldi	r23, 0x00	; 0
    b42c:	a9 01       	movw	r20, r18
    b42e:	9f 01       	movw	r18, r30
    b430:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <newCollectionWithValuesGC>
    b434:	9a 83       	std	Y+2, r25	; 0x02
    b436:	89 83       	std	Y+1, r24	; 0x01
	free(value);
    b438:	8f 81       	ldd	r24, Y+7	; 0x07
    b43a:	98 85       	ldd	r25, Y+8	; 0x08
    b43c:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    b440:	89 81       	ldd	r24, Y+1	; 0x01
    b442:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b444:	60 96       	adiw	r28, 0x10	; 16
    b446:	0f b6       	in	r0, 0x3f	; 63
    b448:	f8 94       	cli
    b44a:	de bf       	out	0x3e, r29	; 62
    b44c:	0f be       	out	0x3f, r0	; 63
    b44e:	cd bf       	out	0x3d, r28	; 61
    b450:	cf 91       	pop	r28
    b452:	df 91       	pop	r29
    b454:	08 95       	ret

0000b456 <vdmSetGrow>:



/* What to return?  */
void vdmSetGrow(TVP set, TVP element)
{
    b456:	ef 92       	push	r14
    b458:	ff 92       	push	r15
    b45a:	0f 93       	push	r16
    b45c:	1f 93       	push	r17
    b45e:	df 93       	push	r29
    b460:	cf 93       	push	r28
    b462:	cd b7       	in	r28, 0x3d	; 61
    b464:	de b7       	in	r29, 0x3e	; 62
    b466:	28 97       	sbiw	r28, 0x08	; 8
    b468:	0f b6       	in	r0, 0x3f	; 63
    b46a:	f8 94       	cli
    b46c:	de bf       	out	0x3e, r29	; 62
    b46e:	0f be       	out	0x3f, r0	; 63
    b470:	cd bf       	out	0x3d, r28	; 61
    b472:	9e 83       	std	Y+6, r25	; 0x06
    b474:	8d 83       	std	Y+5, r24	; 0x05
    b476:	78 87       	std	Y+8, r23	; 0x08
    b478:	6f 83       	std	Y+7, r22	; 0x07
/* 	int bufsize = DEFAULT_SET_COMP_BUFFER;  */

	UNWRAP_COLLECTION(col, set);
    b47a:	ed 81       	ldd	r30, Y+5	; 0x05
    b47c:	fe 81       	ldd	r31, Y+6	; 0x06
    b47e:	84 81       	ldd	r24, Z+4	; 0x04
    b480:	95 81       	ldd	r25, Z+5	; 0x05
    b482:	9c 83       	std	Y+4, r25	; 0x04
    b484:	8b 83       	std	Y+3, r24	; 0x03
	int size = col->size;
    b486:	eb 81       	ldd	r30, Y+3	; 0x03
    b488:	fc 81       	ldd	r31, Y+4	; 0x04
    b48a:	82 81       	ldd	r24, Z+2	; 0x02
    b48c:	93 81       	ldd	r25, Z+3	; 0x03
    b48e:	9a 83       	std	Y+2, r25	; 0x02
    b490:	89 83       	std	Y+1, r24	; 0x01
/* 		buffer too small add memory chunk  */
/* 		bufsize += DEFAULT_SET_COMP_BUFFER_STEPSIZE;  */
/* 		col->value = (TVP*)realloc(col->value, bufsize * sizeof(TVP));  */
/* 	}  */

	col->value = (TVP *)realloc(col->value, (size + 1) * sizeof(TVP));
    b492:	eb 81       	ldd	r30, Y+3	; 0x03
    b494:	fc 81       	ldd	r31, Y+4	; 0x04
    b496:	40 81       	ld	r20, Z
    b498:	51 81       	ldd	r21, Z+1	; 0x01
    b49a:	89 81       	ldd	r24, Y+1	; 0x01
    b49c:	9a 81       	ldd	r25, Y+2	; 0x02
    b49e:	01 96       	adiw	r24, 0x01	; 1
    b4a0:	88 0f       	add	r24, r24
    b4a2:	99 1f       	adc	r25, r25
    b4a4:	9c 01       	movw	r18, r24
    b4a6:	ca 01       	movw	r24, r20
    b4a8:	b9 01       	movw	r22, r18
    b4aa:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    b4ae:	eb 81       	ldd	r30, Y+3	; 0x03
    b4b0:	fc 81       	ldd	r31, Y+4	; 0x04
    b4b2:	91 83       	std	Z+1, r25	; 0x01
    b4b4:	80 83       	st	Z, r24
	assert(col->value != NULL);
    b4b6:	eb 81       	ldd	r30, Y+3	; 0x03
    b4b8:	fc 81       	ldd	r31, Y+4	; 0x04
    b4ba:	80 81       	ld	r24, Z
    b4bc:	91 81       	ldd	r25, Z+1	; 0x01
    b4be:	00 97       	sbiw	r24, 0x00	; 0
    b4c0:	11 f4       	brne	.+4      	; 0xb4c6 <vdmSetGrow+0x70>
    b4c2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	vdmSetAdd(col->value, &(col->size), vdmClone(element));
    b4c6:	eb 81       	ldd	r30, Y+3	; 0x03
    b4c8:	fc 81       	ldd	r31, Y+4	; 0x04
    b4ca:	e0 80       	ld	r14, Z
    b4cc:	f1 80       	ldd	r15, Z+1	; 0x01
    b4ce:	8b 81       	ldd	r24, Y+3	; 0x03
    b4d0:	9c 81       	ldd	r25, Y+4	; 0x04
    b4d2:	8c 01       	movw	r16, r24
    b4d4:	0e 5f       	subi	r16, 0xFE	; 254
    b4d6:	1f 4f       	sbci	r17, 0xFF	; 255
    b4d8:	8f 81       	ldd	r24, Y+7	; 0x07
    b4da:	98 85       	ldd	r25, Y+8	; 0x08
    b4dc:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    b4e0:	9c 01       	movw	r18, r24
    b4e2:	c7 01       	movw	r24, r14
    b4e4:	b8 01       	movw	r22, r16
    b4e6:	a9 01       	movw	r20, r18
    b4e8:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>
}
    b4ec:	28 96       	adiw	r28, 0x08	; 8
    b4ee:	0f b6       	in	r0, 0x3f	; 63
    b4f0:	f8 94       	cli
    b4f2:	de bf       	out	0x3e, r29	; 62
    b4f4:	0f be       	out	0x3f, r0	; 63
    b4f6:	cd bf       	out	0x3d, r28	; 61
    b4f8:	cf 91       	pop	r28
    b4fa:	df 91       	pop	r29
    b4fc:	1f 91       	pop	r17
    b4fe:	0f 91       	pop	r16
    b500:	ff 90       	pop	r15
    b502:	ef 90       	pop	r14
    b504:	08 95       	ret

0000b506 <vdmSetFit>:



void vdmSetFit(TVP set)
{
    b506:	df 93       	push	r29
    b508:	cf 93       	push	r28
    b50a:	00 d0       	rcall	.+0      	; 0xb50c <vdmSetFit+0x6>
    b50c:	00 d0       	rcall	.+0      	; 0xb50e <vdmSetFit+0x8>
    b50e:	cd b7       	in	r28, 0x3d	; 61
    b510:	de b7       	in	r29, 0x3e	; 62
    b512:	9c 83       	std	Y+4, r25	; 0x04
    b514:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col, set);
    b516:	eb 81       	ldd	r30, Y+3	; 0x03
    b518:	fc 81       	ldd	r31, Y+4	; 0x04
    b51a:	84 81       	ldd	r24, Z+4	; 0x04
    b51c:	95 81       	ldd	r25, Z+5	; 0x05
    b51e:	9a 83       	std	Y+2, r25	; 0x02
    b520:	89 83       	std	Y+1, r24	; 0x01

	/* Assumes that more memory is allocated in the col->value array than there are elements.  */
	col->value = (TVP*)realloc(col->value, col->size * sizeof(TVP));
    b522:	e9 81       	ldd	r30, Y+1	; 0x01
    b524:	fa 81       	ldd	r31, Y+2	; 0x02
    b526:	40 81       	ld	r20, Z
    b528:	51 81       	ldd	r21, Z+1	; 0x01
    b52a:	e9 81       	ldd	r30, Y+1	; 0x01
    b52c:	fa 81       	ldd	r31, Y+2	; 0x02
    b52e:	82 81       	ldd	r24, Z+2	; 0x02
    b530:	93 81       	ldd	r25, Z+3	; 0x03
    b532:	9c 01       	movw	r18, r24
    b534:	22 0f       	add	r18, r18
    b536:	33 1f       	adc	r19, r19
    b538:	ca 01       	movw	r24, r20
    b53a:	b9 01       	movw	r22, r18
    b53c:	0e 94 8d 6d 	call	0xdb1a	; 0xdb1a <realloc>
    b540:	e9 81       	ldd	r30, Y+1	; 0x01
    b542:	fa 81       	ldd	r31, Y+2	; 0x02
    b544:	91 83       	std	Z+1, r25	; 0x01
    b546:	80 83       	st	Z, r24
	assert(col->value != NULL);
    b548:	e9 81       	ldd	r30, Y+1	; 0x01
    b54a:	fa 81       	ldd	r31, Y+2	; 0x02
    b54c:	80 81       	ld	r24, Z
    b54e:	91 81       	ldd	r25, Z+1	; 0x01
    b550:	00 97       	sbiw	r24, 0x00	; 0
    b552:	11 f4       	brne	.+4      	; 0xb558 <vdmSetFit+0x52>
    b554:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
}
    b558:	0f 90       	pop	r0
    b55a:	0f 90       	pop	r0
    b55c:	0f 90       	pop	r0
    b55e:	0f 90       	pop	r0
    b560:	cf 91       	pop	r28
    b562:	df 91       	pop	r29
    b564:	08 95       	ret

0000b566 <vdmSetEnumerateSetOfInts>:



TVP vdmSetEnumerateSetOfInts(int lower, int upper)
{
    b566:	df 93       	push	r29
    b568:	cf 93       	push	r28
    b56a:	cd b7       	in	r28, 0x3d	; 61
    b56c:	de b7       	in	r29, 0x3e	; 62
    b56e:	2e 97       	sbiw	r28, 0x0e	; 14
    b570:	0f b6       	in	r0, 0x3f	; 63
    b572:	f8 94       	cli
    b574:	de bf       	out	0x3e, r29	; 62
    b576:	0f be       	out	0x3f, r0	; 63
    b578:	cd bf       	out	0x3d, r28	; 61
    b57a:	9a 87       	std	Y+10, r25	; 0x0a
    b57c:	89 87       	std	Y+9, r24	; 0x09
    b57e:	7c 87       	std	Y+12, r23	; 0x0c
    b580:	6b 87       	std	Y+11, r22	; 0x0b
	/* For faster access.  */
	/* 	l = lower->value.intVal;  */
	/* 	u = upper->value.intVal;  */

	/* Some special cases.  */
	if (upper < lower)
    b582:	2b 85       	ldd	r18, Y+11	; 0x0b
    b584:	3c 85       	ldd	r19, Y+12	; 0x0c
    b586:	89 85       	ldd	r24, Y+9	; 0x09
    b588:	9a 85       	ldd	r25, Y+10	; 0x0a
    b58a:	28 17       	cp	r18, r24
    b58c:	39 07       	cpc	r19, r25
    b58e:	1c f4       	brge	.+6      	; 0xb596 <vdmSetEnumerateSetOfInts+0x30>
	{
		return NULL;
    b590:	1e 86       	std	Y+14, r1	; 0x0e
    b592:	1d 86       	std	Y+13, r1	; 0x0d
    b594:	85 c0       	rjmp	.+266    	; 0xb6a0 <vdmSetEnumerateSetOfInts+0x13a>
	}

	if(lower == upper)
    b596:	29 85       	ldd	r18, Y+9	; 0x09
    b598:	3a 85       	ldd	r19, Y+10	; 0x0a
    b59a:	8b 85       	ldd	r24, Y+11	; 0x0b
    b59c:	9c 85       	ldd	r25, Y+12	; 0x0c
    b59e:	28 17       	cp	r18, r24
    b5a0:	39 07       	cpc	r19, r25
    b5a2:	c9 f4       	brne	.+50     	; 0xb5d6 <vdmSetEnumerateSetOfInts+0x70>
	{
		return newSetVar(1, newInt(upper));
    b5a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    b5a8:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    b5ac:	9c 01       	movw	r18, r24
    b5ae:	00 d0       	rcall	.+0      	; 0xb5b0 <vdmSetEnumerateSetOfInts+0x4a>
    b5b0:	00 d0       	rcall	.+0      	; 0xb5b2 <vdmSetEnumerateSetOfInts+0x4c>
    b5b2:	ed b7       	in	r30, 0x3d	; 61
    b5b4:	fe b7       	in	r31, 0x3e	; 62
    b5b6:	31 96       	adiw	r30, 0x01	; 1
    b5b8:	81 e0       	ldi	r24, 0x01	; 1
    b5ba:	90 e0       	ldi	r25, 0x00	; 0
    b5bc:	91 83       	std	Z+1, r25	; 0x01
    b5be:	80 83       	st	Z, r24
    b5c0:	33 83       	std	Z+3, r19	; 0x03
    b5c2:	22 83       	std	Z+2, r18	; 0x02
    b5c4:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    b5c8:	0f 90       	pop	r0
    b5ca:	0f 90       	pop	r0
    b5cc:	0f 90       	pop	r0
    b5ce:	0f 90       	pop	r0
    b5d0:	9e 87       	std	Y+14, r25	; 0x0e
    b5d2:	8d 87       	std	Y+13, r24	; 0x0d
    b5d4:	65 c0       	rjmp	.+202    	; 0xb6a0 <vdmSetEnumerateSetOfInts+0x13a>
	}

	/* The common case.  */
	theset = (TVP*)calloc(upper - lower + 1, sizeof(TVP));
    b5d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    b5d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    b5da:	89 85       	ldd	r24, Y+9	; 0x09
    b5dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    b5de:	a9 01       	movw	r20, r18
    b5e0:	48 1b       	sub	r20, r24
    b5e2:	59 0b       	sbc	r21, r25
    b5e4:	ca 01       	movw	r24, r20
    b5e6:	01 96       	adiw	r24, 0x01	; 1
    b5e8:	62 e0       	ldi	r22, 0x02	; 2
    b5ea:	70 e0       	ldi	r23, 0x00	; 0
    b5ec:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <calloc>
    b5f0:	9e 83       	std	Y+6, r25	; 0x06
    b5f2:	8d 83       	std	Y+5, r24	; 0x05
	assert(theset != NULL);
    b5f4:	8d 81       	ldd	r24, Y+5	; 0x05
    b5f6:	9e 81       	ldd	r25, Y+6	; 0x06
    b5f8:	00 97       	sbiw	r24, 0x00	; 0
    b5fa:	11 f4       	brne	.+4      	; 0xb600 <vdmSetEnumerateSetOfInts+0x9a>
    b5fc:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	count = 0;
    b600:	18 86       	std	Y+8, r1	; 0x08
    b602:	1f 82       	std	Y+7, r1	; 0x07

	for (i = lower; i <= upper; i++)
    b604:	89 85       	ldd	r24, Y+9	; 0x09
    b606:	9a 85       	ldd	r25, Y+10	; 0x0a
    b608:	9c 83       	std	Y+4, r25	; 0x04
    b60a:	8b 83       	std	Y+3, r24	; 0x03
    b60c:	12 c0       	rjmp	.+36     	; 0xb632 <vdmSetEnumerateSetOfInts+0xcc>
	{
		vdmSetAdd(theset, &count, newInt(i));
    b60e:	8b 81       	ldd	r24, Y+3	; 0x03
    b610:	9c 81       	ldd	r25, Y+4	; 0x04
    b612:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
    b616:	ac 01       	movw	r20, r24
    b618:	8d 81       	ldd	r24, Y+5	; 0x05
    b61a:	9e 81       	ldd	r25, Y+6	; 0x06
    b61c:	9e 01       	movw	r18, r28
    b61e:	29 5f       	subi	r18, 0xF9	; 249
    b620:	3f 4f       	sbci	r19, 0xFF	; 255
    b622:	b9 01       	movw	r22, r18
    b624:	0e 94 21 56 	call	0xac42	; 0xac42 <vdmSetAdd>
	/* The common case.  */
	theset = (TVP*)calloc(upper - lower + 1, sizeof(TVP));
	assert(theset != NULL);
	count = 0;

	for (i = lower; i <= upper; i++)
    b628:	8b 81       	ldd	r24, Y+3	; 0x03
    b62a:	9c 81       	ldd	r25, Y+4	; 0x04
    b62c:	01 96       	adiw	r24, 0x01	; 1
    b62e:	9c 83       	std	Y+4, r25	; 0x04
    b630:	8b 83       	std	Y+3, r24	; 0x03
    b632:	2b 81       	ldd	r18, Y+3	; 0x03
    b634:	3c 81       	ldd	r19, Y+4	; 0x04
    b636:	8b 85       	ldd	r24, Y+11	; 0x0b
    b638:	9c 85       	ldd	r25, Y+12	; 0x0c
    b63a:	82 17       	cp	r24, r18
    b63c:	93 07       	cpc	r25, r19
    b63e:	3c f7       	brge	.-50     	; 0xb60e <vdmSetEnumerateSetOfInts+0xa8>
	{
		vdmSetAdd(theset, &count, newInt(i));
	}

	TVP res = newCollectionWithValues(count, VDM_SET, theset);
    b640:	8f 81       	ldd	r24, Y+7	; 0x07
    b642:	98 85       	ldd	r25, Y+8	; 0x08
    b644:	2d 81       	ldd	r18, Y+5	; 0x05
    b646:	3e 81       	ldd	r19, Y+6	; 0x06
    b648:	67 e0       	ldi	r22, 0x07	; 7
    b64a:	70 e0       	ldi	r23, 0x00	; 0
    b64c:	a9 01       	movw	r20, r18
    b64e:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <newCollectionWithValues>
    b652:	9a 83       	std	Y+2, r25	; 0x02
    b654:	89 83       	std	Y+1, r24	; 0x01

	for(i = 0; i < count; i++)
    b656:	1c 82       	std	Y+4, r1	; 0x04
    b658:	1b 82       	std	Y+3, r1	; 0x03
    b65a:	13 c0       	rjmp	.+38     	; 0xb682 <vdmSetEnumerateSetOfInts+0x11c>
	{
		vdmFree(theset[i]);
    b65c:	8b 81       	ldd	r24, Y+3	; 0x03
    b65e:	9c 81       	ldd	r25, Y+4	; 0x04
    b660:	9c 01       	movw	r18, r24
    b662:	22 0f       	add	r18, r18
    b664:	33 1f       	adc	r19, r19
    b666:	8d 81       	ldd	r24, Y+5	; 0x05
    b668:	9e 81       	ldd	r25, Y+6	; 0x06
    b66a:	fc 01       	movw	r30, r24
    b66c:	e2 0f       	add	r30, r18
    b66e:	f3 1f       	adc	r31, r19
    b670:	80 81       	ld	r24, Z
    b672:	91 81       	ldd	r25, Z+1	; 0x01
    b674:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		vdmSetAdd(theset, &count, newInt(i));
	}

	TVP res = newCollectionWithValues(count, VDM_SET, theset);

	for(i = 0; i < count; i++)
    b678:	8b 81       	ldd	r24, Y+3	; 0x03
    b67a:	9c 81       	ldd	r25, Y+4	; 0x04
    b67c:	01 96       	adiw	r24, 0x01	; 1
    b67e:	9c 83       	std	Y+4, r25	; 0x04
    b680:	8b 83       	std	Y+3, r24	; 0x03
    b682:	2f 81       	ldd	r18, Y+7	; 0x07
    b684:	38 85       	ldd	r19, Y+8	; 0x08
    b686:	8b 81       	ldd	r24, Y+3	; 0x03
    b688:	9c 81       	ldd	r25, Y+4	; 0x04
    b68a:	82 17       	cp	r24, r18
    b68c:	93 07       	cpc	r25, r19
    b68e:	34 f3       	brlt	.-52     	; 0xb65c <vdmSetEnumerateSetOfInts+0xf6>
	{
		vdmFree(theset[i]);
	}
	free(theset);
    b690:	8d 81       	ldd	r24, Y+5	; 0x05
    b692:	9e 81       	ldd	r25, Y+6	; 0x06
    b694:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	return res;
    b698:	89 81       	ldd	r24, Y+1	; 0x01
    b69a:	9a 81       	ldd	r25, Y+2	; 0x02
    b69c:	9e 87       	std	Y+14, r25	; 0x0e
    b69e:	8d 87       	std	Y+13, r24	; 0x0d
    b6a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    b6a2:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    b6a4:	2e 96       	adiw	r28, 0x0e	; 14
    b6a6:	0f b6       	in	r0, 0x3f	; 63
    b6a8:	f8 94       	cli
    b6aa:	de bf       	out	0x3e, r29	; 62
    b6ac:	0f be       	out	0x3f, r0	; 63
    b6ae:	cd bf       	out	0x3d, r28	; 61
    b6b0:	cf 91       	pop	r28
    b6b2:	df 91       	pop	r29
    b6b4:	08 95       	ret

0000b6b6 <vdmSetElementAt>:


TVP vdmSetElementAt(TVP set, int loc)
{
    b6b6:	df 93       	push	r29
    b6b8:	cf 93       	push	r28
    b6ba:	cd b7       	in	r28, 0x3d	; 61
    b6bc:	de b7       	in	r29, 0x3e	; 62
    b6be:	28 97       	sbiw	r28, 0x08	; 8
    b6c0:	0f b6       	in	r0, 0x3f	; 63
    b6c2:	f8 94       	cli
    b6c4:	de bf       	out	0x3e, r29	; 62
    b6c6:	0f be       	out	0x3f, r0	; 63
    b6c8:	cd bf       	out	0x3d, r28	; 61
    b6ca:	9c 83       	std	Y+4, r25	; 0x04
    b6cc:	8b 83       	std	Y+3, r24	; 0x03
    b6ce:	7e 83       	std	Y+6, r23	; 0x06
    b6d0:	6d 83       	std	Y+5, r22	; 0x05
	UNWRAP_COLLECTION(col, set);
    b6d2:	eb 81       	ldd	r30, Y+3	; 0x03
    b6d4:	fc 81       	ldd	r31, Y+4	; 0x04
    b6d6:	84 81       	ldd	r24, Z+4	; 0x04
    b6d8:	95 81       	ldd	r25, Z+5	; 0x05
    b6da:	9a 83       	std	Y+2, r25	; 0x02
    b6dc:	89 83       	std	Y+1, r24	; 0x01

	if(loc >= col->size)
    b6de:	e9 81       	ldd	r30, Y+1	; 0x01
    b6e0:	fa 81       	ldd	r31, Y+2	; 0x02
    b6e2:	22 81       	ldd	r18, Z+2	; 0x02
    b6e4:	33 81       	ldd	r19, Z+3	; 0x03
    b6e6:	8d 81       	ldd	r24, Y+5	; 0x05
    b6e8:	9e 81       	ldd	r25, Y+6	; 0x06
    b6ea:	82 17       	cp	r24, r18
    b6ec:	93 07       	cpc	r25, r19
    b6ee:	1c f0       	brlt	.+6      	; 0xb6f6 <vdmSetElementAt+0x40>
	{
		return NULL;
    b6f0:	18 86       	std	Y+8, r1	; 0x08
    b6f2:	1f 82       	std	Y+7, r1	; 0x07
    b6f4:	11 c0       	rjmp	.+34     	; 0xb718 <vdmSetElementAt+0x62>
	}

	return vdmClone(col->value[loc]);
    b6f6:	e9 81       	ldd	r30, Y+1	; 0x01
    b6f8:	fa 81       	ldd	r31, Y+2	; 0x02
    b6fa:	20 81       	ld	r18, Z
    b6fc:	31 81       	ldd	r19, Z+1	; 0x01
    b6fe:	8d 81       	ldd	r24, Y+5	; 0x05
    b700:	9e 81       	ldd	r25, Y+6	; 0x06
    b702:	88 0f       	add	r24, r24
    b704:	99 1f       	adc	r25, r25
    b706:	f9 01       	movw	r30, r18
    b708:	e8 0f       	add	r30, r24
    b70a:	f9 1f       	adc	r31, r25
    b70c:	80 81       	ld	r24, Z
    b70e:	91 81       	ldd	r25, Z+1	; 0x01
    b710:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    b714:	98 87       	std	Y+8, r25	; 0x08
    b716:	8f 83       	std	Y+7, r24	; 0x07
    b718:	8f 81       	ldd	r24, Y+7	; 0x07
    b71a:	98 85       	ldd	r25, Y+8	; 0x08
}
    b71c:	28 96       	adiw	r28, 0x08	; 8
    b71e:	0f b6       	in	r0, 0x3f	; 63
    b720:	f8 94       	cli
    b722:	de bf       	out	0x3e, r29	; 62
    b724:	0f be       	out	0x3f, r0	; 63
    b726:	cd bf       	out	0x3d, r28	; 61
    b728:	cf 91       	pop	r28
    b72a:	df 91       	pop	r29
    b72c:	08 95       	ret

0000b72e <vdmSetElementAtGC>:

TVP vdmSetElementAtGC(TVP set, int loc, TVP *from)
{
    b72e:	df 93       	push	r29
    b730:	cf 93       	push	r28
    b732:	cd b7       	in	r28, 0x3d	; 61
    b734:	de b7       	in	r29, 0x3e	; 62
    b736:	2a 97       	sbiw	r28, 0x0a	; 10
    b738:	0f b6       	in	r0, 0x3f	; 63
    b73a:	f8 94       	cli
    b73c:	de bf       	out	0x3e, r29	; 62
    b73e:	0f be       	out	0x3f, r0	; 63
    b740:	cd bf       	out	0x3d, r28	; 61
    b742:	9c 83       	std	Y+4, r25	; 0x04
    b744:	8b 83       	std	Y+3, r24	; 0x03
    b746:	7e 83       	std	Y+6, r23	; 0x06
    b748:	6d 83       	std	Y+5, r22	; 0x05
    b74a:	58 87       	std	Y+8, r21	; 0x08
    b74c:	4f 83       	std	Y+7, r20	; 0x07
	UNWRAP_COLLECTION(col, set);
    b74e:	eb 81       	ldd	r30, Y+3	; 0x03
    b750:	fc 81       	ldd	r31, Y+4	; 0x04
    b752:	84 81       	ldd	r24, Z+4	; 0x04
    b754:	95 81       	ldd	r25, Z+5	; 0x05
    b756:	9a 83       	std	Y+2, r25	; 0x02
    b758:	89 83       	std	Y+1, r24	; 0x01

	if(loc >= col->size)
    b75a:	e9 81       	ldd	r30, Y+1	; 0x01
    b75c:	fa 81       	ldd	r31, Y+2	; 0x02
    b75e:	22 81       	ldd	r18, Z+2	; 0x02
    b760:	33 81       	ldd	r19, Z+3	; 0x03
    b762:	8d 81       	ldd	r24, Y+5	; 0x05
    b764:	9e 81       	ldd	r25, Y+6	; 0x06
    b766:	82 17       	cp	r24, r18
    b768:	93 07       	cpc	r25, r19
    b76a:	1c f0       	brlt	.+6      	; 0xb772 <vdmSetElementAtGC+0x44>
	{
		return NULL;
    b76c:	1a 86       	std	Y+10, r1	; 0x0a
    b76e:	19 86       	std	Y+9, r1	; 0x09
    b770:	14 c0       	rjmp	.+40     	; 0xb79a <vdmSetElementAtGC+0x6c>
	}

	return vdmCloneGC(col->value[loc], from);
    b772:	e9 81       	ldd	r30, Y+1	; 0x01
    b774:	fa 81       	ldd	r31, Y+2	; 0x02
    b776:	20 81       	ld	r18, Z
    b778:	31 81       	ldd	r19, Z+1	; 0x01
    b77a:	8d 81       	ldd	r24, Y+5	; 0x05
    b77c:	9e 81       	ldd	r25, Y+6	; 0x06
    b77e:	88 0f       	add	r24, r24
    b780:	99 1f       	adc	r25, r25
    b782:	f9 01       	movw	r30, r18
    b784:	e8 0f       	add	r30, r24
    b786:	f9 1f       	adc	r31, r25
    b788:	80 81       	ld	r24, Z
    b78a:	91 81       	ldd	r25, Z+1	; 0x01
    b78c:	2f 81       	ldd	r18, Y+7	; 0x07
    b78e:	38 85       	ldd	r19, Y+8	; 0x08
    b790:	b9 01       	movw	r22, r18
    b792:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <vdmCloneGC>
    b796:	9a 87       	std	Y+10, r25	; 0x0a
    b798:	89 87       	std	Y+9, r24	; 0x09
    b79a:	89 85       	ldd	r24, Y+9	; 0x09
    b79c:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    b79e:	2a 96       	adiw	r28, 0x0a	; 10
    b7a0:	0f b6       	in	r0, 0x3f	; 63
    b7a2:	f8 94       	cli
    b7a4:	de bf       	out	0x3e, r29	; 62
    b7a6:	0f be       	out	0x3f, r0	; 63
    b7a8:	cd bf       	out	0x3d, r28	; 61
    b7aa:	cf 91       	pop	r28
    b7ac:	df 91       	pop	r29
    b7ae:	08 95       	ret

0000b7b0 <vdmSetMemberOf>:



TVP vdmSetMemberOf(TVP set, TVP element)
{
    b7b0:	0f 93       	push	r16
    b7b2:	1f 93       	push	r17
    b7b4:	df 93       	push	r29
    b7b6:	cf 93       	push	r28
    b7b8:	cd b7       	in	r28, 0x3d	; 61
    b7ba:	de b7       	in	r29, 0x3e	; 62
    b7bc:	29 97       	sbiw	r28, 0x09	; 9
    b7be:	0f b6       	in	r0, 0x3f	; 63
    b7c0:	f8 94       	cli
    b7c2:	de bf       	out	0x3e, r29	; 62
    b7c4:	0f be       	out	0x3f, r0	; 63
    b7c6:	cd bf       	out	0x3d, r28	; 61
    b7c8:	9f 83       	std	Y+7, r25	; 0x07
    b7ca:	8e 83       	std	Y+6, r24	; 0x06
    b7cc:	79 87       	std	Y+9, r23	; 0x09
    b7ce:	68 87       	std	Y+8, r22	; 0x08
	int i;

	ASSERT_CHECK(set);
    b7d0:	ee 81       	ldd	r30, Y+6	; 0x06
    b7d2:	ff 81       	ldd	r31, Y+7	; 0x07
    b7d4:	80 81       	ld	r24, Z
    b7d6:	91 81       	ldd	r25, Z+1	; 0x01
    b7d8:	87 30       	cpi	r24, 0x07	; 7
    b7da:	91 05       	cpc	r25, r1
    b7dc:	11 f0       	breq	.+4      	; 0xb7e2 <vdmSetMemberOf+0x32>
    b7de:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col,set);
    b7e2:	ee 81       	ldd	r30, Y+6	; 0x06
    b7e4:	ff 81       	ldd	r31, Y+7	; 0x07
    b7e6:	84 81       	ldd	r24, Z+4	; 0x04
    b7e8:	95 81       	ldd	r25, Z+5	; 0x05
    b7ea:	9b 83       	std	Y+3, r25	; 0x03
    b7ec:	8a 83       	std	Y+2, r24	; 0x02

	bool found = false;
    b7ee:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < col->size; i++)
    b7f0:	1d 82       	std	Y+5, r1	; 0x05
    b7f2:	1c 82       	std	Y+4, r1	; 0x04
    b7f4:	23 c0       	rjmp	.+70     	; 0xb83c <vdmSetMemberOf+0x8c>
	{
		found|= equals(col->value[i],element);
    b7f6:	89 81       	ldd	r24, Y+1	; 0x01
    b7f8:	08 2f       	mov	r16, r24
    b7fa:	10 e0       	ldi	r17, 0x00	; 0
    b7fc:	ea 81       	ldd	r30, Y+2	; 0x02
    b7fe:	fb 81       	ldd	r31, Y+3	; 0x03
    b800:	20 81       	ld	r18, Z
    b802:	31 81       	ldd	r19, Z+1	; 0x01
    b804:	8c 81       	ldd	r24, Y+4	; 0x04
    b806:	9d 81       	ldd	r25, Y+5	; 0x05
    b808:	88 0f       	add	r24, r24
    b80a:	99 1f       	adc	r25, r25
    b80c:	f9 01       	movw	r30, r18
    b80e:	e8 0f       	add	r30, r24
    b810:	f9 1f       	adc	r31, r25
    b812:	80 81       	ld	r24, Z
    b814:	91 81       	ldd	r25, Z+1	; 0x01
    b816:	28 85       	ldd	r18, Y+8	; 0x08
    b818:	39 85       	ldd	r19, Y+9	; 0x09
    b81a:	b9 01       	movw	r22, r18
    b81c:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    b820:	88 2f       	mov	r24, r24
    b822:	90 e0       	ldi	r25, 0x00	; 0
    b824:	80 2b       	or	r24, r16
    b826:	91 2b       	or	r25, r17
    b828:	19 82       	std	Y+1, r1	; 0x01
    b82a:	00 97       	sbiw	r24, 0x00	; 0
    b82c:	11 f0       	breq	.+4      	; 0xb832 <vdmSetMemberOf+0x82>
    b82e:	81 e0       	ldi	r24, 0x01	; 1
    b830:	89 83       	std	Y+1, r24	; 0x01

	UNWRAP_COLLECTION(col,set);

	bool found = false;

	for (i = 0; i < col->size; i++)
    b832:	8c 81       	ldd	r24, Y+4	; 0x04
    b834:	9d 81       	ldd	r25, Y+5	; 0x05
    b836:	01 96       	adiw	r24, 0x01	; 1
    b838:	9d 83       	std	Y+5, r25	; 0x05
    b83a:	8c 83       	std	Y+4, r24	; 0x04
    b83c:	ea 81       	ldd	r30, Y+2	; 0x02
    b83e:	fb 81       	ldd	r31, Y+3	; 0x03
    b840:	22 81       	ldd	r18, Z+2	; 0x02
    b842:	33 81       	ldd	r19, Z+3	; 0x03
    b844:	8c 81       	ldd	r24, Y+4	; 0x04
    b846:	9d 81       	ldd	r25, Y+5	; 0x05
    b848:	82 17       	cp	r24, r18
    b84a:	93 07       	cpc	r25, r19
    b84c:	a4 f2       	brlt	.-88     	; 0xb7f6 <vdmSetMemberOf+0x46>
	{
		found|= equals(col->value[i],element);
	}

	return newBool(found);
    b84e:	89 81       	ldd	r24, Y+1	; 0x01
    b850:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    b854:	29 96       	adiw	r28, 0x09	; 9
    b856:	0f b6       	in	r0, 0x3f	; 63
    b858:	f8 94       	cli
    b85a:	de bf       	out	0x3e, r29	; 62
    b85c:	0f be       	out	0x3f, r0	; 63
    b85e:	cd bf       	out	0x3d, r28	; 61
    b860:	cf 91       	pop	r28
    b862:	df 91       	pop	r29
    b864:	1f 91       	pop	r17
    b866:	0f 91       	pop	r16
    b868:	08 95       	ret

0000b86a <vdmSetMemberOfGC>:


TVP vdmSetMemberOfGC(TVP set, TVP element, TVP *from)
{
    b86a:	0f 93       	push	r16
    b86c:	1f 93       	push	r17
    b86e:	df 93       	push	r29
    b870:	cf 93       	push	r28
    b872:	cd b7       	in	r28, 0x3d	; 61
    b874:	de b7       	in	r29, 0x3e	; 62
    b876:	2b 97       	sbiw	r28, 0x0b	; 11
    b878:	0f b6       	in	r0, 0x3f	; 63
    b87a:	f8 94       	cli
    b87c:	de bf       	out	0x3e, r29	; 62
    b87e:	0f be       	out	0x3f, r0	; 63
    b880:	cd bf       	out	0x3d, r28	; 61
    b882:	9f 83       	std	Y+7, r25	; 0x07
    b884:	8e 83       	std	Y+6, r24	; 0x06
    b886:	79 87       	std	Y+9, r23	; 0x09
    b888:	68 87       	std	Y+8, r22	; 0x08
    b88a:	5b 87       	std	Y+11, r21	; 0x0b
    b88c:	4a 87       	std	Y+10, r20	; 0x0a
	int i;

	ASSERT_CHECK(set);
    b88e:	ee 81       	ldd	r30, Y+6	; 0x06
    b890:	ff 81       	ldd	r31, Y+7	; 0x07
    b892:	80 81       	ld	r24, Z
    b894:	91 81       	ldd	r25, Z+1	; 0x01
    b896:	87 30       	cpi	r24, 0x07	; 7
    b898:	91 05       	cpc	r25, r1
    b89a:	11 f0       	breq	.+4      	; 0xb8a0 <vdmSetMemberOfGC+0x36>
    b89c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col,set);
    b8a0:	ee 81       	ldd	r30, Y+6	; 0x06
    b8a2:	ff 81       	ldd	r31, Y+7	; 0x07
    b8a4:	84 81       	ldd	r24, Z+4	; 0x04
    b8a6:	95 81       	ldd	r25, Z+5	; 0x05
    b8a8:	9b 83       	std	Y+3, r25	; 0x03
    b8aa:	8a 83       	std	Y+2, r24	; 0x02

	bool found = false;
    b8ac:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < col->size; i++)
    b8ae:	1d 82       	std	Y+5, r1	; 0x05
    b8b0:	1c 82       	std	Y+4, r1	; 0x04
    b8b2:	23 c0       	rjmp	.+70     	; 0xb8fa <vdmSetMemberOfGC+0x90>
	{
		found|= equals(col->value[i],element);
    b8b4:	89 81       	ldd	r24, Y+1	; 0x01
    b8b6:	08 2f       	mov	r16, r24
    b8b8:	10 e0       	ldi	r17, 0x00	; 0
    b8ba:	ea 81       	ldd	r30, Y+2	; 0x02
    b8bc:	fb 81       	ldd	r31, Y+3	; 0x03
    b8be:	20 81       	ld	r18, Z
    b8c0:	31 81       	ldd	r19, Z+1	; 0x01
    b8c2:	8c 81       	ldd	r24, Y+4	; 0x04
    b8c4:	9d 81       	ldd	r25, Y+5	; 0x05
    b8c6:	88 0f       	add	r24, r24
    b8c8:	99 1f       	adc	r25, r25
    b8ca:	f9 01       	movw	r30, r18
    b8cc:	e8 0f       	add	r30, r24
    b8ce:	f9 1f       	adc	r31, r25
    b8d0:	80 81       	ld	r24, Z
    b8d2:	91 81       	ldd	r25, Z+1	; 0x01
    b8d4:	28 85       	ldd	r18, Y+8	; 0x08
    b8d6:	39 85       	ldd	r19, Y+9	; 0x09
    b8d8:	b9 01       	movw	r22, r18
    b8da:	0e 94 0f 2a 	call	0x541e	; 0x541e <equals>
    b8de:	88 2f       	mov	r24, r24
    b8e0:	90 e0       	ldi	r25, 0x00	; 0
    b8e2:	80 2b       	or	r24, r16
    b8e4:	91 2b       	or	r25, r17
    b8e6:	19 82       	std	Y+1, r1	; 0x01
    b8e8:	00 97       	sbiw	r24, 0x00	; 0
    b8ea:	11 f0       	breq	.+4      	; 0xb8f0 <vdmSetMemberOfGC+0x86>
    b8ec:	81 e0       	ldi	r24, 0x01	; 1
    b8ee:	89 83       	std	Y+1, r24	; 0x01

	UNWRAP_COLLECTION(col,set);

	bool found = false;

	for (i = 0; i < col->size; i++)
    b8f0:	8c 81       	ldd	r24, Y+4	; 0x04
    b8f2:	9d 81       	ldd	r25, Y+5	; 0x05
    b8f4:	01 96       	adiw	r24, 0x01	; 1
    b8f6:	9d 83       	std	Y+5, r25	; 0x05
    b8f8:	8c 83       	std	Y+4, r24	; 0x04
    b8fa:	ea 81       	ldd	r30, Y+2	; 0x02
    b8fc:	fb 81       	ldd	r31, Y+3	; 0x03
    b8fe:	22 81       	ldd	r18, Z+2	; 0x02
    b900:	33 81       	ldd	r19, Z+3	; 0x03
    b902:	8c 81       	ldd	r24, Y+4	; 0x04
    b904:	9d 81       	ldd	r25, Y+5	; 0x05
    b906:	82 17       	cp	r24, r18
    b908:	93 07       	cpc	r25, r19
    b90a:	a4 f2       	brlt	.-88     	; 0xb8b4 <vdmSetMemberOfGC+0x4a>
	{
		found|= equals(col->value[i],element);
	}

	return newBoolGC(found, from);
    b90c:	2a 85       	ldd	r18, Y+10	; 0x0a
    b90e:	3b 85       	ldd	r19, Y+11	; 0x0b
    b910:	89 81       	ldd	r24, Y+1	; 0x01
    b912:	b9 01       	movw	r22, r18
    b914:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
}
    b918:	2b 96       	adiw	r28, 0x0b	; 11
    b91a:	0f b6       	in	r0, 0x3f	; 63
    b91c:	f8 94       	cli
    b91e:	de bf       	out	0x3e, r29	; 62
    b920:	0f be       	out	0x3f, r0	; 63
    b922:	cd bf       	out	0x3d, r28	; 61
    b924:	cf 91       	pop	r28
    b926:	df 91       	pop	r29
    b928:	1f 91       	pop	r17
    b92a:	0f 91       	pop	r16
    b92c:	08 95       	ret

0000b92e <vdmSetNotMemberOf>:



TVP vdmSetNotMemberOf(TVP set, TVP element)
{
    b92e:	df 93       	push	r29
    b930:	cf 93       	push	r28
    b932:	cd b7       	in	r28, 0x3d	; 61
    b934:	de b7       	in	r29, 0x3e	; 62
    b936:	27 97       	sbiw	r28, 0x07	; 7
    b938:	0f b6       	in	r0, 0x3f	; 63
    b93a:	f8 94       	cli
    b93c:	de bf       	out	0x3e, r29	; 62
    b93e:	0f be       	out	0x3f, r0	; 63
    b940:	cd bf       	out	0x3d, r28	; 61
    b942:	9d 83       	std	Y+5, r25	; 0x05
    b944:	8c 83       	std	Y+4, r24	; 0x04
    b946:	7f 83       	std	Y+7, r23	; 0x07
    b948:	6e 83       	std	Y+6, r22	; 0x06
	TVP res;
	bool resval;

	ASSERT_CHECK(set);
    b94a:	ec 81       	ldd	r30, Y+4	; 0x04
    b94c:	fd 81       	ldd	r31, Y+5	; 0x05
    b94e:	80 81       	ld	r24, Z
    b950:	91 81       	ldd	r25, Z+1	; 0x01
    b952:	87 30       	cpi	r24, 0x07	; 7
    b954:	91 05       	cpc	r25, r1
    b956:	11 f0       	breq	.+4      	; 0xb95c <vdmSetNotMemberOf+0x2e>
    b958:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	res = vdmSetMemberOf(set, element);
    b95c:	8c 81       	ldd	r24, Y+4	; 0x04
    b95e:	9d 81       	ldd	r25, Y+5	; 0x05
    b960:	2e 81       	ldd	r18, Y+6	; 0x06
    b962:	3f 81       	ldd	r19, Y+7	; 0x07
    b964:	b9 01       	movw	r22, r18
    b966:	0e 94 d8 5b 	call	0xb7b0	; 0xb7b0 <vdmSetMemberOf>
    b96a:	9b 83       	std	Y+3, r25	; 0x03
    b96c:	8a 83       	std	Y+2, r24	; 0x02
	resval = res->value.boolVal;
    b96e:	ea 81       	ldd	r30, Y+2	; 0x02
    b970:	fb 81       	ldd	r31, Y+3	; 0x03
    b972:	84 81       	ldd	r24, Z+4	; 0x04
    b974:	89 83       	std	Y+1, r24	; 0x01

	vdmFree(res);
    b976:	8a 81       	ldd	r24, Y+2	; 0x02
    b978:	9b 81       	ldd	r25, Y+3	; 0x03
    b97a:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

	return newBool(!resval);
    b97e:	99 81       	ldd	r25, Y+1	; 0x01
    b980:	81 e0       	ldi	r24, 0x01	; 1
    b982:	89 27       	eor	r24, r25
    b984:	88 2f       	mov	r24, r24
    b986:	90 e0       	ldi	r25, 0x00	; 0
    b988:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    b98c:	27 96       	adiw	r28, 0x07	; 7
    b98e:	0f b6       	in	r0, 0x3f	; 63
    b990:	f8 94       	cli
    b992:	de bf       	out	0x3e, r29	; 62
    b994:	0f be       	out	0x3f, r0	; 63
    b996:	cd bf       	out	0x3d, r28	; 61
    b998:	cf 91       	pop	r28
    b99a:	df 91       	pop	r29
    b99c:	08 95       	ret

0000b99e <vdmSetNotMemberOfGC>:

TVP vdmSetNotMemberOfGC(TVP set, TVP element, TVP *from)
{
    b99e:	df 93       	push	r29
    b9a0:	cf 93       	push	r28
    b9a2:	cd b7       	in	r28, 0x3d	; 61
    b9a4:	de b7       	in	r29, 0x3e	; 62
    b9a6:	29 97       	sbiw	r28, 0x09	; 9
    b9a8:	0f b6       	in	r0, 0x3f	; 63
    b9aa:	f8 94       	cli
    b9ac:	de bf       	out	0x3e, r29	; 62
    b9ae:	0f be       	out	0x3f, r0	; 63
    b9b0:	cd bf       	out	0x3d, r28	; 61
    b9b2:	9d 83       	std	Y+5, r25	; 0x05
    b9b4:	8c 83       	std	Y+4, r24	; 0x04
    b9b6:	7f 83       	std	Y+7, r23	; 0x07
    b9b8:	6e 83       	std	Y+6, r22	; 0x06
    b9ba:	59 87       	std	Y+9, r21	; 0x09
    b9bc:	48 87       	std	Y+8, r20	; 0x08
	TVP res;
	bool resval;

	ASSERT_CHECK(set);
    b9be:	ec 81       	ldd	r30, Y+4	; 0x04
    b9c0:	fd 81       	ldd	r31, Y+5	; 0x05
    b9c2:	80 81       	ld	r24, Z
    b9c4:	91 81       	ldd	r25, Z+1	; 0x01
    b9c6:	87 30       	cpi	r24, 0x07	; 7
    b9c8:	91 05       	cpc	r25, r1
    b9ca:	11 f0       	breq	.+4      	; 0xb9d0 <vdmSetNotMemberOfGC+0x32>
    b9cc:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	res = vdmSetMemberOf(set, element);
    b9d0:	8c 81       	ldd	r24, Y+4	; 0x04
    b9d2:	9d 81       	ldd	r25, Y+5	; 0x05
    b9d4:	2e 81       	ldd	r18, Y+6	; 0x06
    b9d6:	3f 81       	ldd	r19, Y+7	; 0x07
    b9d8:	b9 01       	movw	r22, r18
    b9da:	0e 94 d8 5b 	call	0xb7b0	; 0xb7b0 <vdmSetMemberOf>
    b9de:	9b 83       	std	Y+3, r25	; 0x03
    b9e0:	8a 83       	std	Y+2, r24	; 0x02
	resval = res->value.boolVal;
    b9e2:	ea 81       	ldd	r30, Y+2	; 0x02
    b9e4:	fb 81       	ldd	r31, Y+3	; 0x03
    b9e6:	84 81       	ldd	r24, Z+4	; 0x04
    b9e8:	89 83       	std	Y+1, r24	; 0x01

	vdmFree(res);
    b9ea:	8a 81       	ldd	r24, Y+2	; 0x02
    b9ec:	9b 81       	ldd	r25, Y+3	; 0x03
    b9ee:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

	return newBoolGC(!resval, from);
    b9f2:	99 81       	ldd	r25, Y+1	; 0x01
    b9f4:	81 e0       	ldi	r24, 0x01	; 1
    b9f6:	89 27       	eor	r24, r25
    b9f8:	88 2f       	mov	r24, r24
    b9fa:	90 e0       	ldi	r25, 0x00	; 0
    b9fc:	28 85       	ldd	r18, Y+8	; 0x08
    b9fe:	39 85       	ldd	r19, Y+9	; 0x09
    ba00:	b9 01       	movw	r22, r18
    ba02:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
}
    ba06:	29 96       	adiw	r28, 0x09	; 9
    ba08:	0f b6       	in	r0, 0x3f	; 63
    ba0a:	f8 94       	cli
    ba0c:	de bf       	out	0x3e, r29	; 62
    ba0e:	0f be       	out	0x3f, r0	; 63
    ba10:	cd bf       	out	0x3d, r28	; 61
    ba12:	cf 91       	pop	r28
    ba14:	df 91       	pop	r29
    ba16:	08 95       	ret

0000ba18 <vdmSetUnion>:



TVP vdmSetUnion(TVP set1, TVP set2)
{
    ba18:	0f 93       	push	r16
    ba1a:	1f 93       	push	r17
    ba1c:	df 93       	push	r29
    ba1e:	cf 93       	push	r28
    ba20:	cd b7       	in	r28, 0x3d	; 61
    ba22:	de b7       	in	r29, 0x3e	; 62
    ba24:	2e 97       	sbiw	r28, 0x0e	; 14
    ba26:	0f b6       	in	r0, 0x3f	; 63
    ba28:	f8 94       	cli
    ba2a:	de bf       	out	0x3e, r29	; 62
    ba2c:	0f be       	out	0x3f, r0	; 63
    ba2e:	cd bf       	out	0x3d, r28	; 61
    ba30:	9c 87       	std	Y+12, r25	; 0x0c
    ba32:	8b 87       	std	Y+11, r24	; 0x0b
    ba34:	7e 87       	std	Y+14, r23	; 0x0e
    ba36:	6d 87       	std	Y+13, r22	; 0x0d
	TVP *newvalues;
	TVP resset;
	int i;

	ASSERT_CHECK(set1);
    ba38:	eb 85       	ldd	r30, Y+11	; 0x0b
    ba3a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ba3c:	80 81       	ld	r24, Z
    ba3e:	91 81       	ldd	r25, Z+1	; 0x01
    ba40:	87 30       	cpi	r24, 0x07	; 7
    ba42:	91 05       	cpc	r25, r1
    ba44:	11 f0       	breq	.+4      	; 0xba4a <vdmSetUnion+0x32>
    ba46:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    ba4a:	ed 85       	ldd	r30, Y+13	; 0x0d
    ba4c:	fe 85       	ldd	r31, Y+14	; 0x0e
    ba4e:	80 81       	ld	r24, Z
    ba50:	91 81       	ldd	r25, Z+1	; 0x01
    ba52:	87 30       	cpi	r24, 0x07	; 7
    ba54:	91 05       	cpc	r25, r1
    ba56:	11 f0       	breq	.+4      	; 0xba5c <vdmSetUnion+0x44>
    ba58:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    ba5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ba5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ba60:	84 81       	ldd	r24, Z+4	; 0x04
    ba62:	95 81       	ldd	r25, Z+5	; 0x05
    ba64:	9c 83       	std	Y+4, r25	; 0x04
    ba66:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    ba68:	ed 85       	ldd	r30, Y+13	; 0x0d
    ba6a:	fe 85       	ldd	r31, Y+14	; 0x0e
    ba6c:	84 81       	ldd	r24, Z+4	; 0x04
    ba6e:	95 81       	ldd	r25, Z+5	; 0x05
    ba70:	9a 83       	std	Y+2, r25	; 0x02
    ba72:	89 83       	std	Y+1, r24	; 0x01
	/* int a = col1->size;  */

	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
    ba74:	eb 81       	ldd	r30, Y+3	; 0x03
    ba76:	fc 81       	ldd	r31, Y+4	; 0x04
    ba78:	22 81       	ldd	r18, Z+2	; 0x02
    ba7a:	33 81       	ldd	r19, Z+3	; 0x03
    ba7c:	e9 81       	ldd	r30, Y+1	; 0x01
    ba7e:	fa 81       	ldd	r31, Y+2	; 0x02
    ba80:	82 81       	ldd	r24, Z+2	; 0x02
    ba82:	93 81       	ldd	r25, Z+3	; 0x03
    ba84:	82 0f       	add	r24, r18
    ba86:	93 1f       	adc	r25, r19
    ba88:	88 0f       	add	r24, r24
    ba8a:	99 1f       	adc	r25, r25
    ba8c:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    ba90:	9a 87       	std	Y+10, r25	; 0x0a
    ba92:	89 87       	std	Y+9, r24	; 0x09
	assert(newvalues != NULL);
    ba94:	89 85       	ldd	r24, Y+9	; 0x09
    ba96:	9a 85       	ldd	r25, Y+10	; 0x0a
    ba98:	00 97       	sbiw	r24, 0x00	; 0
    ba9a:	11 f4       	brne	.+4      	; 0xbaa0 <vdmSetUnion+0x88>
    ba9c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	for(i = 0; i < col1->size; i++)
    baa0:	1e 82       	std	Y+6, r1	; 0x06
    baa2:	1d 82       	std	Y+5, r1	; 0x05
    baa4:	21 c0       	rjmp	.+66     	; 0xbae8 <vdmSetUnion+0xd0>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
    baa6:	8d 81       	ldd	r24, Y+5	; 0x05
    baa8:	9e 81       	ldd	r25, Y+6	; 0x06
    baaa:	9c 01       	movw	r18, r24
    baac:	22 0f       	add	r18, r18
    baae:	33 1f       	adc	r19, r19
    bab0:	89 85       	ldd	r24, Y+9	; 0x09
    bab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    bab4:	8c 01       	movw	r16, r24
    bab6:	02 0f       	add	r16, r18
    bab8:	13 1f       	adc	r17, r19
    baba:	eb 81       	ldd	r30, Y+3	; 0x03
    babc:	fc 81       	ldd	r31, Y+4	; 0x04
    babe:	20 81       	ld	r18, Z
    bac0:	31 81       	ldd	r19, Z+1	; 0x01
    bac2:	8d 81       	ldd	r24, Y+5	; 0x05
    bac4:	9e 81       	ldd	r25, Y+6	; 0x06
    bac6:	88 0f       	add	r24, r24
    bac8:	99 1f       	adc	r25, r25
    baca:	f9 01       	movw	r30, r18
    bacc:	e8 0f       	add	r30, r24
    bace:	f9 1f       	adc	r31, r25
    bad0:	80 81       	ld	r24, Z
    bad2:	91 81       	ldd	r25, Z+1	; 0x01
    bad4:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    bad8:	f8 01       	movw	r30, r16
    bada:	91 83       	std	Z+1, r25	; 0x01
    badc:	80 83       	st	Z, r24
	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
	assert(newvalues != NULL);
	for(i = 0; i < col1->size; i++)
    bade:	8d 81       	ldd	r24, Y+5	; 0x05
    bae0:	9e 81       	ldd	r25, Y+6	; 0x06
    bae2:	01 96       	adiw	r24, 0x01	; 1
    bae4:	9e 83       	std	Y+6, r25	; 0x06
    bae6:	8d 83       	std	Y+5, r24	; 0x05
    bae8:	eb 81       	ldd	r30, Y+3	; 0x03
    baea:	fc 81       	ldd	r31, Y+4	; 0x04
    baec:	22 81       	ldd	r18, Z+2	; 0x02
    baee:	33 81       	ldd	r19, Z+3	; 0x03
    baf0:	8d 81       	ldd	r24, Y+5	; 0x05
    baf2:	9e 81       	ldd	r25, Y+6	; 0x06
    baf4:	82 17       	cp	r24, r18
    baf6:	93 07       	cpc	r25, r19
    baf8:	b4 f2       	brlt	.-84     	; 0xbaa6 <vdmSetUnion+0x8e>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bafa:	eb 81       	ldd	r30, Y+3	; 0x03
    bafc:	fc 81       	ldd	r31, Y+4	; 0x04
    bafe:	82 81       	ldd	r24, Z+2	; 0x02
    bb00:	93 81       	ldd	r25, Z+3	; 0x03
    bb02:	9e 83       	std	Y+6, r25	; 0x06
    bb04:	8d 83       	std	Y+5, r24	; 0x05
    bb06:	27 c0       	rjmp	.+78     	; 0xbb56 <vdmSetUnion+0x13e>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
    bb08:	8d 81       	ldd	r24, Y+5	; 0x05
    bb0a:	9e 81       	ldd	r25, Y+6	; 0x06
    bb0c:	9c 01       	movw	r18, r24
    bb0e:	22 0f       	add	r18, r18
    bb10:	33 1f       	adc	r19, r19
    bb12:	89 85       	ldd	r24, Y+9	; 0x09
    bb14:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb16:	8c 01       	movw	r16, r24
    bb18:	02 0f       	add	r16, r18
    bb1a:	13 1f       	adc	r17, r19
    bb1c:	e9 81       	ldd	r30, Y+1	; 0x01
    bb1e:	fa 81       	ldd	r31, Y+2	; 0x02
    bb20:	40 81       	ld	r20, Z
    bb22:	51 81       	ldd	r21, Z+1	; 0x01
    bb24:	eb 81       	ldd	r30, Y+3	; 0x03
    bb26:	fc 81       	ldd	r31, Y+4	; 0x04
    bb28:	22 81       	ldd	r18, Z+2	; 0x02
    bb2a:	33 81       	ldd	r19, Z+3	; 0x03
    bb2c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb2e:	9e 81       	ldd	r25, Y+6	; 0x06
    bb30:	82 1b       	sub	r24, r18
    bb32:	93 0b       	sbc	r25, r19
    bb34:	88 0f       	add	r24, r24
    bb36:	99 1f       	adc	r25, r25
    bb38:	fa 01       	movw	r30, r20
    bb3a:	e8 0f       	add	r30, r24
    bb3c:	f9 1f       	adc	r31, r25
    bb3e:	80 81       	ld	r24, Z
    bb40:	91 81       	ldd	r25, Z+1	; 0x01
    bb42:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    bb46:	f8 01       	movw	r30, r16
    bb48:	91 83       	std	Z+1, r25	; 0x01
    bb4a:	80 83       	st	Z, r24
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bb4c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb4e:	9e 81       	ldd	r25, Y+6	; 0x06
    bb50:	01 96       	adiw	r24, 0x01	; 1
    bb52:	9e 83       	std	Y+6, r25	; 0x06
    bb54:	8d 83       	std	Y+5, r24	; 0x05
    bb56:	eb 81       	ldd	r30, Y+3	; 0x03
    bb58:	fc 81       	ldd	r31, Y+4	; 0x04
    bb5a:	22 81       	ldd	r18, Z+2	; 0x02
    bb5c:	33 81       	ldd	r19, Z+3	; 0x03
    bb5e:	e9 81       	ldd	r30, Y+1	; 0x01
    bb60:	fa 81       	ldd	r31, Y+2	; 0x02
    bb62:	82 81       	ldd	r24, Z+2	; 0x02
    bb64:	93 81       	ldd	r25, Z+3	; 0x03
    bb66:	28 0f       	add	r18, r24
    bb68:	39 1f       	adc	r19, r25
    bb6a:	8d 81       	ldd	r24, Y+5	; 0x05
    bb6c:	9e 81       	ldd	r25, Y+6	; 0x06
    bb6e:	82 17       	cp	r24, r18
    bb70:	93 07       	cpc	r25, r19
    bb72:	54 f2       	brlt	.-108    	; 0xbb08 <vdmSetUnion+0xf0>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValues(col1->size + col2->size, newvalues);
    bb74:	eb 81       	ldd	r30, Y+3	; 0x03
    bb76:	fc 81       	ldd	r31, Y+4	; 0x04
    bb78:	22 81       	ldd	r18, Z+2	; 0x02
    bb7a:	33 81       	ldd	r19, Z+3	; 0x03
    bb7c:	e9 81       	ldd	r30, Y+1	; 0x01
    bb7e:	fa 81       	ldd	r31, Y+2	; 0x02
    bb80:	82 81       	ldd	r24, Z+2	; 0x02
    bb82:	93 81       	ldd	r25, Z+3	; 0x03
    bb84:	82 0f       	add	r24, r18
    bb86:	93 1f       	adc	r25, r19
    bb88:	29 85       	ldd	r18, Y+9	; 0x09
    bb8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    bb8c:	b9 01       	movw	r22, r18
    bb8e:	0e 94 90 56 	call	0xad20	; 0xad20 <newSetWithValues>
    bb92:	98 87       	std	Y+8, r25	; 0x08
    bb94:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col1->size + col2->size; i++)
    bb96:	1e 82       	std	Y+6, r1	; 0x06
    bb98:	1d 82       	std	Y+5, r1	; 0x05
    bb9a:	13 c0       	rjmp	.+38     	; 0xbbc2 <vdmSetUnion+0x1aa>
		vdmFree(newvalues[i]);
    bb9c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb9e:	9e 81       	ldd	r25, Y+6	; 0x06
    bba0:	9c 01       	movw	r18, r24
    bba2:	22 0f       	add	r18, r18
    bba4:	33 1f       	adc	r19, r19
    bba6:	89 85       	ldd	r24, Y+9	; 0x09
    bba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    bbaa:	fc 01       	movw	r30, r24
    bbac:	e2 0f       	add	r30, r18
    bbae:	f3 1f       	adc	r31, r19
    bbb0:	80 81       	ld	r24, Z
    bbb2:	91 81       	ldd	r25, Z+1	; 0x01
    bbb4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValues(col1->size + col2->size, newvalues);

	for(i = 0; i < col1->size + col2->size; i++)
    bbb8:	8d 81       	ldd	r24, Y+5	; 0x05
    bbba:	9e 81       	ldd	r25, Y+6	; 0x06
    bbbc:	01 96       	adiw	r24, 0x01	; 1
    bbbe:	9e 83       	std	Y+6, r25	; 0x06
    bbc0:	8d 83       	std	Y+5, r24	; 0x05
    bbc2:	eb 81       	ldd	r30, Y+3	; 0x03
    bbc4:	fc 81       	ldd	r31, Y+4	; 0x04
    bbc6:	22 81       	ldd	r18, Z+2	; 0x02
    bbc8:	33 81       	ldd	r19, Z+3	; 0x03
    bbca:	e9 81       	ldd	r30, Y+1	; 0x01
    bbcc:	fa 81       	ldd	r31, Y+2	; 0x02
    bbce:	82 81       	ldd	r24, Z+2	; 0x02
    bbd0:	93 81       	ldd	r25, Z+3	; 0x03
    bbd2:	28 0f       	add	r18, r24
    bbd4:	39 1f       	adc	r19, r25
    bbd6:	8d 81       	ldd	r24, Y+5	; 0x05
    bbd8:	9e 81       	ldd	r25, Y+6	; 0x06
    bbda:	82 17       	cp	r24, r18
    bbdc:	93 07       	cpc	r25, r19
    bbde:	f4 f2       	brlt	.-68     	; 0xbb9c <vdmSetUnion+0x184>
		vdmFree(newvalues[i]);
	free(newvalues);
    bbe0:	89 85       	ldd	r24, Y+9	; 0x09
    bbe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    bbe4:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>

	return resset;
    bbe8:	8f 81       	ldd	r24, Y+7	; 0x07
    bbea:	98 85       	ldd	r25, Y+8	; 0x08
}
    bbec:	2e 96       	adiw	r28, 0x0e	; 14
    bbee:	0f b6       	in	r0, 0x3f	; 63
    bbf0:	f8 94       	cli
    bbf2:	de bf       	out	0x3e, r29	; 62
    bbf4:	0f be       	out	0x3f, r0	; 63
    bbf6:	cd bf       	out	0x3d, r28	; 61
    bbf8:	cf 91       	pop	r28
    bbfa:	df 91       	pop	r29
    bbfc:	1f 91       	pop	r17
    bbfe:	0f 91       	pop	r16
    bc00:	08 95       	ret

0000bc02 <vdmSetUnionGC>:

TVP vdmSetUnionGC(TVP set1, TVP set2, TVP *from)
{
    bc02:	0f 93       	push	r16
    bc04:	1f 93       	push	r17
    bc06:	df 93       	push	r29
    bc08:	cf 93       	push	r28
    bc0a:	cd b7       	in	r28, 0x3d	; 61
    bc0c:	de b7       	in	r29, 0x3e	; 62
    bc0e:	60 97       	sbiw	r28, 0x10	; 16
    bc10:	0f b6       	in	r0, 0x3f	; 63
    bc12:	f8 94       	cli
    bc14:	de bf       	out	0x3e, r29	; 62
    bc16:	0f be       	out	0x3f, r0	; 63
    bc18:	cd bf       	out	0x3d, r28	; 61
    bc1a:	9c 87       	std	Y+12, r25	; 0x0c
    bc1c:	8b 87       	std	Y+11, r24	; 0x0b
    bc1e:	7e 87       	std	Y+14, r23	; 0x0e
    bc20:	6d 87       	std	Y+13, r22	; 0x0d
    bc22:	58 8b       	std	Y+16, r21	; 0x10
    bc24:	4f 87       	std	Y+15, r20	; 0x0f
	int i;

	TVP *newvalues;
	TVP resset;

	ASSERT_CHECK(set1);
    bc26:	eb 85       	ldd	r30, Y+11	; 0x0b
    bc28:	fc 85       	ldd	r31, Y+12	; 0x0c
    bc2a:	80 81       	ld	r24, Z
    bc2c:	91 81       	ldd	r25, Z+1	; 0x01
    bc2e:	87 30       	cpi	r24, 0x07	; 7
    bc30:	91 05       	cpc	r25, r1
    bc32:	11 f0       	breq	.+4      	; 0xbc38 <vdmSetUnionGC+0x36>
    bc34:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    bc38:	ed 85       	ldd	r30, Y+13	; 0x0d
    bc3a:	fe 85       	ldd	r31, Y+14	; 0x0e
    bc3c:	80 81       	ld	r24, Z
    bc3e:	91 81       	ldd	r25, Z+1	; 0x01
    bc40:	87 30       	cpi	r24, 0x07	; 7
    bc42:	91 05       	cpc	r25, r1
    bc44:	11 f0       	breq	.+4      	; 0xbc4a <vdmSetUnionGC+0x48>
    bc46:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    bc4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    bc4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    bc4e:	84 81       	ldd	r24, Z+4	; 0x04
    bc50:	95 81       	ldd	r25, Z+5	; 0x05
    bc52:	9c 83       	std	Y+4, r25	; 0x04
    bc54:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    bc56:	ed 85       	ldd	r30, Y+13	; 0x0d
    bc58:	fe 85       	ldd	r31, Y+14	; 0x0e
    bc5a:	84 81       	ldd	r24, Z+4	; 0x04
    bc5c:	95 81       	ldd	r25, Z+5	; 0x05
    bc5e:	9a 83       	std	Y+2, r25	; 0x02
    bc60:	89 83       	std	Y+1, r24	; 0x01
	/* int a = col1->size;  */

	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
    bc62:	eb 81       	ldd	r30, Y+3	; 0x03
    bc64:	fc 81       	ldd	r31, Y+4	; 0x04
    bc66:	22 81       	ldd	r18, Z+2	; 0x02
    bc68:	33 81       	ldd	r19, Z+3	; 0x03
    bc6a:	e9 81       	ldd	r30, Y+1	; 0x01
    bc6c:	fa 81       	ldd	r31, Y+2	; 0x02
    bc6e:	82 81       	ldd	r24, Z+2	; 0x02
    bc70:	93 81       	ldd	r25, Z+3	; 0x03
    bc72:	82 0f       	add	r24, r18
    bc74:	93 1f       	adc	r25, r19
    bc76:	88 0f       	add	r24, r24
    bc78:	99 1f       	adc	r25, r25
    bc7a:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    bc7e:	98 87       	std	Y+8, r25	; 0x08
    bc80:	8f 83       	std	Y+7, r24	; 0x07
	assert(newvalues != NULL);
    bc82:	8f 81       	ldd	r24, Y+7	; 0x07
    bc84:	98 85       	ldd	r25, Y+8	; 0x08
    bc86:	00 97       	sbiw	r24, 0x00	; 0
    bc88:	11 f4       	brne	.+4      	; 0xbc8e <vdmSetUnionGC+0x8c>
    bc8a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	for(i = 0; i < col1->size; i++)
    bc8e:	1a 86       	std	Y+10, r1	; 0x0a
    bc90:	19 86       	std	Y+9, r1	; 0x09
    bc92:	21 c0       	rjmp	.+66     	; 0xbcd6 <vdmSetUnionGC+0xd4>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
    bc94:	89 85       	ldd	r24, Y+9	; 0x09
    bc96:	9a 85       	ldd	r25, Y+10	; 0x0a
    bc98:	9c 01       	movw	r18, r24
    bc9a:	22 0f       	add	r18, r18
    bc9c:	33 1f       	adc	r19, r19
    bc9e:	8f 81       	ldd	r24, Y+7	; 0x07
    bca0:	98 85       	ldd	r25, Y+8	; 0x08
    bca2:	8c 01       	movw	r16, r24
    bca4:	02 0f       	add	r16, r18
    bca6:	13 1f       	adc	r17, r19
    bca8:	eb 81       	ldd	r30, Y+3	; 0x03
    bcaa:	fc 81       	ldd	r31, Y+4	; 0x04
    bcac:	20 81       	ld	r18, Z
    bcae:	31 81       	ldd	r19, Z+1	; 0x01
    bcb0:	89 85       	ldd	r24, Y+9	; 0x09
    bcb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    bcb4:	88 0f       	add	r24, r24
    bcb6:	99 1f       	adc	r25, r25
    bcb8:	f9 01       	movw	r30, r18
    bcba:	e8 0f       	add	r30, r24
    bcbc:	f9 1f       	adc	r31, r25
    bcbe:	80 81       	ld	r24, Z
    bcc0:	91 81       	ldd	r25, Z+1	; 0x01
    bcc2:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    bcc6:	f8 01       	movw	r30, r16
    bcc8:	91 83       	std	Z+1, r25	; 0x01
    bcca:	80 83       	st	Z, r24
	/* newcol1 = (TVP*)malloc(col1->size * sizeof(TVP));  */
	/* newcol2 = (TVP*)malloc(col2->size * sizeof(TVP));  */

	newvalues = (TVP*)malloc((col1->size + col2->size) * sizeof(TVP));
	assert(newvalues != NULL);
	for(i = 0; i < col1->size; i++)
    bccc:	89 85       	ldd	r24, Y+9	; 0x09
    bcce:	9a 85       	ldd	r25, Y+10	; 0x0a
    bcd0:	01 96       	adiw	r24, 0x01	; 1
    bcd2:	9a 87       	std	Y+10, r25	; 0x0a
    bcd4:	89 87       	std	Y+9, r24	; 0x09
    bcd6:	eb 81       	ldd	r30, Y+3	; 0x03
    bcd8:	fc 81       	ldd	r31, Y+4	; 0x04
    bcda:	22 81       	ldd	r18, Z+2	; 0x02
    bcdc:	33 81       	ldd	r19, Z+3	; 0x03
    bcde:	89 85       	ldd	r24, Y+9	; 0x09
    bce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    bce2:	82 17       	cp	r24, r18
    bce4:	93 07       	cpc	r25, r19
    bce6:	b4 f2       	brlt	.-84     	; 0xbc94 <vdmSetUnionGC+0x92>
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bce8:	eb 81       	ldd	r30, Y+3	; 0x03
    bcea:	fc 81       	ldd	r31, Y+4	; 0x04
    bcec:	82 81       	ldd	r24, Z+2	; 0x02
    bcee:	93 81       	ldd	r25, Z+3	; 0x03
    bcf0:	9a 87       	std	Y+10, r25	; 0x0a
    bcf2:	89 87       	std	Y+9, r24	; 0x09
    bcf4:	27 c0       	rjmp	.+78     	; 0xbd44 <vdmSetUnionGC+0x142>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
    bcf6:	89 85       	ldd	r24, Y+9	; 0x09
    bcf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    bcfa:	9c 01       	movw	r18, r24
    bcfc:	22 0f       	add	r18, r18
    bcfe:	33 1f       	adc	r19, r19
    bd00:	8f 81       	ldd	r24, Y+7	; 0x07
    bd02:	98 85       	ldd	r25, Y+8	; 0x08
    bd04:	8c 01       	movw	r16, r24
    bd06:	02 0f       	add	r16, r18
    bd08:	13 1f       	adc	r17, r19
    bd0a:	e9 81       	ldd	r30, Y+1	; 0x01
    bd0c:	fa 81       	ldd	r31, Y+2	; 0x02
    bd0e:	40 81       	ld	r20, Z
    bd10:	51 81       	ldd	r21, Z+1	; 0x01
    bd12:	eb 81       	ldd	r30, Y+3	; 0x03
    bd14:	fc 81       	ldd	r31, Y+4	; 0x04
    bd16:	22 81       	ldd	r18, Z+2	; 0x02
    bd18:	33 81       	ldd	r19, Z+3	; 0x03
    bd1a:	89 85       	ldd	r24, Y+9	; 0x09
    bd1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd1e:	82 1b       	sub	r24, r18
    bd20:	93 0b       	sbc	r25, r19
    bd22:	88 0f       	add	r24, r24
    bd24:	99 1f       	adc	r25, r25
    bd26:	fa 01       	movw	r30, r20
    bd28:	e8 0f       	add	r30, r24
    bd2a:	f9 1f       	adc	r31, r25
    bd2c:	80 81       	ld	r24, Z
    bd2e:	91 81       	ldd	r25, Z+1	; 0x01
    bd30:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    bd34:	f8 01       	movw	r30, r16
    bd36:	91 83       	std	Z+1, r25	; 0x01
    bd38:	80 83       	st	Z, r24
	for(i = 0; i < col1->size; i++)
	{
		newvalues[i] = vdmClone((col1->value)[i]);
	}

	for(i = col1->size; i < (col1-> size + col2->size); i++)
    bd3a:	89 85       	ldd	r24, Y+9	; 0x09
    bd3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd3e:	01 96       	adiw	r24, 0x01	; 1
    bd40:	9a 87       	std	Y+10, r25	; 0x0a
    bd42:	89 87       	std	Y+9, r24	; 0x09
    bd44:	eb 81       	ldd	r30, Y+3	; 0x03
    bd46:	fc 81       	ldd	r31, Y+4	; 0x04
    bd48:	22 81       	ldd	r18, Z+2	; 0x02
    bd4a:	33 81       	ldd	r19, Z+3	; 0x03
    bd4c:	e9 81       	ldd	r30, Y+1	; 0x01
    bd4e:	fa 81       	ldd	r31, Y+2	; 0x02
    bd50:	82 81       	ldd	r24, Z+2	; 0x02
    bd52:	93 81       	ldd	r25, Z+3	; 0x03
    bd54:	28 0f       	add	r18, r24
    bd56:	39 1f       	adc	r19, r25
    bd58:	89 85       	ldd	r24, Y+9	; 0x09
    bd5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd5c:	82 17       	cp	r24, r18
    bd5e:	93 07       	cpc	r25, r19
    bd60:	54 f2       	brlt	.-108    	; 0xbcf6 <vdmSetUnionGC+0xf4>
	{
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValuesGC(col1->size + col2->size, newvalues, from);
    bd62:	eb 81       	ldd	r30, Y+3	; 0x03
    bd64:	fc 81       	ldd	r31, Y+4	; 0x04
    bd66:	22 81       	ldd	r18, Z+2	; 0x02
    bd68:	33 81       	ldd	r19, Z+3	; 0x03
    bd6a:	e9 81       	ldd	r30, Y+1	; 0x01
    bd6c:	fa 81       	ldd	r31, Y+2	; 0x02
    bd6e:	82 81       	ldd	r24, Z+2	; 0x02
    bd70:	93 81       	ldd	r25, Z+3	; 0x03
    bd72:	82 0f       	add	r24, r18
    bd74:	93 1f       	adc	r25, r19
    bd76:	2f 81       	ldd	r18, Y+7	; 0x07
    bd78:	38 85       	ldd	r19, Y+8	; 0x08
    bd7a:	4f 85       	ldd	r20, Y+15	; 0x0f
    bd7c:	58 89       	ldd	r21, Y+16	; 0x10
    bd7e:	b9 01       	movw	r22, r18
    bd80:	0e 94 31 57 	call	0xae62	; 0xae62 <newSetWithValuesGC>
    bd84:	9e 83       	std	Y+6, r25	; 0x06
    bd86:	8d 83       	std	Y+5, r24	; 0x05

	for(i = 0; i < col1->size + col2->size; i++)
    bd88:	1a 86       	std	Y+10, r1	; 0x0a
    bd8a:	19 86       	std	Y+9, r1	; 0x09
    bd8c:	13 c0       	rjmp	.+38     	; 0xbdb4 <vdmSetUnionGC+0x1b2>
		vdmFree(newvalues[i]);
    bd8e:	89 85       	ldd	r24, Y+9	; 0x09
    bd90:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd92:	9c 01       	movw	r18, r24
    bd94:	22 0f       	add	r18, r18
    bd96:	33 1f       	adc	r19, r19
    bd98:	8f 81       	ldd	r24, Y+7	; 0x07
    bd9a:	98 85       	ldd	r25, Y+8	; 0x08
    bd9c:	fc 01       	movw	r30, r24
    bd9e:	e2 0f       	add	r30, r18
    bda0:	f3 1f       	adc	r31, r19
    bda2:	80 81       	ld	r24, Z
    bda4:	91 81       	ldd	r25, Z+1	; 0x01
    bda6:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		newvalues[i] = vdmClone((col2->value)[i - col1->size]);
	}

	resset = newSetWithValuesGC(col1->size + col2->size, newvalues, from);

	for(i = 0; i < col1->size + col2->size; i++)
    bdaa:	89 85       	ldd	r24, Y+9	; 0x09
    bdac:	9a 85       	ldd	r25, Y+10	; 0x0a
    bdae:	01 96       	adiw	r24, 0x01	; 1
    bdb0:	9a 87       	std	Y+10, r25	; 0x0a
    bdb2:	89 87       	std	Y+9, r24	; 0x09
    bdb4:	eb 81       	ldd	r30, Y+3	; 0x03
    bdb6:	fc 81       	ldd	r31, Y+4	; 0x04
    bdb8:	22 81       	ldd	r18, Z+2	; 0x02
    bdba:	33 81       	ldd	r19, Z+3	; 0x03
    bdbc:	e9 81       	ldd	r30, Y+1	; 0x01
    bdbe:	fa 81       	ldd	r31, Y+2	; 0x02
    bdc0:	82 81       	ldd	r24, Z+2	; 0x02
    bdc2:	93 81       	ldd	r25, Z+3	; 0x03
    bdc4:	28 0f       	add	r18, r24
    bdc6:	39 1f       	adc	r19, r25
    bdc8:	89 85       	ldd	r24, Y+9	; 0x09
    bdca:	9a 85       	ldd	r25, Y+10	; 0x0a
    bdcc:	82 17       	cp	r24, r18
    bdce:	93 07       	cpc	r25, r19
    bdd0:	f4 f2       	brlt	.-68     	; 0xbd8e <vdmSetUnionGC+0x18c>
		vdmFree(newvalues[i]);
	free(newvalues);
    bdd2:	8f 81       	ldd	r24, Y+7	; 0x07
    bdd4:	98 85       	ldd	r25, Y+8	; 0x08
    bdd6:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>

	return resset;
    bdda:	8d 81       	ldd	r24, Y+5	; 0x05
    bddc:	9e 81       	ldd	r25, Y+6	; 0x06
}
    bdde:	60 96       	adiw	r28, 0x10	; 16
    bde0:	0f b6       	in	r0, 0x3f	; 63
    bde2:	f8 94       	cli
    bde4:	de bf       	out	0x3e, r29	; 62
    bde6:	0f be       	out	0x3f, r0	; 63
    bde8:	cd bf       	out	0x3d, r28	; 61
    bdea:	cf 91       	pop	r28
    bdec:	df 91       	pop	r29
    bdee:	1f 91       	pop	r17
    bdf0:	0f 91       	pop	r16
    bdf2:	08 95       	ret

0000bdf4 <vdmSetInter>:



TVP vdmSetInter(TVP set1, TVP set2)
{
    bdf4:	df 93       	push	r29
    bdf6:	cf 93       	push	r28
    bdf8:	cd b7       	in	r28, 0x3d	; 61
    bdfa:	de b7       	in	r29, 0x3e	; 62
    bdfc:	64 97       	sbiw	r28, 0x14	; 20
    bdfe:	0f b6       	in	r0, 0x3f	; 63
    be00:	f8 94       	cli
    be02:	de bf       	out	0x3e, r29	; 62
    be04:	0f be       	out	0x3f, r0	; 63
    be06:	cd bf       	out	0x3d, r28	; 61
    be08:	98 8b       	std	Y+16, r25	; 0x10
    be0a:	8f 87       	std	Y+15, r24	; 0x0f
    be0c:	7a 8b       	std	Y+18, r23	; 0x12
    be0e:	69 8b       	std	Y+17, r22	; 0x11
	TVP inter;
	TVP tmpset1;
	TVP tmpset2;
	TVP res;

	ASSERT_CHECK(set1);
    be10:	ef 85       	ldd	r30, Y+15	; 0x0f
    be12:	f8 89       	ldd	r31, Y+16	; 0x10
    be14:	80 81       	ld	r24, Z
    be16:	91 81       	ldd	r25, Z+1	; 0x01
    be18:	87 30       	cpi	r24, 0x07	; 7
    be1a:	91 05       	cpc	r25, r1
    be1c:	11 f0       	breq	.+4      	; 0xbe22 <vdmSetInter+0x2e>
    be1e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    be22:	e9 89       	ldd	r30, Y+17	; 0x11
    be24:	fa 89       	ldd	r31, Y+18	; 0x12
    be26:	80 81       	ld	r24, Z
    be28:	91 81       	ldd	r25, Z+1	; 0x01
    be2a:	87 30       	cpi	r24, 0x07	; 7
    be2c:	91 05       	cpc	r25, r1
    be2e:	11 f0       	breq	.+4      	; 0xbe34 <vdmSetInter+0x40>
    be30:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    be34:	ef 85       	ldd	r30, Y+15	; 0x0f
    be36:	f8 89       	ldd	r31, Y+16	; 0x10
    be38:	84 81       	ldd	r24, Z+4	; 0x04
    be3a:	95 81       	ldd	r25, Z+5	; 0x05
    be3c:	9c 83       	std	Y+4, r25	; 0x04
    be3e:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    be40:	e9 89       	ldd	r30, Y+17	; 0x11
    be42:	fa 89       	ldd	r31, Y+18	; 0x12
    be44:	84 81       	ldd	r24, Z+4	; 0x04
    be46:	95 81       	ldd	r25, Z+5	; 0x05
    be48:	9a 83       	std	Y+2, r25	; 0x02
    be4a:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size ==0)
    be4c:	eb 81       	ldd	r30, Y+3	; 0x03
    be4e:	fc 81       	ldd	r31, Y+4	; 0x04
    be50:	82 81       	ldd	r24, Z+2	; 0x02
    be52:	93 81       	ldd	r25, Z+3	; 0x03
    be54:	00 97       	sbiw	r24, 0x00	; 0
    be56:	31 f0       	breq	.+12     	; 0xbe64 <vdmSetInter+0x70>
    be58:	e9 81       	ldd	r30, Y+1	; 0x01
    be5a:	fa 81       	ldd	r31, Y+2	; 0x02
    be5c:	82 81       	ldd	r24, Z+2	; 0x02
    be5e:	93 81       	ldd	r25, Z+3	; 0x03
    be60:	00 97       	sbiw	r24, 0x00	; 0
    be62:	49 f4       	brne	.+18     	; 0xbe76 <vdmSetInter+0x82>
	{
		return newSetWithValues(0, NULL);
    be64:	80 e0       	ldi	r24, 0x00	; 0
    be66:	90 e0       	ldi	r25, 0x00	; 0
    be68:	60 e0       	ldi	r22, 0x00	; 0
    be6a:	70 e0       	ldi	r23, 0x00	; 0
    be6c:	0e 94 90 56 	call	0xad20	; 0xad20 <newSetWithValues>
    be70:	9c 8b       	std	Y+20, r25	; 0x14
    be72:	8b 8b       	std	Y+19, r24	; 0x13
    be74:	70 c0       	rjmp	.+224    	; 0xbf56 <vdmSetInter+0x162>
	}

	inter = newSetWithValues(0, NULL);
    be76:	80 e0       	ldi	r24, 0x00	; 0
    be78:	90 e0       	ldi	r25, 0x00	; 0
    be7a:	60 e0       	ldi	r22, 0x00	; 0
    be7c:	70 e0       	ldi	r23, 0x00	; 0
    be7e:	0e 94 90 56 	call	0xad20	; 0xad20 <newSetWithValues>
    be82:	9c 87       	std	Y+12, r25	; 0x0c
    be84:	8b 87       	std	Y+11, r24	; 0x0b

	for(i = 0; i < col1->size; i++)
    be86:	1e 86       	std	Y+14, r1	; 0x0e
    be88:	1d 86       	std	Y+13, r1	; 0x0d
    be8a:	57 c0       	rjmp	.+174    	; 0xbf3a <vdmSetInter+0x146>
	{
		res = vdmSetMemberOf(set2, (col1->value)[i]);
    be8c:	eb 81       	ldd	r30, Y+3	; 0x03
    be8e:	fc 81       	ldd	r31, Y+4	; 0x04
    be90:	20 81       	ld	r18, Z
    be92:	31 81       	ldd	r19, Z+1	; 0x01
    be94:	8d 85       	ldd	r24, Y+13	; 0x0d
    be96:	9e 85       	ldd	r25, Y+14	; 0x0e
    be98:	88 0f       	add	r24, r24
    be9a:	99 1f       	adc	r25, r25
    be9c:	f9 01       	movw	r30, r18
    be9e:	e8 0f       	add	r30, r24
    bea0:	f9 1f       	adc	r31, r25
    bea2:	20 81       	ld	r18, Z
    bea4:	31 81       	ldd	r19, Z+1	; 0x01
    bea6:	89 89       	ldd	r24, Y+17	; 0x11
    bea8:	9a 89       	ldd	r25, Y+18	; 0x12
    beaa:	b9 01       	movw	r22, r18
    beac:	0e 94 d8 5b 	call	0xb7b0	; 0xb7b0 <vdmSetMemberOf>
    beb0:	9e 83       	std	Y+6, r25	; 0x06
    beb2:	8d 83       	std	Y+5, r24	; 0x05

		if(res->value.boolVal)
    beb4:	ed 81       	ldd	r30, Y+5	; 0x05
    beb6:	fe 81       	ldd	r31, Y+6	; 0x06
    beb8:	84 81       	ldd	r24, Z+4	; 0x04
    beba:	88 23       	and	r24, r24
    bebc:	a9 f1       	breq	.+106    	; 0xbf28 <vdmSetInter+0x134>
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    bebe:	eb 81       	ldd	r30, Y+3	; 0x03
    bec0:	fc 81       	ldd	r31, Y+4	; 0x04
    bec2:	20 81       	ld	r18, Z
    bec4:	31 81       	ldd	r19, Z+1	; 0x01
    bec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    bec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    beca:	88 0f       	add	r24, r24
    becc:	99 1f       	adc	r25, r25
    bece:	f9 01       	movw	r30, r18
    bed0:	e8 0f       	add	r30, r24
    bed2:	f9 1f       	adc	r31, r25
    bed4:	20 81       	ld	r18, Z
    bed6:	31 81       	ldd	r19, Z+1	; 0x01
    bed8:	00 d0       	rcall	.+0      	; 0xbeda <vdmSetInter+0xe6>
    beda:	00 d0       	rcall	.+0      	; 0xbedc <vdmSetInter+0xe8>
    bedc:	ed b7       	in	r30, 0x3d	; 61
    bede:	fe b7       	in	r31, 0x3e	; 62
    bee0:	31 96       	adiw	r30, 0x01	; 1
    bee2:	81 e0       	ldi	r24, 0x01	; 1
    bee4:	90 e0       	ldi	r25, 0x00	; 0
    bee6:	91 83       	std	Z+1, r25	; 0x01
    bee8:	80 83       	st	Z, r24
    beea:	33 83       	std	Z+3, r19	; 0x03
    beec:	22 83       	std	Z+2, r18	; 0x02
    beee:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    bef2:	0f 90       	pop	r0
    bef4:	0f 90       	pop	r0
    bef6:	0f 90       	pop	r0
    bef8:	0f 90       	pop	r0
    befa:	9a 87       	std	Y+10, r25	; 0x0a
    befc:	89 87       	std	Y+9, r24	; 0x09
			tmpset2 = vdmSetUnion(inter, tmpset1);
    befe:	8b 85       	ldd	r24, Y+11	; 0x0b
    bf00:	9c 85       	ldd	r25, Y+12	; 0x0c
    bf02:	29 85       	ldd	r18, Y+9	; 0x09
    bf04:	3a 85       	ldd	r19, Y+10	; 0x0a
    bf06:	b9 01       	movw	r22, r18
    bf08:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    bf0c:	98 87       	std	Y+8, r25	; 0x08
    bf0e:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(inter);
    bf10:	8b 85       	ldd	r24, Y+11	; 0x0b
    bf12:	9c 85       	ldd	r25, Y+12	; 0x0c
    bf14:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			inter = tmpset2;
    bf18:	8f 81       	ldd	r24, Y+7	; 0x07
    bf1a:	98 85       	ldd	r25, Y+8	; 0x08
    bf1c:	9c 87       	std	Y+12, r25	; 0x0c
    bf1e:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(tmpset1);
    bf20:	89 85       	ldd	r24, Y+9	; 0x09
    bf22:	9a 85       	ldd	r25, Y+10	; 0x0a
    bf24:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		}
		vdmFree(res);
    bf28:	8d 81       	ldd	r24, Y+5	; 0x05
    bf2a:	9e 81       	ldd	r25, Y+6	; 0x06
    bf2c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		return newSetWithValues(0, NULL);
	}

	inter = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    bf30:	8d 85       	ldd	r24, Y+13	; 0x0d
    bf32:	9e 85       	ldd	r25, Y+14	; 0x0e
    bf34:	01 96       	adiw	r24, 0x01	; 1
    bf36:	9e 87       	std	Y+14, r25	; 0x0e
    bf38:	8d 87       	std	Y+13, r24	; 0x0d
    bf3a:	eb 81       	ldd	r30, Y+3	; 0x03
    bf3c:	fc 81       	ldd	r31, Y+4	; 0x04
    bf3e:	22 81       	ldd	r18, Z+2	; 0x02
    bf40:	33 81       	ldd	r19, Z+3	; 0x03
    bf42:	8d 85       	ldd	r24, Y+13	; 0x0d
    bf44:	9e 85       	ldd	r25, Y+14	; 0x0e
    bf46:	82 17       	cp	r24, r18
    bf48:	93 07       	cpc	r25, r19
    bf4a:	0c f4       	brge	.+2      	; 0xbf4e <vdmSetInter+0x15a>
    bf4c:	9f cf       	rjmp	.-194    	; 0xbe8c <vdmSetInter+0x98>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return inter;
    bf4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    bf50:	9c 85       	ldd	r25, Y+12	; 0x0c
    bf52:	9c 8b       	std	Y+20, r25	; 0x14
    bf54:	8b 8b       	std	Y+19, r24	; 0x13
    bf56:	8b 89       	ldd	r24, Y+19	; 0x13
    bf58:	9c 89       	ldd	r25, Y+20	; 0x14
}
    bf5a:	64 96       	adiw	r28, 0x14	; 20
    bf5c:	0f b6       	in	r0, 0x3f	; 63
    bf5e:	f8 94       	cli
    bf60:	de bf       	out	0x3e, r29	; 62
    bf62:	0f be       	out	0x3f, r0	; 63
    bf64:	cd bf       	out	0x3d, r28	; 61
    bf66:	cf 91       	pop	r28
    bf68:	df 91       	pop	r29
    bf6a:	08 95       	ret

0000bf6c <vdmSetInterGC>:


TVP vdmSetInterGC(TVP set1, TVP set2, TVP *from)
{
    bf6c:	df 93       	push	r29
    bf6e:	cf 93       	push	r28
    bf70:	cd b7       	in	r28, 0x3d	; 61
    bf72:	de b7       	in	r29, 0x3e	; 62
    bf74:	66 97       	sbiw	r28, 0x16	; 22
    bf76:	0f b6       	in	r0, 0x3f	; 63
    bf78:	f8 94       	cli
    bf7a:	de bf       	out	0x3e, r29	; 62
    bf7c:	0f be       	out	0x3f, r0	; 63
    bf7e:	cd bf       	out	0x3d, r28	; 61
    bf80:	98 8b       	std	Y+16, r25	; 0x10
    bf82:	8f 87       	std	Y+15, r24	; 0x0f
    bf84:	7a 8b       	std	Y+18, r23	; 0x12
    bf86:	69 8b       	std	Y+17, r22	; 0x11
    bf88:	5c 8b       	std	Y+20, r21	; 0x14
    bf8a:	4b 8b       	std	Y+19, r20	; 0x13
	TVP inter;
	TVP tmpset1;
	TVP tmpset2;
	TVP res;

	ASSERT_CHECK(set1);
    bf8c:	ef 85       	ldd	r30, Y+15	; 0x0f
    bf8e:	f8 89       	ldd	r31, Y+16	; 0x10
    bf90:	80 81       	ld	r24, Z
    bf92:	91 81       	ldd	r25, Z+1	; 0x01
    bf94:	87 30       	cpi	r24, 0x07	; 7
    bf96:	91 05       	cpc	r25, r1
    bf98:	11 f0       	breq	.+4      	; 0xbf9e <vdmSetInterGC+0x32>
    bf9a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    bf9e:	e9 89       	ldd	r30, Y+17	; 0x11
    bfa0:	fa 89       	ldd	r31, Y+18	; 0x12
    bfa2:	80 81       	ld	r24, Z
    bfa4:	91 81       	ldd	r25, Z+1	; 0x01
    bfa6:	87 30       	cpi	r24, 0x07	; 7
    bfa8:	91 05       	cpc	r25, r1
    bfaa:	11 f0       	breq	.+4      	; 0xbfb0 <vdmSetInterGC+0x44>
    bfac:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    bfb0:	ef 85       	ldd	r30, Y+15	; 0x0f
    bfb2:	f8 89       	ldd	r31, Y+16	; 0x10
    bfb4:	84 81       	ldd	r24, Z+4	; 0x04
    bfb6:	95 81       	ldd	r25, Z+5	; 0x05
    bfb8:	9c 83       	std	Y+4, r25	; 0x04
    bfba:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    bfbc:	e9 89       	ldd	r30, Y+17	; 0x11
    bfbe:	fa 89       	ldd	r31, Y+18	; 0x12
    bfc0:	84 81       	ldd	r24, Z+4	; 0x04
    bfc2:	95 81       	ldd	r25, Z+5	; 0x05
    bfc4:	9a 83       	std	Y+2, r25	; 0x02
    bfc6:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size ==0)
    bfc8:	eb 81       	ldd	r30, Y+3	; 0x03
    bfca:	fc 81       	ldd	r31, Y+4	; 0x04
    bfcc:	82 81       	ldd	r24, Z+2	; 0x02
    bfce:	93 81       	ldd	r25, Z+3	; 0x03
    bfd0:	00 97       	sbiw	r24, 0x00	; 0
    bfd2:	31 f0       	breq	.+12     	; 0xbfe0 <vdmSetInterGC+0x74>
    bfd4:	e9 81       	ldd	r30, Y+1	; 0x01
    bfd6:	fa 81       	ldd	r31, Y+2	; 0x02
    bfd8:	82 81       	ldd	r24, Z+2	; 0x02
    bfda:	93 81       	ldd	r25, Z+3	; 0x03
    bfdc:	00 97       	sbiw	r24, 0x00	; 0
    bfde:	61 f4       	brne	.+24     	; 0xbff8 <vdmSetInterGC+0x8c>
	{
		return newSetWithValuesGC(0, NULL, from);
    bfe0:	2b 89       	ldd	r18, Y+19	; 0x13
    bfe2:	3c 89       	ldd	r19, Y+20	; 0x14
    bfe4:	80 e0       	ldi	r24, 0x00	; 0
    bfe6:	90 e0       	ldi	r25, 0x00	; 0
    bfe8:	60 e0       	ldi	r22, 0x00	; 0
    bfea:	70 e0       	ldi	r23, 0x00	; 0
    bfec:	a9 01       	movw	r20, r18
    bfee:	0e 94 31 57 	call	0xae62	; 0xae62 <newSetWithValuesGC>
    bff2:	9e 8b       	std	Y+22, r25	; 0x16
    bff4:	8d 8b       	std	Y+21, r24	; 0x15
    bff6:	73 c0       	rjmp	.+230    	; 0xc0de <vdmSetInterGC+0x172>
	}

	inter = newSetWithValuesGC(0, NULL, from);
    bff8:	2b 89       	ldd	r18, Y+19	; 0x13
    bffa:	3c 89       	ldd	r19, Y+20	; 0x14
    bffc:	80 e0       	ldi	r24, 0x00	; 0
    bffe:	90 e0       	ldi	r25, 0x00	; 0
    c000:	60 e0       	ldi	r22, 0x00	; 0
    c002:	70 e0       	ldi	r23, 0x00	; 0
    c004:	a9 01       	movw	r20, r18
    c006:	0e 94 31 57 	call	0xae62	; 0xae62 <newSetWithValuesGC>
    c00a:	9c 87       	std	Y+12, r25	; 0x0c
    c00c:	8b 87       	std	Y+11, r24	; 0x0b

	for(i = 0; i < col1->size; i++)
    c00e:	1e 86       	std	Y+14, r1	; 0x0e
    c010:	1d 86       	std	Y+13, r1	; 0x0d
    c012:	57 c0       	rjmp	.+174    	; 0xc0c2 <vdmSetInterGC+0x156>
	{
		res = vdmSetMemberOf(set2, (col1->value)[i]);
    c014:	eb 81       	ldd	r30, Y+3	; 0x03
    c016:	fc 81       	ldd	r31, Y+4	; 0x04
    c018:	20 81       	ld	r18, Z
    c01a:	31 81       	ldd	r19, Z+1	; 0x01
    c01c:	8d 85       	ldd	r24, Y+13	; 0x0d
    c01e:	9e 85       	ldd	r25, Y+14	; 0x0e
    c020:	88 0f       	add	r24, r24
    c022:	99 1f       	adc	r25, r25
    c024:	f9 01       	movw	r30, r18
    c026:	e8 0f       	add	r30, r24
    c028:	f9 1f       	adc	r31, r25
    c02a:	20 81       	ld	r18, Z
    c02c:	31 81       	ldd	r19, Z+1	; 0x01
    c02e:	89 89       	ldd	r24, Y+17	; 0x11
    c030:	9a 89       	ldd	r25, Y+18	; 0x12
    c032:	b9 01       	movw	r22, r18
    c034:	0e 94 d8 5b 	call	0xb7b0	; 0xb7b0 <vdmSetMemberOf>
    c038:	9e 83       	std	Y+6, r25	; 0x06
    c03a:	8d 83       	std	Y+5, r24	; 0x05

		if(res->value.boolVal)
    c03c:	ed 81       	ldd	r30, Y+5	; 0x05
    c03e:	fe 81       	ldd	r31, Y+6	; 0x06
    c040:	84 81       	ldd	r24, Z+4	; 0x04
    c042:	88 23       	and	r24, r24
    c044:	a9 f1       	breq	.+106    	; 0xc0b0 <vdmSetInterGC+0x144>
		{
			/* add to intersection set  */
			tmpset1 = newSetVar(1, col1->value[i]);
    c046:	eb 81       	ldd	r30, Y+3	; 0x03
    c048:	fc 81       	ldd	r31, Y+4	; 0x04
    c04a:	20 81       	ld	r18, Z
    c04c:	31 81       	ldd	r19, Z+1	; 0x01
    c04e:	8d 85       	ldd	r24, Y+13	; 0x0d
    c050:	9e 85       	ldd	r25, Y+14	; 0x0e
    c052:	88 0f       	add	r24, r24
    c054:	99 1f       	adc	r25, r25
    c056:	f9 01       	movw	r30, r18
    c058:	e8 0f       	add	r30, r24
    c05a:	f9 1f       	adc	r31, r25
    c05c:	20 81       	ld	r18, Z
    c05e:	31 81       	ldd	r19, Z+1	; 0x01
    c060:	00 d0       	rcall	.+0      	; 0xc062 <vdmSetInterGC+0xf6>
    c062:	00 d0       	rcall	.+0      	; 0xc064 <vdmSetInterGC+0xf8>
    c064:	ed b7       	in	r30, 0x3d	; 61
    c066:	fe b7       	in	r31, 0x3e	; 62
    c068:	31 96       	adiw	r30, 0x01	; 1
    c06a:	81 e0       	ldi	r24, 0x01	; 1
    c06c:	90 e0       	ldi	r25, 0x00	; 0
    c06e:	91 83       	std	Z+1, r25	; 0x01
    c070:	80 83       	st	Z, r24
    c072:	33 83       	std	Z+3, r19	; 0x03
    c074:	22 83       	std	Z+2, r18	; 0x02
    c076:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    c07a:	0f 90       	pop	r0
    c07c:	0f 90       	pop	r0
    c07e:	0f 90       	pop	r0
    c080:	0f 90       	pop	r0
    c082:	9a 87       	std	Y+10, r25	; 0x0a
    c084:	89 87       	std	Y+9, r24	; 0x09
			tmpset2 = vdmSetUnion(inter, tmpset1);
    c086:	8b 85       	ldd	r24, Y+11	; 0x0b
    c088:	9c 85       	ldd	r25, Y+12	; 0x0c
    c08a:	29 85       	ldd	r18, Y+9	; 0x09
    c08c:	3a 85       	ldd	r19, Y+10	; 0x0a
    c08e:	b9 01       	movw	r22, r18
    c090:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    c094:	98 87       	std	Y+8, r25	; 0x08
    c096:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(inter);
    c098:	8b 85       	ldd	r24, Y+11	; 0x0b
    c09a:	9c 85       	ldd	r25, Y+12	; 0x0c
    c09c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			inter = tmpset2;
    c0a0:	8f 81       	ldd	r24, Y+7	; 0x07
    c0a2:	98 85       	ldd	r25, Y+8	; 0x08
    c0a4:	9c 87       	std	Y+12, r25	; 0x0c
    c0a6:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(tmpset1);
    c0a8:	89 85       	ldd	r24, Y+9	; 0x09
    c0aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    c0ac:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		}
		vdmFree(res);
    c0b0:	8d 81       	ldd	r24, Y+5	; 0x05
    c0b2:	9e 81       	ldd	r25, Y+6	; 0x06
    c0b4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		return newSetWithValuesGC(0, NULL, from);
	}

	inter = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    c0b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    c0ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    c0bc:	01 96       	adiw	r24, 0x01	; 1
    c0be:	9e 87       	std	Y+14, r25	; 0x0e
    c0c0:	8d 87       	std	Y+13, r24	; 0x0d
    c0c2:	eb 81       	ldd	r30, Y+3	; 0x03
    c0c4:	fc 81       	ldd	r31, Y+4	; 0x04
    c0c6:	22 81       	ldd	r18, Z+2	; 0x02
    c0c8:	33 81       	ldd	r19, Z+3	; 0x03
    c0ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    c0cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    c0ce:	82 17       	cp	r24, r18
    c0d0:	93 07       	cpc	r25, r19
    c0d2:	0c f4       	brge	.+2      	; 0xc0d6 <vdmSetInterGC+0x16a>
    c0d4:	9f cf       	rjmp	.-194    	; 0xc014 <vdmSetInterGC+0xa8>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return inter;
    c0d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    c0d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    c0da:	9e 8b       	std	Y+22, r25	; 0x16
    c0dc:	8d 8b       	std	Y+21, r24	; 0x15
    c0de:	8d 89       	ldd	r24, Y+21	; 0x15
    c0e0:	9e 89       	ldd	r25, Y+22	; 0x16
}
    c0e2:	66 96       	adiw	r28, 0x16	; 22
    c0e4:	0f b6       	in	r0, 0x3f	; 63
    c0e6:	f8 94       	cli
    c0e8:	de bf       	out	0x3e, r29	; 62
    c0ea:	0f be       	out	0x3f, r0	; 63
    c0ec:	cd bf       	out	0x3d, r28	; 61
    c0ee:	cf 91       	pop	r28
    c0f0:	df 91       	pop	r29
    c0f2:	08 95       	ret

0000c0f4 <vdmSetDifference>:




TVP vdmSetDifference(TVP set1, TVP set2)
{
    c0f4:	df 93       	push	r29
    c0f6:	cf 93       	push	r28
    c0f8:	cd b7       	in	r28, 0x3d	; 61
    c0fa:	de b7       	in	r29, 0x3e	; 62
    c0fc:	64 97       	sbiw	r28, 0x14	; 20
    c0fe:	0f b6       	in	r0, 0x3f	; 63
    c100:	f8 94       	cli
    c102:	de bf       	out	0x3e, r29	; 62
    c104:	0f be       	out	0x3f, r0	; 63
    c106:	cd bf       	out	0x3d, r28	; 61
    c108:	98 8b       	std	Y+16, r25	; 0x10
    c10a:	8f 87       	std	Y+15, r24	; 0x0f
    c10c:	7a 8b       	std	Y+18, r23	; 0x12
    c10e:	69 8b       	std	Y+17, r22	; 0x11
	TVP tmpset1;
	TVP tmpset2;
	TVP resultset;
	TVP res;

	ASSERT_CHECK(set1);
    c110:	ef 85       	ldd	r30, Y+15	; 0x0f
    c112:	f8 89       	ldd	r31, Y+16	; 0x10
    c114:	80 81       	ld	r24, Z
    c116:	91 81       	ldd	r25, Z+1	; 0x01
    c118:	87 30       	cpi	r24, 0x07	; 7
    c11a:	91 05       	cpc	r25, r1
    c11c:	11 f0       	breq	.+4      	; 0xc122 <vdmSetDifference+0x2e>
    c11e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c122:	e9 89       	ldd	r30, Y+17	; 0x11
    c124:	fa 89       	ldd	r31, Y+18	; 0x12
    c126:	80 81       	ld	r24, Z
    c128:	91 81       	ldd	r25, Z+1	; 0x01
    c12a:	87 30       	cpi	r24, 0x07	; 7
    c12c:	91 05       	cpc	r25, r1
    c12e:	11 f0       	breq	.+4      	; 0xc134 <vdmSetDifference+0x40>
    c130:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c134:	ef 85       	ldd	r30, Y+15	; 0x0f
    c136:	f8 89       	ldd	r31, Y+16	; 0x10
    c138:	84 81       	ldd	r24, Z+4	; 0x04
    c13a:	95 81       	ldd	r25, Z+5	; 0x05
    c13c:	9c 83       	std	Y+4, r25	; 0x04
    c13e:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c140:	e9 89       	ldd	r30, Y+17	; 0x11
    c142:	fa 89       	ldd	r31, Y+18	; 0x12
    c144:	84 81       	ldd	r24, Z+4	; 0x04
    c146:	95 81       	ldd	r25, Z+5	; 0x05
    c148:	9a 83       	std	Y+2, r25	; 0x02
    c14a:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size == 0)
    c14c:	eb 81       	ldd	r30, Y+3	; 0x03
    c14e:	fc 81       	ldd	r31, Y+4	; 0x04
    c150:	82 81       	ldd	r24, Z+2	; 0x02
    c152:	93 81       	ldd	r25, Z+3	; 0x03
    c154:	00 97       	sbiw	r24, 0x00	; 0
    c156:	31 f0       	breq	.+12     	; 0xc164 <vdmSetDifference+0x70>
    c158:	e9 81       	ldd	r30, Y+1	; 0x01
    c15a:	fa 81       	ldd	r31, Y+2	; 0x02
    c15c:	82 81       	ldd	r24, Z+2	; 0x02
    c15e:	93 81       	ldd	r25, Z+3	; 0x03
    c160:	00 97       	sbiw	r24, 0x00	; 0
    c162:	29 f4       	brne	.+10     	; 0xc16e <vdmSetDifference+0x7a>
	{
		return set1;
    c164:	8f 85       	ldd	r24, Y+15	; 0x0f
    c166:	98 89       	ldd	r25, Y+16	; 0x10
    c168:	9c 8b       	std	Y+20, r25	; 0x14
    c16a:	8b 8b       	std	Y+19, r24	; 0x13
    c16c:	70 c0       	rjmp	.+224    	; 0xc24e <vdmSetDifference+0x15a>
	}

	resultset = newSetWithValues(0, NULL);
    c16e:	80 e0       	ldi	r24, 0x00	; 0
    c170:	90 e0       	ldi	r25, 0x00	; 0
    c172:	60 e0       	ldi	r22, 0x00	; 0
    c174:	70 e0       	ldi	r23, 0x00	; 0
    c176:	0e 94 90 56 	call	0xad20	; 0xad20 <newSetWithValues>
    c17a:	98 87       	std	Y+8, r25	; 0x08
    c17c:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col1->size; i++)
    c17e:	1e 86       	std	Y+14, r1	; 0x0e
    c180:	1d 86       	std	Y+13, r1	; 0x0d
    c182:	57 c0       	rjmp	.+174    	; 0xc232 <vdmSetDifference+0x13e>
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
    c184:	eb 81       	ldd	r30, Y+3	; 0x03
    c186:	fc 81       	ldd	r31, Y+4	; 0x04
    c188:	20 81       	ld	r18, Z
    c18a:	31 81       	ldd	r19, Z+1	; 0x01
    c18c:	8d 85       	ldd	r24, Y+13	; 0x0d
    c18e:	9e 85       	ldd	r25, Y+14	; 0x0e
    c190:	88 0f       	add	r24, r24
    c192:	99 1f       	adc	r25, r25
    c194:	f9 01       	movw	r30, r18
    c196:	e8 0f       	add	r30, r24
    c198:	f9 1f       	adc	r31, r25
    c19a:	20 81       	ld	r18, Z
    c19c:	31 81       	ldd	r19, Z+1	; 0x01
    c19e:	89 89       	ldd	r24, Y+17	; 0x11
    c1a0:	9a 89       	ldd	r25, Y+18	; 0x12
    c1a2:	b9 01       	movw	r22, r18
    c1a4:	0e 94 97 5c 	call	0xb92e	; 0xb92e <vdmSetNotMemberOf>
    c1a8:	9e 83       	std	Y+6, r25	; 0x06
    c1aa:	8d 83       	std	Y+5, r24	; 0x05
		if(res->value.boolVal)
    c1ac:	ed 81       	ldd	r30, Y+5	; 0x05
    c1ae:	fe 81       	ldd	r31, Y+6	; 0x06
    c1b0:	84 81       	ldd	r24, Z+4	; 0x04
    c1b2:	88 23       	and	r24, r24
    c1b4:	a9 f1       	breq	.+106    	; 0xc220 <vdmSetDifference+0x12c>
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    c1b6:	eb 81       	ldd	r30, Y+3	; 0x03
    c1b8:	fc 81       	ldd	r31, Y+4	; 0x04
    c1ba:	20 81       	ld	r18, Z
    c1bc:	31 81       	ldd	r19, Z+1	; 0x01
    c1be:	8d 85       	ldd	r24, Y+13	; 0x0d
    c1c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    c1c2:	88 0f       	add	r24, r24
    c1c4:	99 1f       	adc	r25, r25
    c1c6:	f9 01       	movw	r30, r18
    c1c8:	e8 0f       	add	r30, r24
    c1ca:	f9 1f       	adc	r31, r25
    c1cc:	20 81       	ld	r18, Z
    c1ce:	31 81       	ldd	r19, Z+1	; 0x01
    c1d0:	00 d0       	rcall	.+0      	; 0xc1d2 <vdmSetDifference+0xde>
    c1d2:	00 d0       	rcall	.+0      	; 0xc1d4 <vdmSetDifference+0xe0>
    c1d4:	ed b7       	in	r30, 0x3d	; 61
    c1d6:	fe b7       	in	r31, 0x3e	; 62
    c1d8:	31 96       	adiw	r30, 0x01	; 1
    c1da:	81 e0       	ldi	r24, 0x01	; 1
    c1dc:	90 e0       	ldi	r25, 0x00	; 0
    c1de:	91 83       	std	Z+1, r25	; 0x01
    c1e0:	80 83       	st	Z, r24
    c1e2:	33 83       	std	Z+3, r19	; 0x03
    c1e4:	22 83       	std	Z+2, r18	; 0x02
    c1e6:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    c1ea:	0f 90       	pop	r0
    c1ec:	0f 90       	pop	r0
    c1ee:	0f 90       	pop	r0
    c1f0:	0f 90       	pop	r0
    c1f2:	9c 87       	std	Y+12, r25	; 0x0c
    c1f4:	8b 87       	std	Y+11, r24	; 0x0b
			tmpset2 = vdmSetUnion(resultset, tmpset1);
    c1f6:	8f 81       	ldd	r24, Y+7	; 0x07
    c1f8:	98 85       	ldd	r25, Y+8	; 0x08
    c1fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    c1fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    c1fe:	b9 01       	movw	r22, r18
    c200:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    c204:	9a 87       	std	Y+10, r25	; 0x0a
    c206:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(resultset);
    c208:	8f 81       	ldd	r24, Y+7	; 0x07
    c20a:	98 85       	ldd	r25, Y+8	; 0x08
    c20c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			resultset = tmpset2;
    c210:	89 85       	ldd	r24, Y+9	; 0x09
    c212:	9a 85       	ldd	r25, Y+10	; 0x0a
    c214:	98 87       	std	Y+8, r25	; 0x08
    c216:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(tmpset1);
    c218:	8b 85       	ldd	r24, Y+11	; 0x0b
    c21a:	9c 85       	ldd	r25, Y+12	; 0x0c
    c21c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		}
		vdmFree(res);
    c220:	8d 81       	ldd	r24, Y+5	; 0x05
    c222:	9e 81       	ldd	r25, Y+6	; 0x06
    c224:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		return set1;
	}

	resultset = newSetWithValues(0, NULL);

	for(i = 0; i < col1->size; i++)
    c228:	8d 85       	ldd	r24, Y+13	; 0x0d
    c22a:	9e 85       	ldd	r25, Y+14	; 0x0e
    c22c:	01 96       	adiw	r24, 0x01	; 1
    c22e:	9e 87       	std	Y+14, r25	; 0x0e
    c230:	8d 87       	std	Y+13, r24	; 0x0d
    c232:	eb 81       	ldd	r30, Y+3	; 0x03
    c234:	fc 81       	ldd	r31, Y+4	; 0x04
    c236:	22 81       	ldd	r18, Z+2	; 0x02
    c238:	33 81       	ldd	r19, Z+3	; 0x03
    c23a:	8d 85       	ldd	r24, Y+13	; 0x0d
    c23c:	9e 85       	ldd	r25, Y+14	; 0x0e
    c23e:	82 17       	cp	r24, r18
    c240:	93 07       	cpc	r25, r19
    c242:	0c f4       	brge	.+2      	; 0xc246 <vdmSetDifference+0x152>
    c244:	9f cf       	rjmp	.-194    	; 0xc184 <vdmSetDifference+0x90>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return resultset;
    c246:	8f 81       	ldd	r24, Y+7	; 0x07
    c248:	98 85       	ldd	r25, Y+8	; 0x08
    c24a:	9c 8b       	std	Y+20, r25	; 0x14
    c24c:	8b 8b       	std	Y+19, r24	; 0x13
    c24e:	8b 89       	ldd	r24, Y+19	; 0x13
    c250:	9c 89       	ldd	r25, Y+20	; 0x14
}
    c252:	64 96       	adiw	r28, 0x14	; 20
    c254:	0f b6       	in	r0, 0x3f	; 63
    c256:	f8 94       	cli
    c258:	de bf       	out	0x3e, r29	; 62
    c25a:	0f be       	out	0x3f, r0	; 63
    c25c:	cd bf       	out	0x3d, r28	; 61
    c25e:	cf 91       	pop	r28
    c260:	df 91       	pop	r29
    c262:	08 95       	ret

0000c264 <vdmSetDifferenceGC>:



TVP vdmSetDifferenceGC(TVP set1, TVP set2, TVP *from)
{
    c264:	df 93       	push	r29
    c266:	cf 93       	push	r28
    c268:	cd b7       	in	r28, 0x3d	; 61
    c26a:	de b7       	in	r29, 0x3e	; 62
    c26c:	66 97       	sbiw	r28, 0x16	; 22
    c26e:	0f b6       	in	r0, 0x3f	; 63
    c270:	f8 94       	cli
    c272:	de bf       	out	0x3e, r29	; 62
    c274:	0f be       	out	0x3f, r0	; 63
    c276:	cd bf       	out	0x3d, r28	; 61
    c278:	98 8b       	std	Y+16, r25	; 0x10
    c27a:	8f 87       	std	Y+15, r24	; 0x0f
    c27c:	7a 8b       	std	Y+18, r23	; 0x12
    c27e:	69 8b       	std	Y+17, r22	; 0x11
    c280:	5c 8b       	std	Y+20, r21	; 0x14
    c282:	4b 8b       	std	Y+19, r20	; 0x13
	TVP tmpset1;
	TVP tmpset2;
	TVP resultset;
	TVP res;

	ASSERT_CHECK(set1);
    c284:	ef 85       	ldd	r30, Y+15	; 0x0f
    c286:	f8 89       	ldd	r31, Y+16	; 0x10
    c288:	80 81       	ld	r24, Z
    c28a:	91 81       	ldd	r25, Z+1	; 0x01
    c28c:	87 30       	cpi	r24, 0x07	; 7
    c28e:	91 05       	cpc	r25, r1
    c290:	11 f0       	breq	.+4      	; 0xc296 <vdmSetDifferenceGC+0x32>
    c292:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c296:	e9 89       	ldd	r30, Y+17	; 0x11
    c298:	fa 89       	ldd	r31, Y+18	; 0x12
    c29a:	80 81       	ld	r24, Z
    c29c:	91 81       	ldd	r25, Z+1	; 0x01
    c29e:	87 30       	cpi	r24, 0x07	; 7
    c2a0:	91 05       	cpc	r25, r1
    c2a2:	11 f0       	breq	.+4      	; 0xc2a8 <vdmSetDifferenceGC+0x44>
    c2a4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c2a8:	ef 85       	ldd	r30, Y+15	; 0x0f
    c2aa:	f8 89       	ldd	r31, Y+16	; 0x10
    c2ac:	84 81       	ldd	r24, Z+4	; 0x04
    c2ae:	95 81       	ldd	r25, Z+5	; 0x05
    c2b0:	9c 83       	std	Y+4, r25	; 0x04
    c2b2:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c2b4:	e9 89       	ldd	r30, Y+17	; 0x11
    c2b6:	fa 89       	ldd	r31, Y+18	; 0x12
    c2b8:	84 81       	ldd	r24, Z+4	; 0x04
    c2ba:	95 81       	ldd	r25, Z+5	; 0x05
    c2bc:	9a 83       	std	Y+2, r25	; 0x02
    c2be:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size == 0 || col2->size == 0)
    c2c0:	eb 81       	ldd	r30, Y+3	; 0x03
    c2c2:	fc 81       	ldd	r31, Y+4	; 0x04
    c2c4:	82 81       	ldd	r24, Z+2	; 0x02
    c2c6:	93 81       	ldd	r25, Z+3	; 0x03
    c2c8:	00 97       	sbiw	r24, 0x00	; 0
    c2ca:	31 f0       	breq	.+12     	; 0xc2d8 <vdmSetDifferenceGC+0x74>
    c2cc:	e9 81       	ldd	r30, Y+1	; 0x01
    c2ce:	fa 81       	ldd	r31, Y+2	; 0x02
    c2d0:	82 81       	ldd	r24, Z+2	; 0x02
    c2d2:	93 81       	ldd	r25, Z+3	; 0x03
    c2d4:	00 97       	sbiw	r24, 0x00	; 0
    c2d6:	29 f4       	brne	.+10     	; 0xc2e2 <vdmSetDifferenceGC+0x7e>
	{
		return set1;
    c2d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    c2da:	98 89       	ldd	r25, Y+16	; 0x10
    c2dc:	9e 8b       	std	Y+22, r25	; 0x16
    c2de:	8d 8b       	std	Y+21, r24	; 0x15
    c2e0:	73 c0       	rjmp	.+230    	; 0xc3c8 <vdmSetDifferenceGC+0x164>
	}

	resultset = newSetWithValuesGC(0, NULL, from);
    c2e2:	2b 89       	ldd	r18, Y+19	; 0x13
    c2e4:	3c 89       	ldd	r19, Y+20	; 0x14
    c2e6:	80 e0       	ldi	r24, 0x00	; 0
    c2e8:	90 e0       	ldi	r25, 0x00	; 0
    c2ea:	60 e0       	ldi	r22, 0x00	; 0
    c2ec:	70 e0       	ldi	r23, 0x00	; 0
    c2ee:	a9 01       	movw	r20, r18
    c2f0:	0e 94 31 57 	call	0xae62	; 0xae62 <newSetWithValuesGC>
    c2f4:	98 87       	std	Y+8, r25	; 0x08
    c2f6:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col1->size; i++)
    c2f8:	1e 86       	std	Y+14, r1	; 0x0e
    c2fa:	1d 86       	std	Y+13, r1	; 0x0d
    c2fc:	57 c0       	rjmp	.+174    	; 0xc3ac <vdmSetDifferenceGC+0x148>
	{
		res = vdmSetNotMemberOf(set2, (col1->value)[i]);
    c2fe:	eb 81       	ldd	r30, Y+3	; 0x03
    c300:	fc 81       	ldd	r31, Y+4	; 0x04
    c302:	20 81       	ld	r18, Z
    c304:	31 81       	ldd	r19, Z+1	; 0x01
    c306:	8d 85       	ldd	r24, Y+13	; 0x0d
    c308:	9e 85       	ldd	r25, Y+14	; 0x0e
    c30a:	88 0f       	add	r24, r24
    c30c:	99 1f       	adc	r25, r25
    c30e:	f9 01       	movw	r30, r18
    c310:	e8 0f       	add	r30, r24
    c312:	f9 1f       	adc	r31, r25
    c314:	20 81       	ld	r18, Z
    c316:	31 81       	ldd	r19, Z+1	; 0x01
    c318:	89 89       	ldd	r24, Y+17	; 0x11
    c31a:	9a 89       	ldd	r25, Y+18	; 0x12
    c31c:	b9 01       	movw	r22, r18
    c31e:	0e 94 97 5c 	call	0xb92e	; 0xb92e <vdmSetNotMemberOf>
    c322:	9e 83       	std	Y+6, r25	; 0x06
    c324:	8d 83       	std	Y+5, r24	; 0x05
		if(res->value.boolVal)
    c326:	ed 81       	ldd	r30, Y+5	; 0x05
    c328:	fe 81       	ldd	r31, Y+6	; 0x06
    c32a:	84 81       	ldd	r24, Z+4	; 0x04
    c32c:	88 23       	and	r24, r24
    c32e:	a9 f1       	breq	.+106    	; 0xc39a <vdmSetDifferenceGC+0x136>
		{
			tmpset1 = newSetVar(1, (col1->value)[i]);
    c330:	eb 81       	ldd	r30, Y+3	; 0x03
    c332:	fc 81       	ldd	r31, Y+4	; 0x04
    c334:	20 81       	ld	r18, Z
    c336:	31 81       	ldd	r19, Z+1	; 0x01
    c338:	8d 85       	ldd	r24, Y+13	; 0x0d
    c33a:	9e 85       	ldd	r25, Y+14	; 0x0e
    c33c:	88 0f       	add	r24, r24
    c33e:	99 1f       	adc	r25, r25
    c340:	f9 01       	movw	r30, r18
    c342:	e8 0f       	add	r30, r24
    c344:	f9 1f       	adc	r31, r25
    c346:	20 81       	ld	r18, Z
    c348:	31 81       	ldd	r19, Z+1	; 0x01
    c34a:	00 d0       	rcall	.+0      	; 0xc34c <vdmSetDifferenceGC+0xe8>
    c34c:	00 d0       	rcall	.+0      	; 0xc34e <vdmSetDifferenceGC+0xea>
    c34e:	ed b7       	in	r30, 0x3d	; 61
    c350:	fe b7       	in	r31, 0x3e	; 62
    c352:	31 96       	adiw	r30, 0x01	; 1
    c354:	81 e0       	ldi	r24, 0x01	; 1
    c356:	90 e0       	ldi	r25, 0x00	; 0
    c358:	91 83       	std	Z+1, r25	; 0x01
    c35a:	80 83       	st	Z, r24
    c35c:	33 83       	std	Z+3, r19	; 0x03
    c35e:	22 83       	std	Z+2, r18	; 0x02
    c360:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    c364:	0f 90       	pop	r0
    c366:	0f 90       	pop	r0
    c368:	0f 90       	pop	r0
    c36a:	0f 90       	pop	r0
    c36c:	9c 87       	std	Y+12, r25	; 0x0c
    c36e:	8b 87       	std	Y+11, r24	; 0x0b
			tmpset2 = vdmSetUnion(resultset, tmpset1);
    c370:	8f 81       	ldd	r24, Y+7	; 0x07
    c372:	98 85       	ldd	r25, Y+8	; 0x08
    c374:	2b 85       	ldd	r18, Y+11	; 0x0b
    c376:	3c 85       	ldd	r19, Y+12	; 0x0c
    c378:	b9 01       	movw	r22, r18
    c37a:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    c37e:	9a 87       	std	Y+10, r25	; 0x0a
    c380:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(resultset);
    c382:	8f 81       	ldd	r24, Y+7	; 0x07
    c384:	98 85       	ldd	r25, Y+8	; 0x08
    c386:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			resultset = tmpset2;
    c38a:	89 85       	ldd	r24, Y+9	; 0x09
    c38c:	9a 85       	ldd	r25, Y+10	; 0x0a
    c38e:	98 87       	std	Y+8, r25	; 0x08
    c390:	8f 83       	std	Y+7, r24	; 0x07
			vdmFree(tmpset1);
    c392:	8b 85       	ldd	r24, Y+11	; 0x0b
    c394:	9c 85       	ldd	r25, Y+12	; 0x0c
    c396:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		}
		vdmFree(res);
    c39a:	8d 81       	ldd	r24, Y+5	; 0x05
    c39c:	9e 81       	ldd	r25, Y+6	; 0x06
    c39e:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		return set1;
	}

	resultset = newSetWithValuesGC(0, NULL, from);

	for(i = 0; i < col1->size; i++)
    c3a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    c3a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    c3a6:	01 96       	adiw	r24, 0x01	; 1
    c3a8:	9e 87       	std	Y+14, r25	; 0x0e
    c3aa:	8d 87       	std	Y+13, r24	; 0x0d
    c3ac:	eb 81       	ldd	r30, Y+3	; 0x03
    c3ae:	fc 81       	ldd	r31, Y+4	; 0x04
    c3b0:	22 81       	ldd	r18, Z+2	; 0x02
    c3b2:	33 81       	ldd	r19, Z+3	; 0x03
    c3b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    c3b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    c3b8:	82 17       	cp	r24, r18
    c3ba:	93 07       	cpc	r25, r19
    c3bc:	0c f4       	brge	.+2      	; 0xc3c0 <vdmSetDifferenceGC+0x15c>
    c3be:	9f cf       	rjmp	.-194    	; 0xc2fe <vdmSetDifferenceGC+0x9a>
			vdmFree(tmpset1);
		}
		vdmFree(res);
	}

	return resultset;
    c3c0:	8f 81       	ldd	r24, Y+7	; 0x07
    c3c2:	98 85       	ldd	r25, Y+8	; 0x08
    c3c4:	9e 8b       	std	Y+22, r25	; 0x16
    c3c6:	8d 8b       	std	Y+21, r24	; 0x15
    c3c8:	8d 89       	ldd	r24, Y+21	; 0x15
    c3ca:	9e 89       	ldd	r25, Y+22	; 0x16
}
    c3cc:	66 96       	adiw	r28, 0x16	; 22
    c3ce:	0f b6       	in	r0, 0x3f	; 63
    c3d0:	f8 94       	cli
    c3d2:	de bf       	out	0x3e, r29	; 62
    c3d4:	0f be       	out	0x3f, r0	; 63
    c3d6:	cd bf       	out	0x3d, r28	; 61
    c3d8:	cf 91       	pop	r28
    c3da:	df 91       	pop	r29
    c3dc:	08 95       	ret

0000c3de <vdmSetSubset>:


TVP vdmSetSubset(TVP set1, TVP set2)
{
    c3de:	df 93       	push	r29
    c3e0:	cf 93       	push	r28
    c3e2:	cd b7       	in	r28, 0x3d	; 61
    c3e4:	de b7       	in	r29, 0x3e	; 62
    c3e6:	2e 97       	sbiw	r28, 0x0e	; 14
    c3e8:	0f b6       	in	r0, 0x3f	; 63
    c3ea:	f8 94       	cli
    c3ec:	de bf       	out	0x3e, r29	; 62
    c3ee:	0f be       	out	0x3f, r0	; 63
    c3f0:	cd bf       	out	0x3d, r28	; 61
    c3f2:	9a 87       	std	Y+10, r25	; 0x0a
    c3f4:	89 87       	std	Y+9, r24	; 0x09
    c3f6:	7c 87       	std	Y+12, r23	; 0x0c
    c3f8:	6b 87       	std	Y+11, r22	; 0x0b
	int i;
	TVP res;

	ASSERT_CHECK(set1);
    c3fa:	e9 85       	ldd	r30, Y+9	; 0x09
    c3fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    c3fe:	80 81       	ld	r24, Z
    c400:	91 81       	ldd	r25, Z+1	; 0x01
    c402:	87 30       	cpi	r24, 0x07	; 7
    c404:	91 05       	cpc	r25, r1
    c406:	11 f0       	breq	.+4      	; 0xc40c <vdmSetSubset+0x2e>
    c408:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c40c:	eb 85       	ldd	r30, Y+11	; 0x0b
    c40e:	fc 85       	ldd	r31, Y+12	; 0x0c
    c410:	80 81       	ld	r24, Z
    c412:	91 81       	ldd	r25, Z+1	; 0x01
    c414:	87 30       	cpi	r24, 0x07	; 7
    c416:	91 05       	cpc	r25, r1
    c418:	11 f0       	breq	.+4      	; 0xc41e <vdmSetSubset+0x40>
    c41a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c41e:	e9 85       	ldd	r30, Y+9	; 0x09
    c420:	fa 85       	ldd	r31, Y+10	; 0x0a
    c422:	84 81       	ldd	r24, Z+4	; 0x04
    c424:	95 81       	ldd	r25, Z+5	; 0x05
    c426:	9c 83       	std	Y+4, r25	; 0x04
    c428:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c42a:	eb 85       	ldd	r30, Y+11	; 0x0b
    c42c:	fc 85       	ldd	r31, Y+12	; 0x0c
    c42e:	84 81       	ldd	r24, Z+4	; 0x04
    c430:	95 81       	ldd	r25, Z+5	; 0x05
    c432:	9a 83       	std	Y+2, r25	; 0x02
    c434:	89 83       	std	Y+1, r24	; 0x01

	if(col1-> size > col2->size)
    c436:	eb 81       	ldd	r30, Y+3	; 0x03
    c438:	fc 81       	ldd	r31, Y+4	; 0x04
    c43a:	22 81       	ldd	r18, Z+2	; 0x02
    c43c:	33 81       	ldd	r19, Z+3	; 0x03
    c43e:	e9 81       	ldd	r30, Y+1	; 0x01
    c440:	fa 81       	ldd	r31, Y+2	; 0x02
    c442:	82 81       	ldd	r24, Z+2	; 0x02
    c444:	93 81       	ldd	r25, Z+3	; 0x03
    c446:	82 17       	cp	r24, r18
    c448:	93 07       	cpc	r25, r19
    c44a:	34 f4       	brge	.+12     	; 0xc458 <vdmSetSubset+0x7a>
	{
		return newBool(false);
    c44c:	80 e0       	ldi	r24, 0x00	; 0
    c44e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    c452:	9e 87       	std	Y+14, r25	; 0x0e
    c454:	8d 87       	std	Y+13, r24	; 0x0d
    c456:	3f c0       	rjmp	.+126    	; 0xc4d6 <vdmSetSubset+0xf8>
	}

	for(i = 0; i < col1->size; i++)
    c458:	18 86       	std	Y+8, r1	; 0x08
    c45a:	1f 82       	std	Y+7, r1	; 0x07
    c45c:	2e c0       	rjmp	.+92     	; 0xc4ba <vdmSetSubset+0xdc>
	{

		res = vdmSetMemberOf(set2, (col1->value)[i]);
    c45e:	eb 81       	ldd	r30, Y+3	; 0x03
    c460:	fc 81       	ldd	r31, Y+4	; 0x04
    c462:	20 81       	ld	r18, Z
    c464:	31 81       	ldd	r19, Z+1	; 0x01
    c466:	8f 81       	ldd	r24, Y+7	; 0x07
    c468:	98 85       	ldd	r25, Y+8	; 0x08
    c46a:	88 0f       	add	r24, r24
    c46c:	99 1f       	adc	r25, r25
    c46e:	f9 01       	movw	r30, r18
    c470:	e8 0f       	add	r30, r24
    c472:	f9 1f       	adc	r31, r25
    c474:	20 81       	ld	r18, Z
    c476:	31 81       	ldd	r19, Z+1	; 0x01
    c478:	8b 85       	ldd	r24, Y+11	; 0x0b
    c47a:	9c 85       	ldd	r25, Y+12	; 0x0c
    c47c:	b9 01       	movw	r22, r18
    c47e:	0e 94 d8 5b 	call	0xb7b0	; 0xb7b0 <vdmSetMemberOf>
    c482:	9e 83       	std	Y+6, r25	; 0x06
    c484:	8d 83       	std	Y+5, r24	; 0x05
		if(!res->value.boolVal)
    c486:	ed 81       	ldd	r30, Y+5	; 0x05
    c488:	fe 81       	ldd	r31, Y+6	; 0x06
    c48a:	94 81       	ldd	r25, Z+4	; 0x04
    c48c:	81 e0       	ldi	r24, 0x01	; 1
    c48e:	89 27       	eor	r24, r25
    c490:	88 23       	and	r24, r24
    c492:	51 f0       	breq	.+20     	; 0xc4a8 <vdmSetSubset+0xca>
		{
			free(res);
    c494:	8d 81       	ldd	r24, Y+5	; 0x05
    c496:	9e 81       	ldd	r25, Y+6	; 0x06
    c498:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
			return newBool(false);
    c49c:	80 e0       	ldi	r24, 0x00	; 0
    c49e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    c4a2:	9e 87       	std	Y+14, r25	; 0x0e
    c4a4:	8d 87       	std	Y+13, r24	; 0x0d
    c4a6:	17 c0       	rjmp	.+46     	; 0xc4d6 <vdmSetSubset+0xf8>
		}
		free(res);
    c4a8:	8d 81       	ldd	r24, Y+5	; 0x05
    c4aa:	9e 81       	ldd	r25, Y+6	; 0x06
    c4ac:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	if(col1-> size > col2->size)
	{
		return newBool(false);
	}

	for(i = 0; i < col1->size; i++)
    c4b0:	8f 81       	ldd	r24, Y+7	; 0x07
    c4b2:	98 85       	ldd	r25, Y+8	; 0x08
    c4b4:	01 96       	adiw	r24, 0x01	; 1
    c4b6:	98 87       	std	Y+8, r25	; 0x08
    c4b8:	8f 83       	std	Y+7, r24	; 0x07
    c4ba:	eb 81       	ldd	r30, Y+3	; 0x03
    c4bc:	fc 81       	ldd	r31, Y+4	; 0x04
    c4be:	22 81       	ldd	r18, Z+2	; 0x02
    c4c0:	33 81       	ldd	r19, Z+3	; 0x03
    c4c2:	8f 81       	ldd	r24, Y+7	; 0x07
    c4c4:	98 85       	ldd	r25, Y+8	; 0x08
    c4c6:	82 17       	cp	r24, r18
    c4c8:	93 07       	cpc	r25, r19
    c4ca:	4c f2       	brlt	.-110    	; 0xc45e <vdmSetSubset+0x80>
			return newBool(false);
		}
		free(res);
	}

	return newBool(true);
    c4cc:	81 e0       	ldi	r24, 0x01	; 1
    c4ce:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    c4d2:	9e 87       	std	Y+14, r25	; 0x0e
    c4d4:	8d 87       	std	Y+13, r24	; 0x0d
    c4d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    c4d8:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    c4da:	2e 96       	adiw	r28, 0x0e	; 14
    c4dc:	0f b6       	in	r0, 0x3f	; 63
    c4de:	f8 94       	cli
    c4e0:	de bf       	out	0x3e, r29	; 62
    c4e2:	0f be       	out	0x3f, r0	; 63
    c4e4:	cd bf       	out	0x3d, r28	; 61
    c4e6:	cf 91       	pop	r28
    c4e8:	df 91       	pop	r29
    c4ea:	08 95       	ret

0000c4ec <vdmSetSubsetGC>:



TVP vdmSetSubsetGC(TVP set1, TVP set2, TVP *from)
{
    c4ec:	df 93       	push	r29
    c4ee:	cf 93       	push	r28
    c4f0:	cd b7       	in	r28, 0x3d	; 61
    c4f2:	de b7       	in	r29, 0x3e	; 62
    c4f4:	60 97       	sbiw	r28, 0x10	; 16
    c4f6:	0f b6       	in	r0, 0x3f	; 63
    c4f8:	f8 94       	cli
    c4fa:	de bf       	out	0x3e, r29	; 62
    c4fc:	0f be       	out	0x3f, r0	; 63
    c4fe:	cd bf       	out	0x3d, r28	; 61
    c500:	9a 87       	std	Y+10, r25	; 0x0a
    c502:	89 87       	std	Y+9, r24	; 0x09
    c504:	7c 87       	std	Y+12, r23	; 0x0c
    c506:	6b 87       	std	Y+11, r22	; 0x0b
    c508:	5e 87       	std	Y+14, r21	; 0x0e
    c50a:	4d 87       	std	Y+13, r20	; 0x0d
	int i;
	TVP res;

	ASSERT_CHECK(set1);
    c50c:	e9 85       	ldd	r30, Y+9	; 0x09
    c50e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c510:	80 81       	ld	r24, Z
    c512:	91 81       	ldd	r25, Z+1	; 0x01
    c514:	87 30       	cpi	r24, 0x07	; 7
    c516:	91 05       	cpc	r25, r1
    c518:	11 f0       	breq	.+4      	; 0xc51e <vdmSetSubsetGC+0x32>
    c51a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c51e:	eb 85       	ldd	r30, Y+11	; 0x0b
    c520:	fc 85       	ldd	r31, Y+12	; 0x0c
    c522:	80 81       	ld	r24, Z
    c524:	91 81       	ldd	r25, Z+1	; 0x01
    c526:	87 30       	cpi	r24, 0x07	; 7
    c528:	91 05       	cpc	r25, r1
    c52a:	11 f0       	breq	.+4      	; 0xc530 <vdmSetSubsetGC+0x44>
    c52c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c530:	e9 85       	ldd	r30, Y+9	; 0x09
    c532:	fa 85       	ldd	r31, Y+10	; 0x0a
    c534:	84 81       	ldd	r24, Z+4	; 0x04
    c536:	95 81       	ldd	r25, Z+5	; 0x05
    c538:	9c 83       	std	Y+4, r25	; 0x04
    c53a:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c53c:	eb 85       	ldd	r30, Y+11	; 0x0b
    c53e:	fc 85       	ldd	r31, Y+12	; 0x0c
    c540:	84 81       	ldd	r24, Z+4	; 0x04
    c542:	95 81       	ldd	r25, Z+5	; 0x05
    c544:	9a 83       	std	Y+2, r25	; 0x02
    c546:	89 83       	std	Y+1, r24	; 0x01

	if(col1-> size > col2->size)
    c548:	eb 81       	ldd	r30, Y+3	; 0x03
    c54a:	fc 81       	ldd	r31, Y+4	; 0x04
    c54c:	22 81       	ldd	r18, Z+2	; 0x02
    c54e:	33 81       	ldd	r19, Z+3	; 0x03
    c550:	e9 81       	ldd	r30, Y+1	; 0x01
    c552:	fa 81       	ldd	r31, Y+2	; 0x02
    c554:	82 81       	ldd	r24, Z+2	; 0x02
    c556:	93 81       	ldd	r25, Z+3	; 0x03
    c558:	82 17       	cp	r24, r18
    c55a:	93 07       	cpc	r25, r19
    c55c:	4c f4       	brge	.+18     	; 0xc570 <vdmSetSubsetGC+0x84>
	{
		return newBoolGC(false, from);
    c55e:	2d 85       	ldd	r18, Y+13	; 0x0d
    c560:	3e 85       	ldd	r19, Y+14	; 0x0e
    c562:	80 e0       	ldi	r24, 0x00	; 0
    c564:	b9 01       	movw	r22, r18
    c566:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    c56a:	98 8b       	std	Y+16, r25	; 0x10
    c56c:	8f 87       	std	Y+15, r24	; 0x0f
    c56e:	45 c0       	rjmp	.+138    	; 0xc5fa <vdmSetSubsetGC+0x10e>
	}

	for(i = 0; i < col1->size; i++)
    c570:	18 86       	std	Y+8, r1	; 0x08
    c572:	1f 82       	std	Y+7, r1	; 0x07
    c574:	31 c0       	rjmp	.+98     	; 0xc5d8 <vdmSetSubsetGC+0xec>
	{

		res = vdmSetMemberOf(set2, (col1->value)[i]);
    c576:	eb 81       	ldd	r30, Y+3	; 0x03
    c578:	fc 81       	ldd	r31, Y+4	; 0x04
    c57a:	20 81       	ld	r18, Z
    c57c:	31 81       	ldd	r19, Z+1	; 0x01
    c57e:	8f 81       	ldd	r24, Y+7	; 0x07
    c580:	98 85       	ldd	r25, Y+8	; 0x08
    c582:	88 0f       	add	r24, r24
    c584:	99 1f       	adc	r25, r25
    c586:	f9 01       	movw	r30, r18
    c588:	e8 0f       	add	r30, r24
    c58a:	f9 1f       	adc	r31, r25
    c58c:	20 81       	ld	r18, Z
    c58e:	31 81       	ldd	r19, Z+1	; 0x01
    c590:	8b 85       	ldd	r24, Y+11	; 0x0b
    c592:	9c 85       	ldd	r25, Y+12	; 0x0c
    c594:	b9 01       	movw	r22, r18
    c596:	0e 94 d8 5b 	call	0xb7b0	; 0xb7b0 <vdmSetMemberOf>
    c59a:	9e 83       	std	Y+6, r25	; 0x06
    c59c:	8d 83       	std	Y+5, r24	; 0x05
		if(!res->value.boolVal)
    c59e:	ed 81       	ldd	r30, Y+5	; 0x05
    c5a0:	fe 81       	ldd	r31, Y+6	; 0x06
    c5a2:	94 81       	ldd	r25, Z+4	; 0x04
    c5a4:	81 e0       	ldi	r24, 0x01	; 1
    c5a6:	89 27       	eor	r24, r25
    c5a8:	88 23       	and	r24, r24
    c5aa:	69 f0       	breq	.+26     	; 0xc5c6 <vdmSetSubsetGC+0xda>
		{
			free(res);
    c5ac:	8d 81       	ldd	r24, Y+5	; 0x05
    c5ae:	9e 81       	ldd	r25, Y+6	; 0x06
    c5b0:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
			return newBoolGC(false, from);
    c5b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    c5b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    c5b8:	80 e0       	ldi	r24, 0x00	; 0
    c5ba:	b9 01       	movw	r22, r18
    c5bc:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    c5c0:	98 8b       	std	Y+16, r25	; 0x10
    c5c2:	8f 87       	std	Y+15, r24	; 0x0f
    c5c4:	1a c0       	rjmp	.+52     	; 0xc5fa <vdmSetSubsetGC+0x10e>
		}
		free(res);
    c5c6:	8d 81       	ldd	r24, Y+5	; 0x05
    c5c8:	9e 81       	ldd	r25, Y+6	; 0x06
    c5ca:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
	if(col1-> size > col2->size)
	{
		return newBoolGC(false, from);
	}

	for(i = 0; i < col1->size; i++)
    c5ce:	8f 81       	ldd	r24, Y+7	; 0x07
    c5d0:	98 85       	ldd	r25, Y+8	; 0x08
    c5d2:	01 96       	adiw	r24, 0x01	; 1
    c5d4:	98 87       	std	Y+8, r25	; 0x08
    c5d6:	8f 83       	std	Y+7, r24	; 0x07
    c5d8:	eb 81       	ldd	r30, Y+3	; 0x03
    c5da:	fc 81       	ldd	r31, Y+4	; 0x04
    c5dc:	22 81       	ldd	r18, Z+2	; 0x02
    c5de:	33 81       	ldd	r19, Z+3	; 0x03
    c5e0:	8f 81       	ldd	r24, Y+7	; 0x07
    c5e2:	98 85       	ldd	r25, Y+8	; 0x08
    c5e4:	82 17       	cp	r24, r18
    c5e6:	93 07       	cpc	r25, r19
    c5e8:	34 f2       	brlt	.-116    	; 0xc576 <vdmSetSubsetGC+0x8a>
			return newBoolGC(false, from);
		}
		free(res);
	}

	return newBoolGC(true, from);
    c5ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    c5ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    c5ee:	81 e0       	ldi	r24, 0x01	; 1
    c5f0:	b9 01       	movw	r22, r18
    c5f2:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    c5f6:	98 8b       	std	Y+16, r25	; 0x10
    c5f8:	8f 87       	std	Y+15, r24	; 0x0f
    c5fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    c5fc:	98 89       	ldd	r25, Y+16	; 0x10
}
    c5fe:	60 96       	adiw	r28, 0x10	; 16
    c600:	0f b6       	in	r0, 0x3f	; 63
    c602:	f8 94       	cli
    c604:	de bf       	out	0x3e, r29	; 62
    c606:	0f be       	out	0x3f, r0	; 63
    c608:	cd bf       	out	0x3d, r28	; 61
    c60a:	cf 91       	pop	r28
    c60c:	df 91       	pop	r29
    c60e:	08 95       	ret

0000c610 <vdmSetProperSubset>:



TVP vdmSetProperSubset(TVP set1, TVP set2)
{
    c610:	df 93       	push	r29
    c612:	cf 93       	push	r28
    c614:	cd b7       	in	r28, 0x3d	; 61
    c616:	de b7       	in	r29, 0x3e	; 62
    c618:	2a 97       	sbiw	r28, 0x0a	; 10
    c61a:	0f b6       	in	r0, 0x3f	; 63
    c61c:	f8 94       	cli
    c61e:	de bf       	out	0x3e, r29	; 62
    c620:	0f be       	out	0x3f, r0	; 63
    c622:	cd bf       	out	0x3d, r28	; 61
    c624:	9e 83       	std	Y+6, r25	; 0x06
    c626:	8d 83       	std	Y+5, r24	; 0x05
    c628:	78 87       	std	Y+8, r23	; 0x08
    c62a:	6f 83       	std	Y+7, r22	; 0x07
	ASSERT_CHECK(set1);
    c62c:	ed 81       	ldd	r30, Y+5	; 0x05
    c62e:	fe 81       	ldd	r31, Y+6	; 0x06
    c630:	80 81       	ld	r24, Z
    c632:	91 81       	ldd	r25, Z+1	; 0x01
    c634:	87 30       	cpi	r24, 0x07	; 7
    c636:	91 05       	cpc	r25, r1
    c638:	11 f0       	breq	.+4      	; 0xc63e <vdmSetProperSubset+0x2e>
    c63a:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c63e:	ef 81       	ldd	r30, Y+7	; 0x07
    c640:	f8 85       	ldd	r31, Y+8	; 0x08
    c642:	80 81       	ld	r24, Z
    c644:	91 81       	ldd	r25, Z+1	; 0x01
    c646:	87 30       	cpi	r24, 0x07	; 7
    c648:	91 05       	cpc	r25, r1
    c64a:	11 f0       	breq	.+4      	; 0xc650 <vdmSetProperSubset+0x40>
    c64c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c650:	ed 81       	ldd	r30, Y+5	; 0x05
    c652:	fe 81       	ldd	r31, Y+6	; 0x06
    c654:	84 81       	ldd	r24, Z+4	; 0x04
    c656:	95 81       	ldd	r25, Z+5	; 0x05
    c658:	9c 83       	std	Y+4, r25	; 0x04
    c65a:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c65c:	ef 81       	ldd	r30, Y+7	; 0x07
    c65e:	f8 85       	ldd	r31, Y+8	; 0x08
    c660:	84 81       	ldd	r24, Z+4	; 0x04
    c662:	95 81       	ldd	r25, Z+5	; 0x05
    c664:	9a 83       	std	Y+2, r25	; 0x02
    c666:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size >= col2->size)
    c668:	eb 81       	ldd	r30, Y+3	; 0x03
    c66a:	fc 81       	ldd	r31, Y+4	; 0x04
    c66c:	22 81       	ldd	r18, Z+2	; 0x02
    c66e:	33 81       	ldd	r19, Z+3	; 0x03
    c670:	e9 81       	ldd	r30, Y+1	; 0x01
    c672:	fa 81       	ldd	r31, Y+2	; 0x02
    c674:	82 81       	ldd	r24, Z+2	; 0x02
    c676:	93 81       	ldd	r25, Z+3	; 0x03
    c678:	28 17       	cp	r18, r24
    c67a:	39 07       	cpc	r19, r25
    c67c:	34 f0       	brlt	.+12     	; 0xc68a <vdmSetProperSubset+0x7a>
	{
		return newBool(false);
    c67e:	80 e0       	ldi	r24, 0x00	; 0
    c680:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
    c684:	9a 87       	std	Y+10, r25	; 0x0a
    c686:	89 87       	std	Y+9, r24	; 0x09
    c688:	09 c0       	rjmp	.+18     	; 0xc69c <vdmSetProperSubset+0x8c>
	}

	return vdmSetSubset(set1, set2);
    c68a:	8d 81       	ldd	r24, Y+5	; 0x05
    c68c:	9e 81       	ldd	r25, Y+6	; 0x06
    c68e:	2f 81       	ldd	r18, Y+7	; 0x07
    c690:	38 85       	ldd	r19, Y+8	; 0x08
    c692:	b9 01       	movw	r22, r18
    c694:	0e 94 ef 61 	call	0xc3de	; 0xc3de <vdmSetSubset>
    c698:	9a 87       	std	Y+10, r25	; 0x0a
    c69a:	89 87       	std	Y+9, r24	; 0x09
    c69c:	89 85       	ldd	r24, Y+9	; 0x09
    c69e:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    c6a0:	2a 96       	adiw	r28, 0x0a	; 10
    c6a2:	0f b6       	in	r0, 0x3f	; 63
    c6a4:	f8 94       	cli
    c6a6:	de bf       	out	0x3e, r29	; 62
    c6a8:	0f be       	out	0x3f, r0	; 63
    c6aa:	cd bf       	out	0x3d, r28	; 61
    c6ac:	cf 91       	pop	r28
    c6ae:	df 91       	pop	r29
    c6b0:	08 95       	ret

0000c6b2 <vdmSetProperSubsetGC>:


TVP vdmSetProperSubsetGC(TVP set1, TVP set2, TVP *from)
{
    c6b2:	df 93       	push	r29
    c6b4:	cf 93       	push	r28
    c6b6:	cd b7       	in	r28, 0x3d	; 61
    c6b8:	de b7       	in	r29, 0x3e	; 62
    c6ba:	2c 97       	sbiw	r28, 0x0c	; 12
    c6bc:	0f b6       	in	r0, 0x3f	; 63
    c6be:	f8 94       	cli
    c6c0:	de bf       	out	0x3e, r29	; 62
    c6c2:	0f be       	out	0x3f, r0	; 63
    c6c4:	cd bf       	out	0x3d, r28	; 61
    c6c6:	9e 83       	std	Y+6, r25	; 0x06
    c6c8:	8d 83       	std	Y+5, r24	; 0x05
    c6ca:	78 87       	std	Y+8, r23	; 0x08
    c6cc:	6f 83       	std	Y+7, r22	; 0x07
    c6ce:	5a 87       	std	Y+10, r21	; 0x0a
    c6d0:	49 87       	std	Y+9, r20	; 0x09
	ASSERT_CHECK(set1);
    c6d2:	ed 81       	ldd	r30, Y+5	; 0x05
    c6d4:	fe 81       	ldd	r31, Y+6	; 0x06
    c6d6:	80 81       	ld	r24, Z
    c6d8:	91 81       	ldd	r25, Z+1	; 0x01
    c6da:	87 30       	cpi	r24, 0x07	; 7
    c6dc:	91 05       	cpc	r25, r1
    c6de:	11 f0       	breq	.+4      	; 0xc6e4 <vdmSetProperSubsetGC+0x32>
    c6e0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c6e4:	ef 81       	ldd	r30, Y+7	; 0x07
    c6e6:	f8 85       	ldd	r31, Y+8	; 0x08
    c6e8:	80 81       	ld	r24, Z
    c6ea:	91 81       	ldd	r25, Z+1	; 0x01
    c6ec:	87 30       	cpi	r24, 0x07	; 7
    c6ee:	91 05       	cpc	r25, r1
    c6f0:	11 f0       	breq	.+4      	; 0xc6f6 <vdmSetProperSubsetGC+0x44>
    c6f2:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col1, set1);
    c6f6:	ed 81       	ldd	r30, Y+5	; 0x05
    c6f8:	fe 81       	ldd	r31, Y+6	; 0x06
    c6fa:	84 81       	ldd	r24, Z+4	; 0x04
    c6fc:	95 81       	ldd	r25, Z+5	; 0x05
    c6fe:	9c 83       	std	Y+4, r25	; 0x04
    c700:	8b 83       	std	Y+3, r24	; 0x03
	UNWRAP_COLLECTION(col2, set2);
    c702:	ef 81       	ldd	r30, Y+7	; 0x07
    c704:	f8 85       	ldd	r31, Y+8	; 0x08
    c706:	84 81       	ldd	r24, Z+4	; 0x04
    c708:	95 81       	ldd	r25, Z+5	; 0x05
    c70a:	9a 83       	std	Y+2, r25	; 0x02
    c70c:	89 83       	std	Y+1, r24	; 0x01

	if(col1->size >= col2->size)
    c70e:	eb 81       	ldd	r30, Y+3	; 0x03
    c710:	fc 81       	ldd	r31, Y+4	; 0x04
    c712:	22 81       	ldd	r18, Z+2	; 0x02
    c714:	33 81       	ldd	r19, Z+3	; 0x03
    c716:	e9 81       	ldd	r30, Y+1	; 0x01
    c718:	fa 81       	ldd	r31, Y+2	; 0x02
    c71a:	82 81       	ldd	r24, Z+2	; 0x02
    c71c:	93 81       	ldd	r25, Z+3	; 0x03
    c71e:	28 17       	cp	r18, r24
    c720:	39 07       	cpc	r19, r25
    c722:	4c f0       	brlt	.+18     	; 0xc736 <vdmSetProperSubsetGC+0x84>
	{
		return newBoolGC(false, from);
    c724:	29 85       	ldd	r18, Y+9	; 0x09
    c726:	3a 85       	ldd	r19, Y+10	; 0x0a
    c728:	80 e0       	ldi	r24, 0x00	; 0
    c72a:	b9 01       	movw	r22, r18
    c72c:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <newBoolGC>
    c730:	9c 87       	std	Y+12, r25	; 0x0c
    c732:	8b 87       	std	Y+11, r24	; 0x0b
    c734:	0b c0       	rjmp	.+22     	; 0xc74c <vdmSetProperSubsetGC+0x9a>
	}

	return vdmSetSubsetGC(set1, set2, from);
    c736:	8d 81       	ldd	r24, Y+5	; 0x05
    c738:	9e 81       	ldd	r25, Y+6	; 0x06
    c73a:	2f 81       	ldd	r18, Y+7	; 0x07
    c73c:	38 85       	ldd	r19, Y+8	; 0x08
    c73e:	49 85       	ldd	r20, Y+9	; 0x09
    c740:	5a 85       	ldd	r21, Y+10	; 0x0a
    c742:	b9 01       	movw	r22, r18
    c744:	0e 94 76 62 	call	0xc4ec	; 0xc4ec <vdmSetSubsetGC>
    c748:	9c 87       	std	Y+12, r25	; 0x0c
    c74a:	8b 87       	std	Y+11, r24	; 0x0b
    c74c:	8b 85       	ldd	r24, Y+11	; 0x0b
    c74e:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    c750:	2c 96       	adiw	r28, 0x0c	; 12
    c752:	0f b6       	in	r0, 0x3f	; 63
    c754:	f8 94       	cli
    c756:	de bf       	out	0x3e, r29	; 62
    c758:	0f be       	out	0x3f, r0	; 63
    c75a:	cd bf       	out	0x3d, r28	; 61
    c75c:	cf 91       	pop	r28
    c75e:	df 91       	pop	r29
    c760:	08 95       	ret

0000c762 <vdmSetEquals>:



TVP vdmSetEquals(TVP set1, TVP set2)
{
    c762:	df 93       	push	r29
    c764:	cf 93       	push	r28
    c766:	cd b7       	in	r28, 0x3d	; 61
    c768:	de b7       	in	r29, 0x3e	; 62
    c76a:	2b 97       	sbiw	r28, 0x0b	; 11
    c76c:	0f b6       	in	r0, 0x3f	; 63
    c76e:	f8 94       	cli
    c770:	de bf       	out	0x3e, r29	; 62
    c772:	0f be       	out	0x3f, r0	; 63
    c774:	cd bf       	out	0x3d, r28	; 61
    c776:	9f 83       	std	Y+7, r25	; 0x07
    c778:	8e 83       	std	Y+6, r24	; 0x06
    c77a:	79 87       	std	Y+9, r23	; 0x09
    c77c:	68 87       	std	Y+8, r22	; 0x08
	ASSERT_CHECK(set1);
    c77e:	ee 81       	ldd	r30, Y+6	; 0x06
    c780:	ff 81       	ldd	r31, Y+7	; 0x07
    c782:	80 81       	ld	r24, Z
    c784:	91 81       	ldd	r25, Z+1	; 0x01
    c786:	87 30       	cpi	r24, 0x07	; 7
    c788:	91 05       	cpc	r25, r1
    c78a:	11 f0       	breq	.+4      	; 0xc790 <vdmSetEquals+0x2e>
    c78c:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c790:	e8 85       	ldd	r30, Y+8	; 0x08
    c792:	f9 85       	ldd	r31, Y+9	; 0x09
    c794:	80 81       	ld	r24, Z
    c796:	91 81       	ldd	r25, Z+1	; 0x01
    c798:	87 30       	cpi	r24, 0x07	; 7
    c79a:	91 05       	cpc	r25, r1
    c79c:	11 f0       	breq	.+4      	; 0xc7a2 <vdmSetEquals+0x40>
    c79e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	TVP subset12Res;
	TVP subset21Res;
	bool subsetRes;

	/* Check mutual inclusion.  */
	subset12Res = vdmSetSubset(set1, set2);
    c7a2:	8e 81       	ldd	r24, Y+6	; 0x06
    c7a4:	9f 81       	ldd	r25, Y+7	; 0x07
    c7a6:	28 85       	ldd	r18, Y+8	; 0x08
    c7a8:	39 85       	ldd	r19, Y+9	; 0x09
    c7aa:	b9 01       	movw	r22, r18
    c7ac:	0e 94 ef 61 	call	0xc3de	; 0xc3de <vdmSetSubset>
    c7b0:	9d 83       	std	Y+5, r25	; 0x05
    c7b2:	8c 83       	std	Y+4, r24	; 0x04
	subset21Res = vdmSetSubset(set2, set1);
    c7b4:	88 85       	ldd	r24, Y+8	; 0x08
    c7b6:	99 85       	ldd	r25, Y+9	; 0x09
    c7b8:	2e 81       	ldd	r18, Y+6	; 0x06
    c7ba:	3f 81       	ldd	r19, Y+7	; 0x07
    c7bc:	b9 01       	movw	r22, r18
    c7be:	0e 94 ef 61 	call	0xc3de	; 0xc3de <vdmSetSubset>
    c7c2:	9b 83       	std	Y+3, r25	; 0x03
    c7c4:	8a 83       	std	Y+2, r24	; 0x02

	subsetRes = subset12Res->value.boolVal && subset21Res->value.boolVal;
    c7c6:	ec 81       	ldd	r30, Y+4	; 0x04
    c7c8:	fd 81       	ldd	r31, Y+5	; 0x05
    c7ca:	94 81       	ldd	r25, Z+4	; 0x04
    c7cc:	81 e0       	ldi	r24, 0x01	; 1
    c7ce:	89 27       	eor	r24, r25
    c7d0:	88 23       	and	r24, r24
    c7d2:	61 f4       	brne	.+24     	; 0xc7ec <vdmSetEquals+0x8a>
    c7d4:	ea 81       	ldd	r30, Y+2	; 0x02
    c7d6:	fb 81       	ldd	r31, Y+3	; 0x03
    c7d8:	94 81       	ldd	r25, Z+4	; 0x04
    c7da:	81 e0       	ldi	r24, 0x01	; 1
    c7dc:	89 27       	eor	r24, r25
    c7de:	88 23       	and	r24, r24
    c7e0:	29 f4       	brne	.+10     	; 0xc7ec <vdmSetEquals+0x8a>
    c7e2:	81 e0       	ldi	r24, 0x01	; 1
    c7e4:	90 e0       	ldi	r25, 0x00	; 0
    c7e6:	9b 87       	std	Y+11, r25	; 0x0b
    c7e8:	8a 87       	std	Y+10, r24	; 0x0a
    c7ea:	02 c0       	rjmp	.+4      	; 0xc7f0 <vdmSetEquals+0x8e>
    c7ec:	1b 86       	std	Y+11, r1	; 0x0b
    c7ee:	1a 86       	std	Y+10, r1	; 0x0a
    c7f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    c7f2:	99 83       	std	Y+1, r25	; 0x01
	vdmFree(subset12Res);
    c7f4:	8c 81       	ldd	r24, Y+4	; 0x04
    c7f6:	9d 81       	ldd	r25, Y+5	; 0x05
    c7f8:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	vdmFree(subset21Res);
    c7fc:	8a 81       	ldd	r24, Y+2	; 0x02
    c7fe:	9b 81       	ldd	r25, Y+3	; 0x03
    c800:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>

	return newBool(subsetRes);
    c804:	89 81       	ldd	r24, Y+1	; 0x01
    c806:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <newBool>
}
    c80a:	2b 96       	adiw	r28, 0x0b	; 11
    c80c:	0f b6       	in	r0, 0x3f	; 63
    c80e:	f8 94       	cli
    c810:	de bf       	out	0x3e, r29	; 62
    c812:	0f be       	out	0x3f, r0	; 63
    c814:	cd bf       	out	0x3d, r28	; 61
    c816:	cf 91       	pop	r28
    c818:	df 91       	pop	r29
    c81a:	08 95       	ret

0000c81c <vdmSetNotEquals>:


TVP vdmSetNotEquals(TVP set1, TVP set2)
{
    c81c:	df 93       	push	r29
    c81e:	cf 93       	push	r28
    c820:	00 d0       	rcall	.+0      	; 0xc822 <vdmSetNotEquals+0x6>
    c822:	00 d0       	rcall	.+0      	; 0xc824 <vdmSetNotEquals+0x8>
    c824:	cd b7       	in	r28, 0x3d	; 61
    c826:	de b7       	in	r29, 0x3e	; 62
    c828:	9a 83       	std	Y+2, r25	; 0x02
    c82a:	89 83       	std	Y+1, r24	; 0x01
    c82c:	7c 83       	std	Y+4, r23	; 0x04
    c82e:	6b 83       	std	Y+3, r22	; 0x03
	ASSERT_CHECK(set1);
    c830:	e9 81       	ldd	r30, Y+1	; 0x01
    c832:	fa 81       	ldd	r31, Y+2	; 0x02
    c834:	80 81       	ld	r24, Z
    c836:	91 81       	ldd	r25, Z+1	; 0x01
    c838:	87 30       	cpi	r24, 0x07	; 7
    c83a:	91 05       	cpc	r25, r1
    c83c:	11 f0       	breq	.+4      	; 0xc842 <vdmSetNotEquals+0x26>
    c83e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c842:	eb 81       	ldd	r30, Y+3	; 0x03
    c844:	fc 81       	ldd	r31, Y+4	; 0x04
    c846:	80 81       	ld	r24, Z
    c848:	91 81       	ldd	r25, Z+1	; 0x01
    c84a:	87 30       	cpi	r24, 0x07	; 7
    c84c:	91 05       	cpc	r25, r1
    c84e:	11 f0       	breq	.+4      	; 0xc854 <vdmSetNotEquals+0x38>
    c850:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	return vdmInEquals(set1, set2);
    c854:	89 81       	ldd	r24, Y+1	; 0x01
    c856:	9a 81       	ldd	r25, Y+2	; 0x02
    c858:	2b 81       	ldd	r18, Y+3	; 0x03
    c85a:	3c 81       	ldd	r19, Y+4	; 0x04
    c85c:	b9 01       	movw	r22, r18
    c85e:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <vdmInEquals>
}
    c862:	0f 90       	pop	r0
    c864:	0f 90       	pop	r0
    c866:	0f 90       	pop	r0
    c868:	0f 90       	pop	r0
    c86a:	cf 91       	pop	r28
    c86c:	df 91       	pop	r29
    c86e:	08 95       	ret

0000c870 <vdmSetNotEqualsGC>:


TVP vdmSetNotEqualsGC(TVP set1, TVP set2, TVP *from)
{
    c870:	df 93       	push	r29
    c872:	cf 93       	push	r28
    c874:	00 d0       	rcall	.+0      	; 0xc876 <vdmSetNotEqualsGC+0x6>
    c876:	00 d0       	rcall	.+0      	; 0xc878 <vdmSetNotEqualsGC+0x8>
    c878:	00 d0       	rcall	.+0      	; 0xc87a <vdmSetNotEqualsGC+0xa>
    c87a:	cd b7       	in	r28, 0x3d	; 61
    c87c:	de b7       	in	r29, 0x3e	; 62
    c87e:	9a 83       	std	Y+2, r25	; 0x02
    c880:	89 83       	std	Y+1, r24	; 0x01
    c882:	7c 83       	std	Y+4, r23	; 0x04
    c884:	6b 83       	std	Y+3, r22	; 0x03
    c886:	5e 83       	std	Y+6, r21	; 0x06
    c888:	4d 83       	std	Y+5, r20	; 0x05
	ASSERT_CHECK(set1);
    c88a:	e9 81       	ldd	r30, Y+1	; 0x01
    c88c:	fa 81       	ldd	r31, Y+2	; 0x02
    c88e:	80 81       	ld	r24, Z
    c890:	91 81       	ldd	r25, Z+1	; 0x01
    c892:	87 30       	cpi	r24, 0x07	; 7
    c894:	91 05       	cpc	r25, r1
    c896:	11 f0       	breq	.+4      	; 0xc89c <vdmSetNotEqualsGC+0x2c>
    c898:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	ASSERT_CHECK(set2);
    c89c:	eb 81       	ldd	r30, Y+3	; 0x03
    c89e:	fc 81       	ldd	r31, Y+4	; 0x04
    c8a0:	80 81       	ld	r24, Z
    c8a2:	91 81       	ldd	r25, Z+1	; 0x01
    c8a4:	87 30       	cpi	r24, 0x07	; 7
    c8a6:	91 05       	cpc	r25, r1
    c8a8:	11 f0       	breq	.+4      	; 0xc8ae <vdmSetNotEqualsGC+0x3e>
    c8aa:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	return vdmInEqualsGC(set1, set2, from);
    c8ae:	89 81       	ldd	r24, Y+1	; 0x01
    c8b0:	9a 81       	ldd	r25, Y+2	; 0x02
    c8b2:	2b 81       	ldd	r18, Y+3	; 0x03
    c8b4:	3c 81       	ldd	r19, Y+4	; 0x04
    c8b6:	4d 81       	ldd	r20, Y+5	; 0x05
    c8b8:	5e 81       	ldd	r21, Y+6	; 0x06
    c8ba:	b9 01       	movw	r22, r18
    c8bc:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <vdmInEqualsGC>
}
    c8c0:	26 96       	adiw	r28, 0x06	; 6
    c8c2:	0f b6       	in	r0, 0x3f	; 63
    c8c4:	f8 94       	cli
    c8c6:	de bf       	out	0x3e, r29	; 62
    c8c8:	0f be       	out	0x3f, r0	; 63
    c8ca:	cd bf       	out	0x3d, r28	; 61
    c8cc:	cf 91       	pop	r28
    c8ce:	df 91       	pop	r29
    c8d0:	08 95       	ret

0000c8d2 <vdmSetCard>:



TVP vdmSetCard(TVP set)
{
    c8d2:	df 93       	push	r29
    c8d4:	cf 93       	push	r28
    c8d6:	00 d0       	rcall	.+0      	; 0xc8d8 <vdmSetCard+0x6>
    c8d8:	00 d0       	rcall	.+0      	; 0xc8da <vdmSetCard+0x8>
    c8da:	cd b7       	in	r28, 0x3d	; 61
    c8dc:	de b7       	in	r29, 0x3e	; 62
    c8de:	9c 83       	std	Y+4, r25	; 0x04
    c8e0:	8b 83       	std	Y+3, r24	; 0x03
	ASSERT_CHECK(set);
    c8e2:	eb 81       	ldd	r30, Y+3	; 0x03
    c8e4:	fc 81       	ldd	r31, Y+4	; 0x04
    c8e6:	80 81       	ld	r24, Z
    c8e8:	91 81       	ldd	r25, Z+1	; 0x01
    c8ea:	87 30       	cpi	r24, 0x07	; 7
    c8ec:	91 05       	cpc	r25, r1
    c8ee:	11 f0       	breq	.+4      	; 0xc8f4 <vdmSetCard+0x22>
    c8f0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col, set);
    c8f4:	eb 81       	ldd	r30, Y+3	; 0x03
    c8f6:	fc 81       	ldd	r31, Y+4	; 0x04
    c8f8:	84 81       	ldd	r24, Z+4	; 0x04
    c8fa:	95 81       	ldd	r25, Z+5	; 0x05
    c8fc:	9a 83       	std	Y+2, r25	; 0x02
    c8fe:	89 83       	std	Y+1, r24	; 0x01

	return newInt(col->size);
    c900:	e9 81       	ldd	r30, Y+1	; 0x01
    c902:	fa 81       	ldd	r31, Y+2	; 0x02
    c904:	82 81       	ldd	r24, Z+2	; 0x02
    c906:	93 81       	ldd	r25, Z+3	; 0x03
    c908:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <newInt>
}
    c90c:	0f 90       	pop	r0
    c90e:	0f 90       	pop	r0
    c910:	0f 90       	pop	r0
    c912:	0f 90       	pop	r0
    c914:	cf 91       	pop	r28
    c916:	df 91       	pop	r29
    c918:	08 95       	ret

0000c91a <vdmSetCardGC>:


TVP vdmSetCardGC(TVP set, TVP *from)
{
    c91a:	df 93       	push	r29
    c91c:	cf 93       	push	r28
    c91e:	00 d0       	rcall	.+0      	; 0xc920 <vdmSetCardGC+0x6>
    c920:	00 d0       	rcall	.+0      	; 0xc922 <vdmSetCardGC+0x8>
    c922:	00 d0       	rcall	.+0      	; 0xc924 <vdmSetCardGC+0xa>
    c924:	cd b7       	in	r28, 0x3d	; 61
    c926:	de b7       	in	r29, 0x3e	; 62
    c928:	9c 83       	std	Y+4, r25	; 0x04
    c92a:	8b 83       	std	Y+3, r24	; 0x03
    c92c:	7e 83       	std	Y+6, r23	; 0x06
    c92e:	6d 83       	std	Y+5, r22	; 0x05
	ASSERT_CHECK(set);
    c930:	eb 81       	ldd	r30, Y+3	; 0x03
    c932:	fc 81       	ldd	r31, Y+4	; 0x04
    c934:	80 81       	ld	r24, Z
    c936:	91 81       	ldd	r25, Z+1	; 0x01
    c938:	87 30       	cpi	r24, 0x07	; 7
    c93a:	91 05       	cpc	r25, r1
    c93c:	11 f0       	breq	.+4      	; 0xc942 <vdmSetCardGC+0x28>
    c93e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	UNWRAP_COLLECTION(col, set);
    c942:	eb 81       	ldd	r30, Y+3	; 0x03
    c944:	fc 81       	ldd	r31, Y+4	; 0x04
    c946:	84 81       	ldd	r24, Z+4	; 0x04
    c948:	95 81       	ldd	r25, Z+5	; 0x05
    c94a:	9a 83       	std	Y+2, r25	; 0x02
    c94c:	89 83       	std	Y+1, r24	; 0x01

	return newIntGC(col->size, from);
    c94e:	e9 81       	ldd	r30, Y+1	; 0x01
    c950:	fa 81       	ldd	r31, Y+2	; 0x02
    c952:	82 81       	ldd	r24, Z+2	; 0x02
    c954:	93 81       	ldd	r25, Z+3	; 0x03
    c956:	2d 81       	ldd	r18, Y+5	; 0x05
    c958:	3e 81       	ldd	r19, Y+6	; 0x06
    c95a:	b9 01       	movw	r22, r18
    c95c:	0e 94 b1 4a 	call	0x9562	; 0x9562 <newIntGC>
}
    c960:	26 96       	adiw	r28, 0x06	; 6
    c962:	0f b6       	in	r0, 0x3f	; 63
    c964:	f8 94       	cli
    c966:	de bf       	out	0x3e, r29	; 62
    c968:	0f be       	out	0x3f, r0	; 63
    c96a:	cd bf       	out	0x3d, r28	; 61
    c96c:	cf 91       	pop	r28
    c96e:	df 91       	pop	r29
    c970:	08 95       	ret

0000c972 <vdmSetDunion>:



TVP vdmSetDunion(TVP set)
{
    c972:	df 93       	push	r29
    c974:	cf 93       	push	r28
    c976:	cd b7       	in	r28, 0x3d	; 61
    c978:	de b7       	in	r29, 0x3e	; 62
    c97a:	2a 97       	sbiw	r28, 0x0a	; 10
    c97c:	0f b6       	in	r0, 0x3f	; 63
    c97e:	f8 94       	cli
    c980:	de bf       	out	0x3e, r29	; 62
    c982:	0f be       	out	0x3f, r0	; 63
    c984:	cd bf       	out	0x3d, r28	; 61
    c986:	9a 87       	std	Y+10, r25	; 0x0a
    c988:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP unionset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    c98a:	e9 85       	ldd	r30, Y+9	; 0x09
    c98c:	fa 85       	ldd	r31, Y+10	; 0x0a
    c98e:	80 81       	ld	r24, Z
    c990:	91 81       	ldd	r25, Z+1	; 0x01
    c992:	87 30       	cpi	r24, 0x07	; 7
    c994:	91 05       	cpc	r25, r1
    c996:	11 f0       	breq	.+4      	; 0xc99c <vdmSetDunion+0x2a>
    c998:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col, set);
    c99c:	e9 85       	ldd	r30, Y+9	; 0x09
    c99e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c9a0:	84 81       	ldd	r24, Z+4	; 0x04
    c9a2:	95 81       	ldd	r25, Z+5	; 0x05
    c9a4:	9a 83       	std	Y+2, r25	; 0x02
    c9a6:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    c9a8:	18 86       	std	Y+8, r1	; 0x08
    c9aa:	1f 82       	std	Y+7, r1	; 0x07
    c9ac:	1a c0       	rjmp	.+52     	; 0xc9e2 <vdmSetDunion+0x70>
	{
		ASSERT_CHECK((col->value)[i]);
    c9ae:	e9 81       	ldd	r30, Y+1	; 0x01
    c9b0:	fa 81       	ldd	r31, Y+2	; 0x02
    c9b2:	20 81       	ld	r18, Z
    c9b4:	31 81       	ldd	r19, Z+1	; 0x01
    c9b6:	8f 81       	ldd	r24, Y+7	; 0x07
    c9b8:	98 85       	ldd	r25, Y+8	; 0x08
    c9ba:	88 0f       	add	r24, r24
    c9bc:	99 1f       	adc	r25, r25
    c9be:	f9 01       	movw	r30, r18
    c9c0:	e8 0f       	add	r30, r24
    c9c2:	f9 1f       	adc	r31, r25
    c9c4:	01 90       	ld	r0, Z+
    c9c6:	f0 81       	ld	r31, Z
    c9c8:	e0 2d       	mov	r30, r0
    c9ca:	80 81       	ld	r24, Z
    c9cc:	91 81       	ldd	r25, Z+1	; 0x01
    c9ce:	87 30       	cpi	r24, 0x07	; 7
    c9d0:	91 05       	cpc	r25, r1
    c9d2:	11 f0       	breq	.+4      	; 0xc9d8 <vdmSetDunion+0x66>
    c9d4:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    c9d8:	8f 81       	ldd	r24, Y+7	; 0x07
    c9da:	98 85       	ldd	r25, Y+8	; 0x08
    c9dc:	01 96       	adiw	r24, 0x01	; 1
    c9de:	98 87       	std	Y+8, r25	; 0x08
    c9e0:	8f 83       	std	Y+7, r24	; 0x07
    c9e2:	e9 81       	ldd	r30, Y+1	; 0x01
    c9e4:	fa 81       	ldd	r31, Y+2	; 0x02
    c9e6:	22 81       	ldd	r18, Z+2	; 0x02
    c9e8:	33 81       	ldd	r19, Z+3	; 0x03
    c9ea:	8f 81       	ldd	r24, Y+7	; 0x07
    c9ec:	98 85       	ldd	r25, Y+8	; 0x08
    c9ee:	82 17       	cp	r24, r18
    c9f0:	93 07       	cpc	r25, r19
    c9f2:	ec f2       	brlt	.-70     	; 0xc9ae <vdmSetDunion+0x3c>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	unionset = newSetVar(0, NULL);
    c9f4:	00 d0       	rcall	.+0      	; 0xc9f6 <vdmSetDunion+0x84>
    c9f6:	00 d0       	rcall	.+0      	; 0xc9f8 <vdmSetDunion+0x86>
    c9f8:	ed b7       	in	r30, 0x3d	; 61
    c9fa:	fe b7       	in	r31, 0x3e	; 62
    c9fc:	31 96       	adiw	r30, 0x01	; 1
    c9fe:	11 82       	std	Z+1, r1	; 0x01
    ca00:	10 82       	st	Z, r1
    ca02:	13 82       	std	Z+3, r1	; 0x03
    ca04:	12 82       	std	Z+2, r1	; 0x02
    ca06:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    ca0a:	0f 90       	pop	r0
    ca0c:	0f 90       	pop	r0
    ca0e:	0f 90       	pop	r0
    ca10:	0f 90       	pop	r0
    ca12:	9e 83       	std	Y+6, r25	; 0x06
    ca14:	8d 83       	std	Y+5, r24	; 0x05

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    ca16:	18 86       	std	Y+8, r1	; 0x08
    ca18:	1f 82       	std	Y+7, r1	; 0x07
    ca1a:	21 c0       	rjmp	.+66     	; 0xca5e <vdmSetDunion+0xec>
	{
		set1 = vdmSetUnion(unionset, (col->value)[i]);
    ca1c:	e9 81       	ldd	r30, Y+1	; 0x01
    ca1e:	fa 81       	ldd	r31, Y+2	; 0x02
    ca20:	20 81       	ld	r18, Z
    ca22:	31 81       	ldd	r19, Z+1	; 0x01
    ca24:	8f 81       	ldd	r24, Y+7	; 0x07
    ca26:	98 85       	ldd	r25, Y+8	; 0x08
    ca28:	88 0f       	add	r24, r24
    ca2a:	99 1f       	adc	r25, r25
    ca2c:	f9 01       	movw	r30, r18
    ca2e:	e8 0f       	add	r30, r24
    ca30:	f9 1f       	adc	r31, r25
    ca32:	20 81       	ld	r18, Z
    ca34:	31 81       	ldd	r19, Z+1	; 0x01
    ca36:	8d 81       	ldd	r24, Y+5	; 0x05
    ca38:	9e 81       	ldd	r25, Y+6	; 0x06
    ca3a:	b9 01       	movw	r22, r18
    ca3c:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    ca40:	9c 83       	std	Y+4, r25	; 0x04
    ca42:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(unionset);
    ca44:	8d 81       	ldd	r24, Y+5	; 0x05
    ca46:	9e 81       	ldd	r25, Y+6	; 0x06
    ca48:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		unionset = set1;
    ca4c:	8b 81       	ldd	r24, Y+3	; 0x03
    ca4e:	9c 81       	ldd	r25, Y+4	; 0x04
    ca50:	9e 83       	std	Y+6, r25	; 0x06
    ca52:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	unionset = newSetVar(0, NULL);

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    ca54:	8f 81       	ldd	r24, Y+7	; 0x07
    ca56:	98 85       	ldd	r25, Y+8	; 0x08
    ca58:	01 96       	adiw	r24, 0x01	; 1
    ca5a:	98 87       	std	Y+8, r25	; 0x08
    ca5c:	8f 83       	std	Y+7, r24	; 0x07
    ca5e:	e9 81       	ldd	r30, Y+1	; 0x01
    ca60:	fa 81       	ldd	r31, Y+2	; 0x02
    ca62:	22 81       	ldd	r18, Z+2	; 0x02
    ca64:	33 81       	ldd	r19, Z+3	; 0x03
    ca66:	8f 81       	ldd	r24, Y+7	; 0x07
    ca68:	98 85       	ldd	r25, Y+8	; 0x08
    ca6a:	82 17       	cp	r24, r18
    ca6c:	93 07       	cpc	r25, r19
    ca6e:	b4 f2       	brlt	.-84     	; 0xca1c <vdmSetDunion+0xaa>
		set1 = vdmSetUnion(unionset, (col->value)[i]);
		vdmFree(unionset);
		unionset = set1;
	}

	return unionset;
    ca70:	8d 81       	ldd	r24, Y+5	; 0x05
    ca72:	9e 81       	ldd	r25, Y+6	; 0x06
}
    ca74:	2a 96       	adiw	r28, 0x0a	; 10
    ca76:	0f b6       	in	r0, 0x3f	; 63
    ca78:	f8 94       	cli
    ca7a:	de bf       	out	0x3e, r29	; 62
    ca7c:	0f be       	out	0x3f, r0	; 63
    ca7e:	cd bf       	out	0x3d, r28	; 61
    ca80:	cf 91       	pop	r28
    ca82:	df 91       	pop	r29
    ca84:	08 95       	ret

0000ca86 <vdmSetDunionGC>:


TVP vdmSetDunionGC(TVP set, TVP *from)
{
    ca86:	df 93       	push	r29
    ca88:	cf 93       	push	r28
    ca8a:	cd b7       	in	r28, 0x3d	; 61
    ca8c:	de b7       	in	r29, 0x3e	; 62
    ca8e:	2c 97       	sbiw	r28, 0x0c	; 12
    ca90:	0f b6       	in	r0, 0x3f	; 63
    ca92:	f8 94       	cli
    ca94:	de bf       	out	0x3e, r29	; 62
    ca96:	0f be       	out	0x3f, r0	; 63
    ca98:	cd bf       	out	0x3d, r28	; 61
    ca9a:	9a 87       	std	Y+10, r25	; 0x0a
    ca9c:	89 87       	std	Y+9, r24	; 0x09
    ca9e:	7c 87       	std	Y+12, r23	; 0x0c
    caa0:	6b 87       	std	Y+11, r22	; 0x0b
	int i;
	TVP unionset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    caa2:	e9 85       	ldd	r30, Y+9	; 0x09
    caa4:	fa 85       	ldd	r31, Y+10	; 0x0a
    caa6:	80 81       	ld	r24, Z
    caa8:	91 81       	ldd	r25, Z+1	; 0x01
    caaa:	87 30       	cpi	r24, 0x07	; 7
    caac:	91 05       	cpc	r25, r1
    caae:	11 f0       	breq	.+4      	; 0xcab4 <vdmSetDunionGC+0x2e>
    cab0:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col, set);
    cab4:	e9 85       	ldd	r30, Y+9	; 0x09
    cab6:	fa 85       	ldd	r31, Y+10	; 0x0a
    cab8:	84 81       	ldd	r24, Z+4	; 0x04
    caba:	95 81       	ldd	r25, Z+5	; 0x05
    cabc:	9a 83       	std	Y+2, r25	; 0x02
    cabe:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    cac0:	18 86       	std	Y+8, r1	; 0x08
    cac2:	1f 82       	std	Y+7, r1	; 0x07
    cac4:	1a c0       	rjmp	.+52     	; 0xcafa <vdmSetDunionGC+0x74>
	{
		ASSERT_CHECK((col->value)[i]);
    cac6:	e9 81       	ldd	r30, Y+1	; 0x01
    cac8:	fa 81       	ldd	r31, Y+2	; 0x02
    caca:	20 81       	ld	r18, Z
    cacc:	31 81       	ldd	r19, Z+1	; 0x01
    cace:	8f 81       	ldd	r24, Y+7	; 0x07
    cad0:	98 85       	ldd	r25, Y+8	; 0x08
    cad2:	88 0f       	add	r24, r24
    cad4:	99 1f       	adc	r25, r25
    cad6:	f9 01       	movw	r30, r18
    cad8:	e8 0f       	add	r30, r24
    cada:	f9 1f       	adc	r31, r25
    cadc:	01 90       	ld	r0, Z+
    cade:	f0 81       	ld	r31, Z
    cae0:	e0 2d       	mov	r30, r0
    cae2:	80 81       	ld	r24, Z
    cae4:	91 81       	ldd	r25, Z+1	; 0x01
    cae6:	87 30       	cpi	r24, 0x07	; 7
    cae8:	91 05       	cpc	r25, r1
    caea:	11 f0       	breq	.+4      	; 0xcaf0 <vdmSetDunionGC+0x6a>
    caec:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    caf0:	8f 81       	ldd	r24, Y+7	; 0x07
    caf2:	98 85       	ldd	r25, Y+8	; 0x08
    caf4:	01 96       	adiw	r24, 0x01	; 1
    caf6:	98 87       	std	Y+8, r25	; 0x08
    caf8:	8f 83       	std	Y+7, r24	; 0x07
    cafa:	e9 81       	ldd	r30, Y+1	; 0x01
    cafc:	fa 81       	ldd	r31, Y+2	; 0x02
    cafe:	22 81       	ldd	r18, Z+2	; 0x02
    cb00:	33 81       	ldd	r19, Z+3	; 0x03
    cb02:	8f 81       	ldd	r24, Y+7	; 0x07
    cb04:	98 85       	ldd	r25, Y+8	; 0x08
    cb06:	82 17       	cp	r24, r18
    cb08:	93 07       	cpc	r25, r19
    cb0a:	ec f2       	brlt	.-70     	; 0xcac6 <vdmSetDunionGC+0x40>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	unionset = newSetVarGC(0, NULL, from);
    cb0c:	00 d0       	rcall	.+0      	; 0xcb0e <vdmSetDunionGC+0x88>
    cb0e:	00 d0       	rcall	.+0      	; 0xcb10 <vdmSetDunionGC+0x8a>
    cb10:	00 d0       	rcall	.+0      	; 0xcb12 <vdmSetDunionGC+0x8c>
    cb12:	ed b7       	in	r30, 0x3d	; 61
    cb14:	fe b7       	in	r31, 0x3e	; 62
    cb16:	31 96       	adiw	r30, 0x01	; 1
    cb18:	11 82       	std	Z+1, r1	; 0x01
    cb1a:	10 82       	st	Z, r1
    cb1c:	13 82       	std	Z+3, r1	; 0x03
    cb1e:	12 82       	std	Z+2, r1	; 0x02
    cb20:	8b 85       	ldd	r24, Y+11	; 0x0b
    cb22:	9c 85       	ldd	r25, Y+12	; 0x0c
    cb24:	95 83       	std	Z+5, r25	; 0x05
    cb26:	84 83       	std	Z+4, r24	; 0x04
    cb28:	0e 94 79 58 	call	0xb0f2	; 0xb0f2 <newSetVarGC>
    cb2c:	2d b7       	in	r18, 0x3d	; 61
    cb2e:	3e b7       	in	r19, 0x3e	; 62
    cb30:	2a 5f       	subi	r18, 0xFA	; 250
    cb32:	3f 4f       	sbci	r19, 0xFF	; 255
    cb34:	0f b6       	in	r0, 0x3f	; 63
    cb36:	f8 94       	cli
    cb38:	3e bf       	out	0x3e, r19	; 62
    cb3a:	0f be       	out	0x3f, r0	; 63
    cb3c:	2d bf       	out	0x3d, r18	; 61
    cb3e:	9e 83       	std	Y+6, r25	; 0x06
    cb40:	8d 83       	std	Y+5, r24	; 0x05

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    cb42:	18 86       	std	Y+8, r1	; 0x08
    cb44:	1f 82       	std	Y+7, r1	; 0x07
    cb46:	21 c0       	rjmp	.+66     	; 0xcb8a <vdmSetDunionGC+0x104>
	{
		set1 = vdmSetUnion(unionset, (col->value)[i]);
    cb48:	e9 81       	ldd	r30, Y+1	; 0x01
    cb4a:	fa 81       	ldd	r31, Y+2	; 0x02
    cb4c:	20 81       	ld	r18, Z
    cb4e:	31 81       	ldd	r19, Z+1	; 0x01
    cb50:	8f 81       	ldd	r24, Y+7	; 0x07
    cb52:	98 85       	ldd	r25, Y+8	; 0x08
    cb54:	88 0f       	add	r24, r24
    cb56:	99 1f       	adc	r25, r25
    cb58:	f9 01       	movw	r30, r18
    cb5a:	e8 0f       	add	r30, r24
    cb5c:	f9 1f       	adc	r31, r25
    cb5e:	20 81       	ld	r18, Z
    cb60:	31 81       	ldd	r19, Z+1	; 0x01
    cb62:	8d 81       	ldd	r24, Y+5	; 0x05
    cb64:	9e 81       	ldd	r25, Y+6	; 0x06
    cb66:	b9 01       	movw	r22, r18
    cb68:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    cb6c:	9c 83       	std	Y+4, r25	; 0x04
    cb6e:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(unionset);
    cb70:	8d 81       	ldd	r24, Y+5	; 0x05
    cb72:	9e 81       	ldd	r25, Y+6	; 0x06
    cb74:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		unionset = set1;
    cb78:	8b 81       	ldd	r24, Y+3	; 0x03
    cb7a:	9c 81       	ldd	r25, Y+4	; 0x04
    cb7c:	9e 83       	std	Y+6, r25	; 0x06
    cb7e:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	unionset = newSetVarGC(0, NULL, from);

	/* Build union set.  */
	for(i = 0; i < col->size; i++)
    cb80:	8f 81       	ldd	r24, Y+7	; 0x07
    cb82:	98 85       	ldd	r25, Y+8	; 0x08
    cb84:	01 96       	adiw	r24, 0x01	; 1
    cb86:	98 87       	std	Y+8, r25	; 0x08
    cb88:	8f 83       	std	Y+7, r24	; 0x07
    cb8a:	e9 81       	ldd	r30, Y+1	; 0x01
    cb8c:	fa 81       	ldd	r31, Y+2	; 0x02
    cb8e:	22 81       	ldd	r18, Z+2	; 0x02
    cb90:	33 81       	ldd	r19, Z+3	; 0x03
    cb92:	8f 81       	ldd	r24, Y+7	; 0x07
    cb94:	98 85       	ldd	r25, Y+8	; 0x08
    cb96:	82 17       	cp	r24, r18
    cb98:	93 07       	cpc	r25, r19
    cb9a:	b4 f2       	brlt	.-84     	; 0xcb48 <vdmSetDunionGC+0xc2>
		set1 = vdmSetUnion(unionset, (col->value)[i]);
		vdmFree(unionset);
		unionset = set1;
	}

	return unionset;
    cb9c:	8d 81       	ldd	r24, Y+5	; 0x05
    cb9e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    cba0:	2c 96       	adiw	r28, 0x0c	; 12
    cba2:	0f b6       	in	r0, 0x3f	; 63
    cba4:	f8 94       	cli
    cba6:	de bf       	out	0x3e, r29	; 62
    cba8:	0f be       	out	0x3f, r0	; 63
    cbaa:	cd bf       	out	0x3d, r28	; 61
    cbac:	cf 91       	pop	r28
    cbae:	df 91       	pop	r29
    cbb0:	08 95       	ret

0000cbb2 <vdmSetDinter>:



TVP vdmSetDinter(TVP set)
{
    cbb2:	df 93       	push	r29
    cbb4:	cf 93       	push	r28
    cbb6:	cd b7       	in	r28, 0x3d	; 61
    cbb8:	de b7       	in	r29, 0x3e	; 62
    cbba:	2a 97       	sbiw	r28, 0x0a	; 10
    cbbc:	0f b6       	in	r0, 0x3f	; 63
    cbbe:	f8 94       	cli
    cbc0:	de bf       	out	0x3e, r29	; 62
    cbc2:	0f be       	out	0x3f, r0	; 63
    cbc4:	cd bf       	out	0x3d, r28	; 61
    cbc6:	9a 87       	std	Y+10, r25	; 0x0a
    cbc8:	89 87       	std	Y+9, r24	; 0x09
	int i;
	TVP interset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    cbca:	e9 85       	ldd	r30, Y+9	; 0x09
    cbcc:	fa 85       	ldd	r31, Y+10	; 0x0a
    cbce:	80 81       	ld	r24, Z
    cbd0:	91 81       	ldd	r25, Z+1	; 0x01
    cbd2:	87 30       	cpi	r24, 0x07	; 7
    cbd4:	91 05       	cpc	r25, r1
    cbd6:	11 f0       	breq	.+4      	; 0xcbdc <vdmSetDinter+0x2a>
    cbd8:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col, set);
    cbdc:	e9 85       	ldd	r30, Y+9	; 0x09
    cbde:	fa 85       	ldd	r31, Y+10	; 0x0a
    cbe0:	84 81       	ldd	r24, Z+4	; 0x04
    cbe2:	95 81       	ldd	r25, Z+5	; 0x05
    cbe4:	9a 83       	std	Y+2, r25	; 0x02
    cbe6:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    cbe8:	18 86       	std	Y+8, r1	; 0x08
    cbea:	1f 82       	std	Y+7, r1	; 0x07
    cbec:	1a c0       	rjmp	.+52     	; 0xcc22 <vdmSetDinter+0x70>
	{
		ASSERT_CHECK((col->value)[i]);
    cbee:	e9 81       	ldd	r30, Y+1	; 0x01
    cbf0:	fa 81       	ldd	r31, Y+2	; 0x02
    cbf2:	20 81       	ld	r18, Z
    cbf4:	31 81       	ldd	r19, Z+1	; 0x01
    cbf6:	8f 81       	ldd	r24, Y+7	; 0x07
    cbf8:	98 85       	ldd	r25, Y+8	; 0x08
    cbfa:	88 0f       	add	r24, r24
    cbfc:	99 1f       	adc	r25, r25
    cbfe:	f9 01       	movw	r30, r18
    cc00:	e8 0f       	add	r30, r24
    cc02:	f9 1f       	adc	r31, r25
    cc04:	01 90       	ld	r0, Z+
    cc06:	f0 81       	ld	r31, Z
    cc08:	e0 2d       	mov	r30, r0
    cc0a:	80 81       	ld	r24, Z
    cc0c:	91 81       	ldd	r25, Z+1	; 0x01
    cc0e:	87 30       	cpi	r24, 0x07	; 7
    cc10:	91 05       	cpc	r25, r1
    cc12:	11 f0       	breq	.+4      	; 0xcc18 <vdmSetDinter+0x66>
    cc14:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    cc18:	8f 81       	ldd	r24, Y+7	; 0x07
    cc1a:	98 85       	ldd	r25, Y+8	; 0x08
    cc1c:	01 96       	adiw	r24, 0x01	; 1
    cc1e:	98 87       	std	Y+8, r25	; 0x08
    cc20:	8f 83       	std	Y+7, r24	; 0x07
    cc22:	e9 81       	ldd	r30, Y+1	; 0x01
    cc24:	fa 81       	ldd	r31, Y+2	; 0x02
    cc26:	22 81       	ldd	r18, Z+2	; 0x02
    cc28:	33 81       	ldd	r19, Z+3	; 0x03
    cc2a:	8f 81       	ldd	r24, Y+7	; 0x07
    cc2c:	98 85       	ldd	r25, Y+8	; 0x08
    cc2e:	82 17       	cp	r24, r18
    cc30:	93 07       	cpc	r25, r19
    cc32:	ec f2       	brlt	.-70     	; 0xcbee <vdmSetDinter+0x3c>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);
    cc34:	e9 81       	ldd	r30, Y+1	; 0x01
    cc36:	fa 81       	ldd	r31, Y+2	; 0x02
    cc38:	01 90       	ld	r0, Z+
    cc3a:	f0 81       	ld	r31, Z
    cc3c:	e0 2d       	mov	r30, r0
    cc3e:	80 81       	ld	r24, Z
    cc40:	91 81       	ldd	r25, Z+1	; 0x01
    cc42:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    cc46:	9e 83       	std	Y+6, r25	; 0x06
    cc48:	8d 83       	std	Y+5, r24	; 0x05

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    cc4a:	81 e0       	ldi	r24, 0x01	; 1
    cc4c:	90 e0       	ldi	r25, 0x00	; 0
    cc4e:	98 87       	std	Y+8, r25	; 0x08
    cc50:	8f 83       	std	Y+7, r24	; 0x07
    cc52:	21 c0       	rjmp	.+66     	; 0xcc96 <vdmSetDinter+0xe4>
	{
		set1 = vdmSetInter(interset, (col->value)[i]);
    cc54:	e9 81       	ldd	r30, Y+1	; 0x01
    cc56:	fa 81       	ldd	r31, Y+2	; 0x02
    cc58:	20 81       	ld	r18, Z
    cc5a:	31 81       	ldd	r19, Z+1	; 0x01
    cc5c:	8f 81       	ldd	r24, Y+7	; 0x07
    cc5e:	98 85       	ldd	r25, Y+8	; 0x08
    cc60:	88 0f       	add	r24, r24
    cc62:	99 1f       	adc	r25, r25
    cc64:	f9 01       	movw	r30, r18
    cc66:	e8 0f       	add	r30, r24
    cc68:	f9 1f       	adc	r31, r25
    cc6a:	20 81       	ld	r18, Z
    cc6c:	31 81       	ldd	r19, Z+1	; 0x01
    cc6e:	8d 81       	ldd	r24, Y+5	; 0x05
    cc70:	9e 81       	ldd	r25, Y+6	; 0x06
    cc72:	b9 01       	movw	r22, r18
    cc74:	0e 94 fa 5e 	call	0xbdf4	; 0xbdf4 <vdmSetInter>
    cc78:	9c 83       	std	Y+4, r25	; 0x04
    cc7a:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(interset);
    cc7c:	8d 81       	ldd	r24, Y+5	; 0x05
    cc7e:	9e 81       	ldd	r25, Y+6	; 0x06
    cc80:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		interset = set1;
    cc84:	8b 81       	ldd	r24, Y+3	; 0x03
    cc86:	9c 81       	ldd	r25, Y+4	; 0x04
    cc88:	9e 83       	std	Y+6, r25	; 0x06
    cc8a:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    cc8c:	8f 81       	ldd	r24, Y+7	; 0x07
    cc8e:	98 85       	ldd	r25, Y+8	; 0x08
    cc90:	01 96       	adiw	r24, 0x01	; 1
    cc92:	98 87       	std	Y+8, r25	; 0x08
    cc94:	8f 83       	std	Y+7, r24	; 0x07
    cc96:	e9 81       	ldd	r30, Y+1	; 0x01
    cc98:	fa 81       	ldd	r31, Y+2	; 0x02
    cc9a:	22 81       	ldd	r18, Z+2	; 0x02
    cc9c:	33 81       	ldd	r19, Z+3	; 0x03
    cc9e:	8f 81       	ldd	r24, Y+7	; 0x07
    cca0:	98 85       	ldd	r25, Y+8	; 0x08
    cca2:	82 17       	cp	r24, r18
    cca4:	93 07       	cpc	r25, r19
    cca6:	b4 f2       	brlt	.-84     	; 0xcc54 <vdmSetDinter+0xa2>
		set1 = vdmSetInter(interset, (col->value)[i]);
		vdmFree(interset);
		interset = set1;
	}

	return interset;
    cca8:	8d 81       	ldd	r24, Y+5	; 0x05
    ccaa:	9e 81       	ldd	r25, Y+6	; 0x06
}
    ccac:	2a 96       	adiw	r28, 0x0a	; 10
    ccae:	0f b6       	in	r0, 0x3f	; 63
    ccb0:	f8 94       	cli
    ccb2:	de bf       	out	0x3e, r29	; 62
    ccb4:	0f be       	out	0x3f, r0	; 63
    ccb6:	cd bf       	out	0x3d, r28	; 61
    ccb8:	cf 91       	pop	r28
    ccba:	df 91       	pop	r29
    ccbc:	08 95       	ret

0000ccbe <vdmSetDinterGC>:


TVP vdmSetDinterGC(TVP set, TVP *from)
{
    ccbe:	df 93       	push	r29
    ccc0:	cf 93       	push	r28
    ccc2:	cd b7       	in	r28, 0x3d	; 61
    ccc4:	de b7       	in	r29, 0x3e	; 62
    ccc6:	2c 97       	sbiw	r28, 0x0c	; 12
    ccc8:	0f b6       	in	r0, 0x3f	; 63
    ccca:	f8 94       	cli
    cccc:	de bf       	out	0x3e, r29	; 62
    ccce:	0f be       	out	0x3f, r0	; 63
    ccd0:	cd bf       	out	0x3d, r28	; 61
    ccd2:	9a 87       	std	Y+10, r25	; 0x0a
    ccd4:	89 87       	std	Y+9, r24	; 0x09
    ccd6:	7c 87       	std	Y+12, r23	; 0x0c
    ccd8:	6b 87       	std	Y+11, r22	; 0x0b
	int i;
	TVP interset;
	TVP set1;

	/* Preliminary checks.  */
	ASSERT_CHECK(set);
    ccda:	e9 85       	ldd	r30, Y+9	; 0x09
    ccdc:	fa 85       	ldd	r31, Y+10	; 0x0a
    ccde:	80 81       	ld	r24, Z
    cce0:	91 81       	ldd	r25, Z+1	; 0x01
    cce2:	87 30       	cpi	r24, 0x07	; 7
    cce4:	91 05       	cpc	r25, r1
    cce6:	11 f0       	breq	.+4      	; 0xccec <vdmSetDinterGC+0x2e>
    cce8:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col, set);
    ccec:	e9 85       	ldd	r30, Y+9	; 0x09
    ccee:	fa 85       	ldd	r31, Y+10	; 0x0a
    ccf0:	84 81       	ldd	r24, Z+4	; 0x04
    ccf2:	95 81       	ldd	r25, Z+5	; 0x05
    ccf4:	9a 83       	std	Y+2, r25	; 0x02
    ccf6:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < col->size; i++)
    ccf8:	18 86       	std	Y+8, r1	; 0x08
    ccfa:	1f 82       	std	Y+7, r1	; 0x07
    ccfc:	1a c0       	rjmp	.+52     	; 0xcd32 <vdmSetDinterGC+0x74>
	{
		ASSERT_CHECK((col->value)[i]);
    ccfe:	e9 81       	ldd	r30, Y+1	; 0x01
    cd00:	fa 81       	ldd	r31, Y+2	; 0x02
    cd02:	20 81       	ld	r18, Z
    cd04:	31 81       	ldd	r19, Z+1	; 0x01
    cd06:	8f 81       	ldd	r24, Y+7	; 0x07
    cd08:	98 85       	ldd	r25, Y+8	; 0x08
    cd0a:	88 0f       	add	r24, r24
    cd0c:	99 1f       	adc	r25, r25
    cd0e:	f9 01       	movw	r30, r18
    cd10:	e8 0f       	add	r30, r24
    cd12:	f9 1f       	adc	r31, r25
    cd14:	01 90       	ld	r0, Z+
    cd16:	f0 81       	ld	r31, Z
    cd18:	e0 2d       	mov	r30, r0
    cd1a:	80 81       	ld	r24, Z
    cd1c:	91 81       	ldd	r25, Z+1	; 0x01
    cd1e:	87 30       	cpi	r24, 0x07	; 7
    cd20:	91 05       	cpc	r25, r1
    cd22:	11 f0       	breq	.+4      	; 0xcd28 <vdmSetDinterGC+0x6a>
    cd24:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	/* Preliminary checks.  */
	ASSERT_CHECK(set);

	UNWRAP_COLLECTION(col, set);
	for(i = 0; i < col->size; i++)
    cd28:	8f 81       	ldd	r24, Y+7	; 0x07
    cd2a:	98 85       	ldd	r25, Y+8	; 0x08
    cd2c:	01 96       	adiw	r24, 0x01	; 1
    cd2e:	98 87       	std	Y+8, r25	; 0x08
    cd30:	8f 83       	std	Y+7, r24	; 0x07
    cd32:	e9 81       	ldd	r30, Y+1	; 0x01
    cd34:	fa 81       	ldd	r31, Y+2	; 0x02
    cd36:	22 81       	ldd	r18, Z+2	; 0x02
    cd38:	33 81       	ldd	r19, Z+3	; 0x03
    cd3a:	8f 81       	ldd	r24, Y+7	; 0x07
    cd3c:	98 85       	ldd	r25, Y+8	; 0x08
    cd3e:	82 17       	cp	r24, r18
    cd40:	93 07       	cpc	r25, r19
    cd42:	ec f2       	brlt	.-70     	; 0xccfe <vdmSetDinterGC+0x40>
	{
		ASSERT_CHECK((col->value)[i]);
	}

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);
    cd44:	e9 81       	ldd	r30, Y+1	; 0x01
    cd46:	fa 81       	ldd	r31, Y+2	; 0x02
    cd48:	01 90       	ld	r0, Z+
    cd4a:	f0 81       	ld	r31, Z
    cd4c:	e0 2d       	mov	r30, r0
    cd4e:	80 81       	ld	r24, Z
    cd50:	91 81       	ldd	r25, Z+1	; 0x01
    cd52:	0e 94 cb 28 	call	0x5196	; 0x5196 <vdmClone>
    cd56:	9e 83       	std	Y+6, r25	; 0x06
    cd58:	8d 83       	std	Y+5, r24	; 0x05

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    cd5a:	81 e0       	ldi	r24, 0x01	; 1
    cd5c:	90 e0       	ldi	r25, 0x00	; 0
    cd5e:	98 87       	std	Y+8, r25	; 0x08
    cd60:	8f 83       	std	Y+7, r24	; 0x07
    cd62:	24 c0       	rjmp	.+72     	; 0xcdac <vdmSetDinterGC+0xee>
	{
		set1 = vdmSetInterGC(interset, (col->value)[i], from);
    cd64:	e9 81       	ldd	r30, Y+1	; 0x01
    cd66:	fa 81       	ldd	r31, Y+2	; 0x02
    cd68:	20 81       	ld	r18, Z
    cd6a:	31 81       	ldd	r19, Z+1	; 0x01
    cd6c:	8f 81       	ldd	r24, Y+7	; 0x07
    cd6e:	98 85       	ldd	r25, Y+8	; 0x08
    cd70:	88 0f       	add	r24, r24
    cd72:	99 1f       	adc	r25, r25
    cd74:	f9 01       	movw	r30, r18
    cd76:	e8 0f       	add	r30, r24
    cd78:	f9 1f       	adc	r31, r25
    cd7a:	40 81       	ld	r20, Z
    cd7c:	51 81       	ldd	r21, Z+1	; 0x01
    cd7e:	8d 81       	ldd	r24, Y+5	; 0x05
    cd80:	9e 81       	ldd	r25, Y+6	; 0x06
    cd82:	2b 85       	ldd	r18, Y+11	; 0x0b
    cd84:	3c 85       	ldd	r19, Y+12	; 0x0c
    cd86:	ba 01       	movw	r22, r20
    cd88:	a9 01       	movw	r20, r18
    cd8a:	0e 94 b6 5f 	call	0xbf6c	; 0xbf6c <vdmSetInterGC>
    cd8e:	9c 83       	std	Y+4, r25	; 0x04
    cd90:	8b 83       	std	Y+3, r24	; 0x03
		vdmFree(interset);
    cd92:	8d 81       	ldd	r24, Y+5	; 0x05
    cd94:	9e 81       	ldd	r25, Y+6	; 0x06
    cd96:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
		interset = set1;
    cd9a:	8b 81       	ldd	r24, Y+3	; 0x03
    cd9c:	9c 81       	ldd	r25, Y+4	; 0x04
    cd9e:	9e 83       	std	Y+6, r25	; 0x06
    cda0:	8d 83       	std	Y+5, r24	; 0x05

	/* Initialize final set.  */
	interset = vdmClone((col->value)[0]);

	/* Build intersection set.  */
	for(i = 1; i < col->size; i++)
    cda2:	8f 81       	ldd	r24, Y+7	; 0x07
    cda4:	98 85       	ldd	r25, Y+8	; 0x08
    cda6:	01 96       	adiw	r24, 0x01	; 1
    cda8:	98 87       	std	Y+8, r25	; 0x08
    cdaa:	8f 83       	std	Y+7, r24	; 0x07
    cdac:	e9 81       	ldd	r30, Y+1	; 0x01
    cdae:	fa 81       	ldd	r31, Y+2	; 0x02
    cdb0:	22 81       	ldd	r18, Z+2	; 0x02
    cdb2:	33 81       	ldd	r19, Z+3	; 0x03
    cdb4:	8f 81       	ldd	r24, Y+7	; 0x07
    cdb6:	98 85       	ldd	r25, Y+8	; 0x08
    cdb8:	82 17       	cp	r24, r18
    cdba:	93 07       	cpc	r25, r19
    cdbc:	9c f2       	brlt	.-90     	; 0xcd64 <vdmSetDinterGC+0xa6>
		set1 = vdmSetInterGC(interset, (col->value)[i], from);
		vdmFree(interset);
		interset = set1;
	}

	return interset;
    cdbe:	8d 81       	ldd	r24, Y+5	; 0x05
    cdc0:	9e 81       	ldd	r25, Y+6	; 0x06
}
    cdc2:	2c 96       	adiw	r28, 0x0c	; 12
    cdc4:	0f b6       	in	r0, 0x3f	; 63
    cdc6:	f8 94       	cli
    cdc8:	de bf       	out	0x3e, r29	; 62
    cdca:	0f be       	out	0x3f, r0	; 63
    cdcc:	cd bf       	out	0x3d, r28	; 61
    cdce:	cf 91       	pop	r28
    cdd0:	df 91       	pop	r29
    cdd2:	08 95       	ret

0000cdd4 <vdmSetPower>:



TVP vdmSetPower(TVP set)
{
    cdd4:	df 93       	push	r29
    cdd6:	cf 93       	push	r28
    cdd8:	cd b7       	in	r28, 0x3d	; 61
    cdda:	de b7       	in	r29, 0x3e	; 62
    cddc:	64 97       	sbiw	r28, 0x14	; 20
    cdde:	0f b6       	in	r0, 0x3f	; 63
    cde0:	f8 94       	cli
    cde2:	de bf       	out	0x3e, r29	; 62
    cde4:	0f be       	out	0x3f, r0	; 63
    cde6:	cd bf       	out	0x3d, r28	; 61
    cde8:	9c 8b       	std	Y+20, r25	; 0x14
    cdea:	8b 8b       	std	Y+19, r24	; 0x13
	TVP set3;
	TVP powerset;
	struct Collection *powercol;
	int powercolsize;

	ASSERT_CHECK(set);
    cdec:	eb 89       	ldd	r30, Y+19	; 0x13
    cdee:	fc 89       	ldd	r31, Y+20	; 0x14
    cdf0:	80 81       	ld	r24, Z
    cdf2:	91 81       	ldd	r25, Z+1	; 0x01
    cdf4:	87 30       	cpi	r24, 0x07	; 7
    cdf6:	91 05       	cpc	r25, r1
    cdf8:	11 f0       	breq	.+4      	; 0xcdfe <vdmSetPower+0x2a>
    cdfa:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col, set);
    cdfe:	eb 89       	ldd	r30, Y+19	; 0x13
    ce00:	fc 89       	ldd	r31, Y+20	; 0x14
    ce02:	84 81       	ldd	r24, Z+4	; 0x04
    ce04:	95 81       	ldd	r25, Z+5	; 0x05
    ce06:	9a 83       	std	Y+2, r25	; 0x02
    ce08:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize powerset to contain the empty set.  */
	powerset = newSetVar(0, NULL);
    ce0a:	00 d0       	rcall	.+0      	; 0xce0c <vdmSetPower+0x38>
    ce0c:	00 d0       	rcall	.+0      	; 0xce0e <vdmSetPower+0x3a>
    ce0e:	ed b7       	in	r30, 0x3d	; 61
    ce10:	fe b7       	in	r31, 0x3e	; 62
    ce12:	31 96       	adiw	r30, 0x01	; 1
    ce14:	11 82       	std	Z+1, r1	; 0x01
    ce16:	10 82       	st	Z, r1
    ce18:	13 82       	std	Z+3, r1	; 0x03
    ce1a:	12 82       	std	Z+2, r1	; 0x02
    ce1c:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    ce20:	0f 90       	pop	r0
    ce22:	0f 90       	pop	r0
    ce24:	0f 90       	pop	r0
    ce26:	0f 90       	pop	r0
    ce28:	98 87       	std	Y+8, r25	; 0x08
    ce2a:	8f 83       	std	Y+7, r24	; 0x07

	set1 = newSetVar(0, NULL);
    ce2c:	00 d0       	rcall	.+0      	; 0xce2e <vdmSetPower+0x5a>
    ce2e:	00 d0       	rcall	.+0      	; 0xce30 <vdmSetPower+0x5c>
    ce30:	ed b7       	in	r30, 0x3d	; 61
    ce32:	fe b7       	in	r31, 0x3e	; 62
    ce34:	31 96       	adiw	r30, 0x01	; 1
    ce36:	11 82       	std	Z+1, r1	; 0x01
    ce38:	10 82       	st	Z, r1
    ce3a:	13 82       	std	Z+3, r1	; 0x03
    ce3c:	12 82       	std	Z+2, r1	; 0x02
    ce3e:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    ce42:	0f 90       	pop	r0
    ce44:	0f 90       	pop	r0
    ce46:	0f 90       	pop	r0
    ce48:	0f 90       	pop	r0
    ce4a:	9e 87       	std	Y+14, r25	; 0x0e
    ce4c:	8d 87       	std	Y+13, r24	; 0x0d
	set2 = newSetVar(1, set1);
    ce4e:	00 d0       	rcall	.+0      	; 0xce50 <vdmSetPower+0x7c>
    ce50:	00 d0       	rcall	.+0      	; 0xce52 <vdmSetPower+0x7e>
    ce52:	ed b7       	in	r30, 0x3d	; 61
    ce54:	fe b7       	in	r31, 0x3e	; 62
    ce56:	31 96       	adiw	r30, 0x01	; 1
    ce58:	81 e0       	ldi	r24, 0x01	; 1
    ce5a:	90 e0       	ldi	r25, 0x00	; 0
    ce5c:	91 83       	std	Z+1, r25	; 0x01
    ce5e:	80 83       	st	Z, r24
    ce60:	8d 85       	ldd	r24, Y+13	; 0x0d
    ce62:	9e 85       	ldd	r25, Y+14	; 0x0e
    ce64:	93 83       	std	Z+3, r25	; 0x03
    ce66:	82 83       	std	Z+2, r24	; 0x02
    ce68:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    ce6c:	0f 90       	pop	r0
    ce6e:	0f 90       	pop	r0
    ce70:	0f 90       	pop	r0
    ce72:	0f 90       	pop	r0
    ce74:	9c 87       	std	Y+12, r25	; 0x0c
    ce76:	8b 87       	std	Y+11, r24	; 0x0b
	vdmFree(set1);
    ce78:	8d 85       	ldd	r24, Y+13	; 0x0d
    ce7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    ce7c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	set1 = vdmSetUnion(powerset, set2);
    ce80:	8f 81       	ldd	r24, Y+7	; 0x07
    ce82:	98 85       	ldd	r25, Y+8	; 0x08
    ce84:	2b 85       	ldd	r18, Y+11	; 0x0b
    ce86:	3c 85       	ldd	r19, Y+12	; 0x0c
    ce88:	b9 01       	movw	r22, r18
    ce8a:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    ce8e:	9e 87       	std	Y+14, r25	; 0x0e
    ce90:	8d 87       	std	Y+13, r24	; 0x0d
	vdmFree(set2);
    ce92:	8b 85       	ldd	r24, Y+11	; 0x0b
    ce94:	9c 85       	ldd	r25, Y+12	; 0x0c
    ce96:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	vdmFree(powerset);
    ce9a:	8f 81       	ldd	r24, Y+7	; 0x07
    ce9c:	98 85       	ldd	r25, Y+8	; 0x08
    ce9e:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	powerset = set1;
    cea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    cea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    cea6:	98 87       	std	Y+8, r25	; 0x08
    cea8:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col->size; i++)
    ceaa:	1a 8a       	std	Y+18, r1	; 0x12
    ceac:	19 8a       	std	Y+17, r1	; 0x11
    ceae:	8a c0       	rjmp	.+276    	; 0xcfc4 <vdmSetPower+0x1f0>
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
    ceb0:	ef 81       	ldd	r30, Y+7	; 0x07
    ceb2:	f8 85       	ldd	r31, Y+8	; 0x08
    ceb4:	84 81       	ldd	r24, Z+4	; 0x04
    ceb6:	95 81       	ldd	r25, Z+5	; 0x05
    ceb8:	fc 01       	movw	r30, r24
    ceba:	82 81       	ldd	r24, Z+2	; 0x02
    cebc:	93 81       	ldd	r25, Z+3	; 0x03
    cebe:	9c 83       	std	Y+4, r25	; 0x04
    cec0:	8b 83       	std	Y+3, r24	; 0x03
		for(j = 0; j < powercolsize; j++)
    cec2:	18 8a       	std	Y+16, r1	; 0x10
    cec4:	1f 86       	std	Y+15, r1	; 0x0f
    cec6:	71 c0       	rjmp	.+226    	; 0xcfaa <vdmSetPower+0x1d6>
		{
			powercol = (struct Collection*)powerset->value.ptr;
    cec8:	ef 81       	ldd	r30, Y+7	; 0x07
    ceca:	f8 85       	ldd	r31, Y+8	; 0x08
    cecc:	84 81       	ldd	r24, Z+4	; 0x04
    cece:	95 81       	ldd	r25, Z+5	; 0x05
    ced0:	9e 83       	std	Y+6, r25	; 0x06
    ced2:	8d 83       	std	Y+5, r24	; 0x05

			set1 = newSetVar(1, (col->value)[i]);
    ced4:	e9 81       	ldd	r30, Y+1	; 0x01
    ced6:	fa 81       	ldd	r31, Y+2	; 0x02
    ced8:	20 81       	ld	r18, Z
    ceda:	31 81       	ldd	r19, Z+1	; 0x01
    cedc:	89 89       	ldd	r24, Y+17	; 0x11
    cede:	9a 89       	ldd	r25, Y+18	; 0x12
    cee0:	88 0f       	add	r24, r24
    cee2:	99 1f       	adc	r25, r25
    cee4:	f9 01       	movw	r30, r18
    cee6:	e8 0f       	add	r30, r24
    cee8:	f9 1f       	adc	r31, r25
    ceea:	20 81       	ld	r18, Z
    ceec:	31 81       	ldd	r19, Z+1	; 0x01
    ceee:	00 d0       	rcall	.+0      	; 0xcef0 <vdmSetPower+0x11c>
    cef0:	00 d0       	rcall	.+0      	; 0xcef2 <vdmSetPower+0x11e>
    cef2:	ed b7       	in	r30, 0x3d	; 61
    cef4:	fe b7       	in	r31, 0x3e	; 62
    cef6:	31 96       	adiw	r30, 0x01	; 1
    cef8:	81 e0       	ldi	r24, 0x01	; 1
    cefa:	90 e0       	ldi	r25, 0x00	; 0
    cefc:	91 83       	std	Z+1, r25	; 0x01
    cefe:	80 83       	st	Z, r24
    cf00:	33 83       	std	Z+3, r19	; 0x03
    cf02:	22 83       	std	Z+2, r18	; 0x02
    cf04:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    cf08:	0f 90       	pop	r0
    cf0a:	0f 90       	pop	r0
    cf0c:	0f 90       	pop	r0
    cf0e:	0f 90       	pop	r0
    cf10:	9e 87       	std	Y+14, r25	; 0x0e
    cf12:	8d 87       	std	Y+13, r24	; 0x0d
			set2 = vdmSetUnion((powercol->value)[j], set1);
    cf14:	ed 81       	ldd	r30, Y+5	; 0x05
    cf16:	fe 81       	ldd	r31, Y+6	; 0x06
    cf18:	20 81       	ld	r18, Z
    cf1a:	31 81       	ldd	r19, Z+1	; 0x01
    cf1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    cf1e:	98 89       	ldd	r25, Y+16	; 0x10
    cf20:	88 0f       	add	r24, r24
    cf22:	99 1f       	adc	r25, r25
    cf24:	f9 01       	movw	r30, r18
    cf26:	e8 0f       	add	r30, r24
    cf28:	f9 1f       	adc	r31, r25
    cf2a:	80 81       	ld	r24, Z
    cf2c:	91 81       	ldd	r25, Z+1	; 0x01
    cf2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    cf30:	3e 85       	ldd	r19, Y+14	; 0x0e
    cf32:	b9 01       	movw	r22, r18
    cf34:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    cf38:	9c 87       	std	Y+12, r25	; 0x0c
    cf3a:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(set1);
    cf3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    cf3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    cf40:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			set1 = newSetVar(1, set2);
    cf44:	00 d0       	rcall	.+0      	; 0xcf46 <vdmSetPower+0x172>
    cf46:	00 d0       	rcall	.+0      	; 0xcf48 <vdmSetPower+0x174>
    cf48:	ed b7       	in	r30, 0x3d	; 61
    cf4a:	fe b7       	in	r31, 0x3e	; 62
    cf4c:	31 96       	adiw	r30, 0x01	; 1
    cf4e:	81 e0       	ldi	r24, 0x01	; 1
    cf50:	90 e0       	ldi	r25, 0x00	; 0
    cf52:	91 83       	std	Z+1, r25	; 0x01
    cf54:	80 83       	st	Z, r24
    cf56:	8b 85       	ldd	r24, Y+11	; 0x0b
    cf58:	9c 85       	ldd	r25, Y+12	; 0x0c
    cf5a:	93 83       	std	Z+3, r25	; 0x03
    cf5c:	82 83       	std	Z+2, r24	; 0x02
    cf5e:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    cf62:	0f 90       	pop	r0
    cf64:	0f 90       	pop	r0
    cf66:	0f 90       	pop	r0
    cf68:	0f 90       	pop	r0
    cf6a:	9e 87       	std	Y+14, r25	; 0x0e
    cf6c:	8d 87       	std	Y+13, r24	; 0x0d
			vdmFree(set2);
    cf6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    cf70:	9c 85       	ldd	r25, Y+12	; 0x0c
    cf72:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			set3 = vdmSetUnion(powerset, set1);
    cf76:	8f 81       	ldd	r24, Y+7	; 0x07
    cf78:	98 85       	ldd	r25, Y+8	; 0x08
    cf7a:	2d 85       	ldd	r18, Y+13	; 0x0d
    cf7c:	3e 85       	ldd	r19, Y+14	; 0x0e
    cf7e:	b9 01       	movw	r22, r18
    cf80:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    cf84:	9a 87       	std	Y+10, r25	; 0x0a
    cf86:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(set1);
    cf88:	8d 85       	ldd	r24, Y+13	; 0x0d
    cf8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    cf8c:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(powerset);
    cf90:	8f 81       	ldd	r24, Y+7	; 0x07
    cf92:	98 85       	ldd	r25, Y+8	; 0x08
    cf94:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			powerset = set3;
    cf98:	89 85       	ldd	r24, Y+9	; 0x09
    cf9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    cf9c:	98 87       	std	Y+8, r25	; 0x08
    cf9e:	8f 83       	std	Y+7, r24	; 0x07
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
    cfa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    cfa2:	98 89       	ldd	r25, Y+16	; 0x10
    cfa4:	01 96       	adiw	r24, 0x01	; 1
    cfa6:	98 8b       	std	Y+16, r25	; 0x10
    cfa8:	8f 87       	std	Y+15, r24	; 0x0f
    cfaa:	2f 85       	ldd	r18, Y+15	; 0x0f
    cfac:	38 89       	ldd	r19, Y+16	; 0x10
    cfae:	8b 81       	ldd	r24, Y+3	; 0x03
    cfb0:	9c 81       	ldd	r25, Y+4	; 0x04
    cfb2:	28 17       	cp	r18, r24
    cfb4:	39 07       	cpc	r19, r25
    cfb6:	0c f4       	brge	.+2      	; 0xcfba <vdmSetPower+0x1e6>
    cfb8:	87 cf       	rjmp	.-242    	; 0xcec8 <vdmSetPower+0xf4>
	set1 = vdmSetUnion(powerset, set2);
	vdmFree(set2);
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
    cfba:	89 89       	ldd	r24, Y+17	; 0x11
    cfbc:	9a 89       	ldd	r25, Y+18	; 0x12
    cfbe:	01 96       	adiw	r24, 0x01	; 1
    cfc0:	9a 8b       	std	Y+18, r25	; 0x12
    cfc2:	89 8b       	std	Y+17, r24	; 0x11
    cfc4:	e9 81       	ldd	r30, Y+1	; 0x01
    cfc6:	fa 81       	ldd	r31, Y+2	; 0x02
    cfc8:	22 81       	ldd	r18, Z+2	; 0x02
    cfca:	33 81       	ldd	r19, Z+3	; 0x03
    cfcc:	89 89       	ldd	r24, Y+17	; 0x11
    cfce:	9a 89       	ldd	r25, Y+18	; 0x12
    cfd0:	82 17       	cp	r24, r18
    cfd2:	93 07       	cpc	r25, r19
    cfd4:	0c f4       	brge	.+2      	; 0xcfd8 <vdmSetPower+0x204>
    cfd6:	6c cf       	rjmp	.-296    	; 0xceb0 <vdmSetPower+0xdc>
			vdmFree(powerset);
			powerset = set3;
		}
	}

	return powerset;
    cfd8:	8f 81       	ldd	r24, Y+7	; 0x07
    cfda:	98 85       	ldd	r25, Y+8	; 0x08
}
    cfdc:	64 96       	adiw	r28, 0x14	; 20
    cfde:	0f b6       	in	r0, 0x3f	; 63
    cfe0:	f8 94       	cli
    cfe2:	de bf       	out	0x3e, r29	; 62
    cfe4:	0f be       	out	0x3f, r0	; 63
    cfe6:	cd bf       	out	0x3d, r28	; 61
    cfe8:	cf 91       	pop	r28
    cfea:	df 91       	pop	r29
    cfec:	08 95       	ret

0000cfee <vdmSetPowerGC>:


TVP vdmSetPowerGC(TVP set, TVP *from)
{
    cfee:	df 93       	push	r29
    cff0:	cf 93       	push	r28
    cff2:	cd b7       	in	r28, 0x3d	; 61
    cff4:	de b7       	in	r29, 0x3e	; 62
    cff6:	66 97       	sbiw	r28, 0x16	; 22
    cff8:	0f b6       	in	r0, 0x3f	; 63
    cffa:	f8 94       	cli
    cffc:	de bf       	out	0x3e, r29	; 62
    cffe:	0f be       	out	0x3f, r0	; 63
    d000:	cd bf       	out	0x3d, r28	; 61
    d002:	9c 8b       	std	Y+20, r25	; 0x14
    d004:	8b 8b       	std	Y+19, r24	; 0x13
    d006:	7e 8b       	std	Y+22, r23	; 0x16
    d008:	6d 8b       	std	Y+21, r22	; 0x15
	TVP set3;
	TVP powerset;
	struct Collection *powercol;
	int powercolsize;

	ASSERT_CHECK(set);
    d00a:	eb 89       	ldd	r30, Y+19	; 0x13
    d00c:	fc 89       	ldd	r31, Y+20	; 0x14
    d00e:	80 81       	ld	r24, Z
    d010:	91 81       	ldd	r25, Z+1	; 0x01
    d012:	87 30       	cpi	r24, 0x07	; 7
    d014:	91 05       	cpc	r25, r1
    d016:	11 f0       	breq	.+4      	; 0xd01c <vdmSetPowerGC+0x2e>
    d018:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>

	UNWRAP_COLLECTION(col, set);
    d01c:	eb 89       	ldd	r30, Y+19	; 0x13
    d01e:	fc 89       	ldd	r31, Y+20	; 0x14
    d020:	84 81       	ldd	r24, Z+4	; 0x04
    d022:	95 81       	ldd	r25, Z+5	; 0x05
    d024:	9a 83       	std	Y+2, r25	; 0x02
    d026:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize powerset to contain the empty set.  */
	powerset = newSetVar(0, NULL);
    d028:	00 d0       	rcall	.+0      	; 0xd02a <vdmSetPowerGC+0x3c>
    d02a:	00 d0       	rcall	.+0      	; 0xd02c <vdmSetPowerGC+0x3e>
    d02c:	ed b7       	in	r30, 0x3d	; 61
    d02e:	fe b7       	in	r31, 0x3e	; 62
    d030:	31 96       	adiw	r30, 0x01	; 1
    d032:	11 82       	std	Z+1, r1	; 0x01
    d034:	10 82       	st	Z, r1
    d036:	13 82       	std	Z+3, r1	; 0x03
    d038:	12 82       	std	Z+2, r1	; 0x02
    d03a:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    d03e:	0f 90       	pop	r0
    d040:	0f 90       	pop	r0
    d042:	0f 90       	pop	r0
    d044:	0f 90       	pop	r0
    d046:	98 87       	std	Y+8, r25	; 0x08
    d048:	8f 83       	std	Y+7, r24	; 0x07

	set1 = newSetVar(0, NULL);
    d04a:	00 d0       	rcall	.+0      	; 0xd04c <vdmSetPowerGC+0x5e>
    d04c:	00 d0       	rcall	.+0      	; 0xd04e <vdmSetPowerGC+0x60>
    d04e:	ed b7       	in	r30, 0x3d	; 61
    d050:	fe b7       	in	r31, 0x3e	; 62
    d052:	31 96       	adiw	r30, 0x01	; 1
    d054:	11 82       	std	Z+1, r1	; 0x01
    d056:	10 82       	st	Z, r1
    d058:	13 82       	std	Z+3, r1	; 0x03
    d05a:	12 82       	std	Z+2, r1	; 0x02
    d05c:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    d060:	0f 90       	pop	r0
    d062:	0f 90       	pop	r0
    d064:	0f 90       	pop	r0
    d066:	0f 90       	pop	r0
    d068:	9e 87       	std	Y+14, r25	; 0x0e
    d06a:	8d 87       	std	Y+13, r24	; 0x0d
	set2 = newSetVar(1, set1);
    d06c:	00 d0       	rcall	.+0      	; 0xd06e <vdmSetPowerGC+0x80>
    d06e:	00 d0       	rcall	.+0      	; 0xd070 <vdmSetPowerGC+0x82>
    d070:	ed b7       	in	r30, 0x3d	; 61
    d072:	fe b7       	in	r31, 0x3e	; 62
    d074:	31 96       	adiw	r30, 0x01	; 1
    d076:	81 e0       	ldi	r24, 0x01	; 1
    d078:	90 e0       	ldi	r25, 0x00	; 0
    d07a:	91 83       	std	Z+1, r25	; 0x01
    d07c:	80 83       	st	Z, r24
    d07e:	8d 85       	ldd	r24, Y+13	; 0x0d
    d080:	9e 85       	ldd	r25, Y+14	; 0x0e
    d082:	93 83       	std	Z+3, r25	; 0x03
    d084:	82 83       	std	Z+2, r24	; 0x02
    d086:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    d08a:	0f 90       	pop	r0
    d08c:	0f 90       	pop	r0
    d08e:	0f 90       	pop	r0
    d090:	0f 90       	pop	r0
    d092:	9c 87       	std	Y+12, r25	; 0x0c
    d094:	8b 87       	std	Y+11, r24	; 0x0b
	vdmFree(set1);
    d096:	8d 85       	ldd	r24, Y+13	; 0x0d
    d098:	9e 85       	ldd	r25, Y+14	; 0x0e
    d09a:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	set1 = vdmSetUnion(powerset, set2);
    d09e:	8f 81       	ldd	r24, Y+7	; 0x07
    d0a0:	98 85       	ldd	r25, Y+8	; 0x08
    d0a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    d0a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    d0a6:	b9 01       	movw	r22, r18
    d0a8:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    d0ac:	9e 87       	std	Y+14, r25	; 0x0e
    d0ae:	8d 87       	std	Y+13, r24	; 0x0d
	vdmFree(set2);
    d0b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    d0b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    d0b4:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	vdmFree(powerset);
    d0b8:	8f 81       	ldd	r24, Y+7	; 0x07
    d0ba:	98 85       	ldd	r25, Y+8	; 0x08
    d0bc:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
	powerset = set1;
    d0c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    d0c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    d0c4:	98 87       	std	Y+8, r25	; 0x08
    d0c6:	8f 83       	std	Y+7, r24	; 0x07

	for(i = 0; i < col->size; i++)
    d0c8:	1a 8a       	std	Y+18, r1	; 0x12
    d0ca:	19 8a       	std	Y+17, r1	; 0x11
    d0cc:	8c c0       	rjmp	.+280    	; 0xd1e6 <vdmSetPowerGC+0x1f8>
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
    d0ce:	ef 81       	ldd	r30, Y+7	; 0x07
    d0d0:	f8 85       	ldd	r31, Y+8	; 0x08
    d0d2:	84 81       	ldd	r24, Z+4	; 0x04
    d0d4:	95 81       	ldd	r25, Z+5	; 0x05
    d0d6:	fc 01       	movw	r30, r24
    d0d8:	82 81       	ldd	r24, Z+2	; 0x02
    d0da:	93 81       	ldd	r25, Z+3	; 0x03
    d0dc:	9c 83       	std	Y+4, r25	; 0x04
    d0de:	8b 83       	std	Y+3, r24	; 0x03
		for(j = 0; j < powercolsize; j++)
    d0e0:	18 8a       	std	Y+16, r1	; 0x10
    d0e2:	1f 86       	std	Y+15, r1	; 0x0f
    d0e4:	73 c0       	rjmp	.+230    	; 0xd1cc <vdmSetPowerGC+0x1de>
		{
			powercol = (struct Collection*)powerset->value.ptr;
    d0e6:	ef 81       	ldd	r30, Y+7	; 0x07
    d0e8:	f8 85       	ldd	r31, Y+8	; 0x08
    d0ea:	84 81       	ldd	r24, Z+4	; 0x04
    d0ec:	95 81       	ldd	r25, Z+5	; 0x05
    d0ee:	9e 83       	std	Y+6, r25	; 0x06
    d0f0:	8d 83       	std	Y+5, r24	; 0x05

			set1 = newSetVar(1, (col->value)[i]);
    d0f2:	e9 81       	ldd	r30, Y+1	; 0x01
    d0f4:	fa 81       	ldd	r31, Y+2	; 0x02
    d0f6:	20 81       	ld	r18, Z
    d0f8:	31 81       	ldd	r19, Z+1	; 0x01
    d0fa:	89 89       	ldd	r24, Y+17	; 0x11
    d0fc:	9a 89       	ldd	r25, Y+18	; 0x12
    d0fe:	88 0f       	add	r24, r24
    d100:	99 1f       	adc	r25, r25
    d102:	f9 01       	movw	r30, r18
    d104:	e8 0f       	add	r30, r24
    d106:	f9 1f       	adc	r31, r25
    d108:	20 81       	ld	r18, Z
    d10a:	31 81       	ldd	r19, Z+1	; 0x01
    d10c:	00 d0       	rcall	.+0      	; 0xd10e <vdmSetPowerGC+0x120>
    d10e:	00 d0       	rcall	.+0      	; 0xd110 <vdmSetPowerGC+0x122>
    d110:	ed b7       	in	r30, 0x3d	; 61
    d112:	fe b7       	in	r31, 0x3e	; 62
    d114:	31 96       	adiw	r30, 0x01	; 1
    d116:	81 e0       	ldi	r24, 0x01	; 1
    d118:	90 e0       	ldi	r25, 0x00	; 0
    d11a:	91 83       	std	Z+1, r25	; 0x01
    d11c:	80 83       	st	Z, r24
    d11e:	33 83       	std	Z+3, r19	; 0x03
    d120:	22 83       	std	Z+2, r18	; 0x02
    d122:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    d126:	0f 90       	pop	r0
    d128:	0f 90       	pop	r0
    d12a:	0f 90       	pop	r0
    d12c:	0f 90       	pop	r0
    d12e:	9e 87       	std	Y+14, r25	; 0x0e
    d130:	8d 87       	std	Y+13, r24	; 0x0d
			set2 = vdmSetUnion((powercol->value)[j], set1);
    d132:	ed 81       	ldd	r30, Y+5	; 0x05
    d134:	fe 81       	ldd	r31, Y+6	; 0x06
    d136:	20 81       	ld	r18, Z
    d138:	31 81       	ldd	r19, Z+1	; 0x01
    d13a:	8f 85       	ldd	r24, Y+15	; 0x0f
    d13c:	98 89       	ldd	r25, Y+16	; 0x10
    d13e:	88 0f       	add	r24, r24
    d140:	99 1f       	adc	r25, r25
    d142:	f9 01       	movw	r30, r18
    d144:	e8 0f       	add	r30, r24
    d146:	f9 1f       	adc	r31, r25
    d148:	80 81       	ld	r24, Z
    d14a:	91 81       	ldd	r25, Z+1	; 0x01
    d14c:	2d 85       	ldd	r18, Y+13	; 0x0d
    d14e:	3e 85       	ldd	r19, Y+14	; 0x0e
    d150:	b9 01       	movw	r22, r18
    d152:	0e 94 0c 5d 	call	0xba18	; 0xba18 <vdmSetUnion>
    d156:	9c 87       	std	Y+12, r25	; 0x0c
    d158:	8b 87       	std	Y+11, r24	; 0x0b
			vdmFree(set1);
    d15a:	8d 85       	ldd	r24, Y+13	; 0x0d
    d15c:	9e 85       	ldd	r25, Y+14	; 0x0e
    d15e:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			set1 = newSetVar(1, set2);
    d162:	00 d0       	rcall	.+0      	; 0xd164 <vdmSetPowerGC+0x176>
    d164:	00 d0       	rcall	.+0      	; 0xd166 <vdmSetPowerGC+0x178>
    d166:	ed b7       	in	r30, 0x3d	; 61
    d168:	fe b7       	in	r31, 0x3e	; 62
    d16a:	31 96       	adiw	r30, 0x01	; 1
    d16c:	81 e0       	ldi	r24, 0x01	; 1
    d16e:	90 e0       	ldi	r25, 0x00	; 0
    d170:	91 83       	std	Z+1, r25	; 0x01
    d172:	80 83       	st	Z, r24
    d174:	8b 85       	ldd	r24, Y+11	; 0x0b
    d176:	9c 85       	ldd	r25, Y+12	; 0x0c
    d178:	93 83       	std	Z+3, r25	; 0x03
    d17a:	82 83       	std	Z+2, r24	; 0x02
    d17c:	0e 94 d7 57 	call	0xafae	; 0xafae <newSetVar>
    d180:	0f 90       	pop	r0
    d182:	0f 90       	pop	r0
    d184:	0f 90       	pop	r0
    d186:	0f 90       	pop	r0
    d188:	9e 87       	std	Y+14, r25	; 0x0e
    d18a:	8d 87       	std	Y+13, r24	; 0x0d
			vdmFree(set2);
    d18c:	8b 85       	ldd	r24, Y+11	; 0x0b
    d18e:	9c 85       	ldd	r25, Y+12	; 0x0c
    d190:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			set3 = vdmSetUnionGC(powerset, set1, from);
    d194:	8f 81       	ldd	r24, Y+7	; 0x07
    d196:	98 85       	ldd	r25, Y+8	; 0x08
    d198:	2d 85       	ldd	r18, Y+13	; 0x0d
    d19a:	3e 85       	ldd	r19, Y+14	; 0x0e
    d19c:	4d 89       	ldd	r20, Y+21	; 0x15
    d19e:	5e 89       	ldd	r21, Y+22	; 0x16
    d1a0:	b9 01       	movw	r22, r18
    d1a2:	0e 94 01 5e 	call	0xbc02	; 0xbc02 <vdmSetUnionGC>
    d1a6:	9a 87       	std	Y+10, r25	; 0x0a
    d1a8:	89 87       	std	Y+9, r24	; 0x09
			vdmFree(set1);
    d1aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    d1ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    d1ae:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			vdmFree(powerset);
    d1b2:	8f 81       	ldd	r24, Y+7	; 0x07
    d1b4:	98 85       	ldd	r25, Y+8	; 0x08
    d1b6:	0e 94 88 2c 	call	0x5910	; 0x5910 <vdmFree>
			powerset = set3;
    d1ba:	89 85       	ldd	r24, Y+9	; 0x09
    d1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    d1be:	98 87       	std	Y+8, r25	; 0x08
    d1c0:	8f 83       	std	Y+7, r24	; 0x07
	powerset = set1;

	for(i = 0; i < col->size; i++)
	{
		powercolsize = ((struct Collection*)powerset->value.ptr)->size;
		for(j = 0; j < powercolsize; j++)
    d1c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    d1c4:	98 89       	ldd	r25, Y+16	; 0x10
    d1c6:	01 96       	adiw	r24, 0x01	; 1
    d1c8:	98 8b       	std	Y+16, r25	; 0x10
    d1ca:	8f 87       	std	Y+15, r24	; 0x0f
    d1cc:	2f 85       	ldd	r18, Y+15	; 0x0f
    d1ce:	38 89       	ldd	r19, Y+16	; 0x10
    d1d0:	8b 81       	ldd	r24, Y+3	; 0x03
    d1d2:	9c 81       	ldd	r25, Y+4	; 0x04
    d1d4:	28 17       	cp	r18, r24
    d1d6:	39 07       	cpc	r19, r25
    d1d8:	0c f4       	brge	.+2      	; 0xd1dc <vdmSetPowerGC+0x1ee>
    d1da:	85 cf       	rjmp	.-246    	; 0xd0e6 <vdmSetPowerGC+0xf8>
	set1 = vdmSetUnion(powerset, set2);
	vdmFree(set2);
	vdmFree(powerset);
	powerset = set1;

	for(i = 0; i < col->size; i++)
    d1dc:	89 89       	ldd	r24, Y+17	; 0x11
    d1de:	9a 89       	ldd	r25, Y+18	; 0x12
    d1e0:	01 96       	adiw	r24, 0x01	; 1
    d1e2:	9a 8b       	std	Y+18, r25	; 0x12
    d1e4:	89 8b       	std	Y+17, r24	; 0x11
    d1e6:	e9 81       	ldd	r30, Y+1	; 0x01
    d1e8:	fa 81       	ldd	r31, Y+2	; 0x02
    d1ea:	22 81       	ldd	r18, Z+2	; 0x02
    d1ec:	33 81       	ldd	r19, Z+3	; 0x03
    d1ee:	89 89       	ldd	r24, Y+17	; 0x11
    d1f0:	9a 89       	ldd	r25, Y+18	; 0x12
    d1f2:	82 17       	cp	r24, r18
    d1f4:	93 07       	cpc	r25, r19
    d1f6:	0c f4       	brge	.+2      	; 0xd1fa <vdmSetPowerGC+0x20c>
    d1f8:	6a cf       	rjmp	.-300    	; 0xd0ce <vdmSetPowerGC+0xe0>
			vdmFree(powerset);
			powerset = set3;
		}
	}

	return powerset;
    d1fa:	8f 81       	ldd	r24, Y+7	; 0x07
    d1fc:	98 85       	ldd	r25, Y+8	; 0x08
}
    d1fe:	66 96       	adiw	r28, 0x16	; 22
    d200:	0f b6       	in	r0, 0x3f	; 63
    d202:	f8 94       	cli
    d204:	de bf       	out	0x3e, r29	; 62
    d206:	0f be       	out	0x3f, r0	; 63
    d208:	cd bf       	out	0x3d, r28	; 61
    d20a:	cf 91       	pop	r28
    d20c:	df 91       	pop	r29
    d20e:	08 95       	ret

0000d210 <unpackString>:
#include "Vdm.h"
#include "VdmUnpackString.h"

char* unpackString(TVP charseq)
{
    d210:	df 93       	push	r29
    d212:	cf 93       	push	r28
    d214:	cd b7       	in	r28, 0x3d	; 61
    d216:	de b7       	in	r29, 0x3e	; 62
    d218:	28 97       	sbiw	r28, 0x08	; 8
    d21a:	0f b6       	in	r0, 0x3f	; 63
    d21c:	f8 94       	cli
    d21e:	de bf       	out	0x3e, r29	; 62
    d220:	0f be       	out	0x3f, r0	; 63
    d222:	cd bf       	out	0x3d, r28	; 61
    d224:	98 87       	std	Y+8, r25	; 0x08
    d226:	8f 83       	std	Y+7, r24	; 0x07
	int i;
	char* str;



	UNWRAP_COLLECTION(col, charseq);
    d228:	ef 81       	ldd	r30, Y+7	; 0x07
    d22a:	f8 85       	ldd	r31, Y+8	; 0x08
    d22c:	84 81       	ldd	r24, Z+4	; 0x04
    d22e:	95 81       	ldd	r25, Z+5	; 0x05
    d230:	9a 83       	std	Y+2, r25	; 0x02
    d232:	89 83       	std	Y+1, r24	; 0x01

	str = (char*)malloc(col->size * sizeof(char) + 1);
    d234:	e9 81       	ldd	r30, Y+1	; 0x01
    d236:	fa 81       	ldd	r31, Y+2	; 0x02
    d238:	82 81       	ldd	r24, Z+2	; 0x02
    d23a:	93 81       	ldd	r25, Z+3	; 0x03
    d23c:	01 96       	adiw	r24, 0x01	; 1
    d23e:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    d242:	9c 83       	std	Y+4, r25	; 0x04
    d244:	8b 83       	std	Y+3, r24	; 0x03
	assert(str != NULL);
    d246:	8b 81       	ldd	r24, Y+3	; 0x03
    d248:	9c 81       	ldd	r25, Y+4	; 0x04
    d24a:	00 97       	sbiw	r24, 0x00	; 0
    d24c:	11 f4       	brne	.+4      	; 0xd252 <unpackString+0x42>
    d24e:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
	str[col->size] = 0;
    d252:	e9 81       	ldd	r30, Y+1	; 0x01
    d254:	fa 81       	ldd	r31, Y+2	; 0x02
    d256:	82 81       	ldd	r24, Z+2	; 0x02
    d258:	93 81       	ldd	r25, Z+3	; 0x03
    d25a:	9c 01       	movw	r18, r24
    d25c:	8b 81       	ldd	r24, Y+3	; 0x03
    d25e:	9c 81       	ldd	r25, Y+4	; 0x04
    d260:	fc 01       	movw	r30, r24
    d262:	e2 0f       	add	r30, r18
    d264:	f3 1f       	adc	r31, r19
    d266:	10 82       	st	Z, r1

	for(i = 0; i < col->size; i++)
    d268:	1e 82       	std	Y+6, r1	; 0x06
    d26a:	1d 82       	std	Y+5, r1	; 0x05
    d26c:	31 c0       	rjmp	.+98     	; 0xd2d0 <unpackString+0xc0>
	{
		ASSERT_CHECK_CHAR((col->value[i]));
    d26e:	e9 81       	ldd	r30, Y+1	; 0x01
    d270:	fa 81       	ldd	r31, Y+2	; 0x02
    d272:	20 81       	ld	r18, Z
    d274:	31 81       	ldd	r19, Z+1	; 0x01
    d276:	8d 81       	ldd	r24, Y+5	; 0x05
    d278:	9e 81       	ldd	r25, Y+6	; 0x06
    d27a:	88 0f       	add	r24, r24
    d27c:	99 1f       	adc	r25, r25
    d27e:	f9 01       	movw	r30, r18
    d280:	e8 0f       	add	r30, r24
    d282:	f9 1f       	adc	r31, r25
    d284:	01 90       	ld	r0, Z+
    d286:	f0 81       	ld	r31, Z
    d288:	e0 2d       	mov	r30, r0
    d28a:	80 81       	ld	r24, Z
    d28c:	91 81       	ldd	r25, Z+1	; 0x01
    d28e:	86 30       	cpi	r24, 0x06	; 6
    d290:	91 05       	cpc	r25, r1
    d292:	11 f0       	breq	.+4      	; 0xd298 <unpackString+0x88>
    d294:	0e 94 69 6e 	call	0xdcd2	; 0xdcd2 <abort>
		str[i] = ((col->value[i])->value).charVal;
    d298:	2d 81       	ldd	r18, Y+5	; 0x05
    d29a:	3e 81       	ldd	r19, Y+6	; 0x06
    d29c:	8b 81       	ldd	r24, Y+3	; 0x03
    d29e:	9c 81       	ldd	r25, Y+4	; 0x04
    d2a0:	dc 01       	movw	r26, r24
    d2a2:	a2 0f       	add	r26, r18
    d2a4:	b3 1f       	adc	r27, r19
    d2a6:	e9 81       	ldd	r30, Y+1	; 0x01
    d2a8:	fa 81       	ldd	r31, Y+2	; 0x02
    d2aa:	20 81       	ld	r18, Z
    d2ac:	31 81       	ldd	r19, Z+1	; 0x01
    d2ae:	8d 81       	ldd	r24, Y+5	; 0x05
    d2b0:	9e 81       	ldd	r25, Y+6	; 0x06
    d2b2:	88 0f       	add	r24, r24
    d2b4:	99 1f       	adc	r25, r25
    d2b6:	f9 01       	movw	r30, r18
    d2b8:	e8 0f       	add	r30, r24
    d2ba:	f9 1f       	adc	r31, r25
    d2bc:	01 90       	ld	r0, Z+
    d2be:	f0 81       	ld	r31, Z
    d2c0:	e0 2d       	mov	r30, r0
    d2c2:	84 81       	ldd	r24, Z+4	; 0x04
    d2c4:	8c 93       	st	X, r24

	str = (char*)malloc(col->size * sizeof(char) + 1);
	assert(str != NULL);
	str[col->size] = 0;

	for(i = 0; i < col->size; i++)
    d2c6:	8d 81       	ldd	r24, Y+5	; 0x05
    d2c8:	9e 81       	ldd	r25, Y+6	; 0x06
    d2ca:	01 96       	adiw	r24, 0x01	; 1
    d2cc:	9e 83       	std	Y+6, r25	; 0x06
    d2ce:	8d 83       	std	Y+5, r24	; 0x05
    d2d0:	e9 81       	ldd	r30, Y+1	; 0x01
    d2d2:	fa 81       	ldd	r31, Y+2	; 0x02
    d2d4:	22 81       	ldd	r18, Z+2	; 0x02
    d2d6:	33 81       	ldd	r19, Z+3	; 0x03
    d2d8:	8d 81       	ldd	r24, Y+5	; 0x05
    d2da:	9e 81       	ldd	r25, Y+6	; 0x06
    d2dc:	82 17       	cp	r24, r18
    d2de:	93 07       	cpc	r25, r19
    d2e0:	34 f2       	brlt	.-116    	; 0xd26e <unpackString+0x5e>
	{
		ASSERT_CHECK_CHAR((col->value[i]));
		str[i] = ((col->value[i])->value).charVal;
	}

	return str;
    d2e2:	8b 81       	ldd	r24, Y+3	; 0x03
    d2e4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    d2e6:	28 96       	adiw	r28, 0x08	; 8
    d2e8:	0f b6       	in	r0, 0x3f	; 63
    d2ea:	f8 94       	cli
    d2ec:	de bf       	out	0x3e, r29	; 62
    d2ee:	0f be       	out	0x3f, r0	; 63
    d2f0:	cd bf       	out	0x3d, r28	; 61
    d2f2:	cf 91       	pop	r28
    d2f4:	df 91       	pop	r29
    d2f6:	08 95       	ret

0000d2f8 <__vector_20>:
    d2f8:	1f 92       	push	r1
    d2fa:	0f 92       	push	r0
    d2fc:	00 90 5f 00 	lds	r0, 0x005F
    d300:	0f 92       	push	r0
    d302:	11 24       	eor	r1, r1
    d304:	00 90 5b 00 	lds	r0, 0x005B
    d308:	0f 92       	push	r0
    d30a:	2f 93       	push	r18
    d30c:	8f 93       	push	r24
    d30e:	9f 93       	push	r25
    d310:	ef 93       	push	r30
    d312:	ff 93       	push	r31
    d314:	cf 93       	push	r28
    d316:	df 93       	push	r29
    d318:	00 d0       	rcall	.+0      	; 0xd31a <__vector_20+0x22>
    d31a:	00 d0       	rcall	.+0      	; 0xd31c <__vector_20+0x24>
    d31c:	cd b7       	in	r28, 0x3d	; 61
    d31e:	de b7       	in	r29, 0x3e	; 62
    d320:	80 ec       	ldi	r24, 0xC0	; 192
    d322:	90 e0       	ldi	r25, 0x00	; 0
    d324:	fc 01       	movw	r30, r24
    d326:	80 81       	ld	r24, Z
    d328:	8a 83       	std	Y+2, r24	; 0x02
    d32a:	86 ec       	ldi	r24, 0xC6	; 198
    d32c:	90 e0       	ldi	r25, 0x00	; 0
    d32e:	fc 01       	movw	r30, r24
    d330:	80 81       	ld	r24, Z
    d332:	8b 83       	std	Y+3, r24	; 0x03
    d334:	8a 81       	ldd	r24, Y+2	; 0x02
    d336:	8c 71       	andi	r24, 0x1C	; 28
    d338:	89 83       	std	Y+1, r24	; 0x01
    d33a:	80 91 70 03 	lds	r24, 0x0370
    d33e:	8f 5f       	subi	r24, 0xFF	; 255
    d340:	8f 71       	andi	r24, 0x1F	; 31
    d342:	8c 83       	std	Y+4, r24	; 0x04
    d344:	80 91 71 03 	lds	r24, 0x0371
    d348:	9c 81       	ldd	r25, Y+4	; 0x04
    d34a:	98 17       	cp	r25, r24
    d34c:	19 f4       	brne	.+6      	; 0xd354 <__vector_20+0x5c>
    d34e:	82 e0       	ldi	r24, 0x02	; 2
    d350:	89 83       	std	Y+1, r24	; 0x01
    d352:	0b c0       	rjmp	.+22     	; 0xd36a <__vector_20+0x72>
    d354:	8c 81       	ldd	r24, Y+4	; 0x04
    d356:	80 93 70 03 	sts	0x0370, r24
    d35a:	8c 81       	ldd	r24, Y+4	; 0x04
    d35c:	88 2f       	mov	r24, r24
    d35e:	90 e0       	ldi	r25, 0x00	; 0
    d360:	82 5b       	subi	r24, 0xB2	; 178
    d362:	9c 4f       	sbci	r25, 0xFC	; 252
    d364:	2b 81       	ldd	r18, Y+3	; 0x03
    d366:	fc 01       	movw	r30, r24
    d368:	20 83       	st	Z, r18
    d36a:	90 91 72 03 	lds	r25, 0x0372
    d36e:	89 81       	ldd	r24, Y+1	; 0x01
    d370:	89 2b       	or	r24, r25
    d372:	80 93 72 03 	sts	0x0372, r24
    d376:	0f 90       	pop	r0
    d378:	0f 90       	pop	r0
    d37a:	0f 90       	pop	r0
    d37c:	0f 90       	pop	r0
    d37e:	df 91       	pop	r29
    d380:	cf 91       	pop	r28
    d382:	ff 91       	pop	r31
    d384:	ef 91       	pop	r30
    d386:	9f 91       	pop	r25
    d388:	8f 91       	pop	r24
    d38a:	2f 91       	pop	r18
    d38c:	0f 90       	pop	r0
    d38e:	00 92 5b 00 	sts	0x005B, r0
    d392:	0f 90       	pop	r0
    d394:	00 92 5f 00 	sts	0x005F, r0
    d398:	0f 90       	pop	r0
    d39a:	1f 90       	pop	r1
    d39c:	18 95       	reti

0000d39e <__vector_21>:
    d39e:	1f 92       	push	r1
    d3a0:	0f 92       	push	r0
    d3a2:	00 90 5f 00 	lds	r0, 0x005F
    d3a6:	0f 92       	push	r0
    d3a8:	11 24       	eor	r1, r1
    d3aa:	00 90 5b 00 	lds	r0, 0x005B
    d3ae:	0f 92       	push	r0
    d3b0:	2f 93       	push	r18
    d3b2:	3f 93       	push	r19
    d3b4:	8f 93       	push	r24
    d3b6:	9f 93       	push	r25
    d3b8:	ef 93       	push	r30
    d3ba:	ff 93       	push	r31
    d3bc:	cf 93       	push	r28
    d3be:	df 93       	push	r29
    d3c0:	1f 92       	push	r1
    d3c2:	cd b7       	in	r28, 0x3d	; 61
    d3c4:	de b7       	in	r29, 0x3e	; 62
    d3c6:	90 91 6e 03 	lds	r25, 0x036E
    d3ca:	80 91 6f 03 	lds	r24, 0x036F
    d3ce:	98 17       	cp	r25, r24
    d3d0:	a1 f0       	breq	.+40     	; 0xd3fa <__vector_21+0x5c>
    d3d2:	80 91 6f 03 	lds	r24, 0x036F
    d3d6:	8f 5f       	subi	r24, 0xFF	; 255
    d3d8:	8f 71       	andi	r24, 0x1F	; 31
    d3da:	89 83       	std	Y+1, r24	; 0x01
    d3dc:	89 81       	ldd	r24, Y+1	; 0x01
    d3de:	80 93 6f 03 	sts	0x036F, r24
    d3e2:	86 ec       	ldi	r24, 0xC6	; 198
    d3e4:	90 e0       	ldi	r25, 0x00	; 0
    d3e6:	29 81       	ldd	r18, Y+1	; 0x01
    d3e8:	22 2f       	mov	r18, r18
    d3ea:	30 e0       	ldi	r19, 0x00	; 0
    d3ec:	22 5d       	subi	r18, 0xD2	; 210
    d3ee:	3c 4f       	sbci	r19, 0xFC	; 252
    d3f0:	f9 01       	movw	r30, r18
    d3f2:	20 81       	ld	r18, Z
    d3f4:	fc 01       	movw	r30, r24
    d3f6:	20 83       	st	Z, r18
    d3f8:	09 c0       	rjmp	.+18     	; 0xd40c <__vector_21+0x6e>
    d3fa:	81 ec       	ldi	r24, 0xC1	; 193
    d3fc:	90 e0       	ldi	r25, 0x00	; 0
    d3fe:	21 ec       	ldi	r18, 0xC1	; 193
    d400:	30 e0       	ldi	r19, 0x00	; 0
    d402:	f9 01       	movw	r30, r18
    d404:	20 81       	ld	r18, Z
    d406:	2f 7d       	andi	r18, 0xDF	; 223
    d408:	fc 01       	movw	r30, r24
    d40a:	20 83       	st	Z, r18
    d40c:	0f 90       	pop	r0
    d40e:	df 91       	pop	r29
    d410:	cf 91       	pop	r28
    d412:	ff 91       	pop	r31
    d414:	ef 91       	pop	r30
    d416:	9f 91       	pop	r25
    d418:	8f 91       	pop	r24
    d41a:	3f 91       	pop	r19
    d41c:	2f 91       	pop	r18
    d41e:	0f 90       	pop	r0
    d420:	00 92 5b 00 	sts	0x005B, r0
    d424:	0f 90       	pop	r0
    d426:	00 92 5f 00 	sts	0x005F, r0
    d42a:	0f 90       	pop	r0
    d42c:	1f 90       	pop	r1
    d42e:	18 95       	reti

0000d430 <uart_init>:
    d430:	cf 93       	push	r28
    d432:	df 93       	push	r29
    d434:	00 d0       	rcall	.+0      	; 0xd436 <uart_init+0x6>
    d436:	cd b7       	in	r28, 0x3d	; 61
    d438:	de b7       	in	r29, 0x3e	; 62
    d43a:	9a 83       	std	Y+2, r25	; 0x02
    d43c:	89 83       	std	Y+1, r24	; 0x01
    d43e:	10 92 6e 03 	sts	0x036E, r1
    d442:	10 92 6f 03 	sts	0x036F, r1
    d446:	10 92 70 03 	sts	0x0370, r1
    d44a:	10 92 71 03 	sts	0x0371, r1
    d44e:	89 81       	ldd	r24, Y+1	; 0x01
    d450:	9a 81       	ldd	r25, Y+2	; 0x02
    d452:	99 23       	and	r25, r25
    d454:	2c f4       	brge	.+10     	; 0xd460 <uart_init+0x30>
    d456:	80 ec       	ldi	r24, 0xC0	; 192
    d458:	90 e0       	ldi	r25, 0x00	; 0
    d45a:	22 e0       	ldi	r18, 0x02	; 2
    d45c:	fc 01       	movw	r30, r24
    d45e:	20 83       	st	Z, r18
    d460:	85 ec       	ldi	r24, 0xC5	; 197
    d462:	90 e0       	ldi	r25, 0x00	; 0
    d464:	29 81       	ldd	r18, Y+1	; 0x01
    d466:	3a 81       	ldd	r19, Y+2	; 0x02
    d468:	23 2f       	mov	r18, r19
    d46a:	33 27       	eor	r19, r19
    d46c:	20 78       	andi	r18, 0x80	; 128
    d46e:	fc 01       	movw	r30, r24
    d470:	20 83       	st	Z, r18
    d472:	84 ec       	ldi	r24, 0xC4	; 196
    d474:	90 e0       	ldi	r25, 0x00	; 0
    d476:	29 81       	ldd	r18, Y+1	; 0x01
    d478:	fc 01       	movw	r30, r24
    d47a:	20 83       	st	Z, r18
    d47c:	81 ec       	ldi	r24, 0xC1	; 193
    d47e:	90 e0       	ldi	r25, 0x00	; 0
    d480:	28 e9       	ldi	r18, 0x98	; 152
    d482:	fc 01       	movw	r30, r24
    d484:	20 83       	st	Z, r18
    d486:	82 ec       	ldi	r24, 0xC2	; 194
    d488:	90 e0       	ldi	r25, 0x00	; 0
    d48a:	26 e0       	ldi	r18, 0x06	; 6
    d48c:	fc 01       	movw	r30, r24
    d48e:	20 83       	st	Z, r18
    d490:	0f 90       	pop	r0
    d492:	0f 90       	pop	r0
    d494:	df 91       	pop	r29
    d496:	cf 91       	pop	r28
    d498:	08 95       	ret

0000d49a <uart_getc>:
    d49a:	cf 93       	push	r28
    d49c:	df 93       	push	r29
    d49e:	00 d0       	rcall	.+0      	; 0xd4a0 <uart_getc+0x6>
    d4a0:	1f 92       	push	r1
    d4a2:	cd b7       	in	r28, 0x3d	; 61
    d4a4:	de b7       	in	r29, 0x3e	; 62
    d4a6:	90 91 70 03 	lds	r25, 0x0370
    d4aa:	80 91 71 03 	lds	r24, 0x0371
    d4ae:	98 17       	cp	r25, r24
    d4b0:	19 f4       	brne	.+6      	; 0xd4b8 <uart_getc+0x1e>
    d4b2:	80 e0       	ldi	r24, 0x00	; 0
    d4b4:	91 e0       	ldi	r25, 0x01	; 1
    d4b6:	1f c0       	rjmp	.+62     	; 0xd4f6 <uart_getc+0x5c>
    d4b8:	80 91 71 03 	lds	r24, 0x0371
    d4bc:	8f 5f       	subi	r24, 0xFF	; 255
    d4be:	8f 71       	andi	r24, 0x1F	; 31
    d4c0:	89 83       	std	Y+1, r24	; 0x01
    d4c2:	89 81       	ldd	r24, Y+1	; 0x01
    d4c4:	88 2f       	mov	r24, r24
    d4c6:	90 e0       	ldi	r25, 0x00	; 0
    d4c8:	82 5b       	subi	r24, 0xB2	; 178
    d4ca:	9c 4f       	sbci	r25, 0xFC	; 252
    d4cc:	fc 01       	movw	r30, r24
    d4ce:	80 81       	ld	r24, Z
    d4d0:	8a 83       	std	Y+2, r24	; 0x02
    d4d2:	80 91 72 03 	lds	r24, 0x0372
    d4d6:	8b 83       	std	Y+3, r24	; 0x03
    d4d8:	89 81       	ldd	r24, Y+1	; 0x01
    d4da:	80 93 71 03 	sts	0x0371, r24
    d4de:	10 92 72 03 	sts	0x0372, r1
    d4e2:	8b 81       	ldd	r24, Y+3	; 0x03
    d4e4:	88 2f       	mov	r24, r24
    d4e6:	90 e0       	ldi	r25, 0x00	; 0
    d4e8:	38 2f       	mov	r19, r24
    d4ea:	22 27       	eor	r18, r18
    d4ec:	8a 81       	ldd	r24, Y+2	; 0x02
    d4ee:	88 2f       	mov	r24, r24
    d4f0:	90 e0       	ldi	r25, 0x00	; 0
    d4f2:	82 0f       	add	r24, r18
    d4f4:	93 1f       	adc	r25, r19
    d4f6:	0f 90       	pop	r0
    d4f8:	0f 90       	pop	r0
    d4fa:	0f 90       	pop	r0
    d4fc:	df 91       	pop	r29
    d4fe:	cf 91       	pop	r28
    d500:	08 95       	ret

0000d502 <uart_putc>:
    d502:	cf 93       	push	r28
    d504:	df 93       	push	r29
    d506:	00 d0       	rcall	.+0      	; 0xd508 <uart_putc+0x6>
    d508:	cd b7       	in	r28, 0x3d	; 61
    d50a:	de b7       	in	r29, 0x3e	; 62
    d50c:	8a 83       	std	Y+2, r24	; 0x02
    d50e:	80 91 6e 03 	lds	r24, 0x036E
    d512:	8f 5f       	subi	r24, 0xFF	; 255
    d514:	8f 71       	andi	r24, 0x1F	; 31
    d516:	89 83       	std	Y+1, r24	; 0x01
    d518:	00 00       	nop
    d51a:	80 91 6f 03 	lds	r24, 0x036F
    d51e:	99 81       	ldd	r25, Y+1	; 0x01
    d520:	98 17       	cp	r25, r24
    d522:	d9 f3       	breq	.-10     	; 0xd51a <uart_putc+0x18>
    d524:	89 81       	ldd	r24, Y+1	; 0x01
    d526:	88 2f       	mov	r24, r24
    d528:	90 e0       	ldi	r25, 0x00	; 0
    d52a:	82 5d       	subi	r24, 0xD2	; 210
    d52c:	9c 4f       	sbci	r25, 0xFC	; 252
    d52e:	2a 81       	ldd	r18, Y+2	; 0x02
    d530:	fc 01       	movw	r30, r24
    d532:	20 83       	st	Z, r18
    d534:	89 81       	ldd	r24, Y+1	; 0x01
    d536:	80 93 6e 03 	sts	0x036E, r24
    d53a:	81 ec       	ldi	r24, 0xC1	; 193
    d53c:	90 e0       	ldi	r25, 0x00	; 0
    d53e:	21 ec       	ldi	r18, 0xC1	; 193
    d540:	30 e0       	ldi	r19, 0x00	; 0
    d542:	f9 01       	movw	r30, r18
    d544:	20 81       	ld	r18, Z
    d546:	20 62       	ori	r18, 0x20	; 32
    d548:	fc 01       	movw	r30, r24
    d54a:	20 83       	st	Z, r18
    d54c:	0f 90       	pop	r0
    d54e:	0f 90       	pop	r0
    d550:	df 91       	pop	r29
    d552:	cf 91       	pop	r28
    d554:	08 95       	ret

0000d556 <uart_puts>:
    d556:	cf 93       	push	r28
    d558:	df 93       	push	r29
    d55a:	00 d0       	rcall	.+0      	; 0xd55c <uart_puts+0x6>
    d55c:	cd b7       	in	r28, 0x3d	; 61
    d55e:	de b7       	in	r29, 0x3e	; 62
    d560:	9a 83       	std	Y+2, r25	; 0x02
    d562:	89 83       	std	Y+1, r24	; 0x01
    d564:	0b c0       	rjmp	.+22     	; 0xd57c <uart_puts+0x26>
    d566:	89 81       	ldd	r24, Y+1	; 0x01
    d568:	9a 81       	ldd	r25, Y+2	; 0x02
    d56a:	9c 01       	movw	r18, r24
    d56c:	2f 5f       	subi	r18, 0xFF	; 255
    d56e:	3f 4f       	sbci	r19, 0xFF	; 255
    d570:	3a 83       	std	Y+2, r19	; 0x02
    d572:	29 83       	std	Y+1, r18	; 0x01
    d574:	fc 01       	movw	r30, r24
    d576:	80 81       	ld	r24, Z
    d578:	0e 94 81 6a 	call	0xd502	; 0xd502 <uart_putc>
    d57c:	89 81       	ldd	r24, Y+1	; 0x01
    d57e:	9a 81       	ldd	r25, Y+2	; 0x02
    d580:	fc 01       	movw	r30, r24
    d582:	80 81       	ld	r24, Z
    d584:	88 23       	and	r24, r24
    d586:	79 f7       	brne	.-34     	; 0xd566 <uart_puts+0x10>
    d588:	0f 90       	pop	r0
    d58a:	0f 90       	pop	r0
    d58c:	df 91       	pop	r29
    d58e:	cf 91       	pop	r28
    d590:	08 95       	ret

0000d592 <uart_puts_p>:
    d592:	1f 93       	push	r17
    d594:	cf 93       	push	r28
    d596:	df 93       	push	r29
    d598:	00 d0       	rcall	.+0      	; 0xd59a <uart_puts_p+0x8>
    d59a:	00 d0       	rcall	.+0      	; 0xd59c <uart_puts_p+0xa>
    d59c:	1f 92       	push	r1
    d59e:	cd b7       	in	r28, 0x3d	; 61
    d5a0:	de b7       	in	r29, 0x3e	; 62
    d5a2:	9d 83       	std	Y+5, r25	; 0x05
    d5a4:	8c 83       	std	Y+4, r24	; 0x04
    d5a6:	03 c0       	rjmp	.+6      	; 0xd5ae <uart_puts_p+0x1c>
    d5a8:	81 2f       	mov	r24, r17
    d5aa:	0e 94 81 6a 	call	0xd502	; 0xd502 <uart_putc>
    d5ae:	8c 81       	ldd	r24, Y+4	; 0x04
    d5b0:	9d 81       	ldd	r25, Y+5	; 0x05
    d5b2:	9c 01       	movw	r18, r24
    d5b4:	2f 5f       	subi	r18, 0xFF	; 255
    d5b6:	3f 4f       	sbci	r19, 0xFF	; 255
    d5b8:	3d 83       	std	Y+5, r19	; 0x05
    d5ba:	2c 83       	std	Y+4, r18	; 0x04
    d5bc:	9a 83       	std	Y+2, r25	; 0x02
    d5be:	89 83       	std	Y+1, r24	; 0x01
    d5c0:	89 81       	ldd	r24, Y+1	; 0x01
    d5c2:	9a 81       	ldd	r25, Y+2	; 0x02
    d5c4:	fc 01       	movw	r30, r24
    d5c6:	84 91       	lpm	r24, Z+
    d5c8:	8b 83       	std	Y+3, r24	; 0x03
    d5ca:	8b 81       	ldd	r24, Y+3	; 0x03
    d5cc:	18 2f       	mov	r17, r24
    d5ce:	11 23       	and	r17, r17
    d5d0:	59 f7       	brne	.-42     	; 0xd5a8 <uart_puts_p+0x16>
    d5d2:	0f 90       	pop	r0
    d5d4:	0f 90       	pop	r0
    d5d6:	0f 90       	pop	r0
    d5d8:	0f 90       	pop	r0
    d5da:	0f 90       	pop	r0
    d5dc:	df 91       	pop	r29
    d5de:	cf 91       	pop	r28
    d5e0:	1f 91       	pop	r17
    d5e2:	08 95       	ret

0000d5e4 <__vector_28>:
    d5e4:	1f 92       	push	r1
    d5e6:	0f 92       	push	r0
    d5e8:	00 90 5f 00 	lds	r0, 0x005F
    d5ec:	0f 92       	push	r0
    d5ee:	11 24       	eor	r1, r1
    d5f0:	00 90 5b 00 	lds	r0, 0x005B
    d5f4:	0f 92       	push	r0
    d5f6:	2f 93       	push	r18
    d5f8:	8f 93       	push	r24
    d5fa:	9f 93       	push	r25
    d5fc:	ef 93       	push	r30
    d5fe:	ff 93       	push	r31
    d600:	cf 93       	push	r28
    d602:	df 93       	push	r29
    d604:	00 d0       	rcall	.+0      	; 0xd606 <__vector_28+0x22>
    d606:	00 d0       	rcall	.+0      	; 0xd608 <__vector_28+0x24>
    d608:	cd b7       	in	r28, 0x3d	; 61
    d60a:	de b7       	in	r29, 0x3e	; 62
    d60c:	88 ec       	ldi	r24, 0xC8	; 200
    d60e:	90 e0       	ldi	r25, 0x00	; 0
    d610:	fc 01       	movw	r30, r24
    d612:	80 81       	ld	r24, Z
    d614:	8a 83       	std	Y+2, r24	; 0x02
    d616:	8e ec       	ldi	r24, 0xCE	; 206
    d618:	90 e0       	ldi	r25, 0x00	; 0
    d61a:	fc 01       	movw	r30, r24
    d61c:	80 81       	ld	r24, Z
    d61e:	8b 83       	std	Y+3, r24	; 0x03
    d620:	8a 81       	ldd	r24, Y+2	; 0x02
    d622:	8c 71       	andi	r24, 0x1C	; 28
    d624:	89 83       	std	Y+1, r24	; 0x01
    d626:	80 91 b5 03 	lds	r24, 0x03B5
    d62a:	8f 5f       	subi	r24, 0xFF	; 255
    d62c:	8f 71       	andi	r24, 0x1F	; 31
    d62e:	8c 83       	std	Y+4, r24	; 0x04
    d630:	80 91 b6 03 	lds	r24, 0x03B6
    d634:	9c 81       	ldd	r25, Y+4	; 0x04
    d636:	98 17       	cp	r25, r24
    d638:	19 f4       	brne	.+6      	; 0xd640 <__vector_28+0x5c>
    d63a:	82 e0       	ldi	r24, 0x02	; 2
    d63c:	89 83       	std	Y+1, r24	; 0x01
    d63e:	0b c0       	rjmp	.+22     	; 0xd656 <__vector_28+0x72>
    d640:	8c 81       	ldd	r24, Y+4	; 0x04
    d642:	80 93 b5 03 	sts	0x03B5, r24
    d646:	8c 81       	ldd	r24, Y+4	; 0x04
    d648:	88 2f       	mov	r24, r24
    d64a:	90 e0       	ldi	r25, 0x00	; 0
    d64c:	8d 56       	subi	r24, 0x6D	; 109
    d64e:	9c 4f       	sbci	r25, 0xFC	; 252
    d650:	2b 81       	ldd	r18, Y+3	; 0x03
    d652:	fc 01       	movw	r30, r24
    d654:	20 83       	st	Z, r18
    d656:	90 91 b7 03 	lds	r25, 0x03B7
    d65a:	89 81       	ldd	r24, Y+1	; 0x01
    d65c:	89 2b       	or	r24, r25
    d65e:	80 93 b7 03 	sts	0x03B7, r24
    d662:	0f 90       	pop	r0
    d664:	0f 90       	pop	r0
    d666:	0f 90       	pop	r0
    d668:	0f 90       	pop	r0
    d66a:	df 91       	pop	r29
    d66c:	cf 91       	pop	r28
    d66e:	ff 91       	pop	r31
    d670:	ef 91       	pop	r30
    d672:	9f 91       	pop	r25
    d674:	8f 91       	pop	r24
    d676:	2f 91       	pop	r18
    d678:	0f 90       	pop	r0
    d67a:	00 92 5b 00 	sts	0x005B, r0
    d67e:	0f 90       	pop	r0
    d680:	00 92 5f 00 	sts	0x005F, r0
    d684:	0f 90       	pop	r0
    d686:	1f 90       	pop	r1
    d688:	18 95       	reti

0000d68a <__vector_29>:
    d68a:	1f 92       	push	r1
    d68c:	0f 92       	push	r0
    d68e:	00 90 5f 00 	lds	r0, 0x005F
    d692:	0f 92       	push	r0
    d694:	11 24       	eor	r1, r1
    d696:	00 90 5b 00 	lds	r0, 0x005B
    d69a:	0f 92       	push	r0
    d69c:	2f 93       	push	r18
    d69e:	3f 93       	push	r19
    d6a0:	8f 93       	push	r24
    d6a2:	9f 93       	push	r25
    d6a4:	ef 93       	push	r30
    d6a6:	ff 93       	push	r31
    d6a8:	cf 93       	push	r28
    d6aa:	df 93       	push	r29
    d6ac:	1f 92       	push	r1
    d6ae:	cd b7       	in	r28, 0x3d	; 61
    d6b0:	de b7       	in	r29, 0x3e	; 62
    d6b2:	90 91 b3 03 	lds	r25, 0x03B3
    d6b6:	80 91 b4 03 	lds	r24, 0x03B4
    d6ba:	98 17       	cp	r25, r24
    d6bc:	a1 f0       	breq	.+40     	; 0xd6e6 <__vector_29+0x5c>
    d6be:	80 91 b4 03 	lds	r24, 0x03B4
    d6c2:	8f 5f       	subi	r24, 0xFF	; 255
    d6c4:	8f 71       	andi	r24, 0x1F	; 31
    d6c6:	89 83       	std	Y+1, r24	; 0x01
    d6c8:	89 81       	ldd	r24, Y+1	; 0x01
    d6ca:	80 93 b4 03 	sts	0x03B4, r24
    d6ce:	8e ec       	ldi	r24, 0xCE	; 206
    d6d0:	90 e0       	ldi	r25, 0x00	; 0
    d6d2:	29 81       	ldd	r18, Y+1	; 0x01
    d6d4:	22 2f       	mov	r18, r18
    d6d6:	30 e0       	ldi	r19, 0x00	; 0
    d6d8:	2d 58       	subi	r18, 0x8D	; 141
    d6da:	3c 4f       	sbci	r19, 0xFC	; 252
    d6dc:	f9 01       	movw	r30, r18
    d6de:	20 81       	ld	r18, Z
    d6e0:	fc 01       	movw	r30, r24
    d6e2:	20 83       	st	Z, r18
    d6e4:	09 c0       	rjmp	.+18     	; 0xd6f8 <__vector_29+0x6e>
    d6e6:	89 ec       	ldi	r24, 0xC9	; 201
    d6e8:	90 e0       	ldi	r25, 0x00	; 0
    d6ea:	29 ec       	ldi	r18, 0xC9	; 201
    d6ec:	30 e0       	ldi	r19, 0x00	; 0
    d6ee:	f9 01       	movw	r30, r18
    d6f0:	20 81       	ld	r18, Z
    d6f2:	2f 7d       	andi	r18, 0xDF	; 223
    d6f4:	fc 01       	movw	r30, r24
    d6f6:	20 83       	st	Z, r18
    d6f8:	0f 90       	pop	r0
    d6fa:	df 91       	pop	r29
    d6fc:	cf 91       	pop	r28
    d6fe:	ff 91       	pop	r31
    d700:	ef 91       	pop	r30
    d702:	9f 91       	pop	r25
    d704:	8f 91       	pop	r24
    d706:	3f 91       	pop	r19
    d708:	2f 91       	pop	r18
    d70a:	0f 90       	pop	r0
    d70c:	00 92 5b 00 	sts	0x005B, r0
    d710:	0f 90       	pop	r0
    d712:	00 92 5f 00 	sts	0x005F, r0
    d716:	0f 90       	pop	r0
    d718:	1f 90       	pop	r1
    d71a:	18 95       	reti

0000d71c <uart1_init>:
    d71c:	cf 93       	push	r28
    d71e:	df 93       	push	r29
    d720:	00 d0       	rcall	.+0      	; 0xd722 <uart1_init+0x6>
    d722:	cd b7       	in	r28, 0x3d	; 61
    d724:	de b7       	in	r29, 0x3e	; 62
    d726:	9a 83       	std	Y+2, r25	; 0x02
    d728:	89 83       	std	Y+1, r24	; 0x01
    d72a:	10 92 b3 03 	sts	0x03B3, r1
    d72e:	10 92 b4 03 	sts	0x03B4, r1
    d732:	10 92 b5 03 	sts	0x03B5, r1
    d736:	10 92 b6 03 	sts	0x03B6, r1
    d73a:	89 81       	ldd	r24, Y+1	; 0x01
    d73c:	9a 81       	ldd	r25, Y+2	; 0x02
    d73e:	99 23       	and	r25, r25
    d740:	2c f4       	brge	.+10     	; 0xd74c <uart1_init+0x30>
    d742:	88 ec       	ldi	r24, 0xC8	; 200
    d744:	90 e0       	ldi	r25, 0x00	; 0
    d746:	22 e0       	ldi	r18, 0x02	; 2
    d748:	fc 01       	movw	r30, r24
    d74a:	20 83       	st	Z, r18
    d74c:	8d ec       	ldi	r24, 0xCD	; 205
    d74e:	90 e0       	ldi	r25, 0x00	; 0
    d750:	29 81       	ldd	r18, Y+1	; 0x01
    d752:	3a 81       	ldd	r19, Y+2	; 0x02
    d754:	23 2f       	mov	r18, r19
    d756:	33 27       	eor	r19, r19
    d758:	20 78       	andi	r18, 0x80	; 128
    d75a:	fc 01       	movw	r30, r24
    d75c:	20 83       	st	Z, r18
    d75e:	8c ec       	ldi	r24, 0xCC	; 204
    d760:	90 e0       	ldi	r25, 0x00	; 0
    d762:	29 81       	ldd	r18, Y+1	; 0x01
    d764:	fc 01       	movw	r30, r24
    d766:	20 83       	st	Z, r18
    d768:	89 ec       	ldi	r24, 0xC9	; 201
    d76a:	90 e0       	ldi	r25, 0x00	; 0
    d76c:	28 e9       	ldi	r18, 0x98	; 152
    d76e:	fc 01       	movw	r30, r24
    d770:	20 83       	st	Z, r18
    d772:	8a ec       	ldi	r24, 0xCA	; 202
    d774:	90 e0       	ldi	r25, 0x00	; 0
    d776:	26 e0       	ldi	r18, 0x06	; 6
    d778:	fc 01       	movw	r30, r24
    d77a:	20 83       	st	Z, r18
    d77c:	0f 90       	pop	r0
    d77e:	0f 90       	pop	r0
    d780:	df 91       	pop	r29
    d782:	cf 91       	pop	r28
    d784:	08 95       	ret

0000d786 <uart1_getc>:
    d786:	cf 93       	push	r28
    d788:	df 93       	push	r29
    d78a:	00 d0       	rcall	.+0      	; 0xd78c <uart1_getc+0x6>
    d78c:	00 d0       	rcall	.+0      	; 0xd78e <uart1_getc+0x8>
    d78e:	cd b7       	in	r28, 0x3d	; 61
    d790:	de b7       	in	r29, 0x3e	; 62
    d792:	90 91 b5 03 	lds	r25, 0x03B5
    d796:	80 91 b6 03 	lds	r24, 0x03B6
    d79a:	98 17       	cp	r25, r24
    d79c:	19 f4       	brne	.+6      	; 0xd7a4 <uart1_getc+0x1e>
    d79e:	80 e0       	ldi	r24, 0x00	; 0
    d7a0:	91 e0       	ldi	r25, 0x01	; 1
    d7a2:	22 c0       	rjmp	.+68     	; 0xd7e8 <uart1_getc+0x62>
    d7a4:	80 91 b6 03 	lds	r24, 0x03B6
    d7a8:	8f 5f       	subi	r24, 0xFF	; 255
    d7aa:	8f 71       	andi	r24, 0x1F	; 31
    d7ac:	89 83       	std	Y+1, r24	; 0x01
    d7ae:	89 81       	ldd	r24, Y+1	; 0x01
    d7b0:	88 2f       	mov	r24, r24
    d7b2:	90 e0       	ldi	r25, 0x00	; 0
    d7b4:	8d 56       	subi	r24, 0x6D	; 109
    d7b6:	9c 4f       	sbci	r25, 0xFC	; 252
    d7b8:	fc 01       	movw	r30, r24
    d7ba:	80 81       	ld	r24, Z
    d7bc:	88 2f       	mov	r24, r24
    d7be:	90 e0       	ldi	r25, 0x00	; 0
    d7c0:	9b 83       	std	Y+3, r25	; 0x03
    d7c2:	8a 83       	std	Y+2, r24	; 0x02
    d7c4:	80 91 b7 03 	lds	r24, 0x03B7
    d7c8:	8c 83       	std	Y+4, r24	; 0x04
    d7ca:	89 81       	ldd	r24, Y+1	; 0x01
    d7cc:	80 93 b6 03 	sts	0x03B6, r24
    d7d0:	10 92 b7 03 	sts	0x03B7, r1
    d7d4:	8c 81       	ldd	r24, Y+4	; 0x04
    d7d6:	88 2f       	mov	r24, r24
    d7d8:	90 e0       	ldi	r25, 0x00	; 0
    d7da:	98 2f       	mov	r25, r24
    d7dc:	88 27       	eor	r24, r24
    d7de:	9c 01       	movw	r18, r24
    d7e0:	8a 81       	ldd	r24, Y+2	; 0x02
    d7e2:	9b 81       	ldd	r25, Y+3	; 0x03
    d7e4:	82 0f       	add	r24, r18
    d7e6:	93 1f       	adc	r25, r19
    d7e8:	0f 90       	pop	r0
    d7ea:	0f 90       	pop	r0
    d7ec:	0f 90       	pop	r0
    d7ee:	0f 90       	pop	r0
    d7f0:	df 91       	pop	r29
    d7f2:	cf 91       	pop	r28
    d7f4:	08 95       	ret

0000d7f6 <uart1_putc>:
    d7f6:	cf 93       	push	r28
    d7f8:	df 93       	push	r29
    d7fa:	00 d0       	rcall	.+0      	; 0xd7fc <uart1_putc+0x6>
    d7fc:	cd b7       	in	r28, 0x3d	; 61
    d7fe:	de b7       	in	r29, 0x3e	; 62
    d800:	8a 83       	std	Y+2, r24	; 0x02
    d802:	80 91 b3 03 	lds	r24, 0x03B3
    d806:	8f 5f       	subi	r24, 0xFF	; 255
    d808:	8f 71       	andi	r24, 0x1F	; 31
    d80a:	89 83       	std	Y+1, r24	; 0x01
    d80c:	00 00       	nop
    d80e:	80 91 b4 03 	lds	r24, 0x03B4
    d812:	99 81       	ldd	r25, Y+1	; 0x01
    d814:	98 17       	cp	r25, r24
    d816:	d9 f3       	breq	.-10     	; 0xd80e <uart1_putc+0x18>
    d818:	89 81       	ldd	r24, Y+1	; 0x01
    d81a:	88 2f       	mov	r24, r24
    d81c:	90 e0       	ldi	r25, 0x00	; 0
    d81e:	8d 58       	subi	r24, 0x8D	; 141
    d820:	9c 4f       	sbci	r25, 0xFC	; 252
    d822:	2a 81       	ldd	r18, Y+2	; 0x02
    d824:	fc 01       	movw	r30, r24
    d826:	20 83       	st	Z, r18
    d828:	89 81       	ldd	r24, Y+1	; 0x01
    d82a:	80 93 b3 03 	sts	0x03B3, r24
    d82e:	89 ec       	ldi	r24, 0xC9	; 201
    d830:	90 e0       	ldi	r25, 0x00	; 0
    d832:	29 ec       	ldi	r18, 0xC9	; 201
    d834:	30 e0       	ldi	r19, 0x00	; 0
    d836:	f9 01       	movw	r30, r18
    d838:	20 81       	ld	r18, Z
    d83a:	20 62       	ori	r18, 0x20	; 32
    d83c:	fc 01       	movw	r30, r24
    d83e:	20 83       	st	Z, r18
    d840:	0f 90       	pop	r0
    d842:	0f 90       	pop	r0
    d844:	df 91       	pop	r29
    d846:	cf 91       	pop	r28
    d848:	08 95       	ret

0000d84a <uart1_puts>:
    d84a:	cf 93       	push	r28
    d84c:	df 93       	push	r29
    d84e:	00 d0       	rcall	.+0      	; 0xd850 <uart1_puts+0x6>
    d850:	cd b7       	in	r28, 0x3d	; 61
    d852:	de b7       	in	r29, 0x3e	; 62
    d854:	9a 83       	std	Y+2, r25	; 0x02
    d856:	89 83       	std	Y+1, r24	; 0x01
    d858:	0b c0       	rjmp	.+22     	; 0xd870 <uart1_puts+0x26>
    d85a:	89 81       	ldd	r24, Y+1	; 0x01
    d85c:	9a 81       	ldd	r25, Y+2	; 0x02
    d85e:	9c 01       	movw	r18, r24
    d860:	2f 5f       	subi	r18, 0xFF	; 255
    d862:	3f 4f       	sbci	r19, 0xFF	; 255
    d864:	3a 83       	std	Y+2, r19	; 0x02
    d866:	29 83       	std	Y+1, r18	; 0x01
    d868:	fc 01       	movw	r30, r24
    d86a:	80 81       	ld	r24, Z
    d86c:	0e 94 fb 6b 	call	0xd7f6	; 0xd7f6 <uart1_putc>
    d870:	89 81       	ldd	r24, Y+1	; 0x01
    d872:	9a 81       	ldd	r25, Y+2	; 0x02
    d874:	fc 01       	movw	r30, r24
    d876:	80 81       	ld	r24, Z
    d878:	88 23       	and	r24, r24
    d87a:	79 f7       	brne	.-34     	; 0xd85a <uart1_puts+0x10>
    d87c:	0f 90       	pop	r0
    d87e:	0f 90       	pop	r0
    d880:	df 91       	pop	r29
    d882:	cf 91       	pop	r28
    d884:	08 95       	ret

0000d886 <uart1_puts_p>:
    d886:	1f 93       	push	r17
    d888:	cf 93       	push	r28
    d88a:	df 93       	push	r29
    d88c:	00 d0       	rcall	.+0      	; 0xd88e <uart1_puts_p+0x8>
    d88e:	00 d0       	rcall	.+0      	; 0xd890 <uart1_puts_p+0xa>
    d890:	1f 92       	push	r1
    d892:	cd b7       	in	r28, 0x3d	; 61
    d894:	de b7       	in	r29, 0x3e	; 62
    d896:	9d 83       	std	Y+5, r25	; 0x05
    d898:	8c 83       	std	Y+4, r24	; 0x04
    d89a:	03 c0       	rjmp	.+6      	; 0xd8a2 <uart1_puts_p+0x1c>
    d89c:	81 2f       	mov	r24, r17
    d89e:	0e 94 fb 6b 	call	0xd7f6	; 0xd7f6 <uart1_putc>
    d8a2:	8c 81       	ldd	r24, Y+4	; 0x04
    d8a4:	9d 81       	ldd	r25, Y+5	; 0x05
    d8a6:	9c 01       	movw	r18, r24
    d8a8:	2f 5f       	subi	r18, 0xFF	; 255
    d8aa:	3f 4f       	sbci	r19, 0xFF	; 255
    d8ac:	3d 83       	std	Y+5, r19	; 0x05
    d8ae:	2c 83       	std	Y+4, r18	; 0x04
    d8b0:	9a 83       	std	Y+2, r25	; 0x02
    d8b2:	89 83       	std	Y+1, r24	; 0x01
    d8b4:	89 81       	ldd	r24, Y+1	; 0x01
    d8b6:	9a 81       	ldd	r25, Y+2	; 0x02
    d8b8:	fc 01       	movw	r30, r24
    d8ba:	84 91       	lpm	r24, Z+
    d8bc:	8b 83       	std	Y+3, r24	; 0x03
    d8be:	8b 81       	ldd	r24, Y+3	; 0x03
    d8c0:	18 2f       	mov	r17, r24
    d8c2:	11 23       	and	r17, r17
    d8c4:	59 f7       	brne	.-42     	; 0xd89c <uart1_puts_p+0x16>
    d8c6:	0f 90       	pop	r0
    d8c8:	0f 90       	pop	r0
    d8ca:	0f 90       	pop	r0
    d8cc:	0f 90       	pop	r0
    d8ce:	0f 90       	pop	r0
    d8d0:	df 91       	pop	r29
    d8d2:	cf 91       	pop	r28
    d8d4:	1f 91       	pop	r17
    d8d6:	08 95       	ret

0000d8d8 <calloc>:
    d8d8:	0f 93       	push	r16
    d8da:	1f 93       	push	r17
    d8dc:	cf 93       	push	r28
    d8de:	df 93       	push	r29
    d8e0:	68 9f       	mul	r22, r24
    d8e2:	80 01       	movw	r16, r0
    d8e4:	69 9f       	mul	r22, r25
    d8e6:	10 0d       	add	r17, r0
    d8e8:	78 9f       	mul	r23, r24
    d8ea:	10 0d       	add	r17, r0
    d8ec:	11 24       	eor	r1, r1
    d8ee:	c8 01       	movw	r24, r16
    d8f0:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    d8f4:	ec 01       	movw	r28, r24
    d8f6:	00 97       	sbiw	r24, 0x00	; 0
    d8f8:	29 f0       	breq	.+10     	; 0xd904 <calloc+0x2c>
    d8fa:	60 e0       	ldi	r22, 0x00	; 0
    d8fc:	70 e0       	ldi	r23, 0x00	; 0
    d8fe:	a8 01       	movw	r20, r16
    d900:	0e 94 7a 6e 	call	0xdcf4	; 0xdcf4 <memset>
    d904:	ce 01       	movw	r24, r28
    d906:	df 91       	pop	r29
    d908:	cf 91       	pop	r28
    d90a:	1f 91       	pop	r17
    d90c:	0f 91       	pop	r16
    d90e:	08 95       	ret

0000d910 <malloc>:
    d910:	cf 93       	push	r28
    d912:	df 93       	push	r29
    d914:	bc 01       	movw	r22, r24
    d916:	82 30       	cpi	r24, 0x02	; 2
    d918:	91 05       	cpc	r25, r1
    d91a:	10 f4       	brcc	.+4      	; 0xd920 <malloc+0x10>
    d91c:	62 e0       	ldi	r22, 0x02	; 2
    d91e:	70 e0       	ldi	r23, 0x00	; 0
    d920:	a0 91 fe 03 	lds	r26, 0x03FE
    d924:	b0 91 ff 03 	lds	r27, 0x03FF
    d928:	ed 01       	movw	r28, r26
    d92a:	e0 e0       	ldi	r30, 0x00	; 0
    d92c:	f0 e0       	ldi	r31, 0x00	; 0
    d92e:	40 e0       	ldi	r20, 0x00	; 0
    d930:	50 e0       	ldi	r21, 0x00	; 0
    d932:	21 c0       	rjmp	.+66     	; 0xd976 <malloc+0x66>
    d934:	88 81       	ld	r24, Y
    d936:	99 81       	ldd	r25, Y+1	; 0x01
    d938:	86 17       	cp	r24, r22
    d93a:	97 07       	cpc	r25, r23
    d93c:	69 f4       	brne	.+26     	; 0xd958 <malloc+0x48>
    d93e:	8a 81       	ldd	r24, Y+2	; 0x02
    d940:	9b 81       	ldd	r25, Y+3	; 0x03
    d942:	30 97       	sbiw	r30, 0x00	; 0
    d944:	19 f0       	breq	.+6      	; 0xd94c <malloc+0x3c>
    d946:	93 83       	std	Z+3, r25	; 0x03
    d948:	82 83       	std	Z+2, r24	; 0x02
    d94a:	04 c0       	rjmp	.+8      	; 0xd954 <malloc+0x44>
    d94c:	90 93 ff 03 	sts	0x03FF, r25
    d950:	80 93 fe 03 	sts	0x03FE, r24
    d954:	fe 01       	movw	r30, r28
    d956:	34 c0       	rjmp	.+104    	; 0xd9c0 <malloc+0xb0>
    d958:	68 17       	cp	r22, r24
    d95a:	79 07       	cpc	r23, r25
    d95c:	38 f4       	brcc	.+14     	; 0xd96c <malloc+0x5c>
    d95e:	41 15       	cp	r20, r1
    d960:	51 05       	cpc	r21, r1
    d962:	19 f0       	breq	.+6      	; 0xd96a <malloc+0x5a>
    d964:	84 17       	cp	r24, r20
    d966:	95 07       	cpc	r25, r21
    d968:	08 f4       	brcc	.+2      	; 0xd96c <malloc+0x5c>
    d96a:	ac 01       	movw	r20, r24
    d96c:	fe 01       	movw	r30, r28
    d96e:	8a 81       	ldd	r24, Y+2	; 0x02
    d970:	9b 81       	ldd	r25, Y+3	; 0x03
    d972:	9c 01       	movw	r18, r24
    d974:	e9 01       	movw	r28, r18
    d976:	20 97       	sbiw	r28, 0x00	; 0
    d978:	e9 f6       	brne	.-70     	; 0xd934 <malloc+0x24>
    d97a:	41 15       	cp	r20, r1
    d97c:	51 05       	cpc	r21, r1
    d97e:	a9 f1       	breq	.+106    	; 0xd9ea <malloc+0xda>
    d980:	ca 01       	movw	r24, r20
    d982:	86 1b       	sub	r24, r22
    d984:	97 0b       	sbc	r25, r23
    d986:	04 97       	sbiw	r24, 0x04	; 4
    d988:	08 f4       	brcc	.+2      	; 0xd98c <malloc+0x7c>
    d98a:	ba 01       	movw	r22, r20
    d98c:	e0 e0       	ldi	r30, 0x00	; 0
    d98e:	f0 e0       	ldi	r31, 0x00	; 0
    d990:	2a c0       	rjmp	.+84     	; 0xd9e6 <malloc+0xd6>
    d992:	8d 91       	ld	r24, X+
    d994:	9c 91       	ld	r25, X
    d996:	11 97       	sbiw	r26, 0x01	; 1
    d998:	84 17       	cp	r24, r20
    d99a:	95 07       	cpc	r25, r21
    d99c:	f9 f4       	brne	.+62     	; 0xd9dc <malloc+0xcc>
    d99e:	64 17       	cp	r22, r20
    d9a0:	75 07       	cpc	r23, r21
    d9a2:	81 f4       	brne	.+32     	; 0xd9c4 <malloc+0xb4>
    d9a4:	12 96       	adiw	r26, 0x02	; 2
    d9a6:	8d 91       	ld	r24, X+
    d9a8:	9c 91       	ld	r25, X
    d9aa:	13 97       	sbiw	r26, 0x03	; 3
    d9ac:	30 97       	sbiw	r30, 0x00	; 0
    d9ae:	19 f0       	breq	.+6      	; 0xd9b6 <malloc+0xa6>
    d9b0:	93 83       	std	Z+3, r25	; 0x03
    d9b2:	82 83       	std	Z+2, r24	; 0x02
    d9b4:	04 c0       	rjmp	.+8      	; 0xd9be <malloc+0xae>
    d9b6:	90 93 ff 03 	sts	0x03FF, r25
    d9ba:	80 93 fe 03 	sts	0x03FE, r24
    d9be:	fd 01       	movw	r30, r26
    d9c0:	32 96       	adiw	r30, 0x02	; 2
    d9c2:	4f c0       	rjmp	.+158    	; 0xda62 <malloc+0x152>
    d9c4:	ca 01       	movw	r24, r20
    d9c6:	86 1b       	sub	r24, r22
    d9c8:	97 0b       	sbc	r25, r23
    d9ca:	fd 01       	movw	r30, r26
    d9cc:	e8 0f       	add	r30, r24
    d9ce:	f9 1f       	adc	r31, r25
    d9d0:	61 93       	st	Z+, r22
    d9d2:	71 93       	st	Z+, r23
    d9d4:	02 97       	sbiw	r24, 0x02	; 2
    d9d6:	8d 93       	st	X+, r24
    d9d8:	9c 93       	st	X, r25
    d9da:	43 c0       	rjmp	.+134    	; 0xda62 <malloc+0x152>
    d9dc:	fd 01       	movw	r30, r26
    d9de:	82 81       	ldd	r24, Z+2	; 0x02
    d9e0:	93 81       	ldd	r25, Z+3	; 0x03
    d9e2:	9c 01       	movw	r18, r24
    d9e4:	d9 01       	movw	r26, r18
    d9e6:	10 97       	sbiw	r26, 0x00	; 0
    d9e8:	a1 f6       	brne	.-88     	; 0xd992 <malloc+0x82>
    d9ea:	80 91 fc 03 	lds	r24, 0x03FC
    d9ee:	90 91 fd 03 	lds	r25, 0x03FD
    d9f2:	89 2b       	or	r24, r25
    d9f4:	41 f4       	brne	.+16     	; 0xda06 <malloc+0xf6>
    d9f6:	80 91 bc 02 	lds	r24, 0x02BC
    d9fa:	90 91 bd 02 	lds	r25, 0x02BD
    d9fe:	90 93 fd 03 	sts	0x03FD, r25
    da02:	80 93 fc 03 	sts	0x03FC, r24
    da06:	40 91 be 02 	lds	r20, 0x02BE
    da0a:	50 91 bf 02 	lds	r21, 0x02BF
    da0e:	41 15       	cp	r20, r1
    da10:	51 05       	cpc	r21, r1
    da12:	41 f4       	brne	.+16     	; 0xda24 <malloc+0x114>
    da14:	4d b7       	in	r20, 0x3d	; 61
    da16:	5e b7       	in	r21, 0x3e	; 62
    da18:	80 91 ba 02 	lds	r24, 0x02BA
    da1c:	90 91 bb 02 	lds	r25, 0x02BB
    da20:	48 1b       	sub	r20, r24
    da22:	59 0b       	sbc	r21, r25
    da24:	20 91 fc 03 	lds	r18, 0x03FC
    da28:	30 91 fd 03 	lds	r19, 0x03FD
    da2c:	24 17       	cp	r18, r20
    da2e:	35 07       	cpc	r19, r21
    da30:	b0 f4       	brcc	.+44     	; 0xda5e <malloc+0x14e>
    da32:	ca 01       	movw	r24, r20
    da34:	82 1b       	sub	r24, r18
    da36:	93 0b       	sbc	r25, r19
    da38:	86 17       	cp	r24, r22
    da3a:	97 07       	cpc	r25, r23
    da3c:	80 f0       	brcs	.+32     	; 0xda5e <malloc+0x14e>
    da3e:	ab 01       	movw	r20, r22
    da40:	4e 5f       	subi	r20, 0xFE	; 254
    da42:	5f 4f       	sbci	r21, 0xFF	; 255
    da44:	84 17       	cp	r24, r20
    da46:	95 07       	cpc	r25, r21
    da48:	50 f0       	brcs	.+20     	; 0xda5e <malloc+0x14e>
    da4a:	42 0f       	add	r20, r18
    da4c:	53 1f       	adc	r21, r19
    da4e:	50 93 fd 03 	sts	0x03FD, r21
    da52:	40 93 fc 03 	sts	0x03FC, r20
    da56:	f9 01       	movw	r30, r18
    da58:	61 93       	st	Z+, r22
    da5a:	71 93       	st	Z+, r23
    da5c:	02 c0       	rjmp	.+4      	; 0xda62 <malloc+0x152>
    da5e:	e0 e0       	ldi	r30, 0x00	; 0
    da60:	f0 e0       	ldi	r31, 0x00	; 0
    da62:	cf 01       	movw	r24, r30
    da64:	df 91       	pop	r29
    da66:	cf 91       	pop	r28
    da68:	08 95       	ret

0000da6a <free>:
    da6a:	cf 93       	push	r28
    da6c:	df 93       	push	r29
    da6e:	00 97       	sbiw	r24, 0x00	; 0
    da70:	09 f4       	brne	.+2      	; 0xda74 <free+0xa>
    da72:	50 c0       	rjmp	.+160    	; 0xdb14 <free+0xaa>
    da74:	ec 01       	movw	r28, r24
    da76:	22 97       	sbiw	r28, 0x02	; 2
    da78:	1b 82       	std	Y+3, r1	; 0x03
    da7a:	1a 82       	std	Y+2, r1	; 0x02
    da7c:	a0 91 fe 03 	lds	r26, 0x03FE
    da80:	b0 91 ff 03 	lds	r27, 0x03FF
    da84:	10 97       	sbiw	r26, 0x00	; 0
    da86:	09 f1       	breq	.+66     	; 0xdaca <free+0x60>
    da88:	40 e0       	ldi	r20, 0x00	; 0
    da8a:	50 e0       	ldi	r21, 0x00	; 0
    da8c:	ac 17       	cp	r26, r28
    da8e:	bd 07       	cpc	r27, r29
    da90:	08 f1       	brcs	.+66     	; 0xdad4 <free+0x6a>
    da92:	bb 83       	std	Y+3, r27	; 0x03
    da94:	aa 83       	std	Y+2, r26	; 0x02
    da96:	fe 01       	movw	r30, r28
    da98:	21 91       	ld	r18, Z+
    da9a:	31 91       	ld	r19, Z+
    da9c:	e2 0f       	add	r30, r18
    da9e:	f3 1f       	adc	r31, r19
    daa0:	ae 17       	cp	r26, r30
    daa2:	bf 07       	cpc	r27, r31
    daa4:	79 f4       	brne	.+30     	; 0xdac4 <free+0x5a>
    daa6:	8d 91       	ld	r24, X+
    daa8:	9c 91       	ld	r25, X
    daaa:	11 97       	sbiw	r26, 0x01	; 1
    daac:	28 0f       	add	r18, r24
    daae:	39 1f       	adc	r19, r25
    dab0:	2e 5f       	subi	r18, 0xFE	; 254
    dab2:	3f 4f       	sbci	r19, 0xFF	; 255
    dab4:	39 83       	std	Y+1, r19	; 0x01
    dab6:	28 83       	st	Y, r18
    dab8:	12 96       	adiw	r26, 0x02	; 2
    daba:	8d 91       	ld	r24, X+
    dabc:	9c 91       	ld	r25, X
    dabe:	13 97       	sbiw	r26, 0x03	; 3
    dac0:	9b 83       	std	Y+3, r25	; 0x03
    dac2:	8a 83       	std	Y+2, r24	; 0x02
    dac4:	41 15       	cp	r20, r1
    dac6:	51 05       	cpc	r21, r1
    dac8:	71 f4       	brne	.+28     	; 0xdae6 <free+0x7c>
    daca:	d0 93 ff 03 	sts	0x03FF, r29
    dace:	c0 93 fe 03 	sts	0x03FE, r28
    dad2:	20 c0       	rjmp	.+64     	; 0xdb14 <free+0xaa>
    dad4:	12 96       	adiw	r26, 0x02	; 2
    dad6:	8d 91       	ld	r24, X+
    dad8:	9c 91       	ld	r25, X
    dada:	13 97       	sbiw	r26, 0x03	; 3
    dadc:	ad 01       	movw	r20, r26
    dade:	00 97       	sbiw	r24, 0x00	; 0
    dae0:	11 f0       	breq	.+4      	; 0xdae6 <free+0x7c>
    dae2:	dc 01       	movw	r26, r24
    dae4:	d3 cf       	rjmp	.-90     	; 0xda8c <free+0x22>
    dae6:	fa 01       	movw	r30, r20
    dae8:	d3 83       	std	Z+3, r29	; 0x03
    daea:	c2 83       	std	Z+2, r28	; 0x02
    daec:	21 91       	ld	r18, Z+
    daee:	31 91       	ld	r19, Z+
    daf0:	e2 0f       	add	r30, r18
    daf2:	f3 1f       	adc	r31, r19
    daf4:	ce 17       	cp	r28, r30
    daf6:	df 07       	cpc	r29, r31
    daf8:	69 f4       	brne	.+26     	; 0xdb14 <free+0xaa>
    dafa:	88 81       	ld	r24, Y
    dafc:	99 81       	ldd	r25, Y+1	; 0x01
    dafe:	28 0f       	add	r18, r24
    db00:	39 1f       	adc	r19, r25
    db02:	2e 5f       	subi	r18, 0xFE	; 254
    db04:	3f 4f       	sbci	r19, 0xFF	; 255
    db06:	fa 01       	movw	r30, r20
    db08:	31 83       	std	Z+1, r19	; 0x01
    db0a:	20 83       	st	Z, r18
    db0c:	8a 81       	ldd	r24, Y+2	; 0x02
    db0e:	9b 81       	ldd	r25, Y+3	; 0x03
    db10:	93 83       	std	Z+3, r25	; 0x03
    db12:	82 83       	std	Z+2, r24	; 0x02
    db14:	df 91       	pop	r29
    db16:	cf 91       	pop	r28
    db18:	08 95       	ret

0000db1a <realloc>:
    db1a:	8f 92       	push	r8
    db1c:	9f 92       	push	r9
    db1e:	af 92       	push	r10
    db20:	bf 92       	push	r11
    db22:	cf 92       	push	r12
    db24:	df 92       	push	r13
    db26:	ef 92       	push	r14
    db28:	ff 92       	push	r15
    db2a:	0f 93       	push	r16
    db2c:	1f 93       	push	r17
    db2e:	cf 93       	push	r28
    db30:	df 93       	push	r29
    db32:	8c 01       	movw	r16, r24
    db34:	00 97       	sbiw	r24, 0x00	; 0
    db36:	29 f4       	brne	.+10     	; 0xdb42 <realloc+0x28>
    db38:	cb 01       	movw	r24, r22
    db3a:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    db3e:	8c 01       	movw	r16, r24
    db40:	ba c0       	rjmp	.+372    	; 0xdcb6 <realloc+0x19c>
    db42:	9e ef       	ldi	r25, 0xFE	; 254
    db44:	e9 2e       	mov	r14, r25
    db46:	9f ef       	ldi	r25, 0xFF	; 255
    db48:	f9 2e       	mov	r15, r25
    db4a:	e0 0e       	add	r14, r16
    db4c:	f1 1e       	adc	r15, r17
    db4e:	58 01       	movw	r10, r16
    db50:	a6 0e       	add	r10, r22
    db52:	b7 1e       	adc	r11, r23
    db54:	ae 14       	cp	r10, r14
    db56:	bf 04       	cpc	r11, r15
    db58:	08 f4       	brcc	.+2      	; 0xdb5c <realloc+0x42>
    db5a:	ab c0       	rjmp	.+342    	; 0xdcb2 <realloc+0x198>
    db5c:	8e ef       	ldi	r24, 0xFE	; 254
    db5e:	88 2e       	mov	r8, r24
    db60:	8f ef       	ldi	r24, 0xFF	; 255
    db62:	98 2e       	mov	r9, r24
    db64:	8a 0c       	add	r8, r10
    db66:	9b 1c       	adc	r9, r11
    db68:	e7 01       	movw	r28, r14
    db6a:	48 81       	ld	r20, Y
    db6c:	59 81       	ldd	r21, Y+1	; 0x01
    db6e:	46 17       	cp	r20, r22
    db70:	57 07       	cpc	r21, r23
    db72:	b8 f0       	brcs	.+46     	; 0xdba2 <realloc+0x88>
    db74:	45 30       	cpi	r20, 0x05	; 5
    db76:	51 05       	cpc	r21, r1
    db78:	08 f4       	brcc	.+2      	; 0xdb7c <realloc+0x62>
    db7a:	9d c0       	rjmp	.+314    	; 0xdcb6 <realloc+0x19c>
    db7c:	ca 01       	movw	r24, r20
    db7e:	04 97       	sbiw	r24, 0x04	; 4
    db80:	86 17       	cp	r24, r22
    db82:	97 07       	cpc	r25, r23
    db84:	08 f4       	brcc	.+2      	; 0xdb88 <realloc+0x6e>
    db86:	97 c0       	rjmp	.+302    	; 0xdcb6 <realloc+0x19c>
    db88:	42 50       	subi	r20, 0x02	; 2
    db8a:	50 40       	sbci	r21, 0x00	; 0
    db8c:	46 1b       	sub	r20, r22
    db8e:	57 0b       	sbc	r21, r23
    db90:	f4 01       	movw	r30, r8
    db92:	51 83       	std	Z+1, r21	; 0x01
    db94:	40 83       	st	Z, r20
    db96:	79 83       	std	Y+1, r23	; 0x01
    db98:	68 83       	st	Y, r22
    db9a:	c5 01       	movw	r24, r10
    db9c:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
    dba0:	8a c0       	rjmp	.+276    	; 0xdcb6 <realloc+0x19c>
    dba2:	6b 01       	movw	r12, r22
    dba4:	c4 1a       	sub	r12, r20
    dba6:	d5 0a       	sbc	r13, r21
    dba8:	e0 91 fe 03 	lds	r30, 0x03FE
    dbac:	f0 91 ff 03 	lds	r31, 0x03FF
    dbb0:	a0 e0       	ldi	r26, 0x00	; 0
    dbb2:	b0 e0       	ldi	r27, 0x00	; 0
    dbb4:	c0 e0       	ldi	r28, 0x00	; 0
    dbb6:	d0 e0       	ldi	r29, 0x00	; 0
    dbb8:	42 c0       	rjmp	.+132    	; 0xdc3e <realloc+0x124>
    dbba:	e8 15       	cp	r30, r8
    dbbc:	f9 05       	cpc	r31, r9
    dbbe:	a1 f5       	brne	.+104    	; 0xdc28 <realloc+0x10e>
    dbc0:	20 81       	ld	r18, Z
    dbc2:	31 81       	ldd	r19, Z+1	; 0x01
    dbc4:	2c 15       	cp	r18, r12
    dbc6:	3d 05       	cpc	r19, r13
    dbc8:	78 f1       	brcs	.+94     	; 0xdc28 <realloc+0x10e>
    dbca:	c9 01       	movw	r24, r18
    dbcc:	02 96       	adiw	r24, 0x02	; 2
    dbce:	8c 15       	cp	r24, r12
    dbd0:	9d 05       	cpc	r25, r13
    dbd2:	a8 f0       	brcs	.+42     	; 0xdbfe <realloc+0xe4>
    dbd4:	4e 5f       	subi	r20, 0xFE	; 254
    dbd6:	5f 4f       	sbci	r21, 0xFF	; 255
    dbd8:	42 0f       	add	r20, r18
    dbda:	53 1f       	adc	r21, r19
    dbdc:	e7 01       	movw	r28, r14
    dbde:	59 83       	std	Y+1, r21	; 0x01
    dbe0:	48 83       	st	Y, r20
    dbe2:	22 81       	ldd	r18, Z+2	; 0x02
    dbe4:	33 81       	ldd	r19, Z+3	; 0x03
    dbe6:	10 97       	sbiw	r26, 0x00	; 0
    dbe8:	29 f0       	breq	.+10     	; 0xdbf4 <realloc+0xda>
    dbea:	13 96       	adiw	r26, 0x03	; 3
    dbec:	3c 93       	st	X, r19
    dbee:	2e 93       	st	-X, r18
    dbf0:	12 97       	sbiw	r26, 0x02	; 2
    dbf2:	61 c0       	rjmp	.+194    	; 0xdcb6 <realloc+0x19c>
    dbf4:	30 93 ff 03 	sts	0x03FF, r19
    dbf8:	20 93 fe 03 	sts	0x03FE, r18
    dbfc:	5c c0       	rjmp	.+184    	; 0xdcb6 <realloc+0x19c>
    dbfe:	22 50       	subi	r18, 0x02	; 2
    dc00:	30 40       	sbci	r19, 0x00	; 0
    dc02:	2c 19       	sub	r18, r12
    dc04:	3d 09       	sbc	r19, r13
    dc06:	31 83       	std	Z+1, r19	; 0x01
    dc08:	20 83       	st	Z, r18
    dc0a:	10 97       	sbiw	r26, 0x00	; 0
    dc0c:	29 f0       	breq	.+10     	; 0xdc18 <realloc+0xfe>
    dc0e:	13 96       	adiw	r26, 0x03	; 3
    dc10:	fc 93       	st	X, r31
    dc12:	ee 93       	st	-X, r30
    dc14:	12 97       	sbiw	r26, 0x02	; 2
    dc16:	04 c0       	rjmp	.+8      	; 0xdc20 <realloc+0x106>
    dc18:	f0 93 ff 03 	sts	0x03FF, r31
    dc1c:	e0 93 fe 03 	sts	0x03FE, r30
    dc20:	f7 01       	movw	r30, r14
    dc22:	71 83       	std	Z+1, r23	; 0x01
    dc24:	60 83       	st	Z, r22
    dc26:	47 c0       	rjmp	.+142    	; 0xdcb6 <realloc+0x19c>
    dc28:	80 81       	ld	r24, Z
    dc2a:	91 81       	ldd	r25, Z+1	; 0x01
    dc2c:	c8 17       	cp	r28, r24
    dc2e:	d9 07       	cpc	r29, r25
    dc30:	08 f4       	brcc	.+2      	; 0xdc34 <realloc+0x11a>
    dc32:	ec 01       	movw	r28, r24
    dc34:	df 01       	movw	r26, r30
    dc36:	82 81       	ldd	r24, Z+2	; 0x02
    dc38:	93 81       	ldd	r25, Z+3	; 0x03
    dc3a:	9c 01       	movw	r18, r24
    dc3c:	f9 01       	movw	r30, r18
    dc3e:	30 97       	sbiw	r30, 0x00	; 0
    dc40:	09 f0       	breq	.+2      	; 0xdc44 <realloc+0x12a>
    dc42:	bb cf       	rjmp	.-138    	; 0xdbba <realloc+0xa0>
    dc44:	40 0f       	add	r20, r16
    dc46:	51 1f       	adc	r21, r17
    dc48:	80 91 fc 03 	lds	r24, 0x03FC
    dc4c:	90 91 fd 03 	lds	r25, 0x03FD
    dc50:	84 17       	cp	r24, r20
    dc52:	95 07       	cpc	r25, r21
    dc54:	e9 f4       	brne	.+58     	; 0xdc90 <realloc+0x176>
    dc56:	c6 17       	cp	r28, r22
    dc58:	d7 07       	cpc	r29, r23
    dc5a:	d0 f4       	brcc	.+52     	; 0xdc90 <realloc+0x176>
    dc5c:	20 91 be 02 	lds	r18, 0x02BE
    dc60:	30 91 bf 02 	lds	r19, 0x02BF
    dc64:	21 15       	cp	r18, r1
    dc66:	31 05       	cpc	r19, r1
    dc68:	41 f4       	brne	.+16     	; 0xdc7a <realloc+0x160>
    dc6a:	2d b7       	in	r18, 0x3d	; 61
    dc6c:	3e b7       	in	r19, 0x3e	; 62
    dc6e:	80 91 ba 02 	lds	r24, 0x02BA
    dc72:	90 91 bb 02 	lds	r25, 0x02BB
    dc76:	28 1b       	sub	r18, r24
    dc78:	39 0b       	sbc	r19, r25
    dc7a:	a2 16       	cp	r10, r18
    dc7c:	b3 06       	cpc	r11, r19
    dc7e:	c8 f4       	brcc	.+50     	; 0xdcb2 <realloc+0x198>
    dc80:	b0 92 fd 03 	sts	0x03FD, r11
    dc84:	a0 92 fc 03 	sts	0x03FC, r10
    dc88:	e7 01       	movw	r28, r14
    dc8a:	79 83       	std	Y+1, r23	; 0x01
    dc8c:	68 83       	st	Y, r22
    dc8e:	13 c0       	rjmp	.+38     	; 0xdcb6 <realloc+0x19c>
    dc90:	cb 01       	movw	r24, r22
    dc92:	0e 94 88 6c 	call	0xd910	; 0xd910 <malloc>
    dc96:	ec 01       	movw	r28, r24
    dc98:	00 97       	sbiw	r24, 0x00	; 0
    dc9a:	59 f0       	breq	.+22     	; 0xdcb2 <realloc+0x198>
    dc9c:	f7 01       	movw	r30, r14
    dc9e:	40 81       	ld	r20, Z
    dca0:	51 81       	ldd	r21, Z+1	; 0x01
    dca2:	b8 01       	movw	r22, r16
    dca4:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <memcpy>
    dca8:	c8 01       	movw	r24, r16
    dcaa:	0e 94 35 6d 	call	0xda6a	; 0xda6a <free>
    dcae:	8e 01       	movw	r16, r28
    dcb0:	02 c0       	rjmp	.+4      	; 0xdcb6 <realloc+0x19c>
    dcb2:	00 e0       	ldi	r16, 0x00	; 0
    dcb4:	10 e0       	ldi	r17, 0x00	; 0
    dcb6:	c8 01       	movw	r24, r16
    dcb8:	df 91       	pop	r29
    dcba:	cf 91       	pop	r28
    dcbc:	1f 91       	pop	r17
    dcbe:	0f 91       	pop	r16
    dcc0:	ff 90       	pop	r15
    dcc2:	ef 90       	pop	r14
    dcc4:	df 90       	pop	r13
    dcc6:	cf 90       	pop	r12
    dcc8:	bf 90       	pop	r11
    dcca:	af 90       	pop	r10
    dccc:	9f 90       	pop	r9
    dcce:	8f 90       	pop	r8
    dcd0:	08 95       	ret

0000dcd2 <abort>:
    dcd2:	81 e0       	ldi	r24, 0x01	; 1
    dcd4:	90 e0       	ldi	r25, 0x00	; 0
    dcd6:	f8 94       	cli
    dcd8:	0c 94 c3 72 	jmp	0xe586	; 0xe586 <_exit>

0000dcdc <exit>:
    dcdc:	f8 94       	cli
    dcde:	0c 94 c3 72 	jmp	0xe586	; 0xe586 <_exit>

0000dce2 <memcpy>:
    dce2:	fb 01       	movw	r30, r22
    dce4:	dc 01       	movw	r26, r24
    dce6:	02 c0       	rjmp	.+4      	; 0xdcec <memcpy+0xa>
    dce8:	01 90       	ld	r0, Z+
    dcea:	0d 92       	st	X+, r0
    dcec:	41 50       	subi	r20, 0x01	; 1
    dcee:	50 40       	sbci	r21, 0x00	; 0
    dcf0:	d8 f7       	brcc	.-10     	; 0xdce8 <memcpy+0x6>
    dcf2:	08 95       	ret

0000dcf4 <memset>:
    dcf4:	dc 01       	movw	r26, r24
    dcf6:	01 c0       	rjmp	.+2      	; 0xdcfa <memset+0x6>
    dcf8:	6d 93       	st	X+, r22
    dcfa:	41 50       	subi	r20, 0x01	; 1
    dcfc:	50 40       	sbci	r21, 0x00	; 0
    dcfe:	e0 f7       	brcc	.-8      	; 0xdcf8 <memset+0x4>
    dd00:	08 95       	ret

0000dd02 <strcmp>:
    dd02:	fb 01       	movw	r30, r22
    dd04:	dc 01       	movw	r26, r24
    dd06:	8d 91       	ld	r24, X+
    dd08:	01 90       	ld	r0, Z+
    dd0a:	80 19       	sub	r24, r0
    dd0c:	01 10       	cpse	r0, r1
    dd0e:	d9 f3       	breq	.-10     	; 0xdd06 <strcmp+0x4>
    dd10:	99 0b       	sbc	r25, r25
    dd12:	08 95       	ret

0000dd14 <strcpy>:
    dd14:	fb 01       	movw	r30, r22
    dd16:	dc 01       	movw	r26, r24
    dd18:	01 90       	ld	r0, Z+
    dd1a:	0d 92       	st	X+, r0
    dd1c:	00 20       	and	r0, r0
    dd1e:	e1 f7       	brne	.-8      	; 0xdd18 <strcpy+0x4>
    dd20:	08 95       	ret

0000dd22 <strlen>:
    dd22:	fc 01       	movw	r30, r24
    dd24:	01 90       	ld	r0, Z+
    dd26:	00 20       	and	r0, r0
    dd28:	e9 f7       	brne	.-6      	; 0xdd24 <strlen+0x2>
    dd2a:	80 95       	com	r24
    dd2c:	90 95       	com	r25
    dd2e:	8e 0f       	add	r24, r30
    dd30:	9f 1f       	adc	r25, r31
    dd32:	08 95       	ret

0000dd34 <itoa>:
    dd34:	fb 01       	movw	r30, r22
    dd36:	9f 01       	movw	r18, r30
    dd38:	e8 94       	clt
    dd3a:	42 30       	cpi	r20, 0x02	; 2
    dd3c:	c4 f0       	brlt	.+48     	; 0xdd6e <itoa+0x3a>
    dd3e:	45 32       	cpi	r20, 0x25	; 37
    dd40:	b4 f4       	brge	.+44     	; 0xdd6e <itoa+0x3a>
    dd42:	4a 30       	cpi	r20, 0x0A	; 10
    dd44:	29 f4       	brne	.+10     	; 0xdd50 <itoa+0x1c>
    dd46:	97 fb       	bst	r25, 7
    dd48:	1e f4       	brtc	.+6      	; 0xdd50 <itoa+0x1c>
    dd4a:	90 95       	com	r25
    dd4c:	81 95       	neg	r24
    dd4e:	9f 4f       	sbci	r25, 0xFF	; 255
    dd50:	64 2f       	mov	r22, r20
    dd52:	77 27       	eor	r23, r23
    dd54:	0e 94 af 72 	call	0xe55e	; 0xe55e <__udivmodhi4>
    dd58:	80 5d       	subi	r24, 0xD0	; 208
    dd5a:	8a 33       	cpi	r24, 0x3A	; 58
    dd5c:	0c f0       	brlt	.+2      	; 0xdd60 <itoa+0x2c>
    dd5e:	89 5d       	subi	r24, 0xD9	; 217
    dd60:	81 93       	st	Z+, r24
    dd62:	cb 01       	movw	r24, r22
    dd64:	00 97       	sbiw	r24, 0x00	; 0
    dd66:	a1 f7       	brne	.-24     	; 0xdd50 <itoa+0x1c>
    dd68:	16 f4       	brtc	.+4      	; 0xdd6e <itoa+0x3a>
    dd6a:	5d e2       	ldi	r21, 0x2D	; 45
    dd6c:	51 93       	st	Z+, r21
    dd6e:	10 82       	st	Z, r1
    dd70:	c9 01       	movw	r24, r18
    dd72:	0c 94 75 71 	jmp	0xe2ea	; 0xe2ea <strrev>

0000dd76 <__subsf3>:
    dd76:	50 58       	subi	r21, 0x80	; 128

0000dd78 <__addsf3>:
    dd78:	bb 27       	eor	r27, r27
    dd7a:	aa 27       	eor	r26, r26
    dd7c:	0e d0       	rcall	.+28     	; 0xdd9a <__addsf3x>
    dd7e:	b1 c1       	rjmp	.+866    	; 0xe0e2 <__fp_round>
    dd80:	a2 d1       	rcall	.+836    	; 0xe0c6 <__fp_pscA>
    dd82:	30 f0       	brcs	.+12     	; 0xdd90 <__addsf3+0x18>
    dd84:	a7 d1       	rcall	.+846    	; 0xe0d4 <__fp_pscB>
    dd86:	20 f0       	brcs	.+8      	; 0xdd90 <__addsf3+0x18>
    dd88:	31 f4       	brne	.+12     	; 0xdd96 <__addsf3+0x1e>
    dd8a:	9f 3f       	cpi	r25, 0xFF	; 255
    dd8c:	11 f4       	brne	.+4      	; 0xdd92 <__addsf3+0x1a>
    dd8e:	1e f4       	brtc	.+6      	; 0xdd96 <__addsf3+0x1e>
    dd90:	97 c1       	rjmp	.+814    	; 0xe0c0 <__fp_nan>
    dd92:	0e f4       	brtc	.+2      	; 0xdd96 <__addsf3+0x1e>
    dd94:	e0 95       	com	r30
    dd96:	e7 fb       	bst	r30, 7
    dd98:	64 c1       	rjmp	.+712    	; 0xe062 <__fp_inf>

0000dd9a <__addsf3x>:
    dd9a:	e9 2f       	mov	r30, r25
    dd9c:	b3 d1       	rcall	.+870    	; 0xe104 <__fp_split3>
    dd9e:	80 f3       	brcs	.-32     	; 0xdd80 <__addsf3+0x8>
    dda0:	ba 17       	cp	r27, r26
    dda2:	62 07       	cpc	r22, r18
    dda4:	73 07       	cpc	r23, r19
    dda6:	84 07       	cpc	r24, r20
    dda8:	95 07       	cpc	r25, r21
    ddaa:	18 f0       	brcs	.+6      	; 0xddb2 <__addsf3x+0x18>
    ddac:	71 f4       	brne	.+28     	; 0xddca <__addsf3x+0x30>
    ddae:	9e f5       	brtc	.+102    	; 0xde16 <__addsf3x+0x7c>
    ddb0:	e2 c1       	rjmp	.+964    	; 0xe176 <__fp_zero>
    ddb2:	0e f4       	brtc	.+2      	; 0xddb6 <__addsf3x+0x1c>
    ddb4:	e0 95       	com	r30
    ddb6:	0b 2e       	mov	r0, r27
    ddb8:	ba 2f       	mov	r27, r26
    ddba:	a0 2d       	mov	r26, r0
    ddbc:	0b 01       	movw	r0, r22
    ddbe:	b9 01       	movw	r22, r18
    ddc0:	90 01       	movw	r18, r0
    ddc2:	0c 01       	movw	r0, r24
    ddc4:	ca 01       	movw	r24, r20
    ddc6:	a0 01       	movw	r20, r0
    ddc8:	11 24       	eor	r1, r1
    ddca:	ff 27       	eor	r31, r31
    ddcc:	59 1b       	sub	r21, r25
    ddce:	99 f0       	breq	.+38     	; 0xddf6 <__addsf3x+0x5c>
    ddd0:	59 3f       	cpi	r21, 0xF9	; 249
    ddd2:	50 f4       	brcc	.+20     	; 0xdde8 <__addsf3x+0x4e>
    ddd4:	50 3e       	cpi	r21, 0xE0	; 224
    ddd6:	68 f1       	brcs	.+90     	; 0xde32 <__addsf3x+0x98>
    ddd8:	1a 16       	cp	r1, r26
    ddda:	f0 40       	sbci	r31, 0x00	; 0
    dddc:	a2 2f       	mov	r26, r18
    ddde:	23 2f       	mov	r18, r19
    dde0:	34 2f       	mov	r19, r20
    dde2:	44 27       	eor	r20, r20
    dde4:	58 5f       	subi	r21, 0xF8	; 248
    dde6:	f3 cf       	rjmp	.-26     	; 0xddce <__addsf3x+0x34>
    dde8:	46 95       	lsr	r20
    ddea:	37 95       	ror	r19
    ddec:	27 95       	ror	r18
    ddee:	a7 95       	ror	r26
    ddf0:	f0 40       	sbci	r31, 0x00	; 0
    ddf2:	53 95       	inc	r21
    ddf4:	c9 f7       	brne	.-14     	; 0xdde8 <__addsf3x+0x4e>
    ddf6:	7e f4       	brtc	.+30     	; 0xde16 <__addsf3x+0x7c>
    ddf8:	1f 16       	cp	r1, r31
    ddfa:	ba 0b       	sbc	r27, r26
    ddfc:	62 0b       	sbc	r22, r18
    ddfe:	73 0b       	sbc	r23, r19
    de00:	84 0b       	sbc	r24, r20
    de02:	ba f0       	brmi	.+46     	; 0xde32 <__addsf3x+0x98>
    de04:	91 50       	subi	r25, 0x01	; 1
    de06:	a1 f0       	breq	.+40     	; 0xde30 <__addsf3x+0x96>
    de08:	ff 0f       	add	r31, r31
    de0a:	bb 1f       	adc	r27, r27
    de0c:	66 1f       	adc	r22, r22
    de0e:	77 1f       	adc	r23, r23
    de10:	88 1f       	adc	r24, r24
    de12:	c2 f7       	brpl	.-16     	; 0xde04 <__addsf3x+0x6a>
    de14:	0e c0       	rjmp	.+28     	; 0xde32 <__addsf3x+0x98>
    de16:	ba 0f       	add	r27, r26
    de18:	62 1f       	adc	r22, r18
    de1a:	73 1f       	adc	r23, r19
    de1c:	84 1f       	adc	r24, r20
    de1e:	48 f4       	brcc	.+18     	; 0xde32 <__addsf3x+0x98>
    de20:	87 95       	ror	r24
    de22:	77 95       	ror	r23
    de24:	67 95       	ror	r22
    de26:	b7 95       	ror	r27
    de28:	f7 95       	ror	r31
    de2a:	9e 3f       	cpi	r25, 0xFE	; 254
    de2c:	08 f0       	brcs	.+2      	; 0xde30 <__addsf3x+0x96>
    de2e:	b3 cf       	rjmp	.-154    	; 0xdd96 <__addsf3+0x1e>
    de30:	93 95       	inc	r25
    de32:	88 0f       	add	r24, r24
    de34:	08 f0       	brcs	.+2      	; 0xde38 <__addsf3x+0x9e>
    de36:	99 27       	eor	r25, r25
    de38:	ee 0f       	add	r30, r30
    de3a:	97 95       	ror	r25
    de3c:	87 95       	ror	r24
    de3e:	08 95       	ret

0000de40 <__cmpsf2>:
    de40:	ec d0       	rcall	.+472    	; 0xe01a <__fp_cmp>
    de42:	08 f4       	brcc	.+2      	; 0xde46 <__cmpsf2+0x6>
    de44:	81 e0       	ldi	r24, 0x01	; 1
    de46:	08 95       	ret

0000de48 <__divsf3>:
    de48:	0c d0       	rcall	.+24     	; 0xde62 <__divsf3x>
    de4a:	4b c1       	rjmp	.+662    	; 0xe0e2 <__fp_round>
    de4c:	43 d1       	rcall	.+646    	; 0xe0d4 <__fp_pscB>
    de4e:	40 f0       	brcs	.+16     	; 0xde60 <__divsf3+0x18>
    de50:	3a d1       	rcall	.+628    	; 0xe0c6 <__fp_pscA>
    de52:	30 f0       	brcs	.+12     	; 0xde60 <__divsf3+0x18>
    de54:	21 f4       	brne	.+8      	; 0xde5e <__divsf3+0x16>
    de56:	5f 3f       	cpi	r21, 0xFF	; 255
    de58:	19 f0       	breq	.+6      	; 0xde60 <__divsf3+0x18>
    de5a:	03 c1       	rjmp	.+518    	; 0xe062 <__fp_inf>
    de5c:	51 11       	cpse	r21, r1
    de5e:	8c c1       	rjmp	.+792    	; 0xe178 <__fp_szero>
    de60:	2f c1       	rjmp	.+606    	; 0xe0c0 <__fp_nan>

0000de62 <__divsf3x>:
    de62:	50 d1       	rcall	.+672    	; 0xe104 <__fp_split3>
    de64:	98 f3       	brcs	.-26     	; 0xde4c <__divsf3+0x4>

0000de66 <__divsf3_pse>:
    de66:	99 23       	and	r25, r25
    de68:	c9 f3       	breq	.-14     	; 0xde5c <__divsf3+0x14>
    de6a:	55 23       	and	r21, r21
    de6c:	b1 f3       	breq	.-20     	; 0xde5a <__divsf3+0x12>
    de6e:	95 1b       	sub	r25, r21
    de70:	55 0b       	sbc	r21, r21
    de72:	bb 27       	eor	r27, r27
    de74:	aa 27       	eor	r26, r26
    de76:	62 17       	cp	r22, r18
    de78:	73 07       	cpc	r23, r19
    de7a:	84 07       	cpc	r24, r20
    de7c:	38 f0       	brcs	.+14     	; 0xde8c <__divsf3_pse+0x26>
    de7e:	9f 5f       	subi	r25, 0xFF	; 255
    de80:	5f 4f       	sbci	r21, 0xFF	; 255
    de82:	22 0f       	add	r18, r18
    de84:	33 1f       	adc	r19, r19
    de86:	44 1f       	adc	r20, r20
    de88:	aa 1f       	adc	r26, r26
    de8a:	a9 f3       	breq	.-22     	; 0xde76 <__divsf3_pse+0x10>
    de8c:	33 d0       	rcall	.+102    	; 0xdef4 <__divsf3_pse+0x8e>
    de8e:	0e 2e       	mov	r0, r30
    de90:	3a f0       	brmi	.+14     	; 0xdea0 <__divsf3_pse+0x3a>
    de92:	e0 e8       	ldi	r30, 0x80	; 128
    de94:	30 d0       	rcall	.+96     	; 0xdef6 <__divsf3_pse+0x90>
    de96:	91 50       	subi	r25, 0x01	; 1
    de98:	50 40       	sbci	r21, 0x00	; 0
    de9a:	e6 95       	lsr	r30
    de9c:	00 1c       	adc	r0, r0
    de9e:	ca f7       	brpl	.-14     	; 0xde92 <__divsf3_pse+0x2c>
    dea0:	29 d0       	rcall	.+82     	; 0xdef4 <__divsf3_pse+0x8e>
    dea2:	fe 2f       	mov	r31, r30
    dea4:	27 d0       	rcall	.+78     	; 0xdef4 <__divsf3_pse+0x8e>
    dea6:	66 0f       	add	r22, r22
    dea8:	77 1f       	adc	r23, r23
    deaa:	88 1f       	adc	r24, r24
    deac:	bb 1f       	adc	r27, r27
    deae:	26 17       	cp	r18, r22
    deb0:	37 07       	cpc	r19, r23
    deb2:	48 07       	cpc	r20, r24
    deb4:	ab 07       	cpc	r26, r27
    deb6:	b0 e8       	ldi	r27, 0x80	; 128
    deb8:	09 f0       	breq	.+2      	; 0xdebc <__divsf3_pse+0x56>
    deba:	bb 0b       	sbc	r27, r27
    debc:	80 2d       	mov	r24, r0
    debe:	bf 01       	movw	r22, r30
    dec0:	ff 27       	eor	r31, r31
    dec2:	93 58       	subi	r25, 0x83	; 131
    dec4:	5f 4f       	sbci	r21, 0xFF	; 255
    dec6:	2a f0       	brmi	.+10     	; 0xded2 <__divsf3_pse+0x6c>
    dec8:	9e 3f       	cpi	r25, 0xFE	; 254
    deca:	51 05       	cpc	r21, r1
    decc:	68 f0       	brcs	.+26     	; 0xdee8 <__divsf3_pse+0x82>
    dece:	c9 c0       	rjmp	.+402    	; 0xe062 <__fp_inf>
    ded0:	53 c1       	rjmp	.+678    	; 0xe178 <__fp_szero>
    ded2:	5f 3f       	cpi	r21, 0xFF	; 255
    ded4:	ec f3       	brlt	.-6      	; 0xded0 <__divsf3_pse+0x6a>
    ded6:	98 3e       	cpi	r25, 0xE8	; 232
    ded8:	dc f3       	brlt	.-10     	; 0xded0 <__divsf3_pse+0x6a>
    deda:	86 95       	lsr	r24
    dedc:	77 95       	ror	r23
    dede:	67 95       	ror	r22
    dee0:	b7 95       	ror	r27
    dee2:	f7 95       	ror	r31
    dee4:	9f 5f       	subi	r25, 0xFF	; 255
    dee6:	c9 f7       	brne	.-14     	; 0xdeda <__divsf3_pse+0x74>
    dee8:	88 0f       	add	r24, r24
    deea:	91 1d       	adc	r25, r1
    deec:	96 95       	lsr	r25
    deee:	87 95       	ror	r24
    def0:	97 f9       	bld	r25, 7
    def2:	08 95       	ret
    def4:	e1 e0       	ldi	r30, 0x01	; 1
    def6:	66 0f       	add	r22, r22
    def8:	77 1f       	adc	r23, r23
    defa:	88 1f       	adc	r24, r24
    defc:	bb 1f       	adc	r27, r27
    defe:	62 17       	cp	r22, r18
    df00:	73 07       	cpc	r23, r19
    df02:	84 07       	cpc	r24, r20
    df04:	ba 07       	cpc	r27, r26
    df06:	20 f0       	brcs	.+8      	; 0xdf10 <__divsf3_pse+0xaa>
    df08:	62 1b       	sub	r22, r18
    df0a:	73 0b       	sbc	r23, r19
    df0c:	84 0b       	sbc	r24, r20
    df0e:	ba 0b       	sbc	r27, r26
    df10:	ee 1f       	adc	r30, r30
    df12:	88 f7       	brcc	.-30     	; 0xdef6 <__divsf3_pse+0x90>
    df14:	e0 95       	com	r30
    df16:	08 95       	ret

0000df18 <__fixsfsi>:
    df18:	04 d0       	rcall	.+8      	; 0xdf22 <__fixunssfsi>
    df1a:	68 94       	set
    df1c:	b1 11       	cpse	r27, r1
    df1e:	2c c1       	rjmp	.+600    	; 0xe178 <__fp_szero>
    df20:	08 95       	ret

0000df22 <__fixunssfsi>:
    df22:	f8 d0       	rcall	.+496    	; 0xe114 <__fp_splitA>
    df24:	88 f0       	brcs	.+34     	; 0xdf48 <__fixunssfsi+0x26>
    df26:	9f 57       	subi	r25, 0x7F	; 127
    df28:	90 f0       	brcs	.+36     	; 0xdf4e <__fixunssfsi+0x2c>
    df2a:	b9 2f       	mov	r27, r25
    df2c:	99 27       	eor	r25, r25
    df2e:	b7 51       	subi	r27, 0x17	; 23
    df30:	a0 f0       	brcs	.+40     	; 0xdf5a <__fixunssfsi+0x38>
    df32:	d1 f0       	breq	.+52     	; 0xdf68 <__fixunssfsi+0x46>
    df34:	66 0f       	add	r22, r22
    df36:	77 1f       	adc	r23, r23
    df38:	88 1f       	adc	r24, r24
    df3a:	99 1f       	adc	r25, r25
    df3c:	1a f0       	brmi	.+6      	; 0xdf44 <__fixunssfsi+0x22>
    df3e:	ba 95       	dec	r27
    df40:	c9 f7       	brne	.-14     	; 0xdf34 <__fixunssfsi+0x12>
    df42:	12 c0       	rjmp	.+36     	; 0xdf68 <__fixunssfsi+0x46>
    df44:	b1 30       	cpi	r27, 0x01	; 1
    df46:	81 f0       	breq	.+32     	; 0xdf68 <__fixunssfsi+0x46>
    df48:	16 d1       	rcall	.+556    	; 0xe176 <__fp_zero>
    df4a:	b1 e0       	ldi	r27, 0x01	; 1
    df4c:	08 95       	ret
    df4e:	13 c1       	rjmp	.+550    	; 0xe176 <__fp_zero>
    df50:	67 2f       	mov	r22, r23
    df52:	78 2f       	mov	r23, r24
    df54:	88 27       	eor	r24, r24
    df56:	b8 5f       	subi	r27, 0xF8	; 248
    df58:	39 f0       	breq	.+14     	; 0xdf68 <__fixunssfsi+0x46>
    df5a:	b9 3f       	cpi	r27, 0xF9	; 249
    df5c:	cc f3       	brlt	.-14     	; 0xdf50 <__fixunssfsi+0x2e>
    df5e:	86 95       	lsr	r24
    df60:	77 95       	ror	r23
    df62:	67 95       	ror	r22
    df64:	b3 95       	inc	r27
    df66:	d9 f7       	brne	.-10     	; 0xdf5e <__fixunssfsi+0x3c>
    df68:	3e f4       	brtc	.+14     	; 0xdf78 <__fixunssfsi+0x56>
    df6a:	90 95       	com	r25
    df6c:	80 95       	com	r24
    df6e:	70 95       	com	r23
    df70:	61 95       	neg	r22
    df72:	7f 4f       	sbci	r23, 0xFF	; 255
    df74:	8f 4f       	sbci	r24, 0xFF	; 255
    df76:	9f 4f       	sbci	r25, 0xFF	; 255
    df78:	08 95       	ret

0000df7a <__floatunsisf>:
    df7a:	e8 94       	clt
    df7c:	09 c0       	rjmp	.+18     	; 0xdf90 <__floatsisf+0x12>

0000df7e <__floatsisf>:
    df7e:	97 fb       	bst	r25, 7
    df80:	3e f4       	brtc	.+14     	; 0xdf90 <__floatsisf+0x12>
    df82:	90 95       	com	r25
    df84:	80 95       	com	r24
    df86:	70 95       	com	r23
    df88:	61 95       	neg	r22
    df8a:	7f 4f       	sbci	r23, 0xFF	; 255
    df8c:	8f 4f       	sbci	r24, 0xFF	; 255
    df8e:	9f 4f       	sbci	r25, 0xFF	; 255
    df90:	99 23       	and	r25, r25
    df92:	a9 f0       	breq	.+42     	; 0xdfbe <__floatsisf+0x40>
    df94:	f9 2f       	mov	r31, r25
    df96:	96 e9       	ldi	r25, 0x96	; 150
    df98:	bb 27       	eor	r27, r27
    df9a:	93 95       	inc	r25
    df9c:	f6 95       	lsr	r31
    df9e:	87 95       	ror	r24
    dfa0:	77 95       	ror	r23
    dfa2:	67 95       	ror	r22
    dfa4:	b7 95       	ror	r27
    dfa6:	f1 11       	cpse	r31, r1
    dfa8:	f8 cf       	rjmp	.-16     	; 0xdf9a <__floatsisf+0x1c>
    dfaa:	fa f4       	brpl	.+62     	; 0xdfea <__floatsisf+0x6c>
    dfac:	bb 0f       	add	r27, r27
    dfae:	11 f4       	brne	.+4      	; 0xdfb4 <__floatsisf+0x36>
    dfb0:	60 ff       	sbrs	r22, 0
    dfb2:	1b c0       	rjmp	.+54     	; 0xdfea <__floatsisf+0x6c>
    dfb4:	6f 5f       	subi	r22, 0xFF	; 255
    dfb6:	7f 4f       	sbci	r23, 0xFF	; 255
    dfb8:	8f 4f       	sbci	r24, 0xFF	; 255
    dfba:	9f 4f       	sbci	r25, 0xFF	; 255
    dfbc:	16 c0       	rjmp	.+44     	; 0xdfea <__floatsisf+0x6c>
    dfbe:	88 23       	and	r24, r24
    dfc0:	11 f0       	breq	.+4      	; 0xdfc6 <__floatsisf+0x48>
    dfc2:	96 e9       	ldi	r25, 0x96	; 150
    dfc4:	11 c0       	rjmp	.+34     	; 0xdfe8 <__floatsisf+0x6a>
    dfc6:	77 23       	and	r23, r23
    dfc8:	21 f0       	breq	.+8      	; 0xdfd2 <__floatsisf+0x54>
    dfca:	9e e8       	ldi	r25, 0x8E	; 142
    dfcc:	87 2f       	mov	r24, r23
    dfce:	76 2f       	mov	r23, r22
    dfd0:	05 c0       	rjmp	.+10     	; 0xdfdc <__floatsisf+0x5e>
    dfd2:	66 23       	and	r22, r22
    dfd4:	71 f0       	breq	.+28     	; 0xdff2 <__floatsisf+0x74>
    dfd6:	96 e8       	ldi	r25, 0x86	; 134
    dfd8:	86 2f       	mov	r24, r22
    dfda:	70 e0       	ldi	r23, 0x00	; 0
    dfdc:	60 e0       	ldi	r22, 0x00	; 0
    dfde:	2a f0       	brmi	.+10     	; 0xdfea <__floatsisf+0x6c>
    dfe0:	9a 95       	dec	r25
    dfe2:	66 0f       	add	r22, r22
    dfe4:	77 1f       	adc	r23, r23
    dfe6:	88 1f       	adc	r24, r24
    dfe8:	da f7       	brpl	.-10     	; 0xdfe0 <__floatsisf+0x62>
    dfea:	88 0f       	add	r24, r24
    dfec:	96 95       	lsr	r25
    dfee:	87 95       	ror	r24
    dff0:	97 f9       	bld	r25, 7
    dff2:	08 95       	ret

0000dff4 <floor>:
    dff4:	a9 d0       	rcall	.+338    	; 0xe148 <__fp_trunc>
    dff6:	80 f0       	brcs	.+32     	; 0xe018 <floor+0x24>
    dff8:	9f 37       	cpi	r25, 0x7F	; 127
    dffa:	40 f4       	brcc	.+16     	; 0xe00c <floor+0x18>
    dffc:	91 11       	cpse	r25, r1
    dffe:	0e f0       	brts	.+2      	; 0xe002 <floor+0xe>
    e000:	bb c0       	rjmp	.+374    	; 0xe178 <__fp_szero>
    e002:	60 e0       	ldi	r22, 0x00	; 0
    e004:	70 e0       	ldi	r23, 0x00	; 0
    e006:	80 e8       	ldi	r24, 0x80	; 128
    e008:	9f eb       	ldi	r25, 0xBF	; 191
    e00a:	08 95       	ret
    e00c:	26 f4       	brtc	.+8      	; 0xe016 <floor+0x22>
    e00e:	1b 16       	cp	r1, r27
    e010:	61 1d       	adc	r22, r1
    e012:	71 1d       	adc	r23, r1
    e014:	81 1d       	adc	r24, r1
    e016:	2b c0       	rjmp	.+86     	; 0xe06e <__fp_mintl>
    e018:	45 c0       	rjmp	.+138    	; 0xe0a4 <__fp_mpack>

0000e01a <__fp_cmp>:
    e01a:	99 0f       	add	r25, r25
    e01c:	00 08       	sbc	r0, r0
    e01e:	55 0f       	add	r21, r21
    e020:	aa 0b       	sbc	r26, r26
    e022:	e0 e8       	ldi	r30, 0x80	; 128
    e024:	fe ef       	ldi	r31, 0xFE	; 254
    e026:	16 16       	cp	r1, r22
    e028:	17 06       	cpc	r1, r23
    e02a:	e8 07       	cpc	r30, r24
    e02c:	f9 07       	cpc	r31, r25
    e02e:	c0 f0       	brcs	.+48     	; 0xe060 <__fp_cmp+0x46>
    e030:	12 16       	cp	r1, r18
    e032:	13 06       	cpc	r1, r19
    e034:	e4 07       	cpc	r30, r20
    e036:	f5 07       	cpc	r31, r21
    e038:	98 f0       	brcs	.+38     	; 0xe060 <__fp_cmp+0x46>
    e03a:	62 1b       	sub	r22, r18
    e03c:	73 0b       	sbc	r23, r19
    e03e:	84 0b       	sbc	r24, r20
    e040:	95 0b       	sbc	r25, r21
    e042:	39 f4       	brne	.+14     	; 0xe052 <__fp_cmp+0x38>
    e044:	0a 26       	eor	r0, r26
    e046:	61 f0       	breq	.+24     	; 0xe060 <__fp_cmp+0x46>
    e048:	23 2b       	or	r18, r19
    e04a:	24 2b       	or	r18, r20
    e04c:	25 2b       	or	r18, r21
    e04e:	21 f4       	brne	.+8      	; 0xe058 <__fp_cmp+0x3e>
    e050:	08 95       	ret
    e052:	0a 26       	eor	r0, r26
    e054:	09 f4       	brne	.+2      	; 0xe058 <__fp_cmp+0x3e>
    e056:	a1 40       	sbci	r26, 0x01	; 1
    e058:	a6 95       	lsr	r26
    e05a:	8f ef       	ldi	r24, 0xFF	; 255
    e05c:	81 1d       	adc	r24, r1
    e05e:	81 1d       	adc	r24, r1
    e060:	08 95       	ret

0000e062 <__fp_inf>:
    e062:	97 f9       	bld	r25, 7
    e064:	9f 67       	ori	r25, 0x7F	; 127
    e066:	80 e8       	ldi	r24, 0x80	; 128
    e068:	70 e0       	ldi	r23, 0x00	; 0
    e06a:	60 e0       	ldi	r22, 0x00	; 0
    e06c:	08 95       	ret

0000e06e <__fp_mintl>:
    e06e:	88 23       	and	r24, r24
    e070:	71 f4       	brne	.+28     	; 0xe08e <__fp_mintl+0x20>
    e072:	77 23       	and	r23, r23
    e074:	21 f0       	breq	.+8      	; 0xe07e <__fp_mintl+0x10>
    e076:	98 50       	subi	r25, 0x08	; 8
    e078:	87 2b       	or	r24, r23
    e07a:	76 2f       	mov	r23, r22
    e07c:	07 c0       	rjmp	.+14     	; 0xe08c <__fp_mintl+0x1e>
    e07e:	66 23       	and	r22, r22
    e080:	11 f4       	brne	.+4      	; 0xe086 <__fp_mintl+0x18>
    e082:	99 27       	eor	r25, r25
    e084:	0d c0       	rjmp	.+26     	; 0xe0a0 <__fp_mintl+0x32>
    e086:	90 51       	subi	r25, 0x10	; 16
    e088:	86 2b       	or	r24, r22
    e08a:	70 e0       	ldi	r23, 0x00	; 0
    e08c:	60 e0       	ldi	r22, 0x00	; 0
    e08e:	2a f0       	brmi	.+10     	; 0xe09a <__fp_mintl+0x2c>
    e090:	9a 95       	dec	r25
    e092:	66 0f       	add	r22, r22
    e094:	77 1f       	adc	r23, r23
    e096:	88 1f       	adc	r24, r24
    e098:	da f7       	brpl	.-10     	; 0xe090 <__fp_mintl+0x22>
    e09a:	88 0f       	add	r24, r24
    e09c:	96 95       	lsr	r25
    e09e:	87 95       	ror	r24
    e0a0:	97 f9       	bld	r25, 7
    e0a2:	08 95       	ret

0000e0a4 <__fp_mpack>:
    e0a4:	9f 3f       	cpi	r25, 0xFF	; 255
    e0a6:	31 f0       	breq	.+12     	; 0xe0b4 <__fp_mpack_finite+0xc>

0000e0a8 <__fp_mpack_finite>:
    e0a8:	91 50       	subi	r25, 0x01	; 1
    e0aa:	20 f4       	brcc	.+8      	; 0xe0b4 <__fp_mpack_finite+0xc>
    e0ac:	87 95       	ror	r24
    e0ae:	77 95       	ror	r23
    e0b0:	67 95       	ror	r22
    e0b2:	b7 95       	ror	r27
    e0b4:	88 0f       	add	r24, r24
    e0b6:	91 1d       	adc	r25, r1
    e0b8:	96 95       	lsr	r25
    e0ba:	87 95       	ror	r24
    e0bc:	97 f9       	bld	r25, 7
    e0be:	08 95       	ret

0000e0c0 <__fp_nan>:
    e0c0:	9f ef       	ldi	r25, 0xFF	; 255
    e0c2:	80 ec       	ldi	r24, 0xC0	; 192
    e0c4:	08 95       	ret

0000e0c6 <__fp_pscA>:
    e0c6:	00 24       	eor	r0, r0
    e0c8:	0a 94       	dec	r0
    e0ca:	16 16       	cp	r1, r22
    e0cc:	17 06       	cpc	r1, r23
    e0ce:	18 06       	cpc	r1, r24
    e0d0:	09 06       	cpc	r0, r25
    e0d2:	08 95       	ret

0000e0d4 <__fp_pscB>:
    e0d4:	00 24       	eor	r0, r0
    e0d6:	0a 94       	dec	r0
    e0d8:	12 16       	cp	r1, r18
    e0da:	13 06       	cpc	r1, r19
    e0dc:	14 06       	cpc	r1, r20
    e0de:	05 06       	cpc	r0, r21
    e0e0:	08 95       	ret

0000e0e2 <__fp_round>:
    e0e2:	09 2e       	mov	r0, r25
    e0e4:	03 94       	inc	r0
    e0e6:	00 0c       	add	r0, r0
    e0e8:	11 f4       	brne	.+4      	; 0xe0ee <__fp_round+0xc>
    e0ea:	88 23       	and	r24, r24
    e0ec:	52 f0       	brmi	.+20     	; 0xe102 <__fp_round+0x20>
    e0ee:	bb 0f       	add	r27, r27
    e0f0:	40 f4       	brcc	.+16     	; 0xe102 <__fp_round+0x20>
    e0f2:	bf 2b       	or	r27, r31
    e0f4:	11 f4       	brne	.+4      	; 0xe0fa <__fp_round+0x18>
    e0f6:	60 ff       	sbrs	r22, 0
    e0f8:	04 c0       	rjmp	.+8      	; 0xe102 <__fp_round+0x20>
    e0fa:	6f 5f       	subi	r22, 0xFF	; 255
    e0fc:	7f 4f       	sbci	r23, 0xFF	; 255
    e0fe:	8f 4f       	sbci	r24, 0xFF	; 255
    e100:	9f 4f       	sbci	r25, 0xFF	; 255
    e102:	08 95       	ret

0000e104 <__fp_split3>:
    e104:	57 fd       	sbrc	r21, 7
    e106:	90 58       	subi	r25, 0x80	; 128
    e108:	44 0f       	add	r20, r20
    e10a:	55 1f       	adc	r21, r21
    e10c:	59 f0       	breq	.+22     	; 0xe124 <__fp_splitA+0x10>
    e10e:	5f 3f       	cpi	r21, 0xFF	; 255
    e110:	71 f0       	breq	.+28     	; 0xe12e <__fp_splitA+0x1a>
    e112:	47 95       	ror	r20

0000e114 <__fp_splitA>:
    e114:	88 0f       	add	r24, r24
    e116:	97 fb       	bst	r25, 7
    e118:	99 1f       	adc	r25, r25
    e11a:	61 f0       	breq	.+24     	; 0xe134 <__fp_splitA+0x20>
    e11c:	9f 3f       	cpi	r25, 0xFF	; 255
    e11e:	79 f0       	breq	.+30     	; 0xe13e <__fp_splitA+0x2a>
    e120:	87 95       	ror	r24
    e122:	08 95       	ret
    e124:	12 16       	cp	r1, r18
    e126:	13 06       	cpc	r1, r19
    e128:	14 06       	cpc	r1, r20
    e12a:	55 1f       	adc	r21, r21
    e12c:	f2 cf       	rjmp	.-28     	; 0xe112 <__fp_split3+0xe>
    e12e:	46 95       	lsr	r20
    e130:	f1 df       	rcall	.-30     	; 0xe114 <__fp_splitA>
    e132:	08 c0       	rjmp	.+16     	; 0xe144 <__fp_splitA+0x30>
    e134:	16 16       	cp	r1, r22
    e136:	17 06       	cpc	r1, r23
    e138:	18 06       	cpc	r1, r24
    e13a:	99 1f       	adc	r25, r25
    e13c:	f1 cf       	rjmp	.-30     	; 0xe120 <__fp_splitA+0xc>
    e13e:	86 95       	lsr	r24
    e140:	71 05       	cpc	r23, r1
    e142:	61 05       	cpc	r22, r1
    e144:	08 94       	sec
    e146:	08 95       	ret

0000e148 <__fp_trunc>:
    e148:	e5 df       	rcall	.-54     	; 0xe114 <__fp_splitA>
    e14a:	a0 f0       	brcs	.+40     	; 0xe174 <__fp_trunc+0x2c>
    e14c:	be e7       	ldi	r27, 0x7E	; 126
    e14e:	b9 17       	cp	r27, r25
    e150:	88 f4       	brcc	.+34     	; 0xe174 <__fp_trunc+0x2c>
    e152:	bb 27       	eor	r27, r27
    e154:	9f 38       	cpi	r25, 0x8F	; 143
    e156:	60 f4       	brcc	.+24     	; 0xe170 <__fp_trunc+0x28>
    e158:	16 16       	cp	r1, r22
    e15a:	b1 1d       	adc	r27, r1
    e15c:	67 2f       	mov	r22, r23
    e15e:	78 2f       	mov	r23, r24
    e160:	88 27       	eor	r24, r24
    e162:	98 5f       	subi	r25, 0xF8	; 248
    e164:	f7 cf       	rjmp	.-18     	; 0xe154 <__fp_trunc+0xc>
    e166:	86 95       	lsr	r24
    e168:	77 95       	ror	r23
    e16a:	67 95       	ror	r22
    e16c:	b1 1d       	adc	r27, r1
    e16e:	93 95       	inc	r25
    e170:	96 39       	cpi	r25, 0x96	; 150
    e172:	c8 f3       	brcs	.-14     	; 0xe166 <__fp_trunc+0x1e>
    e174:	08 95       	ret

0000e176 <__fp_zero>:
    e176:	e8 94       	clt

0000e178 <__fp_szero>:
    e178:	bb 27       	eor	r27, r27
    e17a:	66 27       	eor	r22, r22
    e17c:	77 27       	eor	r23, r23
    e17e:	cb 01       	movw	r24, r22
    e180:	97 f9       	bld	r25, 7
    e182:	08 95       	ret

0000e184 <__gesf2>:
    e184:	4a df       	rcall	.-364    	; 0xe01a <__fp_cmp>
    e186:	08 f4       	brcc	.+2      	; 0xe18a <__gesf2+0x6>
    e188:	8f ef       	ldi	r24, 0xFF	; 255
    e18a:	08 95       	ret

0000e18c <__mulsf3>:
    e18c:	0b d0       	rcall	.+22     	; 0xe1a4 <__mulsf3x>
    e18e:	a9 cf       	rjmp	.-174    	; 0xe0e2 <__fp_round>
    e190:	9a df       	rcall	.-204    	; 0xe0c6 <__fp_pscA>
    e192:	28 f0       	brcs	.+10     	; 0xe19e <__mulsf3+0x12>
    e194:	9f df       	rcall	.-194    	; 0xe0d4 <__fp_pscB>
    e196:	18 f0       	brcs	.+6      	; 0xe19e <__mulsf3+0x12>
    e198:	95 23       	and	r25, r21
    e19a:	09 f0       	breq	.+2      	; 0xe19e <__mulsf3+0x12>
    e19c:	62 cf       	rjmp	.-316    	; 0xe062 <__fp_inf>
    e19e:	90 cf       	rjmp	.-224    	; 0xe0c0 <__fp_nan>
    e1a0:	11 24       	eor	r1, r1
    e1a2:	ea cf       	rjmp	.-44     	; 0xe178 <__fp_szero>

0000e1a4 <__mulsf3x>:
    e1a4:	af df       	rcall	.-162    	; 0xe104 <__fp_split3>
    e1a6:	a0 f3       	brcs	.-24     	; 0xe190 <__mulsf3+0x4>

0000e1a8 <__mulsf3_pse>:
    e1a8:	95 9f       	mul	r25, r21
    e1aa:	d1 f3       	breq	.-12     	; 0xe1a0 <__mulsf3+0x14>
    e1ac:	95 0f       	add	r25, r21
    e1ae:	50 e0       	ldi	r21, 0x00	; 0
    e1b0:	55 1f       	adc	r21, r21
    e1b2:	62 9f       	mul	r22, r18
    e1b4:	f0 01       	movw	r30, r0
    e1b6:	72 9f       	mul	r23, r18
    e1b8:	bb 27       	eor	r27, r27
    e1ba:	f0 0d       	add	r31, r0
    e1bc:	b1 1d       	adc	r27, r1
    e1be:	63 9f       	mul	r22, r19
    e1c0:	aa 27       	eor	r26, r26
    e1c2:	f0 0d       	add	r31, r0
    e1c4:	b1 1d       	adc	r27, r1
    e1c6:	aa 1f       	adc	r26, r26
    e1c8:	64 9f       	mul	r22, r20
    e1ca:	66 27       	eor	r22, r22
    e1cc:	b0 0d       	add	r27, r0
    e1ce:	a1 1d       	adc	r26, r1
    e1d0:	66 1f       	adc	r22, r22
    e1d2:	82 9f       	mul	r24, r18
    e1d4:	22 27       	eor	r18, r18
    e1d6:	b0 0d       	add	r27, r0
    e1d8:	a1 1d       	adc	r26, r1
    e1da:	62 1f       	adc	r22, r18
    e1dc:	73 9f       	mul	r23, r19
    e1de:	b0 0d       	add	r27, r0
    e1e0:	a1 1d       	adc	r26, r1
    e1e2:	62 1f       	adc	r22, r18
    e1e4:	83 9f       	mul	r24, r19
    e1e6:	a0 0d       	add	r26, r0
    e1e8:	61 1d       	adc	r22, r1
    e1ea:	22 1f       	adc	r18, r18
    e1ec:	74 9f       	mul	r23, r20
    e1ee:	33 27       	eor	r19, r19
    e1f0:	a0 0d       	add	r26, r0
    e1f2:	61 1d       	adc	r22, r1
    e1f4:	23 1f       	adc	r18, r19
    e1f6:	84 9f       	mul	r24, r20
    e1f8:	60 0d       	add	r22, r0
    e1fa:	21 1d       	adc	r18, r1
    e1fc:	82 2f       	mov	r24, r18
    e1fe:	76 2f       	mov	r23, r22
    e200:	6a 2f       	mov	r22, r26
    e202:	11 24       	eor	r1, r1
    e204:	9f 57       	subi	r25, 0x7F	; 127
    e206:	50 40       	sbci	r21, 0x00	; 0
    e208:	8a f0       	brmi	.+34     	; 0xe22c <__mulsf3_pse+0x84>
    e20a:	e1 f0       	breq	.+56     	; 0xe244 <__mulsf3_pse+0x9c>
    e20c:	88 23       	and	r24, r24
    e20e:	4a f0       	brmi	.+18     	; 0xe222 <__mulsf3_pse+0x7a>
    e210:	ee 0f       	add	r30, r30
    e212:	ff 1f       	adc	r31, r31
    e214:	bb 1f       	adc	r27, r27
    e216:	66 1f       	adc	r22, r22
    e218:	77 1f       	adc	r23, r23
    e21a:	88 1f       	adc	r24, r24
    e21c:	91 50       	subi	r25, 0x01	; 1
    e21e:	50 40       	sbci	r21, 0x00	; 0
    e220:	a9 f7       	brne	.-22     	; 0xe20c <__mulsf3_pse+0x64>
    e222:	9e 3f       	cpi	r25, 0xFE	; 254
    e224:	51 05       	cpc	r21, r1
    e226:	70 f0       	brcs	.+28     	; 0xe244 <__mulsf3_pse+0x9c>
    e228:	1c cf       	rjmp	.-456    	; 0xe062 <__fp_inf>
    e22a:	a6 cf       	rjmp	.-180    	; 0xe178 <__fp_szero>
    e22c:	5f 3f       	cpi	r21, 0xFF	; 255
    e22e:	ec f3       	brlt	.-6      	; 0xe22a <__mulsf3_pse+0x82>
    e230:	98 3e       	cpi	r25, 0xE8	; 232
    e232:	dc f3       	brlt	.-10     	; 0xe22a <__mulsf3_pse+0x82>
    e234:	86 95       	lsr	r24
    e236:	77 95       	ror	r23
    e238:	67 95       	ror	r22
    e23a:	b7 95       	ror	r27
    e23c:	f7 95       	ror	r31
    e23e:	e7 95       	ror	r30
    e240:	9f 5f       	subi	r25, 0xFF	; 255
    e242:	c1 f7       	brne	.-16     	; 0xe234 <__mulsf3_pse+0x8c>
    e244:	fe 2b       	or	r31, r30
    e246:	88 0f       	add	r24, r24
    e248:	91 1d       	adc	r25, r1
    e24a:	96 95       	lsr	r25
    e24c:	87 95       	ror	r24
    e24e:	97 f9       	bld	r25, 7
    e250:	08 95       	ret

0000e252 <pow>:
    e252:	fa 01       	movw	r30, r20
    e254:	ee 0f       	add	r30, r30
    e256:	ff 1f       	adc	r31, r31
    e258:	30 96       	adiw	r30, 0x00	; 0
    e25a:	21 05       	cpc	r18, r1
    e25c:	31 05       	cpc	r19, r1
    e25e:	99 f1       	breq	.+102    	; 0xe2c6 <pow+0x74>
    e260:	61 15       	cp	r22, r1
    e262:	71 05       	cpc	r23, r1
    e264:	61 f4       	brne	.+24     	; 0xe27e <pow+0x2c>
    e266:	80 38       	cpi	r24, 0x80	; 128
    e268:	bf e3       	ldi	r27, 0x3F	; 63
    e26a:	9b 07       	cpc	r25, r27
    e26c:	49 f1       	breq	.+82     	; 0xe2c0 <pow+0x6e>
    e26e:	68 94       	set
    e270:	90 38       	cpi	r25, 0x80	; 128
    e272:	81 05       	cpc	r24, r1
    e274:	61 f0       	breq	.+24     	; 0xe28e <pow+0x3c>
    e276:	80 38       	cpi	r24, 0x80	; 128
    e278:	bf ef       	ldi	r27, 0xFF	; 255
    e27a:	9b 07       	cpc	r25, r27
    e27c:	41 f0       	breq	.+16     	; 0xe28e <pow+0x3c>
    e27e:	99 23       	and	r25, r25
    e280:	42 f5       	brpl	.+80     	; 0xe2d2 <pow+0x80>
    e282:	ff 3f       	cpi	r31, 0xFF	; 255
    e284:	e1 05       	cpc	r30, r1
    e286:	31 05       	cpc	r19, r1
    e288:	21 05       	cpc	r18, r1
    e28a:	11 f1       	breq	.+68     	; 0xe2d0 <pow+0x7e>
    e28c:	e8 94       	clt
    e28e:	08 94       	sec
    e290:	e7 95       	ror	r30
    e292:	d9 01       	movw	r26, r18
    e294:	aa 23       	and	r26, r26
    e296:	29 f4       	brne	.+10     	; 0xe2a2 <pow+0x50>
    e298:	ab 2f       	mov	r26, r27
    e29a:	be 2f       	mov	r27, r30
    e29c:	f8 5f       	subi	r31, 0xF8	; 248
    e29e:	d0 f3       	brcs	.-12     	; 0xe294 <pow+0x42>
    e2a0:	10 c0       	rjmp	.+32     	; 0xe2c2 <pow+0x70>
    e2a2:	ff 5f       	subi	r31, 0xFF	; 255
    e2a4:	70 f4       	brcc	.+28     	; 0xe2c2 <pow+0x70>
    e2a6:	a6 95       	lsr	r26
    e2a8:	e0 f7       	brcc	.-8      	; 0xe2a2 <pow+0x50>
    e2aa:	f7 39       	cpi	r31, 0x97	; 151
    e2ac:	50 f0       	brcs	.+20     	; 0xe2c2 <pow+0x70>
    e2ae:	19 f0       	breq	.+6      	; 0xe2b6 <pow+0x64>
    e2b0:	ff 3a       	cpi	r31, 0xAF	; 175
    e2b2:	38 f4       	brcc	.+14     	; 0xe2c2 <pow+0x70>
    e2b4:	9f 77       	andi	r25, 0x7F	; 127
    e2b6:	9f 93       	push	r25
    e2b8:	0c d0       	rcall	.+24     	; 0xe2d2 <pow+0x80>
    e2ba:	0f 90       	pop	r0
    e2bc:	07 fc       	sbrc	r0, 7
    e2be:	90 58       	subi	r25, 0x80	; 128
    e2c0:	08 95       	ret
    e2c2:	3e f0       	brts	.+14     	; 0xe2d2 <pow+0x80>
    e2c4:	fd ce       	rjmp	.-518    	; 0xe0c0 <__fp_nan>
    e2c6:	60 e0       	ldi	r22, 0x00	; 0
    e2c8:	70 e0       	ldi	r23, 0x00	; 0
    e2ca:	80 e8       	ldi	r24, 0x80	; 128
    e2cc:	9f e3       	ldi	r25, 0x3F	; 63
    e2ce:	08 95       	ret
    e2d0:	4f e7       	ldi	r20, 0x7F	; 127
    e2d2:	9f 77       	andi	r25, 0x7F	; 127
    e2d4:	5f 93       	push	r21
    e2d6:	4f 93       	push	r20
    e2d8:	3f 93       	push	r19
    e2da:	2f 93       	push	r18
    e2dc:	ae d0       	rcall	.+348    	; 0xe43a <log>
    e2de:	2f 91       	pop	r18
    e2e0:	3f 91       	pop	r19
    e2e2:	4f 91       	pop	r20
    e2e4:	5f 91       	pop	r21
    e2e6:	52 df       	rcall	.-348    	; 0xe18c <__mulsf3>
    e2e8:	15 c0       	rjmp	.+42     	; 0xe314 <exp>

0000e2ea <strrev>:
    e2ea:	dc 01       	movw	r26, r24
    e2ec:	fc 01       	movw	r30, r24
    e2ee:	67 2f       	mov	r22, r23
    e2f0:	71 91       	ld	r23, Z+
    e2f2:	77 23       	and	r23, r23
    e2f4:	e1 f7       	brne	.-8      	; 0xe2ee <strrev+0x4>
    e2f6:	32 97       	sbiw	r30, 0x02	; 2
    e2f8:	04 c0       	rjmp	.+8      	; 0xe302 <strrev+0x18>
    e2fa:	7c 91       	ld	r23, X
    e2fc:	6d 93       	st	X+, r22
    e2fe:	70 83       	st	Z, r23
    e300:	62 91       	ld	r22, -Z
    e302:	ae 17       	cp	r26, r30
    e304:	bf 07       	cpc	r27, r31
    e306:	c8 f3       	brcs	.-14     	; 0xe2fa <strrev+0x10>
    e308:	08 95       	ret
    e30a:	19 f4       	brne	.+6      	; 0xe312 <strrev+0x28>
    e30c:	0e f0       	brts	.+2      	; 0xe310 <strrev+0x26>
    e30e:	a9 ce       	rjmp	.-686    	; 0xe062 <__fp_inf>
    e310:	32 cf       	rjmp	.-412    	; 0xe176 <__fp_zero>
    e312:	d6 ce       	rjmp	.-596    	; 0xe0c0 <__fp_nan>

0000e314 <exp>:
    e314:	ff de       	rcall	.-514    	; 0xe114 <__fp_splitA>
    e316:	c8 f3       	brcs	.-14     	; 0xe30a <strrev+0x20>
    e318:	96 38       	cpi	r25, 0x86	; 134
    e31a:	c0 f7       	brcc	.-16     	; 0xe30c <strrev+0x22>
    e31c:	07 f8       	bld	r0, 7
    e31e:	0f 92       	push	r0
    e320:	e8 94       	clt
    e322:	2b e3       	ldi	r18, 0x3B	; 59
    e324:	3a ea       	ldi	r19, 0xAA	; 170
    e326:	48 eb       	ldi	r20, 0xB8	; 184
    e328:	5f e7       	ldi	r21, 0x7F	; 127
    e32a:	3e df       	rcall	.-388    	; 0xe1a8 <__mulsf3_pse>
    e32c:	0f 92       	push	r0
    e32e:	0f 92       	push	r0
    e330:	0f 92       	push	r0
    e332:	4d b7       	in	r20, 0x3d	; 61
    e334:	5e b7       	in	r21, 0x3e	; 62
    e336:	0f 92       	push	r0
    e338:	c0 d0       	rcall	.+384    	; 0xe4ba <modf>
    e33a:	ec e8       	ldi	r30, 0x8C	; 140
    e33c:	f0 e0       	ldi	r31, 0x00	; 0
    e33e:	16 d0       	rcall	.+44     	; 0xe36c <__fp_powser>
    e340:	4f 91       	pop	r20
    e342:	5f 91       	pop	r21
    e344:	ef 91       	pop	r30
    e346:	ff 91       	pop	r31
    e348:	e5 95       	asr	r30
    e34a:	ee 1f       	adc	r30, r30
    e34c:	ff 1f       	adc	r31, r31
    e34e:	49 f0       	breq	.+18     	; 0xe362 <exp+0x4e>
    e350:	fe 57       	subi	r31, 0x7E	; 126
    e352:	e0 68       	ori	r30, 0x80	; 128
    e354:	44 27       	eor	r20, r20
    e356:	ee 0f       	add	r30, r30
    e358:	44 1f       	adc	r20, r20
    e35a:	fa 95       	dec	r31
    e35c:	e1 f7       	brne	.-8      	; 0xe356 <exp+0x42>
    e35e:	41 95       	neg	r20
    e360:	55 0b       	sbc	r21, r21
    e362:	32 d0       	rcall	.+100    	; 0xe3c8 <ldexp>
    e364:	0f 90       	pop	r0
    e366:	07 fe       	sbrs	r0, 7
    e368:	26 c0       	rjmp	.+76     	; 0xe3b6 <inverse>
    e36a:	08 95       	ret

0000e36c <__fp_powser>:
    e36c:	df 93       	push	r29
    e36e:	cf 93       	push	r28
    e370:	1f 93       	push	r17
    e372:	0f 93       	push	r16
    e374:	ff 92       	push	r15
    e376:	ef 92       	push	r14
    e378:	df 92       	push	r13
    e37a:	7b 01       	movw	r14, r22
    e37c:	8c 01       	movw	r16, r24
    e37e:	68 94       	set
    e380:	05 c0       	rjmp	.+10     	; 0xe38c <__fp_powser+0x20>
    e382:	da 2e       	mov	r13, r26
    e384:	ef 01       	movw	r28, r30
    e386:	0e df       	rcall	.-484    	; 0xe1a4 <__mulsf3x>
    e388:	fe 01       	movw	r30, r28
    e38a:	e8 94       	clt
    e38c:	a5 91       	lpm	r26, Z+
    e38e:	25 91       	lpm	r18, Z+
    e390:	35 91       	lpm	r19, Z+
    e392:	45 91       	lpm	r20, Z+
    e394:	55 91       	lpm	r21, Z+
    e396:	ae f3       	brts	.-22     	; 0xe382 <__fp_powser+0x16>
    e398:	ef 01       	movw	r28, r30
    e39a:	ff dc       	rcall	.-1538   	; 0xdd9a <__addsf3x>
    e39c:	fe 01       	movw	r30, r28
    e39e:	97 01       	movw	r18, r14
    e3a0:	a8 01       	movw	r20, r16
    e3a2:	da 94       	dec	r13
    e3a4:	79 f7       	brne	.-34     	; 0xe384 <__fp_powser+0x18>
    e3a6:	df 90       	pop	r13
    e3a8:	ef 90       	pop	r14
    e3aa:	ff 90       	pop	r15
    e3ac:	0f 91       	pop	r16
    e3ae:	1f 91       	pop	r17
    e3b0:	cf 91       	pop	r28
    e3b2:	df 91       	pop	r29
    e3b4:	08 95       	ret

0000e3b6 <inverse>:
    e3b6:	9b 01       	movw	r18, r22
    e3b8:	ac 01       	movw	r20, r24
    e3ba:	60 e0       	ldi	r22, 0x00	; 0
    e3bc:	70 e0       	ldi	r23, 0x00	; 0
    e3be:	80 e8       	ldi	r24, 0x80	; 128
    e3c0:	9f e3       	ldi	r25, 0x3F	; 63
    e3c2:	42 cd       	rjmp	.-1404   	; 0xde48 <__divsf3>
    e3c4:	4e ce       	rjmp	.-868    	; 0xe062 <__fp_inf>
    e3c6:	6e ce       	rjmp	.-804    	; 0xe0a4 <__fp_mpack>

0000e3c8 <ldexp>:
    e3c8:	a5 de       	rcall	.-694    	; 0xe114 <__fp_splitA>
    e3ca:	e8 f3       	brcs	.-6      	; 0xe3c6 <inverse+0x10>
    e3cc:	99 23       	and	r25, r25
    e3ce:	d9 f3       	breq	.-10     	; 0xe3c6 <inverse+0x10>
    e3d0:	94 0f       	add	r25, r20
    e3d2:	51 1d       	adc	r21, r1
    e3d4:	bb f3       	brvs	.-18     	; 0xe3c4 <inverse+0xe>
    e3d6:	91 50       	subi	r25, 0x01	; 1
    e3d8:	50 40       	sbci	r21, 0x00	; 0
    e3da:	94 f0       	brlt	.+36     	; 0xe400 <ldexp+0x38>
    e3dc:	59 f0       	breq	.+22     	; 0xe3f4 <ldexp+0x2c>
    e3de:	88 23       	and	r24, r24
    e3e0:	32 f0       	brmi	.+12     	; 0xe3ee <ldexp+0x26>
    e3e2:	66 0f       	add	r22, r22
    e3e4:	77 1f       	adc	r23, r23
    e3e6:	88 1f       	adc	r24, r24
    e3e8:	91 50       	subi	r25, 0x01	; 1
    e3ea:	50 40       	sbci	r21, 0x00	; 0
    e3ec:	c1 f7       	brne	.-16     	; 0xe3de <ldexp+0x16>
    e3ee:	9e 3f       	cpi	r25, 0xFE	; 254
    e3f0:	51 05       	cpc	r21, r1
    e3f2:	44 f7       	brge	.-48     	; 0xe3c4 <inverse+0xe>
    e3f4:	88 0f       	add	r24, r24
    e3f6:	91 1d       	adc	r25, r1
    e3f8:	96 95       	lsr	r25
    e3fa:	87 95       	ror	r24
    e3fc:	97 f9       	bld	r25, 7
    e3fe:	08 95       	ret
    e400:	5f 3f       	cpi	r21, 0xFF	; 255
    e402:	ac f0       	brlt	.+42     	; 0xe42e <ldexp+0x66>
    e404:	98 3e       	cpi	r25, 0xE8	; 232
    e406:	9c f0       	brlt	.+38     	; 0xe42e <ldexp+0x66>
    e408:	bb 27       	eor	r27, r27
    e40a:	86 95       	lsr	r24
    e40c:	77 95       	ror	r23
    e40e:	67 95       	ror	r22
    e410:	b7 95       	ror	r27
    e412:	08 f4       	brcc	.+2      	; 0xe416 <ldexp+0x4e>
    e414:	b1 60       	ori	r27, 0x01	; 1
    e416:	93 95       	inc	r25
    e418:	c1 f7       	brne	.-16     	; 0xe40a <ldexp+0x42>
    e41a:	bb 0f       	add	r27, r27
    e41c:	58 f7       	brcc	.-42     	; 0xe3f4 <ldexp+0x2c>
    e41e:	11 f4       	brne	.+4      	; 0xe424 <ldexp+0x5c>
    e420:	60 ff       	sbrs	r22, 0
    e422:	e8 cf       	rjmp	.-48     	; 0xe3f4 <ldexp+0x2c>
    e424:	6f 5f       	subi	r22, 0xFF	; 255
    e426:	7f 4f       	sbci	r23, 0xFF	; 255
    e428:	8f 4f       	sbci	r24, 0xFF	; 255
    e42a:	9f 4f       	sbci	r25, 0xFF	; 255
    e42c:	e3 cf       	rjmp	.-58     	; 0xe3f4 <ldexp+0x2c>
    e42e:	a4 ce       	rjmp	.-696    	; 0xe178 <__fp_szero>
    e430:	0e f0       	brts	.+2      	; 0xe434 <ldexp+0x6c>
    e432:	38 ce       	rjmp	.-912    	; 0xe0a4 <__fp_mpack>
    e434:	45 ce       	rjmp	.-886    	; 0xe0c0 <__fp_nan>
    e436:	68 94       	set
    e438:	14 ce       	rjmp	.-984    	; 0xe062 <__fp_inf>

0000e43a <log>:
    e43a:	6c de       	rcall	.-808    	; 0xe114 <__fp_splitA>
    e43c:	c8 f3       	brcs	.-14     	; 0xe430 <ldexp+0x68>
    e43e:	99 23       	and	r25, r25
    e440:	d1 f3       	breq	.-12     	; 0xe436 <ldexp+0x6e>
    e442:	c6 f3       	brts	.-16     	; 0xe434 <ldexp+0x6c>
    e444:	df 93       	push	r29
    e446:	cf 93       	push	r28
    e448:	1f 93       	push	r17
    e44a:	0f 93       	push	r16
    e44c:	ff 92       	push	r15
    e44e:	c9 2f       	mov	r28, r25
    e450:	dd 27       	eor	r29, r29
    e452:	88 23       	and	r24, r24
    e454:	2a f0       	brmi	.+10     	; 0xe460 <log+0x26>
    e456:	21 97       	sbiw	r28, 0x01	; 1
    e458:	66 0f       	add	r22, r22
    e45a:	77 1f       	adc	r23, r23
    e45c:	88 1f       	adc	r24, r24
    e45e:	da f7       	brpl	.-10     	; 0xe456 <log+0x1c>
    e460:	20 e0       	ldi	r18, 0x00	; 0
    e462:	30 e0       	ldi	r19, 0x00	; 0
    e464:	40 e8       	ldi	r20, 0x80	; 128
    e466:	5f eb       	ldi	r21, 0xBF	; 191
    e468:	9f e3       	ldi	r25, 0x3F	; 63
    e46a:	88 39       	cpi	r24, 0x98	; 152
    e46c:	20 f0       	brcs	.+8      	; 0xe476 <log+0x3c>
    e46e:	80 3e       	cpi	r24, 0xE0	; 224
    e470:	30 f0       	brcs	.+12     	; 0xe47e <log+0x44>
    e472:	21 96       	adiw	r28, 0x01	; 1
    e474:	8f 77       	andi	r24, 0x7F	; 127
    e476:	80 dc       	rcall	.-1792   	; 0xdd78 <__addsf3>
    e478:	e4 eb       	ldi	r30, 0xB4	; 180
    e47a:	f0 e0       	ldi	r31, 0x00	; 0
    e47c:	03 c0       	rjmp	.+6      	; 0xe484 <log+0x4a>
    e47e:	7c dc       	rcall	.-1800   	; 0xdd78 <__addsf3>
    e480:	e1 ee       	ldi	r30, 0xE1	; 225
    e482:	f0 e0       	ldi	r31, 0x00	; 0
    e484:	73 df       	rcall	.-282    	; 0xe36c <__fp_powser>
    e486:	8b 01       	movw	r16, r22
    e488:	be 01       	movw	r22, r28
    e48a:	ec 01       	movw	r28, r24
    e48c:	fb 2e       	mov	r15, r27
    e48e:	6f 57       	subi	r22, 0x7F	; 127
    e490:	71 09       	sbc	r23, r1
    e492:	75 95       	asr	r23
    e494:	77 1f       	adc	r23, r23
    e496:	88 0b       	sbc	r24, r24
    e498:	99 0b       	sbc	r25, r25
    e49a:	71 dd       	rcall	.-1310   	; 0xdf7e <__floatsisf>
    e49c:	28 e1       	ldi	r18, 0x18	; 24
    e49e:	32 e7       	ldi	r19, 0x72	; 114
    e4a0:	41 e3       	ldi	r20, 0x31	; 49
    e4a2:	5f e3       	ldi	r21, 0x3F	; 63
    e4a4:	7f de       	rcall	.-770    	; 0xe1a4 <__mulsf3x>
    e4a6:	af 2d       	mov	r26, r15
    e4a8:	98 01       	movw	r18, r16
    e4aa:	ae 01       	movw	r20, r28
    e4ac:	ff 90       	pop	r15
    e4ae:	0f 91       	pop	r16
    e4b0:	1f 91       	pop	r17
    e4b2:	cf 91       	pop	r28
    e4b4:	df 91       	pop	r29
    e4b6:	71 dc       	rcall	.-1822   	; 0xdd9a <__addsf3x>
    e4b8:	14 ce       	rjmp	.-984    	; 0xe0e2 <__fp_round>

0000e4ba <modf>:
    e4ba:	fa 01       	movw	r30, r20
    e4bc:	dc 01       	movw	r26, r24
    e4be:	aa 0f       	add	r26, r26
    e4c0:	bb 1f       	adc	r27, r27
    e4c2:	9b 01       	movw	r18, r22
    e4c4:	ac 01       	movw	r20, r24
    e4c6:	bf 57       	subi	r27, 0x7F	; 127
    e4c8:	28 f4       	brcc	.+10     	; 0xe4d4 <modf+0x1a>
    e4ca:	22 27       	eor	r18, r18
    e4cc:	33 27       	eor	r19, r19
    e4ce:	44 27       	eor	r20, r20
    e4d0:	50 78       	andi	r21, 0x80	; 128
    e4d2:	1f c0       	rjmp	.+62     	; 0xe512 <modf+0x58>
    e4d4:	b7 51       	subi	r27, 0x17	; 23
    e4d6:	88 f4       	brcc	.+34     	; 0xe4fa <modf+0x40>
    e4d8:	ab 2f       	mov	r26, r27
    e4da:	00 24       	eor	r0, r0
    e4dc:	46 95       	lsr	r20
    e4de:	37 95       	ror	r19
    e4e0:	27 95       	ror	r18
    e4e2:	01 1c       	adc	r0, r1
    e4e4:	a3 95       	inc	r26
    e4e6:	d2 f3       	brmi	.-12     	; 0xe4dc <modf+0x22>
    e4e8:	00 20       	and	r0, r0
    e4ea:	69 f0       	breq	.+26     	; 0xe506 <modf+0x4c>
    e4ec:	22 0f       	add	r18, r18
    e4ee:	33 1f       	adc	r19, r19
    e4f0:	44 1f       	adc	r20, r20
    e4f2:	b3 95       	inc	r27
    e4f4:	da f3       	brmi	.-10     	; 0xe4ec <modf+0x32>
    e4f6:	0d d0       	rcall	.+26     	; 0xe512 <modf+0x58>
    e4f8:	3e cc       	rjmp	.-1924   	; 0xdd76 <__subsf3>
    e4fa:	61 30       	cpi	r22, 0x01	; 1
    e4fc:	71 05       	cpc	r23, r1
    e4fe:	a0 e8       	ldi	r26, 0x80	; 128
    e500:	8a 07       	cpc	r24, r26
    e502:	b9 46       	sbci	r27, 0x69	; 105
    e504:	30 f4       	brcc	.+12     	; 0xe512 <modf+0x58>
    e506:	9b 01       	movw	r18, r22
    e508:	ac 01       	movw	r20, r24
    e50a:	66 27       	eor	r22, r22
    e50c:	77 27       	eor	r23, r23
    e50e:	88 27       	eor	r24, r24
    e510:	90 78       	andi	r25, 0x80	; 128
    e512:	30 96       	adiw	r30, 0x00	; 0
    e514:	21 f0       	breq	.+8      	; 0xe51e <modf+0x64>
    e516:	20 83       	st	Z, r18
    e518:	31 83       	std	Z+1, r19	; 0x01
    e51a:	42 83       	std	Z+2, r20	; 0x02
    e51c:	53 83       	std	Z+3, r21	; 0x03
    e51e:	08 95       	ret

0000e520 <__mulsi3>:
    e520:	62 9f       	mul	r22, r18
    e522:	d0 01       	movw	r26, r0
    e524:	73 9f       	mul	r23, r19
    e526:	f0 01       	movw	r30, r0
    e528:	82 9f       	mul	r24, r18
    e52a:	e0 0d       	add	r30, r0
    e52c:	f1 1d       	adc	r31, r1
    e52e:	64 9f       	mul	r22, r20
    e530:	e0 0d       	add	r30, r0
    e532:	f1 1d       	adc	r31, r1
    e534:	92 9f       	mul	r25, r18
    e536:	f0 0d       	add	r31, r0
    e538:	83 9f       	mul	r24, r19
    e53a:	f0 0d       	add	r31, r0
    e53c:	74 9f       	mul	r23, r20
    e53e:	f0 0d       	add	r31, r0
    e540:	65 9f       	mul	r22, r21
    e542:	f0 0d       	add	r31, r0
    e544:	99 27       	eor	r25, r25
    e546:	72 9f       	mul	r23, r18
    e548:	b0 0d       	add	r27, r0
    e54a:	e1 1d       	adc	r30, r1
    e54c:	f9 1f       	adc	r31, r25
    e54e:	63 9f       	mul	r22, r19
    e550:	b0 0d       	add	r27, r0
    e552:	e1 1d       	adc	r30, r1
    e554:	f9 1f       	adc	r31, r25
    e556:	bd 01       	movw	r22, r26
    e558:	cf 01       	movw	r24, r30
    e55a:	11 24       	eor	r1, r1
    e55c:	08 95       	ret

0000e55e <__udivmodhi4>:
    e55e:	aa 1b       	sub	r26, r26
    e560:	bb 1b       	sub	r27, r27
    e562:	51 e1       	ldi	r21, 0x11	; 17
    e564:	07 c0       	rjmp	.+14     	; 0xe574 <__udivmodhi4_ep>

0000e566 <__udivmodhi4_loop>:
    e566:	aa 1f       	adc	r26, r26
    e568:	bb 1f       	adc	r27, r27
    e56a:	a6 17       	cp	r26, r22
    e56c:	b7 07       	cpc	r27, r23
    e56e:	10 f0       	brcs	.+4      	; 0xe574 <__udivmodhi4_ep>
    e570:	a6 1b       	sub	r26, r22
    e572:	b7 0b       	sbc	r27, r23

0000e574 <__udivmodhi4_ep>:
    e574:	88 1f       	adc	r24, r24
    e576:	99 1f       	adc	r25, r25
    e578:	5a 95       	dec	r21
    e57a:	a9 f7       	brne	.-22     	; 0xe566 <__udivmodhi4_loop>
    e57c:	80 95       	com	r24
    e57e:	90 95       	com	r25
    e580:	bc 01       	movw	r22, r24
    e582:	cd 01       	movw	r24, r26
    e584:	08 95       	ret

0000e586 <_exit>:
    e586:	f8 94       	cli

0000e588 <__stop_program>:
    e588:	ff cf       	rjmp	.-2      	; 0xe588 <__stop_program>
